
H755_GNC_001_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084ac  080084ac  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080084ac  080084ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b4  080084b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080084bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004544  24000078  08008534  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  240045bc  08008534  000245bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b98  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f0d  00000000  00000000  00050c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00055b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00057468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e62f  00000000  00000000  00058bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f422  00000000  00000000  00097227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193749  00000000  00000000  000b6649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00249d92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070c4  00000000  00000000  00249de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008384 	.word	0x08008384

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08008384 	.word	0x08008384

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000712:	2003      	movs	r0, #3
 8000714:	f000 f933 	bl	800097e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000718:	f001 fb0a 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 800071c:	4602      	mov	r2, r0
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_Init+0x68>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	f003 030f 	and.w	r3, r3, #15
 8000728:	4913      	ldr	r1, [pc, #76]	; (8000778 <HAL_Init+0x6c>)
 800072a:	5ccb      	ldrb	r3, [r1, r3]
 800072c:	f003 031f 	and.w	r3, r3, #31
 8000730:	fa22 f303 	lsr.w	r3, r2, r3
 8000734:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_Init+0x68>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_Init+0x6c>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	f003 031f 	and.w	r3, r3, #31
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	fa22 f303 	lsr.w	r3, r2, r3
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <HAL_Init+0x70>)
 800074e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <HAL_Init+0x74>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000756:	200f      	movs	r0, #15
 8000758:	f006 ff00 	bl	800755c <HAL_InitTick>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e002      	b.n	800076c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000766:	f006 fdfb 	bl	8007360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58024400 	.word	0x58024400
 8000778:	08008410 	.word	0x08008410
 800077c:	24000004 	.word	0x24000004
 8000780:	24000000 	.word	0x24000000

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	2400000c 	.word	0x2400000c
 80007a8:	240040a8 	.word	0x240040a8

080007ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_GetTick+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	240040a8 	.word	0x240040a8

080007c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007cc:	f7ff ffee 	bl	80007ac <HAL_GetTick>
 80007d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007dc:	d005      	beq.n	80007ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_Delay+0x44>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ea:	bf00      	nop
 80007ec:	f7ff ffde 	bl	80007ac <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8f7      	bhi.n	80007ec <HAL_Delay+0x28>
  {
  }
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2400000c 	.word	0x2400000c

0800080c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetREVID+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	0c1b      	lsrs	r3, r3, #16
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	5c001000 	.word	0x5c001000

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <__NVIC_SetPriorityGrouping+0x40>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	4313      	orrs	r3, r2
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x40>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	05fa0000 	.word	0x05fa0000

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4907      	ldr	r1, [pc, #28]	; (80008c0 <__NVIC_EnableIRQ+0x38>)
 80008a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ff4c 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009a2:	f7ff ff63 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	6978      	ldr	r0, [r7, #20]
 80009ae:	f7ff ffb3 	bl	8000918 <NVIC_EncodePriority>
 80009b2:	4602      	mov	r2, r0
 80009b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff82 	bl	80008c4 <__NVIC_SetPriority>
}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff56 	bl	8000888 <__NVIC_EnableIRQ>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80009f2:	4b89      	ldr	r3, [pc, #548]	; (8000c18 <HAL_GPIO_Init+0x234>)
 80009f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009f6:	e194      	b.n	8000d22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2101      	movs	r1, #1
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 8186 	beq.w	8000d1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d005      	beq.n	8000a28 <HAL_GPIO_Init+0x44>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d130      	bne.n	8000a8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	2203      	movs	r2, #3
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68da      	ldr	r2, [r3, #12]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a5e:	2201      	movs	r2, #1
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	091b      	lsrs	r3, r3, #4
 8000a74:	f003 0201 	and.w	r2, r3, #1
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d017      	beq.n	8000ac6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d123      	bne.n	8000b1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	08da      	lsrs	r2, r3, #3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3208      	adds	r2, #8
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	220f      	movs	r2, #15
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	691a      	ldr	r2, [r3, #16]
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	08da      	lsrs	r2, r3, #3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3208      	adds	r2, #8
 8000b14:	69b9      	ldr	r1, [r7, #24]
 8000b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2203      	movs	r2, #3
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0203 	and.w	r2, r3, #3
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 80e0 	beq.w	8000d1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HAL_GPIO_Init+0x238>)
 8000b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b62:	4a2e      	ldr	r2, [pc, #184]	; (8000c1c <HAL_GPIO_Init+0x238>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <HAL_GPIO_Init+0x238>)
 8000b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b7a:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <HAL_GPIO_Init+0x23c>)
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3302      	adds	r3, #2
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <HAL_GPIO_Init+0x240>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d052      	beq.n	8000c4c <HAL_GPIO_Init+0x268>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <HAL_GPIO_Init+0x244>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d031      	beq.n	8000c12 <HAL_GPIO_Init+0x22e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <HAL_GPIO_Init+0x248>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d02b      	beq.n	8000c0e <HAL_GPIO_Init+0x22a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <HAL_GPIO_Init+0x24c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d025      	beq.n	8000c0a <HAL_GPIO_Init+0x226>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <HAL_GPIO_Init+0x250>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d01f      	beq.n	8000c06 <HAL_GPIO_Init+0x222>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_GPIO_Init+0x254>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d019      	beq.n	8000c02 <HAL_GPIO_Init+0x21e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_GPIO_Init+0x258>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0x21a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_GPIO_Init+0x25c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d00d      	beq.n	8000bfa <HAL_GPIO_Init+0x216>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_GPIO_Init+0x260>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d007      	beq.n	8000bf6 <HAL_GPIO_Init+0x212>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_GPIO_Init+0x264>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_GPIO_Init+0x20e>
 8000bee:	2309      	movs	r3, #9
 8000bf0:	e02d      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	e02b      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	e029      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	e027      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000bfe:	2306      	movs	r3, #6
 8000c00:	e025      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000c02:	2305      	movs	r3, #5
 8000c04:	e023      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000c06:	2304      	movs	r3, #4
 8000c08:	e021      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e01f      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000c0e:	2302      	movs	r3, #2
 8000c10:	e01d      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e01b      	b.n	8000c4e <HAL_GPIO_Init+0x26a>
 8000c16:	bf00      	nop
 8000c18:	58000080 	.word	0x58000080
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58000400 	.word	0x58000400
 8000c24:	58020000 	.word	0x58020000
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58020800 	.word	0x58020800
 8000c30:	58020c00 	.word	0x58020c00
 8000c34:	58021000 	.word	0x58021000
 8000c38:	58021400 	.word	0x58021400
 8000c3c:	58021800 	.word	0x58021800
 8000c40:	58021c00 	.word	0x58021c00
 8000c44:	58022000 	.word	0x58022000
 8000c48:	58022400 	.word	0x58022400
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c5e:	4938      	ldr	r1, [pc, #224]	; (8000d40 <HAL_GPIO_Init+0x35c>)
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f47f ae63 	bne.w	80009f8 <HAL_GPIO_Init+0x14>
  }
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	58000400 	.word	0x58000400

08000d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d54:	787b      	ldrb	r3, [r7, #1]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d60:	e003      	b.n	8000d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	041a      	lsls	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	619a      	str	r2, [r3, #24]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b085      	sub	sp, #20
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d88:	887a      	ldrh	r2, [r7, #2]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	041a      	lsls	r2, r3, #16
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	400b      	ands	r3, r1
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	619a      	str	r2, [r3, #24]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000db4:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_HSEM_FastTake+0x2c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3320      	adds	r3, #32
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_HSEM_FastTake+0x30>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d101      	bne.n	8000dc8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e000      	b.n	8000dca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	58026400 	.word	0x58026400
 8000ddc:	80000300 	.word	0x80000300

08000de0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000dea:	4906      	ldr	r1, [pc, #24]	; (8000e04 <HAL_HSEM_Release+0x24>)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58026400 	.word	0x58026400

08000e08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b08f      	sub	sp, #60	; 0x3c
 8000e0c:	af0a      	add	r7, sp, #40	; 0x28
 8000e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e116      	b.n	8001048 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d106      	bne.n	8000e3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f006 fb17 	bl	8007468 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 f9fd 	bl	8005258 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	687e      	ldr	r6, [r7, #4]
 8000e66:	466d      	mov	r5, sp
 8000e68:	f106 0410 	add.w	r4, r6, #16
 8000e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e7c:	1d33      	adds	r3, r6, #4
 8000e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f004 f97b 	bl	800517c <USB_CoreInit>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e0d7      	b.n	8001048 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f9eb 	bl	800527a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e04a      	b.n	8000f40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	333d      	adds	r3, #61	; 0x3d
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	333c      	adds	r3, #60	; 0x3c
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ed2:	7bfa      	ldrb	r2, [r7, #15]
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	b298      	uxth	r0, r3
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3342      	adds	r3, #66	; 0x42
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	333f      	adds	r3, #63	; 0x3f
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3344      	adds	r3, #68	; 0x44
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	1a9b      	subs	r3, r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3348      	adds	r3, #72	; 0x48
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	3350      	adds	r3, #80	; 0x50
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3af      	bcc.n	8000eaa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e044      	b.n	8000fda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	1a9b      	subs	r3, r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fa8:	7bfa      	ldrb	r2, [r7, #15]
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3b5      	bcc.n	8000f50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	687e      	ldr	r6, [r7, #4]
 8000fec:	466d      	mov	r5, sp
 8000fee:	f106 0410 	add.w	r4, r6, #16
 8000ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001002:	1d33      	adds	r3, r6, #4
 8001004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001006:	6838      	ldr	r0, [r7, #0]
 8001008:	f004 f984 	bl	8005314 <USB_DevInit>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2202      	movs	r2, #2
 8001016:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e014      	b.n	8001048 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f80a 	bl	8001050 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fb3e 	bl	80056c2 <USB_DevDisconnect>

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001050 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_PCDEx_ActivateLPM+0x44>)
 8001080:	4313      	orrs	r3, r2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	10000003 	.word	0x10000003

08001098 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <HAL_PWREx_ConfigSupply+0xb0>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d00a      	beq.n	80010c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d001      	beq.n	80010be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e040      	b.n	8001140 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e03e      	b.n	8001140 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_PWREx_ConfigSupply+0xb0>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80010ca:	491f      	ldr	r1, [pc, #124]	; (8001148 <HAL_PWREx_ConfigSupply+0xb0>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010d2:	f7ff fb6b 	bl	80007ac <HAL_GetTick>
 80010d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010d8:	e009      	b.n	80010ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010da:	f7ff fb67 	bl	80007ac <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e8:	d901      	bls.n	80010ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e028      	b.n	8001140 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_PWREx_ConfigSupply+0xb0>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010fa:	d1ee      	bne.n	80010da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b1e      	cmp	r3, #30
 8001100:	d008      	beq.n	8001114 <HAL_PWREx_ConfigSupply+0x7c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b2e      	cmp	r3, #46	; 0x2e
 8001106:	d005      	beq.n	8001114 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b1d      	cmp	r3, #29
 800110c:	d002      	beq.n	8001114 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b2d      	cmp	r3, #45	; 0x2d
 8001112:	d114      	bne.n	800113e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001114:	f7ff fb4a 	bl	80007ac <HAL_GetTick>
 8001118:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800111a:	e009      	b.n	8001130 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800111c:	f7ff fb46 	bl	80007ac <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800112a:	d901      	bls.n	8001130 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e007      	b.n	8001140 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_PWREx_ConfigSupply+0xb0>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d1ee      	bne.n	800111c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58024800 	.word	0x58024800

0800114c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	58024800 	.word	0x58024800

0800116c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	f000 bc1c 	b.w	80019b8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 8087 	beq.w	800129c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118e:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001198:	4b9b      	ldr	r3, [pc, #620]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	2b10      	cmp	r3, #16
 80011a2:	d007      	beq.n	80011b4 <HAL_RCC_OscConfig+0x48>
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	2b18      	cmp	r3, #24
 80011a8:	d110      	bne.n	80011cc <HAL_RCC_OscConfig+0x60>
 80011aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b94      	ldr	r3, [pc, #592]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d06c      	beq.n	800129a <HAL_RCC_OscConfig+0x12e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d168      	bne.n	800129a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e3f5      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x78>
 80011d6:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a8b      	ldr	r2, [pc, #556]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e02e      	b.n	8001242 <HAL_RCC_OscConfig+0xd6>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x9a>
 80011ec:	4b86      	ldr	r3, [pc, #536]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a85      	ldr	r2, [pc, #532]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b83      	ldr	r3, [pc, #524]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a82      	ldr	r2, [pc, #520]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e01d      	b.n	8001242 <HAL_RCC_OscConfig+0xd6>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0xbe>
 8001210:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a79      	ldr	r2, [pc, #484]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0xd6>
 800122a:	4b77      	ldr	r3, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a76      	ldr	r2, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b74      	ldr	r3, [pc, #464]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a73      	ldr	r2, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800123c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d013      	beq.n	8001272 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff faaf 	bl	80007ac <HAL_GetTick>
 800124e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001252:	f7ff faab 	bl	80007ac <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e3a9      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0xe6>
 8001270:	e014      	b.n	800129c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fa9b 	bl	80007ac <HAL_GetTick>
 8001276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127a:	f7ff fa97 	bl	80007ac <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e395      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800128c:	4b5e      	ldr	r3, [pc, #376]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x10e>
 8001298:	e000      	b.n	800129c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80ca 	beq.w	800143e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012b4:	4b54      	ldr	r3, [pc, #336]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <HAL_RCC_OscConfig+0x164>
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	2b18      	cmp	r3, #24
 80012c4:	d156      	bne.n	8001374 <HAL_RCC_OscConfig+0x208>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d151      	bne.n	8001374 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d0:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_OscConfig+0x17c>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e367      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 0219 	bic.w	r2, r3, #25
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4944      	ldr	r1, [pc, #272]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012fa:	f7ff fa57 	bl	80007ac <HAL_GetTick>
 80012fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fa53 	bl	80007ac <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e351      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001314:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	f7ff fa74 	bl	800080c <HAL_GetREVID>
 8001324:	4603      	mov	r3, r0
 8001326:	f241 0203 	movw	r2, #4099	; 0x1003
 800132a:	4293      	cmp	r3, r2
 800132c:	d817      	bhi.n	800135e <HAL_RCC_OscConfig+0x1f2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b40      	cmp	r3, #64	; 0x40
 8001334:	d108      	bne.n	8001348 <HAL_RCC_OscConfig+0x1dc>
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800133e:	4a32      	ldr	r2, [pc, #200]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001346:	e07a      	b.n	800143e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	031b      	lsls	r3, r3, #12
 8001356:	492c      	ldr	r1, [pc, #176]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135c:	e06f      	b.n	800143e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	061b      	lsls	r3, r3, #24
 800136c:	4926      	ldr	r1, [pc, #152]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001372:	e064      	b.n	800143e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d047      	beq.n	800140c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 0219 	bic.w	r2, r3, #25
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	491f      	ldr	r1, [pc, #124]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fa0d 	bl	80007ac <HAL_GetTick>
 8001392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fa09 	bl	80007ac <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e307      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	f7ff fa2a 	bl	800080c <HAL_GetREVID>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80013be:	4293      	cmp	r3, r2
 80013c0:	d817      	bhi.n	80013f2 <HAL_RCC_OscConfig+0x286>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	d108      	bne.n	80013dc <HAL_RCC_OscConfig+0x270>
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013d2:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	6053      	str	r3, [r2, #4]
 80013da:	e030      	b.n	800143e <HAL_RCC_OscConfig+0x2d2>
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	031b      	lsls	r3, r3, #12
 80013ea:	4907      	ldr	r1, [pc, #28]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
 80013f0:	e025      	b.n	800143e <HAL_RCC_OscConfig+0x2d2>
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	4901      	ldr	r1, [pc, #4]	; (8001408 <HAL_RCC_OscConfig+0x29c>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
 8001406:	e01a      	b.n	800143e <HAL_RCC_OscConfig+0x2d2>
 8001408:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140c:	4b9e      	ldr	r3, [pc, #632]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9d      	ldr	r2, [pc, #628]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff f9c8 	bl	80007ac <HAL_GetTick>
 800141c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff f9c4 	bl	80007ac <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e2c2      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001432:	4b95      	ldr	r3, [pc, #596]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a9 	beq.w	800159e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144c:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001454:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001456:	4b8c      	ldr	r3, [pc, #560]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d007      	beq.n	8001472 <HAL_RCC_OscConfig+0x306>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b18      	cmp	r3, #24
 8001466:	d13a      	bne.n	80014de <HAL_RCC_OscConfig+0x372>
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d135      	bne.n	80014de <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001472:	4b85      	ldr	r3, [pc, #532]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x31e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b80      	cmp	r3, #128	; 0x80
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e296      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800148a:	f7ff f9bf 	bl	800080c <HAL_GetREVID>
 800148e:	4603      	mov	r3, r0
 8001490:	f241 0203 	movw	r2, #4099	; 0x1003
 8001494:	4293      	cmp	r3, r2
 8001496:	d817      	bhi.n	80014c8 <HAL_RCC_OscConfig+0x35c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	2b20      	cmp	r3, #32
 800149e:	d108      	bne.n	80014b2 <HAL_RCC_OscConfig+0x346>
 80014a0:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014a8:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014ae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b0:	e075      	b.n	800159e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014b2:	4b75      	ldr	r3, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	069b      	lsls	r3, r3, #26
 80014c0:	4971      	ldr	r1, [pc, #452]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c6:	e06a      	b.n	800159e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014c8:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	496c      	ldr	r1, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014dc:	e05f      	b.n	800159e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d042      	beq.n	800156c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014e6:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a67      	ldr	r2, [pc, #412]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff f95b 	bl	80007ac <HAL_GetTick>
 80014f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014fa:	f7ff f957 	bl	80007ac <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e255      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001518:	f7ff f978 	bl	800080c <HAL_GetREVID>
 800151c:	4603      	mov	r3, r0
 800151e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001522:	4293      	cmp	r3, r2
 8001524:	d817      	bhi.n	8001556 <HAL_RCC_OscConfig+0x3ea>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	2b20      	cmp	r3, #32
 800152c:	d108      	bne.n	8001540 <HAL_RCC_OscConfig+0x3d4>
 800152e:	4b56      	ldr	r3, [pc, #344]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001536:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800153c:	6053      	str	r3, [r2, #4]
 800153e:	e02e      	b.n	800159e <HAL_RCC_OscConfig+0x432>
 8001540:	4b51      	ldr	r3, [pc, #324]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	069b      	lsls	r3, r3, #26
 800154e:	494e      	ldr	r1, [pc, #312]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e023      	b.n	800159e <HAL_RCC_OscConfig+0x432>
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	061b      	lsls	r3, r3, #24
 8001564:	4948      	ldr	r1, [pc, #288]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001566:	4313      	orrs	r3, r2
 8001568:	60cb      	str	r3, [r1, #12]
 800156a:	e018      	b.n	800159e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800156c:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a45      	ldr	r2, [pc, #276]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff f918 	bl	80007ac <HAL_GetTick>
 800157c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001580:	f7ff f914 	bl	80007ac <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e212      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d036      	beq.n	8001618 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d019      	beq.n	80015e6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b6:	4a34      	ldr	r2, [pc, #208]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff f8f5 	bl	80007ac <HAL_GetTick>
 80015c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff f8f1 	bl	80007ac <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1ef      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x45a>
 80015e4:	e018      	b.n	8001618 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80015e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ea:	4a27      	ldr	r2, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff f8db 	bl	80007ac <HAL_GetTick>
 80015f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff f8d7 	bl	80007ac <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1d5      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 800160e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	d039      	beq.n	8001698 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d019      	beq.n	8001660 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a15      	ldr	r2, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001636:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001638:	f7ff f8b8 	bl	80007ac <HAL_GetTick>
 800163c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001640:	f7ff f8b4 	bl	80007ac <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1b2      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x4d4>
 800165e:	e01b      	b.n	8001698 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_RCC_OscConfig+0x51c>)
 8001666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800166a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800166c:	f7ff f89e 	bl	80007ac <HAL_GetTick>
 8001670:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001674:	f7ff f89a 	bl	80007ac <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d904      	bls.n	800168c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e198      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
 8001686:	bf00      	nop
 8001688:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800168c:	4ba3      	ldr	r3, [pc, #652]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ed      	bne.n	8001674 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8081 	beq.w	80017a8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016a6:	4b9e      	ldr	r3, [pc, #632]	; (8001920 <HAL_RCC_OscConfig+0x7b4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a9d      	ldr	r2, [pc, #628]	; (8001920 <HAL_RCC_OscConfig+0x7b4>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016b2:	f7ff f87b 	bl	80007ac <HAL_GetTick>
 80016b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff f877 	bl	80007ac <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e175      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016cc:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_RCC_OscConfig+0x7b4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x582>
 80016e0:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a8d      	ldr	r2, [pc, #564]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
 80016ec:	e02d      	b.n	800174a <HAL_RCC_OscConfig+0x5de>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x5a4>
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a88      	ldr	r2, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	4b86      	ldr	r3, [pc, #536]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a85      	ldr	r2, [pc, #532]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	e01c      	b.n	800174a <HAL_RCC_OscConfig+0x5de>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x5c6>
 8001718:	4b80      	ldr	r3, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a7f      	ldr	r2, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	4b7d      	ldr	r3, [pc, #500]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a7c      	ldr	r2, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x5de>
 8001732:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a79      	ldr	r2, [pc, #484]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	4b77      	ldr	r3, [pc, #476]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a76      	ldr	r2, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff f82b 	bl	80007ac <HAL_GetTick>
 8001756:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff f827 	bl	80007ac <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e123      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001770:	4b6a      	ldr	r3, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ee      	beq.n	800175a <HAL_RCC_OscConfig+0x5ee>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff f815 	bl	80007ac <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff f811 	bl	80007ac <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e10d      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8102 	beq.w	80019b6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ba:	2b18      	cmp	r3, #24
 80017bc:	f000 80bd 	beq.w	800193a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	f040 8095 	bne.w	80018f4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b54      	ldr	r3, [pc, #336]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a53      	ldr	r2, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80017d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7fe ffe9 	bl	80007ac <HAL_GetTick>
 80017da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f7fe ffe5 	bl	80007ac <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0e3      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017f0:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80017fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001800:	4b48      	ldr	r3, [pc, #288]	; (8001924 <HAL_RCC_OscConfig+0x7b8>)
 8001802:	4013      	ands	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	430a      	orrs	r2, r1
 8001810:	4942      	ldr	r1, [pc, #264]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001812:	4313      	orrs	r3, r2
 8001814:	628b      	str	r3, [r1, #40]	; 0x28
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	3b01      	subs	r3, #1
 800181c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001824:	3b01      	subs	r3, #1
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	b29b      	uxth	r3, r3
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	3b01      	subs	r3, #1
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183e:	3b01      	subs	r3, #1
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001846:	4935      	ldr	r1, [pc, #212]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001848:	4313      	orrs	r3, r2
 800184a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	4a32      	ldr	r2, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800185a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185c:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_RCC_OscConfig+0x7bc>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001864:	00d2      	lsls	r2, r2, #3
 8001866:	492d      	ldr	r1, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001868:	4313      	orrs	r3, r2
 800186a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	f023 020c 	bic.w	r2, r3, #12
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4928      	ldr	r1, [pc, #160]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800187a:	4313      	orrs	r3, r2
 800187c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f023 0202 	bic.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4924      	ldr	r1, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800188c:	4313      	orrs	r3, r2
 800188e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7fe ff6e 	bl	80007ac <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d4:	f7fe ff6a 	bl	80007ac <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e068      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x768>
 80018f2:	e060      	b.n	80019b6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7fe ff54 	bl	80007ac <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001906:	e011      	b.n	800192c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7fe ff50 	bl	80007ac <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d90a      	bls.n	800192c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04e      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
 800191a:	bf00      	nop
 800191c:	58024400 	.word	0x58024400
 8001920:	58024800 	.word	0x58024800
 8001924:	fffffc0c 	.word	0xfffffc0c
 8001928:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x854>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e7      	bne.n	8001908 <HAL_RCC_OscConfig+0x79c>
 8001938:	e03d      	b.n	80019b6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_OscConfig+0x854>)
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_RCC_OscConfig+0x854>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	2b01      	cmp	r3, #1
 800194c:	d031      	beq.n	80019b2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0203 	and.w	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d12a      	bne.n	80019b2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d122      	bne.n	80019b2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d11a      	bne.n	80019b2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0a5b      	lsrs	r3, r3, #9
 8001980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d111      	bne.n	80019b2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d108      	bne.n	80019b2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	0e1b      	lsrs	r3, r3, #24
 80019a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3730      	adds	r7, #48	; 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58024400 	.word	0x58024400

080019c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e19c      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b8a      	ldr	r3, [pc, #552]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d910      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b87      	ldr	r3, [pc, #540]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 020f 	bic.w	r2, r3, #15
 80019ee:	4985      	ldr	r1, [pc, #532]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e184      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d010      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d908      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a24:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	4975      	ldr	r1, [pc, #468]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d010      	beq.n	8001a64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d908      	bls.n	8001a64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	496a      	ldr	r1, [pc, #424]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d908      	bls.n	8001a92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	495e      	ldr	r1, [pc, #376]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d908      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4953      	ldr	r1, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d908      	bls.n	8001aee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f023 020f 	bic.w	r2, r3, #15
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4947      	ldr	r1, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d055      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4940      	ldr	r1, [pc, #256]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d121      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0f6      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d115      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0ea      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b44:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0de      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0d6      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f023 0207 	bic.w	r2, r3, #7
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4925      	ldr	r1, [pc, #148]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7fe fe19 	bl	80007ac <HAL_GetTick>
 8001b7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7e:	f7fe fe15 	bl	80007ac <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0be      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d1eb      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d208      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f023 020f 	bic.w	r2, r3, #15
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x244>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d214      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 020f 	bic.w	r2, r3, #15
 8001bea:	4906      	ldr	r1, [pc, #24]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCC_ClockConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e086      	b.n	8001d12 <HAL_RCC_ClockConfig+0x34e>
 8001c04:	52002000 	.word	0x52002000
 8001c08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d010      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d208      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4939      	ldr	r1, [pc, #228]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d010      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d208      	bcs.n	8001c68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c56:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	492e      	ldr	r1, [pc, #184]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d010      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d208      	bcs.n	8001c96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4922      	ldr	r1, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d208      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4917      	ldr	r1, [pc, #92]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cc4:	f000 f834 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	4912      	ldr	r1, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_RCC_ClockConfig+0x358>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_RCC_ClockConfig+0x35c>)
 8001cec:	5cd3      	ldrb	r3, [r2, r3]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x360>)
 8001cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x364>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_RCC_ClockConfig+0x368>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fc28 	bl	800755c <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	08008410 	.word	0x08008410
 8001d24:	24000004 	.word	0x24000004
 8001d28:	24000000 	.word	0x24000000
 8001d2c:	24000008 	.word	0x24000008

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d36:	4bb3      	ldr	r3, [pc, #716]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d3e:	2b18      	cmp	r3, #24
 8001d40:	f200 8155 	bhi.w	8001fee <HAL_RCC_GetSysClockFreq+0x2be>
 8001d44:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4a:	bf00      	nop
 8001d4c:	08001db1 	.word	0x08001db1
 8001d50:	08001fef 	.word	0x08001fef
 8001d54:	08001fef 	.word	0x08001fef
 8001d58:	08001fef 	.word	0x08001fef
 8001d5c:	08001fef 	.word	0x08001fef
 8001d60:	08001fef 	.word	0x08001fef
 8001d64:	08001fef 	.word	0x08001fef
 8001d68:	08001fef 	.word	0x08001fef
 8001d6c:	08001dd7 	.word	0x08001dd7
 8001d70:	08001fef 	.word	0x08001fef
 8001d74:	08001fef 	.word	0x08001fef
 8001d78:	08001fef 	.word	0x08001fef
 8001d7c:	08001fef 	.word	0x08001fef
 8001d80:	08001fef 	.word	0x08001fef
 8001d84:	08001fef 	.word	0x08001fef
 8001d88:	08001fef 	.word	0x08001fef
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001fef 	.word	0x08001fef
 8001d94:	08001fef 	.word	0x08001fef
 8001d98:	08001fef 	.word	0x08001fef
 8001d9c:	08001fef 	.word	0x08001fef
 8001da0:	08001fef 	.word	0x08001fef
 8001da4:	08001fef 	.word	0x08001fef
 8001da8:	08001fef 	.word	0x08001fef
 8001dac:	08001de3 	.word	0x08001de3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001db0:	4b94      	ldr	r3, [pc, #592]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dbc:	4b91      	ldr	r3, [pc, #580]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	4a90      	ldr	r2, [pc, #576]	; (8002008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001dce:	e111      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001dd0:	4b8d      	ldr	r3, [pc, #564]	; (8002008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dd2:	61bb      	str	r3, [r7, #24]
    break;
 8001dd4:	e10e      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dd6:	4b8d      	ldr	r3, [pc, #564]	; (800200c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001dd8:	61bb      	str	r3, [r7, #24]
    break;
 8001dda:	e10b      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001dde:	61bb      	str	r3, [r7, #24]
    break;
 8001de0:	e108      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001dec:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001df8:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e02:	4b80      	ldr	r3, [pc, #512]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80e1 	beq.w	8001fe8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	f000 8083 	beq.w	8001f34 <HAL_RCC_GetSysClockFreq+0x204>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	f200 80a1 	bhi.w	8001f78 <HAL_RCC_GetSysClockFreq+0x248>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x114>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d056      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e42:	e099      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e44:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d02d      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e50:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	4a6b      	ldr	r2, [pc, #428]	; (8002008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7a:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001eaa:	e087      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002018 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ed2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001eee:	e065      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800201c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f02:	4b40      	ldr	r3, [pc, #256]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f32:	e043      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002020 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f76:	e021      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f82:	eddf 6a26 	vldr	s13, [pc, #152]	; 800201c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe0:	ee17 3a90 	vmov	r3, s15
 8001fe4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fe6:	e005      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
    break;
 8001fec:	e002      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ff0:	61bb      	str	r3, [r7, #24]
    break;
 8001ff2:	bf00      	nop
  }

  return sysclockfreq;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	58024400 	.word	0x58024400
 8002008:	03d09000 	.word	0x03d09000
 800200c:	003d0900 	.word	0x003d0900
 8002010:	007a1200 	.word	0x007a1200
 8002014:	46000000 	.word	0x46000000
 8002018:	4c742400 	.word	0x4c742400
 800201c:	4a742400 	.word	0x4a742400
 8002020:	4af42400 	.word	0x4af42400

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800202a:	f7ff fe81 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_RCC_GetHCLKFreq+0x50>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490f      	ldr	r1, [pc, #60]	; (8002078 <HAL_RCC_GetHCLKFreq+0x54>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_GetHCLKFreq+0x50>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_GetHCLKFreq+0x54>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	fa22 f303 	lsr.w	r3, r2, r3
 800205e:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_RCC_GetHCLKFreq+0x58>)
 8002060:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <HAL_RCC_GetHCLKFreq+0x58>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	58024400 	.word	0x58024400
 8002078:	08008410 	.word	0x08008410
 800207c:	24000004 	.word	0x24000004
 8002080:	24000000 	.word	0x24000000

08002084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002088:	f7ff ffcc 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	58024400 	.word	0x58024400
 80020ac:	08008410 	.word	0x08008410

080020b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80020b4:	f7ff ffb6 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4904      	ldr	r1, [pc, #16]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	58024400 	.word	0x58024400
 80020d8:	08008410 	.word	0x08008410

080020dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	223f      	movs	r2, #63	; 0x3f
 80020ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_RCC_GetClockConfig+0x7c>)
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f003 0207 	and.w	r2, r3, #7
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_RCC_GetClockConfig+0x7c>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_RCC_GetClockConfig+0x7c>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_RCC_GetClockConfig+0x7c>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_RCC_GetClockConfig+0x7c>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_GetClockConfig+0x7c>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_RCC_GetClockConfig+0x7c>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetClockConfig+0x80>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	58024400 	.word	0x58024400
 800215c:	52002000 	.word	0x52002000

08002160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002168:	2300      	movs	r3, #0
 800216a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800216c:	2300      	movs	r3, #0
 800216e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d03f      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002180:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002184:	d02a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002186:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800218a:	d824      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800218c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002190:	d018      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002196:	d81e      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800219c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021a0:	d007      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021a2:	e018      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021a4:	4bab      	ldr	r3, [pc, #684]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	4aaa      	ldr	r2, [pc, #680]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80021b0:	e015      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2102      	movs	r1, #2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 f9cf 	bl	800355c <RCCEx_PLL2_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80021c2:	e00c      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3324      	adds	r3, #36	; 0x24
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 fa78 	bl	80036c0 <RCCEx_PLL3_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80021d4:	e003      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
      break;
 80021da:	e000      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80021e4:	4b9b      	ldr	r3, [pc, #620]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f0:	4998      	ldr	r1, [pc, #608]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	650b      	str	r3, [r1, #80]	; 0x50
 80021f6:	e001      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d03d      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	2b04      	cmp	r3, #4
 800220e:	d826      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	0800222d 	.word	0x0800222d
 800221c:	0800223b 	.word	0x0800223b
 8002220:	0800224d 	.word	0x0800224d
 8002224:	08002265 	.word	0x08002265
 8002228:	08002265 	.word	0x08002265
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800222c:	4b89      	ldr	r3, [pc, #548]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	4a88      	ldr	r2, [pc, #544]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002238:	e015      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f001 f98b 	bl	800355c <RCCEx_PLL2_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800224a:	e00c      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3324      	adds	r3, #36	; 0x24
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f001 fa34 	bl	80036c0 <RCCEx_PLL3_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800225c:	e003      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
      break;
 8002262:	e000      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800226c:	4b79      	ldr	r3, [pc, #484]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800226e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002270:	f023 0207 	bic.w	r2, r3, #7
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	4976      	ldr	r1, [pc, #472]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800227a:	4313      	orrs	r3, r2
 800227c:	650b      	str	r3, [r1, #80]	; 0x50
 800227e:	e001      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228c:	2b00      	cmp	r3, #0
 800228e:	d042      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002298:	d02b      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800229a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229e:	d825      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80022a0:	2bc0      	cmp	r3, #192	; 0xc0
 80022a2:	d028      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80022a4:	2bc0      	cmp	r3, #192	; 0xc0
 80022a6:	d821      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d016      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80022ac:	2b80      	cmp	r3, #128	; 0x80
 80022ae:	d81d      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d007      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80022b8:	e018      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ba:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80022c6:	e017      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 f944 	bl	800355c <RCCEx_PLL2_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80022d8:	e00e      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3324      	adds	r3, #36	; 0x24
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f9ed 	bl	80036c0 <RCCEx_PLL3_Config>
 80022e6:	4603      	mov	r3, r0
 80022e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80022ea:	e005      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	75fb      	strb	r3, [r7, #23]
      break;
 80022f0:	e002      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80022f2:	bf00      	nop
 80022f4:	e000      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80022f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80022fe:	4b55      	ldr	r3, [pc, #340]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002302:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	4952      	ldr	r1, [pc, #328]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	650b      	str	r3, [r1, #80]	; 0x50
 8002310:	e001      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	d049      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800232c:	d030      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800232e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002332:	d82a      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002338:	d02c      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800233a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800233e:	d824      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002344:	d018      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d81e      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002354:	d007      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002356:	e018      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002358:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002364:	e017      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f001 f8f5 	bl	800355c <RCCEx_PLL2_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002376:	e00e      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3324      	adds	r3, #36	; 0x24
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f001 f99e 	bl	80036c0 <RCCEx_PLL3_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002388:	e005      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
      break;
 800238e:	e002      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023aa:	492a      	ldr	r1, [pc, #168]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	658b      	str	r3, [r1, #88]	; 0x58
 80023b0:	e001      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d04c      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80023c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023cc:	d030      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80023ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d2:	d82a      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80023d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d8:	d02c      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80023da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023de:	d824      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80023e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e4:	d018      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80023e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ea:	d81e      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d007      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80023f6:	e018      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	4a15      	ldr	r2, [pc, #84]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002404:	e017      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f001 f8a5 	bl	800355c <RCCEx_PLL2_Config>
 8002412:	4603      	mov	r3, r0
 8002414:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002416:	e00e      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3324      	adds	r3, #36	; 0x24
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f94e 	bl	80036c0 <RCCEx_PLL3_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002428:	e005      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
      break;
 800242e:	e002      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002430:	bf00      	nop
 8002432:	e000      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10d      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800244a:	4902      	ldr	r1, [pc, #8]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	658b      	str	r3, [r1, #88]	; 0x58
 8002450:	e004      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002452:	bf00      	nop
 8002454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d032      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	2b30      	cmp	r3, #48	; 0x30
 800246e:	d01c      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d817      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002474:	2b20      	cmp	r3, #32
 8002476:	d00c      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002478:	2b20      	cmp	r3, #32
 800247a:	d813      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d016      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002480:	2b10      	cmp	r3, #16
 8002482:	d10f      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002484:	4baf      	ldr	r3, [pc, #700]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	4aae      	ldr	r2, [pc, #696]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800248a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002490:	e00e      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f85f 	bl	800355c <RCCEx_PLL2_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80024a2:	e005      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	75fb      	strb	r3, [r7, #23]
      break;
 80024a8:	e002      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80024ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024b6:	4ba3      	ldr	r3, [pc, #652]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c2:	49a0      	ldr	r1, [pc, #640]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80024c8:	e001      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d047      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e2:	d030      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80024e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e8:	d82a      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80024ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024ee:	d02c      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80024f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024f4:	d824      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fa:	d018      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80024fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002500:	d81e      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250a:	d007      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800250c:	e018      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800250e:	4b8d      	ldr	r3, [pc, #564]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	4a8c      	ldr	r2, [pc, #560]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800251a:	e017      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f81a 	bl	800355c <RCCEx_PLL2_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800252c:	e00e      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3324      	adds	r3, #36	; 0x24
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f8c3 	bl	80036c0 <RCCEx_PLL3_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800253e:	e005      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	75fb      	strb	r3, [r7, #23]
      break;
 8002544:	e002      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800254a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002552:	4b7c      	ldr	r3, [pc, #496]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	4979      	ldr	r1, [pc, #484]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	650b      	str	r3, [r1, #80]	; 0x50
 8002564:	e001      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d049      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257e:	d02e      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002584:	d828      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800258a:	d02a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800258c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002590:	d822      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002596:	d026      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002598:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800259c:	d81c      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800259e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025a2:	d010      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80025a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025a8:	d816      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01d      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d111      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	2101      	movs	r1, #1
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 ffce 	bl	800355c <RCCEx_PLL2_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80025c4:	e012      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3324      	adds	r3, #36	; 0x24
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 f877 	bl	80036c0 <RCCEx_PLL3_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80025d6:	e009      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	75fb      	strb	r3, [r7, #23]
      break;
 80025dc:	e006      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80025de:	bf00      	nop
 80025e0:	e004      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80025ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80025f2:	4b54      	ldr	r3, [pc, #336]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80025f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	4951      	ldr	r1, [pc, #324]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	650b      	str	r3, [r1, #80]	; 0x50
 8002604:	e001      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d04b      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d02e      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002626:	d828      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d02a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800262e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002632:	d822      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002634:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002638:	d026      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800263a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800263e:	d81c      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002644:	d010      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800264a:	d816      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01d      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002654:	d111      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f000 ff7d 	bl	800355c <RCCEx_PLL2_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002666:	e012      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3324      	adds	r3, #36	; 0x24
 800266c:	2101      	movs	r1, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f001 f826 	bl	80036c0 <RCCEx_PLL3_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002678:	e009      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
      break;
 800267e:	e006      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002680:	bf00      	nop
 8002682:	e004      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002684:	bf00      	nop
 8002686:	e002      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002688:	bf00      	nop
 800268a:	e000      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800268c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026a2:	4928      	ldr	r1, [pc, #160]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	658b      	str	r3, [r1, #88]	; 0x58
 80026a8:	e001      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02f      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c2:	d00e      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80026c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c8:	d814      	bhi.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d015      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80026ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026d2:	d10f      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026e0:	e00c      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2101      	movs	r1, #1
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 ff37 	bl	800355c <RCCEx_PLL2_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026f2:	e003      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
      break;
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80026fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002706:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270e:	490d      	ldr	r1, [pc, #52]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	650b      	str	r3, [r1, #80]	; 0x50
 8002714:	e001      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d033      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	2b03      	cmp	r3, #3
 800272c:	d81c      	bhi.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800272e:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	0800276f 	.word	0x0800276f
 8002738:	08002749 	.word	0x08002749
 800273c:	08002757 	.word	0x08002757
 8002740:	0800276f 	.word	0x0800276f
 8002744:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002748:	4bb8      	ldr	r3, [pc, #736]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4ab7      	ldr	r2, [pc, #732]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002754:	e00c      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2102      	movs	r1, #2
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fefd 	bl	800355c <RCCEx_PLL2_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002766:	e003      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	75fb      	strb	r3, [r7, #23]
      break;
 800276c:	e000      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800276e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002776:	4bad      	ldr	r3, [pc, #692]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	49aa      	ldr	r1, [pc, #680]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002784:	4313      	orrs	r3, r2
 8002786:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002788:	e001      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8086 	beq.w	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279c:	4ba4      	ldr	r3, [pc, #656]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4aa3      	ldr	r2, [pc, #652]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a8:	f7fe f800 	bl	80007ac <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ae:	e009      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7fd fffc 	bl	80007ac <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d902      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	75fb      	strb	r3, [r7, #23]
        break;
 80027c2:	e005      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c4:	4b9a      	ldr	r3, [pc, #616]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d166      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80027d6:	4b95      	ldr	r3, [pc, #596]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80027d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027e0:	4053      	eors	r3, r2
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d013      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ea:	4b90      	ldr	r3, [pc, #576]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f4:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a8c      	ldr	r2, [pc, #560]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80027fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002800:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a89      	ldr	r2, [pc, #548]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800280c:	4a87      	ldr	r2, [pc, #540]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281c:	d115      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fd ffc5 	bl	80007ac <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002824:	e00b      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fd ffc1 	bl	80007ac <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d902      	bls.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	75fb      	strb	r3, [r7, #23]
            break;
 800283c:	e005      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283e:	4b7b      	ldr	r3, [pc, #492]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ed      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d126      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800285e:	d10d      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002860:	4b72      	ldr	r3, [pc, #456]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800286e:	0919      	lsrs	r1, r3, #4
 8002870:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002872:	400b      	ands	r3, r1
 8002874:	496d      	ldr	r1, [pc, #436]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	610b      	str	r3, [r1, #16]
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800287c:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002882:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002886:	6113      	str	r3, [r2, #16]
 8002888:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800288a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002896:	4965      	ldr	r1, [pc, #404]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	670b      	str	r3, [r1, #112]	; 0x70
 800289c:	e004      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	75bb      	strb	r3, [r7, #22]
 80028a2:	e001      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d07e      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b8:	2b28      	cmp	r3, #40	; 0x28
 80028ba:	d867      	bhi.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80028bc:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	08002993 	.word	0x08002993
 80028c8:	0800298d 	.word	0x0800298d
 80028cc:	0800298d 	.word	0x0800298d
 80028d0:	0800298d 	.word	0x0800298d
 80028d4:	0800298d 	.word	0x0800298d
 80028d8:	0800298d 	.word	0x0800298d
 80028dc:	0800298d 	.word	0x0800298d
 80028e0:	0800298d 	.word	0x0800298d
 80028e4:	08002969 	.word	0x08002969
 80028e8:	0800298d 	.word	0x0800298d
 80028ec:	0800298d 	.word	0x0800298d
 80028f0:	0800298d 	.word	0x0800298d
 80028f4:	0800298d 	.word	0x0800298d
 80028f8:	0800298d 	.word	0x0800298d
 80028fc:	0800298d 	.word	0x0800298d
 8002900:	0800298d 	.word	0x0800298d
 8002904:	0800297b 	.word	0x0800297b
 8002908:	0800298d 	.word	0x0800298d
 800290c:	0800298d 	.word	0x0800298d
 8002910:	0800298d 	.word	0x0800298d
 8002914:	0800298d 	.word	0x0800298d
 8002918:	0800298d 	.word	0x0800298d
 800291c:	0800298d 	.word	0x0800298d
 8002920:	0800298d 	.word	0x0800298d
 8002924:	08002993 	.word	0x08002993
 8002928:	0800298d 	.word	0x0800298d
 800292c:	0800298d 	.word	0x0800298d
 8002930:	0800298d 	.word	0x0800298d
 8002934:	0800298d 	.word	0x0800298d
 8002938:	0800298d 	.word	0x0800298d
 800293c:	0800298d 	.word	0x0800298d
 8002940:	0800298d 	.word	0x0800298d
 8002944:	08002993 	.word	0x08002993
 8002948:	0800298d 	.word	0x0800298d
 800294c:	0800298d 	.word	0x0800298d
 8002950:	0800298d 	.word	0x0800298d
 8002954:	0800298d 	.word	0x0800298d
 8002958:	0800298d 	.word	0x0800298d
 800295c:	0800298d 	.word	0x0800298d
 8002960:	0800298d 	.word	0x0800298d
 8002964:	08002993 	.word	0x08002993
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	2101      	movs	r1, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fdf4 	bl	800355c <RCCEx_PLL2_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002978:	e00c      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3324      	adds	r3, #36	; 0x24
 800297e:	2101      	movs	r1, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fe9d 	bl	80036c0 <RCCEx_PLL3_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800298a:	e003      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
      break;
 8002990:	e000      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a6:	4921      	ldr	r1, [pc, #132]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	654b      	str	r3, [r1, #84]	; 0x54
 80029ac:	e001      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03e      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d820      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	08002a0f 	.word	0x08002a0f
 80029d0:	080029e5 	.word	0x080029e5
 80029d4:	080029f7 	.word	0x080029f7
 80029d8:	08002a0f 	.word	0x08002a0f
 80029dc:	08002a0f 	.word	0x08002a0f
 80029e0:	08002a0f 	.word	0x08002a0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	2101      	movs	r1, #1
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fdb6 	bl	800355c <RCCEx_PLL2_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80029f4:	e00c      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3324      	adds	r3, #36	; 0x24
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fe5f 	bl	80036c0 <RCCEx_PLL3_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002a06:	e003      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d110      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	4902      	ldr	r1, [pc, #8]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	654b      	str	r3, [r1, #84]	; 0x54
 8002a28:	e008      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002a2a:	bf00      	nop
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	58024800 	.word	0x58024800
 8002a34:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d039      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d820      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a9b 	.word	0x08002a9b
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a83 	.word	0x08002a83
 8002a64:	08002a9b 	.word	0x08002a9b
 8002a68:	08002a9b 	.word	0x08002a9b
 8002a6c:	08002a9b 	.word	0x08002a9b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	2101      	movs	r1, #1
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fd70 	bl	800355c <RCCEx_PLL2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a80:	e00c      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3324      	adds	r3, #36	; 0x24
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fe19 	bl	80036c0 <RCCEx_PLL3_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a92:	e003      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
      break;
 8002a98:	e000      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8002a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa2:	4bb7      	ldr	r3, [pc, #732]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f023 0207 	bic.w	r2, r3, #7
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	49b3      	ldr	r1, [pc, #716]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	658b      	str	r3, [r1, #88]	; 0x58
 8002ab6:	e001      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d04b      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad2:	d02e      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8002ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad8:	d828      	bhi.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ade:	d02a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d822      	bhi.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002ae6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002aea:	d026      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002aec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002af0:	d81c      	bhi.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af6:	d010      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afc:	d816      	bhi.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01d      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b06:	d111      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fd24 	bl	800355c <RCCEx_PLL2_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b18:	e012      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3324      	adds	r3, #36	; 0x24
 8002b1e:	2102      	movs	r1, #2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fdcd 	bl	80036c0 <RCCEx_PLL3_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b2a:	e009      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b30:	e006      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002b32:	bf00      	nop
 8002b34:	e004      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b46:	4b8e      	ldr	r3, [pc, #568]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b54:	498a      	ldr	r1, [pc, #552]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	654b      	str	r3, [r1, #84]	; 0x54
 8002b5a:	e001      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d04b      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b76:	d02e      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002b78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b7c:	d828      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b82:	d02a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b88:	d822      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b8e:	d026      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b94:	d81c      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9a:	d010      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8002b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba0:	d816      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01d      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002baa:	d111      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fcd2 	bl	800355c <RCCEx_PLL2_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002bbc:	e012      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3324      	adds	r3, #36	; 0x24
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fd7b 	bl	80036c0 <RCCEx_PLL3_Config>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002bce:	e009      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd4:	e006      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e004      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf8:	4961      	ldr	r1, [pc, #388]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	658b      	str	r3, [r1, #88]	; 0x58
 8002bfe:	e001      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d04b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c1a:	d02e      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002c1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c20:	d828      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c26:	d02a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2c:	d822      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002c2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c32:	d026      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002c34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c38:	d81c      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8002c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c44:	d816      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01d      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	d111      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fc80 	bl	800355c <RCCEx_PLL2_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c60:	e012      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3324      	adds	r3, #36	; 0x24
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fd29 	bl	80036c0 <RCCEx_PLL3_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c72:	e009      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	75fb      	strb	r3, [r7, #23]
      break;
 8002c78:	e006      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e004      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002c8e:	4b3c      	ldr	r3, [pc, #240]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c9c:	4938      	ldr	r1, [pc, #224]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ca2:	e001      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fcfa 	bl	80036c0 <RCCEx_PLL3_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce4:	4926      	ldr	r1, [pc, #152]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d00:	d10a      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3324      	adds	r3, #36	; 0x24
 8002d06:	2102      	movs	r1, #2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fcd9 	bl	80036c0 <RCCEx_PLL3_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	4916      	ldr	r1, [pc, #88]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d036      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d42:	d01f      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d48:	d817      	bhi.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d009      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002d54:	e011      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fbfd 	bl	800355c <RCCEx_PLL2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d66:	e00e      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fca6 	bl	80036c0 <RCCEx_PLL3_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d78:	e005      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8002d80:	58024400 	.word	0x58024400
      break;
 8002d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d8c:	4b93      	ldr	r3, [pc, #588]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d9a:	4990      	ldr	r1, [pc, #576]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	658b      	str	r3, [r1, #88]	; 0x58
 8002da0:	e001      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d033      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dbc:	d01c      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8002dbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dc2:	d816      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8002dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dce:	d007      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8002dd0:	e00f      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd2:	4b82      	ldr	r3, [pc, #520]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	4a81      	ldr	r2, [pc, #516]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002dde:	e00c      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fc6a 	bl	80036c0 <RCCEx_PLL3_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002df0:	e003      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
      break;
 8002df6:	e000      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8002df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e00:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	4973      	ldr	r1, [pc, #460]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	654b      	str	r3, [r1, #84]	; 0x54
 8002e14:	e001      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d029      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e32:	d007      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8002e34:	e00f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e36:	4b69      	ldr	r3, [pc, #420]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	4a68      	ldr	r2, [pc, #416]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e42:	e00b      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fb86 	bl	800355c <RCCEx_PLL2_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e54:	e002      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002e62:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	495b      	ldr	r1, [pc, #364]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e74:	e001      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3324      	adds	r3, #36	; 0x24
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fc17 	bl	80036c0 <RCCEx_PLL3_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d030      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eb0:	d017      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8002eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eb6:	d811      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d013      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec2:	d80b      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ecc:	d106      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ece:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	4a42      	ldr	r2, [pc, #264]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002eda:	e007      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee0:	e004      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ef2:	4b3a      	ldr	r3, [pc, #232]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efe:	4937      	ldr	r1, [pc, #220]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	654b      	str	r3, [r1, #84]	; 0x54
 8002f04:	e001      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	492e      	ldr	r1, [pc, #184]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002f34:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f42:	4926      	ldr	r1, [pc, #152]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f60:	491e      	ldr	r1, [pc, #120]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f7c:	6113      	str	r3, [r2, #16]
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f88:	4914      	ldr	r1, [pc, #80]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da08      	bge.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	490e      	ldr	r1, [pc, #56]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	4906      	ldr	r1, [pc, #24]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002fc8:	7dbb      	ldrb	r3, [r7, #22]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	58024400 	.word	0x58024400

08002fe0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002fe4:	f7ff f81e 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	; (8003008 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	58024400 	.word	0x58024400
 8003008:	08008410 	.word	0x08008410

0800300c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003014:	4ba1      	ldr	r3, [pc, #644]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800301e:	4b9f      	ldr	r3, [pc, #636]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	0b1b      	lsrs	r3, r3, #12
 8003024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003028:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800302a:	4b9c      	ldr	r3, [pc, #624]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003036:	4b99      	ldr	r3, [pc, #612]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8111 	beq.w	800327c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b02      	cmp	r3, #2
 800305e:	f000 8083 	beq.w	8003168 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b02      	cmp	r3, #2
 8003066:	f200 80a1 	bhi.w	80031ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d056      	beq.n	8003124 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003076:	e099      	b.n	80031ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003078:	4b88      	ldr	r3, [pc, #544]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d02d      	beq.n	80030e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003084:	4b85      	ldr	r3, [pc, #532]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	4a84      	ldr	r2, [pc, #528]	; (80032a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ae:	4b7b      	ldr	r3, [pc, #492]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030be:	ed97 6a03 	vldr	s12, [r7, #12]
 80030c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80032a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80030de:	e087      	b.n	80031f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80030ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f2:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003102:	ed97 6a03 	vldr	s12, [r7, #12]
 8003106:	eddf 5a67 	vldr	s11, [pc, #412]	; 80032a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800310a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003122:	e065      	b.n	80031f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003146:	ed97 6a03 	vldr	s12, [r7, #12]
 800314a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80032a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800314e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003166:	e043      	b.n	80031f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317a:	4b48      	ldr	r3, [pc, #288]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318a:	ed97 6a03 	vldr	s12, [r7, #12]
 800318e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80032a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031aa:	e021      	b.n	80031f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80031d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80032a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80031f0:	4b2a      	ldr	r3, [pc, #168]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	0a5b      	lsrs	r3, r3, #9
 80031f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800320a:	edd7 6a07 	vldr	s13, [r7, #28]
 800320e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003216:	ee17 2a90 	vmov	r2, s15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003238:	edd7 6a07 	vldr	s13, [r7, #28]
 800323c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003244:	ee17 2a90 	vmov	r2, s15
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003266:	edd7 6a07 	vldr	s13, [r7, #28]
 800326a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003272:	ee17 2a90 	vmov	r2, s15
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800327a:	e008      	b.n	800328e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
}
 800328e:	bf00      	nop
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	58024400 	.word	0x58024400
 80032a0:	03d09000 	.word	0x03d09000
 80032a4:	46000000 	.word	0x46000000
 80032a8:	4c742400 	.word	0x4c742400
 80032ac:	4a742400 	.word	0x4a742400
 80032b0:	4af42400 	.word	0x4af42400

080032b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032bc:	4ba1      	ldr	r3, [pc, #644]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80032c6:	4b9f      	ldr	r3, [pc, #636]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	0d1b      	lsrs	r3, r3, #20
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80032d2:	4b9c      	ldr	r3, [pc, #624]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032de:	4b99      	ldr	r3, [pc, #612]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	08db      	lsrs	r3, r3, #3
 80032e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8111 	beq.w	8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b02      	cmp	r3, #2
 8003306:	f000 8083 	beq.w	8003410 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b02      	cmp	r3, #2
 800330e:	f200 80a1 	bhi.w	8003454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d056      	beq.n	80033cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800331e:	e099      	b.n	8003454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003320:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d02d      	beq.n	8003388 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800332c:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	4a84      	ldr	r2, [pc, #528]	; (8003548 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
 800333c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b7b      	ldr	r3, [pc, #492]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a03 	vldr	s12, [r7, #12]
 800336a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800354c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003386:	e087      	b.n	8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800354c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033ca:	e065      	b.n	8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80033f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800354c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800340e:	e043      	b.n	8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003558 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b48      	ldr	r3, [pc, #288]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a03 	vldr	s12, [r7, #12]
 8003436:	eddf 5a45 	vldr	s11, [pc, #276]	; 800354c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003452:	e021      	b.n	8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a03 	vldr	s12, [r7, #12]
 800347a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800354c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003496:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	0a5b      	lsrs	r3, r3, #9
 800349e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80034b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034be:	ee17 2a90 	vmov	r2, s15
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ec:	ee17 2a90 	vmov	r2, s15
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	0e1b      	lsrs	r3, r3, #24
 80034fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800350a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800350e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351a:	ee17 2a90 	vmov	r2, s15
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003522:	e008      	b.n	8003536 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
 8003548:	03d09000 	.word	0x03d09000
 800354c:	46000000 	.word	0x46000000
 8003550:	4c742400 	.word	0x4c742400
 8003554:	4a742400 	.word	0x4a742400
 8003558:	4af42400 	.word	0x4af42400

0800355c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800356a:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b03      	cmp	r3, #3
 8003574:	d101      	bne.n	800357a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e099      	b.n	80036ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800357a:	4b4f      	ldr	r3, [pc, #316]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a4e      	ldr	r2, [pc, #312]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003580:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003586:	f7fd f911 	bl	80007ac <HAL_GetTick>
 800358a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800358c:	e008      	b.n	80035a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800358e:	f7fd f90d 	bl	80007ac <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e086      	b.n	80036ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035a0:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035ac:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	031b      	lsls	r3, r3, #12
 80035ba:	493f      	ldr	r1, [pc, #252]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	628b      	str	r3, [r1, #40]	; 0x28
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	025b      	lsls	r3, r3, #9
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	3b01      	subs	r3, #1
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035f0:	4931      	ldr	r1, [pc, #196]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80035f6:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	492d      	ldr	r1, [pc, #180]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003604:	4313      	orrs	r3, r2
 8003606:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003608:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f023 0220 	bic.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4928      	ldr	r1, [pc, #160]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800361a:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003620:	f023 0310 	bic.w	r3, r3, #16
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <RCCEx_PLL2_Config+0x160>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	69d2      	ldr	r2, [r2, #28]
 8003632:	00d2      	lsls	r2, r2, #3
 8003634:	4920      	ldr	r1, [pc, #128]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800363a:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	4a1e      	ldr	r2, [pc, #120]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003640:	f043 0310 	orr.w	r3, r3, #16
 8003644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003656:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003658:	e00f      	b.n	800367a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800366c:	e005      	b.n	800367a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003678:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 8003680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003686:	f7fd f891 	bl	80007ac <HAL_GetTick>
 800368a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800368c:	e008      	b.n	80036a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800368e:	f7fd f88d 	bl	80007ac <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e006      	b.n	80036ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <RCCEx_PLL2_Config+0x15c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	58024400 	.word	0x58024400
 80036bc:	ffff0007 	.word	0xffff0007

080036c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036ce:	4b53      	ldr	r3, [pc, #332]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d101      	bne.n	80036de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e099      	b.n	8003812 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036de:	4b4f      	ldr	r3, [pc, #316]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4e      	ldr	r2, [pc, #312]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80036e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ea:	f7fd f85f 	bl	80007ac <HAL_GetTick>
 80036ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036f0:	e008      	b.n	8003704 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80036f2:	f7fd f85b 	bl	80007ac <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e086      	b.n	8003812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003704:	4b45      	ldr	r3, [pc, #276]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	051b      	lsls	r3, r3, #20
 800371e:	493f      	ldr	r1, [pc, #252]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003720:	4313      	orrs	r3, r2
 8003722:	628b      	str	r3, [r1, #40]	; 0x28
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	3b01      	subs	r3, #1
 800372a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	3b01      	subs	r3, #1
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	b29b      	uxth	r3, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	3b01      	subs	r3, #1
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003754:	4931      	ldr	r1, [pc, #196]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003756:	4313      	orrs	r3, r2
 8003758:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	492d      	ldr	r1, [pc, #180]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003768:	4313      	orrs	r3, r2
 800376a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4928      	ldr	r1, [pc, #160]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 800377a:	4313      	orrs	r3, r2
 800377c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a26      	ldr	r2, [pc, #152]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 800378c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <RCCEx_PLL3_Config+0x160>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	69d2      	ldr	r2, [r2, #28]
 8003796:	00d2      	lsls	r2, r2, #3
 8003798:	4920      	ldr	r1, [pc, #128]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037bc:	e00f      	b.n	80037de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d106      	bne.n	80037d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037d0:	e005      	b.n	80037de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	4a11      	ldr	r2, [pc, #68]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a0e      	ldr	r2, [pc, #56]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ea:	f7fc ffdf 	bl	80007ac <HAL_GetTick>
 80037ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037f0:	e008      	b.n	8003804 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037f2:	f7fc ffdb 	bl	80007ac <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e006      	b.n	8003812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <RCCEx_PLL3_Config+0x15c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	58024400 	.word	0x58024400
 8003820:	ffff0007 	.word	0xffff0007

08003824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e049      	b.n	80038ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f841 	bl	80038d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f000 fa00 	bl	8003c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d001      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e054      	b.n	80039aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x80>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392a:	d01d      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x80>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a22      	ldr	r2, [pc, #136]	; (80039bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d018      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x80>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x80>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x80>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x80>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <HAL_TIM_Base_Start_IT+0xe4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x80>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d115      	bne.n	8003994 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_TIM_Base_Start_IT+0xec>)
 8003970:	4013      	ands	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b06      	cmp	r3, #6
 8003978:	d015      	beq.n	80039a6 <HAL_TIM_Base_Start_IT+0xbe>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003980:	d011      	beq.n	80039a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	e008      	b.n	80039a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e000      	b.n	80039a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40001800 	.word	0x40001800
 80039d0:	40014000 	.word	0x40014000
 80039d4:	00010007 	.word	0x00010007

080039d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0202 	mvn.w	r2, #2
 8003a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f905 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8f7 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f908 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0204 	mvn.w	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8db 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8cd 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f8de 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0208 	mvn.w	r2, #8
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8b1 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8a3 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f8b4 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0210 	mvn.w	r2, #16
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2208      	movs	r2, #8
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f887 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f879 	bl	8003c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f88a 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0201 	mvn.w	r2, #1
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f003 fb20 	bl	800719c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f914 	bl	8003db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d10e      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f907 	bl	8003dc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d10e      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d107      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f838 	bl	8003c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d10e      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d107      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0220 	mvn.w	r2, #32
 8003c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8c7 	bl	8003d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a40      	ldr	r2, [pc, #256]	; (8003d7c <TIM_Base_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d00f      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a3d      	ldr	r2, [pc, #244]	; (8003d80 <TIM_Base_SetConfig+0x118>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <TIM_Base_SetConfig+0x11c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a3b      	ldr	r2, [pc, #236]	; (8003d88 <TIM_Base_SetConfig+0x120>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <TIM_Base_SetConfig+0x124>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d108      	bne.n	8003cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <TIM_Base_SetConfig+0x114>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01f      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d01b      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a2c      	ldr	r2, [pc, #176]	; (8003d80 <TIM_Base_SetConfig+0x118>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d017      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <TIM_Base_SetConfig+0x11c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <TIM_Base_SetConfig+0x120>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00f      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <TIM_Base_SetConfig+0x124>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <TIM_Base_SetConfig+0x128>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <TIM_Base_SetConfig+0x12c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <TIM_Base_SetConfig+0x130>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <TIM_Base_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <TIM_Base_SetConfig+0x124>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <TIM_Base_SetConfig+0x128>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <TIM_Base_SetConfig+0x12c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0f      	ldr	r2, [pc, #60]	; (8003d98 <TIM_Base_SetConfig+0x130>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d103      	bne.n	8003d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40010400 	.word	0x40010400
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40014400 	.word	0x40014400
 8003d98:	40014800 	.word	0x40014800

08003d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e042      	b.n	8003e70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f003 facd 	bl	800739c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2224      	movs	r2, #36	; 0x24
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f996 	bl	800414c <UART_SetConfig>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e022      	b.n	8003e70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 feea 	bl	8004c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 ff71 	bl	8004d50 <UART_CheckIdleState>
 8003e6e:	4603      	mov	r3, r0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	f040 8083 	bne.w	8003f9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_UART_Transmit+0x28>
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e07b      	b.n	8003f9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Transmit+0x3a>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e074      	b.n	8003f9c <HAL_UART_Transmit+0x124>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2221      	movs	r2, #33	; 0x21
 8003ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fc fc6f 	bl	80007ac <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Transmit+0x84>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003f0c:	e02c      	b.n	8003f68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 ff64 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e039      	b.n	8003f9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3302      	adds	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e007      	b.n	8003f56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1cc      	bne.n	8003f0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2140      	movs	r1, #64	; 0x40
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 ff31 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e006      	b.n	8003f9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	f040 80c0 	bne.w	8004140 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_UART_Receive+0x28>
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Receive+0x3a>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0b1      	b.n	8004142 <HAL_UART_Receive+0x19e>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2222      	movs	r2, #34	; 0x22
 8003ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffc:	f7fc fbd6 	bl	80007ac <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	d10e      	bne.n	800403a <HAL_UART_Receive+0x96>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <HAL_UART_Receive+0x8c>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f240 12ff 	movw	r2, #511	; 0x1ff
 800402a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800402e:	e02d      	b.n	800408c <HAL_UART_Receive+0xe8>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	22ff      	movs	r2, #255	; 0xff
 8004034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004038:	e028      	b.n	800408c <HAL_UART_Receive+0xe8>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_UART_Receive+0xba>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <HAL_UART_Receive+0xb0>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	22ff      	movs	r2, #255	; 0xff
 800404e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004052:	e01b      	b.n	800408c <HAL_UART_Receive+0xe8>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	227f      	movs	r2, #127	; 0x7f
 8004058:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800405c:	e016      	b.n	800408c <HAL_UART_Receive+0xe8>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004066:	d10d      	bne.n	8004084 <HAL_UART_Receive+0xe0>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <HAL_UART_Receive+0xd6>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	227f      	movs	r2, #127	; 0x7f
 8004074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004078:	e008      	b.n	800408c <HAL_UART_Receive+0xe8>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	223f      	movs	r2, #63	; 0x3f
 800407e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004082:	e003      	b.n	800408c <HAL_UART_Receive+0xe8>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004092:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d108      	bne.n	80040b0 <HAL_UART_Receive+0x10c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e003      	b.n	80040b8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040c0:	e032      	b.n	8004128 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2120      	movs	r1, #32
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fe8a 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e032      	b.n	8004142 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	8a7b      	ldrh	r3, [r7, #18]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	3302      	adds	r3, #2
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e00c      	b.n	8004116 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	b2da      	uxtb	r2, r3
 8004104:	8a7b      	ldrh	r3, [r7, #18]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	4013      	ands	r3, r2
 800410a:	b2da      	uxtb	r2, r3
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1c6      	bne.n	80040c2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	b08e      	sub	sp, #56	; 0x38
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4313      	orrs	r3, r2
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4bbf      	ldr	r3, [pc, #764]	; (8004478 <UART_SetConfig+0x32c>)
 800417a:	4013      	ands	r3, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004182:	430b      	orrs	r3, r1
 8004184:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4ab5      	ldr	r2, [pc, #724]	; (800447c <UART_SetConfig+0x330>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b2:	4313      	orrs	r3, r2
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4bb0      	ldr	r3, [pc, #704]	; (8004480 <UART_SetConfig+0x334>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	f023 010f 	bic.w	r1, r3, #15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4aa7      	ldr	r2, [pc, #668]	; (8004484 <UART_SetConfig+0x338>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d176      	bne.n	80042d8 <UART_SetConfig+0x18c>
 80041ea:	4ba7      	ldr	r3, [pc, #668]	; (8004488 <UART_SetConfig+0x33c>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f2:	2b28      	cmp	r3, #40	; 0x28
 80041f4:	d86c      	bhi.n	80042d0 <UART_SetConfig+0x184>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0xb0>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	080042a1 	.word	0x080042a1
 8004200:	080042d1 	.word	0x080042d1
 8004204:	080042d1 	.word	0x080042d1
 8004208:	080042d1 	.word	0x080042d1
 800420c:	080042d1 	.word	0x080042d1
 8004210:	080042d1 	.word	0x080042d1
 8004214:	080042d1 	.word	0x080042d1
 8004218:	080042d1 	.word	0x080042d1
 800421c:	080042a9 	.word	0x080042a9
 8004220:	080042d1 	.word	0x080042d1
 8004224:	080042d1 	.word	0x080042d1
 8004228:	080042d1 	.word	0x080042d1
 800422c:	080042d1 	.word	0x080042d1
 8004230:	080042d1 	.word	0x080042d1
 8004234:	080042d1 	.word	0x080042d1
 8004238:	080042d1 	.word	0x080042d1
 800423c:	080042b1 	.word	0x080042b1
 8004240:	080042d1 	.word	0x080042d1
 8004244:	080042d1 	.word	0x080042d1
 8004248:	080042d1 	.word	0x080042d1
 800424c:	080042d1 	.word	0x080042d1
 8004250:	080042d1 	.word	0x080042d1
 8004254:	080042d1 	.word	0x080042d1
 8004258:	080042d1 	.word	0x080042d1
 800425c:	080042b9 	.word	0x080042b9
 8004260:	080042d1 	.word	0x080042d1
 8004264:	080042d1 	.word	0x080042d1
 8004268:	080042d1 	.word	0x080042d1
 800426c:	080042d1 	.word	0x080042d1
 8004270:	080042d1 	.word	0x080042d1
 8004274:	080042d1 	.word	0x080042d1
 8004278:	080042d1 	.word	0x080042d1
 800427c:	080042c1 	.word	0x080042c1
 8004280:	080042d1 	.word	0x080042d1
 8004284:	080042d1 	.word	0x080042d1
 8004288:	080042d1 	.word	0x080042d1
 800428c:	080042d1 	.word	0x080042d1
 8004290:	080042d1 	.word	0x080042d1
 8004294:	080042d1 	.word	0x080042d1
 8004298:	080042d1 	.word	0x080042d1
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a6:	e222      	b.n	80046ee <UART_SetConfig+0x5a2>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ae:	e21e      	b.n	80046ee <UART_SetConfig+0x5a2>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b6:	e21a      	b.n	80046ee <UART_SetConfig+0x5a2>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042be:	e216      	b.n	80046ee <UART_SetConfig+0x5a2>
 80042c0:	2320      	movs	r3, #32
 80042c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042c6:	e212      	b.n	80046ee <UART_SetConfig+0x5a2>
 80042c8:	2340      	movs	r3, #64	; 0x40
 80042ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ce:	e20e      	b.n	80046ee <UART_SetConfig+0x5a2>
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042d6:	e20a      	b.n	80046ee <UART_SetConfig+0x5a2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6b      	ldr	r2, [pc, #428]	; (800448c <UART_SetConfig+0x340>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d130      	bne.n	8004344 <UART_SetConfig+0x1f8>
 80042e2:	4b69      	ldr	r3, [pc, #420]	; (8004488 <UART_SetConfig+0x33c>)
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d826      	bhi.n	800433c <UART_SetConfig+0x1f0>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <UART_SetConfig+0x1a8>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	0800430d 	.word	0x0800430d
 80042f8:	08004315 	.word	0x08004315
 80042fc:	0800431d 	.word	0x0800431d
 8004300:	08004325 	.word	0x08004325
 8004304:	0800432d 	.word	0x0800432d
 8004308:	08004335 	.word	0x08004335
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004312:	e1ec      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004314:	2304      	movs	r3, #4
 8004316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431a:	e1e8      	b.n	80046ee <UART_SetConfig+0x5a2>
 800431c:	2308      	movs	r3, #8
 800431e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004322:	e1e4      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004324:	2310      	movs	r3, #16
 8004326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432a:	e1e0      	b.n	80046ee <UART_SetConfig+0x5a2>
 800432c:	2320      	movs	r3, #32
 800432e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004332:	e1dc      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004334:	2340      	movs	r3, #64	; 0x40
 8004336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800433a:	e1d8      	b.n	80046ee <UART_SetConfig+0x5a2>
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004342:	e1d4      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a51      	ldr	r2, [pc, #324]	; (8004490 <UART_SetConfig+0x344>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d130      	bne.n	80043b0 <UART_SetConfig+0x264>
 800434e:	4b4e      	ldr	r3, [pc, #312]	; (8004488 <UART_SetConfig+0x33c>)
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	2b05      	cmp	r3, #5
 8004358:	d826      	bhi.n	80043a8 <UART_SetConfig+0x25c>
 800435a:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0x214>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004379 	.word	0x08004379
 8004364:	08004381 	.word	0x08004381
 8004368:	08004389 	.word	0x08004389
 800436c:	08004391 	.word	0x08004391
 8004370:	08004399 	.word	0x08004399
 8004374:	080043a1 	.word	0x080043a1
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800437e:	e1b6      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004380:	2304      	movs	r3, #4
 8004382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004386:	e1b2      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004388:	2308      	movs	r3, #8
 800438a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438e:	e1ae      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004390:	2310      	movs	r3, #16
 8004392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004396:	e1aa      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004398:	2320      	movs	r3, #32
 800439a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439e:	e1a6      	b.n	80046ee <UART_SetConfig+0x5a2>
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a6:	e1a2      	b.n	80046ee <UART_SetConfig+0x5a2>
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e19e      	b.n	80046ee <UART_SetConfig+0x5a2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a37      	ldr	r2, [pc, #220]	; (8004494 <UART_SetConfig+0x348>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d130      	bne.n	800441c <UART_SetConfig+0x2d0>
 80043ba:	4b33      	ldr	r3, [pc, #204]	; (8004488 <UART_SetConfig+0x33c>)
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d826      	bhi.n	8004414 <UART_SetConfig+0x2c8>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x280>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043e5 	.word	0x080043e5
 80043d0:	080043ed 	.word	0x080043ed
 80043d4:	080043f5 	.word	0x080043f5
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ea:	e180      	b.n	80046ee <UART_SetConfig+0x5a2>
 80043ec:	2304      	movs	r3, #4
 80043ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043f2:	e17c      	b.n	80046ee <UART_SetConfig+0x5a2>
 80043f4:	2308      	movs	r3, #8
 80043f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043fa:	e178      	b.n	80046ee <UART_SetConfig+0x5a2>
 80043fc:	2310      	movs	r3, #16
 80043fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004402:	e174      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004404:	2320      	movs	r3, #32
 8004406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800440a:	e170      	b.n	80046ee <UART_SetConfig+0x5a2>
 800440c:	2340      	movs	r3, #64	; 0x40
 800440e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004412:	e16c      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e168      	b.n	80046ee <UART_SetConfig+0x5a2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <UART_SetConfig+0x34c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d142      	bne.n	80044ac <UART_SetConfig+0x360>
 8004426:	4b18      	ldr	r3, [pc, #96]	; (8004488 <UART_SetConfig+0x33c>)
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	2b05      	cmp	r3, #5
 8004430:	d838      	bhi.n	80044a4 <UART_SetConfig+0x358>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <UART_SetConfig+0x2ec>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004451 	.word	0x08004451
 800443c:	08004459 	.word	0x08004459
 8004440:	08004461 	.word	0x08004461
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	0800449d 	.word	0x0800449d
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004456:	e14a      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800445e:	e146      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004466:	e142      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800446e:	e13e      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004470:	2320      	movs	r3, #32
 8004472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004476:	e13a      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004478:	cfff69f3 	.word	0xcfff69f3
 800447c:	58000c00 	.word	0x58000c00
 8004480:	11fff4ff 	.word	0x11fff4ff
 8004484:	40011000 	.word	0x40011000
 8004488:	58024400 	.word	0x58024400
 800448c:	40004400 	.word	0x40004400
 8004490:	40004800 	.word	0x40004800
 8004494:	40004c00 	.word	0x40004c00
 8004498:	40005000 	.word	0x40005000
 800449c:	2340      	movs	r3, #64	; 0x40
 800449e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a2:	e124      	b.n	80046ee <UART_SetConfig+0x5a2>
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044aa:	e120      	b.n	80046ee <UART_SetConfig+0x5a2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4acc      	ldr	r2, [pc, #816]	; (80047e4 <UART_SetConfig+0x698>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d176      	bne.n	80045a4 <UART_SetConfig+0x458>
 80044b6:	4bcc      	ldr	r3, [pc, #816]	; (80047e8 <UART_SetConfig+0x69c>)
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044be:	2b28      	cmp	r3, #40	; 0x28
 80044c0:	d86c      	bhi.n	800459c <UART_SetConfig+0x450>
 80044c2:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <UART_SetConfig+0x37c>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	0800456d 	.word	0x0800456d
 80044cc:	0800459d 	.word	0x0800459d
 80044d0:	0800459d 	.word	0x0800459d
 80044d4:	0800459d 	.word	0x0800459d
 80044d8:	0800459d 	.word	0x0800459d
 80044dc:	0800459d 	.word	0x0800459d
 80044e0:	0800459d 	.word	0x0800459d
 80044e4:	0800459d 	.word	0x0800459d
 80044e8:	08004575 	.word	0x08004575
 80044ec:	0800459d 	.word	0x0800459d
 80044f0:	0800459d 	.word	0x0800459d
 80044f4:	0800459d 	.word	0x0800459d
 80044f8:	0800459d 	.word	0x0800459d
 80044fc:	0800459d 	.word	0x0800459d
 8004500:	0800459d 	.word	0x0800459d
 8004504:	0800459d 	.word	0x0800459d
 8004508:	0800457d 	.word	0x0800457d
 800450c:	0800459d 	.word	0x0800459d
 8004510:	0800459d 	.word	0x0800459d
 8004514:	0800459d 	.word	0x0800459d
 8004518:	0800459d 	.word	0x0800459d
 800451c:	0800459d 	.word	0x0800459d
 8004520:	0800459d 	.word	0x0800459d
 8004524:	0800459d 	.word	0x0800459d
 8004528:	08004585 	.word	0x08004585
 800452c:	0800459d 	.word	0x0800459d
 8004530:	0800459d 	.word	0x0800459d
 8004534:	0800459d 	.word	0x0800459d
 8004538:	0800459d 	.word	0x0800459d
 800453c:	0800459d 	.word	0x0800459d
 8004540:	0800459d 	.word	0x0800459d
 8004544:	0800459d 	.word	0x0800459d
 8004548:	0800458d 	.word	0x0800458d
 800454c:	0800459d 	.word	0x0800459d
 8004550:	0800459d 	.word	0x0800459d
 8004554:	0800459d 	.word	0x0800459d
 8004558:	0800459d 	.word	0x0800459d
 800455c:	0800459d 	.word	0x0800459d
 8004560:	0800459d 	.word	0x0800459d
 8004564:	0800459d 	.word	0x0800459d
 8004568:	08004595 	.word	0x08004595
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004572:	e0bc      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004574:	2304      	movs	r3, #4
 8004576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800457a:	e0b8      	b.n	80046ee <UART_SetConfig+0x5a2>
 800457c:	2308      	movs	r3, #8
 800457e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004582:	e0b4      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004584:	2310      	movs	r3, #16
 8004586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800458a:	e0b0      	b.n	80046ee <UART_SetConfig+0x5a2>
 800458c:	2320      	movs	r3, #32
 800458e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004592:	e0ac      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004594:	2340      	movs	r3, #64	; 0x40
 8004596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800459a:	e0a8      	b.n	80046ee <UART_SetConfig+0x5a2>
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045a2:	e0a4      	b.n	80046ee <UART_SetConfig+0x5a2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a90      	ldr	r2, [pc, #576]	; (80047ec <UART_SetConfig+0x6a0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d130      	bne.n	8004610 <UART_SetConfig+0x4c4>
 80045ae:	4b8e      	ldr	r3, [pc, #568]	; (80047e8 <UART_SetConfig+0x69c>)
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	d826      	bhi.n	8004608 <UART_SetConfig+0x4bc>
 80045ba:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x474>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045d9 	.word	0x080045d9
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045e9 	.word	0x080045e9
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	08004601 	.word	0x08004601
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045de:	e086      	b.n	80046ee <UART_SetConfig+0x5a2>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045e6:	e082      	b.n	80046ee <UART_SetConfig+0x5a2>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ee:	e07e      	b.n	80046ee <UART_SetConfig+0x5a2>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045f6:	e07a      	b.n	80046ee <UART_SetConfig+0x5a2>
 80045f8:	2320      	movs	r3, #32
 80045fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045fe:	e076      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004600:	2340      	movs	r3, #64	; 0x40
 8004602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004606:	e072      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460e:	e06e      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a76      	ldr	r2, [pc, #472]	; (80047f0 <UART_SetConfig+0x6a4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d130      	bne.n	800467c <UART_SetConfig+0x530>
 800461a:	4b73      	ldr	r3, [pc, #460]	; (80047e8 <UART_SetConfig+0x69c>)
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b05      	cmp	r3, #5
 8004624:	d826      	bhi.n	8004674 <UART_SetConfig+0x528>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x4e0>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	08004645 	.word	0x08004645
 8004630:	0800464d 	.word	0x0800464d
 8004634:	08004655 	.word	0x08004655
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800464a:	e050      	b.n	80046ee <UART_SetConfig+0x5a2>
 800464c:	2304      	movs	r3, #4
 800464e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004652:	e04c      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004654:	2308      	movs	r3, #8
 8004656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465a:	e048      	b.n	80046ee <UART_SetConfig+0x5a2>
 800465c:	2310      	movs	r3, #16
 800465e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004662:	e044      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004664:	2320      	movs	r3, #32
 8004666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800466a:	e040      	b.n	80046ee <UART_SetConfig+0x5a2>
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004672:	e03c      	b.n	80046ee <UART_SetConfig+0x5a2>
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467a:	e038      	b.n	80046ee <UART_SetConfig+0x5a2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a5c      	ldr	r2, [pc, #368]	; (80047f4 <UART_SetConfig+0x6a8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d130      	bne.n	80046e8 <UART_SetConfig+0x59c>
 8004686:	4b58      	ldr	r3, [pc, #352]	; (80047e8 <UART_SetConfig+0x69c>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b05      	cmp	r3, #5
 8004690:	d826      	bhi.n	80046e0 <UART_SetConfig+0x594>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x54c>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046b1 	.word	0x080046b1
 800469c:	080046b9 	.word	0x080046b9
 80046a0:	080046c1 	.word	0x080046c1
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	2302      	movs	r3, #2
 80046b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046b6:	e01a      	b.n	80046ee <UART_SetConfig+0x5a2>
 80046b8:	2304      	movs	r3, #4
 80046ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046be:	e016      	b.n	80046ee <UART_SetConfig+0x5a2>
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046c6:	e012      	b.n	80046ee <UART_SetConfig+0x5a2>
 80046c8:	2310      	movs	r3, #16
 80046ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ce:	e00e      	b.n	80046ee <UART_SetConfig+0x5a2>
 80046d0:	2320      	movs	r3, #32
 80046d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046d6:	e00a      	b.n	80046ee <UART_SetConfig+0x5a2>
 80046d8:	2340      	movs	r3, #64	; 0x40
 80046da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046de:	e006      	b.n	80046ee <UART_SetConfig+0x5a2>
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046e6:	e002      	b.n	80046ee <UART_SetConfig+0x5a2>
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a40      	ldr	r2, [pc, #256]	; (80047f4 <UART_SetConfig+0x6a8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	f040 80ef 	bne.w	80048d8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046fe:	2b20      	cmp	r3, #32
 8004700:	dc46      	bgt.n	8004790 <UART_SetConfig+0x644>
 8004702:	2b02      	cmp	r3, #2
 8004704:	f2c0 8081 	blt.w	800480a <UART_SetConfig+0x6be>
 8004708:	3b02      	subs	r3, #2
 800470a:	2b1e      	cmp	r3, #30
 800470c:	d87d      	bhi.n	800480a <UART_SetConfig+0x6be>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x5c8>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	08004797 	.word	0x08004797
 8004718:	0800480b 	.word	0x0800480b
 800471c:	0800479f 	.word	0x0800479f
 8004720:	0800480b 	.word	0x0800480b
 8004724:	0800480b 	.word	0x0800480b
 8004728:	0800480b 	.word	0x0800480b
 800472c:	080047af 	.word	0x080047af
 8004730:	0800480b 	.word	0x0800480b
 8004734:	0800480b 	.word	0x0800480b
 8004738:	0800480b 	.word	0x0800480b
 800473c:	0800480b 	.word	0x0800480b
 8004740:	0800480b 	.word	0x0800480b
 8004744:	0800480b 	.word	0x0800480b
 8004748:	0800480b 	.word	0x0800480b
 800474c:	080047bf 	.word	0x080047bf
 8004750:	0800480b 	.word	0x0800480b
 8004754:	0800480b 	.word	0x0800480b
 8004758:	0800480b 	.word	0x0800480b
 800475c:	0800480b 	.word	0x0800480b
 8004760:	0800480b 	.word	0x0800480b
 8004764:	0800480b 	.word	0x0800480b
 8004768:	0800480b 	.word	0x0800480b
 800476c:	0800480b 	.word	0x0800480b
 8004770:	0800480b 	.word	0x0800480b
 8004774:	0800480b 	.word	0x0800480b
 8004778:	0800480b 	.word	0x0800480b
 800477c:	0800480b 	.word	0x0800480b
 8004780:	0800480b 	.word	0x0800480b
 8004784:	0800480b 	.word	0x0800480b
 8004788:	0800480b 	.word	0x0800480b
 800478c:	080047fd 	.word	0x080047fd
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d036      	beq.n	8004802 <UART_SetConfig+0x6b6>
 8004794:	e039      	b.n	800480a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004796:	f7fe fc23 	bl	8002fe0 <HAL_RCCEx_GetD3PCLK1Freq>
 800479a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800479c:	e03b      	b.n	8004816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fc32 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ac:	e033      	b.n	8004816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fd7e 	bl	80032b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047bc:	e02b      	b.n	8004816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <UART_SetConfig+0x69c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <UART_SetConfig+0x69c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	08db      	lsrs	r3, r3, #3
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <UART_SetConfig+0x6ac>)
 80047d6:	fa22 f303 	lsr.w	r3, r2, r3
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047dc:	e01b      	b.n	8004816 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <UART_SetConfig+0x6ac>)
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047e2:	e018      	b.n	8004816 <UART_SetConfig+0x6ca>
 80047e4:	40011400 	.word	0x40011400
 80047e8:	58024400 	.word	0x58024400
 80047ec:	40007800 	.word	0x40007800
 80047f0:	40007c00 	.word	0x40007c00
 80047f4:	58000c00 	.word	0x58000c00
 80047f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047fc:	4bc4      	ldr	r3, [pc, #784]	; (8004b10 <UART_SetConfig+0x9c4>)
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004800:	e009      	b.n	8004816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004808:	e005      	b.n	8004816 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 81da 	beq.w	8004bd2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	4abc      	ldr	r2, [pc, #752]	; (8004b14 <UART_SetConfig+0x9c8>)
 8004824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004828:	461a      	mov	r2, r3
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004830:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	429a      	cmp	r2, r3
 8004840:	d305      	bcc.n	800484e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	429a      	cmp	r2, r3
 800484c:	d903      	bls.n	8004856 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004854:	e1bd      	b.n	8004bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	4618      	mov	r0, r3
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	4aac      	ldr	r2, [pc, #688]	; (8004b14 <UART_SetConfig+0x9c8>)
 8004864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004868:	b29a      	uxth	r2, r3
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	f7fb fd37 	bl	80002e0 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	020b      	lsls	r3, r1, #8
 8004884:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004888:	0202      	lsls	r2, r0, #8
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	6849      	ldr	r1, [r1, #4]
 800488e:	0849      	lsrs	r1, r1, #1
 8004890:	4608      	mov	r0, r1
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	1814      	adds	r4, r2, r0
 8004898:	eb43 0501 	adc.w	r5, r3, r1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fb fd19 	bl	80002e0 <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4613      	mov	r3, r2
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048bc:	d308      	bcc.n	80048d0 <UART_SetConfig+0x784>
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c4:	d204      	bcs.n	80048d0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	e180      	b.n	8004bd2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80048d6:	e17c      	b.n	8004bd2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e0:	f040 80be 	bne.w	8004a60 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80048e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	dc49      	bgt.n	8004980 <UART_SetConfig+0x834>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db7c      	blt.n	80049ea <UART_SetConfig+0x89e>
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d87a      	bhi.n	80049ea <UART_SetConfig+0x89e>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0x7b0>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004987 	.word	0x08004987
 8004900:	0800498f 	.word	0x0800498f
 8004904:	080049eb 	.word	0x080049eb
 8004908:	080049eb 	.word	0x080049eb
 800490c:	08004997 	.word	0x08004997
 8004910:	080049eb 	.word	0x080049eb
 8004914:	080049eb 	.word	0x080049eb
 8004918:	080049eb 	.word	0x080049eb
 800491c:	080049a7 	.word	0x080049a7
 8004920:	080049eb 	.word	0x080049eb
 8004924:	080049eb 	.word	0x080049eb
 8004928:	080049eb 	.word	0x080049eb
 800492c:	080049eb 	.word	0x080049eb
 8004930:	080049eb 	.word	0x080049eb
 8004934:	080049eb 	.word	0x080049eb
 8004938:	080049eb 	.word	0x080049eb
 800493c:	080049b7 	.word	0x080049b7
 8004940:	080049eb 	.word	0x080049eb
 8004944:	080049eb 	.word	0x080049eb
 8004948:	080049eb 	.word	0x080049eb
 800494c:	080049eb 	.word	0x080049eb
 8004950:	080049eb 	.word	0x080049eb
 8004954:	080049eb 	.word	0x080049eb
 8004958:	080049eb 	.word	0x080049eb
 800495c:	080049eb 	.word	0x080049eb
 8004960:	080049eb 	.word	0x080049eb
 8004964:	080049eb 	.word	0x080049eb
 8004968:	080049eb 	.word	0x080049eb
 800496c:	080049eb 	.word	0x080049eb
 8004970:	080049eb 	.word	0x080049eb
 8004974:	080049eb 	.word	0x080049eb
 8004978:	080049eb 	.word	0x080049eb
 800497c:	080049dd 	.word	0x080049dd
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d02e      	beq.n	80049e2 <UART_SetConfig+0x896>
 8004984:	e031      	b.n	80049ea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fd fb7d 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 800498a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800498c:	e033      	b.n	80049f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800498e:	f7fd fb8f 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8004992:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004994:	e02f      	b.n	80049f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004996:	f107 0314 	add.w	r3, r7, #20
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fb36 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049a4:	e027      	b.n	80049f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049a6:	f107 0308 	add.w	r3, r7, #8
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fc82 	bl	80032b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049b4:	e01f      	b.n	80049f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049b6:	4b58      	ldr	r3, [pc, #352]	; (8004b18 <UART_SetConfig+0x9cc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049c2:	4b55      	ldr	r3, [pc, #340]	; (8004b18 <UART_SetConfig+0x9cc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	4a53      	ldr	r2, [pc, #332]	; (8004b1c <UART_SetConfig+0x9d0>)
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049d4:	e00f      	b.n	80049f6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80049d6:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <UART_SetConfig+0x9d0>)
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049da:	e00c      	b.n	80049f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049dc:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <UART_SetConfig+0x9c4>)
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049e0:	e009      	b.n	80049f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049e8:	e005      	b.n	80049f6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80049f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80ea 	beq.w	8004bd2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	4a44      	ldr	r2, [pc, #272]	; (8004b14 <UART_SetConfig+0x9c8>)
 8004a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a10:	005a      	lsls	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	441a      	add	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	d916      	bls.n	8004a58 <UART_SetConfig+0x90c>
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d212      	bcs.n	8004a58 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f023 030f 	bic.w	r3, r3, #15
 8004a3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e0bc      	b.n	8004bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004a5e:	e0b8      	b.n	8004bd2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	dc4b      	bgt.n	8004b00 <UART_SetConfig+0x9b4>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f2c0 8087 	blt.w	8004b7c <UART_SetConfig+0xa30>
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	f200 8084 	bhi.w	8004b7c <UART_SetConfig+0xa30>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x930>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004b07 	.word	0x08004b07
 8004a80:	08004b21 	.word	0x08004b21
 8004a84:	08004b7d 	.word	0x08004b7d
 8004a88:	08004b7d 	.word	0x08004b7d
 8004a8c:	08004b29 	.word	0x08004b29
 8004a90:	08004b7d 	.word	0x08004b7d
 8004a94:	08004b7d 	.word	0x08004b7d
 8004a98:	08004b7d 	.word	0x08004b7d
 8004a9c:	08004b39 	.word	0x08004b39
 8004aa0:	08004b7d 	.word	0x08004b7d
 8004aa4:	08004b7d 	.word	0x08004b7d
 8004aa8:	08004b7d 	.word	0x08004b7d
 8004aac:	08004b7d 	.word	0x08004b7d
 8004ab0:	08004b7d 	.word	0x08004b7d
 8004ab4:	08004b7d 	.word	0x08004b7d
 8004ab8:	08004b7d 	.word	0x08004b7d
 8004abc:	08004b49 	.word	0x08004b49
 8004ac0:	08004b7d 	.word	0x08004b7d
 8004ac4:	08004b7d 	.word	0x08004b7d
 8004ac8:	08004b7d 	.word	0x08004b7d
 8004acc:	08004b7d 	.word	0x08004b7d
 8004ad0:	08004b7d 	.word	0x08004b7d
 8004ad4:	08004b7d 	.word	0x08004b7d
 8004ad8:	08004b7d 	.word	0x08004b7d
 8004adc:	08004b7d 	.word	0x08004b7d
 8004ae0:	08004b7d 	.word	0x08004b7d
 8004ae4:	08004b7d 	.word	0x08004b7d
 8004ae8:	08004b7d 	.word	0x08004b7d
 8004aec:	08004b7d 	.word	0x08004b7d
 8004af0:	08004b7d 	.word	0x08004b7d
 8004af4:	08004b7d 	.word	0x08004b7d
 8004af8:	08004b7d 	.word	0x08004b7d
 8004afc:	08004b6f 	.word	0x08004b6f
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d037      	beq.n	8004b74 <UART_SetConfig+0xa28>
 8004b04:	e03a      	b.n	8004b7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b06:	f7fd fabd 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 8004b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b0c:	e03c      	b.n	8004b88 <UART_SetConfig+0xa3c>
 8004b0e:	bf00      	nop
 8004b10:	003d0900 	.word	0x003d0900
 8004b14:	08008420 	.word	0x08008420
 8004b18:	58024400 	.word	0x58024400
 8004b1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b20:	f7fd fac6 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8004b24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b26:	e02f      	b.n	8004b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fa6d 	bl	800300c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b36:	e027      	b.n	8004b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fbb9 	bl	80032b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b46:	e01f      	b.n	8004b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b48:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <UART_SetConfig+0xab0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b54:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <UART_SetConfig+0xab0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <UART_SetConfig+0xab4>)
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <UART_SetConfig+0xab4>)
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b6c:	e00c      	b.n	8004b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b6e:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <UART_SetConfig+0xab8>)
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b72:	e009      	b.n	8004b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b7a:	e005      	b.n	8004b88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004b86:	bf00      	nop
    }

    if (pclk != 0U)
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d021      	beq.n	8004bd2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <UART_SetConfig+0xabc>)
 8004b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	441a      	add	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	2b0f      	cmp	r3, #15
 8004bb6:	d909      	bls.n	8004bcc <UART_SetConfig+0xa80>
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbe:	d205      	bcs.n	8004bcc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e002      	b.n	8004bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004bee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3738      	adds	r7, #56	; 0x38
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	03d09000 	.word	0x03d09000
 8004c04:	003d0900 	.word	0x003d0900
 8004c08:	08008420 	.word	0x08008420

08004c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0a:	d10a      	bne.n	8004d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d60:	f7fb fd24 	bl	80007ac <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d10e      	bne.n	8004d92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f82f 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e025      	b.n	8004dde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d10e      	bne.n	8004dbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f819 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e00f      	b.n	8004dde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b09c      	sub	sp, #112	; 0x70
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df6:	e0a9      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	f000 80a5 	beq.w	8004f4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fb fcd3 	bl	80007ac <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d140      	bne.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	663b      	str	r3, [r7, #96]	; 0x60
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e069      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d051      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb6:	d149      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e6      	bne.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f14:	623a      	str	r2, [r7, #32]
 8004f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e5      	bne.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e010      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	f43f af46 	beq.w	8004df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3770      	adds	r7, #112	; 0x70
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_UARTEx_DisableFifoMode+0x16>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e027      	b.n	8004fdc <HAL_UARTEx_DisableFifoMode+0x66>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	; 0x24
 8004f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e02d      	b.n	800505c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f84f 	bl	80050e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005078:	2302      	movs	r3, #2
 800507a:	e02d      	b.n	80050d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2224      	movs	r2, #36	; 0x24
 8005088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f811 	bl	80050e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005100:	e031      	b.n	8005166 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005102:	2310      	movs	r3, #16
 8005104:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005106:	2310      	movs	r3, #16
 8005108:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	0e5b      	lsrs	r3, r3, #25
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	0f5b      	lsrs	r3, r3, #29
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	7b3a      	ldrb	r2, [r7, #12]
 800512e:	4911      	ldr	r1, [pc, #68]	; (8005174 <UARTEx_SetNbDataToProcess+0x94>)
 8005130:	5c8a      	ldrb	r2, [r1, r2]
 8005132:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005136:	7b3a      	ldrb	r2, [r7, #12]
 8005138:	490f      	ldr	r1, [pc, #60]	; (8005178 <UARTEx_SetNbDataToProcess+0x98>)
 800513a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800513c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	7b7a      	ldrb	r2, [r7, #13]
 800514c:	4909      	ldr	r1, [pc, #36]	; (8005174 <UARTEx_SetNbDataToProcess+0x94>)
 800514e:	5c8a      	ldrb	r2, [r1, r2]
 8005150:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005154:	7b7a      	ldrb	r2, [r7, #13]
 8005156:	4908      	ldr	r1, [pc, #32]	; (8005178 <UARTEx_SetNbDataToProcess+0x98>)
 8005158:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800515a:	fb93 f3f2 	sdiv	r3, r3, r2
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	08008438 	.word	0x08008438
 8005178:	08008440 	.word	0x08008440

0800517c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800517c:	b084      	sub	sp, #16
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	f107 001c 	add.w	r0, r7, #28
 800518a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	d120      	bne.n	80051d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <USB_CoreInit+0xd4>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 faa8 	bl	8005720 <USB_CoreReset>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	e01a      	b.n	800520c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa9c 	bl	8005720 <USB_CoreReset>
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
 80051fe:	e005      	b.n	800520c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b01      	cmp	r3, #1
 8005210:	d116      	bne.n	8005240 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <USB_CoreInit+0xd8>)
 8005222:	4313      	orrs	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f043 0206 	orr.w	r2, r3, #6
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800524c:	b004      	add	sp, #16
 800524e:	4770      	bx	lr
 8005250:	ffbdffbf 	.word	0xffbdffbf
 8005254:	03ee0000 	.word	0x03ee0000

08005258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f023 0201 	bic.w	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d115      	bne.n	80052c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a8:	2001      	movs	r0, #1
 80052aa:	f7fb fa8b 	bl	80007c4 <HAL_Delay>
      ms++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fa25 	bl	8005704 <USB_GetMode>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d01e      	beq.n	80052fe <USB_SetCurrentMode+0x84>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b31      	cmp	r3, #49	; 0x31
 80052c4:	d9f0      	bls.n	80052a8 <USB_SetCurrentMode+0x2e>
 80052c6:	e01a      	b.n	80052fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d115      	bne.n	80052fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052da:	2001      	movs	r0, #1
 80052dc:	f7fb fa72 	bl	80007c4 <HAL_Delay>
      ms++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa0c 	bl	8005704 <USB_GetMode>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <USB_SetCurrentMode+0x84>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b31      	cmp	r3, #49	; 0x31
 80052f6:	d9f0      	bls.n	80052da <USB_SetCurrentMode+0x60>
 80052f8:	e001      	b.n	80052fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e005      	b.n	800530a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b32      	cmp	r3, #50	; 0x32
 8005302:	d101      	bne.n	8005308 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005314:	b084      	sub	sp, #16
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e009      	b.n	8005348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	3340      	adds	r3, #64	; 0x40
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	2200      	movs	r2, #0
 8005340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3301      	adds	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b0e      	cmp	r3, #14
 800534c:	d9f2      	bls.n	8005334 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800534e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11c      	bne.n	800538e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e005      	b.n	800539a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	4619      	mov	r1, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	461a      	mov	r2, r3
 80053b6:	680b      	ldr	r3, [r1, #0]
 80053b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10c      	bne.n	80053da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053c6:	2100      	movs	r1, #0
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f961 	bl	8005690 <USB_SetDevSpeed>
 80053ce:	e008      	b.n	80053e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053d0:	2101      	movs	r1, #1
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f95c 	bl	8005690 <USB_SetDevSpeed>
 80053d8:	e003      	b.n	80053e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053da:	2103      	movs	r1, #3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f957 	bl	8005690 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e2:	2110      	movs	r1, #16
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f8f3 	bl	80055d0 <USB_FlushTxFifo>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f91d 	bl	8005634 <USB_FlushRxFifo>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	461a      	mov	r2, r3
 800540c:	2300      	movs	r3, #0
 800540e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	461a      	mov	r2, r3
 8005418:	2300      	movs	r3, #0
 800541a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	461a      	mov	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e043      	b.n	80054b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005444:	d118      	bne.n	8005478 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	461a      	mov	r2, r3
 800545a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e013      	b.n	800548a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	461a      	mov	r2, r3
 8005470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e008      	b.n	800548a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	461a      	mov	r2, r3
 8005486:	2300      	movs	r3, #0
 8005488:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	461a      	mov	r2, r3
 8005498:	2300      	movs	r3, #0
 800549a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	461a      	mov	r2, r3
 80054aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	3301      	adds	r3, #1
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d3b7      	bcc.n	800542e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054be:	2300      	movs	r3, #0
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	e043      	b.n	800554c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054da:	d118      	bne.n	800550e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	461a      	mov	r2, r3
 80054f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e013      	b.n	8005520 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	461a      	mov	r2, r3
 8005506:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e008      	b.n	8005520 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	461a      	mov	r2, r3
 800552e:	2300      	movs	r3, #0
 8005530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	461a      	mov	r2, r3
 8005540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005544:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	3301      	adds	r3, #1
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	429a      	cmp	r2, r3
 8005552:	d3b7      	bcc.n	80054c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005566:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005574:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	2b00      	cmp	r3, #0
 800557a:	d105      	bne.n	8005588 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f043 0210 	orr.w	r2, r3, #16
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <USB_DevInit+0x2b4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f043 0208 	orr.w	r2, r3, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d105      	bne.n	80055b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <USB_DevInit+0x2b8>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c4:	b004      	add	sp, #16
 80055c6:	4770      	bx	lr
 80055c8:	803c3800 	.word	0x803c3800
 80055cc:	40000004 	.word	0x40000004

080055d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	4a12      	ldr	r2, [pc, #72]	; (8005630 <USB_FlushTxFifo+0x60>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e01a      	b.n	8005624 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	daf3      	bge.n	80055de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	019b      	lsls	r3, r3, #6
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	4a08      	ldr	r2, [pc, #32]	; (8005630 <USB_FlushTxFifo+0x60>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e006      	b.n	8005624 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b20      	cmp	r3, #32
 8005620:	d0f1      	beq.n	8005606 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	00030d40 	.word	0x00030d40

08005634 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	4a11      	ldr	r2, [pc, #68]	; (800568c <USB_FlushRxFifo+0x58>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d901      	bls.n	8005650 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e017      	b.n	8005680 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	daf3      	bge.n	8005640 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2210      	movs	r2, #16
 8005660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	4a08      	ldr	r2, [pc, #32]	; (800568c <USB_FlushRxFifo+0x58>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e006      	b.n	8005680 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b10      	cmp	r3, #16
 800567c:	d0f1      	beq.n	8005662 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	00030d40 	.word	0x00030d40

08005690 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b0:	4313      	orrs	r3, r2
 80056b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056dc:	f023 0303 	bic.w	r3, r3, #3
 80056e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f0:	f043 0302 	orr.w	r3, r3, #2
 80056f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f003 0301 	and.w	r3, r3, #1
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <USB_CoreReset+0x60>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e01a      	b.n	8005772 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	daf3      	bge.n	800572c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f043 0201 	orr.w	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4a09      	ldr	r2, [pc, #36]	; (8005780 <USB_CoreReset+0x60>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e006      	b.n	8005772 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d0f1      	beq.n	8005754 <USB_CoreReset+0x34>

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	00030d40 	.word	0x00030d40

08005784 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005796:	2b84      	cmp	r3, #132	; 0x84
 8005798:	d005      	beq.n	80057a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800579a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	3303      	adds	r3, #3
 80057a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057b8:	f000 feec 	bl	8006594 <vTaskStartScheduler>
  
  return osOK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c4:	b089      	sub	sp, #36	; 0x24
 80057c6:	af04      	add	r7, sp, #16
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d020      	beq.n	8005816 <osThreadCreate+0x54>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01c      	beq.n	8005816 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685c      	ldr	r4, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681d      	ldr	r5, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691e      	ldr	r6, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff ffc8 	bl	8005784 <makeFreeRtosPriority>
 80057f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057fe:	9202      	str	r2, [sp, #8]
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	9100      	str	r1, [sp, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	4632      	mov	r2, r6
 8005808:	4629      	mov	r1, r5
 800580a:	4620      	mov	r0, r4
 800580c:	f000 fce4 	bl	80061d8 <xTaskCreateStatic>
 8005810:	4603      	mov	r3, r0
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e01c      	b.n	8005850 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685c      	ldr	r4, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005822:	b29e      	uxth	r6, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff ffaa 	bl	8005784 <makeFreeRtosPriority>
 8005830:	4602      	mov	r2, r0
 8005832:	f107 030c 	add.w	r3, r7, #12
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	9200      	str	r2, [sp, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	4632      	mov	r2, r6
 800583e:	4629      	mov	r1, r5
 8005840:	4620      	mov	r0, r4
 8005842:	f000 fd26 	bl	8006292 <xTaskCreate>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	d001      	beq.n	8005850 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	e000      	b.n	8005852 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005850:	68fb      	ldr	r3, [r7, #12]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800585a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <osDelay+0x16>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	e000      	b.n	8005872 <osDelay+0x18>
 8005870:	2301      	movs	r3, #1
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fe5a 	bl	800652c <vTaskDelay>
  
  return osOK;
 8005878:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005890:	f000 feea 	bl	8006668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005894:	4b5b      	ldr	r3, [pc, #364]	; (8005a04 <pvPortMalloc+0x180>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800589c:	f000 f920 	bl	8005ae0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058a0:	4b59      	ldr	r3, [pc, #356]	; (8005a08 <pvPortMalloc+0x184>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f040 8093 	bne.w	80059d4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01d      	beq.n	80058f0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80058b4:	2208      	movs	r2, #8
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d014      	beq.n	80058f0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f023 0307 	bic.w	r3, r3, #7
 80058cc:	3308      	adds	r3, #8
 80058ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d06e      	beq.n	80059d4 <pvPortMalloc+0x150>
 80058f6:	4b45      	ldr	r3, [pc, #276]	; (8005a0c <pvPortMalloc+0x188>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d869      	bhi.n	80059d4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <pvPortMalloc+0x18c>)
 8005902:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005904:	4b42      	ldr	r3, [pc, #264]	; (8005a10 <pvPortMalloc+0x18c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800590a:	e004      	b.n	8005916 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d903      	bls.n	8005928 <pvPortMalloc+0xa4>
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f1      	bne.n	800590c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005928:	4b36      	ldr	r3, [pc, #216]	; (8005a04 <pvPortMalloc+0x180>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	429a      	cmp	r2, r3
 8005930:	d050      	beq.n	80059d4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2208      	movs	r2, #8
 8005938:	4413      	add	r3, r2
 800593a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	2308      	movs	r3, #8
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	429a      	cmp	r2, r3
 8005952:	d91f      	bls.n	8005994 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <pvPortMalloc+0xf8>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	613b      	str	r3, [r7, #16]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1ad2      	subs	r2, r2, r3
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800598e:	69b8      	ldr	r0, [r7, #24]
 8005990:	f000 f908 	bl	8005ba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <pvPortMalloc+0x188>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <pvPortMalloc+0x188>)
 80059a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059a2:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <pvPortMalloc+0x188>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <pvPortMalloc+0x190>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d203      	bcs.n	80059b6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059ae:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <pvPortMalloc+0x188>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <pvPortMalloc+0x190>)
 80059b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <pvPortMalloc+0x184>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	431a      	orrs	r2, r3
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <pvPortMalloc+0x194>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	4a11      	ldr	r2, [pc, #68]	; (8005a18 <pvPortMalloc+0x194>)
 80059d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059d4:	f000 fe56 	bl	8006684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <pvPortMalloc+0x174>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <pvPortMalloc+0x172>
	return pvReturn;
 80059f8:	69fb      	ldr	r3, [r7, #28]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3728      	adds	r7, #40	; 0x28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	24003c9c 	.word	0x24003c9c
 8005a08:	24003cb0 	.word	0x24003cb0
 8005a0c:	24003ca0 	.word	0x24003ca0
 8005a10:	24003c94 	.word	0x24003c94
 8005a14:	24003ca4 	.word	0x24003ca4
 8005a18:	24003ca8 	.word	0x24003ca8

08005a1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d04d      	beq.n	8005aca <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a2e:	2308      	movs	r3, #8
 8005a30:	425b      	negs	r3, r3
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <vPortFree+0xb8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <vPortFree+0x44>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60fb      	str	r3, [r7, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <vPortFree+0x62>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	60bb      	str	r3, [r7, #8]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <vPortFree+0xb8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01e      	beq.n	8005aca <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11a      	bne.n	8005aca <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <vPortFree+0xb8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005aa4:	f000 fde0 	bl	8006668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <vPortFree+0xbc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <vPortFree+0xbc>)
 8005ab4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f000 f874 	bl	8005ba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <vPortFree+0xc0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a06      	ldr	r2, [pc, #24]	; (8005adc <vPortFree+0xc0>)
 8005ac4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ac6:	f000 fddd 	bl	8006684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005aca:	bf00      	nop
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	24003cb0 	.word	0x24003cb0
 8005ad8:	24003ca0 	.word	0x24003ca0
 8005adc:	24003cac 	.word	0x24003cac

08005ae0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ae6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005aea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <prvHeapInit+0xac>)
 8005aee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3307      	adds	r3, #7
 8005afe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <prvHeapInit+0xac>)
 8005b10:	4413      	add	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b18:	4a1d      	ldr	r2, [pc, #116]	; (8005b90 <prvHeapInit+0xb0>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <prvHeapInit+0xb0>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	4413      	add	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0307 	bic.w	r3, r3, #7
 8005b3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <prvHeapInit+0xb4>)
 8005b40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b42:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <prvHeapInit+0xb4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <prvHeapInit+0xb4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	1ad2      	subs	r2, r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <prvHeapInit+0xb4>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <prvHeapInit+0xb8>)
 8005b6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <prvHeapInit+0xbc>)
 8005b76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b78:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <prvHeapInit+0xc0>)
 8005b7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b7e:	601a      	str	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	24000094 	.word	0x24000094
 8005b90:	24003c94 	.word	0x24003c94
 8005b94:	24003c9c 	.word	0x24003c9c
 8005b98:	24003ca4 	.word	0x24003ca4
 8005b9c:	24003ca0 	.word	0x24003ca0
 8005ba0:	24003cb0 	.word	0x24003cb0

08005ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bac:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <prvInsertBlockIntoFreeList+0xac>)
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e002      	b.n	8005bb8 <prvInsertBlockIntoFreeList+0x14>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d8f7      	bhi.n	8005bb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4413      	add	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d108      	bne.n	8005be6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	441a      	add	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	441a      	add	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d118      	bne.n	8005c2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <prvInsertBlockIntoFreeList+0xb0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d00d      	beq.n	8005c22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	441a      	add	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e008      	b.n	8005c34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c22:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <prvInsertBlockIntoFreeList+0xb0>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e003      	b.n	8005c34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d002      	beq.n	8005c42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	24003c94 	.word	0x24003c94
 8005c54:	24003c9c 	.word	0x24003c9c

08005c58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f103 0208 	add.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f103 0208 	add.w	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f103 0208 	add.w	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d103      	bne.n	8005d1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e00c      	b.n	8005d34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e002      	b.n	8005d28 <vListInsert+0x2e>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d2f6      	bcs.n	8005d22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6852      	ldr	r2, [r2, #4]
 8005d8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d103      	bne.n	8005da0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1e5a      	subs	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b04      	subs	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005df0:	4a0c      	ldr	r2, [pc, #48]	; (8005e24 <pxPortInitialiseStack+0x64>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b14      	subs	r3, #20
 8005dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f06f 0202 	mvn.w	r2, #2
 8005e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b20      	subs	r3, #32
 8005e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e16:	68fb      	ldr	r3, [r7, #12]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	08005e29 	.word	0x08005e29

08005e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <prvTaskExitError+0x54>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d00a      	beq.n	8005e52 <prvTaskExitError+0x2a>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <prvTaskExitError+0x28>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e66:	bf00      	nop
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0fc      	beq.n	8005e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	24000010 	.word	0x24000010

08005e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <pxCurrentTCBConst2>)
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	6808      	ldr	r0, [r1, #0]
 8005e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8a:	f380 8809 	msr	PSP, r0
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8811 	msr	BASEPRI, r0
 8005e9a:	4770      	bx	lr
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst2>:
 8005ea0:	24003cbc 	.word	0x24003cbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ea8:	4808      	ldr	r0, [pc, #32]	; (8005ecc <prvPortStartFirstTask+0x24>)
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f380 8808 	msr	MSP, r0
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8814 	msr	CONTROL, r0
 8005eba:	b662      	cpsie	i
 8005ebc:	b661      	cpsie	f
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	df00      	svc	0
 8005ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eca:	bf00      	nop
 8005ecc:	e000ed08 	.word	0xe000ed08

08005ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ed6:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a46      	ldr	r2, [pc, #280]	; (8005ff4 <xPortStartScheduler+0x124>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10a      	bne.n	8005ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	613b      	str	r3, [r7, #16]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ef6:	4b3e      	ldr	r3, [pc, #248]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3f      	ldr	r2, [pc, #252]	; (8005ff8 <xPortStartScheduler+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10a      	bne.n	8005f16 <xPortStartScheduler+0x46>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <xPortStartScheduler+0x12c>)
 8005f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b31      	ldr	r3, [pc, #196]	; (8006000 <xPortStartScheduler+0x130>)
 8005f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <xPortStartScheduler+0x134>)
 8005f40:	2207      	movs	r2, #7
 8005f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f44:	e009      	b.n	8005f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <xPortStartScheduler+0x134>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	4a2d      	ldr	r2, [pc, #180]	; (8006004 <xPortStartScheduler+0x134>)
 8005f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d0ef      	beq.n	8005f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <xPortStartScheduler+0x134>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1c3 0307 	rsb	r3, r3, #7
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d00a      	beq.n	8005f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60bb      	str	r3, [r7, #8]
}
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f88:	4b1e      	ldr	r3, [pc, #120]	; (8006004 <xPortStartScheduler+0x134>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <xPortStartScheduler+0x134>)
 8005f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <xPortStartScheduler+0x134>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <xPortStartScheduler+0x134>)
 8005f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <xPortStartScheduler+0x138>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <xPortStartScheduler+0x138>)
 8005fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a14      	ldr	r2, [pc, #80]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fbe:	f000 f8dd 	bl	800617c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <xPortStartScheduler+0x13c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fc8:	f000 f8fc 	bl	80061c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <xPortStartScheduler+0x140>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <xPortStartScheduler+0x140>)
 8005fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fd8:	f7ff ff66 	bl	8005ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fdc:	f000 fca6 	bl	800692c <vTaskSwitchContext>
	prvTaskExitError();
 8005fe0:	f7ff ff22 	bl	8005e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	e000ed00 	.word	0xe000ed00
 8005ff4:	410fc271 	.word	0x410fc271
 8005ff8:	410fc270 	.word	0x410fc270
 8005ffc:	e000e400 	.word	0xe000e400
 8006000:	24003cb4 	.word	0x24003cb4
 8006004:	24003cb8 	.word	0x24003cb8
 8006008:	e000ed20 	.word	0xe000ed20
 800600c:	24000010 	.word	0x24000010
 8006010:	e000ef34 	.word	0xe000ef34

08006014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
}
 800602c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <vPortEnterCritical+0x58>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <vPortEnterCritical+0x58>)
 8006036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <vPortEnterCritical+0x58>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10f      	bne.n	8006060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <vPortEnterCritical+0x5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <vPortEnterCritical+0x4c>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	603b      	str	r3, [r7, #0]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <vPortEnterCritical+0x4a>
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	24000010 	.word	0x24000010
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <vPortExitCritical+0x50>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <vPortExitCritical+0x24>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <vPortExitCritical+0x50>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3b01      	subs	r3, #1
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <vPortExitCritical+0x50>)
 80060a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <vPortExitCritical+0x50>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <vPortExitCritical+0x42>
 80060aa:	2300      	movs	r3, #0
 80060ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	24000010 	.word	0x24000010
	...

080060d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f01e 0f10 	tst.w	lr, #16
 80060e0:	bf08      	it	eq
 80060e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060f4:	f380 8811 	msr	BASEPRI, r0
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f000 fc14 	bl	800692c <vTaskSwitchContext>
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f380 8811 	msr	BASEPRI, r0
 800610c:	bc09      	pop	{r0, r3}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006116:	f01e 0f10 	tst.w	lr, #16
 800611a:	bf08      	it	eq
 800611c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006120:	f380 8809 	msr	PSP, r0
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst>:
 8006130:	24003cbc 	.word	0x24003cbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	607b      	str	r3, [r7, #4]
}
 8006150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006152:	f000 fb33 	bl	80067bc <xTaskIncrementTick>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <SysTick_Handler+0x40>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <vPortSetupTimerInterrupt+0x38>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <vPortSetupTimerInterrupt+0x3c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <vPortSetupTimerInterrupt+0x40>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <vPortSetupTimerInterrupt+0x44>)
 800619a:	3b01      	subs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010
 80061b4:	e000e018 	.word	0xe000e018
 80061b8:	24000000 	.word	0x24000000
 80061bc:	10624dd3 	.word	0x10624dd3
 80061c0:	e000e014 	.word	0xe000e014

080061c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061d4 <vPortEnableVFP+0x10>
 80061c8:	6801      	ldr	r1, [r0, #0]
 80061ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061d2:	bf00      	nop
 80061d4:	e000ed88 	.word	0xe000ed88

080061d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	; 0x38
 80061dc:	af04      	add	r7, sp, #16
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xTaskCreateStatic+0x2a>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	623b      	str	r3, [r7, #32]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xTaskCreateStatic+0x46>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	61fb      	str	r3, [r7, #28]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800621e:	23b4      	movs	r3, #180	; 0xb4
 8006220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2bb4      	cmp	r3, #180	; 0xb4
 8006226:	d00a      	beq.n	800623e <xTaskCreateStatic+0x66>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	61bb      	str	r3, [r7, #24]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800623e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d01e      	beq.n	8006284 <xTaskCreateStatic+0xac>
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01b      	beq.n	8006284 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006254:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2202      	movs	r2, #2
 800625a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800625e:	2300      	movs	r3, #0
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	9302      	str	r3, [sp, #8]
 8006266:	f107 0314 	add.w	r3, r7, #20
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f850 	bl	800631c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800627c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800627e:	f000 f8eb 	bl	8006458 <prvAddNewTaskToReadyList>
 8006282:	e001      	b.n	8006288 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006288:	697b      	ldr	r3, [r7, #20]
	}
 800628a:	4618      	mov	r0, r3
 800628c:	3728      	adds	r7, #40	; 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006292:	b580      	push	{r7, lr}
 8006294:	b08c      	sub	sp, #48	; 0x30
 8006296:	af04      	add	r7, sp, #16
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff faec 	bl	8005884 <pvPortMalloc>
 80062ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062b4:	20b4      	movs	r0, #180	; 0xb4
 80062b6:	f7ff fae5 	bl	8005884 <pvPortMalloc>
 80062ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30
 80062c8:	e005      	b.n	80062d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062ca:	6978      	ldr	r0, [r7, #20]
 80062cc:	f7ff fba6 	bl	8005a1c <vPortFree>
 80062d0:	e001      	b.n	80062d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9303      	str	r3, [sp, #12]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f80e 	bl	800631c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006300:	69f8      	ldr	r0, [r7, #28]
 8006302:	f000 f8a9 	bl	8006458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006306:	2301      	movs	r3, #1
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	e002      	b.n	8006312 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006312:	69bb      	ldr	r3, [r7, #24]
	}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006334:	440b      	add	r3, r1
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f023 0307 	bic.w	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <prvInitialiseNewTask+0x48>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	617b      	str	r3, [r7, #20]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01f      	beq.n	80063aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	e012      	b.n	8006396 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	7819      	ldrb	r1, [r3, #0]
 8006378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	4413      	add	r3, r2
 800637e:	3334      	adds	r3, #52	; 0x34
 8006380:	460a      	mov	r2, r1
 8006382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d006      	beq.n	800639e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3301      	adds	r3, #1
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b0f      	cmp	r3, #15
 800639a:	d9e9      	bls.n	8006370 <prvInitialiseNewTask+0x54>
 800639c:	e000      	b.n	80063a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800639e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063a8:	e003      	b.n	80063b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	d901      	bls.n	80063bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063b8:	2306      	movs	r3, #6
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2200      	movs	r2, #0
 80063cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	3304      	adds	r3, #4
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fc60 	bl	8005c98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	3318      	adds	r3, #24
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fc5b 	bl	8005c98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	f1c3 0207 	rsb	r2, r3, #7
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	2200      	movs	r2, #0
 8006404:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	334c      	adds	r3, #76	; 0x4c
 800640c:	2260      	movs	r2, #96	; 0x60
 800640e:	2100      	movs	r1, #0
 8006410:	4618      	mov	r0, r3
 8006412:	f001 faa8 	bl	8007966 <memset>
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	4a0c      	ldr	r2, [pc, #48]	; (800644c <prvInitialiseNewTask+0x130>)
 800641a:	651a      	str	r2, [r3, #80]	; 0x50
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	4a0c      	ldr	r2, [pc, #48]	; (8006450 <prvInitialiseNewTask+0x134>)
 8006420:	655a      	str	r2, [r3, #84]	; 0x54
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	4a0b      	ldr	r2, [pc, #44]	; (8006454 <prvInitialiseNewTask+0x138>)
 8006426:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	69b8      	ldr	r0, [r7, #24]
 800642e:	f7ff fcc7 	bl	8005dc0 <pxPortInitialiseStack>
 8006432:	4602      	mov	r2, r0
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006442:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006444:	bf00      	nop
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	08008468 	.word	0x08008468
 8006450:	08008488 	.word	0x08008488
 8006454:	08008448 	.word	0x08008448

08006458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006460:	f7ff fdd8 	bl	8006014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006464:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <prvAddNewTaskToReadyList+0xb8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	4a29      	ldr	r2, [pc, #164]	; (8006510 <prvAddNewTaskToReadyList+0xb8>)
 800646c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800646e:	4b29      	ldr	r3, [pc, #164]	; (8006514 <prvAddNewTaskToReadyList+0xbc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006476:	4a27      	ldr	r2, [pc, #156]	; (8006514 <prvAddNewTaskToReadyList+0xbc>)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800647c:	4b24      	ldr	r3, [pc, #144]	; (8006510 <prvAddNewTaskToReadyList+0xb8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d110      	bne.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006484:	f000 facc 	bl	8006a20 <prvInitialiseTaskLists>
 8006488:	e00d      	b.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800648a:	4b23      	ldr	r3, [pc, #140]	; (8006518 <prvAddNewTaskToReadyList+0xc0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006492:	4b20      	ldr	r3, [pc, #128]	; (8006514 <prvAddNewTaskToReadyList+0xbc>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	429a      	cmp	r2, r3
 800649e:	d802      	bhi.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064a0:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <prvAddNewTaskToReadyList+0xbc>)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064a6:	4b1d      	ldr	r3, [pc, #116]	; (800651c <prvAddNewTaskToReadyList+0xc4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3301      	adds	r3, #1
 80064ac:	4a1b      	ldr	r2, [pc, #108]	; (800651c <prvAddNewTaskToReadyList+0xc4>)
 80064ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	4b19      	ldr	r3, [pc, #100]	; (8006520 <prvAddNewTaskToReadyList+0xc8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	4a18      	ldr	r2, [pc, #96]	; (8006520 <prvAddNewTaskToReadyList+0xc8>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a15      	ldr	r2, [pc, #84]	; (8006524 <prvAddNewTaskToReadyList+0xcc>)
 80064d0:	441a      	add	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7ff fbea 	bl	8005cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064de:	f7ff fdc9 	bl	8006074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <prvAddNewTaskToReadyList+0xc0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvAddNewTaskToReadyList+0xbc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d207      	bcs.n	8006508 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064f8:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <prvAddNewTaskToReadyList+0xd0>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	24003dbc 	.word	0x24003dbc
 8006514:	24003cbc 	.word	0x24003cbc
 8006518:	24003dc8 	.word	0x24003dc8
 800651c:	24003dd8 	.word	0x24003dd8
 8006520:	24003dc4 	.word	0x24003dc4
 8006524:	24003cc0 	.word	0x24003cc0
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d017      	beq.n	800656e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <vTaskDelay+0x60>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <vTaskDelay+0x30>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	60bb      	str	r3, [r7, #8]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800655c:	f000 f884 	bl	8006668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006560:	2100      	movs	r1, #0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fb1e 	bl	8006ba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006568:	f000 f88c 	bl	8006684 <xTaskResumeAll>
 800656c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d107      	bne.n	8006584 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <vTaskDelay+0x64>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	24003de4 	.word	0x24003de4
 8006590:	e000ed04 	.word	0xe000ed04

08006594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065a2:	463a      	mov	r2, r7
 80065a4:	1d39      	adds	r1, r7, #4
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fb60 	bl	8006c70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	9202      	str	r2, [sp, #8]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2300      	movs	r3, #0
 80065c0:	460a      	mov	r2, r1
 80065c2:	4921      	ldr	r1, [pc, #132]	; (8006648 <vTaskStartScheduler+0xb4>)
 80065c4:	4821      	ldr	r0, [pc, #132]	; (800664c <vTaskStartScheduler+0xb8>)
 80065c6:	f7ff fe07 	bl	80061d8 <xTaskCreateStatic>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4a20      	ldr	r2, [pc, #128]	; (8006650 <vTaskStartScheduler+0xbc>)
 80065ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <vTaskStartScheduler+0xbc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065d8:	2301      	movs	r3, #1
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e001      	b.n	80065e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d11b      	bne.n	8006620 <vTaskStartScheduler+0x8c>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	613b      	str	r3, [r7, #16]
}
 80065fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065fc:	4b15      	ldr	r3, [pc, #84]	; (8006654 <vTaskStartScheduler+0xc0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	334c      	adds	r3, #76	; 0x4c
 8006602:	4a15      	ldr	r2, [pc, #84]	; (8006658 <vTaskStartScheduler+0xc4>)
 8006604:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006606:	4b15      	ldr	r3, [pc, #84]	; (800665c <vTaskStartScheduler+0xc8>)
 8006608:	f04f 32ff 	mov.w	r2, #4294967295
 800660c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <vTaskStartScheduler+0xcc>)
 8006610:	2201      	movs	r2, #1
 8006612:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006614:	4b13      	ldr	r3, [pc, #76]	; (8006664 <vTaskStartScheduler+0xd0>)
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800661a:	f7ff fc59 	bl	8005ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800661e:	e00e      	b.n	800663e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d10a      	bne.n	800663e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	60fb      	str	r3, [r7, #12]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <vTaskStartScheduler+0xa8>
}
 800663e:	bf00      	nop
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	0800839c 	.word	0x0800839c
 800664c:	080069f1 	.word	0x080069f1
 8006650:	24003de0 	.word	0x24003de0
 8006654:	24003cbc 	.word	0x24003cbc
 8006658:	24000014 	.word	0x24000014
 800665c:	24003ddc 	.word	0x24003ddc
 8006660:	24003dc8 	.word	0x24003dc8
 8006664:	24003dc0 	.word	0x24003dc0

08006668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <vTaskSuspendAll+0x18>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	4a03      	ldr	r2, [pc, #12]	; (8006680 <vTaskSuspendAll+0x18>)
 8006674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	24003de4 	.word	0x24003de4

08006684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006692:	4b41      	ldr	r3, [pc, #260]	; (8006798 <xTaskResumeAll+0x114>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	603b      	str	r3, [r7, #0]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066b0:	f7ff fcb0 	bl	8006014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066b4:	4b38      	ldr	r3, [pc, #224]	; (8006798 <xTaskResumeAll+0x114>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	4a37      	ldr	r2, [pc, #220]	; (8006798 <xTaskResumeAll+0x114>)
 80066bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066be:	4b36      	ldr	r3, [pc, #216]	; (8006798 <xTaskResumeAll+0x114>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d161      	bne.n	800678a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066c6:	4b35      	ldr	r3, [pc, #212]	; (800679c <xTaskResumeAll+0x118>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d05d      	beq.n	800678a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ce:	e02e      	b.n	800672e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d0:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <xTaskResumeAll+0x11c>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3318      	adds	r3, #24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fb45 	bl	8005d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fb40 	bl	8005d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	2201      	movs	r2, #1
 80066f2:	409a      	lsls	r2, r3
 80066f4:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <xTaskResumeAll+0x120>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <xTaskResumeAll+0x120>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4a27      	ldr	r2, [pc, #156]	; (80067a8 <xTaskResumeAll+0x124>)
 800670c:	441a      	add	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3304      	adds	r3, #4
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f7ff facc 	bl	8005cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	4b23      	ldr	r3, [pc, #140]	; (80067ac <xTaskResumeAll+0x128>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	429a      	cmp	r2, r3
 8006726:	d302      	bcc.n	800672e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006728:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <xTaskResumeAll+0x12c>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800672e:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <xTaskResumeAll+0x11c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1cc      	bne.n	80066d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800673c:	f000 fa12 	bl	8006b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006740:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <xTaskResumeAll+0x130>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d010      	beq.n	800676e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800674c:	f000 f836 	bl	80067bc <xTaskIncrementTick>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006756:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <xTaskResumeAll+0x12c>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3b01      	subs	r3, #1
 8006760:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f1      	bne.n	800674c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <xTaskResumeAll+0x130>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800676e:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <xTaskResumeAll+0x12c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <xTaskResumeAll+0x134>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800678a:	f7ff fc73 	bl	8006074 <vPortExitCritical>

	return xAlreadyYielded;
 800678e:	68bb      	ldr	r3, [r7, #8]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	24003de4 	.word	0x24003de4
 800679c:	24003dbc 	.word	0x24003dbc
 80067a0:	24003d7c 	.word	0x24003d7c
 80067a4:	24003dc4 	.word	0x24003dc4
 80067a8:	24003cc0 	.word	0x24003cc0
 80067ac:	24003cbc 	.word	0x24003cbc
 80067b0:	24003dd0 	.word	0x24003dd0
 80067b4:	24003dcc 	.word	0x24003dcc
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c6:	4b4e      	ldr	r3, [pc, #312]	; (8006900 <xTaskIncrementTick+0x144>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 808e 	bne.w	80068ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067d0:	4b4c      	ldr	r3, [pc, #304]	; (8006904 <xTaskIncrementTick+0x148>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067d8:	4a4a      	ldr	r2, [pc, #296]	; (8006904 <xTaskIncrementTick+0x148>)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d120      	bne.n	8006826 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067e4:	4b48      	ldr	r3, [pc, #288]	; (8006908 <xTaskIncrementTick+0x14c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <xTaskIncrementTick+0x48>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	603b      	str	r3, [r7, #0]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <xTaskIncrementTick+0x46>
 8006804:	4b40      	ldr	r3, [pc, #256]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	4b40      	ldr	r3, [pc, #256]	; (800690c <xTaskIncrementTick+0x150>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3e      	ldr	r2, [pc, #248]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	4a3e      	ldr	r2, [pc, #248]	; (800690c <xTaskIncrementTick+0x150>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	4b3d      	ldr	r3, [pc, #244]	; (8006910 <xTaskIncrementTick+0x154>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	4a3c      	ldr	r2, [pc, #240]	; (8006910 <xTaskIncrementTick+0x154>)
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	f000 f99f 	bl	8006b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <xTaskIncrementTick+0x158>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	429a      	cmp	r2, r3
 800682e:	d348      	bcc.n	80068c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006830:	4b35      	ldr	r3, [pc, #212]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <xTaskIncrementTick+0x158>)
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	601a      	str	r2, [r3, #0]
					break;
 8006842:	e03e      	b.n	80068c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006844:	4b30      	ldr	r3, [pc, #192]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d203      	bcs.n	8006864 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800685c:	4a2d      	ldr	r2, [pc, #180]	; (8006914 <xTaskIncrementTick+0x158>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006862:	e02e      	b.n	80068c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	3304      	adds	r3, #4
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fa7f 	bl	8005d6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3318      	adds	r3, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fa76 	bl	8005d6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	2201      	movs	r2, #1
 8006886:	409a      	lsls	r2, r3
 8006888:	4b23      	ldr	r3, [pc, #140]	; (8006918 <xTaskIncrementTick+0x15c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4313      	orrs	r3, r2
 800688e:	4a22      	ldr	r2, [pc, #136]	; (8006918 <xTaskIncrementTick+0x15c>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4a1f      	ldr	r2, [pc, #124]	; (800691c <xTaskIncrementTick+0x160>)
 80068a0:	441a      	add	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f7ff fa02 	bl	8005cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <xTaskIncrementTick+0x164>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d3b9      	bcc.n	8006830 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068c0:	e7b6      	b.n	8006830 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068c2:	4b17      	ldr	r3, [pc, #92]	; (8006920 <xTaskIncrementTick+0x164>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	4914      	ldr	r1, [pc, #80]	; (800691c <xTaskIncrementTick+0x160>)
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d901      	bls.n	80068de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068de:	4b11      	ldr	r3, [pc, #68]	; (8006924 <xTaskIncrementTick+0x168>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80068e6:	2301      	movs	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	e004      	b.n	80068f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <xTaskIncrementTick+0x16c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <xTaskIncrementTick+0x16c>)
 80068f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068f6:	697b      	ldr	r3, [r7, #20]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	24003de4 	.word	0x24003de4
 8006904:	24003dc0 	.word	0x24003dc0
 8006908:	24003d74 	.word	0x24003d74
 800690c:	24003d78 	.word	0x24003d78
 8006910:	24003dd4 	.word	0x24003dd4
 8006914:	24003ddc 	.word	0x24003ddc
 8006918:	24003dc4 	.word	0x24003dc4
 800691c:	24003cc0 	.word	0x24003cc0
 8006920:	24003cbc 	.word	0x24003cbc
 8006924:	24003dd0 	.word	0x24003dd0
 8006928:	24003dcc 	.word	0x24003dcc

0800692c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006932:	4b29      	ldr	r3, [pc, #164]	; (80069d8 <vTaskSwitchContext+0xac>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800693a:	4b28      	ldr	r3, [pc, #160]	; (80069dc <vTaskSwitchContext+0xb0>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006940:	e044      	b.n	80069cc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <vTaskSwitchContext+0xb0>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <vTaskSwitchContext+0xb4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	fab3 f383 	clz	r3, r3
 8006954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006956:	7afb      	ldrb	r3, [r7, #11]
 8006958:	f1c3 031f 	rsb	r3, r3, #31
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	4921      	ldr	r1, [pc, #132]	; (80069e4 <vTaskSwitchContext+0xb8>)
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <vTaskSwitchContext+0x5a>
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <vTaskSwitchContext+0xb8>)
 8006994:	4413      	add	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	3308      	adds	r3, #8
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d104      	bne.n	80069b8 <vTaskSwitchContext+0x8c>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	605a      	str	r2, [r3, #4]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <vTaskSwitchContext+0xbc>)
 80069c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069c2:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <vTaskSwitchContext+0xbc>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	334c      	adds	r3, #76	; 0x4c
 80069c8:	4a08      	ldr	r2, [pc, #32]	; (80069ec <vTaskSwitchContext+0xc0>)
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	24003de4 	.word	0x24003de4
 80069dc:	24003dd0 	.word	0x24003dd0
 80069e0:	24003dc4 	.word	0x24003dc4
 80069e4:	24003cc0 	.word	0x24003cc0
 80069e8:	24003cbc 	.word	0x24003cbc
 80069ec:	24000014 	.word	0x24000014

080069f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069f8:	f000 f852 	bl	8006aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <prvIdleTask+0x28>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d9f9      	bls.n	80069f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <prvIdleTask+0x2c>)
 8006a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a14:	e7f0      	b.n	80069f8 <prvIdleTask+0x8>
 8006a16:	bf00      	nop
 8006a18:	24003cc0 	.word	0x24003cc0
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a26:	2300      	movs	r3, #0
 8006a28:	607b      	str	r3, [r7, #4]
 8006a2a:	e00c      	b.n	8006a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <prvInitialiseTaskLists+0x60>)
 8006a38:	4413      	add	r3, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff f90c 	bl	8005c58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3301      	adds	r3, #1
 8006a44:	607b      	str	r3, [r7, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b06      	cmp	r3, #6
 8006a4a:	d9ef      	bls.n	8006a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a4c:	480d      	ldr	r0, [pc, #52]	; (8006a84 <prvInitialiseTaskLists+0x64>)
 8006a4e:	f7ff f903 	bl	8005c58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a52:	480d      	ldr	r0, [pc, #52]	; (8006a88 <prvInitialiseTaskLists+0x68>)
 8006a54:	f7ff f900 	bl	8005c58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a58:	480c      	ldr	r0, [pc, #48]	; (8006a8c <prvInitialiseTaskLists+0x6c>)
 8006a5a:	f7ff f8fd 	bl	8005c58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a5e:	480c      	ldr	r0, [pc, #48]	; (8006a90 <prvInitialiseTaskLists+0x70>)
 8006a60:	f7ff f8fa 	bl	8005c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a64:	480b      	ldr	r0, [pc, #44]	; (8006a94 <prvInitialiseTaskLists+0x74>)
 8006a66:	f7ff f8f7 	bl	8005c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <prvInitialiseTaskLists+0x78>)
 8006a6c:	4a05      	ldr	r2, [pc, #20]	; (8006a84 <prvInitialiseTaskLists+0x64>)
 8006a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a70:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <prvInitialiseTaskLists+0x7c>)
 8006a72:	4a05      	ldr	r2, [pc, #20]	; (8006a88 <prvInitialiseTaskLists+0x68>)
 8006a74:	601a      	str	r2, [r3, #0]
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	24003cc0 	.word	0x24003cc0
 8006a84:	24003d4c 	.word	0x24003d4c
 8006a88:	24003d60 	.word	0x24003d60
 8006a8c:	24003d7c 	.word	0x24003d7c
 8006a90:	24003d90 	.word	0x24003d90
 8006a94:	24003da8 	.word	0x24003da8
 8006a98:	24003d74 	.word	0x24003d74
 8006a9c:	24003d78 	.word	0x24003d78

08006aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aa6:	e019      	b.n	8006adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006aa8:	f7ff fab4 	bl	8006014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aac:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <prvCheckTasksWaitingTermination+0x50>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff f957 	bl	8005d6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <prvCheckTasksWaitingTermination+0x54>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <prvCheckTasksWaitingTermination+0x54>)
 8006ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <prvCheckTasksWaitingTermination+0x58>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	4a0a      	ldr	r2, [pc, #40]	; (8006af8 <prvCheckTasksWaitingTermination+0x58>)
 8006ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ad2:	f7ff facf 	bl	8006074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f810 	bl	8006afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <prvCheckTasksWaitingTermination+0x58>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e1      	bne.n	8006aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	24003d90 	.word	0x24003d90
 8006af4:	24003dbc 	.word	0x24003dbc
 8006af8:	24003da4 	.word	0x24003da4

08006afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	334c      	adds	r3, #76	; 0x4c
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 f813 	bl	8007b34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe ff7d 	bl	8005a1c <vPortFree>
				vPortFree( pxTCB );
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fe ff7a 	bl	8005a1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b28:	e018      	b.n	8006b5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d103      	bne.n	8006b3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7fe ff71 	bl	8005a1c <vPortFree>
	}
 8006b3a:	e00f      	b.n	8006b5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d00a      	beq.n	8006b5c <prvDeleteTCB+0x60>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60fb      	str	r3, [r7, #12]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <prvDeleteTCB+0x5e>
	}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <prvResetNextTaskUnblockTime+0x38>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b74:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b7c:	e008      	b.n	8006b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <prvResetNextTaskUnblockTime+0x38>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4a04      	ldr	r2, [pc, #16]	; (8006ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8006b8e:	6013      	str	r3, [r2, #0]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	24003d74 	.word	0x24003d74
 8006ba0:	24003ddc 	.word	0x24003ddc

08006ba4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bae:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb4:	4b28      	ldr	r3, [pc, #160]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff f8d6 	bl	8005d6c <uxListRemove>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	2201      	movs	r2, #1
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	43da      	mvns	r2, r3
 8006bd4:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d10a      	bne.n	8006bfc <prvAddCurrentTaskToDelayedList+0x58>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bec:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	481a      	ldr	r0, [pc, #104]	; (8006c60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006bf6:	f7ff f85c 	bl	8005cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bfa:	e026      	b.n	8006c4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4413      	add	r3, r2
 8006c02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c04:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d209      	bcs.n	8006c28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c14:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7ff f86a 	bl	8005cfa <vListInsert>
}
 8006c26:	e010      	b.n	8006c4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3304      	adds	r3, #4
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7ff f860 	bl	8005cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d202      	bcs.n	8006c4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c44:	4a09      	ldr	r2, [pc, #36]	; (8006c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6013      	str	r3, [r2, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	24003dc0 	.word	0x24003dc0
 8006c58:	24003cbc 	.word	0x24003cbc
 8006c5c:	24003dc4 	.word	0x24003dc4
 8006c60:	24003da8 	.word	0x24003da8
 8006c64:	24003d78 	.word	0x24003d78
 8006c68:	24003d74 	.word	0x24003d74
 8006c6c:	24003ddc 	.word	0x24003ddc

08006c70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a07      	ldr	r2, [pc, #28]	; (8006c9c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a06      	ldr	r2, [pc, #24]	; (8006ca0 <vApplicationGetIdleTaskMemory+0x30>)
 8006c86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2280      	movs	r2, #128	; 0x80
 8006c8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	24003de8 	.word	0x24003de8
 8006ca0:	24003e9c 	.word	0x24003e9c

08006ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ca4:	b5b0      	push	{r4, r5, r7, lr}
 8006ca6:	b08c      	sub	sp, #48	; 0x30
 8006ca8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8006caa:	4b68      	ldr	r3, [pc, #416]	; (8006e4c <main+0x1a8>)
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d11b      	bne.n	8006cee <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8006cb6:	f3bf 8f4f 	dsb	sy
}
 8006cba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006cbc:	f3bf 8f6f 	isb	sy
}
 8006cc0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006cc2:	4b62      	ldr	r3, [pc, #392]	; (8006e4c <main+0x1a8>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006cca:	f3bf 8f4f 	dsb	sy
}
 8006cce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006cd0:	f3bf 8f6f 	isb	sy
}
 8006cd4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006cd6:	4b5d      	ldr	r3, [pc, #372]	; (8006e4c <main+0x1a8>)
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	4a5c      	ldr	r2, [pc, #368]	; (8006e4c <main+0x1a8>)
 8006cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ce2:	f3bf 8f4f 	dsb	sy
}
 8006ce6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ce8:	f3bf 8f6f 	isb	sy
}
 8006cec:	e000      	b.n	8006cf0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8006cee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8006cf0:	4b56      	ldr	r3, [pc, #344]	; (8006e4c <main+0x1a8>)
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d138      	bne.n	8006d6e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006cfc:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <main+0x1a8>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006d04:	f3bf 8f4f 	dsb	sy
}
 8006d08:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8006d0a:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <main+0x1a8>)
 8006d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	0b5b      	lsrs	r3, r3, #13
 8006d16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	08db      	lsrs	r3, r3, #3
 8006d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d24:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006d2e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006d34:	4945      	ldr	r1, [pc, #276]	; (8006e4c <main+0x1a8>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	1e5a      	subs	r2, r3, #1
 8006d40:	623a      	str	r2, [r7, #32]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1ef      	bne.n	8006d26 <main+0x82>
    } while(sets-- != 0U);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8006d50:	f3bf 8f4f 	dsb	sy
}
 8006d54:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006d56:	4b3d      	ldr	r3, [pc, #244]	; (8006e4c <main+0x1a8>)
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	4a3c      	ldr	r2, [pc, #240]	; (8006e4c <main+0x1a8>)
 8006d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d62:	f3bf 8f4f 	dsb	sy
}
 8006d66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006d68:	f3bf 8f6f 	isb	sy
}
 8006d6c:	e000      	b.n	8006d70 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8006d6e:	bf00      	nop
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/

  timeout = 0xFFFF;
 8006d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8006d76:	bf00      	nop
 8006d78:	4b35      	ldr	r3, [pc, #212]	; (8006e50 <main+0x1ac>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <main+0xea>
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	1e5a      	subs	r2, r3, #1
 8006d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dcf4      	bgt.n	8006d78 <main+0xd4>
  if ( timeout < 0 )
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da01      	bge.n	8006d98 <main+0xf4>
  {
  Error_Handler();
 8006d94:	f000 fa14 	bl	80071c0 <Error_Handler>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d98:	f7f9 fcb8 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d9c:	f000 f862 	bl	8006e64 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8006da0:	4b2b      	ldr	r3, [pc, #172]	; (8006e50 <main+0x1ac>)
 8006da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <main+0x1ac>)
 8006da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006db0:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <main+0x1ac>)
 8006db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f7f9 fff4 	bl	8000dac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	f7fa f80a 	bl	8000de0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8006dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8006dd2:	bf00      	nop
 8006dd4:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <main+0x1ac>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <main+0x146>
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	1e5a      	subs	r2, r3, #1
 8006de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	dcf4      	bgt.n	8006dd4 <main+0x130>
if ( timeout < 0 )
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	da01      	bge.n	8006df4 <main+0x150>
{
Error_Handler();
 8006df0:	f000 f9e6 	bl	80071c0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006df4:	f000 f952 	bl	800709c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8006df8:	f000 f8b8 	bl	8006f6c <MX_USART3_UART_Init>
  MX_DMA_Init();
 8006dfc:	f000 f934 	bl	8007068 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8006e00:	f000 f900 	bl	8007004 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8006e04:	4813      	ldr	r0, [pc, #76]	; (8006e54 <main+0x1b0>)
 8006e06:	f000 f9e5 	bl	80071d4 <RetargetInit>
  printf("GSCS-002 Main Core Started - F.Gambino 2021\n");
 8006e0a:	4813      	ldr	r0, [pc, #76]	; (8006e58 <main+0x1b4>)
 8006e0c:	f000 fe7c 	bl	8007b08 <puts>

  /* CM7 takes HW semaphore 0 to inform CMm that he finished his job */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8006e10:	2000      	movs	r0, #0
 8006e12:	f7f9 ffcb 	bl	8000dac <HAL_HSEM_FastTake>
  /* Do not forget to release the HW semaphore 0 once needed */
  HAL_Delay(100);
 8006e16:	2064      	movs	r0, #100	; 0x64
 8006e18:	f7f9 fcd4 	bl	80007c4 <HAL_Delay>
  HAL_HSEM_Release(HSEM_ID_0, 0);
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	2000      	movs	r0, #0
 8006e20:	f7f9 ffde 	bl	8000de0 <HAL_HSEM_Release>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8006e24:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <main+0x1b8>)
 8006e26:	1d3c      	adds	r4, r7, #4
 8006e28:	461d      	mov	r5, r3
 8006e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006e36:	1d3b      	adds	r3, r7, #4
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fcc1 	bl	80057c2 <osThreadCreate>
 8006e40:	4603      	mov	r3, r0
 8006e42:	4a07      	ldr	r2, [pc, #28]	; (8006e60 <main+0x1bc>)
 8006e44:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8006e46:	f7fe fcb5 	bl	80057b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006e4a:	e7fe      	b.n	8006e4a <main+0x1a6>
 8006e4c:	e000ed00 	.word	0xe000ed00
 8006e50:	58024400 	.word	0x58024400
 8006e54:	240040b0 	.word	0x240040b0
 8006e58:	080083b0 	.word	0x080083b0
 8006e5c:	080083dc 	.word	0x080083dc
 8006e60:	240040ac 	.word	0x240040ac

08006e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b09c      	sub	sp, #112	; 0x70
 8006e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e6e:	224c      	movs	r2, #76	; 0x4c
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fd77 	bl	8007966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e78:	1d3b      	adds	r3, r7, #4
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fd71 	bl	8007966 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006e84:	2004      	movs	r0, #4
 8006e86:	f7fa f907 	bl	8001098 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	603b      	str	r3, [r7, #0]
 8006e8e:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <SystemClock_Config+0xfc>)
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	4a33      	ldr	r2, [pc, #204]	; (8006f60 <SystemClock_Config+0xfc>)
 8006e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e98:	6193      	str	r3, [r2, #24]
 8006e9a:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <SystemClock_Config+0xfc>)
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	; (8006f64 <SystemClock_Config+0x100>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4a2e      	ldr	r2, [pc, #184]	; (8006f64 <SystemClock_Config+0x100>)
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006eb0:	4b2c      	ldr	r3, [pc, #176]	; (8006f64 <SystemClock_Config+0x100>)
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006ebc:	bf00      	nop
 8006ebe:	4b28      	ldr	r3, [pc, #160]	; (8006f60 <SystemClock_Config+0xfc>)
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eca:	d1f8      	bne.n	8006ebe <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006ecc:	4b26      	ldr	r3, [pc, #152]	; (8006f68 <SystemClock_Config+0x104>)
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	f023 0303 	bic.w	r3, r3, #3
 8006ed4:	4a24      	ldr	r2, [pc, #144]	; (8006f68 <SystemClock_Config+0x104>)
 8006ed6:	f043 0302 	orr.w	r3, r3, #2
 8006eda:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006edc:	2301      	movs	r3, #1
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006ee0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006eea:	2302      	movs	r3, #2
 8006eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8006ef2:	2364      	movs	r3, #100	; 0x64
 8006ef4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8006efa:	230d      	movs	r3, #13
 8006efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006efe:	2302      	movs	r3, #2
 8006f00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006f02:	230c      	movs	r3, #12
 8006f04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fa f92a 	bl	800116c <HAL_RCC_OscConfig>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8006f1e:	f000 f94f 	bl	80071c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f22:	233f      	movs	r3, #63	; 0x3f
 8006f24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f26:	2303      	movs	r3, #3
 8006f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006f2e:	2308      	movs	r3, #8
 8006f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006f32:	2340      	movs	r3, #64	; 0x40
 8006f34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006f36:	2340      	movs	r3, #64	; 0x40
 8006f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006f40:	2340      	movs	r3, #64	; 0x40
 8006f42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006f44:	1d3b      	adds	r3, r7, #4
 8006f46:	2102      	movs	r1, #2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fa fd3b 	bl	80019c4 <HAL_RCC_ClockConfig>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8006f54:	f000 f934 	bl	80071c0 <Error_Handler>
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3770      	adds	r7, #112	; 0x70
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	58024800 	.word	0x58024800
 8006f64:	58000400 	.word	0x58000400
 8006f68:	58024400 	.word	0x58024400

08006f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006f70:	4b22      	ldr	r3, [pc, #136]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f72:	4a23      	ldr	r2, [pc, #140]	; (8007000 <MX_USART3_UART_Init+0x94>)
 8006f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006f76:	4b21      	ldr	r3, [pc, #132]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006f7e:	4b1f      	ldr	r3, [pc, #124]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006f84:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006f90:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f92:	220c      	movs	r2, #12
 8006f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f9c:	4b17      	ldr	r3, [pc, #92]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fa2:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006fb4:	4811      	ldr	r0, [pc, #68]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006fb6:	f7fc ff0f 	bl	8003dd8 <HAL_UART_Init>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006fc0:	f000 f8fe 	bl	80071c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	480d      	ldr	r0, [pc, #52]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006fc8:	f7fe f80e 	bl	8004fe8 <HAL_UARTEx_SetTxFifoThreshold>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006fd2:	f000 f8f5 	bl	80071c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4808      	ldr	r0, [pc, #32]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006fda:	f7fe f843 	bl	8005064 <HAL_UARTEx_SetRxFifoThreshold>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006fe4:	f000 f8ec 	bl	80071c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006fe8:	4804      	ldr	r0, [pc, #16]	; (8006ffc <MX_USART3_UART_Init+0x90>)
 8006fea:	f7fd ffc4 	bl	8004f76 <HAL_UARTEx_DisableFifoMode>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006ff4:	f000 f8e4 	bl	80071c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006ff8:	bf00      	nop
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	240040b0 	.word	0x240040b0
 8007000:	40004800 	.word	0x40004800

08007004 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007008:	4b15      	ldr	r3, [pc, #84]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800700a:	4a16      	ldr	r2, [pc, #88]	; (8007064 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800700c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800700e:	4b14      	ldr	r3, [pc, #80]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007010:	2209      	movs	r2, #9
 8007012:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007014:	4b12      	ldr	r3, [pc, #72]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007016:	2202      	movs	r2, #2
 8007018:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800701a:	4b11      	ldr	r3, [pc, #68]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800701c:	2200      	movs	r2, #0
 800701e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007022:	2202      	movs	r2, #2
 8007024:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007026:	4b0e      	ldr	r3, [pc, #56]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007028:	2200      	movs	r2, #0
 800702a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800702e:	2200      	movs	r2, #0
 8007030:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007034:	2200      	movs	r2, #0
 8007036:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8007038:	4b09      	ldr	r3, [pc, #36]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800703a:	2201      	movs	r2, #1
 800703c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800703e:	4b08      	ldr	r3, [pc, #32]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007040:	2201      	movs	r2, #1
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007046:	2200      	movs	r2, #0
 8007048:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800704a:	4805      	ldr	r0, [pc, #20]	; (8007060 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800704c:	f7f9 fedc 	bl	8000e08 <HAL_PCD_Init>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8007056:	f000 f8b3 	bl	80071c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	24004140 	.word	0x24004140
 8007064:	40080000 	.word	0x40080000

08007068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <MX_DMA_Init+0x30>)
 8007070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007074:	4a08      	ldr	r2, [pc, #32]	; (8007098 <MX_DMA_Init+0x30>)
 8007076:	f043 0302 	orr.w	r3, r3, #2
 800707a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800707e:	4b06      	ldr	r3, [pc, #24]	; (8007098 <MX_DMA_Init+0x30>)
 8007080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	687b      	ldr	r3, [r7, #4]

}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	58024400 	.word	0x58024400

0800709c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070a2:	f107 0314 	add.w	r3, r7, #20
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	605a      	str	r2, [r3, #4]
 80070ac:	609a      	str	r2, [r3, #8]
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80070b2:	4b31      	ldr	r3, [pc, #196]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070b8:	4a2f      	ldr	r2, [pc, #188]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070ba:	f043 0304 	orr.w	r3, r3, #4
 80070be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070c2:	4b2d      	ldr	r3, [pc, #180]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80070d0:	4b29      	ldr	r3, [pc, #164]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d6:	4a28      	ldr	r2, [pc, #160]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070ee:	4b22      	ldr	r3, [pc, #136]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070f4:	4a20      	ldr	r2, [pc, #128]	; (8007178 <MX_GPIO_Init+0xdc>)
 80070f6:	f043 0308 	orr.w	r3, r3, #8
 80070fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070fe:	4b1e      	ldr	r3, [pc, #120]	; (8007178 <MX_GPIO_Init+0xdc>)
 8007100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <MX_GPIO_Init+0xdc>)
 800710e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007112:	4a19      	ldr	r2, [pc, #100]	; (8007178 <MX_GPIO_Init+0xdc>)
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <MX_GPIO_Init+0xdc>)
 800711e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	607b      	str	r3, [r7, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <MX_GPIO_Init+0xdc>)
 800712c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007130:	4a11      	ldr	r2, [pc, #68]	; (8007178 <MX_GPIO_Init+0xdc>)
 8007132:	f043 0310 	orr.w	r3, r3, #16
 8007136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <MX_GPIO_Init+0xdc>)
 800713c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	603b      	str	r3, [r7, #0]
 8007146:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8007148:	2200      	movs	r2, #0
 800714a:	2102      	movs	r1, #2
 800714c:	480b      	ldr	r0, [pc, #44]	; (800717c <MX_GPIO_Init+0xe0>)
 800714e:	f7f9 fdf9 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8007152:	2302      	movs	r3, #2
 8007154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007156:	2301      	movs	r3, #1
 8007158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800715a:	2300      	movs	r3, #0
 800715c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715e:	2300      	movs	r3, #0
 8007160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007162:	f107 0314 	add.w	r3, r7, #20
 8007166:	4619      	mov	r1, r3
 8007168:	4804      	ldr	r0, [pc, #16]	; (800717c <MX_GPIO_Init+0xe0>)
 800716a:	f7f9 fc3b 	bl	80009e4 <HAL_GPIO_Init>

}
 800716e:	bf00      	nop
 8007170:	3728      	adds	r7, #40	; 0x28
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
 800717c:	58021000 	.word	0x58021000

08007180 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
/*Add Delay between HSEM Release and next Take*/

  for(;;)
  {
	  	//printf("Main core default task \n");
		HAL_GPIO_TogglePin(GPIOE,LD2_Pin);
 8007188:	2102      	movs	r1, #2
 800718a:	4803      	ldr	r0, [pc, #12]	; (8007198 <StartDefaultTask+0x18>)
 800718c:	f7f9 fdf3 	bl	8000d76 <HAL_GPIO_TogglePin>

	    osDelay(100);
 8007190:	2064      	movs	r0, #100	; 0x64
 8007192:	f7fe fb62 	bl	800585a <osDelay>
		HAL_GPIO_TogglePin(GPIOE,LD2_Pin);
 8007196:	e7f7      	b.n	8007188 <StartDefaultTask+0x8>
 8007198:	58021000 	.word	0x58021000

0800719c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a04      	ldr	r2, [pc, #16]	; (80071bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d101      	bne.n	80071b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80071ae:	f7f9 fae9 	bl	8000784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000

080071c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80071c4:	b672      	cpsid	i
}
 80071c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error Handler Asserted \n");
 80071c8:	4801      	ldr	r0, [pc, #4]	; (80071d0 <Error_Handler+0x10>)
 80071ca:	f000 fc9d 	bl	8007b08 <puts>
  while (1)
 80071ce:	e7fe      	b.n	80071ce <Error_Handler+0xe>
 80071d0:	080083f8 	.word	0x080083f8

080071d4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	gHuart = huart;
 80071dc:	4a07      	ldr	r2, [pc, #28]	; (80071fc <RetargetInit+0x28>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6013      	str	r3, [r2, #0]

	/* Disable I/O buffering for STDOUT stream, so that
	 * chars are sent out as soon as they are printed. */
	setvbuf(stdout, NULL, _IONBF, 0);
 80071e2:	4b07      	ldr	r3, [pc, #28]	; (8007200 <RetargetInit+0x2c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6898      	ldr	r0, [r3, #8]
 80071e8:	2300      	movs	r3, #0
 80071ea:	2202      	movs	r2, #2
 80071ec:	2100      	movs	r1, #0
 80071ee:	f000 fd0d 	bl	8007c0c <setvbuf>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2400455c 	.word	0x2400455c
 8007200:	24000014 	.word	0x24000014

08007204 <_isatty>:

int _isatty(int fd) {
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	db04      	blt.n	800721c <_isatty+0x18>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b02      	cmp	r3, #2
 8007216:	dc01      	bgt.n	800721c <_isatty+0x18>
		return 1;
 8007218:	2301      	movs	r3, #1
 800721a:	e005      	b.n	8007228 <_isatty+0x24>

	errno = EBADF;
 800721c:	f000 fa80 	bl	8007720 <__errno>
 8007220:	4603      	mov	r3, r0
 8007222:	2209      	movs	r2, #9
 8007224:	601a      	str	r2, [r3, #0]
	return 0;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <_write>:

int _write(int fd, char *ptr, int len) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d002      	beq.n	8007248 <_write+0x18>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d111      	bne.n	800726c <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8007248:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <_write+0x54>)
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	b29a      	uxth	r2, r3
 8007250:	f04f 33ff 	mov.w	r3, #4294967295
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	f7fc fe0f 	bl	8003e78 <HAL_UART_Transmit>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <_write+0x38>
			return len;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	e008      	b.n	800727a <_write+0x4a>
		else
			return EIO;
 8007268:	2305      	movs	r3, #5
 800726a:	e006      	b.n	800727a <_write+0x4a>
	}
	errno = EBADF;
 800726c:	f000 fa58 	bl	8007720 <__errno>
 8007270:	4603      	mov	r3, r0
 8007272:	2209      	movs	r2, #9
 8007274:	601a      	str	r2, [r3, #0]
	return -1;
 8007276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	2400455c 	.word	0x2400455c

08007288 <_close>:

int _close(int fd) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	db04      	blt.n	80072a0 <_close+0x18>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b02      	cmp	r3, #2
 800729a:	dc01      	bgt.n	80072a0 <_close+0x18>
		return 0;
 800729c:	2300      	movs	r3, #0
 800729e:	e006      	b.n	80072ae <_close+0x26>

	errno = EBADF;
 80072a0:	f000 fa3e 	bl	8007720 <__errno>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2209      	movs	r2, #9
 80072a8:	601a      	str	r2, [r3, #0]
	return -1;
 80072aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 80072c2:	f000 fa2d 	bl	8007720 <__errno>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2209      	movs	r2, #9
 80072ca:	601a      	str	r2, [r3, #0]
	return -1;
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <_read>:

int _read(int fd, char *ptr, int len) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d110      	bne.n	800730c <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 80072ea:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <_read+0x4c>)
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295
 80072f2:	2201      	movs	r2, #1
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	f7fc fe55 	bl	8003fa4 <HAL_UART_Receive>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <_read+0x30>
			return 1;
 8007304:	2301      	movs	r3, #1
 8007306:	e008      	b.n	800731a <_read+0x42>
		else
			return EIO;
 8007308:	2305      	movs	r3, #5
 800730a:	e006      	b.n	800731a <_read+0x42>
	}
	errno = EBADF;
 800730c:	f000 fa08 	bl	8007720 <__errno>
 8007310:	4603      	mov	r3, r0
 8007312:	2209      	movs	r2, #9
 8007314:	601a      	str	r2, [r3, #0]
	return -1;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	2400455c 	.word	0x2400455c

08007328 <_fstat>:

int _fstat(int fd, struct stat *st) {
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	db08      	blt.n	800734a <_fstat+0x22>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b02      	cmp	r3, #2
 800733c:	dc05      	bgt.n	800734a <_fstat+0x22>
		st->st_mode = S_IFCHR;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007344:	605a      	str	r2, [r3, #4]
		return 0;
 8007346:	2300      	movs	r3, #0
 8007348:	e005      	b.n	8007356 <_fstat+0x2e>
	}

	errno = EBADF;
 800734a:	f000 f9e9 	bl	8007720 <__errno>
 800734e:	4603      	mov	r3, r0
 8007350:	2209      	movs	r2, #9
 8007352:	601a      	str	r2, [r3, #0]
	return 0;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <HAL_MspInit+0x38>)
 8007368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800736c:	4a0a      	ldr	r2, [pc, #40]	; (8007398 <HAL_MspInit+0x38>)
 800736e:	f043 0302 	orr.w	r3, r3, #2
 8007372:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007376:	4b08      	ldr	r3, [pc, #32]	; (8007398 <HAL_MspInit+0x38>)
 8007378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	607b      	str	r3, [r7, #4]
 8007382:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007384:	2200      	movs	r2, #0
 8007386:	210f      	movs	r1, #15
 8007388:	f06f 0001 	mvn.w	r0, #1
 800738c:	f7f9 fb02 	bl	8000994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	58024400 	.word	0x58024400

0800739c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b0b8      	sub	sp, #224	; 0xe0
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	609a      	str	r2, [r3, #8]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80073b4:	f107 0310 	add.w	r3, r7, #16
 80073b8:	22bc      	movs	r2, #188	; 0xbc
 80073ba:	2100      	movs	r1, #0
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fad2 	bl	8007966 <memset>
  if(huart->Instance==USART3)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a25      	ldr	r2, [pc, #148]	; (800745c <HAL_UART_MspInit+0xc0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d142      	bne.n	8007452 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80073cc:	2302      	movs	r3, #2
 80073ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80073d6:	f107 0310 	add.w	r3, r7, #16
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fa fec0 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80073e6:	f7ff feeb 	bl	80071c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80073ea:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <HAL_UART_MspInit+0xc4>)
 80073ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073f0:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <HAL_UART_MspInit+0xc4>)
 80073f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80073fa:	4b19      	ldr	r3, [pc, #100]	; (8007460 <HAL_UART_MspInit+0xc4>)
 80073fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007408:	4b15      	ldr	r3, [pc, #84]	; (8007460 <HAL_UART_MspInit+0xc4>)
 800740a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800740e:	4a14      	ldr	r2, [pc, #80]	; (8007460 <HAL_UART_MspInit+0xc4>)
 8007410:	f043 0308 	orr.w	r3, r3, #8
 8007414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007418:	4b11      	ldr	r3, [pc, #68]	; (8007460 <HAL_UART_MspInit+0xc4>)
 800741a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	60bb      	str	r3, [r7, #8]
 8007424:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800742a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800742e:	2302      	movs	r3, #2
 8007430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	2300      	movs	r3, #0
 8007436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800743a:	2300      	movs	r3, #0
 800743c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007440:	2307      	movs	r3, #7
 8007442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007446:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800744a:	4619      	mov	r1, r3
 800744c:	4805      	ldr	r0, [pc, #20]	; (8007464 <HAL_UART_MspInit+0xc8>)
 800744e:	f7f9 fac9 	bl	80009e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007452:	bf00      	nop
 8007454:	37e0      	adds	r7, #224	; 0xe0
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	40004800 	.word	0x40004800
 8007460:	58024400 	.word	0x58024400
 8007464:	58020c00 	.word	0x58020c00

08007468 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b0b8      	sub	sp, #224	; 0xe0
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007480:	f107 0310 	add.w	r3, r7, #16
 8007484:	22bc      	movs	r2, #188	; 0xbc
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fa6c 	bl	8007966 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2f      	ldr	r2, [pc, #188]	; (8007550 <HAL_PCD_MspInit+0xe8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d156      	bne.n	8007546 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800749c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800749e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074a6:	f107 0310 	add.w	r3, r7, #16
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fa fe58 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80074b6:	f7ff fe83 	bl	80071c0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80074ba:	f7f9 fe47 	bl	800114c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074be:	4b25      	ldr	r3, [pc, #148]	; (8007554 <HAL_PCD_MspInit+0xec>)
 80074c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074c4:	4a23      	ldr	r2, [pc, #140]	; (8007554 <HAL_PCD_MspInit+0xec>)
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074ce:	4b21      	ldr	r3, [pc, #132]	; (8007554 <HAL_PCD_MspInit+0xec>)
 80074d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80074dc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80074e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e4:	2302      	movs	r3, #2
 80074e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80074f6:	230a      	movs	r3, #10
 80074f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007500:	4619      	mov	r1, r3
 8007502:	4815      	ldr	r0, [pc, #84]	; (8007558 <HAL_PCD_MspInit+0xf0>)
 8007504:	f7f9 fa6e 	bl	80009e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007516:	2300      	movs	r3, #0
 8007518:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800751c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007520:	4619      	mov	r1, r3
 8007522:	480d      	ldr	r0, [pc, #52]	; (8007558 <HAL_PCD_MspInit+0xf0>)
 8007524:	f7f9 fa5e 	bl	80009e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <HAL_PCD_MspInit+0xec>)
 800752a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800752e:	4a09      	ldr	r2, [pc, #36]	; (8007554 <HAL_PCD_MspInit+0xec>)
 8007530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007534:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <HAL_PCD_MspInit+0xec>)
 800753a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800753e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007542:	60bb      	str	r3, [r7, #8]
 8007544:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007546:	bf00      	nop
 8007548:	37e0      	adds	r7, #224	; 0xe0
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40080000 	.word	0x40080000
 8007554:	58024400 	.word	0x58024400
 8007558:	58020000 	.word	0x58020000

0800755c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08e      	sub	sp, #56	; 0x38
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b0f      	cmp	r3, #15
 8007568:	d844      	bhi.n	80075f4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800756a:	2200      	movs	r2, #0
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	2019      	movs	r0, #25
 8007570:	f7f9 fa10 	bl	8000994 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007574:	2019      	movs	r0, #25
 8007576:	f7f9 fa27 	bl	80009c8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800757a:	4a24      	ldr	r2, [pc, #144]	; (800760c <HAL_InitTick+0xb0>)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007580:	4b23      	ldr	r3, [pc, #140]	; (8007610 <HAL_InitTick+0xb4>)
 8007582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007586:	4a22      	ldr	r2, [pc, #136]	; (8007610 <HAL_InitTick+0xb4>)
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007590:	4b1f      	ldr	r3, [pc, #124]	; (8007610 <HAL_InitTick+0xb4>)
 8007592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	60bb      	str	r3, [r7, #8]
 800759c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800759e:	f107 020c 	add.w	r2, r7, #12
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fa fd97 	bl	80020dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80075ae:	f7fa fd7f 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 80075b2:	4603      	mov	r3, r0
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	4a16      	ldr	r2, [pc, #88]	; (8007614 <HAL_InitTick+0xb8>)
 80075bc:	fba2 2303 	umull	r2, r3, r2, r3
 80075c0:	0c9b      	lsrs	r3, r3, #18
 80075c2:	3b01      	subs	r3, #1
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <HAL_InitTick+0xbc>)
 80075c8:	4a14      	ldr	r2, [pc, #80]	; (800761c <HAL_InitTick+0xc0>)
 80075ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80075cc:	4b12      	ldr	r3, [pc, #72]	; (8007618 <HAL_InitTick+0xbc>)
 80075ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80075d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80075d4:	4a10      	ldr	r2, [pc, #64]	; (8007618 <HAL_InitTick+0xbc>)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <HAL_InitTick+0xbc>)
 80075dc:	2200      	movs	r2, #0
 80075de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <HAL_InitTick+0xbc>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80075e6:	480c      	ldr	r0, [pc, #48]	; (8007618 <HAL_InitTick+0xbc>)
 80075e8:	f7fc f91c 	bl	8003824 <HAL_TIM_Base_Init>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d107      	bne.n	8007602 <HAL_InitTick+0xa6>
 80075f2:	e001      	b.n	80075f8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e005      	b.n	8007604 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80075f8:	4807      	ldr	r0, [pc, #28]	; (8007618 <HAL_InitTick+0xbc>)
 80075fa:	f7fc f975 	bl	80038e8 <HAL_TIM_Base_Start_IT>
 80075fe:	4603      	mov	r3, r0
 8007600:	e000      	b.n	8007604 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
}
 8007604:	4618      	mov	r0, r3
 8007606:	3738      	adds	r7, #56	; 0x38
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	24000008 	.word	0x24000008
 8007610:	58024400 	.word	0x58024400
 8007614:	431bde83 	.word	0x431bde83
 8007618:	24004560 	.word	0x24004560
 800761c:	40010000 	.word	0x40010000

08007620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007624:	e7fe      	b.n	8007624 <NMI_Handler+0x4>

08007626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007626:	b480      	push	{r7}
 8007628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800762a:	e7fe      	b.n	800762a <HardFault_Handler+0x4>

0800762c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007630:	e7fe      	b.n	8007630 <MemManage_Handler+0x4>

08007632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007632:	b480      	push	{r7}
 8007634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007636:	e7fe      	b.n	8007636 <BusFault_Handler+0x4>

08007638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800763c:	e7fe      	b.n	800763c <UsageFault_Handler+0x4>

0800763e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800763e:	b480      	push	{r7}
 8007640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007642:	bf00      	nop
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007650:	4802      	ldr	r0, [pc, #8]	; (800765c <TIM1_UP_IRQHandler+0x10>)
 8007652:	f7fc f9c1 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007656:	bf00      	nop
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	24004560 	.word	0x24004560

08007660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007668:	4a14      	ldr	r2, [pc, #80]	; (80076bc <_sbrk+0x5c>)
 800766a:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <_sbrk+0x60>)
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007674:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <_sbrk+0x64>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800767c:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <_sbrk+0x64>)
 800767e:	4a12      	ldr	r2, [pc, #72]	; (80076c8 <_sbrk+0x68>)
 8007680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007682:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <_sbrk+0x64>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d207      	bcs.n	80076a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007690:	f000 f846 	bl	8007720 <__errno>
 8007694:	4603      	mov	r3, r0
 8007696:	220c      	movs	r2, #12
 8007698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800769a:	f04f 33ff 	mov.w	r3, #4294967295
 800769e:	e009      	b.n	80076b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <_sbrk+0x64>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076a6:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <_sbrk+0x64>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <_sbrk+0x64>)
 80076b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	24080000 	.word	0x24080000
 80076c0:	00000400 	.word	0x00000400
 80076c4:	2400409c 	.word	0x2400409c
 80076c8:	240045c0 	.word	0x240045c0

080076cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80076cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007704 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80076d0:	f7f8 ff82 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80076d4:	480c      	ldr	r0, [pc, #48]	; (8007708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80076d6:	490d      	ldr	r1, [pc, #52]	; (800770c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80076d8:	4a0d      	ldr	r2, [pc, #52]	; (8007710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80076da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076dc:	e002      	b.n	80076e4 <LoopCopyDataInit>

080076de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076e2:	3304      	adds	r3, #4

080076e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076e8:	d3f9      	bcc.n	80076de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076ea:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80076ec:	4c0a      	ldr	r4, [pc, #40]	; (8007718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80076ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076f0:	e001      	b.n	80076f6 <LoopFillZerobss>

080076f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076f4:	3204      	adds	r2, #4

080076f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076f8:	d3fb      	bcc.n	80076f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80076fa:	f000 f90d 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076fe:	f7ff fad1 	bl	8006ca4 <main>
  bx  lr
 8007702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007704:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007708:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800770c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8007710:	080084bc 	.word	0x080084bc
  ldr r2, =_sbss
 8007714:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8007718:	240045bc 	.word	0x240045bc

0800771c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800771c:	e7fe      	b.n	800771c <ADC3_IRQHandler>
	...

08007720 <__errno>:
 8007720:	4b01      	ldr	r3, [pc, #4]	; (8007728 <__errno+0x8>)
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	24000014 	.word	0x24000014

0800772c <std>:
 800772c:	2300      	movs	r3, #0
 800772e:	b510      	push	{r4, lr}
 8007730:	4604      	mov	r4, r0
 8007732:	e9c0 3300 	strd	r3, r3, [r0]
 8007736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800773a:	6083      	str	r3, [r0, #8]
 800773c:	8181      	strh	r1, [r0, #12]
 800773e:	6643      	str	r3, [r0, #100]	; 0x64
 8007740:	81c2      	strh	r2, [r0, #14]
 8007742:	6183      	str	r3, [r0, #24]
 8007744:	4619      	mov	r1, r3
 8007746:	2208      	movs	r2, #8
 8007748:	305c      	adds	r0, #92	; 0x5c
 800774a:	f000 f90c 	bl	8007966 <memset>
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <std+0x38>)
 8007750:	6263      	str	r3, [r4, #36]	; 0x24
 8007752:	4b05      	ldr	r3, [pc, #20]	; (8007768 <std+0x3c>)
 8007754:	62a3      	str	r3, [r4, #40]	; 0x28
 8007756:	4b05      	ldr	r3, [pc, #20]	; (800776c <std+0x40>)
 8007758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800775a:	4b05      	ldr	r3, [pc, #20]	; (8007770 <std+0x44>)
 800775c:	6224      	str	r4, [r4, #32]
 800775e:	6323      	str	r3, [r4, #48]	; 0x30
 8007760:	bd10      	pop	{r4, pc}
 8007762:	bf00      	nop
 8007764:	08007d99 	.word	0x08007d99
 8007768:	08007dbb 	.word	0x08007dbb
 800776c:	08007df3 	.word	0x08007df3
 8007770:	08007e17 	.word	0x08007e17

08007774 <_cleanup_r>:
 8007774:	4901      	ldr	r1, [pc, #4]	; (800777c <_cleanup_r+0x8>)
 8007776:	f000 b8af 	b.w	80078d8 <_fwalk_reent>
 800777a:	bf00      	nop
 800777c:	080080f1 	.word	0x080080f1

08007780 <__sfmoreglue>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	1e4a      	subs	r2, r1, #1
 8007784:	2568      	movs	r5, #104	; 0x68
 8007786:	4355      	muls	r5, r2
 8007788:	460e      	mov	r6, r1
 800778a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800778e:	f000 f8f3 	bl	8007978 <_malloc_r>
 8007792:	4604      	mov	r4, r0
 8007794:	b140      	cbz	r0, 80077a8 <__sfmoreglue+0x28>
 8007796:	2100      	movs	r1, #0
 8007798:	e9c0 1600 	strd	r1, r6, [r0]
 800779c:	300c      	adds	r0, #12
 800779e:	60a0      	str	r0, [r4, #8]
 80077a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077a4:	f000 f8df 	bl	8007966 <memset>
 80077a8:	4620      	mov	r0, r4
 80077aa:	bd70      	pop	{r4, r5, r6, pc}

080077ac <__sfp_lock_acquire>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__sfp_lock_acquire+0x8>)
 80077ae:	f000 b8d8 	b.w	8007962 <__retarget_lock_acquire_recursive>
 80077b2:	bf00      	nop
 80077b4:	240045b4 	.word	0x240045b4

080077b8 <__sfp_lock_release>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__sfp_lock_release+0x8>)
 80077ba:	f000 b8d3 	b.w	8007964 <__retarget_lock_release_recursive>
 80077be:	bf00      	nop
 80077c0:	240045b4 	.word	0x240045b4

080077c4 <__sinit_lock_acquire>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__sinit_lock_acquire+0x8>)
 80077c6:	f000 b8cc 	b.w	8007962 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	240045af 	.word	0x240045af

080077d0 <__sinit_lock_release>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sinit_lock_release+0x8>)
 80077d2:	f000 b8c7 	b.w	8007964 <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	240045af 	.word	0x240045af

080077dc <__sinit>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	f7ff fff0 	bl	80077c4 <__sinit_lock_acquire>
 80077e4:	69a3      	ldr	r3, [r4, #24]
 80077e6:	b11b      	cbz	r3, 80077f0 <__sinit+0x14>
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f7ff bff0 	b.w	80077d0 <__sinit_lock_release>
 80077f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077f4:	6523      	str	r3, [r4, #80]	; 0x50
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <__sinit+0x68>)
 80077f8:	4a13      	ldr	r2, [pc, #76]	; (8007848 <__sinit+0x6c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077fe:	42a3      	cmp	r3, r4
 8007800:	bf04      	itt	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	61a3      	streq	r3, [r4, #24]
 8007806:	4620      	mov	r0, r4
 8007808:	f000 f820 	bl	800784c <__sfp>
 800780c:	6060      	str	r0, [r4, #4]
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f81c 	bl	800784c <__sfp>
 8007814:	60a0      	str	r0, [r4, #8]
 8007816:	4620      	mov	r0, r4
 8007818:	f000 f818 	bl	800784c <__sfp>
 800781c:	2200      	movs	r2, #0
 800781e:	60e0      	str	r0, [r4, #12]
 8007820:	2104      	movs	r1, #4
 8007822:	6860      	ldr	r0, [r4, #4]
 8007824:	f7ff ff82 	bl	800772c <std>
 8007828:	68a0      	ldr	r0, [r4, #8]
 800782a:	2201      	movs	r2, #1
 800782c:	2109      	movs	r1, #9
 800782e:	f7ff ff7d 	bl	800772c <std>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	2202      	movs	r2, #2
 8007836:	2112      	movs	r1, #18
 8007838:	f7ff ff78 	bl	800772c <std>
 800783c:	2301      	movs	r3, #1
 800783e:	61a3      	str	r3, [r4, #24]
 8007840:	e7d2      	b.n	80077e8 <__sinit+0xc>
 8007842:	bf00      	nop
 8007844:	080084a8 	.word	0x080084a8
 8007848:	08007775 	.word	0x08007775

0800784c <__sfp>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	4607      	mov	r7, r0
 8007850:	f7ff ffac 	bl	80077ac <__sfp_lock_acquire>
 8007854:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <__sfp+0x84>)
 8007856:	681e      	ldr	r6, [r3, #0]
 8007858:	69b3      	ldr	r3, [r6, #24]
 800785a:	b913      	cbnz	r3, 8007862 <__sfp+0x16>
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ffbd 	bl	80077dc <__sinit>
 8007862:	3648      	adds	r6, #72	; 0x48
 8007864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007868:	3b01      	subs	r3, #1
 800786a:	d503      	bpl.n	8007874 <__sfp+0x28>
 800786c:	6833      	ldr	r3, [r6, #0]
 800786e:	b30b      	cbz	r3, 80078b4 <__sfp+0x68>
 8007870:	6836      	ldr	r6, [r6, #0]
 8007872:	e7f7      	b.n	8007864 <__sfp+0x18>
 8007874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007878:	b9d5      	cbnz	r5, 80078b0 <__sfp+0x64>
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <__sfp+0x88>)
 800787c:	60e3      	str	r3, [r4, #12]
 800787e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007882:	6665      	str	r5, [r4, #100]	; 0x64
 8007884:	f000 f86c 	bl	8007960 <__retarget_lock_init_recursive>
 8007888:	f7ff ff96 	bl	80077b8 <__sfp_lock_release>
 800788c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007894:	6025      	str	r5, [r4, #0]
 8007896:	61a5      	str	r5, [r4, #24]
 8007898:	2208      	movs	r2, #8
 800789a:	4629      	mov	r1, r5
 800789c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078a0:	f000 f861 	bl	8007966 <memset>
 80078a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078ac:	4620      	mov	r0, r4
 80078ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b0:	3468      	adds	r4, #104	; 0x68
 80078b2:	e7d9      	b.n	8007868 <__sfp+0x1c>
 80078b4:	2104      	movs	r1, #4
 80078b6:	4638      	mov	r0, r7
 80078b8:	f7ff ff62 	bl	8007780 <__sfmoreglue>
 80078bc:	4604      	mov	r4, r0
 80078be:	6030      	str	r0, [r6, #0]
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d1d5      	bne.n	8007870 <__sfp+0x24>
 80078c4:	f7ff ff78 	bl	80077b8 <__sfp_lock_release>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	e7ee      	b.n	80078ac <__sfp+0x60>
 80078ce:	bf00      	nop
 80078d0:	080084a8 	.word	0x080084a8
 80078d4:	ffff0001 	.word	0xffff0001

080078d8 <_fwalk_reent>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	4606      	mov	r6, r0
 80078de:	4688      	mov	r8, r1
 80078e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078e4:	2700      	movs	r7, #0
 80078e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ea:	f1b9 0901 	subs.w	r9, r9, #1
 80078ee:	d505      	bpl.n	80078fc <_fwalk_reent+0x24>
 80078f0:	6824      	ldr	r4, [r4, #0]
 80078f2:	2c00      	cmp	r4, #0
 80078f4:	d1f7      	bne.n	80078e6 <_fwalk_reent+0xe>
 80078f6:	4638      	mov	r0, r7
 80078f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fc:	89ab      	ldrh	r3, [r5, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d907      	bls.n	8007912 <_fwalk_reent+0x3a>
 8007902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007906:	3301      	adds	r3, #1
 8007908:	d003      	beq.n	8007912 <_fwalk_reent+0x3a>
 800790a:	4629      	mov	r1, r5
 800790c:	4630      	mov	r0, r6
 800790e:	47c0      	blx	r8
 8007910:	4307      	orrs	r7, r0
 8007912:	3568      	adds	r5, #104	; 0x68
 8007914:	e7e9      	b.n	80078ea <_fwalk_reent+0x12>
	...

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4d0d      	ldr	r5, [pc, #52]	; (8007950 <__libc_init_array+0x38>)
 800791c:	4c0d      	ldr	r4, [pc, #52]	; (8007954 <__libc_init_array+0x3c>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	2600      	movs	r6, #0
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4d0b      	ldr	r5, [pc, #44]	; (8007958 <__libc_init_array+0x40>)
 800792a:	4c0c      	ldr	r4, [pc, #48]	; (800795c <__libc_init_array+0x44>)
 800792c:	f000 fd2a 	bl	8008384 <_init>
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	2600      	movs	r6, #0
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	080084b4 	.word	0x080084b4
 8007954:	080084b4 	.word	0x080084b4
 8007958:	080084b4 	.word	0x080084b4
 800795c:	080084b8 	.word	0x080084b8

08007960 <__retarget_lock_init_recursive>:
 8007960:	4770      	bx	lr

08007962 <__retarget_lock_acquire_recursive>:
 8007962:	4770      	bx	lr

08007964 <__retarget_lock_release_recursive>:
 8007964:	4770      	bx	lr

08007966 <memset>:
 8007966:	4402      	add	r2, r0
 8007968:	4603      	mov	r3, r0
 800796a:	4293      	cmp	r3, r2
 800796c:	d100      	bne.n	8007970 <memset+0xa>
 800796e:	4770      	bx	lr
 8007970:	f803 1b01 	strb.w	r1, [r3], #1
 8007974:	e7f9      	b.n	800796a <memset+0x4>
	...

08007978 <_malloc_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	1ccd      	adds	r5, r1, #3
 800797c:	f025 0503 	bic.w	r5, r5, #3
 8007980:	3508      	adds	r5, #8
 8007982:	2d0c      	cmp	r5, #12
 8007984:	bf38      	it	cc
 8007986:	250c      	movcc	r5, #12
 8007988:	2d00      	cmp	r5, #0
 800798a:	4606      	mov	r6, r0
 800798c:	db01      	blt.n	8007992 <_malloc_r+0x1a>
 800798e:	42a9      	cmp	r1, r5
 8007990:	d903      	bls.n	800799a <_malloc_r+0x22>
 8007992:	230c      	movs	r3, #12
 8007994:	6033      	str	r3, [r6, #0]
 8007996:	2000      	movs	r0, #0
 8007998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800799a:	f000 fc63 	bl	8008264 <__malloc_lock>
 800799e:	4921      	ldr	r1, [pc, #132]	; (8007a24 <_malloc_r+0xac>)
 80079a0:	680a      	ldr	r2, [r1, #0]
 80079a2:	4614      	mov	r4, r2
 80079a4:	b99c      	cbnz	r4, 80079ce <_malloc_r+0x56>
 80079a6:	4f20      	ldr	r7, [pc, #128]	; (8007a28 <_malloc_r+0xb0>)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	b923      	cbnz	r3, 80079b6 <_malloc_r+0x3e>
 80079ac:	4621      	mov	r1, r4
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 f91c 	bl	8007bec <_sbrk_r>
 80079b4:	6038      	str	r0, [r7, #0]
 80079b6:	4629      	mov	r1, r5
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 f917 	bl	8007bec <_sbrk_r>
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	d123      	bne.n	8007a0a <_malloc_r+0x92>
 80079c2:	230c      	movs	r3, #12
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 fc52 	bl	8008270 <__malloc_unlock>
 80079cc:	e7e3      	b.n	8007996 <_malloc_r+0x1e>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	1b5b      	subs	r3, r3, r5
 80079d2:	d417      	bmi.n	8007a04 <_malloc_r+0x8c>
 80079d4:	2b0b      	cmp	r3, #11
 80079d6:	d903      	bls.n	80079e0 <_malloc_r+0x68>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	441c      	add	r4, r3
 80079dc:	6025      	str	r5, [r4, #0]
 80079de:	e004      	b.n	80079ea <_malloc_r+0x72>
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	42a2      	cmp	r2, r4
 80079e4:	bf0c      	ite	eq
 80079e6:	600b      	streq	r3, [r1, #0]
 80079e8:	6053      	strne	r3, [r2, #4]
 80079ea:	4630      	mov	r0, r6
 80079ec:	f000 fc40 	bl	8008270 <__malloc_unlock>
 80079f0:	f104 000b 	add.w	r0, r4, #11
 80079f4:	1d23      	adds	r3, r4, #4
 80079f6:	f020 0007 	bic.w	r0, r0, #7
 80079fa:	1ac2      	subs	r2, r0, r3
 80079fc:	d0cc      	beq.n	8007998 <_malloc_r+0x20>
 80079fe:	1a1b      	subs	r3, r3, r0
 8007a00:	50a3      	str	r3, [r4, r2]
 8007a02:	e7c9      	b.n	8007998 <_malloc_r+0x20>
 8007a04:	4622      	mov	r2, r4
 8007a06:	6864      	ldr	r4, [r4, #4]
 8007a08:	e7cc      	b.n	80079a4 <_malloc_r+0x2c>
 8007a0a:	1cc4      	adds	r4, r0, #3
 8007a0c:	f024 0403 	bic.w	r4, r4, #3
 8007a10:	42a0      	cmp	r0, r4
 8007a12:	d0e3      	beq.n	80079dc <_malloc_r+0x64>
 8007a14:	1a21      	subs	r1, r4, r0
 8007a16:	4630      	mov	r0, r6
 8007a18:	f000 f8e8 	bl	8007bec <_sbrk_r>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d1dd      	bne.n	80079dc <_malloc_r+0x64>
 8007a20:	e7cf      	b.n	80079c2 <_malloc_r+0x4a>
 8007a22:	bf00      	nop
 8007a24:	240040a0 	.word	0x240040a0
 8007a28:	240040a4 	.word	0x240040a4

08007a2c <_puts_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	460e      	mov	r6, r1
 8007a30:	4605      	mov	r5, r0
 8007a32:	b118      	cbz	r0, 8007a3c <_puts_r+0x10>
 8007a34:	6983      	ldr	r3, [r0, #24]
 8007a36:	b90b      	cbnz	r3, 8007a3c <_puts_r+0x10>
 8007a38:	f7ff fed0 	bl	80077dc <__sinit>
 8007a3c:	69ab      	ldr	r3, [r5, #24]
 8007a3e:	68ac      	ldr	r4, [r5, #8]
 8007a40:	b913      	cbnz	r3, 8007a48 <_puts_r+0x1c>
 8007a42:	4628      	mov	r0, r5
 8007a44:	f7ff feca 	bl	80077dc <__sinit>
 8007a48:	4b2c      	ldr	r3, [pc, #176]	; (8007afc <_puts_r+0xd0>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d120      	bne.n	8007a90 <_puts_r+0x64>
 8007a4e:	686c      	ldr	r4, [r5, #4]
 8007a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a52:	07db      	lsls	r3, r3, #31
 8007a54:	d405      	bmi.n	8007a62 <_puts_r+0x36>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	0598      	lsls	r0, r3, #22
 8007a5a:	d402      	bmi.n	8007a62 <_puts_r+0x36>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a5e:	f7ff ff80 	bl	8007962 <__retarget_lock_acquire_recursive>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	0719      	lsls	r1, r3, #28
 8007a66:	d51d      	bpl.n	8007aa4 <_puts_r+0x78>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	b1db      	cbz	r3, 8007aa4 <_puts_r+0x78>
 8007a6c:	3e01      	subs	r6, #1
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a74:	3b01      	subs	r3, #1
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	bb39      	cbnz	r1, 8007aca <_puts_r+0x9e>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da38      	bge.n	8007af0 <_puts_r+0xc4>
 8007a7e:	4622      	mov	r2, r4
 8007a80:	210a      	movs	r1, #10
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f9cc 	bl	8007e20 <__swbuf_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d011      	beq.n	8007ab0 <_puts_r+0x84>
 8007a8c:	250a      	movs	r5, #10
 8007a8e:	e011      	b.n	8007ab4 <_puts_r+0x88>
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <_puts_r+0xd4>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d101      	bne.n	8007a9a <_puts_r+0x6e>
 8007a96:	68ac      	ldr	r4, [r5, #8]
 8007a98:	e7da      	b.n	8007a50 <_puts_r+0x24>
 8007a9a:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <_puts_r+0xd8>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	bf08      	it	eq
 8007aa0:	68ec      	ldreq	r4, [r5, #12]
 8007aa2:	e7d5      	b.n	8007a50 <_puts_r+0x24>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 fa1e 	bl	8007ee8 <__swsetup_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0dd      	beq.n	8007a6c <_puts_r+0x40>
 8007ab0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ab6:	07da      	lsls	r2, r3, #31
 8007ab8:	d405      	bmi.n	8007ac6 <_puts_r+0x9a>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	059b      	lsls	r3, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_puts_r+0x9a>
 8007ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ac2:	f7ff ff4f 	bl	8007964 <__retarget_lock_release_recursive>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da04      	bge.n	8007ad8 <_puts_r+0xac>
 8007ace:	69a2      	ldr	r2, [r4, #24]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	dc06      	bgt.n	8007ae2 <_puts_r+0xb6>
 8007ad4:	290a      	cmp	r1, #10
 8007ad6:	d004      	beq.n	8007ae2 <_puts_r+0xb6>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	6022      	str	r2, [r4, #0]
 8007ade:	7019      	strb	r1, [r3, #0]
 8007ae0:	e7c5      	b.n	8007a6e <_puts_r+0x42>
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 f99b 	bl	8007e20 <__swbuf_r>
 8007aea:	3001      	adds	r0, #1
 8007aec:	d1bf      	bne.n	8007a6e <_puts_r+0x42>
 8007aee:	e7df      	b.n	8007ab0 <_puts_r+0x84>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	250a      	movs	r5, #10
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	701d      	strb	r5, [r3, #0]
 8007afa:	e7db      	b.n	8007ab4 <_puts_r+0x88>
 8007afc:	08008468 	.word	0x08008468
 8007b00:	08008488 	.word	0x08008488
 8007b04:	08008448 	.word	0x08008448

08007b08 <puts>:
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <puts+0xc>)
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	f7ff bf8d 	b.w	8007a2c <_puts_r>
 8007b12:	bf00      	nop
 8007b14:	24000014 	.word	0x24000014

08007b18 <cleanup_glue>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	6809      	ldr	r1, [r1, #0]
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b109      	cbz	r1, 8007b26 <cleanup_glue+0xe>
 8007b22:	f7ff fff9 	bl	8007b18 <cleanup_glue>
 8007b26:	4621      	mov	r1, r4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2e:	f000 bba5 	b.w	800827c <_free_r>
	...

08007b34 <_reclaim_reent>:
 8007b34:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <_reclaim_reent+0xb4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4283      	cmp	r3, r0
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	d051      	beq.n	8007be4 <_reclaim_reent+0xb0>
 8007b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b42:	b143      	cbz	r3, 8007b56 <_reclaim_reent+0x22>
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d14a      	bne.n	8007be0 <_reclaim_reent+0xac>
 8007b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b4c:	6819      	ldr	r1, [r3, #0]
 8007b4e:	b111      	cbz	r1, 8007b56 <_reclaim_reent+0x22>
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 fb93 	bl	800827c <_free_r>
 8007b56:	6961      	ldr	r1, [r4, #20]
 8007b58:	b111      	cbz	r1, 8007b60 <_reclaim_reent+0x2c>
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fb8e 	bl	800827c <_free_r>
 8007b60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b62:	b111      	cbz	r1, 8007b6a <_reclaim_reent+0x36>
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fb89 	bl	800827c <_free_r>
 8007b6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b6c:	b111      	cbz	r1, 8007b74 <_reclaim_reent+0x40>
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 fb84 	bl	800827c <_free_r>
 8007b74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b76:	b111      	cbz	r1, 8007b7e <_reclaim_reent+0x4a>
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 fb7f 	bl	800827c <_free_r>
 8007b7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b80:	b111      	cbz	r1, 8007b88 <_reclaim_reent+0x54>
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 fb7a 	bl	800827c <_free_r>
 8007b88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007b8a:	b111      	cbz	r1, 8007b92 <_reclaim_reent+0x5e>
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fb75 	bl	800827c <_free_r>
 8007b92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007b94:	b111      	cbz	r1, 8007b9c <_reclaim_reent+0x68>
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 fb70 	bl	800827c <_free_r>
 8007b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9e:	b111      	cbz	r1, 8007ba6 <_reclaim_reent+0x72>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fb6b 	bl	800827c <_free_r>
 8007ba6:	69a3      	ldr	r3, [r4, #24]
 8007ba8:	b1e3      	cbz	r3, 8007be4 <_reclaim_reent+0xb0>
 8007baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007bac:	4620      	mov	r0, r4
 8007bae:	4798      	blx	r3
 8007bb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bb2:	b1b9      	cbz	r1, 8007be4 <_reclaim_reent+0xb0>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007bba:	f7ff bfad 	b.w	8007b18 <cleanup_glue>
 8007bbe:	5949      	ldr	r1, [r1, r5]
 8007bc0:	b941      	cbnz	r1, 8007bd4 <_reclaim_reent+0xa0>
 8007bc2:	3504      	adds	r5, #4
 8007bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bc6:	2d80      	cmp	r5, #128	; 0x80
 8007bc8:	68d9      	ldr	r1, [r3, #12]
 8007bca:	d1f8      	bne.n	8007bbe <_reclaim_reent+0x8a>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fb55 	bl	800827c <_free_r>
 8007bd2:	e7ba      	b.n	8007b4a <_reclaim_reent+0x16>
 8007bd4:	680e      	ldr	r6, [r1, #0]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 fb50 	bl	800827c <_free_r>
 8007bdc:	4631      	mov	r1, r6
 8007bde:	e7ef      	b.n	8007bc0 <_reclaim_reent+0x8c>
 8007be0:	2500      	movs	r5, #0
 8007be2:	e7ef      	b.n	8007bc4 <_reclaim_reent+0x90>
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
 8007be6:	bf00      	nop
 8007be8:	24000014 	.word	0x24000014

08007bec <_sbrk_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d06      	ldr	r5, [pc, #24]	; (8007c08 <_sbrk_r+0x1c>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	f7ff fd32 	bl	8007660 <_sbrk>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_sbrk_r+0x1a>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_sbrk_r+0x1a>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	240045b8 	.word	0x240045b8

08007c0c <setvbuf>:
 8007c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c10:	461d      	mov	r5, r3
 8007c12:	4b5d      	ldr	r3, [pc, #372]	; (8007d88 <setvbuf+0x17c>)
 8007c14:	681f      	ldr	r7, [r3, #0]
 8007c16:	4604      	mov	r4, r0
 8007c18:	460e      	mov	r6, r1
 8007c1a:	4690      	mov	r8, r2
 8007c1c:	b127      	cbz	r7, 8007c28 <setvbuf+0x1c>
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	b913      	cbnz	r3, 8007c28 <setvbuf+0x1c>
 8007c22:	4638      	mov	r0, r7
 8007c24:	f7ff fdda 	bl	80077dc <__sinit>
 8007c28:	4b58      	ldr	r3, [pc, #352]	; (8007d8c <setvbuf+0x180>)
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	d167      	bne.n	8007cfe <setvbuf+0xf2>
 8007c2e:	687c      	ldr	r4, [r7, #4]
 8007c30:	f1b8 0f02 	cmp.w	r8, #2
 8007c34:	d006      	beq.n	8007c44 <setvbuf+0x38>
 8007c36:	f1b8 0f01 	cmp.w	r8, #1
 8007c3a:	f200 809f 	bhi.w	8007d7c <setvbuf+0x170>
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	f2c0 809c 	blt.w	8007d7c <setvbuf+0x170>
 8007c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c46:	07db      	lsls	r3, r3, #31
 8007c48:	d405      	bmi.n	8007c56 <setvbuf+0x4a>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	0598      	lsls	r0, r3, #22
 8007c4e:	d402      	bmi.n	8007c56 <setvbuf+0x4a>
 8007c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c52:	f7ff fe86 	bl	8007962 <__retarget_lock_acquire_recursive>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f000 fa49 	bl	80080f0 <_fflush_r>
 8007c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c60:	b141      	cbz	r1, 8007c74 <setvbuf+0x68>
 8007c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c66:	4299      	cmp	r1, r3
 8007c68:	d002      	beq.n	8007c70 <setvbuf+0x64>
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f000 fb06 	bl	800827c <_free_r>
 8007c70:	2300      	movs	r3, #0
 8007c72:	6363      	str	r3, [r4, #52]	; 0x34
 8007c74:	2300      	movs	r3, #0
 8007c76:	61a3      	str	r3, [r4, #24]
 8007c78:	6063      	str	r3, [r4, #4]
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	0619      	lsls	r1, r3, #24
 8007c7e:	d503      	bpl.n	8007c88 <setvbuf+0x7c>
 8007c80:	6921      	ldr	r1, [r4, #16]
 8007c82:	4638      	mov	r0, r7
 8007c84:	f000 fafa 	bl	800827c <_free_r>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	f1b8 0f02 	cmp.w	r8, #2
 8007c96:	81a3      	strh	r3, [r4, #12]
 8007c98:	d06c      	beq.n	8007d74 <setvbuf+0x168>
 8007c9a:	ab01      	add	r3, sp, #4
 8007c9c:	466a      	mov	r2, sp
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f000 fa73 	bl	800818c <__swhatbuf_r>
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	4318      	orrs	r0, r3
 8007caa:	81a0      	strh	r0, [r4, #12]
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	d130      	bne.n	8007d12 <setvbuf+0x106>
 8007cb0:	9d00      	ldr	r5, [sp, #0]
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 face 	bl	8008254 <malloc>
 8007cb8:	4606      	mov	r6, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d155      	bne.n	8007d6a <setvbuf+0x15e>
 8007cbe:	f8dd 9000 	ldr.w	r9, [sp]
 8007cc2:	45a9      	cmp	r9, r5
 8007cc4:	d14a      	bne.n	8007d5c <setvbuf+0x150>
 8007cc6:	f04f 35ff 	mov.w	r5, #4294967295
 8007cca:	2200      	movs	r2, #0
 8007ccc:	60a2      	str	r2, [r4, #8]
 8007cce:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007cd2:	6022      	str	r2, [r4, #0]
 8007cd4:	6122      	str	r2, [r4, #16]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cdc:	6162      	str	r2, [r4, #20]
 8007cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ce0:	f043 0302 	orr.w	r3, r3, #2
 8007ce4:	07d2      	lsls	r2, r2, #31
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	d405      	bmi.n	8007cf6 <setvbuf+0xea>
 8007cea:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007cee:	d102      	bne.n	8007cf6 <setvbuf+0xea>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f7ff fe37 	bl	8007964 <__retarget_lock_release_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	b003      	add	sp, #12
 8007cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cfe:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <setvbuf+0x184>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d101      	bne.n	8007d08 <setvbuf+0xfc>
 8007d04:	68bc      	ldr	r4, [r7, #8]
 8007d06:	e793      	b.n	8007c30 <setvbuf+0x24>
 8007d08:	4b22      	ldr	r3, [pc, #136]	; (8007d94 <setvbuf+0x188>)
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	bf08      	it	eq
 8007d0e:	68fc      	ldreq	r4, [r7, #12]
 8007d10:	e78e      	b.n	8007c30 <setvbuf+0x24>
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	d0cd      	beq.n	8007cb2 <setvbuf+0xa6>
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	b913      	cbnz	r3, 8007d20 <setvbuf+0x114>
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	f7ff fd5e 	bl	80077dc <__sinit>
 8007d20:	f1b8 0f01 	cmp.w	r8, #1
 8007d24:	bf08      	it	eq
 8007d26:	89a3      	ldrheq	r3, [r4, #12]
 8007d28:	6026      	str	r6, [r4, #0]
 8007d2a:	bf04      	itt	eq
 8007d2c:	f043 0301 	orreq.w	r3, r3, #1
 8007d30:	81a3      	strheq	r3, [r4, #12]
 8007d32:	89a2      	ldrh	r2, [r4, #12]
 8007d34:	f012 0308 	ands.w	r3, r2, #8
 8007d38:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007d3c:	d01c      	beq.n	8007d78 <setvbuf+0x16c>
 8007d3e:	07d3      	lsls	r3, r2, #31
 8007d40:	bf41      	itttt	mi
 8007d42:	2300      	movmi	r3, #0
 8007d44:	426d      	negmi	r5, r5
 8007d46:	60a3      	strmi	r3, [r4, #8]
 8007d48:	61a5      	strmi	r5, [r4, #24]
 8007d4a:	bf58      	it	pl
 8007d4c:	60a5      	strpl	r5, [r4, #8]
 8007d4e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007d50:	f015 0501 	ands.w	r5, r5, #1
 8007d54:	d115      	bne.n	8007d82 <setvbuf+0x176>
 8007d56:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007d5a:	e7c8      	b.n	8007cee <setvbuf+0xe2>
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	f000 fa79 	bl	8008254 <malloc>
 8007d62:	4606      	mov	r6, r0
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d0ae      	beq.n	8007cc6 <setvbuf+0xba>
 8007d68:	464d      	mov	r5, r9
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d70:	81a3      	strh	r3, [r4, #12]
 8007d72:	e7d0      	b.n	8007d16 <setvbuf+0x10a>
 8007d74:	2500      	movs	r5, #0
 8007d76:	e7a8      	b.n	8007cca <setvbuf+0xbe>
 8007d78:	60a3      	str	r3, [r4, #8]
 8007d7a:	e7e8      	b.n	8007d4e <setvbuf+0x142>
 8007d7c:	f04f 35ff 	mov.w	r5, #4294967295
 8007d80:	e7b9      	b.n	8007cf6 <setvbuf+0xea>
 8007d82:	2500      	movs	r5, #0
 8007d84:	e7b7      	b.n	8007cf6 <setvbuf+0xea>
 8007d86:	bf00      	nop
 8007d88:	24000014 	.word	0x24000014
 8007d8c:	08008468 	.word	0x08008468
 8007d90:	08008488 	.word	0x08008488
 8007d94:	08008448 	.word	0x08008448

08007d98 <__sread>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	f000 fabc 	bl	800831c <_read_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	bfab      	itete	ge
 8007da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007daa:	89a3      	ldrhlt	r3, [r4, #12]
 8007dac:	181b      	addge	r3, r3, r0
 8007dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007db2:	bfac      	ite	ge
 8007db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007db6:	81a3      	strhlt	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__swrite>:
 8007dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	898b      	ldrh	r3, [r1, #12]
 8007dc2:	05db      	lsls	r3, r3, #23
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4616      	mov	r6, r2
 8007dca:	d505      	bpl.n	8007dd8 <__swrite+0x1e>
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f000 f9c8 	bl	8008168 <_lseek_r>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	4628      	mov	r0, r5
 8007dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	f000 b869 	b.w	8007ec4 <_write_r>

08007df2 <__sseek>:
 8007df2:	b510      	push	{r4, lr}
 8007df4:	460c      	mov	r4, r1
 8007df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfa:	f000 f9b5 	bl	8008168 <_lseek_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	bf15      	itete	ne
 8007e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e0e:	81a3      	strheq	r3, [r4, #12]
 8007e10:	bf18      	it	ne
 8007e12:	81a3      	strhne	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__sclose>:
 8007e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1a:	f000 b8d3 	b.w	8007fc4 <_close_r>
	...

08007e20 <__swbuf_r>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	460e      	mov	r6, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	4605      	mov	r5, r0
 8007e28:	b118      	cbz	r0, 8007e32 <__swbuf_r+0x12>
 8007e2a:	6983      	ldr	r3, [r0, #24]
 8007e2c:	b90b      	cbnz	r3, 8007e32 <__swbuf_r+0x12>
 8007e2e:	f7ff fcd5 	bl	80077dc <__sinit>
 8007e32:	4b21      	ldr	r3, [pc, #132]	; (8007eb8 <__swbuf_r+0x98>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	d12b      	bne.n	8007e90 <__swbuf_r+0x70>
 8007e38:	686c      	ldr	r4, [r5, #4]
 8007e3a:	69a3      	ldr	r3, [r4, #24]
 8007e3c:	60a3      	str	r3, [r4, #8]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	071a      	lsls	r2, r3, #28
 8007e42:	d52f      	bpl.n	8007ea4 <__swbuf_r+0x84>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	b36b      	cbz	r3, 8007ea4 <__swbuf_r+0x84>
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	6820      	ldr	r0, [r4, #0]
 8007e4c:	1ac0      	subs	r0, r0, r3
 8007e4e:	6963      	ldr	r3, [r4, #20]
 8007e50:	b2f6      	uxtb	r6, r6
 8007e52:	4283      	cmp	r3, r0
 8007e54:	4637      	mov	r7, r6
 8007e56:	dc04      	bgt.n	8007e62 <__swbuf_r+0x42>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 f948 	bl	80080f0 <_fflush_r>
 8007e60:	bb30      	cbnz	r0, 8007eb0 <__swbuf_r+0x90>
 8007e62:	68a3      	ldr	r3, [r4, #8]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	6022      	str	r2, [r4, #0]
 8007e6e:	701e      	strb	r6, [r3, #0]
 8007e70:	6963      	ldr	r3, [r4, #20]
 8007e72:	3001      	adds	r0, #1
 8007e74:	4283      	cmp	r3, r0
 8007e76:	d004      	beq.n	8007e82 <__swbuf_r+0x62>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	07db      	lsls	r3, r3, #31
 8007e7c:	d506      	bpl.n	8007e8c <__swbuf_r+0x6c>
 8007e7e:	2e0a      	cmp	r6, #10
 8007e80:	d104      	bne.n	8007e8c <__swbuf_r+0x6c>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 f933 	bl	80080f0 <_fflush_r>
 8007e8a:	b988      	cbnz	r0, 8007eb0 <__swbuf_r+0x90>
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <__swbuf_r+0x9c>)
 8007e92:	429c      	cmp	r4, r3
 8007e94:	d101      	bne.n	8007e9a <__swbuf_r+0x7a>
 8007e96:	68ac      	ldr	r4, [r5, #8]
 8007e98:	e7cf      	b.n	8007e3a <__swbuf_r+0x1a>
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <__swbuf_r+0xa0>)
 8007e9c:	429c      	cmp	r4, r3
 8007e9e:	bf08      	it	eq
 8007ea0:	68ec      	ldreq	r4, [r5, #12]
 8007ea2:	e7ca      	b.n	8007e3a <__swbuf_r+0x1a>
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f000 f81e 	bl	8007ee8 <__swsetup_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d0cb      	beq.n	8007e48 <__swbuf_r+0x28>
 8007eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8007eb4:	e7ea      	b.n	8007e8c <__swbuf_r+0x6c>
 8007eb6:	bf00      	nop
 8007eb8:	08008468 	.word	0x08008468
 8007ebc:	08008488 	.word	0x08008488
 8007ec0:	08008448 	.word	0x08008448

08007ec4 <_write_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4d07      	ldr	r5, [pc, #28]	; (8007ee4 <_write_r+0x20>)
 8007ec8:	4604      	mov	r4, r0
 8007eca:	4608      	mov	r0, r1
 8007ecc:	4611      	mov	r1, r2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	602a      	str	r2, [r5, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f7ff f9ac 	bl	8007230 <_write>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_write_r+0x1e>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_write_r+0x1e>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	240045b8 	.word	0x240045b8

08007ee8 <__swsetup_r>:
 8007ee8:	4b32      	ldr	r3, [pc, #200]	; (8007fb4 <__swsetup_r+0xcc>)
 8007eea:	b570      	push	{r4, r5, r6, lr}
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	b125      	cbz	r5, 8007efe <__swsetup_r+0x16>
 8007ef4:	69ab      	ldr	r3, [r5, #24]
 8007ef6:	b913      	cbnz	r3, 8007efe <__swsetup_r+0x16>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff fc6f 	bl	80077dc <__sinit>
 8007efe:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <__swsetup_r+0xd0>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	d10f      	bne.n	8007f24 <__swsetup_r+0x3c>
 8007f04:	686c      	ldr	r4, [r5, #4]
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f0c:	0719      	lsls	r1, r3, #28
 8007f0e:	d42c      	bmi.n	8007f6a <__swsetup_r+0x82>
 8007f10:	06dd      	lsls	r5, r3, #27
 8007f12:	d411      	bmi.n	8007f38 <__swsetup_r+0x50>
 8007f14:	2309      	movs	r3, #9
 8007f16:	6033      	str	r3, [r6, #0]
 8007f18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	e03e      	b.n	8007fa2 <__swsetup_r+0xba>
 8007f24:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <__swsetup_r+0xd4>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	d101      	bne.n	8007f2e <__swsetup_r+0x46>
 8007f2a:	68ac      	ldr	r4, [r5, #8]
 8007f2c:	e7eb      	b.n	8007f06 <__swsetup_r+0x1e>
 8007f2e:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <__swsetup_r+0xd8>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	bf08      	it	eq
 8007f34:	68ec      	ldreq	r4, [r5, #12]
 8007f36:	e7e6      	b.n	8007f06 <__swsetup_r+0x1e>
 8007f38:	0758      	lsls	r0, r3, #29
 8007f3a:	d512      	bpl.n	8007f62 <__swsetup_r+0x7a>
 8007f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f3e:	b141      	cbz	r1, 8007f52 <__swsetup_r+0x6a>
 8007f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f44:	4299      	cmp	r1, r3
 8007f46:	d002      	beq.n	8007f4e <__swsetup_r+0x66>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 f997 	bl	800827c <_free_r>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6363      	str	r3, [r4, #52]	; 0x34
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	6063      	str	r3, [r4, #4]
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f043 0308 	orr.w	r3, r3, #8
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	b94b      	cbnz	r3, 8007f82 <__swsetup_r+0x9a>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f78:	d003      	beq.n	8007f82 <__swsetup_r+0x9a>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f000 f929 	bl	80081d4 <__smakebuf_r>
 8007f82:	89a0      	ldrh	r0, [r4, #12]
 8007f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f88:	f010 0301 	ands.w	r3, r0, #1
 8007f8c:	d00a      	beq.n	8007fa4 <__swsetup_r+0xbc>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60a3      	str	r3, [r4, #8]
 8007f92:	6963      	ldr	r3, [r4, #20]
 8007f94:	425b      	negs	r3, r3
 8007f96:	61a3      	str	r3, [r4, #24]
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	b943      	cbnz	r3, 8007fae <__swsetup_r+0xc6>
 8007f9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fa0:	d1ba      	bne.n	8007f18 <__swsetup_r+0x30>
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	0781      	lsls	r1, r0, #30
 8007fa6:	bf58      	it	pl
 8007fa8:	6963      	ldrpl	r3, [r4, #20]
 8007faa:	60a3      	str	r3, [r4, #8]
 8007fac:	e7f4      	b.n	8007f98 <__swsetup_r+0xb0>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	e7f7      	b.n	8007fa2 <__swsetup_r+0xba>
 8007fb2:	bf00      	nop
 8007fb4:	24000014 	.word	0x24000014
 8007fb8:	08008468 	.word	0x08008468
 8007fbc:	08008488 	.word	0x08008488
 8007fc0:	08008448 	.word	0x08008448

08007fc4 <_close_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d06      	ldr	r5, [pc, #24]	; (8007fe0 <_close_r+0x1c>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	f7ff f95a 	bl	8007288 <_close>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_close_r+0x1a>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_close_r+0x1a>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	240045b8 	.word	0x240045b8

08007fe4 <__sflush_r>:
 8007fe4:	898a      	ldrh	r2, [r1, #12]
 8007fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fea:	4605      	mov	r5, r0
 8007fec:	0710      	lsls	r0, r2, #28
 8007fee:	460c      	mov	r4, r1
 8007ff0:	d458      	bmi.n	80080a4 <__sflush_r+0xc0>
 8007ff2:	684b      	ldr	r3, [r1, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dc05      	bgt.n	8008004 <__sflush_r+0x20>
 8007ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc02      	bgt.n	8008004 <__sflush_r+0x20>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008006:	2e00      	cmp	r6, #0
 8008008:	d0f9      	beq.n	8007ffe <__sflush_r+0x1a>
 800800a:	2300      	movs	r3, #0
 800800c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008010:	682f      	ldr	r7, [r5, #0]
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	d032      	beq.n	800807c <__sflush_r+0x98>
 8008016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	075a      	lsls	r2, r3, #29
 800801c:	d505      	bpl.n	800802a <__sflush_r+0x46>
 800801e:	6863      	ldr	r3, [r4, #4]
 8008020:	1ac0      	subs	r0, r0, r3
 8008022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008024:	b10b      	cbz	r3, 800802a <__sflush_r+0x46>
 8008026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008028:	1ac0      	subs	r0, r0, r3
 800802a:	2300      	movs	r3, #0
 800802c:	4602      	mov	r2, r0
 800802e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008030:	6a21      	ldr	r1, [r4, #32]
 8008032:	4628      	mov	r0, r5
 8008034:	47b0      	blx	r6
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	d106      	bne.n	800804a <__sflush_r+0x66>
 800803c:	6829      	ldr	r1, [r5, #0]
 800803e:	291d      	cmp	r1, #29
 8008040:	d82c      	bhi.n	800809c <__sflush_r+0xb8>
 8008042:	4a2a      	ldr	r2, [pc, #168]	; (80080ec <__sflush_r+0x108>)
 8008044:	40ca      	lsrs	r2, r1
 8008046:	07d6      	lsls	r6, r2, #31
 8008048:	d528      	bpl.n	800809c <__sflush_r+0xb8>
 800804a:	2200      	movs	r2, #0
 800804c:	6062      	str	r2, [r4, #4]
 800804e:	04d9      	lsls	r1, r3, #19
 8008050:	6922      	ldr	r2, [r4, #16]
 8008052:	6022      	str	r2, [r4, #0]
 8008054:	d504      	bpl.n	8008060 <__sflush_r+0x7c>
 8008056:	1c42      	adds	r2, r0, #1
 8008058:	d101      	bne.n	800805e <__sflush_r+0x7a>
 800805a:	682b      	ldr	r3, [r5, #0]
 800805c:	b903      	cbnz	r3, 8008060 <__sflush_r+0x7c>
 800805e:	6560      	str	r0, [r4, #84]	; 0x54
 8008060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008062:	602f      	str	r7, [r5, #0]
 8008064:	2900      	cmp	r1, #0
 8008066:	d0ca      	beq.n	8007ffe <__sflush_r+0x1a>
 8008068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800806c:	4299      	cmp	r1, r3
 800806e:	d002      	beq.n	8008076 <__sflush_r+0x92>
 8008070:	4628      	mov	r0, r5
 8008072:	f000 f903 	bl	800827c <_free_r>
 8008076:	2000      	movs	r0, #0
 8008078:	6360      	str	r0, [r4, #52]	; 0x34
 800807a:	e7c1      	b.n	8008000 <__sflush_r+0x1c>
 800807c:	6a21      	ldr	r1, [r4, #32]
 800807e:	2301      	movs	r3, #1
 8008080:	4628      	mov	r0, r5
 8008082:	47b0      	blx	r6
 8008084:	1c41      	adds	r1, r0, #1
 8008086:	d1c7      	bne.n	8008018 <__sflush_r+0x34>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0c4      	beq.n	8008018 <__sflush_r+0x34>
 800808e:	2b1d      	cmp	r3, #29
 8008090:	d001      	beq.n	8008096 <__sflush_r+0xb2>
 8008092:	2b16      	cmp	r3, #22
 8008094:	d101      	bne.n	800809a <__sflush_r+0xb6>
 8008096:	602f      	str	r7, [r5, #0]
 8008098:	e7b1      	b.n	8007ffe <__sflush_r+0x1a>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	e7ad      	b.n	8008000 <__sflush_r+0x1c>
 80080a4:	690f      	ldr	r7, [r1, #16]
 80080a6:	2f00      	cmp	r7, #0
 80080a8:	d0a9      	beq.n	8007ffe <__sflush_r+0x1a>
 80080aa:	0793      	lsls	r3, r2, #30
 80080ac:	680e      	ldr	r6, [r1, #0]
 80080ae:	bf08      	it	eq
 80080b0:	694b      	ldreq	r3, [r1, #20]
 80080b2:	600f      	str	r7, [r1, #0]
 80080b4:	bf18      	it	ne
 80080b6:	2300      	movne	r3, #0
 80080b8:	eba6 0807 	sub.w	r8, r6, r7
 80080bc:	608b      	str	r3, [r1, #8]
 80080be:	f1b8 0f00 	cmp.w	r8, #0
 80080c2:	dd9c      	ble.n	8007ffe <__sflush_r+0x1a>
 80080c4:	6a21      	ldr	r1, [r4, #32]
 80080c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080c8:	4643      	mov	r3, r8
 80080ca:	463a      	mov	r2, r7
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b0      	blx	r6
 80080d0:	2800      	cmp	r0, #0
 80080d2:	dc06      	bgt.n	80080e2 <__sflush_r+0xfe>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e78e      	b.n	8008000 <__sflush_r+0x1c>
 80080e2:	4407      	add	r7, r0
 80080e4:	eba8 0800 	sub.w	r8, r8, r0
 80080e8:	e7e9      	b.n	80080be <__sflush_r+0xda>
 80080ea:	bf00      	nop
 80080ec:	20400001 	.word	0x20400001

080080f0 <_fflush_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b913      	cbnz	r3, 8008100 <_fflush_r+0x10>
 80080fa:	2500      	movs	r5, #0
 80080fc:	4628      	mov	r0, r5
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	b118      	cbz	r0, 800810a <_fflush_r+0x1a>
 8008102:	6983      	ldr	r3, [r0, #24]
 8008104:	b90b      	cbnz	r3, 800810a <_fflush_r+0x1a>
 8008106:	f7ff fb69 	bl	80077dc <__sinit>
 800810a:	4b14      	ldr	r3, [pc, #80]	; (800815c <_fflush_r+0x6c>)
 800810c:	429c      	cmp	r4, r3
 800810e:	d11b      	bne.n	8008148 <_fflush_r+0x58>
 8008110:	686c      	ldr	r4, [r5, #4]
 8008112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0ef      	beq.n	80080fa <_fflush_r+0xa>
 800811a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800811c:	07d0      	lsls	r0, r2, #31
 800811e:	d404      	bmi.n	800812a <_fflush_r+0x3a>
 8008120:	0599      	lsls	r1, r3, #22
 8008122:	d402      	bmi.n	800812a <_fflush_r+0x3a>
 8008124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008126:	f7ff fc1c 	bl	8007962 <__retarget_lock_acquire_recursive>
 800812a:	4628      	mov	r0, r5
 800812c:	4621      	mov	r1, r4
 800812e:	f7ff ff59 	bl	8007fe4 <__sflush_r>
 8008132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008134:	07da      	lsls	r2, r3, #31
 8008136:	4605      	mov	r5, r0
 8008138:	d4e0      	bmi.n	80080fc <_fflush_r+0xc>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	059b      	lsls	r3, r3, #22
 800813e:	d4dd      	bmi.n	80080fc <_fflush_r+0xc>
 8008140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008142:	f7ff fc0f 	bl	8007964 <__retarget_lock_release_recursive>
 8008146:	e7d9      	b.n	80080fc <_fflush_r+0xc>
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <_fflush_r+0x70>)
 800814a:	429c      	cmp	r4, r3
 800814c:	d101      	bne.n	8008152 <_fflush_r+0x62>
 800814e:	68ac      	ldr	r4, [r5, #8]
 8008150:	e7df      	b.n	8008112 <_fflush_r+0x22>
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <_fflush_r+0x74>)
 8008154:	429c      	cmp	r4, r3
 8008156:	bf08      	it	eq
 8008158:	68ec      	ldreq	r4, [r5, #12]
 800815a:	e7da      	b.n	8008112 <_fflush_r+0x22>
 800815c:	08008468 	.word	0x08008468
 8008160:	08008488 	.word	0x08008488
 8008164:	08008448 	.word	0x08008448

08008168 <_lseek_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_lseek_r+0x20>)
 800816c:	4604      	mov	r4, r0
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f7ff f89d 	bl	80072b6 <_lseek>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_lseek_r+0x1e>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_lseek_r+0x1e>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	240045b8 	.word	0x240045b8

0800818c <__swhatbuf_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	460e      	mov	r6, r1
 8008190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008194:	2900      	cmp	r1, #0
 8008196:	b096      	sub	sp, #88	; 0x58
 8008198:	4614      	mov	r4, r2
 800819a:	461d      	mov	r5, r3
 800819c:	da07      	bge.n	80081ae <__swhatbuf_r+0x22>
 800819e:	2300      	movs	r3, #0
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	89b3      	ldrh	r3, [r6, #12]
 80081a4:	061a      	lsls	r2, r3, #24
 80081a6:	d410      	bmi.n	80081ca <__swhatbuf_r+0x3e>
 80081a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ac:	e00e      	b.n	80081cc <__swhatbuf_r+0x40>
 80081ae:	466a      	mov	r2, sp
 80081b0:	f000 f8c6 	bl	8008340 <_fstat_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	dbf2      	blt.n	800819e <__swhatbuf_r+0x12>
 80081b8:	9a01      	ldr	r2, [sp, #4]
 80081ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081c2:	425a      	negs	r2, r3
 80081c4:	415a      	adcs	r2, r3
 80081c6:	602a      	str	r2, [r5, #0]
 80081c8:	e7ee      	b.n	80081a8 <__swhatbuf_r+0x1c>
 80081ca:	2340      	movs	r3, #64	; 0x40
 80081cc:	2000      	movs	r0, #0
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	b016      	add	sp, #88	; 0x58
 80081d2:	bd70      	pop	{r4, r5, r6, pc}

080081d4 <__smakebuf_r>:
 80081d4:	898b      	ldrh	r3, [r1, #12]
 80081d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081d8:	079d      	lsls	r5, r3, #30
 80081da:	4606      	mov	r6, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	d507      	bpl.n	80081f0 <__smakebuf_r+0x1c>
 80081e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	2301      	movs	r3, #1
 80081ea:	6163      	str	r3, [r4, #20]
 80081ec:	b002      	add	sp, #8
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	ab01      	add	r3, sp, #4
 80081f2:	466a      	mov	r2, sp
 80081f4:	f7ff ffca 	bl	800818c <__swhatbuf_r>
 80081f8:	9900      	ldr	r1, [sp, #0]
 80081fa:	4605      	mov	r5, r0
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff fbbb 	bl	8007978 <_malloc_r>
 8008202:	b948      	cbnz	r0, 8008218 <__smakebuf_r+0x44>
 8008204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008208:	059a      	lsls	r2, r3, #22
 800820a:	d4ef      	bmi.n	80081ec <__smakebuf_r+0x18>
 800820c:	f023 0303 	bic.w	r3, r3, #3
 8008210:	f043 0302 	orr.w	r3, r3, #2
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	e7e3      	b.n	80081e0 <__smakebuf_r+0xc>
 8008218:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <__smakebuf_r+0x7c>)
 800821a:	62b3      	str	r3, [r6, #40]	; 0x28
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	9b00      	ldr	r3, [sp, #0]
 8008228:	6163      	str	r3, [r4, #20]
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	6120      	str	r0, [r4, #16]
 800822e:	b15b      	cbz	r3, 8008248 <__smakebuf_r+0x74>
 8008230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008234:	4630      	mov	r0, r6
 8008236:	f000 f895 	bl	8008364 <_isatty_r>
 800823a:	b128      	cbz	r0, 8008248 <__smakebuf_r+0x74>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f023 0303 	bic.w	r3, r3, #3
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	89a0      	ldrh	r0, [r4, #12]
 800824a:	4305      	orrs	r5, r0
 800824c:	81a5      	strh	r5, [r4, #12]
 800824e:	e7cd      	b.n	80081ec <__smakebuf_r+0x18>
 8008250:	08007775 	.word	0x08007775

08008254 <malloc>:
 8008254:	4b02      	ldr	r3, [pc, #8]	; (8008260 <malloc+0xc>)
 8008256:	4601      	mov	r1, r0
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	f7ff bb8d 	b.w	8007978 <_malloc_r>
 800825e:	bf00      	nop
 8008260:	24000014 	.word	0x24000014

08008264 <__malloc_lock>:
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__malloc_lock+0x8>)
 8008266:	f7ff bb7c 	b.w	8007962 <__retarget_lock_acquire_recursive>
 800826a:	bf00      	nop
 800826c:	240045b0 	.word	0x240045b0

08008270 <__malloc_unlock>:
 8008270:	4801      	ldr	r0, [pc, #4]	; (8008278 <__malloc_unlock+0x8>)
 8008272:	f7ff bb77 	b.w	8007964 <__retarget_lock_release_recursive>
 8008276:	bf00      	nop
 8008278:	240045b0 	.word	0x240045b0

0800827c <_free_r>:
 800827c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800827e:	2900      	cmp	r1, #0
 8008280:	d048      	beq.n	8008314 <_free_r+0x98>
 8008282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008286:	9001      	str	r0, [sp, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f1a1 0404 	sub.w	r4, r1, #4
 800828e:	bfb8      	it	lt
 8008290:	18e4      	addlt	r4, r4, r3
 8008292:	f7ff ffe7 	bl	8008264 <__malloc_lock>
 8008296:	4a20      	ldr	r2, [pc, #128]	; (8008318 <_free_r+0x9c>)
 8008298:	9801      	ldr	r0, [sp, #4]
 800829a:	6813      	ldr	r3, [r2, #0]
 800829c:	4615      	mov	r5, r2
 800829e:	b933      	cbnz	r3, 80082ae <_free_r+0x32>
 80082a0:	6063      	str	r3, [r4, #4]
 80082a2:	6014      	str	r4, [r2, #0]
 80082a4:	b003      	add	sp, #12
 80082a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082aa:	f7ff bfe1 	b.w	8008270 <__malloc_unlock>
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	d90b      	bls.n	80082ca <_free_r+0x4e>
 80082b2:	6821      	ldr	r1, [r4, #0]
 80082b4:	1862      	adds	r2, r4, r1
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bf04      	itt	eq
 80082ba:	681a      	ldreq	r2, [r3, #0]
 80082bc:	685b      	ldreq	r3, [r3, #4]
 80082be:	6063      	str	r3, [r4, #4]
 80082c0:	bf04      	itt	eq
 80082c2:	1852      	addeq	r2, r2, r1
 80082c4:	6022      	streq	r2, [r4, #0]
 80082c6:	602c      	str	r4, [r5, #0]
 80082c8:	e7ec      	b.n	80082a4 <_free_r+0x28>
 80082ca:	461a      	mov	r2, r3
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	b10b      	cbz	r3, 80082d4 <_free_r+0x58>
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	d9fa      	bls.n	80082ca <_free_r+0x4e>
 80082d4:	6811      	ldr	r1, [r2, #0]
 80082d6:	1855      	adds	r5, r2, r1
 80082d8:	42a5      	cmp	r5, r4
 80082da:	d10b      	bne.n	80082f4 <_free_r+0x78>
 80082dc:	6824      	ldr	r4, [r4, #0]
 80082de:	4421      	add	r1, r4
 80082e0:	1854      	adds	r4, r2, r1
 80082e2:	42a3      	cmp	r3, r4
 80082e4:	6011      	str	r1, [r2, #0]
 80082e6:	d1dd      	bne.n	80082a4 <_free_r+0x28>
 80082e8:	681c      	ldr	r4, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	6053      	str	r3, [r2, #4]
 80082ee:	4421      	add	r1, r4
 80082f0:	6011      	str	r1, [r2, #0]
 80082f2:	e7d7      	b.n	80082a4 <_free_r+0x28>
 80082f4:	d902      	bls.n	80082fc <_free_r+0x80>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6003      	str	r3, [r0, #0]
 80082fa:	e7d3      	b.n	80082a4 <_free_r+0x28>
 80082fc:	6825      	ldr	r5, [r4, #0]
 80082fe:	1961      	adds	r1, r4, r5
 8008300:	428b      	cmp	r3, r1
 8008302:	bf04      	itt	eq
 8008304:	6819      	ldreq	r1, [r3, #0]
 8008306:	685b      	ldreq	r3, [r3, #4]
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	bf04      	itt	eq
 800830c:	1949      	addeq	r1, r1, r5
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	6054      	str	r4, [r2, #4]
 8008312:	e7c7      	b.n	80082a4 <_free_r+0x28>
 8008314:	b003      	add	sp, #12
 8008316:	bd30      	pop	{r4, r5, pc}
 8008318:	240040a0 	.word	0x240040a0

0800831c <_read_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	; (800833c <_read_r+0x20>)
 8008320:	4604      	mov	r4, r0
 8008322:	4608      	mov	r0, r1
 8008324:	4611      	mov	r1, r2
 8008326:	2200      	movs	r2, #0
 8008328:	602a      	str	r2, [r5, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f7fe ffd4 	bl	80072d8 <_read>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_read_r+0x1e>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_read_r+0x1e>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	240045b8 	.word	0x240045b8

08008340 <_fstat_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d07      	ldr	r5, [pc, #28]	; (8008360 <_fstat_r+0x20>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	4611      	mov	r1, r2
 800834c:	602b      	str	r3, [r5, #0]
 800834e:	f7fe ffeb 	bl	8007328 <_fstat>
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	d102      	bne.n	800835c <_fstat_r+0x1c>
 8008356:	682b      	ldr	r3, [r5, #0]
 8008358:	b103      	cbz	r3, 800835c <_fstat_r+0x1c>
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	bd38      	pop	{r3, r4, r5, pc}
 800835e:	bf00      	nop
 8008360:	240045b8 	.word	0x240045b8

08008364 <_isatty_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d06      	ldr	r5, [pc, #24]	; (8008380 <_isatty_r+0x1c>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	f7fe ff48 	bl	8007204 <_isatty>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_isatty_r+0x1a>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_isatty_r+0x1a>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	240045b8 	.word	0x240045b8

08008384 <_init>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	bf00      	nop
 8008388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838a:	bc08      	pop	{r3}
 800838c:	469e      	mov	lr, r3
 800838e:	4770      	bx	lr

08008390 <_fini>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	bf00      	nop
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr
