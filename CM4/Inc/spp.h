/*
 * spp.h
 *
 *  Created on: May 18, 2022
 *      Author: Francesco
 */
#include "main.h"

#ifndef SPP_H_
#define SPP_H_

#define SPP_BYTE_DATA 4


 typedef struct //SPP PRIMARY HEADER
 //Primary Header of the space packet.
 {
 	unsigned int pkt_ver; /* Bit 0 - 2
 	 Packet version number. */

 	unsigned int type; /* Bit 3
 	 Packet Type shall be used to distinguish Packets used
 	 for telemetry (reporting) (i.e. set to '0') from Packets
 	 used for telecommand (requesting) (i.e. set to '1') */
 	unsigned int secHdrFlag; /* Bit 4
 	 Secondary Header Flag indicates the presence ('1') or
 	 absence ('0') of Packet Secondary Header. */
 	unsigned int APID; /* Bit 5 - 15
 	 APID  (in conjunction  with  the  optional APID  Qualifier
 	 that  identifies  the  naming  domain  for the  APID)
 	 shall  provide  the  naming  mechanism  for  the  LDP.
 	 APID  is  unique  only  within  its  naming  domain. */

 	unsigned int seqFlag; /* Bit 16 - 17
 	 Sequence Flags not part of the Space Packet Protocol.
 	 used by the user of the Packet Service to indicate that
 	 User Data contained within the Space Packet is a
 	 segment  of  a  larger  set  of  application data. */
 	unsigned int seqCount; /* Bit 18 - 31
 	 Packet Sequence Count or Packet Name.
 	 Provide the sequential binary count of each Space Packet
 	 generated by the user application identified
 	 by the APID */

 	unsigned int data_len; /* Bit 32 - 47
 	 Packet Data Length, 16-bit field shall contain a length
 	 count  C  that  equals  one  fewer  than  the  length
 	 (in octets) of the Packet Data Field.
 	 C = (Total No of Octets in the Packet Data Field) â€“ 1 */

 } primaryHdr;

 typedef struct { //SPP PACKET
 	primaryHdr pHdr;
 	// ignoring secondary header for now  secondaryHdr sHdr;
 	uint8_t data[SPP_BYTE_DATA];

 } space_packet;


void unpack_SPP_TC();

void pack_SPP_TM(space_packet tm_pkt);
void parse_SPP_TC(space_packet pkt);

void SPP_TM_hdr_config(primaryHdr tm_hdr);


typedef union {

    float f;
    struct
    {

        // Order is important.
        // Here the members of the union data structure
        // use the same memory (32 bits).
        // The ordering is taken
        // from the LSB to the MSB.
        unsigned int mantissa : 23;
        unsigned int exponent : 8;
        unsigned int sign : 1;

    } raw;
} myfloat;



#endif /* SPP_H_ */
