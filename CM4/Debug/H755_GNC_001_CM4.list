
H755_GNC_001_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c78  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002090  08114f18  08114f18  00024f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08116fa8  08116fa8  00026fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08116fb0  08116fb0  00026fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08116fb4  08116fb4  00026fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  10000000  08116fb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  100001fc  081171b4  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  1000025c  08117214  0003025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 000017d0  100002bc  08117274  000302bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000725c  10001a8c  08118a44  00031a8c  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  10008ce8  08118a44  00038ce8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031a8c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057d30  00000000  00000000  00031abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009331  00000000  00000000  000897ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b0  00000000  00000000  00092b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002200  00000000  00000000  00094fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004945b  00000000  00000000  000971d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039ab5  00000000  00000000  000e062b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001ab163  00000000  00000000  0011a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002c5243  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a7cc  00000000  00000000  002c5298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  002cfa64  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  002cfaa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10001a8c 	.word	0x10001a8c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08114f00 	.word	0x08114f00

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10001a90 	.word	0x10001a90
 81002dc:	08114f00 	.word	0x08114f00

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_ldivmod>:
 8100cb8:	b97b      	cbnz	r3, 8100cda <__aeabi_ldivmod+0x22>
 8100cba:	b972      	cbnz	r2, 8100cda <__aeabi_ldivmod+0x22>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bfbe      	ittt	lt
 8100cc0:	2000      	movlt	r0, #0
 8100cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100cc6:	e006      	blt.n	8100cd6 <__aeabi_ldivmod+0x1e>
 8100cc8:	bf08      	it	eq
 8100cca:	2800      	cmpeq	r0, #0
 8100ccc:	bf1c      	itt	ne
 8100cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8100cd6:	f000 b9b9 	b.w	810104c <__aeabi_idiv0>
 8100cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100ce2:	2900      	cmp	r1, #0
 8100ce4:	db09      	blt.n	8100cfa <__aeabi_ldivmod+0x42>
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	db1a      	blt.n	8100d20 <__aeabi_ldivmod+0x68>
 8100cea:	f000 f84d 	bl	8100d88 <__udivmoddi4>
 8100cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100cf6:	b004      	add	sp, #16
 8100cf8:	4770      	bx	lr
 8100cfa:	4240      	negs	r0, r0
 8100cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d00:	2b00      	cmp	r3, #0
 8100d02:	db1b      	blt.n	8100d3c <__aeabi_ldivmod+0x84>
 8100d04:	f000 f840 	bl	8100d88 <__udivmoddi4>
 8100d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d10:	b004      	add	sp, #16
 8100d12:	4240      	negs	r0, r0
 8100d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d18:	4252      	negs	r2, r2
 8100d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d1e:	4770      	bx	lr
 8100d20:	4252      	negs	r2, r2
 8100d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d26:	f000 f82f 	bl	8100d88 <__udivmoddi4>
 8100d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d32:	b004      	add	sp, #16
 8100d34:	4240      	negs	r0, r0
 8100d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d3a:	4770      	bx	lr
 8100d3c:	4252      	negs	r2, r2
 8100d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d42:	f000 f821 	bl	8100d88 <__udivmoddi4>
 8100d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d4e:	b004      	add	sp, #16
 8100d50:	4252      	negs	r2, r2
 8100d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d56:	4770      	bx	lr

08100d58 <__aeabi_uldivmod>:
 8100d58:	b953      	cbnz	r3, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5a:	b94a      	cbnz	r2, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5c:	2900      	cmp	r1, #0
 8100d5e:	bf08      	it	eq
 8100d60:	2800      	cmpeq	r0, #0
 8100d62:	bf1c      	itt	ne
 8100d64:	f04f 31ff 	movne.w	r1, #4294967295
 8100d68:	f04f 30ff 	movne.w	r0, #4294967295
 8100d6c:	f000 b96e 	b.w	810104c <__aeabi_idiv0>
 8100d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d78:	f000 f806 	bl	8100d88 <__udivmoddi4>
 8100d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d84:	b004      	add	sp, #16
 8100d86:	4770      	bx	lr

08100d88 <__udivmoddi4>:
 8100d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100d8c:	9d08      	ldr	r5, [sp, #32]
 8100d8e:	4604      	mov	r4, r0
 8100d90:	468c      	mov	ip, r1
 8100d92:	2b00      	cmp	r3, #0
 8100d94:	f040 8083 	bne.w	8100e9e <__udivmoddi4+0x116>
 8100d98:	428a      	cmp	r2, r1
 8100d9a:	4617      	mov	r7, r2
 8100d9c:	d947      	bls.n	8100e2e <__udivmoddi4+0xa6>
 8100d9e:	fab2 f282 	clz	r2, r2
 8100da2:	b142      	cbz	r2, 8100db6 <__udivmoddi4+0x2e>
 8100da4:	f1c2 0020 	rsb	r0, r2, #32
 8100da8:	fa24 f000 	lsr.w	r0, r4, r0
 8100dac:	4091      	lsls	r1, r2
 8100dae:	4097      	lsls	r7, r2
 8100db0:	ea40 0c01 	orr.w	ip, r0, r1
 8100db4:	4094      	lsls	r4, r2
 8100db6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100dba:	0c23      	lsrs	r3, r4, #16
 8100dbc:	fbbc f6f8 	udiv	r6, ip, r8
 8100dc0:	fa1f fe87 	uxth.w	lr, r7
 8100dc4:	fb08 c116 	mls	r1, r8, r6, ip
 8100dc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100dcc:	fb06 f10e 	mul.w	r1, r6, lr
 8100dd0:	4299      	cmp	r1, r3
 8100dd2:	d909      	bls.n	8100de8 <__udivmoddi4+0x60>
 8100dd4:	18fb      	adds	r3, r7, r3
 8100dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8100dda:	f080 8119 	bcs.w	8101010 <__udivmoddi4+0x288>
 8100dde:	4299      	cmp	r1, r3
 8100de0:	f240 8116 	bls.w	8101010 <__udivmoddi4+0x288>
 8100de4:	3e02      	subs	r6, #2
 8100de6:	443b      	add	r3, r7
 8100de8:	1a5b      	subs	r3, r3, r1
 8100dea:	b2a4      	uxth	r4, r4
 8100dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8100df0:	fb08 3310 	mls	r3, r8, r0, r3
 8100df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100df8:	fb00 fe0e 	mul.w	lr, r0, lr
 8100dfc:	45a6      	cmp	lr, r4
 8100dfe:	d909      	bls.n	8100e14 <__udivmoddi4+0x8c>
 8100e00:	193c      	adds	r4, r7, r4
 8100e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e06:	f080 8105 	bcs.w	8101014 <__udivmoddi4+0x28c>
 8100e0a:	45a6      	cmp	lr, r4
 8100e0c:	f240 8102 	bls.w	8101014 <__udivmoddi4+0x28c>
 8100e10:	3802      	subs	r0, #2
 8100e12:	443c      	add	r4, r7
 8100e14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100e18:	eba4 040e 	sub.w	r4, r4, lr
 8100e1c:	2600      	movs	r6, #0
 8100e1e:	b11d      	cbz	r5, 8100e28 <__udivmoddi4+0xa0>
 8100e20:	40d4      	lsrs	r4, r2
 8100e22:	2300      	movs	r3, #0
 8100e24:	e9c5 4300 	strd	r4, r3, [r5]
 8100e28:	4631      	mov	r1, r6
 8100e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e2e:	b902      	cbnz	r2, 8100e32 <__udivmoddi4+0xaa>
 8100e30:	deff      	udf	#255	; 0xff
 8100e32:	fab2 f282 	clz	r2, r2
 8100e36:	2a00      	cmp	r2, #0
 8100e38:	d150      	bne.n	8100edc <__udivmoddi4+0x154>
 8100e3a:	1bcb      	subs	r3, r1, r7
 8100e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e40:	fa1f f887 	uxth.w	r8, r7
 8100e44:	2601      	movs	r6, #1
 8100e46:	fbb3 fcfe 	udiv	ip, r3, lr
 8100e4a:	0c21      	lsrs	r1, r4, #16
 8100e4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8100e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e54:	fb08 f30c 	mul.w	r3, r8, ip
 8100e58:	428b      	cmp	r3, r1
 8100e5a:	d907      	bls.n	8100e6c <__udivmoddi4+0xe4>
 8100e5c:	1879      	adds	r1, r7, r1
 8100e5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100e62:	d202      	bcs.n	8100e6a <__udivmoddi4+0xe2>
 8100e64:	428b      	cmp	r3, r1
 8100e66:	f200 80e9 	bhi.w	810103c <__udivmoddi4+0x2b4>
 8100e6a:	4684      	mov	ip, r0
 8100e6c:	1ac9      	subs	r1, r1, r3
 8100e6e:	b2a3      	uxth	r3, r4
 8100e70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100e74:	fb0e 1110 	mls	r1, lr, r0, r1
 8100e78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100e7c:	fb08 f800 	mul.w	r8, r8, r0
 8100e80:	45a0      	cmp	r8, r4
 8100e82:	d907      	bls.n	8100e94 <__udivmoddi4+0x10c>
 8100e84:	193c      	adds	r4, r7, r4
 8100e86:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e8a:	d202      	bcs.n	8100e92 <__udivmoddi4+0x10a>
 8100e8c:	45a0      	cmp	r8, r4
 8100e8e:	f200 80d9 	bhi.w	8101044 <__udivmoddi4+0x2bc>
 8100e92:	4618      	mov	r0, r3
 8100e94:	eba4 0408 	sub.w	r4, r4, r8
 8100e98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100e9c:	e7bf      	b.n	8100e1e <__udivmoddi4+0x96>
 8100e9e:	428b      	cmp	r3, r1
 8100ea0:	d909      	bls.n	8100eb6 <__udivmoddi4+0x12e>
 8100ea2:	2d00      	cmp	r5, #0
 8100ea4:	f000 80b1 	beq.w	810100a <__udivmoddi4+0x282>
 8100ea8:	2600      	movs	r6, #0
 8100eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8100eae:	4630      	mov	r0, r6
 8100eb0:	4631      	mov	r1, r6
 8100eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eb6:	fab3 f683 	clz	r6, r3
 8100eba:	2e00      	cmp	r6, #0
 8100ebc:	d14a      	bne.n	8100f54 <__udivmoddi4+0x1cc>
 8100ebe:	428b      	cmp	r3, r1
 8100ec0:	d302      	bcc.n	8100ec8 <__udivmoddi4+0x140>
 8100ec2:	4282      	cmp	r2, r0
 8100ec4:	f200 80b8 	bhi.w	8101038 <__udivmoddi4+0x2b0>
 8100ec8:	1a84      	subs	r4, r0, r2
 8100eca:	eb61 0103 	sbc.w	r1, r1, r3
 8100ece:	2001      	movs	r0, #1
 8100ed0:	468c      	mov	ip, r1
 8100ed2:	2d00      	cmp	r5, #0
 8100ed4:	d0a8      	beq.n	8100e28 <__udivmoddi4+0xa0>
 8100ed6:	e9c5 4c00 	strd	r4, ip, [r5]
 8100eda:	e7a5      	b.n	8100e28 <__udivmoddi4+0xa0>
 8100edc:	f1c2 0320 	rsb	r3, r2, #32
 8100ee0:	fa20 f603 	lsr.w	r6, r0, r3
 8100ee4:	4097      	lsls	r7, r2
 8100ee6:	fa01 f002 	lsl.w	r0, r1, r2
 8100eea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100eee:	40d9      	lsrs	r1, r3
 8100ef0:	4330      	orrs	r0, r6
 8100ef2:	0c03      	lsrs	r3, r0, #16
 8100ef4:	fbb1 f6fe 	udiv	r6, r1, lr
 8100ef8:	fa1f f887 	uxth.w	r8, r7
 8100efc:	fb0e 1116 	mls	r1, lr, r6, r1
 8100f00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f04:	fb06 f108 	mul.w	r1, r6, r8
 8100f08:	4299      	cmp	r1, r3
 8100f0a:	fa04 f402 	lsl.w	r4, r4, r2
 8100f0e:	d909      	bls.n	8100f24 <__udivmoddi4+0x19c>
 8100f10:	18fb      	adds	r3, r7, r3
 8100f12:	f106 3cff 	add.w	ip, r6, #4294967295
 8100f16:	f080 808d 	bcs.w	8101034 <__udivmoddi4+0x2ac>
 8100f1a:	4299      	cmp	r1, r3
 8100f1c:	f240 808a 	bls.w	8101034 <__udivmoddi4+0x2ac>
 8100f20:	3e02      	subs	r6, #2
 8100f22:	443b      	add	r3, r7
 8100f24:	1a5b      	subs	r3, r3, r1
 8100f26:	b281      	uxth	r1, r0
 8100f28:	fbb3 f0fe 	udiv	r0, r3, lr
 8100f2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8100f30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f34:	fb00 f308 	mul.w	r3, r0, r8
 8100f38:	428b      	cmp	r3, r1
 8100f3a:	d907      	bls.n	8100f4c <__udivmoddi4+0x1c4>
 8100f3c:	1879      	adds	r1, r7, r1
 8100f3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8100f42:	d273      	bcs.n	810102c <__udivmoddi4+0x2a4>
 8100f44:	428b      	cmp	r3, r1
 8100f46:	d971      	bls.n	810102c <__udivmoddi4+0x2a4>
 8100f48:	3802      	subs	r0, #2
 8100f4a:	4439      	add	r1, r7
 8100f4c:	1acb      	subs	r3, r1, r3
 8100f4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100f52:	e778      	b.n	8100e46 <__udivmoddi4+0xbe>
 8100f54:	f1c6 0c20 	rsb	ip, r6, #32
 8100f58:	fa03 f406 	lsl.w	r4, r3, r6
 8100f5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8100f60:	431c      	orrs	r4, r3
 8100f62:	fa20 f70c 	lsr.w	r7, r0, ip
 8100f66:	fa01 f306 	lsl.w	r3, r1, r6
 8100f6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100f6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8100f72:	431f      	orrs	r7, r3
 8100f74:	0c3b      	lsrs	r3, r7, #16
 8100f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8100f7a:	fa1f f884 	uxth.w	r8, r4
 8100f7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8100f82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100f86:	fb09 fa08 	mul.w	sl, r9, r8
 8100f8a:	458a      	cmp	sl, r1
 8100f8c:	fa02 f206 	lsl.w	r2, r2, r6
 8100f90:	fa00 f306 	lsl.w	r3, r0, r6
 8100f94:	d908      	bls.n	8100fa8 <__udivmoddi4+0x220>
 8100f96:	1861      	adds	r1, r4, r1
 8100f98:	f109 30ff 	add.w	r0, r9, #4294967295
 8100f9c:	d248      	bcs.n	8101030 <__udivmoddi4+0x2a8>
 8100f9e:	458a      	cmp	sl, r1
 8100fa0:	d946      	bls.n	8101030 <__udivmoddi4+0x2a8>
 8100fa2:	f1a9 0902 	sub.w	r9, r9, #2
 8100fa6:	4421      	add	r1, r4
 8100fa8:	eba1 010a 	sub.w	r1, r1, sl
 8100fac:	b2bf      	uxth	r7, r7
 8100fae:	fbb1 f0fe 	udiv	r0, r1, lr
 8100fb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8100fb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100fba:	fb00 f808 	mul.w	r8, r0, r8
 8100fbe:	45b8      	cmp	r8, r7
 8100fc0:	d907      	bls.n	8100fd2 <__udivmoddi4+0x24a>
 8100fc2:	19e7      	adds	r7, r4, r7
 8100fc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8100fc8:	d22e      	bcs.n	8101028 <__udivmoddi4+0x2a0>
 8100fca:	45b8      	cmp	r8, r7
 8100fcc:	d92c      	bls.n	8101028 <__udivmoddi4+0x2a0>
 8100fce:	3802      	subs	r0, #2
 8100fd0:	4427      	add	r7, r4
 8100fd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100fd6:	eba7 0708 	sub.w	r7, r7, r8
 8100fda:	fba0 8902 	umull	r8, r9, r0, r2
 8100fde:	454f      	cmp	r7, r9
 8100fe0:	46c6      	mov	lr, r8
 8100fe2:	4649      	mov	r1, r9
 8100fe4:	d31a      	bcc.n	810101c <__udivmoddi4+0x294>
 8100fe6:	d017      	beq.n	8101018 <__udivmoddi4+0x290>
 8100fe8:	b15d      	cbz	r5, 8101002 <__udivmoddi4+0x27a>
 8100fea:	ebb3 020e 	subs.w	r2, r3, lr
 8100fee:	eb67 0701 	sbc.w	r7, r7, r1
 8100ff2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100ff6:	40f2      	lsrs	r2, r6
 8100ff8:	ea4c 0202 	orr.w	r2, ip, r2
 8100ffc:	40f7      	lsrs	r7, r6
 8100ffe:	e9c5 2700 	strd	r2, r7, [r5]
 8101002:	2600      	movs	r6, #0
 8101004:	4631      	mov	r1, r6
 8101006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810100a:	462e      	mov	r6, r5
 810100c:	4628      	mov	r0, r5
 810100e:	e70b      	b.n	8100e28 <__udivmoddi4+0xa0>
 8101010:	4606      	mov	r6, r0
 8101012:	e6e9      	b.n	8100de8 <__udivmoddi4+0x60>
 8101014:	4618      	mov	r0, r3
 8101016:	e6fd      	b.n	8100e14 <__udivmoddi4+0x8c>
 8101018:	4543      	cmp	r3, r8
 810101a:	d2e5      	bcs.n	8100fe8 <__udivmoddi4+0x260>
 810101c:	ebb8 0e02 	subs.w	lr, r8, r2
 8101020:	eb69 0104 	sbc.w	r1, r9, r4
 8101024:	3801      	subs	r0, #1
 8101026:	e7df      	b.n	8100fe8 <__udivmoddi4+0x260>
 8101028:	4608      	mov	r0, r1
 810102a:	e7d2      	b.n	8100fd2 <__udivmoddi4+0x24a>
 810102c:	4660      	mov	r0, ip
 810102e:	e78d      	b.n	8100f4c <__udivmoddi4+0x1c4>
 8101030:	4681      	mov	r9, r0
 8101032:	e7b9      	b.n	8100fa8 <__udivmoddi4+0x220>
 8101034:	4666      	mov	r6, ip
 8101036:	e775      	b.n	8100f24 <__udivmoddi4+0x19c>
 8101038:	4630      	mov	r0, r6
 810103a:	e74a      	b.n	8100ed2 <__udivmoddi4+0x14a>
 810103c:	f1ac 0c02 	sub.w	ip, ip, #2
 8101040:	4439      	add	r1, r7
 8101042:	e713      	b.n	8100e6c <__udivmoddi4+0xe4>
 8101044:	3802      	subs	r0, #2
 8101046:	443c      	add	r4, r7
 8101048:	e724      	b.n	8100e94 <__udivmoddi4+0x10c>
 810104a:	bf00      	nop

0810104c <__aeabi_idiv0>:
 810104c:	4770      	bx	lr
 810104e:	bf00      	nop

08101050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101050:	b480      	push	{r7}
 8101052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101054:	4b0b      	ldr	r3, [pc, #44]	; (8101084 <SystemInit+0x34>)
 8101056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810105a:	4a0a      	ldr	r2, [pc, #40]	; (8101084 <SystemInit+0x34>)
 810105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101064:	4b07      	ldr	r3, [pc, #28]	; (8101084 <SystemInit+0x34>)
 8101066:	691b      	ldr	r3, [r3, #16]
 8101068:	4a06      	ldr	r2, [pc, #24]	; (8101084 <SystemInit+0x34>)
 810106a:	f043 0310 	orr.w	r3, r3, #16
 810106e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101070:	4b04      	ldr	r3, [pc, #16]	; (8101084 <SystemInit+0x34>)
 8101072:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101076:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101078:	bf00      	nop
 810107a:	46bd      	mov	sp, r7
 810107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101080:	4770      	bx	lr
 8101082:	bf00      	nop
 8101084:	e000ed00 	.word	0xe000ed00

08101088 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8101088:	b480      	push	{r7}
 810108a:	b083      	sub	sp, #12
 810108c:	af00      	add	r7, sp, #0
 810108e:	6078      	str	r0, [r7, #4]
 8101090:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8101092:	687b      	ldr	r3, [r7, #4]
 8101094:	2b00      	cmp	r3, #0
 8101096:	d00b      	beq.n	81010b0 <LAN8742_RegisterBusIO+0x28>
 8101098:	683b      	ldr	r3, [r7, #0]
 810109a:	68db      	ldr	r3, [r3, #12]
 810109c:	2b00      	cmp	r3, #0
 810109e:	d007      	beq.n	81010b0 <LAN8742_RegisterBusIO+0x28>
 81010a0:	683b      	ldr	r3, [r7, #0]
 81010a2:	689b      	ldr	r3, [r3, #8]
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	d003      	beq.n	81010b0 <LAN8742_RegisterBusIO+0x28>
 81010a8:	683b      	ldr	r3, [r7, #0]
 81010aa:	691b      	ldr	r3, [r3, #16]
 81010ac:	2b00      	cmp	r3, #0
 81010ae:	d102      	bne.n	81010b6 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 81010b0:	f04f 33ff 	mov.w	r3, #4294967295
 81010b4:	e014      	b.n	81010e0 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 81010b6:	683b      	ldr	r3, [r7, #0]
 81010b8:	681a      	ldr	r2, [r3, #0]
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 81010be:	683b      	ldr	r3, [r7, #0]
 81010c0:	685a      	ldr	r2, [r3, #4]
 81010c2:	687b      	ldr	r3, [r7, #4]
 81010c4:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 81010c6:	683b      	ldr	r3, [r7, #0]
 81010c8:	68da      	ldr	r2, [r3, #12]
 81010ca:	687b      	ldr	r3, [r7, #4]
 81010cc:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 81010ce:	683b      	ldr	r3, [r7, #0]
 81010d0:	689a      	ldr	r2, [r3, #8]
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 81010d6:	683b      	ldr	r3, [r7, #0]
 81010d8:	691a      	ldr	r2, [r3, #16]
 81010da:	687b      	ldr	r3, [r7, #4]
 81010dc:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 81010de:	2300      	movs	r3, #0
}
 81010e0:	4618      	mov	r0, r3
 81010e2:	370c      	adds	r7, #12
 81010e4:	46bd      	mov	sp, r7
 81010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ea:	4770      	bx	lr

081010ec <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 81010ec:	b580      	push	{r7, lr}
 81010ee:	b086      	sub	sp, #24
 81010f0:	af00      	add	r7, sp, #0
 81010f2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 81010f4:	2300      	movs	r3, #0
 81010f6:	60fb      	str	r3, [r7, #12]
 81010f8:	2300      	movs	r3, #0
 81010fa:	60bb      	str	r3, [r7, #8]
 81010fc:	2300      	movs	r3, #0
 81010fe:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8101100:	2300      	movs	r3, #0
 8101102:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	685b      	ldr	r3, [r3, #4]
 8101108:	2b00      	cmp	r3, #0
 810110a:	d17c      	bne.n	8101206 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	689b      	ldr	r3, [r3, #8]
 8101110:	2b00      	cmp	r3, #0
 8101112:	d002      	beq.n	810111a <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	689b      	ldr	r3, [r3, #8]
 8101118:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810111a:	687b      	ldr	r3, [r7, #4]
 810111c:	2220      	movs	r2, #32
 810111e:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8101120:	2300      	movs	r3, #0
 8101122:	617b      	str	r3, [r7, #20]
 8101124:	e01c      	b.n	8101160 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8101126:	687b      	ldr	r3, [r7, #4]
 8101128:	695b      	ldr	r3, [r3, #20]
 810112a:	f107 0208 	add.w	r2, r7, #8
 810112e:	2112      	movs	r1, #18
 8101130:	6978      	ldr	r0, [r7, #20]
 8101132:	4798      	blx	r3
 8101134:	4603      	mov	r3, r0
 8101136:	2b00      	cmp	r3, #0
 8101138:	da03      	bge.n	8101142 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 810113a:	f06f 0304 	mvn.w	r3, #4
 810113e:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8101140:	e00b      	b.n	810115a <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8101142:	68bb      	ldr	r3, [r7, #8]
 8101144:	f003 031f 	and.w	r3, r3, #31
 8101148:	697a      	ldr	r2, [r7, #20]
 810114a:	429a      	cmp	r2, r3
 810114c:	d105      	bne.n	810115a <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	697a      	ldr	r2, [r7, #20]
 8101152:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8101154:	2300      	movs	r3, #0
 8101156:	613b      	str	r3, [r7, #16]
         break;
 8101158:	e005      	b.n	8101166 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810115a:	697b      	ldr	r3, [r7, #20]
 810115c:	3301      	adds	r3, #1
 810115e:	617b      	str	r3, [r7, #20]
 8101160:	697b      	ldr	r3, [r7, #20]
 8101162:	2b1f      	cmp	r3, #31
 8101164:	d9df      	bls.n	8101126 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	681b      	ldr	r3, [r3, #0]
 810116a:	2b1f      	cmp	r3, #31
 810116c:	d902      	bls.n	8101174 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 810116e:	f06f 0302 	mvn.w	r3, #2
 8101172:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8101174:	693b      	ldr	r3, [r7, #16]
 8101176:	2b00      	cmp	r3, #0
 8101178:	d145      	bne.n	8101206 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 810117a:	687b      	ldr	r3, [r7, #4]
 810117c:	691b      	ldr	r3, [r3, #16]
 810117e:	687a      	ldr	r2, [r7, #4]
 8101180:	6810      	ldr	r0, [r2, #0]
 8101182:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8101186:	2100      	movs	r1, #0
 8101188:	4798      	blx	r3
 810118a:	4603      	mov	r3, r0
 810118c:	2b00      	cmp	r3, #0
 810118e:	db37      	blt.n	8101200 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	695b      	ldr	r3, [r3, #20]
 8101194:	687a      	ldr	r2, [r7, #4]
 8101196:	6810      	ldr	r0, [r2, #0]
 8101198:	f107 0208 	add.w	r2, r7, #8
 810119c:	2100      	movs	r1, #0
 810119e:	4798      	blx	r3
 81011a0:	4603      	mov	r3, r0
 81011a2:	2b00      	cmp	r3, #0
 81011a4:	db28      	blt.n	81011f8 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	699b      	ldr	r3, [r3, #24]
 81011aa:	4798      	blx	r3
 81011ac:	4603      	mov	r3, r0
 81011ae:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 81011b0:	e01c      	b.n	81011ec <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	699b      	ldr	r3, [r3, #24]
 81011b6:	4798      	blx	r3
 81011b8:	4603      	mov	r3, r0
 81011ba:	461a      	mov	r2, r3
 81011bc:	68fb      	ldr	r3, [r7, #12]
 81011be:	1ad3      	subs	r3, r2, r3
 81011c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81011c4:	d80e      	bhi.n	81011e4 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 81011c6:	687b      	ldr	r3, [r7, #4]
 81011c8:	695b      	ldr	r3, [r3, #20]
 81011ca:	687a      	ldr	r2, [r7, #4]
 81011cc:	6810      	ldr	r0, [r2, #0]
 81011ce:	f107 0208 	add.w	r2, r7, #8
 81011d2:	2100      	movs	r1, #0
 81011d4:	4798      	blx	r3
 81011d6:	4603      	mov	r3, r0
 81011d8:	2b00      	cmp	r3, #0
 81011da:	da07      	bge.n	81011ec <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 81011dc:	f06f 0304 	mvn.w	r3, #4
 81011e0:	613b      	str	r3, [r7, #16]
                 break;
 81011e2:	e010      	b.n	8101206 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 81011e4:	f06f 0301 	mvn.w	r3, #1
 81011e8:	613b      	str	r3, [r7, #16]
               break;
 81011ea:	e00c      	b.n	8101206 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 81011ec:	68bb      	ldr	r3, [r7, #8]
 81011ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81011f2:	2b00      	cmp	r3, #0
 81011f4:	d1dd      	bne.n	81011b2 <LAN8742_Init+0xc6>
 81011f6:	e006      	b.n	8101206 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 81011f8:	f06f 0304 	mvn.w	r3, #4
 81011fc:	613b      	str	r3, [r7, #16]
 81011fe:	e002      	b.n	8101206 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8101200:	f06f 0303 	mvn.w	r3, #3
 8101204:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8101206:	693b      	ldr	r3, [r7, #16]
 8101208:	2b00      	cmp	r3, #0
 810120a:	d112      	bne.n	8101232 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 810120c:	687b      	ldr	r3, [r7, #4]
 810120e:	699b      	ldr	r3, [r3, #24]
 8101210:	4798      	blx	r3
 8101212:	4603      	mov	r3, r0
 8101214:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8101216:	bf00      	nop
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	699b      	ldr	r3, [r3, #24]
 810121c:	4798      	blx	r3
 810121e:	4603      	mov	r3, r0
 8101220:	461a      	mov	r2, r3
 8101222:	68fb      	ldr	r3, [r7, #12]
 8101224:	1ad3      	subs	r3, r2, r3
 8101226:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 810122a:	d9f5      	bls.n	8101218 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	2201      	movs	r2, #1
 8101230:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8101232:	693b      	ldr	r3, [r7, #16]
 }
 8101234:	4618      	mov	r0, r3
 8101236:	3718      	adds	r7, #24
 8101238:	46bd      	mov	sp, r7
 810123a:	bd80      	pop	{r7, pc}

0810123c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b084      	sub	sp, #16
 8101240:	af00      	add	r7, sp, #0
 8101242:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8101244:	2300      	movs	r3, #0
 8101246:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	695b      	ldr	r3, [r3, #20]
 810124c:	687a      	ldr	r2, [r7, #4]
 810124e:	6810      	ldr	r0, [r2, #0]
 8101250:	f107 020c 	add.w	r2, r7, #12
 8101254:	2101      	movs	r1, #1
 8101256:	4798      	blx	r3
 8101258:	4603      	mov	r3, r0
 810125a:	2b00      	cmp	r3, #0
 810125c:	da02      	bge.n	8101264 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 810125e:	f06f 0304 	mvn.w	r3, #4
 8101262:	e06e      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	695b      	ldr	r3, [r3, #20]
 8101268:	687a      	ldr	r2, [r7, #4]
 810126a:	6810      	ldr	r0, [r2, #0]
 810126c:	f107 020c 	add.w	r2, r7, #12
 8101270:	2101      	movs	r1, #1
 8101272:	4798      	blx	r3
 8101274:	4603      	mov	r3, r0
 8101276:	2b00      	cmp	r3, #0
 8101278:	da02      	bge.n	8101280 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810127a:	f06f 0304 	mvn.w	r3, #4
 810127e:	e060      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8101280:	68fb      	ldr	r3, [r7, #12]
 8101282:	f003 0304 	and.w	r3, r3, #4
 8101286:	2b00      	cmp	r3, #0
 8101288:	d101      	bne.n	810128e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 810128a:	2301      	movs	r3, #1
 810128c:	e059      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 810128e:	687b      	ldr	r3, [r7, #4]
 8101290:	695b      	ldr	r3, [r3, #20]
 8101292:	687a      	ldr	r2, [r7, #4]
 8101294:	6810      	ldr	r0, [r2, #0]
 8101296:	f107 020c 	add.w	r2, r7, #12
 810129a:	2100      	movs	r1, #0
 810129c:	4798      	blx	r3
 810129e:	4603      	mov	r3, r0
 81012a0:	2b00      	cmp	r3, #0
 81012a2:	da02      	bge.n	81012aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 81012a4:	f06f 0304 	mvn.w	r3, #4
 81012a8:	e04b      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 81012aa:	68fb      	ldr	r3, [r7, #12]
 81012ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d11b      	bne.n	81012ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 81012b4:	68fb      	ldr	r3, [r7, #12]
 81012b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81012ba:	2b00      	cmp	r3, #0
 81012bc:	d006      	beq.n	81012cc <LAN8742_GetLinkState+0x90>
 81012be:	68fb      	ldr	r3, [r7, #12]
 81012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81012c4:	2b00      	cmp	r3, #0
 81012c6:	d001      	beq.n	81012cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 81012c8:	2302      	movs	r3, #2
 81012ca:	e03a      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 81012cc:	68fb      	ldr	r3, [r7, #12]
 81012ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81012d2:	2b00      	cmp	r3, #0
 81012d4:	d001      	beq.n	81012da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 81012d6:	2303      	movs	r3, #3
 81012d8:	e033      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 81012da:	68fb      	ldr	r3, [r7, #12]
 81012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81012e0:	2b00      	cmp	r3, #0
 81012e2:	d001      	beq.n	81012e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 81012e4:	2304      	movs	r3, #4
 81012e6:	e02c      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81012e8:	2305      	movs	r3, #5
 81012ea:	e02a      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	695b      	ldr	r3, [r3, #20]
 81012f0:	687a      	ldr	r2, [r7, #4]
 81012f2:	6810      	ldr	r0, [r2, #0]
 81012f4:	f107 020c 	add.w	r2, r7, #12
 81012f8:	211f      	movs	r1, #31
 81012fa:	4798      	blx	r3
 81012fc:	4603      	mov	r3, r0
 81012fe:	2b00      	cmp	r3, #0
 8101300:	da02      	bge.n	8101308 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8101302:	f06f 0304 	mvn.w	r3, #4
 8101306:	e01c      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8101308:	68fb      	ldr	r3, [r7, #12]
 810130a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810130e:	2b00      	cmp	r3, #0
 8101310:	d101      	bne.n	8101316 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8101312:	2306      	movs	r3, #6
 8101314:	e015      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8101316:	68fb      	ldr	r3, [r7, #12]
 8101318:	f003 031c 	and.w	r3, r3, #28
 810131c:	2b18      	cmp	r3, #24
 810131e:	d101      	bne.n	8101324 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8101320:	2302      	movs	r3, #2
 8101322:	e00e      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8101324:	68fb      	ldr	r3, [r7, #12]
 8101326:	f003 031c 	and.w	r3, r3, #28
 810132a:	2b08      	cmp	r3, #8
 810132c:	d101      	bne.n	8101332 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810132e:	2303      	movs	r3, #3
 8101330:	e007      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8101332:	68fb      	ldr	r3, [r7, #12]
 8101334:	f003 031c 	and.w	r3, r3, #28
 8101338:	2b14      	cmp	r3, #20
 810133a:	d101      	bne.n	8101340 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810133c:	2304      	movs	r3, #4
 810133e:	e000      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8101340:	2305      	movs	r3, #5
    }				
  }
}
 8101342:	4618      	mov	r0, r3
 8101344:	3710      	adds	r7, #16
 8101346:	46bd      	mov	sp, r7
 8101348:	bd80      	pop	{r7, pc}
	...

0810134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810134c:	b580      	push	{r7, lr}
 810134e:	b082      	sub	sp, #8
 8101350:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101352:	4b28      	ldr	r3, [pc, #160]	; (81013f4 <HAL_Init+0xa8>)
 8101354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101358:	4a26      	ldr	r2, [pc, #152]	; (81013f4 <HAL_Init+0xa8>)
 810135a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810135e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101362:	4b24      	ldr	r3, [pc, #144]	; (81013f4 <HAL_Init+0xa8>)
 8101364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810136c:	603b      	str	r3, [r7, #0]
 810136e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101370:	4b21      	ldr	r3, [pc, #132]	; (81013f8 <HAL_Init+0xac>)
 8101372:	681b      	ldr	r3, [r3, #0]
 8101374:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101378:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810137c:	4a1e      	ldr	r2, [pc, #120]	; (81013f8 <HAL_Init+0xac>)
 810137e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101382:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101384:	4b1c      	ldr	r3, [pc, #112]	; (81013f8 <HAL_Init+0xac>)
 8101386:	681b      	ldr	r3, [r3, #0]
 8101388:	4a1b      	ldr	r2, [pc, #108]	; (81013f8 <HAL_Init+0xac>)
 810138a:	f043 0301 	orr.w	r3, r3, #1
 810138e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101390:	2003      	movs	r0, #3
 8101392:	f000 f93e 	bl	8101612 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101396:	f002 fc67 	bl	8103c68 <HAL_RCC_GetSysClockFreq>
 810139a:	4602      	mov	r2, r0
 810139c:	4b15      	ldr	r3, [pc, #84]	; (81013f4 <HAL_Init+0xa8>)
 810139e:	699b      	ldr	r3, [r3, #24]
 81013a0:	0a1b      	lsrs	r3, r3, #8
 81013a2:	f003 030f 	and.w	r3, r3, #15
 81013a6:	4915      	ldr	r1, [pc, #84]	; (81013fc <HAL_Init+0xb0>)
 81013a8:	5ccb      	ldrb	r3, [r1, r3]
 81013aa:	f003 031f 	and.w	r3, r3, #31
 81013ae:	fa22 f303 	lsr.w	r3, r2, r3
 81013b2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81013b4:	4b0f      	ldr	r3, [pc, #60]	; (81013f4 <HAL_Init+0xa8>)
 81013b6:	699b      	ldr	r3, [r3, #24]
 81013b8:	f003 030f 	and.w	r3, r3, #15
 81013bc:	4a0f      	ldr	r2, [pc, #60]	; (81013fc <HAL_Init+0xb0>)
 81013be:	5cd3      	ldrb	r3, [r2, r3]
 81013c0:	f003 031f 	and.w	r3, r3, #31
 81013c4:	687a      	ldr	r2, [r7, #4]
 81013c6:	fa22 f303 	lsr.w	r3, r2, r3
 81013ca:	4a0d      	ldr	r2, [pc, #52]	; (8101400 <HAL_Init+0xb4>)
 81013cc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81013ce:	4b0c      	ldr	r3, [pc, #48]	; (8101400 <HAL_Init+0xb4>)
 81013d0:	681b      	ldr	r3, [r3, #0]
 81013d2:	4a0c      	ldr	r2, [pc, #48]	; (8101404 <HAL_Init+0xb8>)
 81013d4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81013d6:	200f      	movs	r0, #15
 81013d8:	f010 fd46 	bl	8111e68 <HAL_InitTick>
 81013dc:	4603      	mov	r3, r0
 81013de:	2b00      	cmp	r3, #0
 81013e0:	d001      	beq.n	81013e6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81013e2:	2301      	movs	r3, #1
 81013e4:	e002      	b.n	81013ec <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81013e6:	f010 fb8f 	bl	8111b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81013ea:	2300      	movs	r3, #0
}
 81013ec:	4618      	mov	r0, r3
 81013ee:	3708      	adds	r7, #8
 81013f0:	46bd      	mov	sp, r7
 81013f2:	bd80      	pop	{r7, pc}
 81013f4:	58024400 	.word	0x58024400
 81013f8:	40024400 	.word	0x40024400
 81013fc:	08116a54 	.word	0x08116a54
 8101400:	10000004 	.word	0x10000004
 8101404:	10000000 	.word	0x10000000

08101408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101408:	b480      	push	{r7}
 810140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810140c:	4b06      	ldr	r3, [pc, #24]	; (8101428 <HAL_IncTick+0x20>)
 810140e:	781b      	ldrb	r3, [r3, #0]
 8101410:	461a      	mov	r2, r3
 8101412:	4b06      	ldr	r3, [pc, #24]	; (810142c <HAL_IncTick+0x24>)
 8101414:	681b      	ldr	r3, [r3, #0]
 8101416:	4413      	add	r3, r2
 8101418:	4a04      	ldr	r2, [pc, #16]	; (810142c <HAL_IncTick+0x24>)
 810141a:	6013      	str	r3, [r2, #0]
}
 810141c:	bf00      	nop
 810141e:	46bd      	mov	sp, r7
 8101420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101424:	4770      	bx	lr
 8101426:	bf00      	nop
 8101428:	1000000c 	.word	0x1000000c
 810142c:	10005c14 	.word	0x10005c14

08101430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101430:	b480      	push	{r7}
 8101432:	af00      	add	r7, sp, #0
  return uwTick;
 8101434:	4b03      	ldr	r3, [pc, #12]	; (8101444 <HAL_GetTick+0x14>)
 8101436:	681b      	ldr	r3, [r3, #0]
}
 8101438:	4618      	mov	r0, r3
 810143a:	46bd      	mov	sp, r7
 810143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101440:	4770      	bx	lr
 8101442:	bf00      	nop
 8101444:	10005c14 	.word	0x10005c14

08101448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101448:	b580      	push	{r7, lr}
 810144a:	b084      	sub	sp, #16
 810144c:	af00      	add	r7, sp, #0
 810144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101450:	f7ff ffee 	bl	8101430 <HAL_GetTick>
 8101454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101456:	687b      	ldr	r3, [r7, #4]
 8101458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810145a:	68fb      	ldr	r3, [r7, #12]
 810145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101460:	d005      	beq.n	810146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101462:	4b0a      	ldr	r3, [pc, #40]	; (810148c <HAL_Delay+0x44>)
 8101464:	781b      	ldrb	r3, [r3, #0]
 8101466:	461a      	mov	r2, r3
 8101468:	68fb      	ldr	r3, [r7, #12]
 810146a:	4413      	add	r3, r2
 810146c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810146e:	bf00      	nop
 8101470:	f7ff ffde 	bl	8101430 <HAL_GetTick>
 8101474:	4602      	mov	r2, r0
 8101476:	68bb      	ldr	r3, [r7, #8]
 8101478:	1ad3      	subs	r3, r2, r3
 810147a:	68fa      	ldr	r2, [r7, #12]
 810147c:	429a      	cmp	r2, r3
 810147e:	d8f7      	bhi.n	8101470 <HAL_Delay+0x28>
  {
  }
}
 8101480:	bf00      	nop
 8101482:	bf00      	nop
 8101484:	3710      	adds	r7, #16
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}
 810148a:	bf00      	nop
 810148c:	1000000c 	.word	0x1000000c

08101490 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8101490:	b480      	push	{r7}
 8101492:	b083      	sub	sp, #12
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8101498:	4b06      	ldr	r3, [pc, #24]	; (81014b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810149a:	685b      	ldr	r3, [r3, #4]
 810149c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81014a0:	4904      	ldr	r1, [pc, #16]	; (81014b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	4313      	orrs	r3, r2
 81014a6:	604b      	str	r3, [r1, #4]
}
 81014a8:	bf00      	nop
 81014aa:	370c      	adds	r7, #12
 81014ac:	46bd      	mov	sp, r7
 81014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014b2:	4770      	bx	lr
 81014b4:	58000400 	.word	0x58000400

081014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81014b8:	b480      	push	{r7}
 81014ba:	b085      	sub	sp, #20
 81014bc:	af00      	add	r7, sp, #0
 81014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	f003 0307 	and.w	r3, r3, #7
 81014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81014c8:	4b0c      	ldr	r3, [pc, #48]	; (81014fc <__NVIC_SetPriorityGrouping+0x44>)
 81014ca:	68db      	ldr	r3, [r3, #12]
 81014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81014ce:	68ba      	ldr	r2, [r7, #8]
 81014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81014d4:	4013      	ands	r3, r2
 81014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81014d8:	68fb      	ldr	r3, [r7, #12]
 81014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81014dc:	68bb      	ldr	r3, [r7, #8]
 81014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81014ea:	4a04      	ldr	r2, [pc, #16]	; (81014fc <__NVIC_SetPriorityGrouping+0x44>)
 81014ec:	68bb      	ldr	r3, [r7, #8]
 81014ee:	60d3      	str	r3, [r2, #12]
}
 81014f0:	bf00      	nop
 81014f2:	3714      	adds	r7, #20
 81014f4:	46bd      	mov	sp, r7
 81014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014fa:	4770      	bx	lr
 81014fc:	e000ed00 	.word	0xe000ed00

08101500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101500:	b480      	push	{r7}
 8101502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101504:	4b04      	ldr	r3, [pc, #16]	; (8101518 <__NVIC_GetPriorityGrouping+0x18>)
 8101506:	68db      	ldr	r3, [r3, #12]
 8101508:	0a1b      	lsrs	r3, r3, #8
 810150a:	f003 0307 	and.w	r3, r3, #7
}
 810150e:	4618      	mov	r0, r3
 8101510:	46bd      	mov	sp, r7
 8101512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101516:	4770      	bx	lr
 8101518:	e000ed00 	.word	0xe000ed00

0810151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810151c:	b480      	push	{r7}
 810151e:	b083      	sub	sp, #12
 8101520:	af00      	add	r7, sp, #0
 8101522:	4603      	mov	r3, r0
 8101524:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810152a:	2b00      	cmp	r3, #0
 810152c:	db0b      	blt.n	8101546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810152e:	88fb      	ldrh	r3, [r7, #6]
 8101530:	f003 021f 	and.w	r2, r3, #31
 8101534:	4907      	ldr	r1, [pc, #28]	; (8101554 <__NVIC_EnableIRQ+0x38>)
 8101536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810153a:	095b      	lsrs	r3, r3, #5
 810153c:	2001      	movs	r0, #1
 810153e:	fa00 f202 	lsl.w	r2, r0, r2
 8101542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101546:	bf00      	nop
 8101548:	370c      	adds	r7, #12
 810154a:	46bd      	mov	sp, r7
 810154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101550:	4770      	bx	lr
 8101552:	bf00      	nop
 8101554:	e000e100 	.word	0xe000e100

08101558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101558:	b480      	push	{r7}
 810155a:	b083      	sub	sp, #12
 810155c:	af00      	add	r7, sp, #0
 810155e:	4603      	mov	r3, r0
 8101560:	6039      	str	r1, [r7, #0]
 8101562:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101568:	2b00      	cmp	r3, #0
 810156a:	db0a      	blt.n	8101582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810156c:	683b      	ldr	r3, [r7, #0]
 810156e:	b2da      	uxtb	r2, r3
 8101570:	490c      	ldr	r1, [pc, #48]	; (81015a4 <__NVIC_SetPriority+0x4c>)
 8101572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101576:	0112      	lsls	r2, r2, #4
 8101578:	b2d2      	uxtb	r2, r2
 810157a:	440b      	add	r3, r1
 810157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101580:	e00a      	b.n	8101598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101582:	683b      	ldr	r3, [r7, #0]
 8101584:	b2da      	uxtb	r2, r3
 8101586:	4908      	ldr	r1, [pc, #32]	; (81015a8 <__NVIC_SetPriority+0x50>)
 8101588:	88fb      	ldrh	r3, [r7, #6]
 810158a:	f003 030f 	and.w	r3, r3, #15
 810158e:	3b04      	subs	r3, #4
 8101590:	0112      	lsls	r2, r2, #4
 8101592:	b2d2      	uxtb	r2, r2
 8101594:	440b      	add	r3, r1
 8101596:	761a      	strb	r2, [r3, #24]
}
 8101598:	bf00      	nop
 810159a:	370c      	adds	r7, #12
 810159c:	46bd      	mov	sp, r7
 810159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015a2:	4770      	bx	lr
 81015a4:	e000e100 	.word	0xe000e100
 81015a8:	e000ed00 	.word	0xe000ed00

081015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81015ac:	b480      	push	{r7}
 81015ae:	b089      	sub	sp, #36	; 0x24
 81015b0:	af00      	add	r7, sp, #0
 81015b2:	60f8      	str	r0, [r7, #12]
 81015b4:	60b9      	str	r1, [r7, #8]
 81015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81015b8:	68fb      	ldr	r3, [r7, #12]
 81015ba:	f003 0307 	and.w	r3, r3, #7
 81015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81015c0:	69fb      	ldr	r3, [r7, #28]
 81015c2:	f1c3 0307 	rsb	r3, r3, #7
 81015c6:	2b04      	cmp	r3, #4
 81015c8:	bf28      	it	cs
 81015ca:	2304      	movcs	r3, #4
 81015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81015ce:	69fb      	ldr	r3, [r7, #28]
 81015d0:	3304      	adds	r3, #4
 81015d2:	2b06      	cmp	r3, #6
 81015d4:	d902      	bls.n	81015dc <NVIC_EncodePriority+0x30>
 81015d6:	69fb      	ldr	r3, [r7, #28]
 81015d8:	3b03      	subs	r3, #3
 81015da:	e000      	b.n	81015de <NVIC_EncodePriority+0x32>
 81015dc:	2300      	movs	r3, #0
 81015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81015e0:	f04f 32ff 	mov.w	r2, #4294967295
 81015e4:	69bb      	ldr	r3, [r7, #24]
 81015e6:	fa02 f303 	lsl.w	r3, r2, r3
 81015ea:	43da      	mvns	r2, r3
 81015ec:	68bb      	ldr	r3, [r7, #8]
 81015ee:	401a      	ands	r2, r3
 81015f0:	697b      	ldr	r3, [r7, #20]
 81015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81015f4:	f04f 31ff 	mov.w	r1, #4294967295
 81015f8:	697b      	ldr	r3, [r7, #20]
 81015fa:	fa01 f303 	lsl.w	r3, r1, r3
 81015fe:	43d9      	mvns	r1, r3
 8101600:	687b      	ldr	r3, [r7, #4]
 8101602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101604:	4313      	orrs	r3, r2
         );
}
 8101606:	4618      	mov	r0, r3
 8101608:	3724      	adds	r7, #36	; 0x24
 810160a:	46bd      	mov	sp, r7
 810160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101610:	4770      	bx	lr

08101612 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101612:	b580      	push	{r7, lr}
 8101614:	b082      	sub	sp, #8
 8101616:	af00      	add	r7, sp, #0
 8101618:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810161a:	6878      	ldr	r0, [r7, #4]
 810161c:	f7ff ff4c 	bl	81014b8 <__NVIC_SetPriorityGrouping>
}
 8101620:	bf00      	nop
 8101622:	3708      	adds	r7, #8
 8101624:	46bd      	mov	sp, r7
 8101626:	bd80      	pop	{r7, pc}

08101628 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101628:	b580      	push	{r7, lr}
 810162a:	b086      	sub	sp, #24
 810162c:	af00      	add	r7, sp, #0
 810162e:	4603      	mov	r3, r0
 8101630:	60b9      	str	r1, [r7, #8]
 8101632:	607a      	str	r2, [r7, #4]
 8101634:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101636:	f7ff ff63 	bl	8101500 <__NVIC_GetPriorityGrouping>
 810163a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810163c:	687a      	ldr	r2, [r7, #4]
 810163e:	68b9      	ldr	r1, [r7, #8]
 8101640:	6978      	ldr	r0, [r7, #20]
 8101642:	f7ff ffb3 	bl	81015ac <NVIC_EncodePriority>
 8101646:	4602      	mov	r2, r0
 8101648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810164c:	4611      	mov	r1, r2
 810164e:	4618      	mov	r0, r3
 8101650:	f7ff ff82 	bl	8101558 <__NVIC_SetPriority>
}
 8101654:	bf00      	nop
 8101656:	3718      	adds	r7, #24
 8101658:	46bd      	mov	sp, r7
 810165a:	bd80      	pop	{r7, pc}

0810165c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810165c:	b580      	push	{r7, lr}
 810165e:	b082      	sub	sp, #8
 8101660:	af00      	add	r7, sp, #0
 8101662:	4603      	mov	r3, r0
 8101664:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810166a:	4618      	mov	r0, r3
 810166c:	f7ff ff56 	bl	810151c <__NVIC_EnableIRQ>
}
 8101670:	bf00      	nop
 8101672:	3708      	adds	r7, #8
 8101674:	46bd      	mov	sp, r7
 8101676:	bd80      	pop	{r7, pc}

08101678 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101678:	b480      	push	{r7}
 810167a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810167c:	4b07      	ldr	r3, [pc, #28]	; (810169c <HAL_GetCurrentCPUID+0x24>)
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	091b      	lsrs	r3, r3, #4
 8101682:	f003 030f 	and.w	r3, r3, #15
 8101686:	2b07      	cmp	r3, #7
 8101688:	d101      	bne.n	810168e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810168a:	2303      	movs	r3, #3
 810168c:	e000      	b.n	8101690 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810168e:	2301      	movs	r3, #1
  }
}
 8101690:	4618      	mov	r0, r3
 8101692:	46bd      	mov	sp, r7
 8101694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101698:	4770      	bx	lr
 810169a:	bf00      	nop
 810169c:	e000ed00 	.word	0xe000ed00

081016a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	b084      	sub	sp, #16
 81016a4:	af00      	add	r7, sp, #0
 81016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	d101      	bne.n	81016b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 81016ae:	2301      	movs	r3, #1
 81016b0:	e0c8      	b.n	8101844 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81016b6:	2b00      	cmp	r3, #0
 81016b8:	d102      	bne.n	81016c0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 81016ba:	6878      	ldr	r0, [r7, #4]
 81016bc:	f00e fcf2 	bl	81100a4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	2223      	movs	r2, #35	; 0x23
 81016c4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81016c6:	4b61      	ldr	r3, [pc, #388]	; (810184c <HAL_ETH_Init+0x1ac>)
 81016c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81016cc:	4a5f      	ldr	r2, [pc, #380]	; (810184c <HAL_ETH_Init+0x1ac>)
 81016ce:	f043 0302 	orr.w	r3, r3, #2
 81016d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81016d6:	4b5d      	ldr	r3, [pc, #372]	; (810184c <HAL_ETH_Init+0x1ac>)
 81016d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81016dc:	f003 0302 	and.w	r3, r3, #2
 81016e0:	60bb      	str	r3, [r7, #8]
 81016e2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 81016e4:	687b      	ldr	r3, [r7, #4]
 81016e6:	7a1b      	ldrb	r3, [r3, #8]
 81016e8:	2b00      	cmp	r3, #0
 81016ea:	d103      	bne.n	81016f4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 81016ec:	2000      	movs	r0, #0
 81016ee:	f7ff fecf 	bl	8101490 <HAL_SYSCFG_ETHInterfaceSelect>
 81016f2:	e003      	b.n	81016fc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 81016f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 81016f8:	f7ff feca 	bl	8101490 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	681b      	ldr	r3, [r3, #0]
 8101700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101704:	681a      	ldr	r2, [r3, #0]
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	681b      	ldr	r3, [r3, #0]
 810170a:	f042 0201 	orr.w	r2, r2, #1
 810170e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101714:	f7ff fe8c 	bl	8101430 <HAL_GetTick>
 8101718:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810171a:	e00f      	b.n	810173c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 810171c:	f7ff fe88 	bl	8101430 <HAL_GetTick>
 8101720:	4602      	mov	r2, r0
 8101722:	68fb      	ldr	r3, [r7, #12]
 8101724:	1ad3      	subs	r3, r2, r3
 8101726:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 810172a:	d907      	bls.n	810173c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 810172c:	687b      	ldr	r3, [r7, #4]
 810172e:	2204      	movs	r2, #4
 8101730:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	22e0      	movs	r2, #224	; 0xe0
 8101736:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8101738:	2301      	movs	r3, #1
 810173a:	e083      	b.n	8101844 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101744:	681b      	ldr	r3, [r3, #0]
 8101746:	f003 0301 	and.w	r3, r3, #1
 810174a:	2b00      	cmp	r3, #0
 810174c:	d1e6      	bne.n	810171c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 810174e:	6878      	ldr	r0, [r7, #4]
 8101750:	f001 faec 	bl	8102d2c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8101754:	f002 fc02 	bl	8103f5c <HAL_RCC_GetHCLKFreq>
 8101758:	4603      	mov	r3, r0
 810175a:	4a3d      	ldr	r2, [pc, #244]	; (8101850 <HAL_ETH_Init+0x1b0>)
 810175c:	fba2 2303 	umull	r2, r3, r2, r3
 8101760:	0c9a      	lsrs	r2, r3, #18
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	681b      	ldr	r3, [r3, #0]
 8101766:	3a01      	subs	r2, #1
 8101768:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 810176c:	6878      	ldr	r0, [r7, #4]
 810176e:	f001 fa3f 	bl	8102bf0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8101772:	687b      	ldr	r3, [r7, #4]
 8101774:	681b      	ldr	r3, [r3, #0]
 8101776:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810177a:	681b      	ldr	r3, [r3, #0]
 810177c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8101780:	687b      	ldr	r3, [r7, #4]
 8101782:	681b      	ldr	r3, [r3, #0]
 8101784:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8101788:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810178c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810178e:	687b      	ldr	r3, [r7, #4]
 8101790:	695b      	ldr	r3, [r3, #20]
 8101792:	f003 0303 	and.w	r3, r3, #3
 8101796:	2b00      	cmp	r3, #0
 8101798:	d007      	beq.n	81017aa <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810179a:	687b      	ldr	r3, [r7, #4]
 810179c:	2201      	movs	r2, #1
 810179e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 81017a0:	687b      	ldr	r3, [r7, #4]
 81017a2:	22e0      	movs	r2, #224	; 0xe0
 81017a4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 81017a6:	2301      	movs	r3, #1
 81017a8:	e04c      	b.n	8101844 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 81017aa:	687b      	ldr	r3, [r7, #4]
 81017ac:	681b      	ldr	r3, [r3, #0]
 81017ae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81017b2:	3308      	adds	r3, #8
 81017b4:	681b      	ldr	r3, [r3, #0]
 81017b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 81017ba:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 81017be:	687a      	ldr	r2, [r7, #4]
 81017c0:	6952      	ldr	r2, [r2, #20]
 81017c2:	0052      	lsls	r2, r2, #1
 81017c4:	6879      	ldr	r1, [r7, #4]
 81017c6:	6809      	ldr	r1, [r1, #0]
 81017c8:	431a      	orrs	r2, r3
 81017ca:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81017ce:	3308      	adds	r3, #8
 81017d0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 81017d2:	6878      	ldr	r0, [r7, #4]
 81017d4:	f001 fb02 	bl	8102ddc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 81017d8:	6878      	ldr	r0, [r7, #4]
 81017da:	f001 fb46 	bl	8102e6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 81017de:	687b      	ldr	r3, [r7, #4]
 81017e0:	685b      	ldr	r3, [r3, #4]
 81017e2:	3305      	adds	r3, #5
 81017e4:	781b      	ldrb	r3, [r3, #0]
 81017e6:	021a      	lsls	r2, r3, #8
 81017e8:	687b      	ldr	r3, [r7, #4]
 81017ea:	685b      	ldr	r3, [r3, #4]
 81017ec:	3304      	adds	r3, #4
 81017ee:	781b      	ldrb	r3, [r3, #0]
 81017f0:	4619      	mov	r1, r3
 81017f2:	687b      	ldr	r3, [r7, #4]
 81017f4:	681b      	ldr	r3, [r3, #0]
 81017f6:	430a      	orrs	r2, r1
 81017f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81017fc:	687b      	ldr	r3, [r7, #4]
 81017fe:	685b      	ldr	r3, [r3, #4]
 8101800:	3303      	adds	r3, #3
 8101802:	781b      	ldrb	r3, [r3, #0]
 8101804:	061a      	lsls	r2, r3, #24
 8101806:	687b      	ldr	r3, [r7, #4]
 8101808:	685b      	ldr	r3, [r3, #4]
 810180a:	3302      	adds	r3, #2
 810180c:	781b      	ldrb	r3, [r3, #0]
 810180e:	041b      	lsls	r3, r3, #16
 8101810:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	685b      	ldr	r3, [r3, #4]
 8101816:	3301      	adds	r3, #1
 8101818:	781b      	ldrb	r3, [r3, #0]
 810181a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810181c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	685b      	ldr	r3, [r3, #4]
 8101822:	781b      	ldrb	r3, [r3, #0]
 8101824:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101826:	687b      	ldr	r3, [r7, #4]
 8101828:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810182a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810182c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	2200      	movs	r2, #0
 8101834:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8101836:	687b      	ldr	r3, [r7, #4]
 8101838:	2210      	movs	r2, #16
 810183a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	2210      	movs	r2, #16
 8101840:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8101842:	2300      	movs	r3, #0
}
 8101844:	4618      	mov	r0, r3
 8101846:	3710      	adds	r7, #16
 8101848:	46bd      	mov	sp, r7
 810184a:	bd80      	pop	{r7, pc}
 810184c:	58024400 	.word	0x58024400
 8101850:	431bde83 	.word	0x431bde83

08101854 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8101854:	b480      	push	{r7}
 8101856:	b087      	sub	sp, #28
 8101858:	af00      	add	r7, sp, #0
 810185a:	60f8      	str	r0, [r7, #12]
 810185c:	60b9      	str	r1, [r7, #8]
 810185e:	607a      	str	r2, [r7, #4]
 8101860:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8101862:	68fa      	ldr	r2, [r7, #12]
 8101864:	68bb      	ldr	r3, [r7, #8]
 8101866:	3310      	adds	r3, #16
 8101868:	009b      	lsls	r3, r3, #2
 810186a:	4413      	add	r3, r2
 810186c:	685b      	ldr	r3, [r3, #4]
 810186e:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8101870:	687b      	ldr	r3, [r7, #4]
 8101872:	2b00      	cmp	r3, #0
 8101874:	d002      	beq.n	810187c <HAL_ETH_DescAssignMemory+0x28>
 8101876:	68bb      	ldr	r3, [r7, #8]
 8101878:	2b03      	cmp	r3, #3
 810187a:	d904      	bls.n	8101886 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810187c:	68fb      	ldr	r3, [r7, #12]
 810187e:	2201      	movs	r2, #1
 8101880:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8101882:	2301      	movs	r3, #1
 8101884:	e021      	b.n	81018ca <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8101886:	687a      	ldr	r2, [r7, #4]
 8101888:	697b      	ldr	r3, [r7, #20]
 810188a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 810188c:	687a      	ldr	r2, [r7, #4]
 810188e:	697b      	ldr	r3, [r7, #20]
 8101890:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8101892:	697b      	ldr	r3, [r7, #20]
 8101894:	68db      	ldr	r3, [r3, #12]
 8101896:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 810189a:	697b      	ldr	r3, [r7, #20]
 810189c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 810189e:	683b      	ldr	r3, [r7, #0]
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	d00b      	beq.n	81018bc <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 81018a4:	683a      	ldr	r2, [r7, #0]
 81018a6:	697b      	ldr	r3, [r7, #20]
 81018a8:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 81018aa:	683a      	ldr	r2, [r7, #0]
 81018ac:	697b      	ldr	r3, [r7, #20]
 81018ae:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 81018b0:	697b      	ldr	r3, [r7, #20]
 81018b2:	68db      	ldr	r3, [r3, #12]
 81018b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 81018b8:	697b      	ldr	r3, [r7, #20]
 81018ba:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 81018bc:	697b      	ldr	r3, [r7, #20]
 81018be:	68db      	ldr	r3, [r3, #12]
 81018c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81018c4:	697b      	ldr	r3, [r7, #20]
 81018c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 81018c8:	2300      	movs	r3, #0
}
 81018ca:	4618      	mov	r0, r3
 81018cc:	371c      	adds	r7, #28
 81018ce:	46bd      	mov	sp, r7
 81018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d4:	4770      	bx	lr

081018d6 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 81018d6:	b480      	push	{r7}
 81018d8:	b085      	sub	sp, #20
 81018da:	af00      	add	r7, sp, #0
 81018dc:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81018e2:	2b10      	cmp	r3, #16
 81018e4:	d175      	bne.n	81019d2 <HAL_ETH_Start_IT+0xfc>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	2223      	movs	r2, #35	; 0x23
 81018ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81018ec:	2300      	movs	r3, #0
 81018ee:	60fb      	str	r3, [r7, #12]
 81018f0:	e00f      	b.n	8101912 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 81018f2:	687a      	ldr	r2, [r7, #4]
 81018f4:	68fb      	ldr	r3, [r7, #12]
 81018f6:	3310      	adds	r3, #16
 81018f8:	009b      	lsls	r3, r3, #2
 81018fa:	4413      	add	r3, r2
 81018fc:	685b      	ldr	r3, [r3, #4]
 81018fe:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8101900:	68bb      	ldr	r3, [r7, #8]
 8101902:	68db      	ldr	r3, [r3, #12]
 8101904:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8101908:	68bb      	ldr	r3, [r7, #8]
 810190a:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810190c:	68fb      	ldr	r3, [r7, #12]
 810190e:	3301      	adds	r3, #1
 8101910:	60fb      	str	r3, [r7, #12]
 8101912:	68fb      	ldr	r3, [r7, #12]
 8101914:	2b03      	cmp	r3, #3
 8101916:	d9ec      	bls.n	81018f2 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8101918:	687b      	ldr	r3, [r7, #4]
 810191a:	2201      	movs	r2, #1
 810191c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	681b      	ldr	r3, [r3, #0]
 8101922:	681a      	ldr	r2, [r3, #0]
 8101924:	687b      	ldr	r3, [r7, #4]
 8101926:	681b      	ldr	r3, [r3, #0]
 8101928:	f042 0202 	orr.w	r2, r2, #2
 810192c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	681b      	ldr	r3, [r3, #0]
 8101932:	681a      	ldr	r2, [r3, #0]
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	681b      	ldr	r3, [r3, #0]
 8101938:	f042 0201 	orr.w	r2, r2, #1
 810193c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810193e:	687b      	ldr	r3, [r7, #4]
 8101940:	681b      	ldr	r3, [r3, #0]
 8101942:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8101946:	687b      	ldr	r3, [r7, #4]
 8101948:	681b      	ldr	r3, [r3, #0]
 810194a:	f042 0201 	orr.w	r2, r2, #1
 810194e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	681b      	ldr	r3, [r3, #0]
 8101956:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810195a:	3304      	adds	r3, #4
 810195c:	681a      	ldr	r2, [r3, #0]
 810195e:	687b      	ldr	r3, [r7, #4]
 8101960:	681b      	ldr	r3, [r3, #0]
 8101962:	f042 0201 	orr.w	r2, r2, #1
 8101966:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810196a:	3304      	adds	r3, #4
 810196c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	681b      	ldr	r3, [r3, #0]
 8101972:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101976:	3308      	adds	r3, #8
 8101978:	681a      	ldr	r2, [r3, #0]
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	681b      	ldr	r3, [r3, #0]
 810197e:	f042 0201 	orr.w	r2, r2, #1
 8101982:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101986:	3308      	adds	r3, #8
 8101988:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8101992:	681a      	ldr	r2, [r3, #0]
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 810199c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 81019a0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	681b      	ldr	r3, [r3, #0]
 81019a6:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81019aa:	3314      	adds	r3, #20
 81019ac:	681a      	ldr	r2, [r3, #0]
 81019ae:	687b      	ldr	r3, [r7, #4]
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	f442 4250 	orr.w	r2, r2, #53248	; 0xd000
 81019b6:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 81019ba:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81019be:	3314      	adds	r3, #20
 81019c0:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	2210      	movs	r2, #16
 81019c6:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	2222      	movs	r2, #34	; 0x22
 81019cc:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 81019ce:	2300      	movs	r3, #0
 81019d0:	e000      	b.n	81019d4 <HAL_ETH_Start_IT+0xfe>
  }
  else
  {
    return HAL_ERROR;
 81019d2:	2301      	movs	r3, #1
  }
}
 81019d4:	4618      	mov	r0, r3
 81019d6:	3714      	adds	r7, #20
 81019d8:	46bd      	mov	sp, r7
 81019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019de:	4770      	bx	lr

081019e0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 81019e0:	b480      	push	{r7}
 81019e2:	b085      	sub	sp, #20
 81019e4:	af00      	add	r7, sp, #0
 81019e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81019ec:	2b00      	cmp	r3, #0
 81019ee:	d069      	beq.n	8101ac4 <HAL_ETH_Stop_IT+0xe4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 81019f0:	687b      	ldr	r3, [r7, #4]
 81019f2:	2223      	movs	r2, #35	; 0x23
 81019f4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	681b      	ldr	r3, [r3, #0]
 81019fa:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81019fe:	3314      	adds	r3, #20
 8101a00:	681a      	ldr	r2, [r3, #0]
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	681b      	ldr	r3, [r3, #0]
 8101a06:	f422 4250 	bic.w	r2, r2, #53248	; 0xd000
 8101a0a:	f022 0241 	bic.w	r2, r2, #65	; 0x41
 8101a0e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8101a12:	3314      	adds	r3, #20
 8101a14:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8101a16:	687b      	ldr	r3, [r7, #4]
 8101a18:	681b      	ldr	r3, [r3, #0]
 8101a1a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101a1e:	3304      	adds	r3, #4
 8101a20:	681a      	ldr	r2, [r3, #0]
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	681b      	ldr	r3, [r3, #0]
 8101a26:	f022 0201 	bic.w	r2, r2, #1
 8101a2a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101a2e:	3304      	adds	r3, #4
 8101a30:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101a3a:	3308      	adds	r3, #8
 8101a3c:	681a      	ldr	r2, [r3, #0]
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	f022 0201 	bic.w	r2, r2, #1
 8101a46:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101a4a:	3308      	adds	r3, #8
 8101a4c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	681b      	ldr	r3, [r3, #0]
 8101a52:	681a      	ldr	r2, [r3, #0]
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	f022 0201 	bic.w	r2, r2, #1
 8101a5c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	f042 0201 	orr.w	r2, r2, #1
 8101a6e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	681b      	ldr	r3, [r3, #0]
 8101a76:	681a      	ldr	r2, [r3, #0]
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	681b      	ldr	r3, [r3, #0]
 8101a7c:	f022 0202 	bic.w	r2, r2, #2
 8101a80:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8101a82:	2300      	movs	r3, #0
 8101a84:	60fb      	str	r3, [r7, #12]
 8101a86:	e00f      	b.n	8101aa8 <HAL_ETH_Stop_IT+0xc8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8101a88:	687a      	ldr	r2, [r7, #4]
 8101a8a:	68fb      	ldr	r3, [r7, #12]
 8101a8c:	3310      	adds	r3, #16
 8101a8e:	009b      	lsls	r3, r3, #2
 8101a90:	4413      	add	r3, r2
 8101a92:	685b      	ldr	r3, [r3, #4]
 8101a94:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8101a96:	68bb      	ldr	r3, [r7, #8]
 8101a98:	68db      	ldr	r3, [r3, #12]
 8101a9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8101a9e:	68bb      	ldr	r3, [r7, #8]
 8101aa0:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8101aa2:	68fb      	ldr	r3, [r7, #12]
 8101aa4:	3301      	adds	r3, #1
 8101aa6:	60fb      	str	r3, [r7, #12]
 8101aa8:	68fb      	ldr	r3, [r7, #12]
 8101aaa:	2b03      	cmp	r3, #3
 8101aac:	d9ec      	bls.n	8101a88 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8101aae:	687b      	ldr	r3, [r7, #4]
 8101ab0:	2200      	movs	r2, #0
 8101ab2:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	2210      	movs	r2, #16
 8101ab8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	2210      	movs	r2, #16
 8101abe:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8101ac0:	2300      	movs	r3, #0
 8101ac2:	e000      	b.n	8101ac6 <HAL_ETH_Stop_IT+0xe6>
  }
  else
  {
    return HAL_ERROR;
 8101ac4:	2301      	movs	r3, #1
  }
}
 8101ac6:	4618      	mov	r0, r3
 8101ac8:	3714      	adds	r7, #20
 8101aca:	46bd      	mov	sp, r7
 8101acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ad0:	4770      	bx	lr

08101ad2 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8101ad2:	b580      	push	{r7, lr}
 8101ad4:	b086      	sub	sp, #24
 8101ad6:	af00      	add	r7, sp, #0
 8101ad8:	60f8      	str	r0, [r7, #12]
 8101ada:	60b9      	str	r1, [r7, #8]
 8101adc:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8101ade:	68bb      	ldr	r3, [r7, #8]
 8101ae0:	2b00      	cmp	r3, #0
 8101ae2:	d107      	bne.n	8101af4 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8101ae4:	68fb      	ldr	r3, [r7, #12]
 8101ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101ae8:	f043 0201 	orr.w	r2, r3, #1
 8101aec:	68fb      	ldr	r3, [r7, #12]
 8101aee:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8101af0:	2301      	movs	r3, #1
 8101af2:	e073      	b.n	8101bdc <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8101af4:	68fb      	ldr	r3, [r7, #12]
 8101af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101af8:	2b10      	cmp	r3, #16
 8101afa:	d16e      	bne.n	8101bda <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8101afc:	2200      	movs	r2, #0
 8101afe:	68b9      	ldr	r1, [r7, #8]
 8101b00:	68f8      	ldr	r0, [r7, #12]
 8101b02:	f001 fa0f 	bl	8102f24 <ETH_Prepare_Tx_Descriptors>
 8101b06:	4603      	mov	r3, r0
 8101b08:	2b00      	cmp	r3, #0
 8101b0a:	d007      	beq.n	8101b1c <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8101b0c:	68fb      	ldr	r3, [r7, #12]
 8101b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101b10:	f043 0202 	orr.w	r2, r3, #2
 8101b14:	68fb      	ldr	r3, [r7, #12]
 8101b16:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8101b18:	2301      	movs	r3, #1
 8101b1a:	e05f      	b.n	8101bdc <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8101b1c:	68fb      	ldr	r3, [r7, #12]
 8101b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101b20:	68fb      	ldr	r3, [r7, #12]
 8101b22:	3206      	adds	r2, #6
 8101b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101b28:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8101b2a:	68fb      	ldr	r3, [r7, #12]
 8101b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101b2e:	1c5a      	adds	r2, r3, #1
 8101b30:	68fb      	ldr	r3, [r7, #12]
 8101b32:	629a      	str	r2, [r3, #40]	; 0x28
 8101b34:	68fb      	ldr	r3, [r7, #12]
 8101b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101b38:	2b03      	cmp	r3, #3
 8101b3a:	d904      	bls.n	8101b46 <HAL_ETH_Transmit+0x74>
 8101b3c:	68fb      	ldr	r3, [r7, #12]
 8101b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101b40:	1f1a      	subs	r2, r3, #4
 8101b42:	68fb      	ldr	r3, [r7, #12]
 8101b44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8101b46:	68fb      	ldr	r3, [r7, #12]
 8101b48:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8101b4a:	68fb      	ldr	r3, [r7, #12]
 8101b4c:	681b      	ldr	r3, [r3, #0]
 8101b4e:	68fa      	ldr	r2, [r7, #12]
 8101b50:	3106      	adds	r1, #6
 8101b52:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8101b56:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8101b5a:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8101b5c:	f7ff fc68 	bl	8101430 <HAL_GetTick>
 8101b60:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8101b62:	e034      	b.n	8101bce <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8101b64:	68fb      	ldr	r3, [r7, #12]
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8101b6c:	681b      	ldr	r3, [r3, #0]
 8101b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101b72:	2b00      	cmp	r3, #0
 8101b74:	d011      	beq.n	8101b9a <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8101b76:	68fb      	ldr	r3, [r7, #12]
 8101b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101b7a:	f043 0208 	orr.w	r2, r3, #8
 8101b7e:	68fb      	ldr	r3, [r7, #12]
 8101b80:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8101b82:	68fb      	ldr	r3, [r7, #12]
 8101b84:	681b      	ldr	r3, [r3, #0]
 8101b86:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8101b8a:	681a      	ldr	r2, [r3, #0]
 8101b8c:	68fb      	ldr	r3, [r7, #12]
 8101b8e:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8101b90:	68fb      	ldr	r3, [r7, #12]
 8101b92:	22e0      	movs	r2, #224	; 0xe0
 8101b94:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8101b96:	2301      	movs	r3, #1
 8101b98:	e020      	b.n	8101bdc <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ba0:	d015      	beq.n	8101bce <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8101ba2:	f7ff fc45 	bl	8101430 <HAL_GetTick>
 8101ba6:	4602      	mov	r2, r0
 8101ba8:	693b      	ldr	r3, [r7, #16]
 8101baa:	1ad3      	subs	r3, r2, r3
 8101bac:	687a      	ldr	r2, [r7, #4]
 8101bae:	429a      	cmp	r2, r3
 8101bb0:	d302      	bcc.n	8101bb8 <HAL_ETH_Transmit+0xe6>
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	2b00      	cmp	r3, #0
 8101bb6:	d10a      	bne.n	8101bce <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8101bb8:	68fb      	ldr	r3, [r7, #12]
 8101bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101bbc:	f043 0204 	orr.w	r2, r3, #4
 8101bc0:	68fb      	ldr	r3, [r7, #12]
 8101bc2:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8101bc4:	68fb      	ldr	r3, [r7, #12]
 8101bc6:	22e0      	movs	r2, #224	; 0xe0
 8101bc8:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8101bca:	2301      	movs	r3, #1
 8101bcc:	e006      	b.n	8101bdc <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8101bce:	697b      	ldr	r3, [r7, #20]
 8101bd0:	68db      	ldr	r3, [r3, #12]
 8101bd2:	2b00      	cmp	r3, #0
 8101bd4:	dbc6      	blt.n	8101b64 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8101bd6:	2300      	movs	r3, #0
 8101bd8:	e000      	b.n	8101bdc <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8101bda:	2301      	movs	r3, #1
  }
}
 8101bdc:	4618      	mov	r0, r3
 8101bde:	3718      	adds	r7, #24
 8101be0:	46bd      	mov	sp, r7
 8101be2:	bd80      	pop	{r7, pc}

08101be4 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8101be4:	b480      	push	{r7}
 8101be6:	b089      	sub	sp, #36	; 0x24
 8101be8:	af00      	add	r7, sp, #0
 8101bea:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	3344      	adds	r3, #68	; 0x44
 8101bf0:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8101bf2:	68bb      	ldr	r3, [r7, #8]
 8101bf4:	691b      	ldr	r3, [r3, #16]
 8101bf6:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101bf8:	68bb      	ldr	r3, [r7, #8]
 8101bfa:	69fa      	ldr	r2, [r7, #28]
 8101bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101c00:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8101c02:	2300      	movs	r3, #0
 8101c04:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8101c06:	2300      	movs	r3, #0
 8101c08:	613b      	str	r3, [r7, #16]
 8101c0a:	2300      	movs	r3, #0
 8101c0c:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8101c0e:	68bb      	ldr	r3, [r7, #8]
 8101c10:	699b      	ldr	r3, [r3, #24]
 8101c12:	2b00      	cmp	r3, #0
 8101c14:	d06b      	beq.n	8101cee <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8101c16:	2300      	movs	r3, #0
 8101c18:	e0ce      	b.n	8101db8 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8101c1a:	697b      	ldr	r3, [r7, #20]
 8101c1c:	3301      	adds	r3, #1
 8101c1e:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8101c20:	69bb      	ldr	r3, [r7, #24]
 8101c22:	68db      	ldr	r3, [r3, #12]
 8101c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101c28:	2b00      	cmp	r3, #0
 8101c2a:	d036      	beq.n	8101c9a <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8101c2c:	693b      	ldr	r3, [r7, #16]
 8101c2e:	3301      	adds	r3, #1
 8101c30:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8101c32:	693b      	ldr	r3, [r7, #16]
 8101c34:	2b01      	cmp	r3, #1
 8101c36:	d101      	bne.n	8101c3c <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8101c38:	69fb      	ldr	r3, [r7, #28]
 8101c3a:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8101c3c:	69fb      	ldr	r3, [r7, #28]
 8101c3e:	3301      	adds	r3, #1
 8101c40:	61fb      	str	r3, [r7, #28]
 8101c42:	69fb      	ldr	r3, [r7, #28]
 8101c44:	2b03      	cmp	r3, #3
 8101c46:	d902      	bls.n	8101c4e <HAL_ETH_IsRxDataAvailable+0x6a>
 8101c48:	69fb      	ldr	r3, [r7, #28]
 8101c4a:	3b04      	subs	r3, #4
 8101c4c:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101c4e:	68bb      	ldr	r3, [r7, #8]
 8101c50:	69fa      	ldr	r2, [r7, #28]
 8101c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101c56:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8101c58:	69bb      	ldr	r3, [r7, #24]
 8101c5a:	68db      	ldr	r3, [r3, #12]
 8101c5c:	2b00      	cmp	r3, #0
 8101c5e:	db11      	blt.n	8101c84 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8101c60:	69bb      	ldr	r3, [r7, #24]
 8101c62:	68db      	ldr	r3, [r3, #12]
 8101c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8101c68:	2b00      	cmp	r3, #0
 8101c6a:	d00b      	beq.n	8101c84 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8101c6c:	68bb      	ldr	r3, [r7, #8]
 8101c6e:	2201      	movs	r2, #1
 8101c70:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8101c72:	69fb      	ldr	r3, [r7, #28]
 8101c74:	3301      	adds	r3, #1
 8101c76:	61fb      	str	r3, [r7, #28]
 8101c78:	69fb      	ldr	r3, [r7, #28]
 8101c7a:	2b03      	cmp	r3, #3
 8101c7c:	d902      	bls.n	8101c84 <HAL_ETH_IsRxDataAvailable+0xa0>
 8101c7e:	69fb      	ldr	r3, [r7, #28]
 8101c80:	3b04      	subs	r3, #4
 8101c82:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8101c84:	68bb      	ldr	r3, [r7, #8]
 8101c86:	69fa      	ldr	r2, [r7, #28]
 8101c88:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8101c8a:	68bb      	ldr	r3, [r7, #8]
 8101c8c:	68fa      	ldr	r2, [r7, #12]
 8101c8e:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8101c90:	68bb      	ldr	r3, [r7, #8]
 8101c92:	693a      	ldr	r2, [r7, #16]
 8101c94:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8101c96:	2301      	movs	r3, #1
 8101c98:	e08e      	b.n	8101db8 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8101c9a:	69bb      	ldr	r3, [r7, #24]
 8101c9c:	68db      	ldr	r3, [r3, #12]
 8101c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101ca2:	2b00      	cmp	r3, #0
 8101ca4:	d012      	beq.n	8101ccc <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8101ca6:	69fb      	ldr	r3, [r7, #28]
 8101ca8:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8101caa:	2301      	movs	r3, #1
 8101cac:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8101cae:	69fb      	ldr	r3, [r7, #28]
 8101cb0:	3301      	adds	r3, #1
 8101cb2:	61fb      	str	r3, [r7, #28]
 8101cb4:	69fb      	ldr	r3, [r7, #28]
 8101cb6:	2b03      	cmp	r3, #3
 8101cb8:	d902      	bls.n	8101cc0 <HAL_ETH_IsRxDataAvailable+0xdc>
 8101cba:	69fb      	ldr	r3, [r7, #28]
 8101cbc:	3b04      	subs	r3, #4
 8101cbe:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101cc0:	68bb      	ldr	r3, [r7, #8]
 8101cc2:	69fa      	ldr	r2, [r7, #28]
 8101cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101cc8:	61bb      	str	r3, [r7, #24]
 8101cca:	e010      	b.n	8101cee <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8101ccc:	693b      	ldr	r3, [r7, #16]
 8101cce:	3301      	adds	r3, #1
 8101cd0:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8101cd2:	69fb      	ldr	r3, [r7, #28]
 8101cd4:	3301      	adds	r3, #1
 8101cd6:	61fb      	str	r3, [r7, #28]
 8101cd8:	69fb      	ldr	r3, [r7, #28]
 8101cda:	2b03      	cmp	r3, #3
 8101cdc:	d902      	bls.n	8101ce4 <HAL_ETH_IsRxDataAvailable+0x100>
 8101cde:	69fb      	ldr	r3, [r7, #28]
 8101ce0:	3b04      	subs	r3, #4
 8101ce2:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101ce4:	68bb      	ldr	r3, [r7, #8]
 8101ce6:	69fa      	ldr	r2, [r7, #28]
 8101ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101cec:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8101cee:	69bb      	ldr	r3, [r7, #24]
 8101cf0:	68db      	ldr	r3, [r3, #12]
 8101cf2:	2b00      	cmp	r3, #0
 8101cf4:	db02      	blt.n	8101cfc <HAL_ETH_IsRxDataAvailable+0x118>
 8101cf6:	697b      	ldr	r3, [r7, #20]
 8101cf8:	2b03      	cmp	r3, #3
 8101cfa:	d98e      	bls.n	8101c1a <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8101cfc:	693b      	ldr	r3, [r7, #16]
 8101cfe:	2b00      	cmp	r3, #0
 8101d00:	d056      	beq.n	8101db0 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8101d02:	68bb      	ldr	r3, [r7, #8]
 8101d04:	69fa      	ldr	r2, [r7, #28]
 8101d06:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8101d08:	68bb      	ldr	r3, [r7, #8]
 8101d0a:	68fa      	ldr	r2, [r7, #12]
 8101d0c:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8101d0e:	68fb      	ldr	r3, [r7, #12]
 8101d10:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101d12:	68bb      	ldr	r3, [r7, #8]
 8101d14:	69fa      	ldr	r2, [r7, #28]
 8101d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d1a:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8101d1c:	2300      	movs	r3, #0
 8101d1e:	617b      	str	r3, [r7, #20]
 8101d20:	e03b      	b.n	8101d9a <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8101d22:	69bb      	ldr	r3, [r7, #24]
 8101d24:	691a      	ldr	r2, [r3, #16]
 8101d26:	69bb      	ldr	r3, [r7, #24]
 8101d28:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8101d2a:	69bb      	ldr	r3, [r7, #24]
 8101d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101d30:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8101d32:	69bb      	ldr	r3, [r7, #24]
 8101d34:	695b      	ldr	r3, [r3, #20]
 8101d36:	2b00      	cmp	r3, #0
 8101d38:	d009      	beq.n	8101d4e <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8101d3a:	69bb      	ldr	r3, [r7, #24]
 8101d3c:	695a      	ldr	r2, [r3, #20]
 8101d3e:	69bb      	ldr	r3, [r7, #24]
 8101d40:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8101d42:	69bb      	ldr	r3, [r7, #24]
 8101d44:	68db      	ldr	r3, [r3, #12]
 8101d46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8101d4a:	69bb      	ldr	r3, [r7, #24]
 8101d4c:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8101d4e:	69bb      	ldr	r3, [r7, #24]
 8101d50:	68db      	ldr	r3, [r3, #12]
 8101d52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8101d56:	69bb      	ldr	r3, [r7, #24]
 8101d58:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8101d5a:	68bb      	ldr	r3, [r7, #8]
 8101d5c:	6a1b      	ldr	r3, [r3, #32]
 8101d5e:	2b00      	cmp	r3, #0
 8101d60:	d005      	beq.n	8101d6e <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8101d62:	69bb      	ldr	r3, [r7, #24]
 8101d64:	68db      	ldr	r3, [r3, #12]
 8101d66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8101d6a:	69bb      	ldr	r3, [r7, #24]
 8101d6c:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8101d6e:	693b      	ldr	r3, [r7, #16]
 8101d70:	3b01      	subs	r3, #1
 8101d72:	697a      	ldr	r2, [r7, #20]
 8101d74:	429a      	cmp	r2, r3
 8101d76:	d20d      	bcs.n	8101d94 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8101d78:	69fb      	ldr	r3, [r7, #28]
 8101d7a:	3301      	adds	r3, #1
 8101d7c:	61fb      	str	r3, [r7, #28]
 8101d7e:	69fb      	ldr	r3, [r7, #28]
 8101d80:	2b03      	cmp	r3, #3
 8101d82:	d902      	bls.n	8101d8a <HAL_ETH_IsRxDataAvailable+0x1a6>
 8101d84:	69fb      	ldr	r3, [r7, #28]
 8101d86:	3b04      	subs	r3, #4
 8101d88:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101d8a:	68bb      	ldr	r3, [r7, #8]
 8101d8c:	69fa      	ldr	r2, [r7, #28]
 8101d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d92:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8101d94:	697b      	ldr	r3, [r7, #20]
 8101d96:	3301      	adds	r3, #1
 8101d98:	617b      	str	r3, [r7, #20]
 8101d9a:	697a      	ldr	r2, [r7, #20]
 8101d9c:	693b      	ldr	r3, [r7, #16]
 8101d9e:	429a      	cmp	r2, r3
 8101da0:	d3bf      	bcc.n	8101d22 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	681b      	ldr	r3, [r3, #0]
 8101da6:	69ba      	ldr	r2, [r7, #24]
 8101da8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8101dac:	3308      	adds	r3, #8
 8101dae:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8101db0:	68bb      	ldr	r3, [r7, #8]
 8101db2:	2200      	movs	r2, #0
 8101db4:	619a      	str	r2, [r3, #24]

  return 0;
 8101db6:	2300      	movs	r3, #0
}
 8101db8:	4618      	mov	r0, r3
 8101dba:	3724      	adds	r7, #36	; 0x24
 8101dbc:	46bd      	mov	sp, r7
 8101dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dc2:	4770      	bx	lr

08101dc4 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8101dc4:	b580      	push	{r7, lr}
 8101dc6:	b08a      	sub	sp, #40	; 0x28
 8101dc8:	af00      	add	r7, sp, #0
 8101dca:	6078      	str	r0, [r7, #4]
 8101dcc:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	3344      	adds	r3, #68	; 0x44
 8101dd2:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8101dd4:	693b      	ldr	r3, [r7, #16]
 8101dd6:	695b      	ldr	r3, [r3, #20]
 8101dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8101dda:	2300      	movs	r3, #0
 8101ddc:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101dde:	693b      	ldr	r3, [r7, #16]
 8101de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101de6:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8101de8:	683b      	ldr	r3, [r7, #0]
 8101dea:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8101dec:	697b      	ldr	r3, [r7, #20]
 8101dee:	2b00      	cmp	r3, #0
 8101df0:	d104      	bne.n	8101dfc <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	2201      	movs	r2, #1
 8101df6:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8101df8:	2301      	movs	r3, #1
 8101dfa:	e07d      	b.n	8101ef8 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8101dfc:	693b      	ldr	r3, [r7, #16]
 8101dfe:	699b      	ldr	r3, [r3, #24]
 8101e00:	2b00      	cmp	r3, #0
 8101e02:	d10f      	bne.n	8101e24 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8101e04:	6878      	ldr	r0, [r7, #4]
 8101e06:	f7ff feed 	bl	8101be4 <HAL_ETH_IsRxDataAvailable>
 8101e0a:	4603      	mov	r3, r0
 8101e0c:	2b00      	cmp	r3, #0
 8101e0e:	d101      	bne.n	8101e14 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8101e10:	2301      	movs	r3, #1
 8101e12:	e071      	b.n	8101ef8 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8101e14:	693b      	ldr	r3, [r7, #16]
 8101e16:	695b      	ldr	r3, [r3, #20]
 8101e18:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101e1a:	693b      	ldr	r3, [r7, #16]
 8101e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101e22:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8101e24:	2300      	movs	r3, #0
 8101e26:	623b      	str	r3, [r7, #32]
 8101e28:	e031      	b.n	8101e8e <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8101e2a:	69bb      	ldr	r3, [r7, #24]
 8101e2c:	691b      	ldr	r3, [r3, #16]
 8101e2e:	461a      	mov	r2, r3
 8101e30:	697b      	ldr	r3, [r7, #20]
 8101e32:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	695a      	ldr	r2, [r3, #20]
 8101e38:	697b      	ldr	r3, [r7, #20]
 8101e3a:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8101e3c:	69bb      	ldr	r3, [r7, #24]
 8101e3e:	695b      	ldr	r3, [r3, #20]
 8101e40:	2b00      	cmp	r3, #0
 8101e42:	d00b      	beq.n	8101e5c <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8101e44:	697b      	ldr	r3, [r7, #20]
 8101e46:	689b      	ldr	r3, [r3, #8]
 8101e48:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8101e4a:	69bb      	ldr	r3, [r7, #24]
 8101e4c:	695b      	ldr	r3, [r3, #20]
 8101e4e:	461a      	mov	r2, r3
 8101e50:	697b      	ldr	r3, [r7, #20]
 8101e52:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	695a      	ldr	r2, [r3, #20]
 8101e58:	697b      	ldr	r3, [r7, #20]
 8101e5a:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8101e5c:	69bb      	ldr	r3, [r7, #24]
 8101e5e:	68db      	ldr	r3, [r3, #12]
 8101e60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8101e64:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8101e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e68:	3301      	adds	r3, #1
 8101e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8101e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e6e:	2b03      	cmp	r3, #3
 8101e70:	d902      	bls.n	8101e78 <HAL_ETH_GetRxDataBuffer+0xb4>
 8101e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e74:	3b04      	subs	r3, #4
 8101e76:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101e78:	693b      	ldr	r3, [r7, #16]
 8101e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101e80:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8101e82:	697b      	ldr	r3, [r7, #20]
 8101e84:	689b      	ldr	r3, [r3, #8]
 8101e86:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8101e88:	6a3b      	ldr	r3, [r7, #32]
 8101e8a:	3301      	adds	r3, #1
 8101e8c:	623b      	str	r3, [r7, #32]
 8101e8e:	693b      	ldr	r3, [r7, #16]
 8101e90:	699b      	ldr	r3, [r3, #24]
 8101e92:	3b01      	subs	r3, #1
 8101e94:	6a3a      	ldr	r2, [r7, #32]
 8101e96:	429a      	cmp	r2, r3
 8101e98:	d3c7      	bcc.n	8101e2a <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8101e9a:	69bb      	ldr	r3, [r7, #24]
 8101e9c:	68db      	ldr	r3, [r3, #12]
 8101e9e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8101ea2:	69fb      	ldr	r3, [r7, #28]
 8101ea4:	1ad3      	subs	r3, r2, r3
 8101ea6:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8101ea8:	69bb      	ldr	r3, [r7, #24]
 8101eaa:	691b      	ldr	r3, [r3, #16]
 8101eac:	461a      	mov	r2, r3
 8101eae:	697b      	ldr	r3, [r7, #20]
 8101eb0:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	695b      	ldr	r3, [r3, #20]
 8101eb6:	68fa      	ldr	r2, [r7, #12]
 8101eb8:	429a      	cmp	r2, r3
 8101eba:	d803      	bhi.n	8101ec4 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8101ebc:	697b      	ldr	r3, [r7, #20]
 8101ebe:	68fa      	ldr	r2, [r7, #12]
 8101ec0:	605a      	str	r2, [r3, #4]
 8101ec2:	e018      	b.n	8101ef6 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8101ec4:	69bb      	ldr	r3, [r7, #24]
 8101ec6:	695b      	ldr	r3, [r3, #20]
 8101ec8:	2b00      	cmp	r3, #0
 8101eca:	d012      	beq.n	8101ef2 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	695a      	ldr	r2, [r3, #20]
 8101ed0:	697b      	ldr	r3, [r7, #20]
 8101ed2:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8101ed4:	697b      	ldr	r3, [r7, #20]
 8101ed6:	689b      	ldr	r3, [r3, #8]
 8101ed8:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8101eda:	69bb      	ldr	r3, [r7, #24]
 8101edc:	695b      	ldr	r3, [r3, #20]
 8101ede:	461a      	mov	r2, r3
 8101ee0:	697b      	ldr	r3, [r7, #20]
 8101ee2:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	695b      	ldr	r3, [r3, #20]
 8101ee8:	68fa      	ldr	r2, [r7, #12]
 8101eea:	1ad2      	subs	r2, r2, r3
 8101eec:	697b      	ldr	r3, [r7, #20]
 8101eee:	605a      	str	r2, [r3, #4]
 8101ef0:	e001      	b.n	8101ef6 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8101ef2:	2301      	movs	r3, #1
 8101ef4:	e000      	b.n	8101ef8 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8101ef6:	2300      	movs	r3, #0
}
 8101ef8:	4618      	mov	r0, r3
 8101efa:	3728      	adds	r7, #40	; 0x28
 8101efc:	46bd      	mov	sp, r7
 8101efe:	bd80      	pop	{r7, pc}

08101f00 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8101f00:	b580      	push	{r7, lr}
 8101f02:	b086      	sub	sp, #24
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	6078      	str	r0, [r7, #4]
 8101f08:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	3344      	adds	r3, #68	; 0x44
 8101f0e:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8101f10:	693b      	ldr	r3, [r7, #16]
 8101f12:	695b      	ldr	r3, [r3, #20]
 8101f14:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8101f16:	693b      	ldr	r3, [r7, #16]
 8101f18:	699b      	ldr	r3, [r3, #24]
 8101f1a:	2b00      	cmp	r3, #0
 8101f1c:	d107      	bne.n	8101f2e <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8101f1e:	6878      	ldr	r0, [r7, #4]
 8101f20:	f7ff fe60 	bl	8101be4 <HAL_ETH_IsRxDataAvailable>
 8101f24:	4603      	mov	r3, r0
 8101f26:	2b00      	cmp	r3, #0
 8101f28:	d101      	bne.n	8101f2e <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8101f2a:	2301      	movs	r3, #1
 8101f2c:	e017      	b.n	8101f5e <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8101f2e:	693b      	ldr	r3, [r7, #16]
 8101f30:	699a      	ldr	r2, [r3, #24]
 8101f32:	697b      	ldr	r3, [r7, #20]
 8101f34:	4413      	add	r3, r2
 8101f36:	3b01      	subs	r3, #1
 8101f38:	617b      	str	r3, [r7, #20]
 8101f3a:	697b      	ldr	r3, [r7, #20]
 8101f3c:	2b03      	cmp	r3, #3
 8101f3e:	d902      	bls.n	8101f46 <HAL_ETH_GetRxDataLength+0x46>
 8101f40:	697b      	ldr	r3, [r7, #20]
 8101f42:	3b04      	subs	r3, #4
 8101f44:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8101f46:	693b      	ldr	r3, [r7, #16]
 8101f48:	697a      	ldr	r2, [r7, #20]
 8101f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101f4e:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8101f50:	68fb      	ldr	r3, [r7, #12]
 8101f52:	68db      	ldr	r3, [r3, #12]
 8101f54:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8101f58:	683b      	ldr	r3, [r7, #0]
 8101f5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8101f5c:	2300      	movs	r3, #0
}
 8101f5e:	4618      	mov	r0, r3
 8101f60:	3718      	adds	r7, #24
 8101f62:	46bd      	mov	sp, r7
 8101f64:	bd80      	pop	{r7, pc}

08101f66 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8101f66:	b480      	push	{r7}
 8101f68:	b089      	sub	sp, #36	; 0x24
 8101f6a:	af00      	add	r7, sp, #0
 8101f6c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	3344      	adds	r3, #68	; 0x44
 8101f72:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8101f74:	68fb      	ldr	r3, [r7, #12]
 8101f76:	695b      	ldr	r3, [r3, #20]
 8101f78:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8101f7a:	68fb      	ldr	r3, [r7, #12]
 8101f7c:	69fa      	ldr	r2, [r7, #28]
 8101f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101f82:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8101f84:	68fb      	ldr	r3, [r7, #12]
 8101f86:	699b      	ldr	r3, [r3, #24]
 8101f88:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8101f8a:	68fb      	ldr	r3, [r7, #12]
 8101f8c:	699b      	ldr	r3, [r3, #24]
 8101f8e:	2b00      	cmp	r3, #0
 8101f90:	d101      	bne.n	8101f96 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8101f92:	2301      	movs	r3, #1
 8101f94:	e057      	b.n	8102046 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8101f96:	68fb      	ldr	r3, [r7, #12]
 8101f98:	69db      	ldr	r3, [r3, #28]
 8101f9a:	2b00      	cmp	r3, #0
 8101f9c:	d002      	beq.n	8101fa4 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8101f9e:	697b      	ldr	r3, [r7, #20]
 8101fa0:	3301      	adds	r3, #1
 8101fa2:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8101fa4:	2300      	movs	r3, #0
 8101fa6:	613b      	str	r3, [r7, #16]
 8101fa8:	e03b      	b.n	8102022 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8101faa:	69bb      	ldr	r3, [r7, #24]
 8101fac:	691a      	ldr	r2, [r3, #16]
 8101fae:	69bb      	ldr	r3, [r7, #24]
 8101fb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8101fb2:	69bb      	ldr	r3, [r7, #24]
 8101fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101fb8:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8101fba:	69bb      	ldr	r3, [r7, #24]
 8101fbc:	695b      	ldr	r3, [r3, #20]
 8101fbe:	2b00      	cmp	r3, #0
 8101fc0:	d009      	beq.n	8101fd6 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8101fc2:	69bb      	ldr	r3, [r7, #24]
 8101fc4:	695a      	ldr	r2, [r3, #20]
 8101fc6:	69bb      	ldr	r3, [r7, #24]
 8101fc8:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8101fca:	69bb      	ldr	r3, [r7, #24]
 8101fcc:	68db      	ldr	r3, [r3, #12]
 8101fce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8101fd2:	69bb      	ldr	r3, [r7, #24]
 8101fd4:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8101fd6:	69bb      	ldr	r3, [r7, #24]
 8101fd8:	68db      	ldr	r3, [r3, #12]
 8101fda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8101fde:	69bb      	ldr	r3, [r7, #24]
 8101fe0:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8101fe2:	68fb      	ldr	r3, [r7, #12]
 8101fe4:	6a1b      	ldr	r3, [r3, #32]
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d005      	beq.n	8101ff6 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8101fea:	69bb      	ldr	r3, [r7, #24]
 8101fec:	68db      	ldr	r3, [r3, #12]
 8101fee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8101ff2:	69bb      	ldr	r3, [r7, #24]
 8101ff4:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8101ff6:	697b      	ldr	r3, [r7, #20]
 8101ff8:	3b01      	subs	r3, #1
 8101ffa:	693a      	ldr	r2, [r7, #16]
 8101ffc:	429a      	cmp	r2, r3
 8101ffe:	d20d      	bcs.n	810201c <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8102000:	69fb      	ldr	r3, [r7, #28]
 8102002:	3301      	adds	r3, #1
 8102004:	61fb      	str	r3, [r7, #28]
 8102006:	69fb      	ldr	r3, [r7, #28]
 8102008:	2b03      	cmp	r3, #3
 810200a:	d902      	bls.n	8102012 <HAL_ETH_BuildRxDescriptors+0xac>
 810200c:	69fb      	ldr	r3, [r7, #28]
 810200e:	3b04      	subs	r3, #4
 8102010:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8102012:	68fb      	ldr	r3, [r7, #12]
 8102014:	69fa      	ldr	r2, [r7, #28]
 8102016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810201a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 810201c:	693b      	ldr	r3, [r7, #16]
 810201e:	3301      	adds	r3, #1
 8102020:	613b      	str	r3, [r7, #16]
 8102022:	693a      	ldr	r2, [r7, #16]
 8102024:	697b      	ldr	r3, [r7, #20]
 8102026:	429a      	cmp	r2, r3
 8102028:	d3bf      	bcc.n	8101faa <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	681b      	ldr	r3, [r3, #0]
 810202e:	69ba      	ldr	r2, [r7, #24]
 8102030:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102034:	3308      	adds	r3, #8
 8102036:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8102038:	68fb      	ldr	r3, [r7, #12]
 810203a:	2200      	movs	r2, #0
 810203c:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	2200      	movs	r2, #0
 8102042:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8102044:	2300      	movs	r3, #0
}
 8102046:	4618      	mov	r0, r3
 8102048:	3724      	adds	r7, #36	; 0x24
 810204a:	46bd      	mov	sp, r7
 810204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102050:	4770      	bx	lr
	...

08102054 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8102054:	b580      	push	{r7, lr}
 8102056:	b082      	sub	sp, #8
 8102058:	af00      	add	r7, sp, #0
 810205a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810206a:	2b40      	cmp	r3, #64	; 0x40
 810206c:	d113      	bne.n	8102096 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	681b      	ldr	r3, [r3, #0]
 8102072:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102076:	3314      	adds	r3, #20
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810207e:	2b40      	cmp	r3, #64	; 0x40
 8102080:	d109      	bne.n	8102096 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8102082:	6878      	ldr	r0, [r7, #4]
 8102084:	f00e f8e4 	bl	8110250 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8102090:	f248 0240 	movw	r2, #32832	; 0x8040
 8102094:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 810209e:	681b      	ldr	r3, [r3, #0]
 81020a0:	f003 0301 	and.w	r3, r3, #1
 81020a4:	2b01      	cmp	r3, #1
 81020a6:	d113      	bne.n	81020d0 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81020b0:	3314      	adds	r3, #20
 81020b2:	681b      	ldr	r3, [r3, #0]
 81020b4:	f003 0301 	and.w	r3, r3, #1
 81020b8:	2b01      	cmp	r3, #1
 81020ba:	d109      	bne.n	81020d0 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 81020bc:	6878      	ldr	r0, [r7, #4]
 81020be:	f000 f8cb 	bl	8102258 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	681b      	ldr	r3, [r3, #0]
 81020c6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 81020ca:	f248 0201 	movw	r2, #32769	; 0x8001
 81020ce:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 81020d8:	681b      	ldr	r3, [r3, #0]
 81020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81020de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81020e2:	d149      	bne.n	8102178 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81020ec:	3314      	adds	r3, #20
 81020ee:	681b      	ldr	r3, [r3, #0]
 81020f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81020f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81020f8:	d13e      	bne.n	8102178 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 81020fa:	687b      	ldr	r3, [r7, #4]
 81020fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81020fe:	f043 0208 	orr.w	r2, r3, #8
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	681b      	ldr	r3, [r3, #0]
 810210a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 810210e:	681b      	ldr	r3, [r3, #0]
 8102110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102118:	d11b      	bne.n	8102152 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	681b      	ldr	r3, [r3, #0]
 810211e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8102122:	681a      	ldr	r2, [r3, #0]
 8102124:	f241 1302 	movw	r3, #4354	; 0x1102
 8102128:	4013      	ands	r3, r2
 810212a:	687a      	ldr	r2, [r7, #4]
 810212c:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	681b      	ldr	r3, [r3, #0]
 8102132:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102136:	3314      	adds	r3, #20
 8102138:	681a      	ldr	r2, [r3, #0]
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8102142:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102146:	3314      	adds	r3, #20
 8102148:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	22e0      	movs	r2, #224	; 0xe0
 810214e:	66da      	str	r2, [r3, #108]	; 0x6c
 8102150:	e00f      	b.n	8102172 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8102152:	687b      	ldr	r3, [r7, #4]
 8102154:	681b      	ldr	r3, [r3, #0]
 8102156:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 810215a:	681b      	ldr	r3, [r3, #0]
 810215c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 810216c:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8102170:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8102172:	6878      	ldr	r0, [r7, #4]
 8102174:	f000 f87a 	bl	810226c <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102180:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8102184:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102188:	d10e      	bne.n	81021a8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8102196:	687b      	ldr	r3, [r7, #4]
 8102198:	22e0      	movs	r2, #224	; 0xe0
 810219a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 810219c:	6878      	ldr	r0, [r7, #4]
 810219e:	f000 f86f 	bl	8102280 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	2200      	movs	r2, #0
 81021a6:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	681b      	ldr	r3, [r3, #0]
 81021ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81021b0:	f003 0310 	and.w	r3, r3, #16
 81021b4:	2b10      	cmp	r3, #16
 81021b6:	d10f      	bne.n	81021d8 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	681b      	ldr	r3, [r3, #0]
 81021bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81021c0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 81021ca:	6878      	ldr	r0, [r7, #4]
 81021cc:	f000 f862 	bl	8102294 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	2200      	movs	r2, #0
 81021d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 81021d8:	687b      	ldr	r3, [r7, #4]
 81021da:	681b      	ldr	r3, [r3, #0]
 81021dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81021e0:	f003 0320 	and.w	r3, r3, #32
 81021e4:	2b20      	cmp	r3, #32
 81021e6:	d10f      	bne.n	8102208 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	681b      	ldr	r3, [r3, #0]
 81021ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81021f0:	f003 020f 	and.w	r2, r3, #15
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 81021fa:	6878      	ldr	r0, [r7, #4]
 81021fc:	f000 f854 	bl	81022a8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	2200      	movs	r2, #0
 8102204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8102208:	f7ff fa36 	bl	8101678 <HAL_GetCurrentCPUID>
 810220c:	4603      	mov	r3, r0
 810220e:	2b03      	cmp	r3, #3
 8102210:	d10d      	bne.n	810222e <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8102212:	4b0f      	ldr	r3, [pc, #60]	; (8102250 <HAL_ETH_IRQHandler+0x1fc>)
 8102214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810221a:	2b00      	cmp	r3, #0
 810221c:	d014      	beq.n	8102248 <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810221e:	4b0c      	ldr	r3, [pc, #48]	; (8102250 <HAL_ETH_IRQHandler+0x1fc>)
 8102220:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102224:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8102226:	6878      	ldr	r0, [r7, #4]
 8102228:	f000 f848 	bl	81022bc <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 810222c:	e00c      	b.n	8102248 <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 810222e:	4b09      	ldr	r3, [pc, #36]	; (8102254 <HAL_ETH_IRQHandler+0x200>)
 8102230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102236:	2b00      	cmp	r3, #0
 8102238:	d006      	beq.n	8102248 <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810223a:	4b06      	ldr	r3, [pc, #24]	; (8102254 <HAL_ETH_IRQHandler+0x200>)
 810223c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102240:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8102242:	6878      	ldr	r0, [r7, #4]
 8102244:	f000 f83a 	bl	81022bc <HAL_ETH_WakeUpCallback>
}
 8102248:	bf00      	nop
 810224a:	3708      	adds	r7, #8
 810224c:	46bd      	mov	sp, r7
 810224e:	bd80      	pop	{r7, pc}
 8102250:	58000080 	.word	0x58000080
 8102254:	580000c0 	.word	0x580000c0

08102258 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8102258:	b480      	push	{r7}
 810225a:	b083      	sub	sp, #12
 810225c:	af00      	add	r7, sp, #0
 810225e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8102260:	bf00      	nop
 8102262:	370c      	adds	r7, #12
 8102264:	46bd      	mov	sp, r7
 8102266:	f85d 7b04 	ldr.w	r7, [sp], #4
 810226a:	4770      	bx	lr

0810226c <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 810226c:	b480      	push	{r7}
 810226e:	b083      	sub	sp, #12
 8102270:	af00      	add	r7, sp, #0
 8102272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8102274:	bf00      	nop
 8102276:	370c      	adds	r7, #12
 8102278:	46bd      	mov	sp, r7
 810227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227e:	4770      	bx	lr

08102280 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8102280:	b480      	push	{r7}
 8102282:	b083      	sub	sp, #12
 8102284:	af00      	add	r7, sp, #0
 8102286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8102288:	bf00      	nop
 810228a:	370c      	adds	r7, #12
 810228c:	46bd      	mov	sp, r7
 810228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102292:	4770      	bx	lr

08102294 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8102294:	b480      	push	{r7}
 8102296:	b083      	sub	sp, #12
 8102298:	af00      	add	r7, sp, #0
 810229a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 810229c:	bf00      	nop
 810229e:	370c      	adds	r7, #12
 81022a0:	46bd      	mov	sp, r7
 81022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a6:	4770      	bx	lr

081022a8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 81022a8:	b480      	push	{r7}
 81022aa:	b083      	sub	sp, #12
 81022ac:	af00      	add	r7, sp, #0
 81022ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 81022b0:	bf00      	nop
 81022b2:	370c      	adds	r7, #12
 81022b4:	46bd      	mov	sp, r7
 81022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ba:	4770      	bx	lr

081022bc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 81022bc:	b480      	push	{r7}
 81022be:	b083      	sub	sp, #12
 81022c0:	af00      	add	r7, sp, #0
 81022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 81022c4:	bf00      	nop
 81022c6:	370c      	adds	r7, #12
 81022c8:	46bd      	mov	sp, r7
 81022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ce:	4770      	bx	lr

081022d0 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 81022d0:	b580      	push	{r7, lr}
 81022d2:	b086      	sub	sp, #24
 81022d4:	af00      	add	r7, sp, #0
 81022d6:	60f8      	str	r0, [r7, #12]
 81022d8:	60b9      	str	r1, [r7, #8]
 81022da:	607a      	str	r2, [r7, #4]
 81022dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 81022de:	68fb      	ldr	r3, [r7, #12]
 81022e0:	681b      	ldr	r3, [r3, #0]
 81022e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 81022e6:	f003 0301 	and.w	r3, r3, #1
 81022ea:	2b00      	cmp	r3, #0
 81022ec:	d001      	beq.n	81022f2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 81022ee:	2301      	movs	r3, #1
 81022f0:	e03e      	b.n	8102370 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 81022f2:	68fb      	ldr	r3, [r7, #12]
 81022f4:	681b      	ldr	r3, [r3, #0]
 81022f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 81022fa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 81022fc:	697b      	ldr	r3, [r7, #20]
 81022fe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8102302:	68bb      	ldr	r3, [r7, #8]
 8102304:	055b      	lsls	r3, r3, #21
 8102306:	4313      	orrs	r3, r2
 8102308:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810230a:	697b      	ldr	r3, [r7, #20]
 810230c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	041b      	lsls	r3, r3, #16
 8102314:	4313      	orrs	r3, r2
 8102316:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8102318:	697b      	ldr	r3, [r7, #20]
 810231a:	f043 030c 	orr.w	r3, r3, #12
 810231e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8102320:	697b      	ldr	r3, [r7, #20]
 8102322:	f043 0301 	orr.w	r3, r3, #1
 8102326:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8102328:	68fb      	ldr	r3, [r7, #12]
 810232a:	681b      	ldr	r3, [r3, #0]
 810232c:	697a      	ldr	r2, [r7, #20]
 810232e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8102332:	f7ff f87d 	bl	8101430 <HAL_GetTick>
 8102336:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8102338:	e009      	b.n	810234e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 810233a:	f7ff f879 	bl	8101430 <HAL_GetTick>
 810233e:	4602      	mov	r2, r0
 8102340:	693b      	ldr	r3, [r7, #16]
 8102342:	1ad3      	subs	r3, r2, r3
 8102344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8102348:	d901      	bls.n	810234e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 810234a:	2301      	movs	r3, #1
 810234c:	e010      	b.n	8102370 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810234e:	68fb      	ldr	r3, [r7, #12]
 8102350:	681b      	ldr	r3, [r3, #0]
 8102352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8102356:	f003 0301 	and.w	r3, r3, #1
 810235a:	2b00      	cmp	r3, #0
 810235c:	d1ed      	bne.n	810233a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810235e:	68fb      	ldr	r3, [r7, #12]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8102366:	b29b      	uxth	r3, r3
 8102368:	461a      	mov	r2, r3
 810236a:	683b      	ldr	r3, [r7, #0]
 810236c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810236e:	2300      	movs	r3, #0
}
 8102370:	4618      	mov	r0, r3
 8102372:	3718      	adds	r7, #24
 8102374:	46bd      	mov	sp, r7
 8102376:	bd80      	pop	{r7, pc}

08102378 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8102378:	b580      	push	{r7, lr}
 810237a:	b086      	sub	sp, #24
 810237c:	af00      	add	r7, sp, #0
 810237e:	60f8      	str	r0, [r7, #12]
 8102380:	60b9      	str	r1, [r7, #8]
 8102382:	607a      	str	r2, [r7, #4]
 8102384:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8102386:	68fb      	ldr	r3, [r7, #12]
 8102388:	681b      	ldr	r3, [r3, #0]
 810238a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 810238e:	f003 0301 	and.w	r3, r3, #1
 8102392:	2b00      	cmp	r3, #0
 8102394:	d001      	beq.n	810239a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8102396:	2301      	movs	r3, #1
 8102398:	e03c      	b.n	8102414 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810239a:	68fb      	ldr	r3, [r7, #12]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 81023a2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 81023a4:	697b      	ldr	r3, [r7, #20]
 81023a6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 81023aa:	68bb      	ldr	r3, [r7, #8]
 81023ac:	055b      	lsls	r3, r3, #21
 81023ae:	4313      	orrs	r3, r2
 81023b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 81023b2:	697b      	ldr	r3, [r7, #20]
 81023b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	041b      	lsls	r3, r3, #16
 81023bc:	4313      	orrs	r3, r2
 81023be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 81023c0:	697b      	ldr	r3, [r7, #20]
 81023c2:	f023 030c 	bic.w	r3, r3, #12
 81023c6:	f043 0304 	orr.w	r3, r3, #4
 81023ca:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 81023cc:	697b      	ldr	r3, [r7, #20]
 81023ce:	f043 0301 	orr.w	r3, r3, #1
 81023d2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 81023d4:	683b      	ldr	r3, [r7, #0]
 81023d6:	b29a      	uxth	r2, r3
 81023d8:	4b10      	ldr	r3, [pc, #64]	; (810241c <HAL_ETH_WritePHYRegister+0xa4>)
 81023da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 81023de:	4a0f      	ldr	r2, [pc, #60]	; (810241c <HAL_ETH_WritePHYRegister+0xa4>)
 81023e0:	697b      	ldr	r3, [r7, #20]
 81023e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 81023e6:	f7ff f823 	bl	8101430 <HAL_GetTick>
 81023ea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81023ec:	e009      	b.n	8102402 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 81023ee:	f7ff f81f 	bl	8101430 <HAL_GetTick>
 81023f2:	4602      	mov	r2, r0
 81023f4:	693b      	ldr	r3, [r7, #16]
 81023f6:	1ad3      	subs	r3, r2, r3
 81023f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81023fc:	d901      	bls.n	8102402 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 81023fe:	2301      	movs	r3, #1
 8102400:	e008      	b.n	8102414 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8102402:	68fb      	ldr	r3, [r7, #12]
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 810240a:	f003 0301 	and.w	r3, r3, #1
 810240e:	2b00      	cmp	r3, #0
 8102410:	d1ed      	bne.n	81023ee <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8102412:	2300      	movs	r3, #0
}
 8102414:	4618      	mov	r0, r3
 8102416:	3718      	adds	r7, #24
 8102418:	46bd      	mov	sp, r7
 810241a:	bd80      	pop	{r7, pc}
 810241c:	40028000 	.word	0x40028000

08102420 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8102420:	b480      	push	{r7}
 8102422:	b083      	sub	sp, #12
 8102424:	af00      	add	r7, sp, #0
 8102426:	6078      	str	r0, [r7, #4]
 8102428:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810242a:	683b      	ldr	r3, [r7, #0]
 810242c:	2b00      	cmp	r3, #0
 810242e:	d101      	bne.n	8102434 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8102430:	2301      	movs	r3, #1
 8102432:	e1c3      	b.n	81027bc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	681b      	ldr	r3, [r3, #0]
 810243a:	f003 020c 	and.w	r2, r3, #12
 810243e:	683b      	ldr	r3, [r7, #0]
 8102440:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	681b      	ldr	r3, [r3, #0]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	f003 0310 	and.w	r3, r3, #16
 810244c:	2b00      	cmp	r3, #0
 810244e:	bf14      	ite	ne
 8102450:	2301      	movne	r3, #1
 8102452:	2300      	moveq	r3, #0
 8102454:	b2db      	uxtb	r3, r3
 8102456:	461a      	mov	r2, r3
 8102458:	683b      	ldr	r3, [r7, #0]
 810245a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	681b      	ldr	r3, [r3, #0]
 8102462:	681b      	ldr	r3, [r3, #0]
 8102464:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8102468:	683b      	ldr	r3, [r7, #0]
 810246a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102476:	2b00      	cmp	r3, #0
 8102478:	bf0c      	ite	eq
 810247a:	2301      	moveq	r3, #1
 810247c:	2300      	movne	r3, #0
 810247e:	b2db      	uxtb	r3, r3
 8102480:	461a      	mov	r2, r3
 8102482:	683b      	ldr	r3, [r7, #0]
 8102484:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8102488:	687b      	ldr	r3, [r7, #4]
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102492:	2b00      	cmp	r3, #0
 8102494:	bf14      	ite	ne
 8102496:	2301      	movne	r3, #1
 8102498:	2300      	moveq	r3, #0
 810249a:	b2db      	uxtb	r3, r3
 810249c:	461a      	mov	r2, r3
 810249e:	683b      	ldr	r3, [r7, #0]
 81024a0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	681b      	ldr	r3, [r3, #0]
 81024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	bf0c      	ite	eq
 81024b0:	2301      	moveq	r3, #1
 81024b2:	2300      	movne	r3, #0
 81024b4:	b2db      	uxtb	r3, r3
 81024b6:	461a      	mov	r2, r3
 81024b8:	683b      	ldr	r3, [r7, #0]
 81024ba:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	681b      	ldr	r3, [r3, #0]
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	bf14      	ite	ne
 81024ca:	2301      	movne	r3, #1
 81024cc:	2300      	moveq	r3, #0
 81024ce:	b2db      	uxtb	r3, r3
 81024d0:	461a      	mov	r2, r3
 81024d2:	683b      	ldr	r3, [r7, #0]
 81024d4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	681b      	ldr	r3, [r3, #0]
 81024dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81024e0:	2b00      	cmp	r3, #0
 81024e2:	bf14      	ite	ne
 81024e4:	2301      	movne	r3, #1
 81024e6:	2300      	moveq	r3, #0
 81024e8:	b2db      	uxtb	r3, r3
 81024ea:	461a      	mov	r2, r3
 81024ec:	683b      	ldr	r3, [r7, #0]
 81024ee:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	681b      	ldr	r3, [r3, #0]
 81024f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 81024fa:	683b      	ldr	r3, [r7, #0]
 81024fc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	681b      	ldr	r3, [r3, #0]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8102508:	683b      	ldr	r3, [r7, #0]
 810250a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102516:	2b00      	cmp	r3, #0
 8102518:	bf14      	ite	ne
 810251a:	2301      	movne	r3, #1
 810251c:	2300      	moveq	r3, #0
 810251e:	b2db      	uxtb	r3, r3
 8102520:	461a      	mov	r2, r3
 8102522:	683b      	ldr	r3, [r7, #0]
 8102524:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102530:	2b00      	cmp	r3, #0
 8102532:	bf0c      	ite	eq
 8102534:	2301      	moveq	r3, #1
 8102536:	2300      	movne	r3, #0
 8102538:	b2db      	uxtb	r3, r3
 810253a:	461a      	mov	r2, r3
 810253c:	683b      	ldr	r3, [r7, #0]
 810253e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	681b      	ldr	r3, [r3, #0]
 8102546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810254a:	2b00      	cmp	r3, #0
 810254c:	bf0c      	ite	eq
 810254e:	2301      	moveq	r3, #1
 8102550:	2300      	movne	r3, #0
 8102552:	b2db      	uxtb	r3, r3
 8102554:	461a      	mov	r2, r3
 8102556:	683b      	ldr	r3, [r7, #0]
 8102558:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102564:	2b00      	cmp	r3, #0
 8102566:	bf14      	ite	ne
 8102568:	2301      	movne	r3, #1
 810256a:	2300      	moveq	r3, #0
 810256c:	b2db      	uxtb	r3, r3
 810256e:	461a      	mov	r2, r3
 8102570:	683b      	ldr	r3, [r7, #0]
 8102572:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810257e:	2b00      	cmp	r3, #0
 8102580:	bf14      	ite	ne
 8102582:	2301      	movne	r3, #1
 8102584:	2300      	moveq	r3, #0
 8102586:	b2db      	uxtb	r3, r3
 8102588:	461a      	mov	r2, r3
 810258a:	683b      	ldr	r3, [r7, #0]
 810258c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102598:	2b00      	cmp	r3, #0
 810259a:	bf14      	ite	ne
 810259c:	2301      	movne	r3, #1
 810259e:	2300      	moveq	r3, #0
 81025a0:	b2db      	uxtb	r3, r3
 81025a2:	461a      	mov	r2, r3
 81025a4:	683b      	ldr	r3, [r7, #0]
 81025a6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81025b2:	2b00      	cmp	r3, #0
 81025b4:	bf14      	ite	ne
 81025b6:	2301      	movne	r3, #1
 81025b8:	2300      	moveq	r3, #0
 81025ba:	b2db      	uxtb	r3, r3
 81025bc:	461a      	mov	r2, r3
 81025be:	683b      	ldr	r3, [r7, #0]
 81025c0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 81025cc:	683b      	ldr	r3, [r7, #0]
 81025ce:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	681b      	ldr	r3, [r3, #0]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81025da:	2b00      	cmp	r3, #0
 81025dc:	bf14      	ite	ne
 81025de:	2301      	movne	r3, #1
 81025e0:	2300      	moveq	r3, #0
 81025e2:	b2db      	uxtb	r3, r3
 81025e4:	461a      	mov	r2, r3
 81025e6:	683b      	ldr	r3, [r7, #0]
 81025e8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	681b      	ldr	r3, [r3, #0]
 81025f0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 81025f4:	683b      	ldr	r3, [r7, #0]
 81025f6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	685b      	ldr	r3, [r3, #4]
 81025fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8102602:	683b      	ldr	r3, [r7, #0]
 8102604:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	681b      	ldr	r3, [r3, #0]
 810260a:	685b      	ldr	r3, [r3, #4]
 810260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102610:	2b00      	cmp	r3, #0
 8102612:	bf0c      	ite	eq
 8102614:	2301      	moveq	r3, #1
 8102616:	2300      	movne	r3, #0
 8102618:	b2db      	uxtb	r3, r3
 810261a:	461a      	mov	r2, r3
 810261c:	683b      	ldr	r3, [r7, #0]
 810261e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	681b      	ldr	r3, [r3, #0]
 8102626:	685b      	ldr	r3, [r3, #4]
 8102628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810262c:	2b00      	cmp	r3, #0
 810262e:	bf14      	ite	ne
 8102630:	2301      	movne	r3, #1
 8102632:	2300      	moveq	r3, #0
 8102634:	b2db      	uxtb	r3, r3
 8102636:	461a      	mov	r2, r3
 8102638:	683b      	ldr	r3, [r7, #0]
 810263a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	681b      	ldr	r3, [r3, #0]
 8102642:	685b      	ldr	r3, [r3, #4]
 8102644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102648:	2b00      	cmp	r3, #0
 810264a:	bf14      	ite	ne
 810264c:	2301      	movne	r3, #1
 810264e:	2300      	moveq	r3, #0
 8102650:	b2db      	uxtb	r3, r3
 8102652:	461a      	mov	r2, r3
 8102654:	683b      	ldr	r3, [r7, #0]
 8102656:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	681b      	ldr	r3, [r3, #0]
 810265e:	685b      	ldr	r3, [r3, #4]
 8102660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102664:	2b00      	cmp	r3, #0
 8102666:	bf14      	ite	ne
 8102668:	2301      	movne	r3, #1
 810266a:	2300      	moveq	r3, #0
 810266c:	b2db      	uxtb	r3, r3
 810266e:	461a      	mov	r2, r3
 8102670:	683b      	ldr	r3, [r7, #0]
 8102672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	685b      	ldr	r3, [r3, #4]
 810267c:	0e5b      	lsrs	r3, r3, #25
 810267e:	f003 021f 	and.w	r2, r3, #31
 8102682:	683b      	ldr	r3, [r7, #0]
 8102684:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	681b      	ldr	r3, [r3, #0]
 810268a:	68db      	ldr	r3, [r3, #12]
 810268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102690:	2b00      	cmp	r3, #0
 8102692:	bf14      	ite	ne
 8102694:	2301      	movne	r3, #1
 8102696:	2300      	moveq	r3, #0
 8102698:	b2db      	uxtb	r3, r3
 810269a:	461a      	mov	r2, r3
 810269c:	683b      	ldr	r3, [r7, #0]
 810269e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	681b      	ldr	r3, [r3, #0]
 81026a6:	68db      	ldr	r3, [r3, #12]
 81026a8:	f003 020f 	and.w	r2, r3, #15
 81026ac:	683b      	ldr	r3, [r7, #0]
 81026ae:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81026b6:	f003 0302 	and.w	r3, r3, #2
 81026ba:	2b00      	cmp	r3, #0
 81026bc:	bf14      	ite	ne
 81026be:	2301      	movne	r3, #1
 81026c0:	2300      	moveq	r3, #0
 81026c2:	b2db      	uxtb	r3, r3
 81026c4:	461a      	mov	r2, r3
 81026c6:	683b      	ldr	r3, [r7, #0]
 81026c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81026d6:	2b00      	cmp	r3, #0
 81026d8:	bf0c      	ite	eq
 81026da:	2301      	moveq	r3, #1
 81026dc:	2300      	movne	r3, #0
 81026de:	b2db      	uxtb	r3, r3
 81026e0:	461a      	mov	r2, r3
 81026e2:	683b      	ldr	r3, [r7, #0]
 81026e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	681b      	ldr	r3, [r3, #0]
 81026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81026ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81026f2:	683b      	ldr	r3, [r7, #0]
 81026f4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	681b      	ldr	r3, [r3, #0]
 81026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81026fc:	0c1b      	lsrs	r3, r3, #16
 81026fe:	b29a      	uxth	r2, r3
 8102700:	683b      	ldr	r3, [r7, #0]
 8102702:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810270c:	f003 0301 	and.w	r3, r3, #1
 8102710:	2b00      	cmp	r3, #0
 8102712:	bf14      	ite	ne
 8102714:	2301      	movne	r3, #1
 8102716:	2300      	moveq	r3, #0
 8102718:	b2db      	uxtb	r3, r3
 810271a:	461a      	mov	r2, r3
 810271c:	683b      	ldr	r3, [r7, #0]
 810271e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810272a:	f003 0302 	and.w	r3, r3, #2
 810272e:	2b00      	cmp	r3, #0
 8102730:	bf14      	ite	ne
 8102732:	2301      	movne	r3, #1
 8102734:	2300      	moveq	r3, #0
 8102736:	b2db      	uxtb	r3, r3
 8102738:	461a      	mov	r2, r3
 810273a:	683b      	ldr	r3, [r7, #0]
 810273c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8102748:	f003 0272 	and.w	r2, r3, #114	; 0x72
 810274c:	683b      	ldr	r3, [r7, #0]
 810274e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8102758:	f003 0223 	and.w	r2, r3, #35	; 0x23
 810275c:	683b      	ldr	r3, [r7, #0]
 810275e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8102768:	f003 0308 	and.w	r3, r3, #8
 810276c:	2b00      	cmp	r3, #0
 810276e:	bf14      	ite	ne
 8102770:	2301      	movne	r3, #1
 8102772:	2300      	moveq	r3, #0
 8102774:	b2db      	uxtb	r3, r3
 8102776:	461a      	mov	r2, r3
 8102778:	683b      	ldr	r3, [r7, #0]
 810277a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8102786:	f003 0310 	and.w	r3, r3, #16
 810278a:	2b00      	cmp	r3, #0
 810278c:	bf14      	ite	ne
 810278e:	2301      	movne	r3, #1
 8102790:	2300      	moveq	r3, #0
 8102792:	b2db      	uxtb	r3, r3
 8102794:	461a      	mov	r2, r3
 8102796:	683b      	ldr	r3, [r7, #0]
 8102798:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 81027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81027a8:	2b00      	cmp	r3, #0
 81027aa:	bf0c      	ite	eq
 81027ac:	2301      	moveq	r3, #1
 81027ae:	2300      	movne	r3, #0
 81027b0:	b2db      	uxtb	r3, r3
 81027b2:	461a      	mov	r2, r3
 81027b4:	683b      	ldr	r3, [r7, #0]
 81027b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 81027ba:	2300      	movs	r3, #0
}
 81027bc:	4618      	mov	r0, r3
 81027be:	370c      	adds	r7, #12
 81027c0:	46bd      	mov	sp, r7
 81027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c6:	4770      	bx	lr

081027c8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81027c8:	b580      	push	{r7, lr}
 81027ca:	b082      	sub	sp, #8
 81027cc:	af00      	add	r7, sp, #0
 81027ce:	6078      	str	r0, [r7, #4]
 81027d0:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 81027d2:	683b      	ldr	r3, [r7, #0]
 81027d4:	2b00      	cmp	r3, #0
 81027d6:	d101      	bne.n	81027dc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 81027d8:	2301      	movs	r3, #1
 81027da:	e00a      	b.n	81027f2 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81027e0:	2b10      	cmp	r3, #16
 81027e2:	d105      	bne.n	81027f0 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 81027e4:	6839      	ldr	r1, [r7, #0]
 81027e6:	6878      	ldr	r0, [r7, #4]
 81027e8:	f000 f860 	bl	81028ac <ETH_SetMACConfig>

    return HAL_OK;
 81027ec:	2300      	movs	r3, #0
 81027ee:	e000      	b.n	81027f2 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 81027f0:	2301      	movs	r3, #1
  }
}
 81027f2:	4618      	mov	r0, r3
 81027f4:	3708      	adds	r7, #8
 81027f6:	46bd      	mov	sp, r7
 81027f8:	bd80      	pop	{r7, pc}
	...

081027fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 81027fc:	b580      	push	{r7, lr}
 81027fe:	b084      	sub	sp, #16
 8102800:	af00      	add	r7, sp, #0
 8102802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 810280c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810280e:	68fb      	ldr	r3, [r7, #12]
 8102810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102814:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8102816:	f001 fba1 	bl	8103f5c <HAL_RCC_GetHCLKFreq>
 810281a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 810281c:	68bb      	ldr	r3, [r7, #8]
 810281e:	4a1e      	ldr	r2, [pc, #120]	; (8102898 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d908      	bls.n	8102836 <HAL_ETH_SetMDIOClockRange+0x3a>
 8102824:	68bb      	ldr	r3, [r7, #8]
 8102826:	4a1d      	ldr	r2, [pc, #116]	; (810289c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8102828:	4293      	cmp	r3, r2
 810282a:	d804      	bhi.n	8102836 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810282c:	68fb      	ldr	r3, [r7, #12]
 810282e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8102832:	60fb      	str	r3, [r7, #12]
 8102834:	e027      	b.n	8102886 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8102836:	68bb      	ldr	r3, [r7, #8]
 8102838:	4a18      	ldr	r2, [pc, #96]	; (810289c <HAL_ETH_SetMDIOClockRange+0xa0>)
 810283a:	4293      	cmp	r3, r2
 810283c:	d908      	bls.n	8102850 <HAL_ETH_SetMDIOClockRange+0x54>
 810283e:	68bb      	ldr	r3, [r7, #8]
 8102840:	4a17      	ldr	r2, [pc, #92]	; (81028a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8102842:	4293      	cmp	r3, r2
 8102844:	d204      	bcs.n	8102850 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8102846:	68fb      	ldr	r3, [r7, #12]
 8102848:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 810284c:	60fb      	str	r3, [r7, #12]
 810284e:	e01a      	b.n	8102886 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8102850:	68bb      	ldr	r3, [r7, #8]
 8102852:	4a13      	ldr	r2, [pc, #76]	; (81028a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8102854:	4293      	cmp	r3, r2
 8102856:	d303      	bcc.n	8102860 <HAL_ETH_SetMDIOClockRange+0x64>
 8102858:	68bb      	ldr	r3, [r7, #8]
 810285a:	4a12      	ldr	r2, [pc, #72]	; (81028a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 810285c:	4293      	cmp	r3, r2
 810285e:	d911      	bls.n	8102884 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8102860:	68bb      	ldr	r3, [r7, #8]
 8102862:	4a10      	ldr	r2, [pc, #64]	; (81028a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8102864:	4293      	cmp	r3, r2
 8102866:	d908      	bls.n	810287a <HAL_ETH_SetMDIOClockRange+0x7e>
 8102868:	68bb      	ldr	r3, [r7, #8]
 810286a:	4a0f      	ldr	r2, [pc, #60]	; (81028a8 <HAL_ETH_SetMDIOClockRange+0xac>)
 810286c:	4293      	cmp	r3, r2
 810286e:	d804      	bhi.n	810287a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8102870:	68fb      	ldr	r3, [r7, #12]
 8102872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102876:	60fb      	str	r3, [r7, #12]
 8102878:	e005      	b.n	8102886 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810287a:	68fb      	ldr	r3, [r7, #12]
 810287c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102880:	60fb      	str	r3, [r7, #12]
 8102882:	e000      	b.n	8102886 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8102884:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	681b      	ldr	r3, [r3, #0]
 810288a:	68fa      	ldr	r2, [r7, #12]
 810288c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8102890:	bf00      	nop
 8102892:	3710      	adds	r7, #16
 8102894:	46bd      	mov	sp, r7
 8102896:	bd80      	pop	{r7, pc}
 8102898:	01312cff 	.word	0x01312cff
 810289c:	02160ebf 	.word	0x02160ebf
 81028a0:	03938700 	.word	0x03938700
 81028a4:	05f5e0ff 	.word	0x05f5e0ff
 81028a8:	08f0d17f 	.word	0x08f0d17f

081028ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81028ac:	b480      	push	{r7}
 81028ae:	b085      	sub	sp, #20
 81028b0:	af00      	add	r7, sp, #0
 81028b2:	6078      	str	r0, [r7, #4]
 81028b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 81028b6:	683b      	ldr	r3, [r7, #0]
 81028b8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 81028ba:	683b      	ldr	r3, [r7, #0]
 81028bc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 81028be:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 81028c0:	683b      	ldr	r3, [r7, #0]
 81028c2:	791b      	ldrb	r3, [r3, #4]
 81028c4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 81028c6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81028c8:	683b      	ldr	r3, [r7, #0]
 81028ca:	7b1b      	ldrb	r3, [r3, #12]
 81028cc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 81028ce:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 81028d0:	683b      	ldr	r3, [r7, #0]
 81028d2:	7b5b      	ldrb	r3, [r3, #13]
 81028d4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81028d6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81028d8:	683b      	ldr	r3, [r7, #0]
 81028da:	7b9b      	ldrb	r3, [r3, #14]
 81028dc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 81028de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81028e0:	683b      	ldr	r3, [r7, #0]
 81028e2:	7bdb      	ldrb	r3, [r3, #15]
 81028e4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81028e6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81028e8:	683a      	ldr	r2, [r7, #0]
 81028ea:	7c12      	ldrb	r2, [r2, #16]
 81028ec:	2a00      	cmp	r2, #0
 81028ee:	d102      	bne.n	81028f6 <ETH_SetMACConfig+0x4a>
 81028f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81028f4:	e000      	b.n	81028f8 <ETH_SetMACConfig+0x4c>
 81028f6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81028f8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81028fa:	683a      	ldr	r2, [r7, #0]
 81028fc:	7c52      	ldrb	r2, [r2, #17]
 81028fe:	2a00      	cmp	r2, #0
 8102900:	d102      	bne.n	8102908 <ETH_SetMACConfig+0x5c>
 8102902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102906:	e000      	b.n	810290a <ETH_SetMACConfig+0x5e>
 8102908:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810290a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 810290c:	683b      	ldr	r3, [r7, #0]
 810290e:	7c9b      	ldrb	r3, [r3, #18]
 8102910:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8102912:	431a      	orrs	r2, r3
                                macconf->Speed |
 8102914:	683b      	ldr	r3, [r7, #0]
 8102916:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8102918:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 810291a:	683b      	ldr	r3, [r7, #0]
 810291c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 810291e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8102920:	683b      	ldr	r3, [r7, #0]
 8102922:	7f1b      	ldrb	r3, [r3, #28]
 8102924:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8102926:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8102928:	683b      	ldr	r3, [r7, #0]
 810292a:	7f5b      	ldrb	r3, [r3, #29]
 810292c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 810292e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8102930:	683a      	ldr	r2, [r7, #0]
 8102932:	7f92      	ldrb	r2, [r2, #30]
 8102934:	2a00      	cmp	r2, #0
 8102936:	d102      	bne.n	810293e <ETH_SetMACConfig+0x92>
 8102938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810293c:	e000      	b.n	8102940 <ETH_SetMACConfig+0x94>
 810293e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8102940:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8102942:	683b      	ldr	r3, [r7, #0]
 8102944:	7fdb      	ldrb	r3, [r3, #31]
 8102946:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8102948:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 810294a:	683a      	ldr	r2, [r7, #0]
 810294c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8102950:	2a00      	cmp	r2, #0
 8102952:	d102      	bne.n	810295a <ETH_SetMACConfig+0xae>
 8102954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102958:	e000      	b.n	810295c <ETH_SetMACConfig+0xb0>
 810295a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 810295c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 810295e:	683b      	ldr	r3, [r7, #0]
 8102960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8102962:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8102964:	683b      	ldr	r3, [r7, #0]
 8102966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810296a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 810296c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 810296e:	683b      	ldr	r3, [r7, #0]
 8102970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8102972:	4313      	orrs	r3, r2
 8102974:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	681a      	ldr	r2, [r3, #0]
 810297c:	4b57      	ldr	r3, [pc, #348]	; (8102adc <ETH_SetMACConfig+0x230>)
 810297e:	4013      	ands	r3, r2
 8102980:	687a      	ldr	r2, [r7, #4]
 8102982:	6812      	ldr	r2, [r2, #0]
 8102984:	68f9      	ldr	r1, [r7, #12]
 8102986:	430b      	orrs	r3, r1
 8102988:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 810298a:	683b      	ldr	r3, [r7, #0]
 810298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810298e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8102990:	683b      	ldr	r3, [r7, #0]
 8102992:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8102996:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8102998:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 810299a:	683b      	ldr	r3, [r7, #0]
 810299c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81029a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 81029a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 81029a4:	683b      	ldr	r3, [r7, #0]
 81029a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 81029aa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 81029ac:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 81029ae:	683a      	ldr	r2, [r7, #0]
 81029b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 81029b4:	2a00      	cmp	r2, #0
 81029b6:	d102      	bne.n	81029be <ETH_SetMACConfig+0x112>
 81029b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81029bc:	e000      	b.n	81029c0 <ETH_SetMACConfig+0x114>
 81029be:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 81029c0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 81029c2:	683b      	ldr	r3, [r7, #0]
 81029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 81029c6:	4313      	orrs	r3, r2
 81029c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	685a      	ldr	r2, [r3, #4]
 81029d0:	4b43      	ldr	r3, [pc, #268]	; (8102ae0 <ETH_SetMACConfig+0x234>)
 81029d2:	4013      	ands	r3, r2
 81029d4:	687a      	ldr	r2, [r7, #4]
 81029d6:	6812      	ldr	r2, [r2, #0]
 81029d8:	68f9      	ldr	r1, [r7, #12]
 81029da:	430b      	orrs	r3, r1
 81029dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81029de:	683b      	ldr	r3, [r7, #0]
 81029e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81029e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81029e6:	683b      	ldr	r3, [r7, #0]
 81029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81029ea:	4313      	orrs	r3, r2
 81029ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	681b      	ldr	r3, [r3, #0]
 81029f2:	68db      	ldr	r3, [r3, #12]
 81029f4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 81029f8:	f023 0301 	bic.w	r3, r3, #1
 81029fc:	687a      	ldr	r2, [r7, #4]
 81029fe:	6812      	ldr	r2, [r2, #0]
 8102a00:	68f9      	ldr	r1, [r7, #12]
 8102a02:	430b      	orrs	r3, r1
 8102a04:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8102a06:	683b      	ldr	r3, [r7, #0]
 8102a08:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8102a0c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8102a0e:	683b      	ldr	r3, [r7, #0]
 8102a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8102a12:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8102a14:	683a      	ldr	r2, [r7, #0]
 8102a16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8102a1a:	2a00      	cmp	r2, #0
 8102a1c:	d101      	bne.n	8102a22 <ETH_SetMACConfig+0x176>
 8102a1e:	2280      	movs	r2, #128	; 0x80
 8102a20:	e000      	b.n	8102a24 <ETH_SetMACConfig+0x178>
 8102a22:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8102a24:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8102a26:	683b      	ldr	r3, [r7, #0]
 8102a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102a2a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8102a2c:	4313      	orrs	r3, r2
 8102a2e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102a36:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8102a3a:	4013      	ands	r3, r2
 8102a3c:	687a      	ldr	r2, [r7, #4]
 8102a3e:	6812      	ldr	r2, [r2, #0]
 8102a40:	68f9      	ldr	r1, [r7, #12]
 8102a42:	430b      	orrs	r3, r1
 8102a44:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8102a46:	683b      	ldr	r3, [r7, #0]
 8102a48:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8102a4c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8102a4e:	683b      	ldr	r3, [r7, #0]
 8102a50:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8102a54:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8102a56:	4313      	orrs	r3, r2
 8102a58:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102a62:	f023 0103 	bic.w	r1, r3, #3
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	68fa      	ldr	r2, [r7, #12]
 8102a6c:	430a      	orrs	r2, r1
 8102a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8102a7a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8102a7e:	683b      	ldr	r3, [r7, #0]
 8102a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	430a      	orrs	r2, r1
 8102a88:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8102a8c:	683b      	ldr	r3, [r7, #0]
 8102a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8102a90:	683a      	ldr	r2, [r7, #0]
 8102a92:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8102a96:	2a00      	cmp	r2, #0
 8102a98:	d101      	bne.n	8102a9e <ETH_SetMACConfig+0x1f2>
 8102a9a:	2240      	movs	r2, #64	; 0x40
 8102a9c:	e000      	b.n	8102aa0 <ETH_SetMACConfig+0x1f4>
 8102a9e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8102aa0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8102aa2:	683b      	ldr	r3, [r7, #0]
 8102aa4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8102aa8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8102aaa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8102aac:	683b      	ldr	r3, [r7, #0]
 8102aae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8102ab2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8102ab4:	4313      	orrs	r3, r2
 8102ab6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8102ac0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	681b      	ldr	r3, [r3, #0]
 8102ac8:	68fa      	ldr	r2, [r7, #12]
 8102aca:	430a      	orrs	r2, r1
 8102acc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8102ad0:	bf00      	nop
 8102ad2:	3714      	adds	r7, #20
 8102ad4:	46bd      	mov	sp, r7
 8102ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ada:	4770      	bx	lr
 8102adc:	00048083 	.word	0x00048083
 8102ae0:	c0f88000 	.word	0xc0f88000

08102ae4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8102ae4:	b480      	push	{r7}
 8102ae6:	b085      	sub	sp, #20
 8102ae8:	af00      	add	r7, sp, #0
 8102aea:	6078      	str	r0, [r7, #4]
 8102aec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	681b      	ldr	r3, [r3, #0]
 8102af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8102afc:	f023 0302 	bic.w	r3, r3, #2
 8102b00:	683a      	ldr	r2, [r7, #0]
 8102b02:	6812      	ldr	r2, [r2, #0]
 8102b04:	6879      	ldr	r1, [r7, #4]
 8102b06:	6809      	ldr	r1, [r1, #0]
 8102b08:	431a      	orrs	r2, r3
 8102b0a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8102b0e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102b10:	683b      	ldr	r3, [r7, #0]
 8102b12:	791b      	ldrb	r3, [r3, #4]
 8102b14:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8102b16:	683b      	ldr	r3, [r7, #0]
 8102b18:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102b1a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8102b1c:	683b      	ldr	r3, [r7, #0]
 8102b1e:	7b1b      	ldrb	r3, [r3, #12]
 8102b20:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102b22:	4313      	orrs	r3, r2
 8102b24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102b2e:	3304      	adds	r3, #4
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8102b36:	f023 0301 	bic.w	r3, r3, #1
 8102b3a:	687a      	ldr	r2, [r7, #4]
 8102b3c:	6811      	ldr	r1, [r2, #0]
 8102b3e:	68fa      	ldr	r2, [r7, #12]
 8102b40:	431a      	orrs	r2, r3
 8102b42:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8102b46:	3304      	adds	r3, #4
 8102b48:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102b4a:	683b      	ldr	r3, [r7, #0]
 8102b4c:	7b5b      	ldrb	r3, [r3, #13]
 8102b4e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8102b50:	683b      	ldr	r3, [r7, #0]
 8102b52:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102b54:	4313      	orrs	r3, r2
 8102b56:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8102b60:	681a      	ldr	r2, [r3, #0]
 8102b62:	4b21      	ldr	r3, [pc, #132]	; (8102be8 <ETH_SetDMAConfig+0x104>)
 8102b64:	4013      	ands	r3, r2
 8102b66:	687a      	ldr	r2, [r7, #4]
 8102b68:	6811      	ldr	r1, [r2, #0]
 8102b6a:	68fa      	ldr	r2, [r7, #12]
 8102b6c:	431a      	orrs	r2, r3
 8102b6e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8102b72:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8102b74:	683b      	ldr	r3, [r7, #0]
 8102b76:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8102b78:	683b      	ldr	r3, [r7, #0]
 8102b7a:	7d1b      	ldrb	r3, [r3, #20]
 8102b7c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8102b7e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8102b80:	683b      	ldr	r3, [r7, #0]
 8102b82:	7f5b      	ldrb	r3, [r3, #29]
 8102b84:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8102b86:	4313      	orrs	r3, r2
 8102b88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8102b92:	3304      	adds	r3, #4
 8102b94:	681a      	ldr	r2, [r3, #0]
 8102b96:	4b15      	ldr	r3, [pc, #84]	; (8102bec <ETH_SetDMAConfig+0x108>)
 8102b98:	4013      	ands	r3, r2
 8102b9a:	687a      	ldr	r2, [r7, #4]
 8102b9c:	6811      	ldr	r1, [r2, #0]
 8102b9e:	68fa      	ldr	r2, [r7, #12]
 8102ba0:	431a      	orrs	r2, r3
 8102ba2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8102ba6:	3304      	adds	r3, #4
 8102ba8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8102baa:	683b      	ldr	r3, [r7, #0]
 8102bac:	7f1b      	ldrb	r3, [r3, #28]
 8102bae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8102bb0:	683b      	ldr	r3, [r7, #0]
 8102bb2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8102bb4:	4313      	orrs	r3, r2
 8102bb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8102bc0:	3308      	adds	r3, #8
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102bc8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8102bcc:	687a      	ldr	r2, [r7, #4]
 8102bce:	6811      	ldr	r1, [r2, #0]
 8102bd0:	68fa      	ldr	r2, [r7, #12]
 8102bd2:	431a      	orrs	r2, r3
 8102bd4:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8102bd8:	3308      	adds	r3, #8
 8102bda:	601a      	str	r2, [r3, #0]
}
 8102bdc:	bf00      	nop
 8102bde:	3714      	adds	r7, #20
 8102be0:	46bd      	mov	sp, r7
 8102be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be6:	4770      	bx	lr
 8102be8:	fffec000 	.word	0xfffec000
 8102bec:	ffc0efef 	.word	0xffc0efef

08102bf0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8102bf0:	b580      	push	{r7, lr}
 8102bf2:	b0a4      	sub	sp, #144	; 0x90
 8102bf4:	af00      	add	r7, sp, #0
 8102bf6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8102bf8:	2301      	movs	r3, #1
 8102bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8102bfe:	2300      	movs	r3, #0
 8102c00:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8102c02:	2300      	movs	r3, #0
 8102c04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8102c08:	2300      	movs	r3, #0
 8102c0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8102c0e:	2301      	movs	r3, #1
 8102c10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8102c14:	2301      	movs	r3, #1
 8102c16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8102c1a:	2301      	movs	r3, #1
 8102c1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8102c20:	2300      	movs	r3, #0
 8102c22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8102c26:	2301      	movs	r3, #1
 8102c28:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8102c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8102c30:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8102c32:	2300      	movs	r3, #0
 8102c34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8102c38:	2300      	movs	r3, #0
 8102c3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8102c3c:	2300      	movs	r3, #0
 8102c3e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8102c42:	2300      	movs	r3, #0
 8102c44:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8102c48:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8102c4c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8102c4e:	2300      	movs	r3, #0
 8102c50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8102c54:	2300      	movs	r3, #0
 8102c56:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8102c58:	2301      	movs	r3, #1
 8102c5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8102c5e:	2300      	movs	r3, #0
 8102c60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8102c64:	2300      	movs	r3, #0
 8102c66:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8102c6a:	2300      	movs	r3, #0
 8102c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8102c6e:	2300      	movs	r3, #0
 8102c70:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8102c72:	2300      	movs	r3, #0
 8102c74:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8102c76:	2300      	movs	r3, #0
 8102c78:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8102c7c:	2300      	movs	r3, #0
 8102c7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8102c82:	2301      	movs	r3, #1
 8102c84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8102c88:	2320      	movs	r3, #32
 8102c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8102c8e:	2301      	movs	r3, #1
 8102c90:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8102c94:	2300      	movs	r3, #0
 8102c96:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8102c9a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8102c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8102ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102ca4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8102ca6:	2300      	movs	r3, #0
 8102ca8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8102cac:	2302      	movs	r3, #2
 8102cae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8102cb2:	2300      	movs	r3, #0
 8102cb4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8102cb8:	2300      	movs	r3, #0
 8102cba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8102cbe:	2300      	movs	r3, #0
 8102cc0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8102cc4:	2301      	movs	r3, #1
 8102cc6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8102cca:	2300      	movs	r3, #0
 8102ccc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8102cce:	2301      	movs	r3, #1
 8102cd0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8102cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102cd8:	4619      	mov	r1, r3
 8102cda:	6878      	ldr	r0, [r7, #4]
 8102cdc:	f7ff fde6 	bl	81028ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8102ce0:	2301      	movs	r3, #1
 8102ce2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8102ce4:	2301      	movs	r3, #1
 8102ce6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8102ce8:	2300      	movs	r3, #0
 8102cea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8102cec:	2300      	movs	r3, #0
 8102cee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8102cf2:	2300      	movs	r3, #0
 8102cf4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8102cf6:	2300      	movs	r3, #0
 8102cf8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8102cfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8102cfe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8102d00:	2300      	movs	r3, #0
 8102d02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8102d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8102d08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8102d0a:	2300      	movs	r3, #0
 8102d0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8102d10:	f44f 7306 	mov.w	r3, #536	; 0x218
 8102d14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8102d16:	f107 0308 	add.w	r3, r7, #8
 8102d1a:	4619      	mov	r1, r3
 8102d1c:	6878      	ldr	r0, [r7, #4]
 8102d1e:	f7ff fee1 	bl	8102ae4 <ETH_SetDMAConfig>
}
 8102d22:	bf00      	nop
 8102d24:	3790      	adds	r7, #144	; 0x90
 8102d26:	46bd      	mov	sp, r7
 8102d28:	bd80      	pop	{r7, pc}
	...

08102d2c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8102d2c:	b580      	push	{r7, lr}
 8102d2e:	b084      	sub	sp, #16
 8102d30:	af00      	add	r7, sp, #0
 8102d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8102d3c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102d44:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8102d46:	f001 f909 	bl	8103f5c <HAL_RCC_GetHCLKFreq>
 8102d4a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8102d4c:	68bb      	ldr	r3, [r7, #8]
 8102d4e:	4a1e      	ldr	r2, [pc, #120]	; (8102dc8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8102d50:	4293      	cmp	r3, r2
 8102d52:	d908      	bls.n	8102d66 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8102d54:	68bb      	ldr	r3, [r7, #8]
 8102d56:	4a1d      	ldr	r2, [pc, #116]	; (8102dcc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8102d58:	4293      	cmp	r3, r2
 8102d5a:	d804      	bhi.n	8102d66 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8102d5c:	68fb      	ldr	r3, [r7, #12]
 8102d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8102d62:	60fb      	str	r3, [r7, #12]
 8102d64:	e027      	b.n	8102db6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8102d66:	68bb      	ldr	r3, [r7, #8]
 8102d68:	4a18      	ldr	r2, [pc, #96]	; (8102dcc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8102d6a:	4293      	cmp	r3, r2
 8102d6c:	d908      	bls.n	8102d80 <ETH_MAC_MDIO_ClkConfig+0x54>
 8102d6e:	68bb      	ldr	r3, [r7, #8]
 8102d70:	4a17      	ldr	r2, [pc, #92]	; (8102dd0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8102d72:	4293      	cmp	r3, r2
 8102d74:	d204      	bcs.n	8102d80 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8102d76:	68fb      	ldr	r3, [r7, #12]
 8102d78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8102d7c:	60fb      	str	r3, [r7, #12]
 8102d7e:	e01a      	b.n	8102db6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8102d80:	68bb      	ldr	r3, [r7, #8]
 8102d82:	4a13      	ldr	r2, [pc, #76]	; (8102dd0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8102d84:	4293      	cmp	r3, r2
 8102d86:	d303      	bcc.n	8102d90 <ETH_MAC_MDIO_ClkConfig+0x64>
 8102d88:	68bb      	ldr	r3, [r7, #8]
 8102d8a:	4a12      	ldr	r2, [pc, #72]	; (8102dd4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d911      	bls.n	8102db4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8102d90:	68bb      	ldr	r3, [r7, #8]
 8102d92:	4a10      	ldr	r2, [pc, #64]	; (8102dd4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8102d94:	4293      	cmp	r3, r2
 8102d96:	d908      	bls.n	8102daa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8102d98:	68bb      	ldr	r3, [r7, #8]
 8102d9a:	4a0f      	ldr	r2, [pc, #60]	; (8102dd8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8102d9c:	4293      	cmp	r3, r2
 8102d9e:	d804      	bhi.n	8102daa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8102da0:	68fb      	ldr	r3, [r7, #12]
 8102da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102da6:	60fb      	str	r3, [r7, #12]
 8102da8:	e005      	b.n	8102db6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8102daa:	68fb      	ldr	r3, [r7, #12]
 8102dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102db0:	60fb      	str	r3, [r7, #12]
 8102db2:	e000      	b.n	8102db6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8102db4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	68fa      	ldr	r2, [r7, #12]
 8102dbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8102dc0:	bf00      	nop
 8102dc2:	3710      	adds	r7, #16
 8102dc4:	46bd      	mov	sp, r7
 8102dc6:	bd80      	pop	{r7, pc}
 8102dc8:	01312cff 	.word	0x01312cff
 8102dcc:	02160ebf 	.word	0x02160ebf
 8102dd0:	03938700 	.word	0x03938700
 8102dd4:	05f5e0ff 	.word	0x05f5e0ff
 8102dd8:	08f0d17f 	.word	0x08f0d17f

08102ddc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8102ddc:	b480      	push	{r7}
 8102dde:	b085      	sub	sp, #20
 8102de0:	af00      	add	r7, sp, #0
 8102de2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102de4:	2300      	movs	r3, #0
 8102de6:	60fb      	str	r3, [r7, #12]
 8102de8:	e01d      	b.n	8102e26 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	68d9      	ldr	r1, [r3, #12]
 8102dee:	68fa      	ldr	r2, [r7, #12]
 8102df0:	4613      	mov	r3, r2
 8102df2:	005b      	lsls	r3, r3, #1
 8102df4:	4413      	add	r3, r2
 8102df6:	00db      	lsls	r3, r3, #3
 8102df8:	440b      	add	r3, r1
 8102dfa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8102dfc:	68bb      	ldr	r3, [r7, #8]
 8102dfe:	2200      	movs	r2, #0
 8102e00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8102e02:	68bb      	ldr	r3, [r7, #8]
 8102e04:	2200      	movs	r2, #0
 8102e06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8102e08:	68bb      	ldr	r3, [r7, #8]
 8102e0a:	2200      	movs	r2, #0
 8102e0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8102e0e:	68bb      	ldr	r3, [r7, #8]
 8102e10:	2200      	movs	r2, #0
 8102e12:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8102e14:	68b9      	ldr	r1, [r7, #8]
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	68fa      	ldr	r2, [r7, #12]
 8102e1a:	3206      	adds	r2, #6
 8102e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102e20:	68fb      	ldr	r3, [r7, #12]
 8102e22:	3301      	adds	r3, #1
 8102e24:	60fb      	str	r3, [r7, #12]
 8102e26:	68fb      	ldr	r3, [r7, #12]
 8102e28:	2b03      	cmp	r3, #3
 8102e2a:	d9de      	bls.n	8102dea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	2200      	movs	r2, #0
 8102e30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102e3a:	330c      	adds	r3, #12
 8102e3c:	2203      	movs	r2, #3
 8102e3e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	68da      	ldr	r2, [r3, #12]
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8102e4c:	3314      	adds	r3, #20
 8102e4e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	68da      	ldr	r2, [r3, #12]
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102e5c:	601a      	str	r2, [r3, #0]
}
 8102e5e:	bf00      	nop
 8102e60:	3714      	adds	r7, #20
 8102e62:	46bd      	mov	sp, r7
 8102e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e68:	4770      	bx	lr

08102e6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8102e6a:	b480      	push	{r7}
 8102e6c:	b085      	sub	sp, #20
 8102e6e:	af00      	add	r7, sp, #0
 8102e70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8102e72:	2300      	movs	r3, #0
 8102e74:	60fb      	str	r3, [r7, #12]
 8102e76:	e024      	b.n	8102ec2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	6919      	ldr	r1, [r3, #16]
 8102e7c:	68fa      	ldr	r2, [r7, #12]
 8102e7e:	4613      	mov	r3, r2
 8102e80:	005b      	lsls	r3, r3, #1
 8102e82:	4413      	add	r3, r2
 8102e84:	00db      	lsls	r3, r3, #3
 8102e86:	440b      	add	r3, r1
 8102e88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8102e8a:	68bb      	ldr	r3, [r7, #8]
 8102e8c:	2200      	movs	r2, #0
 8102e8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8102e90:	68bb      	ldr	r3, [r7, #8]
 8102e92:	2200      	movs	r2, #0
 8102e94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8102e96:	68bb      	ldr	r3, [r7, #8]
 8102e98:	2200      	movs	r2, #0
 8102e9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8102e9c:	68bb      	ldr	r3, [r7, #8]
 8102e9e:	2200      	movs	r2, #0
 8102ea0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8102ea2:	68bb      	ldr	r3, [r7, #8]
 8102ea4:	2200      	movs	r2, #0
 8102ea6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8102ea8:	68bb      	ldr	r3, [r7, #8]
 8102eaa:	2200      	movs	r2, #0
 8102eac:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8102eae:	68ba      	ldr	r2, [r7, #8]
 8102eb0:	6879      	ldr	r1, [r7, #4]
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	3310      	adds	r3, #16
 8102eb6:	009b      	lsls	r3, r3, #2
 8102eb8:	440b      	add	r3, r1
 8102eba:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8102ebc:	68fb      	ldr	r3, [r7, #12]
 8102ebe:	3301      	adds	r3, #1
 8102ec0:	60fb      	str	r3, [r7, #12]
 8102ec2:	68fb      	ldr	r3, [r7, #12]
 8102ec4:	2b03      	cmp	r3, #3
 8102ec6:	d9d7      	bls.n	8102e78 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	2200      	movs	r2, #0
 8102ecc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	2200      	movs	r2, #0
 8102ed2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	2200      	movs	r2, #0
 8102ed8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	2200      	movs	r2, #0
 8102ede:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	2200      	movs	r2, #0
 8102ee4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102eee:	3310      	adds	r3, #16
 8102ef0:	2203      	movs	r2, #3
 8102ef2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	691a      	ldr	r2, [r3, #16]
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	681b      	ldr	r3, [r3, #0]
 8102efc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8102f00:	331c      	adds	r3, #28
 8102f02:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	691b      	ldr	r3, [r3, #16]
 8102f08:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102f14:	3308      	adds	r3, #8
 8102f16:	601a      	str	r2, [r3, #0]
}
 8102f18:	bf00      	nop
 8102f1a:	3714      	adds	r7, #20
 8102f1c:	46bd      	mov	sp, r7
 8102f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f22:	4770      	bx	lr

08102f24 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8102f24:	b480      	push	{r7}
 8102f26:	b08d      	sub	sp, #52	; 0x34
 8102f28:	af00      	add	r7, sp, #0
 8102f2a:	60f8      	str	r0, [r7, #12]
 8102f2c:	60b9      	str	r1, [r7, #8]
 8102f2e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8102f30:	68fb      	ldr	r3, [r7, #12]
 8102f32:	3318      	adds	r3, #24
 8102f34:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8102f36:	697b      	ldr	r3, [r7, #20]
 8102f38:	691b      	ldr	r3, [r3, #16]
 8102f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8102f3c:	697b      	ldr	r3, [r7, #20]
 8102f3e:	691b      	ldr	r3, [r3, #16]
 8102f40:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8102f42:	2300      	movs	r3, #0
 8102f44:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8102f46:	697b      	ldr	r3, [r7, #20]
 8102f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102f4e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8102f50:	68bb      	ldr	r3, [r7, #8]
 8102f52:	689b      	ldr	r3, [r3, #8]
 8102f54:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8102f56:	2300      	movs	r3, #0
 8102f58:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8102f5a:	6a3b      	ldr	r3, [r7, #32]
 8102f5c:	68db      	ldr	r3, [r3, #12]
 8102f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8102f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8102f66:	d007      	beq.n	8102f78 <ETH_Prepare_Tx_Descriptors+0x54>
 8102f68:	697a      	ldr	r2, [r7, #20]
 8102f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102f6c:	3304      	adds	r3, #4
 8102f6e:	009b      	lsls	r3, r3, #2
 8102f70:	4413      	add	r3, r2
 8102f72:	685b      	ldr	r3, [r3, #4]
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d001      	beq.n	8102f7c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8102f78:	2302      	movs	r3, #2
 8102f7a:	e24b      	b.n	8103414 <ETH_Prepare_Tx_Descriptors+0x4f0>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8102f7c:	68bb      	ldr	r3, [r7, #8]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	f003 0304 	and.w	r3, r3, #4
 8102f84:	2b00      	cmp	r3, #0
 8102f86:	d044      	beq.n	8103012 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8102f88:	6a3b      	ldr	r3, [r7, #32]
 8102f8a:	68db      	ldr	r3, [r3, #12]
 8102f8c:	0c1b      	lsrs	r3, r3, #16
 8102f8e:	041b      	lsls	r3, r3, #16
 8102f90:	68ba      	ldr	r2, [r7, #8]
 8102f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8102f94:	431a      	orrs	r2, r3
 8102f96:	6a3b      	ldr	r3, [r7, #32]
 8102f98:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8102f9a:	6a3b      	ldr	r3, [r7, #32]
 8102f9c:	68db      	ldr	r3, [r3, #12]
 8102f9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8102fa2:	6a3b      	ldr	r3, [r7, #32]
 8102fa4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102fac:	68fb      	ldr	r3, [r7, #12]
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8102fb4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8102fb6:	68bb      	ldr	r3, [r7, #8]
 8102fb8:	681b      	ldr	r3, [r3, #0]
 8102fba:	f003 0308 	and.w	r3, r3, #8
 8102fbe:	2b00      	cmp	r3, #0
 8102fc0:	d027      	beq.n	8103012 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8102fc2:	6a3b      	ldr	r3, [r7, #32]
 8102fc4:	689b      	ldr	r3, [r3, #8]
 8102fc6:	b29a      	uxth	r2, r3
 8102fc8:	68bb      	ldr	r3, [r7, #8]
 8102fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fcc:	041b      	lsls	r3, r3, #16
 8102fce:	431a      	orrs	r2, r3
 8102fd0:	6a3b      	ldr	r3, [r7, #32]
 8102fd2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8102fd4:	6a3b      	ldr	r3, [r7, #32]
 8102fd6:	68db      	ldr	r3, [r3, #12]
 8102fd8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8102fdc:	6a3b      	ldr	r3, [r7, #32]
 8102fde:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8102fe0:	6a3b      	ldr	r3, [r7, #32]
 8102fe2:	68db      	ldr	r3, [r3, #12]
 8102fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8102fe8:	68bb      	ldr	r3, [r7, #8]
 8102fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102fec:	431a      	orrs	r2, r3
 8102fee:	6a3b      	ldr	r3, [r7, #32]
 8102ff0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8102ff2:	68fb      	ldr	r3, [r7, #12]
 8102ff4:	681b      	ldr	r3, [r3, #0]
 8102ff6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102ff8:	68fb      	ldr	r3, [r7, #12]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8103000:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8103002:	68fb      	ldr	r3, [r7, #12]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8103008:	68fb      	ldr	r3, [r7, #12]
 810300a:	681b      	ldr	r3, [r3, #0]
 810300c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8103010:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8103012:	68bb      	ldr	r3, [r7, #8]
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	f003 0310 	and.w	r3, r3, #16
 810301a:	2b00      	cmp	r3, #0
 810301c:	d010      	beq.n	8103040 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 810301e:	6a3b      	ldr	r3, [r7, #32]
 8103020:	689b      	ldr	r3, [r3, #8]
 8103022:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8103026:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810302a:	68ba      	ldr	r2, [r7, #8]
 810302c:	6992      	ldr	r2, [r2, #24]
 810302e:	431a      	orrs	r2, r3
 8103030:	6a3b      	ldr	r3, [r7, #32]
 8103032:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8103034:	6a3b      	ldr	r3, [r7, #32]
 8103036:	68db      	ldr	r3, [r3, #12]
 8103038:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 810303c:	6a3b      	ldr	r3, [r7, #32]
 810303e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8103040:	68bb      	ldr	r3, [r7, #8]
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	f003 0304 	and.w	r3, r3, #4
 8103048:	2b00      	cmp	r3, #0
 810304a:	d105      	bne.n	8103058 <ETH_Prepare_Tx_Descriptors+0x134>
 810304c:	68bb      	ldr	r3, [r7, #8]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	f003 0310 	and.w	r3, r3, #16
 8103054:	2b00      	cmp	r3, #0
 8103056:	d030      	beq.n	81030ba <ETH_Prepare_Tx_Descriptors+0x196>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8103058:	6a3b      	ldr	r3, [r7, #32]
 810305a:	68db      	ldr	r3, [r3, #12]
 810305c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8103060:	6a3b      	ldr	r3, [r7, #32]
 8103062:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8103064:	6a3b      	ldr	r3, [r7, #32]
 8103066:	68db      	ldr	r3, [r3, #12]
 8103068:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 810306c:	6a3b      	ldr	r3, [r7, #32]
 810306e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8103070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103072:	3301      	adds	r3, #1
 8103074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103078:	2b03      	cmp	r3, #3
 810307a:	d902      	bls.n	8103082 <ETH_Prepare_Tx_Descriptors+0x15e>
 810307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810307e:	3b04      	subs	r3, #4
 8103080:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8103082:	697b      	ldr	r3, [r7, #20]
 8103084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810308a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 810308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810308e:	3301      	adds	r3, #1
 8103090:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8103092:	6a3b      	ldr	r3, [r7, #32]
 8103094:	68db      	ldr	r3, [r3, #12]
 8103096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810309a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810309e:	d10c      	bne.n	81030ba <ETH_Prepare_Tx_Descriptors+0x196>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 81030a0:	697b      	ldr	r3, [r7, #20]
 81030a2:	693a      	ldr	r2, [r7, #16]
 81030a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81030a8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 81030aa:	6a3b      	ldr	r3, [r7, #32]
 81030ac:	68db      	ldr	r3, [r3, #12]
 81030ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81030b2:	6a3b      	ldr	r3, [r7, #32]
 81030b4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 81030b6:	2302      	movs	r3, #2
 81030b8:	e1ac      	b.n	8103414 <ETH_Prepare_Tx_Descriptors+0x4f0>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 81030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030bc:	3301      	adds	r3, #1
 81030be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 81030c0:	69fb      	ldr	r3, [r7, #28]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	461a      	mov	r2, r3
 81030c6:	6a3b      	ldr	r3, [r7, #32]
 81030c8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 81030ca:	6a3b      	ldr	r3, [r7, #32]
 81030cc:	689b      	ldr	r3, [r3, #8]
 81030ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 81030d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81030d6:	69fa      	ldr	r2, [r7, #28]
 81030d8:	6852      	ldr	r2, [r2, #4]
 81030da:	431a      	orrs	r2, r3
 81030dc:	6a3b      	ldr	r3, [r7, #32]
 81030de:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 81030e0:	69fb      	ldr	r3, [r7, #28]
 81030e2:	689b      	ldr	r3, [r3, #8]
 81030e4:	2b00      	cmp	r3, #0
 81030e6:	d014      	beq.n	8103112 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 81030e8:	69fb      	ldr	r3, [r7, #28]
 81030ea:	689b      	ldr	r3, [r3, #8]
 81030ec:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 81030ee:	69fb      	ldr	r3, [r7, #28]
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	461a      	mov	r2, r3
 81030f4:	6a3b      	ldr	r3, [r7, #32]
 81030f6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 81030f8:	6a3b      	ldr	r3, [r7, #32]
 81030fa:	689b      	ldr	r3, [r3, #8]
 81030fc:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8103100:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8103104:	69fa      	ldr	r2, [r7, #28]
 8103106:	6852      	ldr	r2, [r2, #4]
 8103108:	0412      	lsls	r2, r2, #16
 810310a:	431a      	orrs	r2, r3
 810310c:	6a3b      	ldr	r3, [r7, #32]
 810310e:	609a      	str	r2, [r3, #8]
 8103110:	e00a      	b.n	8103128 <ETH_Prepare_Tx_Descriptors+0x204>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8103112:	6a3b      	ldr	r3, [r7, #32]
 8103114:	2200      	movs	r2, #0
 8103116:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8103118:	6a3b      	ldr	r3, [r7, #32]
 810311a:	689b      	ldr	r3, [r3, #8]
 810311c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8103120:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8103124:	6a3a      	ldr	r2, [r7, #32]
 8103126:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8103128:	68bb      	ldr	r3, [r7, #8]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	f003 0310 	and.w	r3, r3, #16
 8103130:	2b00      	cmp	r3, #0
 8103132:	d019      	beq.n	8103168 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8103134:	6a3b      	ldr	r3, [r7, #32]
 8103136:	68db      	ldr	r3, [r3, #12]
 8103138:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 810313c:	68bb      	ldr	r3, [r7, #8]
 810313e:	6a1b      	ldr	r3, [r3, #32]
 8103140:	04db      	lsls	r3, r3, #19
 8103142:	431a      	orrs	r2, r3
 8103144:	6a3b      	ldr	r3, [r7, #32]
 8103146:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8103148:	6a3b      	ldr	r3, [r7, #32]
 810314a:	68db      	ldr	r3, [r3, #12]
 810314c:	0c9b      	lsrs	r3, r3, #18
 810314e:	049b      	lsls	r3, r3, #18
 8103150:	68ba      	ldr	r2, [r7, #8]
 8103152:	69d2      	ldr	r2, [r2, #28]
 8103154:	431a      	orrs	r2, r3
 8103156:	6a3b      	ldr	r3, [r7, #32]
 8103158:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810315a:	6a3b      	ldr	r3, [r7, #32]
 810315c:	68db      	ldr	r3, [r3, #12]
 810315e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103162:	6a3b      	ldr	r3, [r7, #32]
 8103164:	60da      	str	r2, [r3, #12]
 8103166:	e028      	b.n	81031ba <ETH_Prepare_Tx_Descriptors+0x296>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8103168:	6a3b      	ldr	r3, [r7, #32]
 810316a:	68db      	ldr	r3, [r3, #12]
 810316c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8103170:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8103174:	68ba      	ldr	r2, [r7, #8]
 8103176:	6852      	ldr	r2, [r2, #4]
 8103178:	431a      	orrs	r2, r3
 810317a:	6a3b      	ldr	r3, [r7, #32]
 810317c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 810317e:	68bb      	ldr	r3, [r7, #8]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	f003 0301 	and.w	r3, r3, #1
 8103186:	2b00      	cmp	r3, #0
 8103188:	d008      	beq.n	810319c <ETH_Prepare_Tx_Descriptors+0x278>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810318a:	6a3b      	ldr	r3, [r7, #32]
 810318c:	68db      	ldr	r3, [r3, #12]
 810318e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103192:	68bb      	ldr	r3, [r7, #8]
 8103194:	695b      	ldr	r3, [r3, #20]
 8103196:	431a      	orrs	r2, r3
 8103198:	6a3b      	ldr	r3, [r7, #32]
 810319a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 810319c:	68bb      	ldr	r3, [r7, #8]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	f003 0320 	and.w	r3, r3, #32
 81031a4:	2b00      	cmp	r3, #0
 81031a6:	d008      	beq.n	81031ba <ETH_Prepare_Tx_Descriptors+0x296>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 81031a8:	6a3b      	ldr	r3, [r7, #32]
 81031aa:	68db      	ldr	r3, [r3, #12]
 81031ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 81031b0:	68bb      	ldr	r3, [r7, #8]
 81031b2:	691b      	ldr	r3, [r3, #16]
 81031b4:	431a      	orrs	r2, r3
 81031b6:	6a3b      	ldr	r3, [r7, #32]
 81031b8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 81031ba:	68bb      	ldr	r3, [r7, #8]
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	f003 0304 	and.w	r3, r3, #4
 81031c2:	2b00      	cmp	r3, #0
 81031c4:	d008      	beq.n	81031d8 <ETH_Prepare_Tx_Descriptors+0x2b4>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 81031c6:	6a3b      	ldr	r3, [r7, #32]
 81031c8:	689b      	ldr	r3, [r3, #8]
 81031ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81031ce:	68bb      	ldr	r3, [r7, #8]
 81031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81031d2:	431a      	orrs	r2, r3
 81031d4:	6a3b      	ldr	r3, [r7, #32]
 81031d6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 81031d8:	6a3b      	ldr	r3, [r7, #32]
 81031da:	68db      	ldr	r3, [r3, #12]
 81031dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 81031e0:	6a3b      	ldr	r3, [r7, #32]
 81031e2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 81031e4:	6a3b      	ldr	r3, [r7, #32]
 81031e6:	68db      	ldr	r3, [r3, #12]
 81031e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 81031ec:	6a3b      	ldr	r3, [r7, #32]
 81031ee:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 81031f0:	6a3b      	ldr	r3, [r7, #32]
 81031f2:	68db      	ldr	r3, [r3, #12]
 81031f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81031f8:	6a3b      	ldr	r3, [r7, #32]
 81031fa:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 81031fc:	68bb      	ldr	r3, [r7, #8]
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	f003 0302 	and.w	r3, r3, #2
 8103204:	2b00      	cmp	r3, #0
 8103206:	f000 80d3 	beq.w	81033b0 <ETH_Prepare_Tx_Descriptors+0x48c>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 810320a:	6a3b      	ldr	r3, [r7, #32]
 810320c:	68db      	ldr	r3, [r3, #12]
 810320e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8103212:	68bb      	ldr	r3, [r7, #8]
 8103214:	68db      	ldr	r3, [r3, #12]
 8103216:	431a      	orrs	r2, r3
 8103218:	6a3b      	ldr	r3, [r7, #32]
 810321a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 810321c:	e0c8      	b.n	81033b0 <ETH_Prepare_Tx_Descriptors+0x48c>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810321e:	6a3b      	ldr	r3, [r7, #32]
 8103220:	68db      	ldr	r3, [r3, #12]
 8103222:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8103226:	6a3b      	ldr	r3, [r7, #32]
 8103228:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810322c:	3301      	adds	r3, #1
 810322e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103232:	2b03      	cmp	r3, #3
 8103234:	d902      	bls.n	810323c <ETH_Prepare_Tx_Descriptors+0x318>
 8103236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103238:	3b04      	subs	r3, #4
 810323a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810323c:	697b      	ldr	r3, [r7, #20]
 810323e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103244:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8103246:	6a3b      	ldr	r3, [r7, #32]
 8103248:	68db      	ldr	r3, [r3, #12]
 810324a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 810324e:	6a3b      	ldr	r3, [r7, #32]
 8103250:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8103252:	6a3b      	ldr	r3, [r7, #32]
 8103254:	68db      	ldr	r3, [r3, #12]
 8103256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810325a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810325e:	d007      	beq.n	8103270 <ETH_Prepare_Tx_Descriptors+0x34c>
 8103260:	697a      	ldr	r2, [r7, #20]
 8103262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103264:	3304      	adds	r3, #4
 8103266:	009b      	lsls	r3, r3, #2
 8103268:	4413      	add	r3, r2
 810326a:	685b      	ldr	r3, [r3, #4]
 810326c:	2b00      	cmp	r3, #0
 810326e:	d026      	beq.n	81032be <ETH_Prepare_Tx_Descriptors+0x39a>
    {
      descidx = firstdescidx;
 8103270:	693b      	ldr	r3, [r7, #16]
 8103272:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8103274:	697b      	ldr	r3, [r7, #20]
 8103276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810327c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 810327e:	2300      	movs	r3, #0
 8103280:	627b      	str	r3, [r7, #36]	; 0x24
 8103282:	e016      	b.n	81032b2 <ETH_Prepare_Tx_Descriptors+0x38e>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8103284:	6a3b      	ldr	r3, [r7, #32]
 8103286:	68db      	ldr	r3, [r3, #12]
 8103288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810328c:	6a3b      	ldr	r3, [r7, #32]
 810328e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8103290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103292:	3301      	adds	r3, #1
 8103294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103298:	2b03      	cmp	r3, #3
 810329a:	d902      	bls.n	81032a2 <ETH_Prepare_Tx_Descriptors+0x37e>
 810329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810329e:	3b04      	subs	r3, #4
 81032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81032a2:	697b      	ldr	r3, [r7, #20]
 81032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81032a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81032aa:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 81032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81032ae:	3301      	adds	r3, #1
 81032b0:	627b      	str	r3, [r7, #36]	; 0x24
 81032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81032b6:	429a      	cmp	r2, r3
 81032b8:	d3e4      	bcc.n	8103284 <ETH_Prepare_Tx_Descriptors+0x360>
      }

      return HAL_ETH_ERROR_BUSY;
 81032ba:	2302      	movs	r3, #2
 81032bc:	e0aa      	b.n	8103414 <ETH_Prepare_Tx_Descriptors+0x4f0>
    }

    descnbr += 1U;
 81032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81032c0:	3301      	adds	r3, #1
 81032c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 81032c4:	69fb      	ldr	r3, [r7, #28]
 81032c6:	689b      	ldr	r3, [r3, #8]
 81032c8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 81032ca:	69fb      	ldr	r3, [r7, #28]
 81032cc:	681b      	ldr	r3, [r3, #0]
 81032ce:	461a      	mov	r2, r3
 81032d0:	6a3b      	ldr	r3, [r7, #32]
 81032d2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 81032d4:	6a3b      	ldr	r3, [r7, #32]
 81032d6:	689b      	ldr	r3, [r3, #8]
 81032d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 81032dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81032e0:	69fa      	ldr	r2, [r7, #28]
 81032e2:	6852      	ldr	r2, [r2, #4]
 81032e4:	431a      	orrs	r2, r3
 81032e6:	6a3b      	ldr	r3, [r7, #32]
 81032e8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 81032ea:	69fb      	ldr	r3, [r7, #28]
 81032ec:	689b      	ldr	r3, [r3, #8]
 81032ee:	2b00      	cmp	r3, #0
 81032f0:	d014      	beq.n	810331c <ETH_Prepare_Tx_Descriptors+0x3f8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 81032f2:	69fb      	ldr	r3, [r7, #28]
 81032f4:	689b      	ldr	r3, [r3, #8]
 81032f6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 81032f8:	69fb      	ldr	r3, [r7, #28]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	461a      	mov	r2, r3
 81032fe:	6a3b      	ldr	r3, [r7, #32]
 8103300:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8103302:	6a3b      	ldr	r3, [r7, #32]
 8103304:	689b      	ldr	r3, [r3, #8]
 8103306:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 810330a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 810330e:	69fa      	ldr	r2, [r7, #28]
 8103310:	6852      	ldr	r2, [r2, #4]
 8103312:	0412      	lsls	r2, r2, #16
 8103314:	431a      	orrs	r2, r3
 8103316:	6a3b      	ldr	r3, [r7, #32]
 8103318:	609a      	str	r2, [r3, #8]
 810331a:	e00a      	b.n	8103332 <ETH_Prepare_Tx_Descriptors+0x40e>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 810331c:	6a3b      	ldr	r3, [r7, #32]
 810331e:	2200      	movs	r2, #0
 8103320:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8103322:	6a3b      	ldr	r3, [r7, #32]
 8103324:	689b      	ldr	r3, [r3, #8]
 8103326:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 810332a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 810332e:	6a3a      	ldr	r2, [r7, #32]
 8103330:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8103332:	68bb      	ldr	r3, [r7, #8]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	f003 0310 	and.w	r3, r3, #16
 810333a:	2b00      	cmp	r3, #0
 810333c:	d00f      	beq.n	810335e <ETH_Prepare_Tx_Descriptors+0x43a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810333e:	6a3b      	ldr	r3, [r7, #32]
 8103340:	68db      	ldr	r3, [r3, #12]
 8103342:	0c9b      	lsrs	r3, r3, #18
 8103344:	049b      	lsls	r3, r3, #18
 8103346:	68ba      	ldr	r2, [r7, #8]
 8103348:	69d2      	ldr	r2, [r2, #28]
 810334a:	431a      	orrs	r2, r3
 810334c:	6a3b      	ldr	r3, [r7, #32]
 810334e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8103350:	6a3b      	ldr	r3, [r7, #32]
 8103352:	68db      	ldr	r3, [r3, #12]
 8103354:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103358:	6a3b      	ldr	r3, [r7, #32]
 810335a:	60da      	str	r2, [r3, #12]
 810335c:	e019      	b.n	8103392 <ETH_Prepare_Tx_Descriptors+0x46e>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810335e:	6a3b      	ldr	r3, [r7, #32]
 8103360:	68db      	ldr	r3, [r3, #12]
 8103362:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8103366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810336a:	68ba      	ldr	r2, [r7, #8]
 810336c:	6852      	ldr	r2, [r2, #4]
 810336e:	431a      	orrs	r2, r3
 8103370:	6a3b      	ldr	r3, [r7, #32]
 8103372:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8103374:	68bb      	ldr	r3, [r7, #8]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	f003 0301 	and.w	r3, r3, #1
 810337c:	2b00      	cmp	r3, #0
 810337e:	d008      	beq.n	8103392 <ETH_Prepare_Tx_Descriptors+0x46e>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8103380:	6a3b      	ldr	r3, [r7, #32]
 8103382:	68db      	ldr	r3, [r3, #12]
 8103384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103388:	68bb      	ldr	r3, [r7, #8]
 810338a:	695b      	ldr	r3, [r3, #20]
 810338c:	431a      	orrs	r2, r3
 810338e:	6a3b      	ldr	r3, [r7, #32]
 8103390:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8103392:	69bb      	ldr	r3, [r7, #24]
 8103394:	3301      	adds	r3, #1
 8103396:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8103398:	6a3b      	ldr	r3, [r7, #32]
 810339a:	68db      	ldr	r3, [r3, #12]
 810339c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81033a0:	6a3b      	ldr	r3, [r7, #32]
 81033a2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 81033a4:	6a3b      	ldr	r3, [r7, #32]
 81033a6:	68db      	ldr	r3, [r3, #12]
 81033a8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 81033ac:	6a3b      	ldr	r3, [r7, #32]
 81033ae:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 81033b0:	69fb      	ldr	r3, [r7, #28]
 81033b2:	689b      	ldr	r3, [r3, #8]
 81033b4:	2b00      	cmp	r3, #0
 81033b6:	f47f af32 	bne.w	810321e <ETH_Prepare_Tx_Descriptors+0x2fa>
  }

  if(ItMode != ((uint32_t)RESET))
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d006      	beq.n	81033ce <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 81033c0:	6a3b      	ldr	r3, [r7, #32]
 81033c2:	689b      	ldr	r3, [r3, #8]
 81033c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81033c8:	6a3b      	ldr	r3, [r7, #32]
 81033ca:	609a      	str	r2, [r3, #8]
 81033cc:	e005      	b.n	81033da <ETH_Prepare_Tx_Descriptors+0x4b6>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 81033ce:	6a3b      	ldr	r3, [r7, #32]
 81033d0:	689b      	ldr	r3, [r3, #8]
 81033d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81033d6:	6a3b      	ldr	r3, [r7, #32]
 81033d8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 81033da:	6a3b      	ldr	r3, [r7, #32]
 81033dc:	68db      	ldr	r3, [r3, #12]
 81033de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81033e2:	6a3b      	ldr	r3, [r7, #32]
 81033e4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 81033e6:	697b      	ldr	r3, [r7, #20]
 81033e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81033ea:	6979      	ldr	r1, [r7, #20]
 81033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81033ee:	3304      	adds	r3, #4
 81033f0:	009b      	lsls	r3, r3, #2
 81033f2:	440b      	add	r3, r1
 81033f4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 81033f6:	697b      	ldr	r3, [r7, #20]
 81033f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81033fa:	611a      	str	r2, [r3, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81033fc:	b672      	cpsid	i
}
 81033fe:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8103400:	697b      	ldr	r3, [r7, #20]
 8103402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8103404:	69bb      	ldr	r3, [r7, #24]
 8103406:	4413      	add	r3, r2
 8103408:	1c5a      	adds	r2, r3, #1
 810340a:	697b      	ldr	r3, [r7, #20]
 810340c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 810340e:	b662      	cpsie	i
}
 8103410:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8103412:	2300      	movs	r3, #0
}
 8103414:	4618      	mov	r0, r3
 8103416:	3734      	adds	r7, #52	; 0x34
 8103418:	46bd      	mov	sp, r7
 810341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810341e:	4770      	bx	lr

08103420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103420:	b480      	push	{r7}
 8103422:	b089      	sub	sp, #36	; 0x24
 8103424:	af00      	add	r7, sp, #0
 8103426:	6078      	str	r0, [r7, #4]
 8103428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810342a:	2300      	movs	r3, #0
 810342c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810342e:	4b89      	ldr	r3, [pc, #548]	; (8103654 <HAL_GPIO_Init+0x234>)
 8103430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103432:	e194      	b.n	810375e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103434:	683b      	ldr	r3, [r7, #0]
 8103436:	681a      	ldr	r2, [r3, #0]
 8103438:	2101      	movs	r1, #1
 810343a:	69fb      	ldr	r3, [r7, #28]
 810343c:	fa01 f303 	lsl.w	r3, r1, r3
 8103440:	4013      	ands	r3, r2
 8103442:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103444:	693b      	ldr	r3, [r7, #16]
 8103446:	2b00      	cmp	r3, #0
 8103448:	f000 8186 	beq.w	8103758 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810344c:	683b      	ldr	r3, [r7, #0]
 810344e:	685b      	ldr	r3, [r3, #4]
 8103450:	f003 0303 	and.w	r3, r3, #3
 8103454:	2b01      	cmp	r3, #1
 8103456:	d005      	beq.n	8103464 <HAL_GPIO_Init+0x44>
 8103458:	683b      	ldr	r3, [r7, #0]
 810345a:	685b      	ldr	r3, [r3, #4]
 810345c:	f003 0303 	and.w	r3, r3, #3
 8103460:	2b02      	cmp	r3, #2
 8103462:	d130      	bne.n	81034c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	689b      	ldr	r3, [r3, #8]
 8103468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810346a:	69fb      	ldr	r3, [r7, #28]
 810346c:	005b      	lsls	r3, r3, #1
 810346e:	2203      	movs	r2, #3
 8103470:	fa02 f303 	lsl.w	r3, r2, r3
 8103474:	43db      	mvns	r3, r3
 8103476:	69ba      	ldr	r2, [r7, #24]
 8103478:	4013      	ands	r3, r2
 810347a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810347c:	683b      	ldr	r3, [r7, #0]
 810347e:	68da      	ldr	r2, [r3, #12]
 8103480:	69fb      	ldr	r3, [r7, #28]
 8103482:	005b      	lsls	r3, r3, #1
 8103484:	fa02 f303 	lsl.w	r3, r2, r3
 8103488:	69ba      	ldr	r2, [r7, #24]
 810348a:	4313      	orrs	r3, r2
 810348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	69ba      	ldr	r2, [r7, #24]
 8103492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	685b      	ldr	r3, [r3, #4]
 8103498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810349a:	2201      	movs	r2, #1
 810349c:	69fb      	ldr	r3, [r7, #28]
 810349e:	fa02 f303 	lsl.w	r3, r2, r3
 81034a2:	43db      	mvns	r3, r3
 81034a4:	69ba      	ldr	r2, [r7, #24]
 81034a6:	4013      	ands	r3, r2
 81034a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81034aa:	683b      	ldr	r3, [r7, #0]
 81034ac:	685b      	ldr	r3, [r3, #4]
 81034ae:	091b      	lsrs	r3, r3, #4
 81034b0:	f003 0201 	and.w	r2, r3, #1
 81034b4:	69fb      	ldr	r3, [r7, #28]
 81034b6:	fa02 f303 	lsl.w	r3, r2, r3
 81034ba:	69ba      	ldr	r2, [r7, #24]
 81034bc:	4313      	orrs	r3, r2
 81034be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	69ba      	ldr	r2, [r7, #24]
 81034c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81034c6:	683b      	ldr	r3, [r7, #0]
 81034c8:	685b      	ldr	r3, [r3, #4]
 81034ca:	f003 0303 	and.w	r3, r3, #3
 81034ce:	2b03      	cmp	r3, #3
 81034d0:	d017      	beq.n	8103502 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	68db      	ldr	r3, [r3, #12]
 81034d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81034d8:	69fb      	ldr	r3, [r7, #28]
 81034da:	005b      	lsls	r3, r3, #1
 81034dc:	2203      	movs	r2, #3
 81034de:	fa02 f303 	lsl.w	r3, r2, r3
 81034e2:	43db      	mvns	r3, r3
 81034e4:	69ba      	ldr	r2, [r7, #24]
 81034e6:	4013      	ands	r3, r2
 81034e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81034ea:	683b      	ldr	r3, [r7, #0]
 81034ec:	689a      	ldr	r2, [r3, #8]
 81034ee:	69fb      	ldr	r3, [r7, #28]
 81034f0:	005b      	lsls	r3, r3, #1
 81034f2:	fa02 f303 	lsl.w	r3, r2, r3
 81034f6:	69ba      	ldr	r2, [r7, #24]
 81034f8:	4313      	orrs	r3, r2
 81034fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	69ba      	ldr	r2, [r7, #24]
 8103500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103502:	683b      	ldr	r3, [r7, #0]
 8103504:	685b      	ldr	r3, [r3, #4]
 8103506:	f003 0303 	and.w	r3, r3, #3
 810350a:	2b02      	cmp	r3, #2
 810350c:	d123      	bne.n	8103556 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810350e:	69fb      	ldr	r3, [r7, #28]
 8103510:	08da      	lsrs	r2, r3, #3
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	3208      	adds	r2, #8
 8103516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810351c:	69fb      	ldr	r3, [r7, #28]
 810351e:	f003 0307 	and.w	r3, r3, #7
 8103522:	009b      	lsls	r3, r3, #2
 8103524:	220f      	movs	r2, #15
 8103526:	fa02 f303 	lsl.w	r3, r2, r3
 810352a:	43db      	mvns	r3, r3
 810352c:	69ba      	ldr	r2, [r7, #24]
 810352e:	4013      	ands	r3, r2
 8103530:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103532:	683b      	ldr	r3, [r7, #0]
 8103534:	691a      	ldr	r2, [r3, #16]
 8103536:	69fb      	ldr	r3, [r7, #28]
 8103538:	f003 0307 	and.w	r3, r3, #7
 810353c:	009b      	lsls	r3, r3, #2
 810353e:	fa02 f303 	lsl.w	r3, r2, r3
 8103542:	69ba      	ldr	r2, [r7, #24]
 8103544:	4313      	orrs	r3, r2
 8103546:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103548:	69fb      	ldr	r3, [r7, #28]
 810354a:	08da      	lsrs	r2, r3, #3
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	3208      	adds	r2, #8
 8103550:	69b9      	ldr	r1, [r7, #24]
 8103552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	681b      	ldr	r3, [r3, #0]
 810355a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810355c:	69fb      	ldr	r3, [r7, #28]
 810355e:	005b      	lsls	r3, r3, #1
 8103560:	2203      	movs	r2, #3
 8103562:	fa02 f303 	lsl.w	r3, r2, r3
 8103566:	43db      	mvns	r3, r3
 8103568:	69ba      	ldr	r2, [r7, #24]
 810356a:	4013      	ands	r3, r2
 810356c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810356e:	683b      	ldr	r3, [r7, #0]
 8103570:	685b      	ldr	r3, [r3, #4]
 8103572:	f003 0203 	and.w	r2, r3, #3
 8103576:	69fb      	ldr	r3, [r7, #28]
 8103578:	005b      	lsls	r3, r3, #1
 810357a:	fa02 f303 	lsl.w	r3, r2, r3
 810357e:	69ba      	ldr	r2, [r7, #24]
 8103580:	4313      	orrs	r3, r2
 8103582:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	69ba      	ldr	r2, [r7, #24]
 8103588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810358a:	683b      	ldr	r3, [r7, #0]
 810358c:	685b      	ldr	r3, [r3, #4]
 810358e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103592:	2b00      	cmp	r3, #0
 8103594:	f000 80e0 	beq.w	8103758 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103598:	4b2f      	ldr	r3, [pc, #188]	; (8103658 <HAL_GPIO_Init+0x238>)
 810359a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810359e:	4a2e      	ldr	r2, [pc, #184]	; (8103658 <HAL_GPIO_Init+0x238>)
 81035a0:	f043 0302 	orr.w	r3, r3, #2
 81035a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81035a8:	4b2b      	ldr	r3, [pc, #172]	; (8103658 <HAL_GPIO_Init+0x238>)
 81035aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81035ae:	f003 0302 	and.w	r3, r3, #2
 81035b2:	60fb      	str	r3, [r7, #12]
 81035b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81035b6:	4a29      	ldr	r2, [pc, #164]	; (810365c <HAL_GPIO_Init+0x23c>)
 81035b8:	69fb      	ldr	r3, [r7, #28]
 81035ba:	089b      	lsrs	r3, r3, #2
 81035bc:	3302      	adds	r3, #2
 81035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81035c4:	69fb      	ldr	r3, [r7, #28]
 81035c6:	f003 0303 	and.w	r3, r3, #3
 81035ca:	009b      	lsls	r3, r3, #2
 81035cc:	220f      	movs	r2, #15
 81035ce:	fa02 f303 	lsl.w	r3, r2, r3
 81035d2:	43db      	mvns	r3, r3
 81035d4:	69ba      	ldr	r2, [r7, #24]
 81035d6:	4013      	ands	r3, r2
 81035d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	4a20      	ldr	r2, [pc, #128]	; (8103660 <HAL_GPIO_Init+0x240>)
 81035de:	4293      	cmp	r3, r2
 81035e0:	d052      	beq.n	8103688 <HAL_GPIO_Init+0x268>
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	4a1f      	ldr	r2, [pc, #124]	; (8103664 <HAL_GPIO_Init+0x244>)
 81035e6:	4293      	cmp	r3, r2
 81035e8:	d031      	beq.n	810364e <HAL_GPIO_Init+0x22e>
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	4a1e      	ldr	r2, [pc, #120]	; (8103668 <HAL_GPIO_Init+0x248>)
 81035ee:	4293      	cmp	r3, r2
 81035f0:	d02b      	beq.n	810364a <HAL_GPIO_Init+0x22a>
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	4a1d      	ldr	r2, [pc, #116]	; (810366c <HAL_GPIO_Init+0x24c>)
 81035f6:	4293      	cmp	r3, r2
 81035f8:	d025      	beq.n	8103646 <HAL_GPIO_Init+0x226>
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	4a1c      	ldr	r2, [pc, #112]	; (8103670 <HAL_GPIO_Init+0x250>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d01f      	beq.n	8103642 <HAL_GPIO_Init+0x222>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	4a1b      	ldr	r2, [pc, #108]	; (8103674 <HAL_GPIO_Init+0x254>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d019      	beq.n	810363e <HAL_GPIO_Init+0x21e>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	4a1a      	ldr	r2, [pc, #104]	; (8103678 <HAL_GPIO_Init+0x258>)
 810360e:	4293      	cmp	r3, r2
 8103610:	d013      	beq.n	810363a <HAL_GPIO_Init+0x21a>
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	4a19      	ldr	r2, [pc, #100]	; (810367c <HAL_GPIO_Init+0x25c>)
 8103616:	4293      	cmp	r3, r2
 8103618:	d00d      	beq.n	8103636 <HAL_GPIO_Init+0x216>
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	4a18      	ldr	r2, [pc, #96]	; (8103680 <HAL_GPIO_Init+0x260>)
 810361e:	4293      	cmp	r3, r2
 8103620:	d007      	beq.n	8103632 <HAL_GPIO_Init+0x212>
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	4a17      	ldr	r2, [pc, #92]	; (8103684 <HAL_GPIO_Init+0x264>)
 8103626:	4293      	cmp	r3, r2
 8103628:	d101      	bne.n	810362e <HAL_GPIO_Init+0x20e>
 810362a:	2309      	movs	r3, #9
 810362c:	e02d      	b.n	810368a <HAL_GPIO_Init+0x26a>
 810362e:	230a      	movs	r3, #10
 8103630:	e02b      	b.n	810368a <HAL_GPIO_Init+0x26a>
 8103632:	2308      	movs	r3, #8
 8103634:	e029      	b.n	810368a <HAL_GPIO_Init+0x26a>
 8103636:	2307      	movs	r3, #7
 8103638:	e027      	b.n	810368a <HAL_GPIO_Init+0x26a>
 810363a:	2306      	movs	r3, #6
 810363c:	e025      	b.n	810368a <HAL_GPIO_Init+0x26a>
 810363e:	2305      	movs	r3, #5
 8103640:	e023      	b.n	810368a <HAL_GPIO_Init+0x26a>
 8103642:	2304      	movs	r3, #4
 8103644:	e021      	b.n	810368a <HAL_GPIO_Init+0x26a>
 8103646:	2303      	movs	r3, #3
 8103648:	e01f      	b.n	810368a <HAL_GPIO_Init+0x26a>
 810364a:	2302      	movs	r3, #2
 810364c:	e01d      	b.n	810368a <HAL_GPIO_Init+0x26a>
 810364e:	2301      	movs	r3, #1
 8103650:	e01b      	b.n	810368a <HAL_GPIO_Init+0x26a>
 8103652:	bf00      	nop
 8103654:	580000c0 	.word	0x580000c0
 8103658:	58024400 	.word	0x58024400
 810365c:	58000400 	.word	0x58000400
 8103660:	58020000 	.word	0x58020000
 8103664:	58020400 	.word	0x58020400
 8103668:	58020800 	.word	0x58020800
 810366c:	58020c00 	.word	0x58020c00
 8103670:	58021000 	.word	0x58021000
 8103674:	58021400 	.word	0x58021400
 8103678:	58021800 	.word	0x58021800
 810367c:	58021c00 	.word	0x58021c00
 8103680:	58022000 	.word	0x58022000
 8103684:	58022400 	.word	0x58022400
 8103688:	2300      	movs	r3, #0
 810368a:	69fa      	ldr	r2, [r7, #28]
 810368c:	f002 0203 	and.w	r2, r2, #3
 8103690:	0092      	lsls	r2, r2, #2
 8103692:	4093      	lsls	r3, r2
 8103694:	69ba      	ldr	r2, [r7, #24]
 8103696:	4313      	orrs	r3, r2
 8103698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810369a:	4938      	ldr	r1, [pc, #224]	; (810377c <HAL_GPIO_Init+0x35c>)
 810369c:	69fb      	ldr	r3, [r7, #28]
 810369e:	089b      	lsrs	r3, r3, #2
 81036a0:	3302      	adds	r3, #2
 81036a2:	69ba      	ldr	r2, [r7, #24]
 81036a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81036b0:	693b      	ldr	r3, [r7, #16]
 81036b2:	43db      	mvns	r3, r3
 81036b4:	69ba      	ldr	r2, [r7, #24]
 81036b6:	4013      	ands	r3, r2
 81036b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81036ba:	683b      	ldr	r3, [r7, #0]
 81036bc:	685b      	ldr	r3, [r3, #4]
 81036be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81036c2:	2b00      	cmp	r3, #0
 81036c4:	d003      	beq.n	81036ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81036c6:	69ba      	ldr	r2, [r7, #24]
 81036c8:	693b      	ldr	r3, [r7, #16]
 81036ca:	4313      	orrs	r3, r2
 81036cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81036ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81036d2:	69bb      	ldr	r3, [r7, #24]
 81036d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81036da:	685b      	ldr	r3, [r3, #4]
 81036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81036de:	693b      	ldr	r3, [r7, #16]
 81036e0:	43db      	mvns	r3, r3
 81036e2:	69ba      	ldr	r2, [r7, #24]
 81036e4:	4013      	ands	r3, r2
 81036e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81036e8:	683b      	ldr	r3, [r7, #0]
 81036ea:	685b      	ldr	r3, [r3, #4]
 81036ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81036f0:	2b00      	cmp	r3, #0
 81036f2:	d003      	beq.n	81036fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81036f4:	69ba      	ldr	r2, [r7, #24]
 81036f6:	693b      	ldr	r3, [r7, #16]
 81036f8:	4313      	orrs	r3, r2
 81036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81036fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103700:	69bb      	ldr	r3, [r7, #24]
 8103702:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103704:	697b      	ldr	r3, [r7, #20]
 8103706:	685b      	ldr	r3, [r3, #4]
 8103708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810370a:	693b      	ldr	r3, [r7, #16]
 810370c:	43db      	mvns	r3, r3
 810370e:	69ba      	ldr	r2, [r7, #24]
 8103710:	4013      	ands	r3, r2
 8103712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103714:	683b      	ldr	r3, [r7, #0]
 8103716:	685b      	ldr	r3, [r3, #4]
 8103718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810371c:	2b00      	cmp	r3, #0
 810371e:	d003      	beq.n	8103728 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103720:	69ba      	ldr	r2, [r7, #24]
 8103722:	693b      	ldr	r3, [r7, #16]
 8103724:	4313      	orrs	r3, r2
 8103726:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103728:	697b      	ldr	r3, [r7, #20]
 810372a:	69ba      	ldr	r2, [r7, #24]
 810372c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810372e:	697b      	ldr	r3, [r7, #20]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103734:	693b      	ldr	r3, [r7, #16]
 8103736:	43db      	mvns	r3, r3
 8103738:	69ba      	ldr	r2, [r7, #24]
 810373a:	4013      	ands	r3, r2
 810373c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810373e:	683b      	ldr	r3, [r7, #0]
 8103740:	685b      	ldr	r3, [r3, #4]
 8103742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103746:	2b00      	cmp	r3, #0
 8103748:	d003      	beq.n	8103752 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810374a:	69ba      	ldr	r2, [r7, #24]
 810374c:	693b      	ldr	r3, [r7, #16]
 810374e:	4313      	orrs	r3, r2
 8103750:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103752:	697b      	ldr	r3, [r7, #20]
 8103754:	69ba      	ldr	r2, [r7, #24]
 8103756:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103758:	69fb      	ldr	r3, [r7, #28]
 810375a:	3301      	adds	r3, #1
 810375c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810375e:	683b      	ldr	r3, [r7, #0]
 8103760:	681a      	ldr	r2, [r3, #0]
 8103762:	69fb      	ldr	r3, [r7, #28]
 8103764:	fa22 f303 	lsr.w	r3, r2, r3
 8103768:	2b00      	cmp	r3, #0
 810376a:	f47f ae63 	bne.w	8103434 <HAL_GPIO_Init+0x14>
  }
}
 810376e:	bf00      	nop
 8103770:	bf00      	nop
 8103772:	3724      	adds	r7, #36	; 0x24
 8103774:	46bd      	mov	sp, r7
 8103776:	f85d 7b04 	ldr.w	r7, [sp], #4
 810377a:	4770      	bx	lr
 810377c:	58000400 	.word	0x58000400

08103780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103780:	b480      	push	{r7}
 8103782:	b085      	sub	sp, #20
 8103784:	af00      	add	r7, sp, #0
 8103786:	6078      	str	r0, [r7, #4]
 8103788:	460b      	mov	r3, r1
 810378a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	691a      	ldr	r2, [r3, #16]
 8103790:	887b      	ldrh	r3, [r7, #2]
 8103792:	4013      	ands	r3, r2
 8103794:	2b00      	cmp	r3, #0
 8103796:	d002      	beq.n	810379e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8103798:	2301      	movs	r3, #1
 810379a:	73fb      	strb	r3, [r7, #15]
 810379c:	e001      	b.n	81037a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 810379e:	2300      	movs	r3, #0
 81037a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 81037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 81037a4:	4618      	mov	r0, r3
 81037a6:	3714      	adds	r7, #20
 81037a8:	46bd      	mov	sp, r7
 81037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ae:	4770      	bx	lr

081037b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81037b0:	b480      	push	{r7}
 81037b2:	b083      	sub	sp, #12
 81037b4:	af00      	add	r7, sp, #0
 81037b6:	6078      	str	r0, [r7, #4]
 81037b8:	460b      	mov	r3, r1
 81037ba:	807b      	strh	r3, [r7, #2]
 81037bc:	4613      	mov	r3, r2
 81037be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81037c0:	787b      	ldrb	r3, [r7, #1]
 81037c2:	2b00      	cmp	r3, #0
 81037c4:	d003      	beq.n	81037ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81037c6:	887a      	ldrh	r2, [r7, #2]
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81037cc:	e003      	b.n	81037d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81037ce:	887b      	ldrh	r3, [r7, #2]
 81037d0:	041a      	lsls	r2, r3, #16
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	619a      	str	r2, [r3, #24]
}
 81037d6:	bf00      	nop
 81037d8:	370c      	adds	r7, #12
 81037da:	46bd      	mov	sp, r7
 81037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e0:	4770      	bx	lr
	...

081037e4 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 81037e4:	b480      	push	{r7}
 81037e6:	b083      	sub	sp, #12
 81037e8:	af00      	add	r7, sp, #0
 81037ea:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 81037ec:	4a07      	ldr	r2, [pc, #28]	; (810380c <HAL_HSEM_IsSemTaken+0x28>)
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81037f4:	2b00      	cmp	r3, #0
 81037f6:	da01      	bge.n	81037fc <HAL_HSEM_IsSemTaken+0x18>
 81037f8:	2301      	movs	r3, #1
 81037fa:	e000      	b.n	81037fe <HAL_HSEM_IsSemTaken+0x1a>
 81037fc:	2300      	movs	r3, #0
}
 81037fe:	4618      	mov	r0, r3
 8103800:	370c      	adds	r7, #12
 8103802:	46bd      	mov	sp, r7
 8103804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103808:	4770      	bx	lr
 810380a:	bf00      	nop
 810380c:	58026400 	.word	0x58026400

08103810 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103810:	b480      	push	{r7}
 8103812:	b083      	sub	sp, #12
 8103814:	af00      	add	r7, sp, #0
 8103816:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103818:	4b05      	ldr	r3, [pc, #20]	; (8103830 <HAL_HSEM_ActivateNotification+0x20>)
 810381a:	681a      	ldr	r2, [r3, #0]
 810381c:	4904      	ldr	r1, [pc, #16]	; (8103830 <HAL_HSEM_ActivateNotification+0x20>)
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	4313      	orrs	r3, r2
 8103822:	600b      	str	r3, [r1, #0]
#endif
}
 8103824:	bf00      	nop
 8103826:	370c      	adds	r7, #12
 8103828:	46bd      	mov	sp, r7
 810382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810382e:	4770      	bx	lr
 8103830:	58026510 	.word	0x58026510

08103834 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8103834:	b580      	push	{r7, lr}
 8103836:	b084      	sub	sp, #16
 8103838:	af00      	add	r7, sp, #0
 810383a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	2b00      	cmp	r3, #0
 8103840:	d101      	bne.n	8103846 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8103842:	2301      	movs	r3, #1
 8103844:	e099      	b.n	810397a <HAL_LPTIM_Init+0x146>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	685b      	ldr	r3, [r3, #4]
 810384a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8103852:	b2db      	uxtb	r3, r3
 8103854:	2b00      	cmp	r3, #0
 8103856:	d106      	bne.n	8103866 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	2200      	movs	r2, #0
 810385c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8103860:	6878      	ldr	r0, [r7, #4]
 8103862:	f00e f96f 	bl	8111b44 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	2202      	movs	r2, #2
 810386a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	68db      	ldr	r3, [r3, #12]
 8103874:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	685b      	ldr	r3, [r3, #4]
 810387a:	2b01      	cmp	r3, #1
 810387c:	d004      	beq.n	8103888 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103882:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103886:	d103      	bne.n	8103890 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8103888:	68fb      	ldr	r3, [r7, #12]
 810388a:	f023 031e 	bic.w	r3, r3, #30
 810388e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	695b      	ldr	r3, [r3, #20]
 8103894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8103898:	4293      	cmp	r3, r2
 810389a:	d005      	beq.n	81038a8 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 810389c:	68fb      	ldr	r3, [r7, #12]
 810389e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81038a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 81038a6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 81038a8:	68fa      	ldr	r2, [r7, #12]
 81038aa:	4b36      	ldr	r3, [pc, #216]	; (8103984 <HAL_LPTIM_Init+0x150>)
 81038ac:	4013      	ands	r3, r2
 81038ae:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 81038b8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 81038be:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 81038c4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 81038ca:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 81038cc:	68fa      	ldr	r2, [r7, #12]
 81038ce:	4313      	orrs	r3, r2
 81038d0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	685b      	ldr	r3, [r3, #4]
 81038d6:	2b00      	cmp	r3, #0
 81038d8:	d107      	bne.n	81038ea <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 81038e2:	4313      	orrs	r3, r2
 81038e4:	68fa      	ldr	r2, [r7, #12]
 81038e6:	4313      	orrs	r3, r2
 81038e8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	685b      	ldr	r3, [r3, #4]
 81038ee:	2b01      	cmp	r3, #1
 81038f0:	d004      	beq.n	81038fc <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81038fa:	d107      	bne.n	810390c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8103904:	4313      	orrs	r3, r2
 8103906:	68fa      	ldr	r2, [r7, #12]
 8103908:	4313      	orrs	r3, r2
 810390a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	695b      	ldr	r3, [r3, #20]
 8103910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8103914:	4293      	cmp	r3, r2
 8103916:	d00a      	beq.n	810392e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8103920:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8103926:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8103928:	68fa      	ldr	r2, [r7, #12]
 810392a:	4313      	orrs	r3, r2
 810392c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	68fa      	ldr	r2, [r7, #12]
 8103934:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	681b      	ldr	r3, [r3, #0]
 810393a:	4a13      	ldr	r2, [pc, #76]	; (8103988 <HAL_LPTIM_Init+0x154>)
 810393c:	4293      	cmp	r3, r2
 810393e:	d004      	beq.n	810394a <HAL_LPTIM_Init+0x116>
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	681b      	ldr	r3, [r3, #0]
 8103944:	4a11      	ldr	r2, [pc, #68]	; (810398c <HAL_LPTIM_Init+0x158>)
 8103946:	4293      	cmp	r3, r2
 8103948:	d108      	bne.n	810395c <HAL_LPTIM_Init+0x128>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	430a      	orrs	r2, r1
 8103958:	625a      	str	r2, [r3, #36]	; 0x24
 810395a:	e009      	b.n	8103970 <HAL_LPTIM_Init+0x13c>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a0b      	ldr	r2, [pc, #44]	; (8103990 <HAL_LPTIM_Init+0x15c>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d104      	bne.n	8103970 <HAL_LPTIM_Init+0x13c>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	687a      	ldr	r2, [r7, #4]
 810396c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 810396e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	2201      	movs	r2, #1
 8103974:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8103978:	2300      	movs	r3, #0
}
 810397a:	4618      	mov	r0, r3
 810397c:	3710      	adds	r7, #16
 810397e:	46bd      	mov	sp, r7
 8103980:	bd80      	pop	{r7, pc}
 8103982:	bf00      	nop
 8103984:	ff19f1fe 	.word	0xff19f1fe
 8103988:	40002400 	.word	0x40002400
 810398c:	58002400 	.word	0x58002400
 8103990:	58002800 	.word	0x58002800

08103994 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8103994:	b580      	push	{r7, lr}
 8103996:	b082      	sub	sp, #8
 8103998:	af00      	add	r7, sp, #0
 810399a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	f003 0301 	and.w	r3, r3, #1
 81039a6:	2b01      	cmp	r3, #1
 81039a8:	d10d      	bne.n	81039c6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	681b      	ldr	r3, [r3, #0]
 81039ae:	689b      	ldr	r3, [r3, #8]
 81039b0:	f003 0301 	and.w	r3, r3, #1
 81039b4:	2b01      	cmp	r3, #1
 81039b6:	d106      	bne.n	81039c6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	2201      	movs	r2, #1
 81039be:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 81039c0:	6878      	ldr	r0, [r7, #4]
 81039c2:	f000 f882 	bl	8103aca <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	f003 0302 	and.w	r3, r3, #2
 81039d0:	2b02      	cmp	r3, #2
 81039d2:	d10d      	bne.n	81039f0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	689b      	ldr	r3, [r3, #8]
 81039da:	f003 0302 	and.w	r3, r3, #2
 81039de:	2b02      	cmp	r3, #2
 81039e0:	d106      	bne.n	81039f0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	2202      	movs	r2, #2
 81039e8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 81039ea:	6878      	ldr	r0, [r7, #4]
 81039ec:	f000 f877 	bl	8103ade <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	f003 0304 	and.w	r3, r3, #4
 81039fa:	2b04      	cmp	r3, #4
 81039fc:	d10d      	bne.n	8103a1a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	689b      	ldr	r3, [r3, #8]
 8103a04:	f003 0304 	and.w	r3, r3, #4
 8103a08:	2b04      	cmp	r3, #4
 8103a0a:	d106      	bne.n	8103a1a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	2204      	movs	r2, #4
 8103a12:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8103a14:	6878      	ldr	r0, [r7, #4]
 8103a16:	f000 f86c 	bl	8103af2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	681b      	ldr	r3, [r3, #0]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	f003 0308 	and.w	r3, r3, #8
 8103a24:	2b08      	cmp	r3, #8
 8103a26:	d10d      	bne.n	8103a44 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	689b      	ldr	r3, [r3, #8]
 8103a2e:	f003 0308 	and.w	r3, r3, #8
 8103a32:	2b08      	cmp	r3, #8
 8103a34:	d106      	bne.n	8103a44 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	2208      	movs	r2, #8
 8103a3c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8103a3e:	6878      	ldr	r0, [r7, #4]
 8103a40:	f000 f861 	bl	8103b06 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	681b      	ldr	r3, [r3, #0]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	f003 0310 	and.w	r3, r3, #16
 8103a4e:	2b10      	cmp	r3, #16
 8103a50:	d10d      	bne.n	8103a6e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	689b      	ldr	r3, [r3, #8]
 8103a58:	f003 0310 	and.w	r3, r3, #16
 8103a5c:	2b10      	cmp	r3, #16
 8103a5e:	d106      	bne.n	8103a6e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8103a60:	687b      	ldr	r3, [r7, #4]
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	2210      	movs	r2, #16
 8103a66:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8103a68:	6878      	ldr	r0, [r7, #4]
 8103a6a:	f000 f856 	bl	8103b1a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	f003 0320 	and.w	r3, r3, #32
 8103a78:	2b20      	cmp	r3, #32
 8103a7a:	d10d      	bne.n	8103a98 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	689b      	ldr	r3, [r3, #8]
 8103a82:	f003 0320 	and.w	r3, r3, #32
 8103a86:	2b20      	cmp	r3, #32
 8103a88:	d106      	bne.n	8103a98 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	681b      	ldr	r3, [r3, #0]
 8103a8e:	2220      	movs	r2, #32
 8103a90:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8103a92:	6878      	ldr	r0, [r7, #4]
 8103a94:	f000 f84b 	bl	8103b2e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	681b      	ldr	r3, [r3, #0]
 8103a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103aa2:	2b40      	cmp	r3, #64	; 0x40
 8103aa4:	d10d      	bne.n	8103ac2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	689b      	ldr	r3, [r3, #8]
 8103aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103ab0:	2b40      	cmp	r3, #64	; 0x40
 8103ab2:	d106      	bne.n	8103ac2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	2240      	movs	r2, #64	; 0x40
 8103aba:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8103abc:	6878      	ldr	r0, [r7, #4]
 8103abe:	f000 f840 	bl	8103b42 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8103ac2:	bf00      	nop
 8103ac4:	3708      	adds	r7, #8
 8103ac6:	46bd      	mov	sp, r7
 8103ac8:	bd80      	pop	{r7, pc}

08103aca <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8103aca:	b480      	push	{r7}
 8103acc:	b083      	sub	sp, #12
 8103ace:	af00      	add	r7, sp, #0
 8103ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8103ad2:	bf00      	nop
 8103ad4:	370c      	adds	r7, #12
 8103ad6:	46bd      	mov	sp, r7
 8103ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103adc:	4770      	bx	lr

08103ade <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8103ade:	b480      	push	{r7}
 8103ae0:	b083      	sub	sp, #12
 8103ae2:	af00      	add	r7, sp, #0
 8103ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8103ae6:	bf00      	nop
 8103ae8:	370c      	adds	r7, #12
 8103aea:	46bd      	mov	sp, r7
 8103aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103af0:	4770      	bx	lr

08103af2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8103af2:	b480      	push	{r7}
 8103af4:	b083      	sub	sp, #12
 8103af6:	af00      	add	r7, sp, #0
 8103af8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8103afa:	bf00      	nop
 8103afc:	370c      	adds	r7, #12
 8103afe:	46bd      	mov	sp, r7
 8103b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b04:	4770      	bx	lr

08103b06 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8103b06:	b480      	push	{r7}
 8103b08:	b083      	sub	sp, #12
 8103b0a:	af00      	add	r7, sp, #0
 8103b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8103b0e:	bf00      	nop
 8103b10:	370c      	adds	r7, #12
 8103b12:	46bd      	mov	sp, r7
 8103b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b18:	4770      	bx	lr

08103b1a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8103b1a:	b480      	push	{r7}
 8103b1c:	b083      	sub	sp, #12
 8103b1e:	af00      	add	r7, sp, #0
 8103b20:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8103b22:	bf00      	nop
 8103b24:	370c      	adds	r7, #12
 8103b26:	46bd      	mov	sp, r7
 8103b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b2c:	4770      	bx	lr

08103b2e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8103b2e:	b480      	push	{r7}
 8103b30:	b083      	sub	sp, #12
 8103b32:	af00      	add	r7, sp, #0
 8103b34:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8103b36:	bf00      	nop
 8103b38:	370c      	adds	r7, #12
 8103b3a:	46bd      	mov	sp, r7
 8103b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b40:	4770      	bx	lr

08103b42 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8103b42:	b480      	push	{r7}
 8103b44:	b083      	sub	sp, #12
 8103b46:	af00      	add	r7, sp, #0
 8103b48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8103b4a:	bf00      	nop
 8103b4c:	370c      	adds	r7, #12
 8103b4e:	46bd      	mov	sp, r7
 8103b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b54:	4770      	bx	lr
	...

08103b58 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103b58:	b580      	push	{r7, lr}
 8103b5a:	b084      	sub	sp, #16
 8103b5c:	af00      	add	r7, sp, #0
 8103b5e:	60f8      	str	r0, [r7, #12]
 8103b60:	460b      	mov	r3, r1
 8103b62:	607a      	str	r2, [r7, #4]
 8103b64:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103b66:	4b37      	ldr	r3, [pc, #220]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	f023 0201 	bic.w	r2, r3, #1
 8103b6e:	4935      	ldr	r1, [pc, #212]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b70:	68fb      	ldr	r3, [r7, #12]
 8103b72:	4313      	orrs	r3, r2
 8103b74:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	2b00      	cmp	r3, #0
 8103b7a:	d123      	bne.n	8103bc4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103b7c:	f7fd fd7c 	bl	8101678 <HAL_GetCurrentCPUID>
 8103b80:	4603      	mov	r3, r0
 8103b82:	2b03      	cmp	r3, #3
 8103b84:	d158      	bne.n	8103c38 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103b86:	4b2f      	ldr	r3, [pc, #188]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b88:	691b      	ldr	r3, [r3, #16]
 8103b8a:	4a2e      	ldr	r2, [pc, #184]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103b8c:	f023 0301 	bic.w	r3, r3, #1
 8103b90:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103b92:	4b2d      	ldr	r3, [pc, #180]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b94:	691b      	ldr	r3, [r3, #16]
 8103b96:	4a2c      	ldr	r2, [pc, #176]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103b98:	f043 0304 	orr.w	r3, r3, #4
 8103b9c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103b9e:	f3bf 8f4f 	dsb	sy
}
 8103ba2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103ba4:	f3bf 8f6f 	isb	sy
}
 8103ba8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103baa:	7afb      	ldrb	r3, [r7, #11]
 8103bac:	2b01      	cmp	r3, #1
 8103bae:	d101      	bne.n	8103bb4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103bb0:	bf30      	wfi
 8103bb2:	e000      	b.n	8103bb6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103bb4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103bb6:	4b24      	ldr	r3, [pc, #144]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bb8:	691b      	ldr	r3, [r3, #16]
 8103bba:	4a23      	ldr	r2, [pc, #140]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103bbc:	f023 0304 	bic.w	r3, r3, #4
 8103bc0:	6113      	str	r3, [r2, #16]
 8103bc2:	e03c      	b.n	8103c3e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	2b01      	cmp	r3, #1
 8103bc8:	d123      	bne.n	8103c12 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103bca:	f7fd fd55 	bl	8101678 <HAL_GetCurrentCPUID>
 8103bce:	4603      	mov	r3, r0
 8103bd0:	2b01      	cmp	r3, #1
 8103bd2:	d133      	bne.n	8103c3c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103bd4:	4b1b      	ldr	r3, [pc, #108]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bd6:	695b      	ldr	r3, [r3, #20]
 8103bd8:	4a1a      	ldr	r2, [pc, #104]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103bda:	f023 0302 	bic.w	r3, r3, #2
 8103bde:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103be0:	4b19      	ldr	r3, [pc, #100]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103be2:	691b      	ldr	r3, [r3, #16]
 8103be4:	4a18      	ldr	r2, [pc, #96]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103be6:	f043 0304 	orr.w	r3, r3, #4
 8103bea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103bec:	f3bf 8f4f 	dsb	sy
}
 8103bf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103bf2:	f3bf 8f6f 	isb	sy
}
 8103bf6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103bf8:	7afb      	ldrb	r3, [r7, #11]
 8103bfa:	2b01      	cmp	r3, #1
 8103bfc:	d101      	bne.n	8103c02 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103bfe:	bf30      	wfi
 8103c00:	e000      	b.n	8103c04 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103c02:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103c04:	4b10      	ldr	r3, [pc, #64]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c06:	691b      	ldr	r3, [r3, #16]
 8103c08:	4a0f      	ldr	r2, [pc, #60]	; (8103c48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c0a:	f023 0304 	bic.w	r3, r3, #4
 8103c0e:	6113      	str	r3, [r2, #16]
 8103c10:	e015      	b.n	8103c3e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103c12:	f7fd fd31 	bl	8101678 <HAL_GetCurrentCPUID>
 8103c16:	4603      	mov	r3, r0
 8103c18:	2b03      	cmp	r3, #3
 8103c1a:	d106      	bne.n	8103c2a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103c1c:	4b09      	ldr	r3, [pc, #36]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c1e:	691b      	ldr	r3, [r3, #16]
 8103c20:	4a08      	ldr	r2, [pc, #32]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c22:	f023 0304 	bic.w	r3, r3, #4
 8103c26:	6113      	str	r3, [r2, #16]
 8103c28:	e009      	b.n	8103c3e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103c2a:	4b06      	ldr	r3, [pc, #24]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c2c:	695b      	ldr	r3, [r3, #20]
 8103c2e:	4a05      	ldr	r2, [pc, #20]	; (8103c44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c30:	f023 0304 	bic.w	r3, r3, #4
 8103c34:	6153      	str	r3, [r2, #20]
 8103c36:	e002      	b.n	8103c3e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103c38:	bf00      	nop
 8103c3a:	e000      	b.n	8103c3e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103c3c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103c3e:	3710      	adds	r7, #16
 8103c40:	46bd      	mov	sp, r7
 8103c42:	bd80      	pop	{r7, pc}
 8103c44:	58024800 	.word	0x58024800
 8103c48:	e000ed00 	.word	0xe000ed00

08103c4c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103c4c:	b580      	push	{r7, lr}
 8103c4e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103c50:	f7fd fd12 	bl	8101678 <HAL_GetCurrentCPUID>
 8103c54:	4603      	mov	r3, r0
 8103c56:	2b03      	cmp	r3, #3
 8103c58:	d101      	bne.n	8103c5e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103c5a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103c5c:	e001      	b.n	8103c62 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103c5e:	bf40      	sev
    __WFE ();
 8103c60:	bf20      	wfe
}
 8103c62:	bf00      	nop
 8103c64:	bd80      	pop	{r7, pc}
	...

08103c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103c68:	b480      	push	{r7}
 8103c6a:	b089      	sub	sp, #36	; 0x24
 8103c6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103c6e:	4bb3      	ldr	r3, [pc, #716]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c70:	691b      	ldr	r3, [r3, #16]
 8103c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103c76:	2b18      	cmp	r3, #24
 8103c78:	f200 8155 	bhi.w	8103f26 <HAL_RCC_GetSysClockFreq+0x2be>
 8103c7c:	a201      	add	r2, pc, #4	; (adr r2, 8103c84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c82:	bf00      	nop
 8103c84:	08103ce9 	.word	0x08103ce9
 8103c88:	08103f27 	.word	0x08103f27
 8103c8c:	08103f27 	.word	0x08103f27
 8103c90:	08103f27 	.word	0x08103f27
 8103c94:	08103f27 	.word	0x08103f27
 8103c98:	08103f27 	.word	0x08103f27
 8103c9c:	08103f27 	.word	0x08103f27
 8103ca0:	08103f27 	.word	0x08103f27
 8103ca4:	08103d0f 	.word	0x08103d0f
 8103ca8:	08103f27 	.word	0x08103f27
 8103cac:	08103f27 	.word	0x08103f27
 8103cb0:	08103f27 	.word	0x08103f27
 8103cb4:	08103f27 	.word	0x08103f27
 8103cb8:	08103f27 	.word	0x08103f27
 8103cbc:	08103f27 	.word	0x08103f27
 8103cc0:	08103f27 	.word	0x08103f27
 8103cc4:	08103d15 	.word	0x08103d15
 8103cc8:	08103f27 	.word	0x08103f27
 8103ccc:	08103f27 	.word	0x08103f27
 8103cd0:	08103f27 	.word	0x08103f27
 8103cd4:	08103f27 	.word	0x08103f27
 8103cd8:	08103f27 	.word	0x08103f27
 8103cdc:	08103f27 	.word	0x08103f27
 8103ce0:	08103f27 	.word	0x08103f27
 8103ce4:	08103d1b 	.word	0x08103d1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ce8:	4b94      	ldr	r3, [pc, #592]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	f003 0320 	and.w	r3, r3, #32
 8103cf0:	2b00      	cmp	r3, #0
 8103cf2:	d009      	beq.n	8103d08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103cf4:	4b91      	ldr	r3, [pc, #580]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	08db      	lsrs	r3, r3, #3
 8103cfa:	f003 0303 	and.w	r3, r3, #3
 8103cfe:	4a90      	ldr	r2, [pc, #576]	; (8103f40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103d00:	fa22 f303 	lsr.w	r3, r2, r3
 8103d04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103d06:	e111      	b.n	8103f2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103d08:	4b8d      	ldr	r3, [pc, #564]	; (8103f40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103d0a:	61bb      	str	r3, [r7, #24]
    break;
 8103d0c:	e10e      	b.n	8103f2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103d0e:	4b8d      	ldr	r3, [pc, #564]	; (8103f44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103d10:	61bb      	str	r3, [r7, #24]
    break;
 8103d12:	e10b      	b.n	8103f2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103d14:	4b8c      	ldr	r3, [pc, #560]	; (8103f48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103d16:	61bb      	str	r3, [r7, #24]
    break;
 8103d18:	e108      	b.n	8103f2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103d1a:	4b88      	ldr	r3, [pc, #544]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d1e:	f003 0303 	and.w	r3, r3, #3
 8103d22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103d24:	4b85      	ldr	r3, [pc, #532]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d28:	091b      	lsrs	r3, r3, #4
 8103d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103d2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103d30:	4b82      	ldr	r3, [pc, #520]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d34:	f003 0301 	and.w	r3, r3, #1
 8103d38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103d3a:	4b80      	ldr	r3, [pc, #512]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d3e:	08db      	lsrs	r3, r3, #3
 8103d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103d44:	68fa      	ldr	r2, [r7, #12]
 8103d46:	fb02 f303 	mul.w	r3, r2, r3
 8103d4a:	ee07 3a90 	vmov	s15, r3
 8103d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103d56:	693b      	ldr	r3, [r7, #16]
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	f000 80e1 	beq.w	8103f20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103d5e:	697b      	ldr	r3, [r7, #20]
 8103d60:	2b02      	cmp	r3, #2
 8103d62:	f000 8083 	beq.w	8103e6c <HAL_RCC_GetSysClockFreq+0x204>
 8103d66:	697b      	ldr	r3, [r7, #20]
 8103d68:	2b02      	cmp	r3, #2
 8103d6a:	f200 80a1 	bhi.w	8103eb0 <HAL_RCC_GetSysClockFreq+0x248>
 8103d6e:	697b      	ldr	r3, [r7, #20]
 8103d70:	2b00      	cmp	r3, #0
 8103d72:	d003      	beq.n	8103d7c <HAL_RCC_GetSysClockFreq+0x114>
 8103d74:	697b      	ldr	r3, [r7, #20]
 8103d76:	2b01      	cmp	r3, #1
 8103d78:	d056      	beq.n	8103e28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103d7a:	e099      	b.n	8103eb0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103d7c:	4b6f      	ldr	r3, [pc, #444]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d7e:	681b      	ldr	r3, [r3, #0]
 8103d80:	f003 0320 	and.w	r3, r3, #32
 8103d84:	2b00      	cmp	r3, #0
 8103d86:	d02d      	beq.n	8103de4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103d88:	4b6c      	ldr	r3, [pc, #432]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	08db      	lsrs	r3, r3, #3
 8103d8e:	f003 0303 	and.w	r3, r3, #3
 8103d92:	4a6b      	ldr	r2, [pc, #428]	; (8103f40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103d94:	fa22 f303 	lsr.w	r3, r2, r3
 8103d98:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	ee07 3a90 	vmov	s15, r3
 8103da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103da4:	693b      	ldr	r3, [r7, #16]
 8103da6:	ee07 3a90 	vmov	s15, r3
 8103daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103db2:	4b62      	ldr	r3, [pc, #392]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dba:	ee07 3a90 	vmov	s15, r3
 8103dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8103dc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103dde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103de2:	e087      	b.n	8103ef4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103de4:	693b      	ldr	r3, [r7, #16]
 8103de6:	ee07 3a90 	vmov	s15, r3
 8103dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103f50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103df6:	4b51      	ldr	r3, [pc, #324]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dfe:	ee07 3a90 	vmov	s15, r3
 8103e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e26:	e065      	b.n	8103ef4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e28:	693b      	ldr	r3, [r7, #16]
 8103e2a:	ee07 3a90 	vmov	s15, r3
 8103e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103f54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e3a:	4b40      	ldr	r3, [pc, #256]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e42:	ee07 3a90 	vmov	s15, r3
 8103e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e6a:	e043      	b.n	8103ef4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e6c:	693b      	ldr	r3, [r7, #16]
 8103e6e:	ee07 3a90 	vmov	s15, r3
 8103e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103f58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e7e:	4b2f      	ldr	r3, [pc, #188]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e86:	ee07 3a90 	vmov	s15, r3
 8103e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103eae:	e021      	b.n	8103ef4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103eb0:	693b      	ldr	r3, [r7, #16]
 8103eb2:	ee07 3a90 	vmov	s15, r3
 8103eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103eba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103f54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ec2:	4b1e      	ldr	r3, [pc, #120]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103eca:	ee07 3a90 	vmov	s15, r3
 8103ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8103ed6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103f4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103ef2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103ef4:	4b11      	ldr	r3, [pc, #68]	; (8103f3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103ef8:	0a5b      	lsrs	r3, r3, #9
 8103efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103efe:	3301      	adds	r3, #1
 8103f00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103f02:	683b      	ldr	r3, [r7, #0]
 8103f04:	ee07 3a90 	vmov	s15, r3
 8103f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f18:	ee17 3a90 	vmov	r3, s15
 8103f1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103f1e:	e005      	b.n	8103f2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103f20:	2300      	movs	r3, #0
 8103f22:	61bb      	str	r3, [r7, #24]
    break;
 8103f24:	e002      	b.n	8103f2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103f26:	4b07      	ldr	r3, [pc, #28]	; (8103f44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103f28:	61bb      	str	r3, [r7, #24]
    break;
 8103f2a:	bf00      	nop
  }

  return sysclockfreq;
 8103f2c:	69bb      	ldr	r3, [r7, #24]
}
 8103f2e:	4618      	mov	r0, r3
 8103f30:	3724      	adds	r7, #36	; 0x24
 8103f32:	46bd      	mov	sp, r7
 8103f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f38:	4770      	bx	lr
 8103f3a:	bf00      	nop
 8103f3c:	58024400 	.word	0x58024400
 8103f40:	03d09000 	.word	0x03d09000
 8103f44:	003d0900 	.word	0x003d0900
 8103f48:	007a1200 	.word	0x007a1200
 8103f4c:	46000000 	.word	0x46000000
 8103f50:	4c742400 	.word	0x4c742400
 8103f54:	4a742400 	.word	0x4a742400
 8103f58:	4af42400 	.word	0x4af42400

08103f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103f5c:	b580      	push	{r7, lr}
 8103f5e:	b082      	sub	sp, #8
 8103f60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103f62:	f7ff fe81 	bl	8103c68 <HAL_RCC_GetSysClockFreq>
 8103f66:	4602      	mov	r2, r0
 8103f68:	4b11      	ldr	r3, [pc, #68]	; (8103fb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8103f6a:	699b      	ldr	r3, [r3, #24]
 8103f6c:	0a1b      	lsrs	r3, r3, #8
 8103f6e:	f003 030f 	and.w	r3, r3, #15
 8103f72:	4910      	ldr	r1, [pc, #64]	; (8103fb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8103f74:	5ccb      	ldrb	r3, [r1, r3]
 8103f76:	f003 031f 	and.w	r3, r3, #31
 8103f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8103f7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103f80:	4b0b      	ldr	r3, [pc, #44]	; (8103fb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8103f82:	699b      	ldr	r3, [r3, #24]
 8103f84:	f003 030f 	and.w	r3, r3, #15
 8103f88:	4a0a      	ldr	r2, [pc, #40]	; (8103fb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8103f8a:	5cd3      	ldrb	r3, [r2, r3]
 8103f8c:	f003 031f 	and.w	r3, r3, #31
 8103f90:	687a      	ldr	r2, [r7, #4]
 8103f92:	fa22 f303 	lsr.w	r3, r2, r3
 8103f96:	4a08      	ldr	r2, [pc, #32]	; (8103fb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f98:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103f9a:	4b07      	ldr	r3, [pc, #28]	; (8103fb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	4a07      	ldr	r2, [pc, #28]	; (8103fbc <HAL_RCC_GetHCLKFreq+0x60>)
 8103fa0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103fa2:	4b05      	ldr	r3, [pc, #20]	; (8103fb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103fa4:	681b      	ldr	r3, [r3, #0]
}
 8103fa6:	4618      	mov	r0, r3
 8103fa8:	3708      	adds	r7, #8
 8103faa:	46bd      	mov	sp, r7
 8103fac:	bd80      	pop	{r7, pc}
 8103fae:	bf00      	nop
 8103fb0:	58024400 	.word	0x58024400
 8103fb4:	08116a54 	.word	0x08116a54
 8103fb8:	10000004 	.word	0x10000004
 8103fbc:	10000000 	.word	0x10000000

08103fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103fc0:	b580      	push	{r7, lr}
 8103fc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103fc4:	f7ff ffca 	bl	8103f5c <HAL_RCC_GetHCLKFreq>
 8103fc8:	4602      	mov	r2, r0
 8103fca:	4b06      	ldr	r3, [pc, #24]	; (8103fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103fcc:	69db      	ldr	r3, [r3, #28]
 8103fce:	091b      	lsrs	r3, r3, #4
 8103fd0:	f003 0307 	and.w	r3, r3, #7
 8103fd4:	4904      	ldr	r1, [pc, #16]	; (8103fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103fd6:	5ccb      	ldrb	r3, [r1, r3]
 8103fd8:	f003 031f 	and.w	r3, r3, #31
 8103fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103fe0:	4618      	mov	r0, r3
 8103fe2:	bd80      	pop	{r7, pc}
 8103fe4:	58024400 	.word	0x58024400
 8103fe8:	08116a54 	.word	0x08116a54

08103fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103fec:	b580      	push	{r7, lr}
 8103fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103ff0:	f7ff ffb4 	bl	8103f5c <HAL_RCC_GetHCLKFreq>
 8103ff4:	4602      	mov	r2, r0
 8103ff6:	4b06      	ldr	r3, [pc, #24]	; (8104010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8103ff8:	69db      	ldr	r3, [r3, #28]
 8103ffa:	0a1b      	lsrs	r3, r3, #8
 8103ffc:	f003 0307 	and.w	r3, r3, #7
 8104000:	4904      	ldr	r1, [pc, #16]	; (8104014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104002:	5ccb      	ldrb	r3, [r1, r3]
 8104004:	f003 031f 	and.w	r3, r3, #31
 8104008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810400c:	4618      	mov	r0, r3
 810400e:	bd80      	pop	{r7, pc}
 8104010:	58024400 	.word	0x58024400
 8104014:	08116a54 	.word	0x08116a54

08104018 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8104018:	b480      	push	{r7}
 810401a:	b083      	sub	sp, #12
 810401c:	af00      	add	r7, sp, #0
 810401e:	6078      	str	r0, [r7, #4]
 8104020:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	223f      	movs	r2, #63	; 0x3f
 8104026:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8104028:	4b1a      	ldr	r3, [pc, #104]	; (8104094 <HAL_RCC_GetClockConfig+0x7c>)
 810402a:	691b      	ldr	r3, [r3, #16]
 810402c:	f003 0207 	and.w	r2, r3, #7
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8104034:	4b17      	ldr	r3, [pc, #92]	; (8104094 <HAL_RCC_GetClockConfig+0x7c>)
 8104036:	699b      	ldr	r3, [r3, #24]
 8104038:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8104040:	4b14      	ldr	r3, [pc, #80]	; (8104094 <HAL_RCC_GetClockConfig+0x7c>)
 8104042:	699b      	ldr	r3, [r3, #24]
 8104044:	f003 020f 	and.w	r2, r3, #15
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810404c:	4b11      	ldr	r3, [pc, #68]	; (8104094 <HAL_RCC_GetClockConfig+0x7c>)
 810404e:	699b      	ldr	r3, [r3, #24]
 8104050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8104058:	4b0e      	ldr	r3, [pc, #56]	; (8104094 <HAL_RCC_GetClockConfig+0x7c>)
 810405a:	69db      	ldr	r3, [r3, #28]
 810405c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8104064:	4b0b      	ldr	r3, [pc, #44]	; (8104094 <HAL_RCC_GetClockConfig+0x7c>)
 8104066:	69db      	ldr	r3, [r3, #28]
 8104068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8104070:	4b08      	ldr	r3, [pc, #32]	; (8104094 <HAL_RCC_GetClockConfig+0x7c>)
 8104072:	6a1b      	ldr	r3, [r3, #32]
 8104074:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810407c:	4b06      	ldr	r3, [pc, #24]	; (8104098 <HAL_RCC_GetClockConfig+0x80>)
 810407e:	681b      	ldr	r3, [r3, #0]
 8104080:	f003 020f 	and.w	r2, r3, #15
 8104084:	683b      	ldr	r3, [r7, #0]
 8104086:	601a      	str	r2, [r3, #0]
}
 8104088:	bf00      	nop
 810408a:	370c      	adds	r7, #12
 810408c:	46bd      	mov	sp, r7
 810408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104092:	4770      	bx	lr
 8104094:	58024400 	.word	0x58024400
 8104098:	52002000 	.word	0x52002000

0810409c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810409c:	b580      	push	{r7, lr}
 810409e:	b086      	sub	sp, #24
 81040a0:	af00      	add	r7, sp, #0
 81040a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81040a4:	2300      	movs	r3, #0
 81040a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81040a8:	2300      	movs	r3, #0
 81040aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81040b4:	2b00      	cmp	r3, #0
 81040b6:	d03f      	beq.n	8104138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81040c0:	d02a      	beq.n	8104118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81040c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81040c6:	d824      	bhi.n	8104112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81040c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81040cc:	d018      	beq.n	8104100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81040ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81040d2:	d81e      	bhi.n	8104112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d003      	beq.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81040d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81040dc:	d007      	beq.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 81040de:	e018      	b.n	8104112 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81040e0:	4bab      	ldr	r3, [pc, #684]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040e4:	4aaa      	ldr	r2, [pc, #680]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81040e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81040ec:	e015      	b.n	810411a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	3304      	adds	r3, #4
 81040f2:	2102      	movs	r1, #2
 81040f4:	4618      	mov	r0, r3
 81040f6:	f001 f9cf 	bl	8105498 <RCCEx_PLL2_Config>
 81040fa:	4603      	mov	r3, r0
 81040fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81040fe:	e00c      	b.n	810411a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	3324      	adds	r3, #36	; 0x24
 8104104:	2102      	movs	r1, #2
 8104106:	4618      	mov	r0, r3
 8104108:	f001 fa78 	bl	81055fc <RCCEx_PLL3_Config>
 810410c:	4603      	mov	r3, r0
 810410e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104110:	e003      	b.n	810411a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104112:	2301      	movs	r3, #1
 8104114:	75fb      	strb	r3, [r7, #23]
      break;
 8104116:	e000      	b.n	810411a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104118:	bf00      	nop
    }

    if(ret == HAL_OK)
 810411a:	7dfb      	ldrb	r3, [r7, #23]
 810411c:	2b00      	cmp	r3, #0
 810411e:	d109      	bne.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104120:	4b9b      	ldr	r3, [pc, #620]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810412c:	4998      	ldr	r1, [pc, #608]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810412e:	4313      	orrs	r3, r2
 8104130:	650b      	str	r3, [r1, #80]	; 0x50
 8104132:	e001      	b.n	8104138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104134:	7dfb      	ldrb	r3, [r7, #23]
 8104136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104140:	2b00      	cmp	r3, #0
 8104142:	d03d      	beq.n	81041c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104148:	2b04      	cmp	r3, #4
 810414a:	d826      	bhi.n	810419a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 810414c:	a201      	add	r2, pc, #4	; (adr r2, 8104154 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104152:	bf00      	nop
 8104154:	08104169 	.word	0x08104169
 8104158:	08104177 	.word	0x08104177
 810415c:	08104189 	.word	0x08104189
 8104160:	081041a1 	.word	0x081041a1
 8104164:	081041a1 	.word	0x081041a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104168:	4b89      	ldr	r3, [pc, #548]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810416c:	4a88      	ldr	r2, [pc, #544]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810416e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104174:	e015      	b.n	81041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	3304      	adds	r3, #4
 810417a:	2100      	movs	r1, #0
 810417c:	4618      	mov	r0, r3
 810417e:	f001 f98b 	bl	8105498 <RCCEx_PLL2_Config>
 8104182:	4603      	mov	r3, r0
 8104184:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104186:	e00c      	b.n	81041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	3324      	adds	r3, #36	; 0x24
 810418c:	2100      	movs	r1, #0
 810418e:	4618      	mov	r0, r3
 8104190:	f001 fa34 	bl	81055fc <RCCEx_PLL3_Config>
 8104194:	4603      	mov	r3, r0
 8104196:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104198:	e003      	b.n	81041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810419a:	2301      	movs	r3, #1
 810419c:	75fb      	strb	r3, [r7, #23]
      break;
 810419e:	e000      	b.n	81041a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041a2:	7dfb      	ldrb	r3, [r7, #23]
 81041a4:	2b00      	cmp	r3, #0
 81041a6:	d109      	bne.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81041a8:	4b79      	ldr	r3, [pc, #484]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81041ac:	f023 0207 	bic.w	r2, r3, #7
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041b4:	4976      	ldr	r1, [pc, #472]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81041b6:	4313      	orrs	r3, r2
 81041b8:	650b      	str	r3, [r1, #80]	; 0x50
 81041ba:	e001      	b.n	81041c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041bc:	7dfb      	ldrb	r3, [r7, #23]
 81041be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81041c8:	2b00      	cmp	r3, #0
 81041ca:	d042      	beq.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81041d4:	d02b      	beq.n	810422e <HAL_RCCEx_PeriphCLKConfig+0x192>
 81041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81041da:	d825      	bhi.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81041dc:	2bc0      	cmp	r3, #192	; 0xc0
 81041de:	d028      	beq.n	8104232 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81041e0:	2bc0      	cmp	r3, #192	; 0xc0
 81041e2:	d821      	bhi.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81041e4:	2b80      	cmp	r3, #128	; 0x80
 81041e6:	d016      	beq.n	8104216 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81041e8:	2b80      	cmp	r3, #128	; 0x80
 81041ea:	d81d      	bhi.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81041ec:	2b00      	cmp	r3, #0
 81041ee:	d002      	beq.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81041f0:	2b40      	cmp	r3, #64	; 0x40
 81041f2:	d007      	beq.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81041f4:	e018      	b.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81041f6:	4b66      	ldr	r3, [pc, #408]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041fa:	4a65      	ldr	r2, [pc, #404]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104202:	e017      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	3304      	adds	r3, #4
 8104208:	2100      	movs	r1, #0
 810420a:	4618      	mov	r0, r3
 810420c:	f001 f944 	bl	8105498 <RCCEx_PLL2_Config>
 8104210:	4603      	mov	r3, r0
 8104212:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104214:	e00e      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	3324      	adds	r3, #36	; 0x24
 810421a:	2100      	movs	r1, #0
 810421c:	4618      	mov	r0, r3
 810421e:	f001 f9ed 	bl	81055fc <RCCEx_PLL3_Config>
 8104222:	4603      	mov	r3, r0
 8104224:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104226:	e005      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104228:	2301      	movs	r3, #1
 810422a:	75fb      	strb	r3, [r7, #23]
      break;
 810422c:	e002      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810422e:	bf00      	nop
 8104230:	e000      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104234:	7dfb      	ldrb	r3, [r7, #23]
 8104236:	2b00      	cmp	r3, #0
 8104238:	d109      	bne.n	810424e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810423a:	4b55      	ldr	r3, [pc, #340]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810423e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104246:	4952      	ldr	r1, [pc, #328]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104248:	4313      	orrs	r3, r2
 810424a:	650b      	str	r3, [r1, #80]	; 0x50
 810424c:	e001      	b.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810424e:	7dfb      	ldrb	r3, [r7, #23]
 8104250:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810425a:	2b00      	cmp	r3, #0
 810425c:	d049      	beq.n	81042f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104268:	d030      	beq.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 810426a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810426e:	d82a      	bhi.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104270:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104274:	d02c      	beq.n	81042d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104276:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810427a:	d824      	bhi.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810427c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104280:	d018      	beq.n	81042b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104286:	d81e      	bhi.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104288:	2b00      	cmp	r3, #0
 810428a:	d003      	beq.n	8104294 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810428c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104290:	d007      	beq.n	81042a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104292:	e018      	b.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104294:	4b3e      	ldr	r3, [pc, #248]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104298:	4a3d      	ldr	r2, [pc, #244]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810429e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81042a0:	e017      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	3304      	adds	r3, #4
 81042a6:	2100      	movs	r1, #0
 81042a8:	4618      	mov	r0, r3
 81042aa:	f001 f8f5 	bl	8105498 <RCCEx_PLL2_Config>
 81042ae:	4603      	mov	r3, r0
 81042b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81042b2:	e00e      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	3324      	adds	r3, #36	; 0x24
 81042b8:	2100      	movs	r1, #0
 81042ba:	4618      	mov	r0, r3
 81042bc:	f001 f99e 	bl	81055fc <RCCEx_PLL3_Config>
 81042c0:	4603      	mov	r3, r0
 81042c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81042c4:	e005      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81042c6:	2301      	movs	r3, #1
 81042c8:	75fb      	strb	r3, [r7, #23]
      break;
 81042ca:	e002      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81042cc:	bf00      	nop
 81042ce:	e000      	b.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81042d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042d2:	7dfb      	ldrb	r3, [r7, #23]
 81042d4:	2b00      	cmp	r3, #0
 81042d6:	d10a      	bne.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81042d8:	4b2d      	ldr	r3, [pc, #180]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81042dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81042e6:	492a      	ldr	r1, [pc, #168]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81042e8:	4313      	orrs	r3, r2
 81042ea:	658b      	str	r3, [r1, #88]	; 0x58
 81042ec:	e001      	b.n	81042f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ee:	7dfb      	ldrb	r3, [r7, #23]
 81042f0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81042fa:	2b00      	cmp	r3, #0
 81042fc:	d04c      	beq.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104308:	d030      	beq.n	810436c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810430a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810430e:	d82a      	bhi.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104310:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104314:	d02c      	beq.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8104316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810431a:	d824      	bhi.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810431c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104320:	d018      	beq.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104326:	d81e      	bhi.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104328:	2b00      	cmp	r3, #0
 810432a:	d003      	beq.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x298>
 810432c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104330:	d007      	beq.n	8104342 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104332:	e018      	b.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104334:	4b16      	ldr	r3, [pc, #88]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104338:	4a15      	ldr	r2, [pc, #84]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810433a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810433e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104340:	e017      	b.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	3304      	adds	r3, #4
 8104346:	2100      	movs	r1, #0
 8104348:	4618      	mov	r0, r3
 810434a:	f001 f8a5 	bl	8105498 <RCCEx_PLL2_Config>
 810434e:	4603      	mov	r3, r0
 8104350:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104352:	e00e      	b.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	3324      	adds	r3, #36	; 0x24
 8104358:	2100      	movs	r1, #0
 810435a:	4618      	mov	r0, r3
 810435c:	f001 f94e 	bl	81055fc <RCCEx_PLL3_Config>
 8104360:	4603      	mov	r3, r0
 8104362:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104364:	e005      	b.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104366:	2301      	movs	r3, #1
 8104368:	75fb      	strb	r3, [r7, #23]
      break;
 810436a:	e002      	b.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810436c:	bf00      	nop
 810436e:	e000      	b.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8104370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104372:	7dfb      	ldrb	r3, [r7, #23]
 8104374:	2b00      	cmp	r3, #0
 8104376:	d10d      	bne.n	8104394 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104378:	4b05      	ldr	r3, [pc, #20]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810437c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104386:	4902      	ldr	r1, [pc, #8]	; (8104390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104388:	4313      	orrs	r3, r2
 810438a:	658b      	str	r3, [r1, #88]	; 0x58
 810438c:	e004      	b.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810438e:	bf00      	nop
 8104390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104394:	7dfb      	ldrb	r3, [r7, #23]
 8104396:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81043a0:	2b00      	cmp	r3, #0
 81043a2:	d032      	beq.n	810440a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81043a8:	2b30      	cmp	r3, #48	; 0x30
 81043aa:	d01c      	beq.n	81043e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81043ac:	2b30      	cmp	r3, #48	; 0x30
 81043ae:	d817      	bhi.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81043b0:	2b20      	cmp	r3, #32
 81043b2:	d00c      	beq.n	81043ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 81043b4:	2b20      	cmp	r3, #32
 81043b6:	d813      	bhi.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81043b8:	2b00      	cmp	r3, #0
 81043ba:	d016      	beq.n	81043ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81043bc:	2b10      	cmp	r3, #16
 81043be:	d10f      	bne.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81043c0:	4baf      	ldr	r3, [pc, #700]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043c4:	4aae      	ldr	r2, [pc, #696]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81043c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81043ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81043cc:	e00e      	b.n	81043ec <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	3304      	adds	r3, #4
 81043d2:	2102      	movs	r1, #2
 81043d4:	4618      	mov	r0, r3
 81043d6:	f001 f85f 	bl	8105498 <RCCEx_PLL2_Config>
 81043da:	4603      	mov	r3, r0
 81043dc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81043de:	e005      	b.n	81043ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81043e0:	2301      	movs	r3, #1
 81043e2:	75fb      	strb	r3, [r7, #23]
      break;
 81043e4:	e002      	b.n	81043ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81043e6:	bf00      	nop
 81043e8:	e000      	b.n	81043ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043ec:	7dfb      	ldrb	r3, [r7, #23]
 81043ee:	2b00      	cmp	r3, #0
 81043f0:	d109      	bne.n	8104406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81043f2:	4ba3      	ldr	r3, [pc, #652]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81043f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81043fe:	49a0      	ldr	r1, [pc, #640]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104400:	4313      	orrs	r3, r2
 8104402:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104404:	e001      	b.n	810440a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104406:	7dfb      	ldrb	r3, [r7, #23]
 8104408:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104412:	2b00      	cmp	r3, #0
 8104414:	d047      	beq.n	81044a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810441a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810441e:	d030      	beq.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8104420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104424:	d82a      	bhi.n	810447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810442a:	d02c      	beq.n	8104486 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810442c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104430:	d824      	bhi.n	810447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104436:	d018      	beq.n	810446a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8104438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810443c:	d81e      	bhi.n	810447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810443e:	2b00      	cmp	r3, #0
 8104440:	d003      	beq.n	810444a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8104442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104446:	d007      	beq.n	8104458 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8104448:	e018      	b.n	810447c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810444a:	4b8d      	ldr	r3, [pc, #564]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810444e:	4a8c      	ldr	r2, [pc, #560]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104454:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104456:	e017      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	3304      	adds	r3, #4
 810445c:	2100      	movs	r1, #0
 810445e:	4618      	mov	r0, r3
 8104460:	f001 f81a 	bl	8105498 <RCCEx_PLL2_Config>
 8104464:	4603      	mov	r3, r0
 8104466:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104468:	e00e      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	3324      	adds	r3, #36	; 0x24
 810446e:	2100      	movs	r1, #0
 8104470:	4618      	mov	r0, r3
 8104472:	f001 f8c3 	bl	81055fc <RCCEx_PLL3_Config>
 8104476:	4603      	mov	r3, r0
 8104478:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810447a:	e005      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810447c:	2301      	movs	r3, #1
 810447e:	75fb      	strb	r3, [r7, #23]
      break;
 8104480:	e002      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8104482:	bf00      	nop
 8104484:	e000      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8104486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104488:	7dfb      	ldrb	r3, [r7, #23]
 810448a:	2b00      	cmp	r3, #0
 810448c:	d109      	bne.n	81044a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810448e:	4b7c      	ldr	r3, [pc, #496]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104492:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810449a:	4979      	ldr	r1, [pc, #484]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810449c:	4313      	orrs	r3, r2
 810449e:	650b      	str	r3, [r1, #80]	; 0x50
 81044a0:	e001      	b.n	81044a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044a2:	7dfb      	ldrb	r3, [r7, #23]
 81044a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81044ae:	2b00      	cmp	r3, #0
 81044b0:	d049      	beq.n	8104546 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81044ba:	d02e      	beq.n	810451a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81044bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81044c0:	d828      	bhi.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81044c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81044c6:	d02a      	beq.n	810451e <HAL_RCCEx_PeriphCLKConfig+0x482>
 81044c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81044cc:	d822      	bhi.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81044ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81044d2:	d026      	beq.n	8104522 <HAL_RCCEx_PeriphCLKConfig+0x486>
 81044d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81044d8:	d81c      	bhi.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81044da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81044de:	d010      	beq.n	8104502 <HAL_RCCEx_PeriphCLKConfig+0x466>
 81044e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81044e4:	d816      	bhi.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81044e6:	2b00      	cmp	r3, #0
 81044e8:	d01d      	beq.n	8104526 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81044ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81044ee:	d111      	bne.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	3304      	adds	r3, #4
 81044f4:	2101      	movs	r1, #1
 81044f6:	4618      	mov	r0, r3
 81044f8:	f000 ffce 	bl	8105498 <RCCEx_PLL2_Config>
 81044fc:	4603      	mov	r3, r0
 81044fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104500:	e012      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	3324      	adds	r3, #36	; 0x24
 8104506:	2101      	movs	r1, #1
 8104508:	4618      	mov	r0, r3
 810450a:	f001 f877 	bl	81055fc <RCCEx_PLL3_Config>
 810450e:	4603      	mov	r3, r0
 8104510:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104512:	e009      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104514:	2301      	movs	r3, #1
 8104516:	75fb      	strb	r3, [r7, #23]
      break;
 8104518:	e006      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810451a:	bf00      	nop
 810451c:	e004      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810451e:	bf00      	nop
 8104520:	e002      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8104522:	bf00      	nop
 8104524:	e000      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8104526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104528:	7dfb      	ldrb	r3, [r7, #23]
 810452a:	2b00      	cmp	r3, #0
 810452c:	d109      	bne.n	8104542 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810452e:	4b54      	ldr	r3, [pc, #336]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104532:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810453a:	4951      	ldr	r1, [pc, #324]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810453c:	4313      	orrs	r3, r2
 810453e:	650b      	str	r3, [r1, #80]	; 0x50
 8104540:	e001      	b.n	8104546 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104542:	7dfb      	ldrb	r3, [r7, #23]
 8104544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810454e:	2b00      	cmp	r3, #0
 8104550:	d04b      	beq.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810455c:	d02e      	beq.n	81045bc <HAL_RCCEx_PeriphCLKConfig+0x520>
 810455e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104562:	d828      	bhi.n	81045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8104564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104568:	d02a      	beq.n	81045c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810456e:	d822      	bhi.n	81045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8104570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104574:	d026      	beq.n	81045c4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8104576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810457a:	d81c      	bhi.n	81045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104580:	d010      	beq.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8104582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104586:	d816      	bhi.n	81045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8104588:	2b00      	cmp	r3, #0
 810458a:	d01d      	beq.n	81045c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810458c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104590:	d111      	bne.n	81045b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	3304      	adds	r3, #4
 8104596:	2101      	movs	r1, #1
 8104598:	4618      	mov	r0, r3
 810459a:	f000 ff7d 	bl	8105498 <RCCEx_PLL2_Config>
 810459e:	4603      	mov	r3, r0
 81045a0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81045a2:	e012      	b.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	3324      	adds	r3, #36	; 0x24
 81045a8:	2101      	movs	r1, #1
 81045aa:	4618      	mov	r0, r3
 81045ac:	f001 f826 	bl	81055fc <RCCEx_PLL3_Config>
 81045b0:	4603      	mov	r3, r0
 81045b2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81045b4:	e009      	b.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81045b6:	2301      	movs	r3, #1
 81045b8:	75fb      	strb	r3, [r7, #23]
      break;
 81045ba:	e006      	b.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81045bc:	bf00      	nop
 81045be:	e004      	b.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81045c0:	bf00      	nop
 81045c2:	e002      	b.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81045c4:	bf00      	nop
 81045c6:	e000      	b.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81045c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045ca:	7dfb      	ldrb	r3, [r7, #23]
 81045cc:	2b00      	cmp	r3, #0
 81045ce:	d10a      	bne.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81045d0:	4b2b      	ldr	r3, [pc, #172]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045d4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81045de:	4928      	ldr	r1, [pc, #160]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81045e0:	4313      	orrs	r3, r2
 81045e2:	658b      	str	r3, [r1, #88]	; 0x58
 81045e4:	e001      	b.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045e6:	7dfb      	ldrb	r3, [r7, #23]
 81045e8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81045f2:	2b00      	cmp	r3, #0
 81045f4:	d02f      	beq.n	8104656 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81045fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81045fe:	d00e      	beq.n	810461e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8104600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104604:	d814      	bhi.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8104606:	2b00      	cmp	r3, #0
 8104608:	d015      	beq.n	8104636 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810460a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810460e:	d10f      	bne.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104610:	4b1b      	ldr	r3, [pc, #108]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104614:	4a1a      	ldr	r2, [pc, #104]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810461a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810461c:	e00c      	b.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	3304      	adds	r3, #4
 8104622:	2101      	movs	r1, #1
 8104624:	4618      	mov	r0, r3
 8104626:	f000 ff37 	bl	8105498 <RCCEx_PLL2_Config>
 810462a:	4603      	mov	r3, r0
 810462c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810462e:	e003      	b.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104630:	2301      	movs	r3, #1
 8104632:	75fb      	strb	r3, [r7, #23]
      break;
 8104634:	e000      	b.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8104636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104638:	7dfb      	ldrb	r3, [r7, #23]
 810463a:	2b00      	cmp	r3, #0
 810463c:	d109      	bne.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810463e:	4b10      	ldr	r3, [pc, #64]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104642:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810464a:	490d      	ldr	r1, [pc, #52]	; (8104680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810464c:	4313      	orrs	r3, r2
 810464e:	650b      	str	r3, [r1, #80]	; 0x50
 8104650:	e001      	b.n	8104656 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104652:	7dfb      	ldrb	r3, [r7, #23]
 8104654:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810465e:	2b00      	cmp	r3, #0
 8104660:	d033      	beq.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104666:	2b03      	cmp	r3, #3
 8104668:	d81c      	bhi.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810466a:	a201      	add	r2, pc, #4	; (adr r2, 8104670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104670:	081046ab 	.word	0x081046ab
 8104674:	08104685 	.word	0x08104685
 8104678:	08104693 	.word	0x08104693
 810467c:	081046ab 	.word	0x081046ab
 8104680:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104684:	4bb9      	ldr	r3, [pc, #740]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104688:	4ab8      	ldr	r2, [pc, #736]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810468a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810468e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104690:	e00c      	b.n	81046ac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	3304      	adds	r3, #4
 8104696:	2102      	movs	r1, #2
 8104698:	4618      	mov	r0, r3
 810469a:	f000 fefd 	bl	8105498 <RCCEx_PLL2_Config>
 810469e:	4603      	mov	r3, r0
 81046a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81046a2:	e003      	b.n	81046ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81046a4:	2301      	movs	r3, #1
 81046a6:	75fb      	strb	r3, [r7, #23]
      break;
 81046a8:	e000      	b.n	81046ac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81046aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046ac:	7dfb      	ldrb	r3, [r7, #23]
 81046ae:	2b00      	cmp	r3, #0
 81046b0:	d109      	bne.n	81046c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81046b2:	4bae      	ldr	r3, [pc, #696]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046b6:	f023 0203 	bic.w	r2, r3, #3
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81046be:	49ab      	ldr	r1, [pc, #684]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81046c0:	4313      	orrs	r3, r2
 81046c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81046c4:	e001      	b.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046c6:	7dfb      	ldrb	r3, [r7, #23]
 81046c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81046d2:	2b00      	cmp	r3, #0
 81046d4:	f000 8088 	beq.w	81047e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81046d8:	4ba5      	ldr	r3, [pc, #660]	; (8104970 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	4aa4      	ldr	r2, [pc, #656]	; (8104970 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81046de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81046e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81046e4:	f7fc fea4 	bl	8101430 <HAL_GetTick>
 81046e8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81046ea:	e009      	b.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81046ec:	f7fc fea0 	bl	8101430 <HAL_GetTick>
 81046f0:	4602      	mov	r2, r0
 81046f2:	693b      	ldr	r3, [r7, #16]
 81046f4:	1ad3      	subs	r3, r2, r3
 81046f6:	2b64      	cmp	r3, #100	; 0x64
 81046f8:	d902      	bls.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81046fa:	2303      	movs	r3, #3
 81046fc:	75fb      	strb	r3, [r7, #23]
        break;
 81046fe:	e005      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104700:	4b9b      	ldr	r3, [pc, #620]	; (8104970 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104708:	2b00      	cmp	r3, #0
 810470a:	d0ef      	beq.n	81046ec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810470c:	7dfb      	ldrb	r3, [r7, #23]
 810470e:	2b00      	cmp	r3, #0
 8104710:	d168      	bne.n	81047e4 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104712:	4b96      	ldr	r3, [pc, #600]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104714:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810471c:	4053      	eors	r3, r2
 810471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104722:	2b00      	cmp	r3, #0
 8104724:	d013      	beq.n	810474e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104726:	4b91      	ldr	r3, [pc, #580]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810472e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104730:	4b8e      	ldr	r3, [pc, #568]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104734:	4a8d      	ldr	r2, [pc, #564]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810473a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810473c:	4b8b      	ldr	r3, [pc, #556]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104740:	4a8a      	ldr	r2, [pc, #552]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104746:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104748:	4a88      	ldr	r2, [pc, #544]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810474a:	68fb      	ldr	r3, [r7, #12]
 810474c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104758:	d115      	bne.n	8104786 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810475a:	f7fc fe69 	bl	8101430 <HAL_GetTick>
 810475e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104760:	e00b      	b.n	810477a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104762:	f7fc fe65 	bl	8101430 <HAL_GetTick>
 8104766:	4602      	mov	r2, r0
 8104768:	693b      	ldr	r3, [r7, #16]
 810476a:	1ad3      	subs	r3, r2, r3
 810476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8104770:	4293      	cmp	r3, r2
 8104772:	d902      	bls.n	810477a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104774:	2303      	movs	r3, #3
 8104776:	75fb      	strb	r3, [r7, #23]
            break;
 8104778:	e005      	b.n	8104786 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810477a:	4b7c      	ldr	r3, [pc, #496]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810477e:	f003 0302 	and.w	r3, r3, #2
 8104782:	2b00      	cmp	r3, #0
 8104784:	d0ed      	beq.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8104786:	7dfb      	ldrb	r3, [r7, #23]
 8104788:	2b00      	cmp	r3, #0
 810478a:	d128      	bne.n	81047de <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810479a:	d10f      	bne.n	81047bc <HAL_RCCEx_PeriphCLKConfig+0x720>
 810479c:	4b73      	ldr	r3, [pc, #460]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810479e:	691b      	ldr	r3, [r3, #16]
 81047a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81047aa:	091b      	lsrs	r3, r3, #4
 81047ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81047b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81047b4:	496d      	ldr	r1, [pc, #436]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81047b6:	4313      	orrs	r3, r2
 81047b8:	610b      	str	r3, [r1, #16]
 81047ba:	e005      	b.n	81047c8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81047bc:	4b6b      	ldr	r3, [pc, #428]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81047be:	691b      	ldr	r3, [r3, #16]
 81047c0:	4a6a      	ldr	r2, [pc, #424]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81047c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81047c6:	6113      	str	r3, [r2, #16]
 81047c8:	4b68      	ldr	r3, [pc, #416]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81047ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81047d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81047d6:	4965      	ldr	r1, [pc, #404]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81047d8:	4313      	orrs	r3, r2
 81047da:	670b      	str	r3, [r1, #112]	; 0x70
 81047dc:	e004      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81047de:	7dfb      	ldrb	r3, [r7, #23]
 81047e0:	75bb      	strb	r3, [r7, #22]
 81047e2:	e001      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047e4:	7dfb      	ldrb	r3, [r7, #23]
 81047e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	f003 0301 	and.w	r3, r3, #1
 81047f0:	2b00      	cmp	r3, #0
 81047f2:	d07e      	beq.n	81048f2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81047f8:	2b28      	cmp	r3, #40	; 0x28
 81047fa:	d867      	bhi.n	81048cc <HAL_RCCEx_PeriphCLKConfig+0x830>
 81047fc:	a201      	add	r2, pc, #4	; (adr r2, 8104804 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104802:	bf00      	nop
 8104804:	081048d3 	.word	0x081048d3
 8104808:	081048cd 	.word	0x081048cd
 810480c:	081048cd 	.word	0x081048cd
 8104810:	081048cd 	.word	0x081048cd
 8104814:	081048cd 	.word	0x081048cd
 8104818:	081048cd 	.word	0x081048cd
 810481c:	081048cd 	.word	0x081048cd
 8104820:	081048cd 	.word	0x081048cd
 8104824:	081048a9 	.word	0x081048a9
 8104828:	081048cd 	.word	0x081048cd
 810482c:	081048cd 	.word	0x081048cd
 8104830:	081048cd 	.word	0x081048cd
 8104834:	081048cd 	.word	0x081048cd
 8104838:	081048cd 	.word	0x081048cd
 810483c:	081048cd 	.word	0x081048cd
 8104840:	081048cd 	.word	0x081048cd
 8104844:	081048bb 	.word	0x081048bb
 8104848:	081048cd 	.word	0x081048cd
 810484c:	081048cd 	.word	0x081048cd
 8104850:	081048cd 	.word	0x081048cd
 8104854:	081048cd 	.word	0x081048cd
 8104858:	081048cd 	.word	0x081048cd
 810485c:	081048cd 	.word	0x081048cd
 8104860:	081048cd 	.word	0x081048cd
 8104864:	081048d3 	.word	0x081048d3
 8104868:	081048cd 	.word	0x081048cd
 810486c:	081048cd 	.word	0x081048cd
 8104870:	081048cd 	.word	0x081048cd
 8104874:	081048cd 	.word	0x081048cd
 8104878:	081048cd 	.word	0x081048cd
 810487c:	081048cd 	.word	0x081048cd
 8104880:	081048cd 	.word	0x081048cd
 8104884:	081048d3 	.word	0x081048d3
 8104888:	081048cd 	.word	0x081048cd
 810488c:	081048cd 	.word	0x081048cd
 8104890:	081048cd 	.word	0x081048cd
 8104894:	081048cd 	.word	0x081048cd
 8104898:	081048cd 	.word	0x081048cd
 810489c:	081048cd 	.word	0x081048cd
 81048a0:	081048cd 	.word	0x081048cd
 81048a4:	081048d3 	.word	0x081048d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	3304      	adds	r3, #4
 81048ac:	2101      	movs	r1, #1
 81048ae:	4618      	mov	r0, r3
 81048b0:	f000 fdf2 	bl	8105498 <RCCEx_PLL2_Config>
 81048b4:	4603      	mov	r3, r0
 81048b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81048b8:	e00c      	b.n	81048d4 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	3324      	adds	r3, #36	; 0x24
 81048be:	2101      	movs	r1, #1
 81048c0:	4618      	mov	r0, r3
 81048c2:	f000 fe9b 	bl	81055fc <RCCEx_PLL3_Config>
 81048c6:	4603      	mov	r3, r0
 81048c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81048ca:	e003      	b.n	81048d4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81048cc:	2301      	movs	r3, #1
 81048ce:	75fb      	strb	r3, [r7, #23]
      break;
 81048d0:	e000      	b.n	81048d4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81048d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81048d4:	7dfb      	ldrb	r3, [r7, #23]
 81048d6:	2b00      	cmp	r3, #0
 81048d8:	d109      	bne.n	81048ee <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81048da:	4b24      	ldr	r3, [pc, #144]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81048e6:	4921      	ldr	r1, [pc, #132]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81048e8:	4313      	orrs	r3, r2
 81048ea:	654b      	str	r3, [r1, #84]	; 0x54
 81048ec:	e001      	b.n	81048f2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048ee:	7dfb      	ldrb	r3, [r7, #23]
 81048f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	f003 0302 	and.w	r3, r3, #2
 81048fa:	2b00      	cmp	r3, #0
 81048fc:	d03c      	beq.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104902:	2b05      	cmp	r3, #5
 8104904:	d820      	bhi.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8104906:	a201      	add	r2, pc, #4	; (adr r2, 810490c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8104908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810490c:	0810494f 	.word	0x0810494f
 8104910:	08104925 	.word	0x08104925
 8104914:	08104937 	.word	0x08104937
 8104918:	0810494f 	.word	0x0810494f
 810491c:	0810494f 	.word	0x0810494f
 8104920:	0810494f 	.word	0x0810494f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	3304      	adds	r3, #4
 8104928:	2101      	movs	r1, #1
 810492a:	4618      	mov	r0, r3
 810492c:	f000 fdb4 	bl	8105498 <RCCEx_PLL2_Config>
 8104930:	4603      	mov	r3, r0
 8104932:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104934:	e00c      	b.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	3324      	adds	r3, #36	; 0x24
 810493a:	2101      	movs	r1, #1
 810493c:	4618      	mov	r0, r3
 810493e:	f000 fe5d 	bl	81055fc <RCCEx_PLL3_Config>
 8104942:	4603      	mov	r3, r0
 8104944:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104946:	e003      	b.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104948:	2301      	movs	r3, #1
 810494a:	75fb      	strb	r3, [r7, #23]
      break;
 810494c:	e000      	b.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810494e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104950:	7dfb      	ldrb	r3, [r7, #23]
 8104952:	2b00      	cmp	r3, #0
 8104954:	d10e      	bne.n	8104974 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104956:	4b05      	ldr	r3, [pc, #20]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810495a:	f023 0207 	bic.w	r2, r3, #7
 810495e:	687b      	ldr	r3, [r7, #4]
 8104960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104962:	4902      	ldr	r1, [pc, #8]	; (810496c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104964:	4313      	orrs	r3, r2
 8104966:	654b      	str	r3, [r1, #84]	; 0x54
 8104968:	e006      	b.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810496a:	bf00      	nop
 810496c:	58024400 	.word	0x58024400
 8104970:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104974:	7dfb      	ldrb	r3, [r7, #23]
 8104976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	681b      	ldr	r3, [r3, #0]
 810497c:	f003 0304 	and.w	r3, r3, #4
 8104980:	2b00      	cmp	r3, #0
 8104982:	d039      	beq.n	81049f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810498a:	2b05      	cmp	r3, #5
 810498c:	d820      	bhi.n	81049d0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810498e:	a201      	add	r2, pc, #4	; (adr r2, 8104994 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8104990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104994:	081049d7 	.word	0x081049d7
 8104998:	081049ad 	.word	0x081049ad
 810499c:	081049bf 	.word	0x081049bf
 81049a0:	081049d7 	.word	0x081049d7
 81049a4:	081049d7 	.word	0x081049d7
 81049a8:	081049d7 	.word	0x081049d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	3304      	adds	r3, #4
 81049b0:	2101      	movs	r1, #1
 81049b2:	4618      	mov	r0, r3
 81049b4:	f000 fd70 	bl	8105498 <RCCEx_PLL2_Config>
 81049b8:	4603      	mov	r3, r0
 81049ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81049bc:	e00c      	b.n	81049d8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	3324      	adds	r3, #36	; 0x24
 81049c2:	2101      	movs	r1, #1
 81049c4:	4618      	mov	r0, r3
 81049c6:	f000 fe19 	bl	81055fc <RCCEx_PLL3_Config>
 81049ca:	4603      	mov	r3, r0
 81049cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81049ce:	e003      	b.n	81049d8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81049d0:	2301      	movs	r3, #1
 81049d2:	75fb      	strb	r3, [r7, #23]
      break;
 81049d4:	e000      	b.n	81049d8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81049d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049d8:	7dfb      	ldrb	r3, [r7, #23]
 81049da:	2b00      	cmp	r3, #0
 81049dc:	d10a      	bne.n	81049f4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81049de:	4bb7      	ldr	r3, [pc, #732]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81049e2:	f023 0207 	bic.w	r2, r3, #7
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81049ec:	49b3      	ldr	r1, [pc, #716]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81049ee:	4313      	orrs	r3, r2
 81049f0:	658b      	str	r3, [r1, #88]	; 0x58
 81049f2:	e001      	b.n	81049f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049f4:	7dfb      	ldrb	r3, [r7, #23]
 81049f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	681b      	ldr	r3, [r3, #0]
 81049fc:	f003 0320 	and.w	r3, r3, #32
 8104a00:	2b00      	cmp	r3, #0
 8104a02:	d04b      	beq.n	8104a9c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104a0e:	d02e      	beq.n	8104a6e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8104a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104a14:	d828      	bhi.n	8104a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104a1a:	d02a      	beq.n	8104a72 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104a20:	d822      	bhi.n	8104a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104a26:	d026      	beq.n	8104a76 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104a2c:	d81c      	bhi.n	8104a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a32:	d010      	beq.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8104a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a38:	d816      	bhi.n	8104a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	d01d      	beq.n	8104a7a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104a42:	d111      	bne.n	8104a68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	3304      	adds	r3, #4
 8104a48:	2100      	movs	r1, #0
 8104a4a:	4618      	mov	r0, r3
 8104a4c:	f000 fd24 	bl	8105498 <RCCEx_PLL2_Config>
 8104a50:	4603      	mov	r3, r0
 8104a52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104a54:	e012      	b.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	3324      	adds	r3, #36	; 0x24
 8104a5a:	2102      	movs	r1, #2
 8104a5c:	4618      	mov	r0, r3
 8104a5e:	f000 fdcd 	bl	81055fc <RCCEx_PLL3_Config>
 8104a62:	4603      	mov	r3, r0
 8104a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104a66:	e009      	b.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104a68:	2301      	movs	r3, #1
 8104a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8104a6c:	e006      	b.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104a6e:	bf00      	nop
 8104a70:	e004      	b.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104a72:	bf00      	nop
 8104a74:	e002      	b.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104a76:	bf00      	nop
 8104a78:	e000      	b.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104a7c:	7dfb      	ldrb	r3, [r7, #23]
 8104a7e:	2b00      	cmp	r3, #0
 8104a80:	d10a      	bne.n	8104a98 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104a82:	4b8e      	ldr	r3, [pc, #568]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104a90:	498a      	ldr	r1, [pc, #552]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104a92:	4313      	orrs	r3, r2
 8104a94:	654b      	str	r3, [r1, #84]	; 0x54
 8104a96:	e001      	b.n	8104a9c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a98:	7dfb      	ldrb	r3, [r7, #23]
 8104a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104aa4:	2b00      	cmp	r3, #0
 8104aa6:	d04b      	beq.n	8104b40 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104aae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104ab2:	d02e      	beq.n	8104b12 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8104ab4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104ab8:	d828      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104abe:	d02a      	beq.n	8104b16 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104ac4:	d822      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104aca:	d026      	beq.n	8104b1a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104ad0:	d81c      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104ad6:	d010      	beq.n	8104afa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8104ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104adc:	d816      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104ade:	2b00      	cmp	r3, #0
 8104ae0:	d01d      	beq.n	8104b1e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104ae6:	d111      	bne.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	3304      	adds	r3, #4
 8104aec:	2100      	movs	r1, #0
 8104aee:	4618      	mov	r0, r3
 8104af0:	f000 fcd2 	bl	8105498 <RCCEx_PLL2_Config>
 8104af4:	4603      	mov	r3, r0
 8104af6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104af8:	e012      	b.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104afa:	687b      	ldr	r3, [r7, #4]
 8104afc:	3324      	adds	r3, #36	; 0x24
 8104afe:	2102      	movs	r1, #2
 8104b00:	4618      	mov	r0, r3
 8104b02:	f000 fd7b 	bl	81055fc <RCCEx_PLL3_Config>
 8104b06:	4603      	mov	r3, r0
 8104b08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104b0a:	e009      	b.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104b0c:	2301      	movs	r3, #1
 8104b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8104b10:	e006      	b.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104b12:	bf00      	nop
 8104b14:	e004      	b.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104b16:	bf00      	nop
 8104b18:	e002      	b.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104b1a:	bf00      	nop
 8104b1c:	e000      	b.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b20:	7dfb      	ldrb	r3, [r7, #23]
 8104b22:	2b00      	cmp	r3, #0
 8104b24:	d10a      	bne.n	8104b3c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104b26:	4b65      	ldr	r3, [pc, #404]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104b34:	4961      	ldr	r1, [pc, #388]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104b36:	4313      	orrs	r3, r2
 8104b38:	658b      	str	r3, [r1, #88]	; 0x58
 8104b3a:	e001      	b.n	8104b40 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b3c:	7dfb      	ldrb	r3, [r7, #23]
 8104b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104b48:	2b00      	cmp	r3, #0
 8104b4a:	d04b      	beq.n	8104be4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104b52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104b56:	d02e      	beq.n	8104bb6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8104b58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104b5c:	d828      	bhi.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104b62:	d02a      	beq.n	8104bba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8104b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104b68:	d822      	bhi.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104b6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104b6e:	d026      	beq.n	8104bbe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104b70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104b74:	d81c      	bhi.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104b7a:	d010      	beq.n	8104b9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8104b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104b80:	d816      	bhi.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104b82:	2b00      	cmp	r3, #0
 8104b84:	d01d      	beq.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104b8a:	d111      	bne.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	3304      	adds	r3, #4
 8104b90:	2100      	movs	r1, #0
 8104b92:	4618      	mov	r0, r3
 8104b94:	f000 fc80 	bl	8105498 <RCCEx_PLL2_Config>
 8104b98:	4603      	mov	r3, r0
 8104b9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104b9c:	e012      	b.n	8104bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	3324      	adds	r3, #36	; 0x24
 8104ba2:	2102      	movs	r1, #2
 8104ba4:	4618      	mov	r0, r3
 8104ba6:	f000 fd29 	bl	81055fc <RCCEx_PLL3_Config>
 8104baa:	4603      	mov	r3, r0
 8104bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104bae:	e009      	b.n	8104bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104bb0:	2301      	movs	r3, #1
 8104bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8104bb4:	e006      	b.n	8104bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104bb6:	bf00      	nop
 8104bb8:	e004      	b.n	8104bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104bba:	bf00      	nop
 8104bbc:	e002      	b.n	8104bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104bbe:	bf00      	nop
 8104bc0:	e000      	b.n	8104bc4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104bc4:	7dfb      	ldrb	r3, [r7, #23]
 8104bc6:	2b00      	cmp	r3, #0
 8104bc8:	d10a      	bne.n	8104be0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104bca:	4b3c      	ldr	r3, [pc, #240]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104bd8:	4938      	ldr	r1, [pc, #224]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104bda:	4313      	orrs	r3, r2
 8104bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8104bde:	e001      	b.n	8104be4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104be0:	7dfb      	ldrb	r3, [r7, #23]
 8104be2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	f003 0308 	and.w	r3, r3, #8
 8104bec:	2b00      	cmp	r3, #0
 8104bee:	d01a      	beq.n	8104c26 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104bfa:	d10a      	bne.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	3324      	adds	r3, #36	; 0x24
 8104c00:	2102      	movs	r1, #2
 8104c02:	4618      	mov	r0, r3
 8104c04:	f000 fcfa 	bl	81055fc <RCCEx_PLL3_Config>
 8104c08:	4603      	mov	r3, r0
 8104c0a:	2b00      	cmp	r3, #0
 8104c0c:	d001      	beq.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8104c0e:	2301      	movs	r3, #1
 8104c10:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104c12:	4b2a      	ldr	r3, [pc, #168]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104c20:	4926      	ldr	r1, [pc, #152]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104c22:	4313      	orrs	r3, r2
 8104c24:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	f003 0310 	and.w	r3, r3, #16
 8104c2e:	2b00      	cmp	r3, #0
 8104c30:	d01a      	beq.n	8104c68 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c3c:	d10a      	bne.n	8104c54 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	3324      	adds	r3, #36	; 0x24
 8104c42:	2102      	movs	r1, #2
 8104c44:	4618      	mov	r0, r3
 8104c46:	f000 fcd9 	bl	81055fc <RCCEx_PLL3_Config>
 8104c4a:	4603      	mov	r3, r0
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d001      	beq.n	8104c54 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8104c50:	2301      	movs	r3, #1
 8104c52:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104c54:	4b19      	ldr	r3, [pc, #100]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104c62:	4916      	ldr	r1, [pc, #88]	; (8104cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104c64:	4313      	orrs	r3, r2
 8104c66:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	681b      	ldr	r3, [r3, #0]
 8104c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104c70:	2b00      	cmp	r3, #0
 8104c72:	d036      	beq.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104c7e:	d01f      	beq.n	8104cc0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8104c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104c84:	d817      	bhi.n	8104cb6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8104c86:	2b00      	cmp	r3, #0
 8104c88:	d003      	beq.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8104c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104c8e:	d009      	beq.n	8104ca4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8104c90:	e011      	b.n	8104cb6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	3304      	adds	r3, #4
 8104c96:	2100      	movs	r1, #0
 8104c98:	4618      	mov	r0, r3
 8104c9a:	f000 fbfd 	bl	8105498 <RCCEx_PLL2_Config>
 8104c9e:	4603      	mov	r3, r0
 8104ca0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104ca2:	e00e      	b.n	8104cc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	3324      	adds	r3, #36	; 0x24
 8104ca8:	2102      	movs	r1, #2
 8104caa:	4618      	mov	r0, r3
 8104cac:	f000 fca6 	bl	81055fc <RCCEx_PLL3_Config>
 8104cb0:	4603      	mov	r3, r0
 8104cb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104cb4:	e005      	b.n	8104cc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104cb6:	2301      	movs	r3, #1
 8104cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8104cba:	e002      	b.n	8104cc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8104cbc:	58024400 	.word	0x58024400
      break;
 8104cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104cc2:	7dfb      	ldrb	r3, [r7, #23]
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	d10a      	bne.n	8104cde <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104cc8:	4b93      	ldr	r3, [pc, #588]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104cd6:	4990      	ldr	r1, [pc, #576]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104cd8:	4313      	orrs	r3, r2
 8104cda:	658b      	str	r3, [r1, #88]	; 0x58
 8104cdc:	e001      	b.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cde:	7dfb      	ldrb	r3, [r7, #23]
 8104ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	681b      	ldr	r3, [r3, #0]
 8104ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d033      	beq.n	8104d56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104cf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104cf8:	d01c      	beq.n	8104d34 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8104cfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104cfe:	d816      	bhi.n	8104d2e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8104d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104d04:	d003      	beq.n	8104d0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8104d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d0a:	d007      	beq.n	8104d1c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8104d0c:	e00f      	b.n	8104d2e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d0e:	4b82      	ldr	r3, [pc, #520]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d12:	4a81      	ldr	r2, [pc, #516]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104d1a:	e00c      	b.n	8104d36 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	3324      	adds	r3, #36	; 0x24
 8104d20:	2101      	movs	r1, #1
 8104d22:	4618      	mov	r0, r3
 8104d24:	f000 fc6a 	bl	81055fc <RCCEx_PLL3_Config>
 8104d28:	4603      	mov	r3, r0
 8104d2a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104d2c:	e003      	b.n	8104d36 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d2e:	2301      	movs	r3, #1
 8104d30:	75fb      	strb	r3, [r7, #23]
      break;
 8104d32:	e000      	b.n	8104d36 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8104d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d36:	7dfb      	ldrb	r3, [r7, #23]
 8104d38:	2b00      	cmp	r3, #0
 8104d3a:	d10a      	bne.n	8104d52 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104d3c:	4b76      	ldr	r3, [pc, #472]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d4a:	4973      	ldr	r1, [pc, #460]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104d4c:	4313      	orrs	r3, r2
 8104d4e:	654b      	str	r3, [r1, #84]	; 0x54
 8104d50:	e001      	b.n	8104d56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d52:	7dfb      	ldrb	r3, [r7, #23]
 8104d54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	681b      	ldr	r3, [r3, #0]
 8104d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104d5e:	2b00      	cmp	r3, #0
 8104d60:	d029      	beq.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104d66:	2b00      	cmp	r3, #0
 8104d68:	d003      	beq.n	8104d72 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8104d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104d6e:	d007      	beq.n	8104d80 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8104d70:	e00f      	b.n	8104d92 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d72:	4b69      	ldr	r3, [pc, #420]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d76:	4a68      	ldr	r2, [pc, #416]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104d7e:	e00b      	b.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	3304      	adds	r3, #4
 8104d84:	2102      	movs	r1, #2
 8104d86:	4618      	mov	r0, r3
 8104d88:	f000 fb86 	bl	8105498 <RCCEx_PLL2_Config>
 8104d8c:	4603      	mov	r3, r0
 8104d8e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104d90:	e002      	b.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8104d92:	2301      	movs	r3, #1
 8104d94:	75fb      	strb	r3, [r7, #23]
      break;
 8104d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d98:	7dfb      	ldrb	r3, [r7, #23]
 8104d9a:	2b00      	cmp	r3, #0
 8104d9c:	d109      	bne.n	8104db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104d9e:	4b5e      	ldr	r3, [pc, #376]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104da2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104daa:	495b      	ldr	r1, [pc, #364]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104dac:	4313      	orrs	r3, r2
 8104dae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104db0:	e001      	b.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104db2:	7dfb      	ldrb	r3, [r7, #23]
 8104db4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104dbe:	2b00      	cmp	r3, #0
 8104dc0:	d00a      	beq.n	8104dd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	3324      	adds	r3, #36	; 0x24
 8104dc6:	2102      	movs	r1, #2
 8104dc8:	4618      	mov	r0, r3
 8104dca:	f000 fc17 	bl	81055fc <RCCEx_PLL3_Config>
 8104dce:	4603      	mov	r3, r0
 8104dd0:	2b00      	cmp	r3, #0
 8104dd2:	d001      	beq.n	8104dd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8104dd4:	2301      	movs	r3, #1
 8104dd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104de0:	2b00      	cmp	r3, #0
 8104de2:	d030      	beq.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104dec:	d017      	beq.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8104dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104df2:	d811      	bhi.n	8104e18 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104df8:	d013      	beq.n	8104e22 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104dfe:	d80b      	bhi.n	8104e18 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	d010      	beq.n	8104e26 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e08:	d106      	bne.n	8104e18 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e0a:	4b43      	ldr	r3, [pc, #268]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e0e:	4a42      	ldr	r2, [pc, #264]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8104e16:	e007      	b.n	8104e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104e18:	2301      	movs	r3, #1
 8104e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8104e1c:	e004      	b.n	8104e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104e1e:	bf00      	nop
 8104e20:	e002      	b.n	8104e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104e22:	bf00      	nop
 8104e24:	e000      	b.n	8104e28 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e28:	7dfb      	ldrb	r3, [r7, #23]
 8104e2a:	2b00      	cmp	r3, #0
 8104e2c:	d109      	bne.n	8104e42 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104e2e:	4b3a      	ldr	r3, [pc, #232]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104e36:	687b      	ldr	r3, [r7, #4]
 8104e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104e3a:	4937      	ldr	r1, [pc, #220]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e3c:	4313      	orrs	r3, r2
 8104e3e:	654b      	str	r3, [r1, #84]	; 0x54
 8104e40:	e001      	b.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e42:	7dfb      	ldrb	r3, [r7, #23]
 8104e44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104e4e:	2b00      	cmp	r3, #0
 8104e50:	d008      	beq.n	8104e64 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104e52:	4b31      	ldr	r3, [pc, #196]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104e5e:	492e      	ldr	r1, [pc, #184]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e60:	4313      	orrs	r3, r2
 8104e62:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104e6c:	2b00      	cmp	r3, #0
 8104e6e:	d009      	beq.n	8104e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104e70:	4b29      	ldr	r3, [pc, #164]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e72:	691b      	ldr	r3, [r3, #16]
 8104e74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104e7e:	4926      	ldr	r1, [pc, #152]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e80:	4313      	orrs	r3, r2
 8104e82:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104e8c:	2b00      	cmp	r3, #0
 8104e8e:	d008      	beq.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104e90:	4b21      	ldr	r3, [pc, #132]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104e9c:	491e      	ldr	r1, [pc, #120]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104e9e:	4313      	orrs	r3, r2
 8104ea0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104eaa:	2b00      	cmp	r3, #0
 8104eac:	d00d      	beq.n	8104eca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104eae:	4b1a      	ldr	r3, [pc, #104]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104eb0:	691b      	ldr	r3, [r3, #16]
 8104eb2:	4a19      	ldr	r2, [pc, #100]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104eb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104eb8:	6113      	str	r3, [r2, #16]
 8104eba:	4b17      	ldr	r3, [pc, #92]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ebc:	691a      	ldr	r2, [r3, #16]
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104ec4:	4914      	ldr	r1, [pc, #80]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ec6:	4313      	orrs	r3, r2
 8104ec8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	681b      	ldr	r3, [r3, #0]
 8104ece:	2b00      	cmp	r3, #0
 8104ed0:	da08      	bge.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104ed2:	4b11      	ldr	r3, [pc, #68]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ede:	490e      	ldr	r1, [pc, #56]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ee0:	4313      	orrs	r3, r2
 8104ee2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104eec:	2b00      	cmp	r3, #0
 8104eee:	d009      	beq.n	8104f04 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104ef0:	4b09      	ldr	r3, [pc, #36]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104efe:	4906      	ldr	r1, [pc, #24]	; (8104f18 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104f00:	4313      	orrs	r3, r2
 8104f02:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104f04:	7dbb      	ldrb	r3, [r7, #22]
 8104f06:	2b00      	cmp	r3, #0
 8104f08:	d101      	bne.n	8104f0e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8104f0a:	2300      	movs	r3, #0
 8104f0c:	e000      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8104f0e:	2301      	movs	r3, #1
}
 8104f10:	4618      	mov	r0, r3
 8104f12:	3718      	adds	r7, #24
 8104f14:	46bd      	mov	sp, r7
 8104f16:	bd80      	pop	{r7, pc}
 8104f18:	58024400 	.word	0x58024400

08104f1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104f1c:	b580      	push	{r7, lr}
 8104f1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104f20:	f7ff f81c 	bl	8103f5c <HAL_RCC_GetHCLKFreq>
 8104f24:	4602      	mov	r2, r0
 8104f26:	4b06      	ldr	r3, [pc, #24]	; (8104f40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104f28:	6a1b      	ldr	r3, [r3, #32]
 8104f2a:	091b      	lsrs	r3, r3, #4
 8104f2c:	f003 0307 	and.w	r3, r3, #7
 8104f30:	4904      	ldr	r1, [pc, #16]	; (8104f44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104f32:	5ccb      	ldrb	r3, [r1, r3]
 8104f34:	f003 031f 	and.w	r3, r3, #31
 8104f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104f3c:	4618      	mov	r0, r3
 8104f3e:	bd80      	pop	{r7, pc}
 8104f40:	58024400 	.word	0x58024400
 8104f44:	08116a54 	.word	0x08116a54

08104f48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8104f48:	b480      	push	{r7}
 8104f4a:	b089      	sub	sp, #36	; 0x24
 8104f4c:	af00      	add	r7, sp, #0
 8104f4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104f50:	4ba1      	ldr	r3, [pc, #644]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f54:	f003 0303 	and.w	r3, r3, #3
 8104f58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8104f5a:	4b9f      	ldr	r3, [pc, #636]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f5e:	0b1b      	lsrs	r3, r3, #12
 8104f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104f64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104f66:	4b9c      	ldr	r3, [pc, #624]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f6a:	091b      	lsrs	r3, r3, #4
 8104f6c:	f003 0301 	and.w	r3, r3, #1
 8104f70:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8104f72:	4b99      	ldr	r3, [pc, #612]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f76:	08db      	lsrs	r3, r3, #3
 8104f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104f7c:	693a      	ldr	r2, [r7, #16]
 8104f7e:	fb02 f303 	mul.w	r3, r2, r3
 8104f82:	ee07 3a90 	vmov	s15, r3
 8104f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104f8e:	697b      	ldr	r3, [r7, #20]
 8104f90:	2b00      	cmp	r3, #0
 8104f92:	f000 8111 	beq.w	81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104f96:	69bb      	ldr	r3, [r7, #24]
 8104f98:	2b02      	cmp	r3, #2
 8104f9a:	f000 8083 	beq.w	81050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104f9e:	69bb      	ldr	r3, [r7, #24]
 8104fa0:	2b02      	cmp	r3, #2
 8104fa2:	f200 80a1 	bhi.w	81050e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104fa6:	69bb      	ldr	r3, [r7, #24]
 8104fa8:	2b00      	cmp	r3, #0
 8104faa:	d003      	beq.n	8104fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104fac:	69bb      	ldr	r3, [r7, #24]
 8104fae:	2b01      	cmp	r3, #1
 8104fb0:	d056      	beq.n	8105060 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104fb2:	e099      	b.n	81050e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104fb4:	4b88      	ldr	r3, [pc, #544]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	f003 0320 	and.w	r3, r3, #32
 8104fbc:	2b00      	cmp	r3, #0
 8104fbe:	d02d      	beq.n	810501c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104fc0:	4b85      	ldr	r3, [pc, #532]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fc2:	681b      	ldr	r3, [r3, #0]
 8104fc4:	08db      	lsrs	r3, r3, #3
 8104fc6:	f003 0303 	and.w	r3, r3, #3
 8104fca:	4a84      	ldr	r2, [pc, #528]	; (81051dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8104fd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104fd2:	68bb      	ldr	r3, [r7, #8]
 8104fd4:	ee07 3a90 	vmov	s15, r3
 8104fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fdc:	697b      	ldr	r3, [r7, #20]
 8104fde:	ee07 3a90 	vmov	s15, r3
 8104fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104fea:	4b7b      	ldr	r3, [pc, #492]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ff2:	ee07 3a90 	vmov	s15, r3
 8104ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ffe:	eddf 5a78 	vldr	s11, [pc, #480]	; 81051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810500a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105016:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810501a:	e087      	b.n	810512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810501c:	697b      	ldr	r3, [r7, #20]
 810501e:	ee07 3a90 	vmov	s15, r3
 8105022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105026:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81051e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810502a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810502e:	4b6a      	ldr	r3, [pc, #424]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105036:	ee07 3a90 	vmov	s15, r3
 810503a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810503e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105042:	eddf 5a67 	vldr	s11, [pc, #412]	; 81051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810504a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810504e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105056:	ee67 7a27 	vmul.f32	s15, s14, s15
 810505a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810505e:	e065      	b.n	810512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105060:	697b      	ldr	r3, [r7, #20]
 8105062:	ee07 3a90 	vmov	s15, r3
 8105066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810506a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810506e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105072:	4b59      	ldr	r3, [pc, #356]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810507a:	ee07 3a90 	vmov	s15, r3
 810507e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105082:	ed97 6a03 	vldr	s12, [r7, #12]
 8105086:	eddf 5a56 	vldr	s11, [pc, #344]	; 81051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810508a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810508e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810509a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810509e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81050a2:	e043      	b.n	810512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81050a4:	697b      	ldr	r3, [r7, #20]
 81050a6:	ee07 3a90 	vmov	s15, r3
 81050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81051ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050b6:	4b48      	ldr	r3, [pc, #288]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81050ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050be:	ee07 3a90 	vmov	s15, r3
 81050c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81050ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 81051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81050ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81050e6:	e021      	b.n	810512c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81050e8:	697b      	ldr	r3, [r7, #20]
 81050ea:	ee07 3a90 	vmov	s15, r3
 81050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81050f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050fa:	4b37      	ldr	r3, [pc, #220]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105102:	ee07 3a90 	vmov	s15, r3
 8105106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810510a:	ed97 6a03 	vldr	s12, [r7, #12]
 810510e:	eddf 5a34 	vldr	s11, [pc, #208]	; 81051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810511a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810512a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810512c:	4b2a      	ldr	r3, [pc, #168]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105130:	0a5b      	lsrs	r3, r3, #9
 8105132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105136:	ee07 3a90 	vmov	s15, r3
 810513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810513e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105146:	edd7 6a07 	vldr	s13, [r7, #28]
 810514a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810514e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105152:	ee17 2a90 	vmov	r2, s15
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810515a:	4b1f      	ldr	r3, [pc, #124]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810515e:	0c1b      	lsrs	r3, r3, #16
 8105160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105164:	ee07 3a90 	vmov	s15, r3
 8105168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810516c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105174:	edd7 6a07 	vldr	s13, [r7, #28]
 8105178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810517c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105180:	ee17 2a90 	vmov	r2, s15
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105188:	4b13      	ldr	r3, [pc, #76]	; (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810518c:	0e1b      	lsrs	r3, r3, #24
 810518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105192:	ee07 3a90 	vmov	s15, r3
 8105196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810519a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810519e:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051a2:	edd7 6a07 	vldr	s13, [r7, #28]
 81051a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051ae:	ee17 2a90 	vmov	r2, s15
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81051b6:	e008      	b.n	81051ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	2200      	movs	r2, #0
 81051bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	2200      	movs	r2, #0
 81051c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	2200      	movs	r2, #0
 81051c8:	609a      	str	r2, [r3, #8]
}
 81051ca:	bf00      	nop
 81051cc:	3724      	adds	r7, #36	; 0x24
 81051ce:	46bd      	mov	sp, r7
 81051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051d4:	4770      	bx	lr
 81051d6:	bf00      	nop
 81051d8:	58024400 	.word	0x58024400
 81051dc:	03d09000 	.word	0x03d09000
 81051e0:	46000000 	.word	0x46000000
 81051e4:	4c742400 	.word	0x4c742400
 81051e8:	4a742400 	.word	0x4a742400
 81051ec:	4af42400 	.word	0x4af42400

081051f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81051f0:	b480      	push	{r7}
 81051f2:	b089      	sub	sp, #36	; 0x24
 81051f4:	af00      	add	r7, sp, #0
 81051f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051f8:	4ba1      	ldr	r3, [pc, #644]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051fc:	f003 0303 	and.w	r3, r3, #3
 8105200:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105202:	4b9f      	ldr	r3, [pc, #636]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105206:	0d1b      	lsrs	r3, r3, #20
 8105208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810520c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810520e:	4b9c      	ldr	r3, [pc, #624]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105212:	0a1b      	lsrs	r3, r3, #8
 8105214:	f003 0301 	and.w	r3, r3, #1
 8105218:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810521a:	4b99      	ldr	r3, [pc, #612]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810521e:	08db      	lsrs	r3, r3, #3
 8105220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105224:	693a      	ldr	r2, [r7, #16]
 8105226:	fb02 f303 	mul.w	r3, r2, r3
 810522a:	ee07 3a90 	vmov	s15, r3
 810522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105236:	697b      	ldr	r3, [r7, #20]
 8105238:	2b00      	cmp	r3, #0
 810523a:	f000 8111 	beq.w	8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810523e:	69bb      	ldr	r3, [r7, #24]
 8105240:	2b02      	cmp	r3, #2
 8105242:	f000 8083 	beq.w	810534c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105246:	69bb      	ldr	r3, [r7, #24]
 8105248:	2b02      	cmp	r3, #2
 810524a:	f200 80a1 	bhi.w	8105390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810524e:	69bb      	ldr	r3, [r7, #24]
 8105250:	2b00      	cmp	r3, #0
 8105252:	d003      	beq.n	810525c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105254:	69bb      	ldr	r3, [r7, #24]
 8105256:	2b01      	cmp	r3, #1
 8105258:	d056      	beq.n	8105308 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810525a:	e099      	b.n	8105390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810525c:	4b88      	ldr	r3, [pc, #544]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810525e:	681b      	ldr	r3, [r3, #0]
 8105260:	f003 0320 	and.w	r3, r3, #32
 8105264:	2b00      	cmp	r3, #0
 8105266:	d02d      	beq.n	81052c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105268:	4b85      	ldr	r3, [pc, #532]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	08db      	lsrs	r3, r3, #3
 810526e:	f003 0303 	and.w	r3, r3, #3
 8105272:	4a84      	ldr	r2, [pc, #528]	; (8105484 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105274:	fa22 f303 	lsr.w	r3, r2, r3
 8105278:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810527a:	68bb      	ldr	r3, [r7, #8]
 810527c:	ee07 3a90 	vmov	s15, r3
 8105280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105284:	697b      	ldr	r3, [r7, #20]
 8105286:	ee07 3a90 	vmov	s15, r3
 810528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105292:	4b7b      	ldr	r3, [pc, #492]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810529a:	ee07 3a90 	vmov	s15, r3
 810529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81052a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81052c2:	e087      	b.n	81053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81052c4:	697b      	ldr	r3, [r7, #20]
 81052c6:	ee07 3a90 	vmov	s15, r3
 81052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810548c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81052d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052d6:	4b6a      	ldr	r3, [pc, #424]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81052da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052de:	ee07 3a90 	vmov	s15, r3
 81052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81052ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81052ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105306:	e065      	b.n	81053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105308:	697b      	ldr	r3, [r7, #20]
 810530a:	ee07 3a90 	vmov	s15, r3
 810530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105312:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810531a:	4b59      	ldr	r3, [pc, #356]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810531e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105322:	ee07 3a90 	vmov	s15, r3
 8105326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810532a:	ed97 6a03 	vldr	s12, [r7, #12]
 810532e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810533a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810533e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810534a:	e043      	b.n	81053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810534c:	697b      	ldr	r3, [r7, #20]
 810534e:	ee07 3a90 	vmov	s15, r3
 8105352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105356:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810535a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810535e:	4b48      	ldr	r3, [pc, #288]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105366:	ee07 3a90 	vmov	s15, r3
 810536a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810536e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105372:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810537a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810537e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105386:	ee67 7a27 	vmul.f32	s15, s14, s15
 810538a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810538e:	e021      	b.n	81053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105390:	697b      	ldr	r3, [r7, #20]
 8105392:	ee07 3a90 	vmov	s15, r3
 8105396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810539a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810539e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053a2:	4b37      	ldr	r3, [pc, #220]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81053a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053aa:	ee07 3a90 	vmov	s15, r3
 81053ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81053b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81053ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81053c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81053d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81053d4:	4b2a      	ldr	r3, [pc, #168]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81053d8:	0a5b      	lsrs	r3, r3, #9
 81053da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053de:	ee07 3a90 	vmov	s15, r3
 81053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053ee:	edd7 6a07 	vldr	s13, [r7, #28]
 81053f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053fa:	ee17 2a90 	vmov	r2, s15
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105402:	4b1f      	ldr	r3, [pc, #124]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105406:	0c1b      	lsrs	r3, r3, #16
 8105408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810540c:	ee07 3a90 	vmov	s15, r3
 8105410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105418:	ee37 7a87 	vadd.f32	s14, s15, s14
 810541c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105428:	ee17 2a90 	vmov	r2, s15
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105430:	4b13      	ldr	r3, [pc, #76]	; (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105434:	0e1b      	lsrs	r3, r3, #24
 8105436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810543a:	ee07 3a90 	vmov	s15, r3
 810543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105446:	ee37 7a87 	vadd.f32	s14, s15, s14
 810544a:	edd7 6a07 	vldr	s13, [r7, #28]
 810544e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105456:	ee17 2a90 	vmov	r2, s15
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810545e:	e008      	b.n	8105472 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	2200      	movs	r2, #0
 8105464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105466:	687b      	ldr	r3, [r7, #4]
 8105468:	2200      	movs	r2, #0
 810546a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	2200      	movs	r2, #0
 8105470:	609a      	str	r2, [r3, #8]
}
 8105472:	bf00      	nop
 8105474:	3724      	adds	r7, #36	; 0x24
 8105476:	46bd      	mov	sp, r7
 8105478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810547c:	4770      	bx	lr
 810547e:	bf00      	nop
 8105480:	58024400 	.word	0x58024400
 8105484:	03d09000 	.word	0x03d09000
 8105488:	46000000 	.word	0x46000000
 810548c:	4c742400 	.word	0x4c742400
 8105490:	4a742400 	.word	0x4a742400
 8105494:	4af42400 	.word	0x4af42400

08105498 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105498:	b580      	push	{r7, lr}
 810549a:	b084      	sub	sp, #16
 810549c:	af00      	add	r7, sp, #0
 810549e:	6078      	str	r0, [r7, #4]
 81054a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81054a2:	2300      	movs	r3, #0
 81054a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81054a6:	4b54      	ldr	r3, [pc, #336]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054aa:	f003 0303 	and.w	r3, r3, #3
 81054ae:	2b03      	cmp	r3, #3
 81054b0:	d101      	bne.n	81054b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81054b2:	2301      	movs	r3, #1
 81054b4:	e09b      	b.n	81055ee <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81054b6:	4b50      	ldr	r3, [pc, #320]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81054b8:	681b      	ldr	r3, [r3, #0]
 81054ba:	4a4f      	ldr	r2, [pc, #316]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81054bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81054c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81054c2:	f7fb ffb5 	bl	8101430 <HAL_GetTick>
 81054c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81054c8:	e008      	b.n	81054dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81054ca:	f7fb ffb1 	bl	8101430 <HAL_GetTick>
 81054ce:	4602      	mov	r2, r0
 81054d0:	68bb      	ldr	r3, [r7, #8]
 81054d2:	1ad3      	subs	r3, r2, r3
 81054d4:	2b02      	cmp	r3, #2
 81054d6:	d901      	bls.n	81054dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81054d8:	2303      	movs	r3, #3
 81054da:	e088      	b.n	81055ee <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81054dc:	4b46      	ldr	r3, [pc, #280]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81054e4:	2b00      	cmp	r3, #0
 81054e6:	d1f0      	bne.n	81054ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81054e8:	4b43      	ldr	r3, [pc, #268]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	031b      	lsls	r3, r3, #12
 81054f6:	4940      	ldr	r1, [pc, #256]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81054f8:	4313      	orrs	r3, r2
 81054fa:	628b      	str	r3, [r1, #40]	; 0x28
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	685b      	ldr	r3, [r3, #4]
 8105500:	3b01      	subs	r3, #1
 8105502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	689b      	ldr	r3, [r3, #8]
 810550a:	3b01      	subs	r3, #1
 810550c:	025b      	lsls	r3, r3, #9
 810550e:	b29b      	uxth	r3, r3
 8105510:	431a      	orrs	r2, r3
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	68db      	ldr	r3, [r3, #12]
 8105516:	3b01      	subs	r3, #1
 8105518:	041b      	lsls	r3, r3, #16
 810551a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810551e:	431a      	orrs	r2, r3
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	691b      	ldr	r3, [r3, #16]
 8105524:	3b01      	subs	r3, #1
 8105526:	061b      	lsls	r3, r3, #24
 8105528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810552c:	4932      	ldr	r1, [pc, #200]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 810552e:	4313      	orrs	r3, r2
 8105530:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105532:	4b31      	ldr	r3, [pc, #196]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	695b      	ldr	r3, [r3, #20]
 810553e:	492e      	ldr	r1, [pc, #184]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105540:	4313      	orrs	r3, r2
 8105542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105544:	4b2c      	ldr	r3, [pc, #176]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105548:	f023 0220 	bic.w	r2, r3, #32
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	699b      	ldr	r3, [r3, #24]
 8105550:	4929      	ldr	r1, [pc, #164]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105552:	4313      	orrs	r3, r2
 8105554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105556:	4b28      	ldr	r3, [pc, #160]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810555a:	4a27      	ldr	r2, [pc, #156]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 810555c:	f023 0310 	bic.w	r3, r3, #16
 8105560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105562:	4b25      	ldr	r3, [pc, #148]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810556a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810556e:	687a      	ldr	r2, [r7, #4]
 8105570:	69d2      	ldr	r2, [r2, #28]
 8105572:	00d2      	lsls	r2, r2, #3
 8105574:	4920      	ldr	r1, [pc, #128]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105576:	4313      	orrs	r3, r2
 8105578:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810557a:	4b1f      	ldr	r3, [pc, #124]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 810557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810557e:	4a1e      	ldr	r2, [pc, #120]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105580:	f043 0310 	orr.w	r3, r3, #16
 8105584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105586:	683b      	ldr	r3, [r7, #0]
 8105588:	2b00      	cmp	r3, #0
 810558a:	d106      	bne.n	810559a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810558c:	4b1a      	ldr	r3, [pc, #104]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 810558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105590:	4a19      	ldr	r2, [pc, #100]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 8105592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105598:	e00f      	b.n	81055ba <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810559a:	683b      	ldr	r3, [r7, #0]
 810559c:	2b01      	cmp	r3, #1
 810559e:	d106      	bne.n	81055ae <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81055a0:	4b15      	ldr	r3, [pc, #84]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055a4:	4a14      	ldr	r2, [pc, #80]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81055a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81055aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81055ac:	e005      	b.n	81055ba <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81055ae:	4b12      	ldr	r3, [pc, #72]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055b2:	4a11      	ldr	r2, [pc, #68]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81055b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81055b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81055ba:	4b0f      	ldr	r3, [pc, #60]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81055bc:	681b      	ldr	r3, [r3, #0]
 81055be:	4a0e      	ldr	r2, [pc, #56]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81055c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81055c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81055c6:	f7fb ff33 	bl	8101430 <HAL_GetTick>
 81055ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81055cc:	e008      	b.n	81055e0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81055ce:	f7fb ff2f 	bl	8101430 <HAL_GetTick>
 81055d2:	4602      	mov	r2, r0
 81055d4:	68bb      	ldr	r3, [r7, #8]
 81055d6:	1ad3      	subs	r3, r2, r3
 81055d8:	2b02      	cmp	r3, #2
 81055da:	d901      	bls.n	81055e0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81055dc:	2303      	movs	r3, #3
 81055de:	e006      	b.n	81055ee <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81055e0:	4b05      	ldr	r3, [pc, #20]	; (81055f8 <RCCEx_PLL2_Config+0x160>)
 81055e2:	681b      	ldr	r3, [r3, #0]
 81055e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81055e8:	2b00      	cmp	r3, #0
 81055ea:	d0f0      	beq.n	81055ce <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 81055ee:	4618      	mov	r0, r3
 81055f0:	3710      	adds	r7, #16
 81055f2:	46bd      	mov	sp, r7
 81055f4:	bd80      	pop	{r7, pc}
 81055f6:	bf00      	nop
 81055f8:	58024400 	.word	0x58024400

081055fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81055fc:	b580      	push	{r7, lr}
 81055fe:	b084      	sub	sp, #16
 8105600:	af00      	add	r7, sp, #0
 8105602:	6078      	str	r0, [r7, #4]
 8105604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105606:	2300      	movs	r3, #0
 8105608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810560a:	4b54      	ldr	r3, [pc, #336]	; (810575c <RCCEx_PLL3_Config+0x160>)
 810560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810560e:	f003 0303 	and.w	r3, r3, #3
 8105612:	2b03      	cmp	r3, #3
 8105614:	d101      	bne.n	810561a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105616:	2301      	movs	r3, #1
 8105618:	e09b      	b.n	8105752 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810561a:	4b50      	ldr	r3, [pc, #320]	; (810575c <RCCEx_PLL3_Config+0x160>)
 810561c:	681b      	ldr	r3, [r3, #0]
 810561e:	4a4f      	ldr	r2, [pc, #316]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105626:	f7fb ff03 	bl	8101430 <HAL_GetTick>
 810562a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810562c:	e008      	b.n	8105640 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810562e:	f7fb feff 	bl	8101430 <HAL_GetTick>
 8105632:	4602      	mov	r2, r0
 8105634:	68bb      	ldr	r3, [r7, #8]
 8105636:	1ad3      	subs	r3, r2, r3
 8105638:	2b02      	cmp	r3, #2
 810563a:	d901      	bls.n	8105640 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810563c:	2303      	movs	r3, #3
 810563e:	e088      	b.n	8105752 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105640:	4b46      	ldr	r3, [pc, #280]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105648:	2b00      	cmp	r3, #0
 810564a:	d1f0      	bne.n	810562e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810564c:	4b43      	ldr	r3, [pc, #268]	; (810575c <RCCEx_PLL3_Config+0x160>)
 810564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105650:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	051b      	lsls	r3, r3, #20
 810565a:	4940      	ldr	r1, [pc, #256]	; (810575c <RCCEx_PLL3_Config+0x160>)
 810565c:	4313      	orrs	r3, r2
 810565e:	628b      	str	r3, [r1, #40]	; 0x28
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	685b      	ldr	r3, [r3, #4]
 8105664:	3b01      	subs	r3, #1
 8105666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	689b      	ldr	r3, [r3, #8]
 810566e:	3b01      	subs	r3, #1
 8105670:	025b      	lsls	r3, r3, #9
 8105672:	b29b      	uxth	r3, r3
 8105674:	431a      	orrs	r2, r3
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	68db      	ldr	r3, [r3, #12]
 810567a:	3b01      	subs	r3, #1
 810567c:	041b      	lsls	r3, r3, #16
 810567e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105682:	431a      	orrs	r2, r3
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	691b      	ldr	r3, [r3, #16]
 8105688:	3b01      	subs	r3, #1
 810568a:	061b      	lsls	r3, r3, #24
 810568c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105690:	4932      	ldr	r1, [pc, #200]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105692:	4313      	orrs	r3, r2
 8105694:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105696:	4b31      	ldr	r3, [pc, #196]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810569a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	695b      	ldr	r3, [r3, #20]
 81056a2:	492e      	ldr	r1, [pc, #184]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056a4:	4313      	orrs	r3, r2
 81056a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81056a8:	4b2c      	ldr	r3, [pc, #176]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81056b0:	687b      	ldr	r3, [r7, #4]
 81056b2:	699b      	ldr	r3, [r3, #24]
 81056b4:	4929      	ldr	r1, [pc, #164]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056b6:	4313      	orrs	r3, r2
 81056b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81056ba:	4b28      	ldr	r3, [pc, #160]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056be:	4a27      	ldr	r2, [pc, #156]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81056c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81056c6:	4b25      	ldr	r3, [pc, #148]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81056ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81056ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81056d2:	687a      	ldr	r2, [r7, #4]
 81056d4:	69d2      	ldr	r2, [r2, #28]
 81056d6:	00d2      	lsls	r2, r2, #3
 81056d8:	4920      	ldr	r1, [pc, #128]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056da:	4313      	orrs	r3, r2
 81056dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81056de:	4b1f      	ldr	r3, [pc, #124]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056e2:	4a1e      	ldr	r2, [pc, #120]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81056e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81056ea:	683b      	ldr	r3, [r7, #0]
 81056ec:	2b00      	cmp	r3, #0
 81056ee:	d106      	bne.n	81056fe <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81056f0:	4b1a      	ldr	r3, [pc, #104]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056f4:	4a19      	ldr	r2, [pc, #100]	; (810575c <RCCEx_PLL3_Config+0x160>)
 81056f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81056fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81056fc:	e00f      	b.n	810571e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81056fe:	683b      	ldr	r3, [r7, #0]
 8105700:	2b01      	cmp	r3, #1
 8105702:	d106      	bne.n	8105712 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105704:	4b15      	ldr	r3, [pc, #84]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105708:	4a14      	ldr	r2, [pc, #80]	; (810575c <RCCEx_PLL3_Config+0x160>)
 810570a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810570e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105710:	e005      	b.n	810571e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105712:	4b12      	ldr	r3, [pc, #72]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105716:	4a11      	ldr	r2, [pc, #68]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810571c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810571e:	4b0f      	ldr	r3, [pc, #60]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	4a0e      	ldr	r2, [pc, #56]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810572a:	f7fb fe81 	bl	8101430 <HAL_GetTick>
 810572e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105730:	e008      	b.n	8105744 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105732:	f7fb fe7d 	bl	8101430 <HAL_GetTick>
 8105736:	4602      	mov	r2, r0
 8105738:	68bb      	ldr	r3, [r7, #8]
 810573a:	1ad3      	subs	r3, r2, r3
 810573c:	2b02      	cmp	r3, #2
 810573e:	d901      	bls.n	8105744 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105740:	2303      	movs	r3, #3
 8105742:	e006      	b.n	8105752 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105744:	4b05      	ldr	r3, [pc, #20]	; (810575c <RCCEx_PLL3_Config+0x160>)
 8105746:	681b      	ldr	r3, [r3, #0]
 8105748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810574c:	2b00      	cmp	r3, #0
 810574e:	d0f0      	beq.n	8105732 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105750:	7bfb      	ldrb	r3, [r7, #15]
}
 8105752:	4618      	mov	r0, r3
 8105754:	3710      	adds	r7, #16
 8105756:	46bd      	mov	sp, r7
 8105758:	bd80      	pop	{r7, pc}
 810575a:	bf00      	nop
 810575c:	58024400 	.word	0x58024400

08105760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105760:	b580      	push	{r7, lr}
 8105762:	b082      	sub	sp, #8
 8105764:	af00      	add	r7, sp, #0
 8105766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	2b00      	cmp	r3, #0
 810576c:	d101      	bne.n	8105772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810576e:	2301      	movs	r3, #1
 8105770:	e049      	b.n	8105806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105778:	b2db      	uxtb	r3, r3
 810577a:	2b00      	cmp	r3, #0
 810577c:	d106      	bne.n	810578c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	2200      	movs	r2, #0
 8105782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105786:	6878      	ldr	r0, [r7, #4]
 8105788:	f00c fa9e 	bl	8111cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	2202      	movs	r2, #2
 8105790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	681a      	ldr	r2, [r3, #0]
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	3304      	adds	r3, #4
 810579c:	4619      	mov	r1, r3
 810579e:	4610      	mov	r0, r2
 81057a0:	f000 fcc8 	bl	8106134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	2201      	movs	r2, #1
 81057a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	2201      	movs	r2, #1
 81057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	2201      	movs	r2, #1
 81057b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81057bc:	687b      	ldr	r3, [r7, #4]
 81057be:	2201      	movs	r2, #1
 81057c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81057c4:	687b      	ldr	r3, [r7, #4]
 81057c6:	2201      	movs	r2, #1
 81057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	2201      	movs	r2, #1
 81057d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	2201      	movs	r2, #1
 81057d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	2201      	movs	r2, #1
 81057e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81057e4:	687b      	ldr	r3, [r7, #4]
 81057e6:	2201      	movs	r2, #1
 81057e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81057ec:	687b      	ldr	r3, [r7, #4]
 81057ee:	2201      	movs	r2, #1
 81057f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81057f4:	687b      	ldr	r3, [r7, #4]
 81057f6:	2201      	movs	r2, #1
 81057f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81057fc:	687b      	ldr	r3, [r7, #4]
 81057fe:	2201      	movs	r2, #1
 8105800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105804:	2300      	movs	r3, #0
}
 8105806:	4618      	mov	r0, r3
 8105808:	3708      	adds	r7, #8
 810580a:	46bd      	mov	sp, r7
 810580c:	bd80      	pop	{r7, pc}
	...

08105810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8105810:	b480      	push	{r7}
 8105812:	b085      	sub	sp, #20
 8105814:	af00      	add	r7, sp, #0
 8105816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810581e:	b2db      	uxtb	r3, r3
 8105820:	2b01      	cmp	r3, #1
 8105822:	d001      	beq.n	8105828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8105824:	2301      	movs	r3, #1
 8105826:	e04c      	b.n	81058c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	2202      	movs	r2, #2
 810582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	4a26      	ldr	r2, [pc, #152]	; (81058d0 <HAL_TIM_Base_Start+0xc0>)
 8105836:	4293      	cmp	r3, r2
 8105838:	d022      	beq.n	8105880 <HAL_TIM_Base_Start+0x70>
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105842:	d01d      	beq.n	8105880 <HAL_TIM_Base_Start+0x70>
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	4a22      	ldr	r2, [pc, #136]	; (81058d4 <HAL_TIM_Base_Start+0xc4>)
 810584a:	4293      	cmp	r3, r2
 810584c:	d018      	beq.n	8105880 <HAL_TIM_Base_Start+0x70>
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	4a21      	ldr	r2, [pc, #132]	; (81058d8 <HAL_TIM_Base_Start+0xc8>)
 8105854:	4293      	cmp	r3, r2
 8105856:	d013      	beq.n	8105880 <HAL_TIM_Base_Start+0x70>
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	4a1f      	ldr	r2, [pc, #124]	; (81058dc <HAL_TIM_Base_Start+0xcc>)
 810585e:	4293      	cmp	r3, r2
 8105860:	d00e      	beq.n	8105880 <HAL_TIM_Base_Start+0x70>
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	4a1e      	ldr	r2, [pc, #120]	; (81058e0 <HAL_TIM_Base_Start+0xd0>)
 8105868:	4293      	cmp	r3, r2
 810586a:	d009      	beq.n	8105880 <HAL_TIM_Base_Start+0x70>
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	681b      	ldr	r3, [r3, #0]
 8105870:	4a1c      	ldr	r2, [pc, #112]	; (81058e4 <HAL_TIM_Base_Start+0xd4>)
 8105872:	4293      	cmp	r3, r2
 8105874:	d004      	beq.n	8105880 <HAL_TIM_Base_Start+0x70>
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	4a1b      	ldr	r2, [pc, #108]	; (81058e8 <HAL_TIM_Base_Start+0xd8>)
 810587c:	4293      	cmp	r3, r2
 810587e:	d115      	bne.n	81058ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	689a      	ldr	r2, [r3, #8]
 8105886:	4b19      	ldr	r3, [pc, #100]	; (81058ec <HAL_TIM_Base_Start+0xdc>)
 8105888:	4013      	ands	r3, r2
 810588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810588c:	68fb      	ldr	r3, [r7, #12]
 810588e:	2b06      	cmp	r3, #6
 8105890:	d015      	beq.n	81058be <HAL_TIM_Base_Start+0xae>
 8105892:	68fb      	ldr	r3, [r7, #12]
 8105894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105898:	d011      	beq.n	81058be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	681b      	ldr	r3, [r3, #0]
 810589e:	681a      	ldr	r2, [r3, #0]
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	f042 0201 	orr.w	r2, r2, #1
 81058a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81058aa:	e008      	b.n	81058be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	681b      	ldr	r3, [r3, #0]
 81058b0:	681a      	ldr	r2, [r3, #0]
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	f042 0201 	orr.w	r2, r2, #1
 81058ba:	601a      	str	r2, [r3, #0]
 81058bc:	e000      	b.n	81058c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81058be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81058c0:	2300      	movs	r3, #0
}
 81058c2:	4618      	mov	r0, r3
 81058c4:	3714      	adds	r7, #20
 81058c6:	46bd      	mov	sp, r7
 81058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058cc:	4770      	bx	lr
 81058ce:	bf00      	nop
 81058d0:	40010000 	.word	0x40010000
 81058d4:	40000400 	.word	0x40000400
 81058d8:	40000800 	.word	0x40000800
 81058dc:	40000c00 	.word	0x40000c00
 81058e0:	40010400 	.word	0x40010400
 81058e4:	40001800 	.word	0x40001800
 81058e8:	40014000 	.word	0x40014000
 81058ec:	00010007 	.word	0x00010007

081058f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81058f0:	b480      	push	{r7}
 81058f2:	b085      	sub	sp, #20
 81058f4:	af00      	add	r7, sp, #0
 81058f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81058fe:	b2db      	uxtb	r3, r3
 8105900:	2b01      	cmp	r3, #1
 8105902:	d001      	beq.n	8105908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8105904:	2301      	movs	r3, #1
 8105906:	e054      	b.n	81059b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	2202      	movs	r2, #2
 810590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	68da      	ldr	r2, [r3, #12]
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	f042 0201 	orr.w	r2, r2, #1
 810591e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	4a26      	ldr	r2, [pc, #152]	; (81059c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8105926:	4293      	cmp	r3, r2
 8105928:	d022      	beq.n	8105970 <HAL_TIM_Base_Start_IT+0x80>
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105932:	d01d      	beq.n	8105970 <HAL_TIM_Base_Start_IT+0x80>
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	681b      	ldr	r3, [r3, #0]
 8105938:	4a22      	ldr	r2, [pc, #136]	; (81059c4 <HAL_TIM_Base_Start_IT+0xd4>)
 810593a:	4293      	cmp	r3, r2
 810593c:	d018      	beq.n	8105970 <HAL_TIM_Base_Start_IT+0x80>
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	4a21      	ldr	r2, [pc, #132]	; (81059c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8105944:	4293      	cmp	r3, r2
 8105946:	d013      	beq.n	8105970 <HAL_TIM_Base_Start_IT+0x80>
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	4a1f      	ldr	r2, [pc, #124]	; (81059cc <HAL_TIM_Base_Start_IT+0xdc>)
 810594e:	4293      	cmp	r3, r2
 8105950:	d00e      	beq.n	8105970 <HAL_TIM_Base_Start_IT+0x80>
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	4a1e      	ldr	r2, [pc, #120]	; (81059d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8105958:	4293      	cmp	r3, r2
 810595a:	d009      	beq.n	8105970 <HAL_TIM_Base_Start_IT+0x80>
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	681b      	ldr	r3, [r3, #0]
 8105960:	4a1c      	ldr	r2, [pc, #112]	; (81059d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8105962:	4293      	cmp	r3, r2
 8105964:	d004      	beq.n	8105970 <HAL_TIM_Base_Start_IT+0x80>
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	4a1b      	ldr	r2, [pc, #108]	; (81059d8 <HAL_TIM_Base_Start_IT+0xe8>)
 810596c:	4293      	cmp	r3, r2
 810596e:	d115      	bne.n	810599c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105970:	687b      	ldr	r3, [r7, #4]
 8105972:	681b      	ldr	r3, [r3, #0]
 8105974:	689a      	ldr	r2, [r3, #8]
 8105976:	4b19      	ldr	r3, [pc, #100]	; (81059dc <HAL_TIM_Base_Start_IT+0xec>)
 8105978:	4013      	ands	r3, r2
 810597a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810597c:	68fb      	ldr	r3, [r7, #12]
 810597e:	2b06      	cmp	r3, #6
 8105980:	d015      	beq.n	81059ae <HAL_TIM_Base_Start_IT+0xbe>
 8105982:	68fb      	ldr	r3, [r7, #12]
 8105984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105988:	d011      	beq.n	81059ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	681b      	ldr	r3, [r3, #0]
 810598e:	681a      	ldr	r2, [r3, #0]
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	681b      	ldr	r3, [r3, #0]
 8105994:	f042 0201 	orr.w	r2, r2, #1
 8105998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810599a:	e008      	b.n	81059ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	681a      	ldr	r2, [r3, #0]
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	f042 0201 	orr.w	r2, r2, #1
 81059aa:	601a      	str	r2, [r3, #0]
 81059ac:	e000      	b.n	81059b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81059ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81059b0:	2300      	movs	r3, #0
}
 81059b2:	4618      	mov	r0, r3
 81059b4:	3714      	adds	r7, #20
 81059b6:	46bd      	mov	sp, r7
 81059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059bc:	4770      	bx	lr
 81059be:	bf00      	nop
 81059c0:	40010000 	.word	0x40010000
 81059c4:	40000400 	.word	0x40000400
 81059c8:	40000800 	.word	0x40000800
 81059cc:	40000c00 	.word	0x40000c00
 81059d0:	40010400 	.word	0x40010400
 81059d4:	40001800 	.word	0x40001800
 81059d8:	40014000 	.word	0x40014000
 81059dc:	00010007 	.word	0x00010007

081059e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81059e0:	b580      	push	{r7, lr}
 81059e2:	b082      	sub	sp, #8
 81059e4:	af00      	add	r7, sp, #0
 81059e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	2b00      	cmp	r3, #0
 81059ec:	d101      	bne.n	81059f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81059ee:	2301      	movs	r3, #1
 81059f0:	e049      	b.n	8105a86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81059f8:	b2db      	uxtb	r3, r3
 81059fa:	2b00      	cmp	r3, #0
 81059fc:	d106      	bne.n	8105a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	2200      	movs	r2, #0
 8105a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8105a06:	6878      	ldr	r0, [r7, #4]
 8105a08:	f000 f841 	bl	8105a8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	2202      	movs	r2, #2
 8105a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681a      	ldr	r2, [r3, #0]
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	3304      	adds	r3, #4
 8105a1c:	4619      	mov	r1, r3
 8105a1e:	4610      	mov	r0, r2
 8105a20:	f000 fb88 	bl	8106134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	2201      	movs	r2, #1
 8105a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2201      	movs	r2, #1
 8105a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	2201      	movs	r2, #1
 8105a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105a3c:	687b      	ldr	r3, [r7, #4]
 8105a3e:	2201      	movs	r2, #1
 8105a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	2201      	movs	r2, #1
 8105a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	2201      	movs	r2, #1
 8105a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	2201      	movs	r2, #1
 8105a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	2201      	movs	r2, #1
 8105a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	2201      	movs	r2, #1
 8105a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	2201      	movs	r2, #1
 8105a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	2201      	movs	r2, #1
 8105a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	2201      	movs	r2, #1
 8105a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105a84:	2300      	movs	r3, #0
}
 8105a86:	4618      	mov	r0, r3
 8105a88:	3708      	adds	r7, #8
 8105a8a:	46bd      	mov	sp, r7
 8105a8c:	bd80      	pop	{r7, pc}

08105a8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8105a8e:	b480      	push	{r7}
 8105a90:	b083      	sub	sp, #12
 8105a92:	af00      	add	r7, sp, #0
 8105a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8105a96:	bf00      	nop
 8105a98:	370c      	adds	r7, #12
 8105a9a:	46bd      	mov	sp, r7
 8105a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aa0:	4770      	bx	lr

08105aa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105aa2:	b580      	push	{r7, lr}
 8105aa4:	b082      	sub	sp, #8
 8105aa6:	af00      	add	r7, sp, #0
 8105aa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	691b      	ldr	r3, [r3, #16]
 8105ab0:	f003 0302 	and.w	r3, r3, #2
 8105ab4:	2b02      	cmp	r3, #2
 8105ab6:	d122      	bne.n	8105afe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	68db      	ldr	r3, [r3, #12]
 8105abe:	f003 0302 	and.w	r3, r3, #2
 8105ac2:	2b02      	cmp	r3, #2
 8105ac4:	d11b      	bne.n	8105afe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	f06f 0202 	mvn.w	r2, #2
 8105ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	2201      	movs	r2, #1
 8105ad4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	699b      	ldr	r3, [r3, #24]
 8105adc:	f003 0303 	and.w	r3, r3, #3
 8105ae0:	2b00      	cmp	r3, #0
 8105ae2:	d003      	beq.n	8105aec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8105ae4:	6878      	ldr	r0, [r7, #4]
 8105ae6:	f000 fb11 	bl	810610c <HAL_TIM_IC_CaptureCallback>
 8105aea:	e005      	b.n	8105af8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8105aec:	6878      	ldr	r0, [r7, #4]
 8105aee:	f000 fb03 	bl	81060f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105af2:	6878      	ldr	r0, [r7, #4]
 8105af4:	f00b fd0a 	bl	811150c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105af8:	687b      	ldr	r3, [r7, #4]
 8105afa:	2200      	movs	r2, #0
 8105afc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8105afe:	687b      	ldr	r3, [r7, #4]
 8105b00:	681b      	ldr	r3, [r3, #0]
 8105b02:	691b      	ldr	r3, [r3, #16]
 8105b04:	f003 0304 	and.w	r3, r3, #4
 8105b08:	2b04      	cmp	r3, #4
 8105b0a:	d122      	bne.n	8105b52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	68db      	ldr	r3, [r3, #12]
 8105b12:	f003 0304 	and.w	r3, r3, #4
 8105b16:	2b04      	cmp	r3, #4
 8105b18:	d11b      	bne.n	8105b52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	f06f 0204 	mvn.w	r2, #4
 8105b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	2202      	movs	r2, #2
 8105b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	699b      	ldr	r3, [r3, #24]
 8105b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	d003      	beq.n	8105b40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105b38:	6878      	ldr	r0, [r7, #4]
 8105b3a:	f000 fae7 	bl	810610c <HAL_TIM_IC_CaptureCallback>
 8105b3e:	e005      	b.n	8105b4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105b40:	6878      	ldr	r0, [r7, #4]
 8105b42:	f000 fad9 	bl	81060f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105b46:	6878      	ldr	r0, [r7, #4]
 8105b48:	f00b fce0 	bl	811150c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	2200      	movs	r2, #0
 8105b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	691b      	ldr	r3, [r3, #16]
 8105b58:	f003 0308 	and.w	r3, r3, #8
 8105b5c:	2b08      	cmp	r3, #8
 8105b5e:	d122      	bne.n	8105ba6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	68db      	ldr	r3, [r3, #12]
 8105b66:	f003 0308 	and.w	r3, r3, #8
 8105b6a:	2b08      	cmp	r3, #8
 8105b6c:	d11b      	bne.n	8105ba6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	f06f 0208 	mvn.w	r2, #8
 8105b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	2204      	movs	r2, #4
 8105b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	681b      	ldr	r3, [r3, #0]
 8105b82:	69db      	ldr	r3, [r3, #28]
 8105b84:	f003 0303 	and.w	r3, r3, #3
 8105b88:	2b00      	cmp	r3, #0
 8105b8a:	d003      	beq.n	8105b94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105b8c:	6878      	ldr	r0, [r7, #4]
 8105b8e:	f000 fabd 	bl	810610c <HAL_TIM_IC_CaptureCallback>
 8105b92:	e005      	b.n	8105ba0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105b94:	6878      	ldr	r0, [r7, #4]
 8105b96:	f000 faaf 	bl	81060f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105b9a:	6878      	ldr	r0, [r7, #4]
 8105b9c:	f00b fcb6 	bl	811150c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	2200      	movs	r2, #0
 8105ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	691b      	ldr	r3, [r3, #16]
 8105bac:	f003 0310 	and.w	r3, r3, #16
 8105bb0:	2b10      	cmp	r3, #16
 8105bb2:	d122      	bne.n	8105bfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	681b      	ldr	r3, [r3, #0]
 8105bb8:	68db      	ldr	r3, [r3, #12]
 8105bba:	f003 0310 	and.w	r3, r3, #16
 8105bbe:	2b10      	cmp	r3, #16
 8105bc0:	d11b      	bne.n	8105bfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	681b      	ldr	r3, [r3, #0]
 8105bc6:	f06f 0210 	mvn.w	r2, #16
 8105bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	2208      	movs	r2, #8
 8105bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	681b      	ldr	r3, [r3, #0]
 8105bd6:	69db      	ldr	r3, [r3, #28]
 8105bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105bdc:	2b00      	cmp	r3, #0
 8105bde:	d003      	beq.n	8105be8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105be0:	6878      	ldr	r0, [r7, #4]
 8105be2:	f000 fa93 	bl	810610c <HAL_TIM_IC_CaptureCallback>
 8105be6:	e005      	b.n	8105bf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105be8:	6878      	ldr	r0, [r7, #4]
 8105bea:	f000 fa85 	bl	81060f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105bee:	6878      	ldr	r0, [r7, #4]
 8105bf0:	f00b fc8c 	bl	811150c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	2200      	movs	r2, #0
 8105bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	681b      	ldr	r3, [r3, #0]
 8105bfe:	691b      	ldr	r3, [r3, #16]
 8105c00:	f003 0301 	and.w	r3, r3, #1
 8105c04:	2b01      	cmp	r3, #1
 8105c06:	d10e      	bne.n	8105c26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	68db      	ldr	r3, [r3, #12]
 8105c0e:	f003 0301 	and.w	r3, r3, #1
 8105c12:	2b01      	cmp	r3, #1
 8105c14:	d107      	bne.n	8105c26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	681b      	ldr	r3, [r3, #0]
 8105c1a:	f06f 0201 	mvn.w	r2, #1
 8105c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8105c20:	6878      	ldr	r0, [r7, #4]
 8105c22:	f00b fdaf 	bl	8111784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8105c26:	687b      	ldr	r3, [r7, #4]
 8105c28:	681b      	ldr	r3, [r3, #0]
 8105c2a:	691b      	ldr	r3, [r3, #16]
 8105c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105c30:	2b80      	cmp	r3, #128	; 0x80
 8105c32:	d10e      	bne.n	8105c52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	68db      	ldr	r3, [r3, #12]
 8105c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105c3e:	2b80      	cmp	r3, #128	; 0x80
 8105c40:	d107      	bne.n	8105c52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	681b      	ldr	r3, [r3, #0]
 8105c46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8105c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8105c4c:	6878      	ldr	r0, [r7, #4]
 8105c4e:	f000 ff93 	bl	8106b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	681b      	ldr	r3, [r3, #0]
 8105c56:	691b      	ldr	r3, [r3, #16]
 8105c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c60:	d10e      	bne.n	8105c80 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	68db      	ldr	r3, [r3, #12]
 8105c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105c6c:	2b80      	cmp	r3, #128	; 0x80
 8105c6e:	d107      	bne.n	8105c80 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8105c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105c7a:	6878      	ldr	r0, [r7, #4]
 8105c7c:	f000 ff86 	bl	8106b8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	691b      	ldr	r3, [r3, #16]
 8105c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105c8a:	2b40      	cmp	r3, #64	; 0x40
 8105c8c:	d10e      	bne.n	8105cac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	68db      	ldr	r3, [r3, #12]
 8105c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105c98:	2b40      	cmp	r3, #64	; 0x40
 8105c9a:	d107      	bne.n	8105cac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	681b      	ldr	r3, [r3, #0]
 8105ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8105ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8105ca6:	6878      	ldr	r0, [r7, #4]
 8105ca8:	f000 fa3a 	bl	8106120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	691b      	ldr	r3, [r3, #16]
 8105cb2:	f003 0320 	and.w	r3, r3, #32
 8105cb6:	2b20      	cmp	r3, #32
 8105cb8:	d10e      	bne.n	8105cd8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	681b      	ldr	r3, [r3, #0]
 8105cbe:	68db      	ldr	r3, [r3, #12]
 8105cc0:	f003 0320 	and.w	r3, r3, #32
 8105cc4:	2b20      	cmp	r3, #32
 8105cc6:	d107      	bne.n	8105cd8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	f06f 0220 	mvn.w	r2, #32
 8105cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105cd2:	6878      	ldr	r0, [r7, #4]
 8105cd4:	f000 ff46 	bl	8106b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105cd8:	bf00      	nop
 8105cda:	3708      	adds	r7, #8
 8105cdc:	46bd      	mov	sp, r7
 8105cde:	bd80      	pop	{r7, pc}

08105ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8105ce0:	b580      	push	{r7, lr}
 8105ce2:	b086      	sub	sp, #24
 8105ce4:	af00      	add	r7, sp, #0
 8105ce6:	60f8      	str	r0, [r7, #12]
 8105ce8:	60b9      	str	r1, [r7, #8]
 8105cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105cec:	2300      	movs	r3, #0
 8105cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105cf0:	68fb      	ldr	r3, [r7, #12]
 8105cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105cf6:	2b01      	cmp	r3, #1
 8105cf8:	d101      	bne.n	8105cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8105cfa:	2302      	movs	r3, #2
 8105cfc:	e0ff      	b.n	8105efe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8105cfe:	68fb      	ldr	r3, [r7, #12]
 8105d00:	2201      	movs	r2, #1
 8105d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	2b14      	cmp	r3, #20
 8105d0a:	f200 80f0 	bhi.w	8105eee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8105d0e:	a201      	add	r2, pc, #4	; (adr r2, 8105d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8105d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d14:	08105d69 	.word	0x08105d69
 8105d18:	08105eef 	.word	0x08105eef
 8105d1c:	08105eef 	.word	0x08105eef
 8105d20:	08105eef 	.word	0x08105eef
 8105d24:	08105da9 	.word	0x08105da9
 8105d28:	08105eef 	.word	0x08105eef
 8105d2c:	08105eef 	.word	0x08105eef
 8105d30:	08105eef 	.word	0x08105eef
 8105d34:	08105deb 	.word	0x08105deb
 8105d38:	08105eef 	.word	0x08105eef
 8105d3c:	08105eef 	.word	0x08105eef
 8105d40:	08105eef 	.word	0x08105eef
 8105d44:	08105e2b 	.word	0x08105e2b
 8105d48:	08105eef 	.word	0x08105eef
 8105d4c:	08105eef 	.word	0x08105eef
 8105d50:	08105eef 	.word	0x08105eef
 8105d54:	08105e6d 	.word	0x08105e6d
 8105d58:	08105eef 	.word	0x08105eef
 8105d5c:	08105eef 	.word	0x08105eef
 8105d60:	08105eef 	.word	0x08105eef
 8105d64:	08105ead 	.word	0x08105ead
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8105d68:	68fb      	ldr	r3, [r7, #12]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	68b9      	ldr	r1, [r7, #8]
 8105d6e:	4618      	mov	r0, r3
 8105d70:	f000 fa7a 	bl	8106268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105d74:	68fb      	ldr	r3, [r7, #12]
 8105d76:	681b      	ldr	r3, [r3, #0]
 8105d78:	699a      	ldr	r2, [r3, #24]
 8105d7a:	68fb      	ldr	r3, [r7, #12]
 8105d7c:	681b      	ldr	r3, [r3, #0]
 8105d7e:	f042 0208 	orr.w	r2, r2, #8
 8105d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	699a      	ldr	r2, [r3, #24]
 8105d8a:	68fb      	ldr	r3, [r7, #12]
 8105d8c:	681b      	ldr	r3, [r3, #0]
 8105d8e:	f022 0204 	bic.w	r2, r2, #4
 8105d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105d94:	68fb      	ldr	r3, [r7, #12]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	6999      	ldr	r1, [r3, #24]
 8105d9a:	68bb      	ldr	r3, [r7, #8]
 8105d9c:	691a      	ldr	r2, [r3, #16]
 8105d9e:	68fb      	ldr	r3, [r7, #12]
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	430a      	orrs	r2, r1
 8105da4:	619a      	str	r2, [r3, #24]
      break;
 8105da6:	e0a5      	b.n	8105ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105da8:	68fb      	ldr	r3, [r7, #12]
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	68b9      	ldr	r1, [r7, #8]
 8105dae:	4618      	mov	r0, r3
 8105db0:	f000 faea 	bl	8106388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105db4:	68fb      	ldr	r3, [r7, #12]
 8105db6:	681b      	ldr	r3, [r3, #0]
 8105db8:	699a      	ldr	r2, [r3, #24]
 8105dba:	68fb      	ldr	r3, [r7, #12]
 8105dbc:	681b      	ldr	r3, [r3, #0]
 8105dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105dc4:	68fb      	ldr	r3, [r7, #12]
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	699a      	ldr	r2, [r3, #24]
 8105dca:	68fb      	ldr	r3, [r7, #12]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105dd4:	68fb      	ldr	r3, [r7, #12]
 8105dd6:	681b      	ldr	r3, [r3, #0]
 8105dd8:	6999      	ldr	r1, [r3, #24]
 8105dda:	68bb      	ldr	r3, [r7, #8]
 8105ddc:	691b      	ldr	r3, [r3, #16]
 8105dde:	021a      	lsls	r2, r3, #8
 8105de0:	68fb      	ldr	r3, [r7, #12]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	430a      	orrs	r2, r1
 8105de6:	619a      	str	r2, [r3, #24]
      break;
 8105de8:	e084      	b.n	8105ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8105dea:	68fb      	ldr	r3, [r7, #12]
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	68b9      	ldr	r1, [r7, #8]
 8105df0:	4618      	mov	r0, r3
 8105df2:	f000 fb53 	bl	810649c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105df6:	68fb      	ldr	r3, [r7, #12]
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	69da      	ldr	r2, [r3, #28]
 8105dfc:	68fb      	ldr	r3, [r7, #12]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	f042 0208 	orr.w	r2, r2, #8
 8105e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8105e06:	68fb      	ldr	r3, [r7, #12]
 8105e08:	681b      	ldr	r3, [r3, #0]
 8105e0a:	69da      	ldr	r2, [r3, #28]
 8105e0c:	68fb      	ldr	r3, [r7, #12]
 8105e0e:	681b      	ldr	r3, [r3, #0]
 8105e10:	f022 0204 	bic.w	r2, r2, #4
 8105e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105e16:	68fb      	ldr	r3, [r7, #12]
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	69d9      	ldr	r1, [r3, #28]
 8105e1c:	68bb      	ldr	r3, [r7, #8]
 8105e1e:	691a      	ldr	r2, [r3, #16]
 8105e20:	68fb      	ldr	r3, [r7, #12]
 8105e22:	681b      	ldr	r3, [r3, #0]
 8105e24:	430a      	orrs	r2, r1
 8105e26:	61da      	str	r2, [r3, #28]
      break;
 8105e28:	e064      	b.n	8105ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8105e2a:	68fb      	ldr	r3, [r7, #12]
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	68b9      	ldr	r1, [r7, #8]
 8105e30:	4618      	mov	r0, r3
 8105e32:	f000 fbbb 	bl	81065ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105e36:	68fb      	ldr	r3, [r7, #12]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	69da      	ldr	r2, [r3, #28]
 8105e3c:	68fb      	ldr	r3, [r7, #12]
 8105e3e:	681b      	ldr	r3, [r3, #0]
 8105e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105e46:	68fb      	ldr	r3, [r7, #12]
 8105e48:	681b      	ldr	r3, [r3, #0]
 8105e4a:	69da      	ldr	r2, [r3, #28]
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	681b      	ldr	r3, [r3, #0]
 8105e5a:	69d9      	ldr	r1, [r3, #28]
 8105e5c:	68bb      	ldr	r3, [r7, #8]
 8105e5e:	691b      	ldr	r3, [r3, #16]
 8105e60:	021a      	lsls	r2, r3, #8
 8105e62:	68fb      	ldr	r3, [r7, #12]
 8105e64:	681b      	ldr	r3, [r3, #0]
 8105e66:	430a      	orrs	r2, r1
 8105e68:	61da      	str	r2, [r3, #28]
      break;
 8105e6a:	e043      	b.n	8105ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8105e6c:	68fb      	ldr	r3, [r7, #12]
 8105e6e:	681b      	ldr	r3, [r3, #0]
 8105e70:	68b9      	ldr	r1, [r7, #8]
 8105e72:	4618      	mov	r0, r3
 8105e74:	f000 fc04 	bl	8106680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105e78:	68fb      	ldr	r3, [r7, #12]
 8105e7a:	681b      	ldr	r3, [r3, #0]
 8105e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105e7e:	68fb      	ldr	r3, [r7, #12]
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	f042 0208 	orr.w	r2, r2, #8
 8105e86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105e88:	68fb      	ldr	r3, [r7, #12]
 8105e8a:	681b      	ldr	r3, [r3, #0]
 8105e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105e8e:	68fb      	ldr	r3, [r7, #12]
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	f022 0204 	bic.w	r2, r2, #4
 8105e96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105e98:	68fb      	ldr	r3, [r7, #12]
 8105e9a:	681b      	ldr	r3, [r3, #0]
 8105e9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8105e9e:	68bb      	ldr	r3, [r7, #8]
 8105ea0:	691a      	ldr	r2, [r3, #16]
 8105ea2:	68fb      	ldr	r3, [r7, #12]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	430a      	orrs	r2, r1
 8105ea8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105eaa:	e023      	b.n	8105ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8105eac:	68fb      	ldr	r3, [r7, #12]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	68b9      	ldr	r1, [r7, #8]
 8105eb2:	4618      	mov	r0, r3
 8105eb4:	f000 fc48 	bl	8106748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105eb8:	68fb      	ldr	r3, [r7, #12]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105ebe:	68fb      	ldr	r3, [r7, #12]
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105ec6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105ec8:	68fb      	ldr	r3, [r7, #12]
 8105eca:	681b      	ldr	r3, [r3, #0]
 8105ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105ece:	68fb      	ldr	r3, [r7, #12]
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105ed6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105ed8:	68fb      	ldr	r3, [r7, #12]
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8105ede:	68bb      	ldr	r3, [r7, #8]
 8105ee0:	691b      	ldr	r3, [r3, #16]
 8105ee2:	021a      	lsls	r2, r3, #8
 8105ee4:	68fb      	ldr	r3, [r7, #12]
 8105ee6:	681b      	ldr	r3, [r3, #0]
 8105ee8:	430a      	orrs	r2, r1
 8105eea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105eec:	e002      	b.n	8105ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8105eee:	2301      	movs	r3, #1
 8105ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8105ef2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8105ef4:	68fb      	ldr	r3, [r7, #12]
 8105ef6:	2200      	movs	r2, #0
 8105ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8105efe:	4618      	mov	r0, r3
 8105f00:	3718      	adds	r7, #24
 8105f02:	46bd      	mov	sp, r7
 8105f04:	bd80      	pop	{r7, pc}
 8105f06:	bf00      	nop

08105f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8105f08:	b580      	push	{r7, lr}
 8105f0a:	b084      	sub	sp, #16
 8105f0c:	af00      	add	r7, sp, #0
 8105f0e:	6078      	str	r0, [r7, #4]
 8105f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8105f12:	2300      	movs	r3, #0
 8105f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105f1c:	2b01      	cmp	r3, #1
 8105f1e:	d101      	bne.n	8105f24 <HAL_TIM_ConfigClockSource+0x1c>
 8105f20:	2302      	movs	r3, #2
 8105f22:	e0de      	b.n	81060e2 <HAL_TIM_ConfigClockSource+0x1da>
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	2201      	movs	r2, #1
 8105f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8105f2c:	687b      	ldr	r3, [r7, #4]
 8105f2e:	2202      	movs	r2, #2
 8105f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	689b      	ldr	r3, [r3, #8]
 8105f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8105f3c:	68bb      	ldr	r3, [r7, #8]
 8105f3e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8105f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8105f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105f48:	68bb      	ldr	r3, [r7, #8]
 8105f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	681b      	ldr	r3, [r3, #0]
 8105f54:	68ba      	ldr	r2, [r7, #8]
 8105f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8105f58:	683b      	ldr	r3, [r7, #0]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	4a63      	ldr	r2, [pc, #396]	; (81060ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8105f5e:	4293      	cmp	r3, r2
 8105f60:	f000 80a9 	beq.w	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105f64:	4a61      	ldr	r2, [pc, #388]	; (81060ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8105f66:	4293      	cmp	r3, r2
 8105f68:	f200 80ae 	bhi.w	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105f6c:	4a60      	ldr	r2, [pc, #384]	; (81060f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105f6e:	4293      	cmp	r3, r2
 8105f70:	f000 80a1 	beq.w	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105f74:	4a5e      	ldr	r2, [pc, #376]	; (81060f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105f76:	4293      	cmp	r3, r2
 8105f78:	f200 80a6 	bhi.w	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105f7c:	4a5d      	ldr	r2, [pc, #372]	; (81060f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105f7e:	4293      	cmp	r3, r2
 8105f80:	f000 8099 	beq.w	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105f84:	4a5b      	ldr	r2, [pc, #364]	; (81060f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105f86:	4293      	cmp	r3, r2
 8105f88:	f200 809e 	bhi.w	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105f8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105f90:	f000 8091 	beq.w	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105f94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105f98:	f200 8096 	bhi.w	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105fa0:	f000 8089 	beq.w	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105fa8:	f200 808e 	bhi.w	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105fb0:	d03e      	beq.n	8106030 <HAL_TIM_ConfigClockSource+0x128>
 8105fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105fb6:	f200 8087 	bhi.w	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105fbe:	f000 8086 	beq.w	81060ce <HAL_TIM_ConfigClockSource+0x1c6>
 8105fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105fc6:	d87f      	bhi.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105fc8:	2b70      	cmp	r3, #112	; 0x70
 8105fca:	d01a      	beq.n	8106002 <HAL_TIM_ConfigClockSource+0xfa>
 8105fcc:	2b70      	cmp	r3, #112	; 0x70
 8105fce:	d87b      	bhi.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105fd0:	2b60      	cmp	r3, #96	; 0x60
 8105fd2:	d050      	beq.n	8106076 <HAL_TIM_ConfigClockSource+0x16e>
 8105fd4:	2b60      	cmp	r3, #96	; 0x60
 8105fd6:	d877      	bhi.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105fd8:	2b50      	cmp	r3, #80	; 0x50
 8105fda:	d03c      	beq.n	8106056 <HAL_TIM_ConfigClockSource+0x14e>
 8105fdc:	2b50      	cmp	r3, #80	; 0x50
 8105fde:	d873      	bhi.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105fe0:	2b40      	cmp	r3, #64	; 0x40
 8105fe2:	d058      	beq.n	8106096 <HAL_TIM_ConfigClockSource+0x18e>
 8105fe4:	2b40      	cmp	r3, #64	; 0x40
 8105fe6:	d86f      	bhi.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105fe8:	2b30      	cmp	r3, #48	; 0x30
 8105fea:	d064      	beq.n	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105fec:	2b30      	cmp	r3, #48	; 0x30
 8105fee:	d86b      	bhi.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105ff0:	2b20      	cmp	r3, #32
 8105ff2:	d060      	beq.n	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105ff4:	2b20      	cmp	r3, #32
 8105ff6:	d867      	bhi.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105ff8:	2b00      	cmp	r3, #0
 8105ffa:	d05c      	beq.n	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105ffc:	2b10      	cmp	r3, #16
 8105ffe:	d05a      	beq.n	81060b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8106000:	e062      	b.n	81060c8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	6818      	ldr	r0, [r3, #0]
 8106006:	683b      	ldr	r3, [r7, #0]
 8106008:	6899      	ldr	r1, [r3, #8]
 810600a:	683b      	ldr	r3, [r7, #0]
 810600c:	685a      	ldr	r2, [r3, #4]
 810600e:	683b      	ldr	r3, [r7, #0]
 8106010:	68db      	ldr	r3, [r3, #12]
 8106012:	f000 fc7b 	bl	810690c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8106016:	687b      	ldr	r3, [r7, #4]
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	689b      	ldr	r3, [r3, #8]
 810601c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810601e:	68bb      	ldr	r3, [r7, #8]
 8106020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8106024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	68ba      	ldr	r2, [r7, #8]
 810602c:	609a      	str	r2, [r3, #8]
      break;
 810602e:	e04f      	b.n	81060d0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	6818      	ldr	r0, [r3, #0]
 8106034:	683b      	ldr	r3, [r7, #0]
 8106036:	6899      	ldr	r1, [r3, #8]
 8106038:	683b      	ldr	r3, [r7, #0]
 810603a:	685a      	ldr	r2, [r3, #4]
 810603c:	683b      	ldr	r3, [r7, #0]
 810603e:	68db      	ldr	r3, [r3, #12]
 8106040:	f000 fc64 	bl	810690c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	689a      	ldr	r2, [r3, #8]
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8106052:	609a      	str	r2, [r3, #8]
      break;
 8106054:	e03c      	b.n	81060d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	6818      	ldr	r0, [r3, #0]
 810605a:	683b      	ldr	r3, [r7, #0]
 810605c:	6859      	ldr	r1, [r3, #4]
 810605e:	683b      	ldr	r3, [r7, #0]
 8106060:	68db      	ldr	r3, [r3, #12]
 8106062:	461a      	mov	r2, r3
 8106064:	f000 fbd6 	bl	8106814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	2150      	movs	r1, #80	; 0x50
 810606e:	4618      	mov	r0, r3
 8106070:	f000 fc2f 	bl	81068d2 <TIM_ITRx_SetConfig>
      break;
 8106074:	e02c      	b.n	81060d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	6818      	ldr	r0, [r3, #0]
 810607a:	683b      	ldr	r3, [r7, #0]
 810607c:	6859      	ldr	r1, [r3, #4]
 810607e:	683b      	ldr	r3, [r7, #0]
 8106080:	68db      	ldr	r3, [r3, #12]
 8106082:	461a      	mov	r2, r3
 8106084:	f000 fbf5 	bl	8106872 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	2160      	movs	r1, #96	; 0x60
 810608e:	4618      	mov	r0, r3
 8106090:	f000 fc1f 	bl	81068d2 <TIM_ITRx_SetConfig>
      break;
 8106094:	e01c      	b.n	81060d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	6818      	ldr	r0, [r3, #0]
 810609a:	683b      	ldr	r3, [r7, #0]
 810609c:	6859      	ldr	r1, [r3, #4]
 810609e:	683b      	ldr	r3, [r7, #0]
 81060a0:	68db      	ldr	r3, [r3, #12]
 81060a2:	461a      	mov	r2, r3
 81060a4:	f000 fbb6 	bl	8106814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	2140      	movs	r1, #64	; 0x40
 81060ae:	4618      	mov	r0, r3
 81060b0:	f000 fc0f 	bl	81068d2 <TIM_ITRx_SetConfig>
      break;
 81060b4:	e00c      	b.n	81060d0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	681a      	ldr	r2, [r3, #0]
 81060ba:	683b      	ldr	r3, [r7, #0]
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	4619      	mov	r1, r3
 81060c0:	4610      	mov	r0, r2
 81060c2:	f000 fc06 	bl	81068d2 <TIM_ITRx_SetConfig>
      break;
 81060c6:	e003      	b.n	81060d0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81060c8:	2301      	movs	r3, #1
 81060ca:	73fb      	strb	r3, [r7, #15]
      break;
 81060cc:	e000      	b.n	81060d0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81060ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	2201      	movs	r2, #1
 81060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	2200      	movs	r2, #0
 81060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 81060e2:	4618      	mov	r0, r3
 81060e4:	3710      	adds	r7, #16
 81060e6:	46bd      	mov	sp, r7
 81060e8:	bd80      	pop	{r7, pc}
 81060ea:	bf00      	nop
 81060ec:	00100040 	.word	0x00100040
 81060f0:	00100030 	.word	0x00100030
 81060f4:	00100020 	.word	0x00100020

081060f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81060f8:	b480      	push	{r7}
 81060fa:	b083      	sub	sp, #12
 81060fc:	af00      	add	r7, sp, #0
 81060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106100:	bf00      	nop
 8106102:	370c      	adds	r7, #12
 8106104:	46bd      	mov	sp, r7
 8106106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810610a:	4770      	bx	lr

0810610c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810610c:	b480      	push	{r7}
 810610e:	b083      	sub	sp, #12
 8106110:	af00      	add	r7, sp, #0
 8106112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106114:	bf00      	nop
 8106116:	370c      	adds	r7, #12
 8106118:	46bd      	mov	sp, r7
 810611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810611e:	4770      	bx	lr

08106120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106120:	b480      	push	{r7}
 8106122:	b083      	sub	sp, #12
 8106124:	af00      	add	r7, sp, #0
 8106126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106128:	bf00      	nop
 810612a:	370c      	adds	r7, #12
 810612c:	46bd      	mov	sp, r7
 810612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106132:	4770      	bx	lr

08106134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8106134:	b480      	push	{r7}
 8106136:	b085      	sub	sp, #20
 8106138:	af00      	add	r7, sp, #0
 810613a:	6078      	str	r0, [r7, #4]
 810613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	4a40      	ldr	r2, [pc, #256]	; (8106248 <TIM_Base_SetConfig+0x114>)
 8106148:	4293      	cmp	r3, r2
 810614a:	d013      	beq.n	8106174 <TIM_Base_SetConfig+0x40>
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106152:	d00f      	beq.n	8106174 <TIM_Base_SetConfig+0x40>
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	4a3d      	ldr	r2, [pc, #244]	; (810624c <TIM_Base_SetConfig+0x118>)
 8106158:	4293      	cmp	r3, r2
 810615a:	d00b      	beq.n	8106174 <TIM_Base_SetConfig+0x40>
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	4a3c      	ldr	r2, [pc, #240]	; (8106250 <TIM_Base_SetConfig+0x11c>)
 8106160:	4293      	cmp	r3, r2
 8106162:	d007      	beq.n	8106174 <TIM_Base_SetConfig+0x40>
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	4a3b      	ldr	r2, [pc, #236]	; (8106254 <TIM_Base_SetConfig+0x120>)
 8106168:	4293      	cmp	r3, r2
 810616a:	d003      	beq.n	8106174 <TIM_Base_SetConfig+0x40>
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	4a3a      	ldr	r2, [pc, #232]	; (8106258 <TIM_Base_SetConfig+0x124>)
 8106170:	4293      	cmp	r3, r2
 8106172:	d108      	bne.n	8106186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106174:	68fb      	ldr	r3, [r7, #12]
 8106176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810617a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810617c:	683b      	ldr	r3, [r7, #0]
 810617e:	685b      	ldr	r3, [r3, #4]
 8106180:	68fa      	ldr	r2, [r7, #12]
 8106182:	4313      	orrs	r3, r2
 8106184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	4a2f      	ldr	r2, [pc, #188]	; (8106248 <TIM_Base_SetConfig+0x114>)
 810618a:	4293      	cmp	r3, r2
 810618c:	d01f      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106194:	d01b      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	4a2c      	ldr	r2, [pc, #176]	; (810624c <TIM_Base_SetConfig+0x118>)
 810619a:	4293      	cmp	r3, r2
 810619c:	d017      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	4a2b      	ldr	r2, [pc, #172]	; (8106250 <TIM_Base_SetConfig+0x11c>)
 81061a2:	4293      	cmp	r3, r2
 81061a4:	d013      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	4a2a      	ldr	r2, [pc, #168]	; (8106254 <TIM_Base_SetConfig+0x120>)
 81061aa:	4293      	cmp	r3, r2
 81061ac:	d00f      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	4a29      	ldr	r2, [pc, #164]	; (8106258 <TIM_Base_SetConfig+0x124>)
 81061b2:	4293      	cmp	r3, r2
 81061b4:	d00b      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	4a28      	ldr	r2, [pc, #160]	; (810625c <TIM_Base_SetConfig+0x128>)
 81061ba:	4293      	cmp	r3, r2
 81061bc:	d007      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	4a27      	ldr	r2, [pc, #156]	; (8106260 <TIM_Base_SetConfig+0x12c>)
 81061c2:	4293      	cmp	r3, r2
 81061c4:	d003      	beq.n	81061ce <TIM_Base_SetConfig+0x9a>
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	4a26      	ldr	r2, [pc, #152]	; (8106264 <TIM_Base_SetConfig+0x130>)
 81061ca:	4293      	cmp	r3, r2
 81061cc:	d108      	bne.n	81061e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81061ce:	68fb      	ldr	r3, [r7, #12]
 81061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81061d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81061d6:	683b      	ldr	r3, [r7, #0]
 81061d8:	68db      	ldr	r3, [r3, #12]
 81061da:	68fa      	ldr	r2, [r7, #12]
 81061dc:	4313      	orrs	r3, r2
 81061de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81061e0:	68fb      	ldr	r3, [r7, #12]
 81061e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81061e6:	683b      	ldr	r3, [r7, #0]
 81061e8:	695b      	ldr	r3, [r3, #20]
 81061ea:	4313      	orrs	r3, r2
 81061ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	68fa      	ldr	r2, [r7, #12]
 81061f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81061f4:	683b      	ldr	r3, [r7, #0]
 81061f6:	689a      	ldr	r2, [r3, #8]
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81061fc:	683b      	ldr	r3, [r7, #0]
 81061fe:	681a      	ldr	r2, [r3, #0]
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	4a10      	ldr	r2, [pc, #64]	; (8106248 <TIM_Base_SetConfig+0x114>)
 8106208:	4293      	cmp	r3, r2
 810620a:	d00f      	beq.n	810622c <TIM_Base_SetConfig+0xf8>
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	4a12      	ldr	r2, [pc, #72]	; (8106258 <TIM_Base_SetConfig+0x124>)
 8106210:	4293      	cmp	r3, r2
 8106212:	d00b      	beq.n	810622c <TIM_Base_SetConfig+0xf8>
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	4a11      	ldr	r2, [pc, #68]	; (810625c <TIM_Base_SetConfig+0x128>)
 8106218:	4293      	cmp	r3, r2
 810621a:	d007      	beq.n	810622c <TIM_Base_SetConfig+0xf8>
 810621c:	687b      	ldr	r3, [r7, #4]
 810621e:	4a10      	ldr	r2, [pc, #64]	; (8106260 <TIM_Base_SetConfig+0x12c>)
 8106220:	4293      	cmp	r3, r2
 8106222:	d003      	beq.n	810622c <TIM_Base_SetConfig+0xf8>
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	4a0f      	ldr	r2, [pc, #60]	; (8106264 <TIM_Base_SetConfig+0x130>)
 8106228:	4293      	cmp	r3, r2
 810622a:	d103      	bne.n	8106234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810622c:	683b      	ldr	r3, [r7, #0]
 810622e:	691a      	ldr	r2, [r3, #16]
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	2201      	movs	r2, #1
 8106238:	615a      	str	r2, [r3, #20]
}
 810623a:	bf00      	nop
 810623c:	3714      	adds	r7, #20
 810623e:	46bd      	mov	sp, r7
 8106240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106244:	4770      	bx	lr
 8106246:	bf00      	nop
 8106248:	40010000 	.word	0x40010000
 810624c:	40000400 	.word	0x40000400
 8106250:	40000800 	.word	0x40000800
 8106254:	40000c00 	.word	0x40000c00
 8106258:	40010400 	.word	0x40010400
 810625c:	40014000 	.word	0x40014000
 8106260:	40014400 	.word	0x40014400
 8106264:	40014800 	.word	0x40014800

08106268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106268:	b480      	push	{r7}
 810626a:	b087      	sub	sp, #28
 810626c:	af00      	add	r7, sp, #0
 810626e:	6078      	str	r0, [r7, #4]
 8106270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	6a1b      	ldr	r3, [r3, #32]
 8106276:	f023 0201 	bic.w	r2, r3, #1
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810627e:	687b      	ldr	r3, [r7, #4]
 8106280:	6a1b      	ldr	r3, [r3, #32]
 8106282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	685b      	ldr	r3, [r3, #4]
 8106288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	699b      	ldr	r3, [r3, #24]
 810628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8106290:	68fb      	ldr	r3, [r7, #12]
 8106292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810629c:	68fb      	ldr	r3, [r7, #12]
 810629e:	f023 0303 	bic.w	r3, r3, #3
 81062a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81062a4:	683b      	ldr	r3, [r7, #0]
 81062a6:	681b      	ldr	r3, [r3, #0]
 81062a8:	68fa      	ldr	r2, [r7, #12]
 81062aa:	4313      	orrs	r3, r2
 81062ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81062ae:	697b      	ldr	r3, [r7, #20]
 81062b0:	f023 0302 	bic.w	r3, r3, #2
 81062b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81062b6:	683b      	ldr	r3, [r7, #0]
 81062b8:	689b      	ldr	r3, [r3, #8]
 81062ba:	697a      	ldr	r2, [r7, #20]
 81062bc:	4313      	orrs	r3, r2
 81062be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	4a2c      	ldr	r2, [pc, #176]	; (8106374 <TIM_OC1_SetConfig+0x10c>)
 81062c4:	4293      	cmp	r3, r2
 81062c6:	d00f      	beq.n	81062e8 <TIM_OC1_SetConfig+0x80>
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	4a2b      	ldr	r2, [pc, #172]	; (8106378 <TIM_OC1_SetConfig+0x110>)
 81062cc:	4293      	cmp	r3, r2
 81062ce:	d00b      	beq.n	81062e8 <TIM_OC1_SetConfig+0x80>
 81062d0:	687b      	ldr	r3, [r7, #4]
 81062d2:	4a2a      	ldr	r2, [pc, #168]	; (810637c <TIM_OC1_SetConfig+0x114>)
 81062d4:	4293      	cmp	r3, r2
 81062d6:	d007      	beq.n	81062e8 <TIM_OC1_SetConfig+0x80>
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	4a29      	ldr	r2, [pc, #164]	; (8106380 <TIM_OC1_SetConfig+0x118>)
 81062dc:	4293      	cmp	r3, r2
 81062de:	d003      	beq.n	81062e8 <TIM_OC1_SetConfig+0x80>
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	4a28      	ldr	r2, [pc, #160]	; (8106384 <TIM_OC1_SetConfig+0x11c>)
 81062e4:	4293      	cmp	r3, r2
 81062e6:	d10c      	bne.n	8106302 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81062e8:	697b      	ldr	r3, [r7, #20]
 81062ea:	f023 0308 	bic.w	r3, r3, #8
 81062ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81062f0:	683b      	ldr	r3, [r7, #0]
 81062f2:	68db      	ldr	r3, [r3, #12]
 81062f4:	697a      	ldr	r2, [r7, #20]
 81062f6:	4313      	orrs	r3, r2
 81062f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81062fa:	697b      	ldr	r3, [r7, #20]
 81062fc:	f023 0304 	bic.w	r3, r3, #4
 8106300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	4a1b      	ldr	r2, [pc, #108]	; (8106374 <TIM_OC1_SetConfig+0x10c>)
 8106306:	4293      	cmp	r3, r2
 8106308:	d00f      	beq.n	810632a <TIM_OC1_SetConfig+0xc2>
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	4a1a      	ldr	r2, [pc, #104]	; (8106378 <TIM_OC1_SetConfig+0x110>)
 810630e:	4293      	cmp	r3, r2
 8106310:	d00b      	beq.n	810632a <TIM_OC1_SetConfig+0xc2>
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	4a19      	ldr	r2, [pc, #100]	; (810637c <TIM_OC1_SetConfig+0x114>)
 8106316:	4293      	cmp	r3, r2
 8106318:	d007      	beq.n	810632a <TIM_OC1_SetConfig+0xc2>
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	4a18      	ldr	r2, [pc, #96]	; (8106380 <TIM_OC1_SetConfig+0x118>)
 810631e:	4293      	cmp	r3, r2
 8106320:	d003      	beq.n	810632a <TIM_OC1_SetConfig+0xc2>
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	4a17      	ldr	r2, [pc, #92]	; (8106384 <TIM_OC1_SetConfig+0x11c>)
 8106326:	4293      	cmp	r3, r2
 8106328:	d111      	bne.n	810634e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810632a:	693b      	ldr	r3, [r7, #16]
 810632c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106332:	693b      	ldr	r3, [r7, #16]
 8106334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810633a:	683b      	ldr	r3, [r7, #0]
 810633c:	695b      	ldr	r3, [r3, #20]
 810633e:	693a      	ldr	r2, [r7, #16]
 8106340:	4313      	orrs	r3, r2
 8106342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106344:	683b      	ldr	r3, [r7, #0]
 8106346:	699b      	ldr	r3, [r3, #24]
 8106348:	693a      	ldr	r2, [r7, #16]
 810634a:	4313      	orrs	r3, r2
 810634c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	693a      	ldr	r2, [r7, #16]
 8106352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	68fa      	ldr	r2, [r7, #12]
 8106358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810635a:	683b      	ldr	r3, [r7, #0]
 810635c:	685a      	ldr	r2, [r3, #4]
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	697a      	ldr	r2, [r7, #20]
 8106366:	621a      	str	r2, [r3, #32]
}
 8106368:	bf00      	nop
 810636a:	371c      	adds	r7, #28
 810636c:	46bd      	mov	sp, r7
 810636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106372:	4770      	bx	lr
 8106374:	40010000 	.word	0x40010000
 8106378:	40010400 	.word	0x40010400
 810637c:	40014000 	.word	0x40014000
 8106380:	40014400 	.word	0x40014400
 8106384:	40014800 	.word	0x40014800

08106388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106388:	b480      	push	{r7}
 810638a:	b087      	sub	sp, #28
 810638c:	af00      	add	r7, sp, #0
 810638e:	6078      	str	r0, [r7, #4]
 8106390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	6a1b      	ldr	r3, [r3, #32]
 8106396:	f023 0210 	bic.w	r2, r3, #16
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	6a1b      	ldr	r3, [r3, #32]
 81063a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	685b      	ldr	r3, [r3, #4]
 81063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	699b      	ldr	r3, [r3, #24]
 81063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81063b0:	68fb      	ldr	r3, [r7, #12]
 81063b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81063b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81063bc:	68fb      	ldr	r3, [r7, #12]
 81063be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81063c4:	683b      	ldr	r3, [r7, #0]
 81063c6:	681b      	ldr	r3, [r3, #0]
 81063c8:	021b      	lsls	r3, r3, #8
 81063ca:	68fa      	ldr	r2, [r7, #12]
 81063cc:	4313      	orrs	r3, r2
 81063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81063d0:	697b      	ldr	r3, [r7, #20]
 81063d2:	f023 0320 	bic.w	r3, r3, #32
 81063d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81063d8:	683b      	ldr	r3, [r7, #0]
 81063da:	689b      	ldr	r3, [r3, #8]
 81063dc:	011b      	lsls	r3, r3, #4
 81063de:	697a      	ldr	r2, [r7, #20]
 81063e0:	4313      	orrs	r3, r2
 81063e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	4a28      	ldr	r2, [pc, #160]	; (8106488 <TIM_OC2_SetConfig+0x100>)
 81063e8:	4293      	cmp	r3, r2
 81063ea:	d003      	beq.n	81063f4 <TIM_OC2_SetConfig+0x6c>
 81063ec:	687b      	ldr	r3, [r7, #4]
 81063ee:	4a27      	ldr	r2, [pc, #156]	; (810648c <TIM_OC2_SetConfig+0x104>)
 81063f0:	4293      	cmp	r3, r2
 81063f2:	d10d      	bne.n	8106410 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81063f4:	697b      	ldr	r3, [r7, #20]
 81063f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81063fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81063fc:	683b      	ldr	r3, [r7, #0]
 81063fe:	68db      	ldr	r3, [r3, #12]
 8106400:	011b      	lsls	r3, r3, #4
 8106402:	697a      	ldr	r2, [r7, #20]
 8106404:	4313      	orrs	r3, r2
 8106406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106408:	697b      	ldr	r3, [r7, #20]
 810640a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810640e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	4a1d      	ldr	r2, [pc, #116]	; (8106488 <TIM_OC2_SetConfig+0x100>)
 8106414:	4293      	cmp	r3, r2
 8106416:	d00f      	beq.n	8106438 <TIM_OC2_SetConfig+0xb0>
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	4a1c      	ldr	r2, [pc, #112]	; (810648c <TIM_OC2_SetConfig+0x104>)
 810641c:	4293      	cmp	r3, r2
 810641e:	d00b      	beq.n	8106438 <TIM_OC2_SetConfig+0xb0>
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	4a1b      	ldr	r2, [pc, #108]	; (8106490 <TIM_OC2_SetConfig+0x108>)
 8106424:	4293      	cmp	r3, r2
 8106426:	d007      	beq.n	8106438 <TIM_OC2_SetConfig+0xb0>
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	4a1a      	ldr	r2, [pc, #104]	; (8106494 <TIM_OC2_SetConfig+0x10c>)
 810642c:	4293      	cmp	r3, r2
 810642e:	d003      	beq.n	8106438 <TIM_OC2_SetConfig+0xb0>
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	4a19      	ldr	r2, [pc, #100]	; (8106498 <TIM_OC2_SetConfig+0x110>)
 8106434:	4293      	cmp	r3, r2
 8106436:	d113      	bne.n	8106460 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106438:	693b      	ldr	r3, [r7, #16]
 810643a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810643e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106440:	693b      	ldr	r3, [r7, #16]
 8106442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106448:	683b      	ldr	r3, [r7, #0]
 810644a:	695b      	ldr	r3, [r3, #20]
 810644c:	009b      	lsls	r3, r3, #2
 810644e:	693a      	ldr	r2, [r7, #16]
 8106450:	4313      	orrs	r3, r2
 8106452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106454:	683b      	ldr	r3, [r7, #0]
 8106456:	699b      	ldr	r3, [r3, #24]
 8106458:	009b      	lsls	r3, r3, #2
 810645a:	693a      	ldr	r2, [r7, #16]
 810645c:	4313      	orrs	r3, r2
 810645e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	693a      	ldr	r2, [r7, #16]
 8106464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	68fa      	ldr	r2, [r7, #12]
 810646a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810646c:	683b      	ldr	r3, [r7, #0]
 810646e:	685a      	ldr	r2, [r3, #4]
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	697a      	ldr	r2, [r7, #20]
 8106478:	621a      	str	r2, [r3, #32]
}
 810647a:	bf00      	nop
 810647c:	371c      	adds	r7, #28
 810647e:	46bd      	mov	sp, r7
 8106480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106484:	4770      	bx	lr
 8106486:	bf00      	nop
 8106488:	40010000 	.word	0x40010000
 810648c:	40010400 	.word	0x40010400
 8106490:	40014000 	.word	0x40014000
 8106494:	40014400 	.word	0x40014400
 8106498:	40014800 	.word	0x40014800

0810649c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810649c:	b480      	push	{r7}
 810649e:	b087      	sub	sp, #28
 81064a0:	af00      	add	r7, sp, #0
 81064a2:	6078      	str	r0, [r7, #4]
 81064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	6a1b      	ldr	r3, [r3, #32]
 81064aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	6a1b      	ldr	r3, [r3, #32]
 81064b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	685b      	ldr	r3, [r3, #4]
 81064bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	69db      	ldr	r3, [r3, #28]
 81064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81064c4:	68fb      	ldr	r3, [r7, #12]
 81064c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81064ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81064d0:	68fb      	ldr	r3, [r7, #12]
 81064d2:	f023 0303 	bic.w	r3, r3, #3
 81064d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81064d8:	683b      	ldr	r3, [r7, #0]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	68fa      	ldr	r2, [r7, #12]
 81064de:	4313      	orrs	r3, r2
 81064e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81064e2:	697b      	ldr	r3, [r7, #20]
 81064e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81064e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81064ea:	683b      	ldr	r3, [r7, #0]
 81064ec:	689b      	ldr	r3, [r3, #8]
 81064ee:	021b      	lsls	r3, r3, #8
 81064f0:	697a      	ldr	r2, [r7, #20]
 81064f2:	4313      	orrs	r3, r2
 81064f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	4a27      	ldr	r2, [pc, #156]	; (8106598 <TIM_OC3_SetConfig+0xfc>)
 81064fa:	4293      	cmp	r3, r2
 81064fc:	d003      	beq.n	8106506 <TIM_OC3_SetConfig+0x6a>
 81064fe:	687b      	ldr	r3, [r7, #4]
 8106500:	4a26      	ldr	r2, [pc, #152]	; (810659c <TIM_OC3_SetConfig+0x100>)
 8106502:	4293      	cmp	r3, r2
 8106504:	d10d      	bne.n	8106522 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106506:	697b      	ldr	r3, [r7, #20]
 8106508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810650c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810650e:	683b      	ldr	r3, [r7, #0]
 8106510:	68db      	ldr	r3, [r3, #12]
 8106512:	021b      	lsls	r3, r3, #8
 8106514:	697a      	ldr	r2, [r7, #20]
 8106516:	4313      	orrs	r3, r2
 8106518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810651a:	697b      	ldr	r3, [r7, #20]
 810651c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	4a1c      	ldr	r2, [pc, #112]	; (8106598 <TIM_OC3_SetConfig+0xfc>)
 8106526:	4293      	cmp	r3, r2
 8106528:	d00f      	beq.n	810654a <TIM_OC3_SetConfig+0xae>
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	4a1b      	ldr	r2, [pc, #108]	; (810659c <TIM_OC3_SetConfig+0x100>)
 810652e:	4293      	cmp	r3, r2
 8106530:	d00b      	beq.n	810654a <TIM_OC3_SetConfig+0xae>
 8106532:	687b      	ldr	r3, [r7, #4]
 8106534:	4a1a      	ldr	r2, [pc, #104]	; (81065a0 <TIM_OC3_SetConfig+0x104>)
 8106536:	4293      	cmp	r3, r2
 8106538:	d007      	beq.n	810654a <TIM_OC3_SetConfig+0xae>
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	4a19      	ldr	r2, [pc, #100]	; (81065a4 <TIM_OC3_SetConfig+0x108>)
 810653e:	4293      	cmp	r3, r2
 8106540:	d003      	beq.n	810654a <TIM_OC3_SetConfig+0xae>
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	4a18      	ldr	r2, [pc, #96]	; (81065a8 <TIM_OC3_SetConfig+0x10c>)
 8106546:	4293      	cmp	r3, r2
 8106548:	d113      	bne.n	8106572 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810654a:	693b      	ldr	r3, [r7, #16]
 810654c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106552:	693b      	ldr	r3, [r7, #16]
 8106554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810655a:	683b      	ldr	r3, [r7, #0]
 810655c:	695b      	ldr	r3, [r3, #20]
 810655e:	011b      	lsls	r3, r3, #4
 8106560:	693a      	ldr	r2, [r7, #16]
 8106562:	4313      	orrs	r3, r2
 8106564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106566:	683b      	ldr	r3, [r7, #0]
 8106568:	699b      	ldr	r3, [r3, #24]
 810656a:	011b      	lsls	r3, r3, #4
 810656c:	693a      	ldr	r2, [r7, #16]
 810656e:	4313      	orrs	r3, r2
 8106570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	693a      	ldr	r2, [r7, #16]
 8106576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	68fa      	ldr	r2, [r7, #12]
 810657c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810657e:	683b      	ldr	r3, [r7, #0]
 8106580:	685a      	ldr	r2, [r3, #4]
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	697a      	ldr	r2, [r7, #20]
 810658a:	621a      	str	r2, [r3, #32]
}
 810658c:	bf00      	nop
 810658e:	371c      	adds	r7, #28
 8106590:	46bd      	mov	sp, r7
 8106592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106596:	4770      	bx	lr
 8106598:	40010000 	.word	0x40010000
 810659c:	40010400 	.word	0x40010400
 81065a0:	40014000 	.word	0x40014000
 81065a4:	40014400 	.word	0x40014400
 81065a8:	40014800 	.word	0x40014800

081065ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81065ac:	b480      	push	{r7}
 81065ae:	b087      	sub	sp, #28
 81065b0:	af00      	add	r7, sp, #0
 81065b2:	6078      	str	r0, [r7, #4]
 81065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	6a1b      	ldr	r3, [r3, #32]
 81065ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	6a1b      	ldr	r3, [r3, #32]
 81065c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	685b      	ldr	r3, [r3, #4]
 81065cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	69db      	ldr	r3, [r3, #28]
 81065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81065d4:	68fb      	ldr	r3, [r7, #12]
 81065d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81065e0:	68fb      	ldr	r3, [r7, #12]
 81065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81065e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81065e8:	683b      	ldr	r3, [r7, #0]
 81065ea:	681b      	ldr	r3, [r3, #0]
 81065ec:	021b      	lsls	r3, r3, #8
 81065ee:	68fa      	ldr	r2, [r7, #12]
 81065f0:	4313      	orrs	r3, r2
 81065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81065f4:	693b      	ldr	r3, [r7, #16]
 81065f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81065fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81065fc:	683b      	ldr	r3, [r7, #0]
 81065fe:	689b      	ldr	r3, [r3, #8]
 8106600:	031b      	lsls	r3, r3, #12
 8106602:	693a      	ldr	r2, [r7, #16]
 8106604:	4313      	orrs	r3, r2
 8106606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106608:	687b      	ldr	r3, [r7, #4]
 810660a:	4a18      	ldr	r2, [pc, #96]	; (810666c <TIM_OC4_SetConfig+0xc0>)
 810660c:	4293      	cmp	r3, r2
 810660e:	d00f      	beq.n	8106630 <TIM_OC4_SetConfig+0x84>
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	4a17      	ldr	r2, [pc, #92]	; (8106670 <TIM_OC4_SetConfig+0xc4>)
 8106614:	4293      	cmp	r3, r2
 8106616:	d00b      	beq.n	8106630 <TIM_OC4_SetConfig+0x84>
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	4a16      	ldr	r2, [pc, #88]	; (8106674 <TIM_OC4_SetConfig+0xc8>)
 810661c:	4293      	cmp	r3, r2
 810661e:	d007      	beq.n	8106630 <TIM_OC4_SetConfig+0x84>
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	4a15      	ldr	r2, [pc, #84]	; (8106678 <TIM_OC4_SetConfig+0xcc>)
 8106624:	4293      	cmp	r3, r2
 8106626:	d003      	beq.n	8106630 <TIM_OC4_SetConfig+0x84>
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	4a14      	ldr	r2, [pc, #80]	; (810667c <TIM_OC4_SetConfig+0xd0>)
 810662c:	4293      	cmp	r3, r2
 810662e:	d109      	bne.n	8106644 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106630:	697b      	ldr	r3, [r7, #20]
 8106632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8106636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106638:	683b      	ldr	r3, [r7, #0]
 810663a:	695b      	ldr	r3, [r3, #20]
 810663c:	019b      	lsls	r3, r3, #6
 810663e:	697a      	ldr	r2, [r7, #20]
 8106640:	4313      	orrs	r3, r2
 8106642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	697a      	ldr	r2, [r7, #20]
 8106648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	68fa      	ldr	r2, [r7, #12]
 810664e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106650:	683b      	ldr	r3, [r7, #0]
 8106652:	685a      	ldr	r2, [r3, #4]
 8106654:	687b      	ldr	r3, [r7, #4]
 8106656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	693a      	ldr	r2, [r7, #16]
 810665c:	621a      	str	r2, [r3, #32]
}
 810665e:	bf00      	nop
 8106660:	371c      	adds	r7, #28
 8106662:	46bd      	mov	sp, r7
 8106664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106668:	4770      	bx	lr
 810666a:	bf00      	nop
 810666c:	40010000 	.word	0x40010000
 8106670:	40010400 	.word	0x40010400
 8106674:	40014000 	.word	0x40014000
 8106678:	40014400 	.word	0x40014400
 810667c:	40014800 	.word	0x40014800

08106680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106680:	b480      	push	{r7}
 8106682:	b087      	sub	sp, #28
 8106684:	af00      	add	r7, sp, #0
 8106686:	6078      	str	r0, [r7, #4]
 8106688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	6a1b      	ldr	r3, [r3, #32]
 810668e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	6a1b      	ldr	r3, [r3, #32]
 810669a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	685b      	ldr	r3, [r3, #4]
 81066a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81066a8:	68fb      	ldr	r3, [r7, #12]
 81066aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81066ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81066b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81066b4:	683b      	ldr	r3, [r7, #0]
 81066b6:	681b      	ldr	r3, [r3, #0]
 81066b8:	68fa      	ldr	r2, [r7, #12]
 81066ba:	4313      	orrs	r3, r2
 81066bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81066be:	693b      	ldr	r3, [r7, #16]
 81066c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81066c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81066c6:	683b      	ldr	r3, [r7, #0]
 81066c8:	689b      	ldr	r3, [r3, #8]
 81066ca:	041b      	lsls	r3, r3, #16
 81066cc:	693a      	ldr	r2, [r7, #16]
 81066ce:	4313      	orrs	r3, r2
 81066d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	4a17      	ldr	r2, [pc, #92]	; (8106734 <TIM_OC5_SetConfig+0xb4>)
 81066d6:	4293      	cmp	r3, r2
 81066d8:	d00f      	beq.n	81066fa <TIM_OC5_SetConfig+0x7a>
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	4a16      	ldr	r2, [pc, #88]	; (8106738 <TIM_OC5_SetConfig+0xb8>)
 81066de:	4293      	cmp	r3, r2
 81066e0:	d00b      	beq.n	81066fa <TIM_OC5_SetConfig+0x7a>
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	4a15      	ldr	r2, [pc, #84]	; (810673c <TIM_OC5_SetConfig+0xbc>)
 81066e6:	4293      	cmp	r3, r2
 81066e8:	d007      	beq.n	81066fa <TIM_OC5_SetConfig+0x7a>
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	4a14      	ldr	r2, [pc, #80]	; (8106740 <TIM_OC5_SetConfig+0xc0>)
 81066ee:	4293      	cmp	r3, r2
 81066f0:	d003      	beq.n	81066fa <TIM_OC5_SetConfig+0x7a>
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	4a13      	ldr	r2, [pc, #76]	; (8106744 <TIM_OC5_SetConfig+0xc4>)
 81066f6:	4293      	cmp	r3, r2
 81066f8:	d109      	bne.n	810670e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81066fa:	697b      	ldr	r3, [r7, #20]
 81066fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106700:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106702:	683b      	ldr	r3, [r7, #0]
 8106704:	695b      	ldr	r3, [r3, #20]
 8106706:	021b      	lsls	r3, r3, #8
 8106708:	697a      	ldr	r2, [r7, #20]
 810670a:	4313      	orrs	r3, r2
 810670c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810670e:	687b      	ldr	r3, [r7, #4]
 8106710:	697a      	ldr	r2, [r7, #20]
 8106712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	68fa      	ldr	r2, [r7, #12]
 8106718:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810671a:	683b      	ldr	r3, [r7, #0]
 810671c:	685a      	ldr	r2, [r3, #4]
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	693a      	ldr	r2, [r7, #16]
 8106726:	621a      	str	r2, [r3, #32]
}
 8106728:	bf00      	nop
 810672a:	371c      	adds	r7, #28
 810672c:	46bd      	mov	sp, r7
 810672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106732:	4770      	bx	lr
 8106734:	40010000 	.word	0x40010000
 8106738:	40010400 	.word	0x40010400
 810673c:	40014000 	.word	0x40014000
 8106740:	40014400 	.word	0x40014400
 8106744:	40014800 	.word	0x40014800

08106748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106748:	b480      	push	{r7}
 810674a:	b087      	sub	sp, #28
 810674c:	af00      	add	r7, sp, #0
 810674e:	6078      	str	r0, [r7, #4]
 8106750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	6a1b      	ldr	r3, [r3, #32]
 8106756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	6a1b      	ldr	r3, [r3, #32]
 8106762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106764:	687b      	ldr	r3, [r7, #4]
 8106766:	685b      	ldr	r3, [r3, #4]
 8106768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106770:	68fb      	ldr	r3, [r7, #12]
 8106772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810677a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810677c:	683b      	ldr	r3, [r7, #0]
 810677e:	681b      	ldr	r3, [r3, #0]
 8106780:	021b      	lsls	r3, r3, #8
 8106782:	68fa      	ldr	r2, [r7, #12]
 8106784:	4313      	orrs	r3, r2
 8106786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8106788:	693b      	ldr	r3, [r7, #16]
 810678a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810678e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106790:	683b      	ldr	r3, [r7, #0]
 8106792:	689b      	ldr	r3, [r3, #8]
 8106794:	051b      	lsls	r3, r3, #20
 8106796:	693a      	ldr	r2, [r7, #16]
 8106798:	4313      	orrs	r3, r2
 810679a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810679c:	687b      	ldr	r3, [r7, #4]
 810679e:	4a18      	ldr	r2, [pc, #96]	; (8106800 <TIM_OC6_SetConfig+0xb8>)
 81067a0:	4293      	cmp	r3, r2
 81067a2:	d00f      	beq.n	81067c4 <TIM_OC6_SetConfig+0x7c>
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	4a17      	ldr	r2, [pc, #92]	; (8106804 <TIM_OC6_SetConfig+0xbc>)
 81067a8:	4293      	cmp	r3, r2
 81067aa:	d00b      	beq.n	81067c4 <TIM_OC6_SetConfig+0x7c>
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	4a16      	ldr	r2, [pc, #88]	; (8106808 <TIM_OC6_SetConfig+0xc0>)
 81067b0:	4293      	cmp	r3, r2
 81067b2:	d007      	beq.n	81067c4 <TIM_OC6_SetConfig+0x7c>
 81067b4:	687b      	ldr	r3, [r7, #4]
 81067b6:	4a15      	ldr	r2, [pc, #84]	; (810680c <TIM_OC6_SetConfig+0xc4>)
 81067b8:	4293      	cmp	r3, r2
 81067ba:	d003      	beq.n	81067c4 <TIM_OC6_SetConfig+0x7c>
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	4a14      	ldr	r2, [pc, #80]	; (8106810 <TIM_OC6_SetConfig+0xc8>)
 81067c0:	4293      	cmp	r3, r2
 81067c2:	d109      	bne.n	81067d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81067c4:	697b      	ldr	r3, [r7, #20]
 81067c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81067ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81067cc:	683b      	ldr	r3, [r7, #0]
 81067ce:	695b      	ldr	r3, [r3, #20]
 81067d0:	029b      	lsls	r3, r3, #10
 81067d2:	697a      	ldr	r2, [r7, #20]
 81067d4:	4313      	orrs	r3, r2
 81067d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	697a      	ldr	r2, [r7, #20]
 81067dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	68fa      	ldr	r2, [r7, #12]
 81067e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81067e4:	683b      	ldr	r3, [r7, #0]
 81067e6:	685a      	ldr	r2, [r3, #4]
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	693a      	ldr	r2, [r7, #16]
 81067f0:	621a      	str	r2, [r3, #32]
}
 81067f2:	bf00      	nop
 81067f4:	371c      	adds	r7, #28
 81067f6:	46bd      	mov	sp, r7
 81067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067fc:	4770      	bx	lr
 81067fe:	bf00      	nop
 8106800:	40010000 	.word	0x40010000
 8106804:	40010400 	.word	0x40010400
 8106808:	40014000 	.word	0x40014000
 810680c:	40014400 	.word	0x40014400
 8106810:	40014800 	.word	0x40014800

08106814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106814:	b480      	push	{r7}
 8106816:	b087      	sub	sp, #28
 8106818:	af00      	add	r7, sp, #0
 810681a:	60f8      	str	r0, [r7, #12]
 810681c:	60b9      	str	r1, [r7, #8]
 810681e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8106820:	68fb      	ldr	r3, [r7, #12]
 8106822:	6a1b      	ldr	r3, [r3, #32]
 8106824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106826:	68fb      	ldr	r3, [r7, #12]
 8106828:	6a1b      	ldr	r3, [r3, #32]
 810682a:	f023 0201 	bic.w	r2, r3, #1
 810682e:	68fb      	ldr	r3, [r7, #12]
 8106830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106832:	68fb      	ldr	r3, [r7, #12]
 8106834:	699b      	ldr	r3, [r3, #24]
 8106836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106838:	693b      	ldr	r3, [r7, #16]
 810683a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810683e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	011b      	lsls	r3, r3, #4
 8106844:	693a      	ldr	r2, [r7, #16]
 8106846:	4313      	orrs	r3, r2
 8106848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810684a:	697b      	ldr	r3, [r7, #20]
 810684c:	f023 030a 	bic.w	r3, r3, #10
 8106850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106852:	697a      	ldr	r2, [r7, #20]
 8106854:	68bb      	ldr	r3, [r7, #8]
 8106856:	4313      	orrs	r3, r2
 8106858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810685a:	68fb      	ldr	r3, [r7, #12]
 810685c:	693a      	ldr	r2, [r7, #16]
 810685e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106860:	68fb      	ldr	r3, [r7, #12]
 8106862:	697a      	ldr	r2, [r7, #20]
 8106864:	621a      	str	r2, [r3, #32]
}
 8106866:	bf00      	nop
 8106868:	371c      	adds	r7, #28
 810686a:	46bd      	mov	sp, r7
 810686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106870:	4770      	bx	lr

08106872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106872:	b480      	push	{r7}
 8106874:	b087      	sub	sp, #28
 8106876:	af00      	add	r7, sp, #0
 8106878:	60f8      	str	r0, [r7, #12]
 810687a:	60b9      	str	r1, [r7, #8]
 810687c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810687e:	68fb      	ldr	r3, [r7, #12]
 8106880:	6a1b      	ldr	r3, [r3, #32]
 8106882:	f023 0210 	bic.w	r2, r3, #16
 8106886:	68fb      	ldr	r3, [r7, #12]
 8106888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810688a:	68fb      	ldr	r3, [r7, #12]
 810688c:	699b      	ldr	r3, [r3, #24]
 810688e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106890:	68fb      	ldr	r3, [r7, #12]
 8106892:	6a1b      	ldr	r3, [r3, #32]
 8106894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106896:	697b      	ldr	r3, [r7, #20]
 8106898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810689c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	031b      	lsls	r3, r3, #12
 81068a2:	697a      	ldr	r2, [r7, #20]
 81068a4:	4313      	orrs	r3, r2
 81068a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81068a8:	693b      	ldr	r3, [r7, #16]
 81068aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81068ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81068b0:	68bb      	ldr	r3, [r7, #8]
 81068b2:	011b      	lsls	r3, r3, #4
 81068b4:	693a      	ldr	r2, [r7, #16]
 81068b6:	4313      	orrs	r3, r2
 81068b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81068ba:	68fb      	ldr	r3, [r7, #12]
 81068bc:	697a      	ldr	r2, [r7, #20]
 81068be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81068c0:	68fb      	ldr	r3, [r7, #12]
 81068c2:	693a      	ldr	r2, [r7, #16]
 81068c4:	621a      	str	r2, [r3, #32]
}
 81068c6:	bf00      	nop
 81068c8:	371c      	adds	r7, #28
 81068ca:	46bd      	mov	sp, r7
 81068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068d0:	4770      	bx	lr

081068d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81068d2:	b480      	push	{r7}
 81068d4:	b085      	sub	sp, #20
 81068d6:	af00      	add	r7, sp, #0
 81068d8:	6078      	str	r0, [r7, #4]
 81068da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	689b      	ldr	r3, [r3, #8]
 81068e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81068e2:	68fb      	ldr	r3, [r7, #12]
 81068e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81068e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81068ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81068ee:	683a      	ldr	r2, [r7, #0]
 81068f0:	68fb      	ldr	r3, [r7, #12]
 81068f2:	4313      	orrs	r3, r2
 81068f4:	f043 0307 	orr.w	r3, r3, #7
 81068f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	68fa      	ldr	r2, [r7, #12]
 81068fe:	609a      	str	r2, [r3, #8]
}
 8106900:	bf00      	nop
 8106902:	3714      	adds	r7, #20
 8106904:	46bd      	mov	sp, r7
 8106906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810690a:	4770      	bx	lr

0810690c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810690c:	b480      	push	{r7}
 810690e:	b087      	sub	sp, #28
 8106910:	af00      	add	r7, sp, #0
 8106912:	60f8      	str	r0, [r7, #12]
 8106914:	60b9      	str	r1, [r7, #8]
 8106916:	607a      	str	r2, [r7, #4]
 8106918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810691a:	68fb      	ldr	r3, [r7, #12]
 810691c:	689b      	ldr	r3, [r3, #8]
 810691e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106920:	697b      	ldr	r3, [r7, #20]
 8106922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106928:	683b      	ldr	r3, [r7, #0]
 810692a:	021a      	lsls	r2, r3, #8
 810692c:	687b      	ldr	r3, [r7, #4]
 810692e:	431a      	orrs	r2, r3
 8106930:	68bb      	ldr	r3, [r7, #8]
 8106932:	4313      	orrs	r3, r2
 8106934:	697a      	ldr	r2, [r7, #20]
 8106936:	4313      	orrs	r3, r2
 8106938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810693a:	68fb      	ldr	r3, [r7, #12]
 810693c:	697a      	ldr	r2, [r7, #20]
 810693e:	609a      	str	r2, [r3, #8]
}
 8106940:	bf00      	nop
 8106942:	371c      	adds	r7, #28
 8106944:	46bd      	mov	sp, r7
 8106946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810694a:	4770      	bx	lr

0810694c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810694c:	b480      	push	{r7}
 810694e:	b085      	sub	sp, #20
 8106950:	af00      	add	r7, sp, #0
 8106952:	6078      	str	r0, [r7, #4]
 8106954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810695c:	2b01      	cmp	r3, #1
 810695e:	d101      	bne.n	8106964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106960:	2302      	movs	r3, #2
 8106962:	e06d      	b.n	8106a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	2201      	movs	r2, #1
 8106968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	2202      	movs	r2, #2
 8106970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	681b      	ldr	r3, [r3, #0]
 8106978:	685b      	ldr	r3, [r3, #4]
 810697a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	689b      	ldr	r3, [r3, #8]
 8106982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	4a30      	ldr	r2, [pc, #192]	; (8106a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810698a:	4293      	cmp	r3, r2
 810698c:	d004      	beq.n	8106998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810698e:	687b      	ldr	r3, [r7, #4]
 8106990:	681b      	ldr	r3, [r3, #0]
 8106992:	4a2f      	ldr	r2, [pc, #188]	; (8106a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106994:	4293      	cmp	r3, r2
 8106996:	d108      	bne.n	81069aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106998:	68fb      	ldr	r3, [r7, #12]
 810699a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810699e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81069a0:	683b      	ldr	r3, [r7, #0]
 81069a2:	685b      	ldr	r3, [r3, #4]
 81069a4:	68fa      	ldr	r2, [r7, #12]
 81069a6:	4313      	orrs	r3, r2
 81069a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81069aa:	68fb      	ldr	r3, [r7, #12]
 81069ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81069b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81069b2:	683b      	ldr	r3, [r7, #0]
 81069b4:	681b      	ldr	r3, [r3, #0]
 81069b6:	68fa      	ldr	r2, [r7, #12]
 81069b8:	4313      	orrs	r3, r2
 81069ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	68fa      	ldr	r2, [r7, #12]
 81069c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	681b      	ldr	r3, [r3, #0]
 81069c8:	4a20      	ldr	r2, [pc, #128]	; (8106a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81069ca:	4293      	cmp	r3, r2
 81069cc:	d022      	beq.n	8106a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81069ce:	687b      	ldr	r3, [r7, #4]
 81069d0:	681b      	ldr	r3, [r3, #0]
 81069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81069d6:	d01d      	beq.n	8106a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	681b      	ldr	r3, [r3, #0]
 81069dc:	4a1d      	ldr	r2, [pc, #116]	; (8106a54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81069de:	4293      	cmp	r3, r2
 81069e0:	d018      	beq.n	8106a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81069e2:	687b      	ldr	r3, [r7, #4]
 81069e4:	681b      	ldr	r3, [r3, #0]
 81069e6:	4a1c      	ldr	r2, [pc, #112]	; (8106a58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81069e8:	4293      	cmp	r3, r2
 81069ea:	d013      	beq.n	8106a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	681b      	ldr	r3, [r3, #0]
 81069f0:	4a1a      	ldr	r2, [pc, #104]	; (8106a5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81069f2:	4293      	cmp	r3, r2
 81069f4:	d00e      	beq.n	8106a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	681b      	ldr	r3, [r3, #0]
 81069fa:	4a15      	ldr	r2, [pc, #84]	; (8106a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81069fc:	4293      	cmp	r3, r2
 81069fe:	d009      	beq.n	8106a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	681b      	ldr	r3, [r3, #0]
 8106a04:	4a16      	ldr	r2, [pc, #88]	; (8106a60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8106a06:	4293      	cmp	r3, r2
 8106a08:	d004      	beq.n	8106a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106a0a:	687b      	ldr	r3, [r7, #4]
 8106a0c:	681b      	ldr	r3, [r3, #0]
 8106a0e:	4a15      	ldr	r2, [pc, #84]	; (8106a64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106a10:	4293      	cmp	r3, r2
 8106a12:	d10c      	bne.n	8106a2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106a14:	68bb      	ldr	r3, [r7, #8]
 8106a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106a1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106a1c:	683b      	ldr	r3, [r7, #0]
 8106a1e:	689b      	ldr	r3, [r3, #8]
 8106a20:	68ba      	ldr	r2, [r7, #8]
 8106a22:	4313      	orrs	r3, r2
 8106a24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	68ba      	ldr	r2, [r7, #8]
 8106a2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106a2e:	687b      	ldr	r3, [r7, #4]
 8106a30:	2201      	movs	r2, #1
 8106a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	2200      	movs	r2, #0
 8106a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106a3e:	2300      	movs	r3, #0
}
 8106a40:	4618      	mov	r0, r3
 8106a42:	3714      	adds	r7, #20
 8106a44:	46bd      	mov	sp, r7
 8106a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a4a:	4770      	bx	lr
 8106a4c:	40010000 	.word	0x40010000
 8106a50:	40010400 	.word	0x40010400
 8106a54:	40000400 	.word	0x40000400
 8106a58:	40000800 	.word	0x40000800
 8106a5c:	40000c00 	.word	0x40000c00
 8106a60:	40001800 	.word	0x40001800
 8106a64:	40014000 	.word	0x40014000

08106a68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8106a68:	b480      	push	{r7}
 8106a6a:	b085      	sub	sp, #20
 8106a6c:	af00      	add	r7, sp, #0
 8106a6e:	6078      	str	r0, [r7, #4]
 8106a70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8106a72:	2300      	movs	r3, #0
 8106a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106a7c:	2b01      	cmp	r3, #1
 8106a7e:	d101      	bne.n	8106a84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8106a80:	2302      	movs	r3, #2
 8106a82:	e065      	b.n	8106b50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	2201      	movs	r2, #1
 8106a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8106a8c:	68fb      	ldr	r3, [r7, #12]
 8106a8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106a92:	683b      	ldr	r3, [r7, #0]
 8106a94:	68db      	ldr	r3, [r3, #12]
 8106a96:	4313      	orrs	r3, r2
 8106a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8106a9a:	68fb      	ldr	r3, [r7, #12]
 8106a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106aa0:	683b      	ldr	r3, [r7, #0]
 8106aa2:	689b      	ldr	r3, [r3, #8]
 8106aa4:	4313      	orrs	r3, r2
 8106aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8106aa8:	68fb      	ldr	r3, [r7, #12]
 8106aaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8106aae:	683b      	ldr	r3, [r7, #0]
 8106ab0:	685b      	ldr	r3, [r3, #4]
 8106ab2:	4313      	orrs	r3, r2
 8106ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8106ab6:	68fb      	ldr	r3, [r7, #12]
 8106ab8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8106abc:	683b      	ldr	r3, [r7, #0]
 8106abe:	681b      	ldr	r3, [r3, #0]
 8106ac0:	4313      	orrs	r3, r2
 8106ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8106ac4:	68fb      	ldr	r3, [r7, #12]
 8106ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106aca:	683b      	ldr	r3, [r7, #0]
 8106acc:	691b      	ldr	r3, [r3, #16]
 8106ace:	4313      	orrs	r3, r2
 8106ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8106ad2:	68fb      	ldr	r3, [r7, #12]
 8106ad4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8106ad8:	683b      	ldr	r3, [r7, #0]
 8106ada:	695b      	ldr	r3, [r3, #20]
 8106adc:	4313      	orrs	r3, r2
 8106ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8106ae0:	68fb      	ldr	r3, [r7, #12]
 8106ae2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8106ae6:	683b      	ldr	r3, [r7, #0]
 8106ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106aea:	4313      	orrs	r3, r2
 8106aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8106aee:	68fb      	ldr	r3, [r7, #12]
 8106af0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8106af4:	683b      	ldr	r3, [r7, #0]
 8106af6:	699b      	ldr	r3, [r3, #24]
 8106af8:	041b      	lsls	r3, r3, #16
 8106afa:	4313      	orrs	r3, r2
 8106afc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	681b      	ldr	r3, [r3, #0]
 8106b02:	4a16      	ldr	r2, [pc, #88]	; (8106b5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8106b04:	4293      	cmp	r3, r2
 8106b06:	d004      	beq.n	8106b12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	681b      	ldr	r3, [r3, #0]
 8106b0c:	4a14      	ldr	r2, [pc, #80]	; (8106b60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8106b0e:	4293      	cmp	r3, r2
 8106b10:	d115      	bne.n	8106b3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8106b12:	68fb      	ldr	r3, [r7, #12]
 8106b14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8106b18:	683b      	ldr	r3, [r7, #0]
 8106b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106b1c:	051b      	lsls	r3, r3, #20
 8106b1e:	4313      	orrs	r3, r2
 8106b20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8106b22:	68fb      	ldr	r3, [r7, #12]
 8106b24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106b28:	683b      	ldr	r3, [r7, #0]
 8106b2a:	69db      	ldr	r3, [r3, #28]
 8106b2c:	4313      	orrs	r3, r2
 8106b2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8106b30:	68fb      	ldr	r3, [r7, #12]
 8106b32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8106b36:	683b      	ldr	r3, [r7, #0]
 8106b38:	6a1b      	ldr	r3, [r3, #32]
 8106b3a:	4313      	orrs	r3, r2
 8106b3c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	681b      	ldr	r3, [r3, #0]
 8106b42:	68fa      	ldr	r2, [r7, #12]
 8106b44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	2200      	movs	r2, #0
 8106b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106b4e:	2300      	movs	r3, #0
}
 8106b50:	4618      	mov	r0, r3
 8106b52:	3714      	adds	r7, #20
 8106b54:	46bd      	mov	sp, r7
 8106b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b5a:	4770      	bx	lr
 8106b5c:	40010000 	.word	0x40010000
 8106b60:	40010400 	.word	0x40010400

08106b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106b64:	b480      	push	{r7}
 8106b66:	b083      	sub	sp, #12
 8106b68:	af00      	add	r7, sp, #0
 8106b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106b6c:	bf00      	nop
 8106b6e:	370c      	adds	r7, #12
 8106b70:	46bd      	mov	sp, r7
 8106b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b76:	4770      	bx	lr

08106b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106b78:	b480      	push	{r7}
 8106b7a:	b083      	sub	sp, #12
 8106b7c:	af00      	add	r7, sp, #0
 8106b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106b80:	bf00      	nop
 8106b82:	370c      	adds	r7, #12
 8106b84:	46bd      	mov	sp, r7
 8106b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b8a:	4770      	bx	lr

08106b8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106b8c:	b480      	push	{r7}
 8106b8e:	b083      	sub	sp, #12
 8106b90:	af00      	add	r7, sp, #0
 8106b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106b94:	bf00      	nop
 8106b96:	370c      	adds	r7, #12
 8106b98:	46bd      	mov	sp, r7
 8106b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b9e:	4770      	bx	lr

08106ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106ba0:	b580      	push	{r7, lr}
 8106ba2:	b082      	sub	sp, #8
 8106ba4:	af00      	add	r7, sp, #0
 8106ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	2b00      	cmp	r3, #0
 8106bac:	d101      	bne.n	8106bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8106bae:	2301      	movs	r3, #1
 8106bb0:	e042      	b.n	8106c38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106bb8:	2b00      	cmp	r3, #0
 8106bba:	d106      	bne.n	8106bca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	2200      	movs	r2, #0
 8106bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106bc4:	6878      	ldr	r0, [r7, #4]
 8106bc6:	f00b f919 	bl	8111dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	2224      	movs	r2, #36	; 0x24
 8106bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	681b      	ldr	r3, [r3, #0]
 8106bd6:	681a      	ldr	r2, [r3, #0]
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	681b      	ldr	r3, [r3, #0]
 8106bdc:	f022 0201 	bic.w	r2, r2, #1
 8106be0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106be2:	6878      	ldr	r0, [r7, #4]
 8106be4:	f000 f996 	bl	8106f14 <UART_SetConfig>
 8106be8:	4603      	mov	r3, r0
 8106bea:	2b01      	cmp	r3, #1
 8106bec:	d101      	bne.n	8106bf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8106bee:	2301      	movs	r3, #1
 8106bf0:	e022      	b.n	8106c38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106bf6:	2b00      	cmp	r3, #0
 8106bf8:	d002      	beq.n	8106c00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8106bfa:	6878      	ldr	r0, [r7, #4]
 8106bfc:	f000 feea 	bl	81079d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	681b      	ldr	r3, [r3, #0]
 8106c04:	685a      	ldr	r2, [r3, #4]
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	681b      	ldr	r3, [r3, #0]
 8106c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8106c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	689a      	ldr	r2, [r3, #8]
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8106c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	681a      	ldr	r2, [r3, #0]
 8106c26:	687b      	ldr	r3, [r7, #4]
 8106c28:	681b      	ldr	r3, [r3, #0]
 8106c2a:	f042 0201 	orr.w	r2, r2, #1
 8106c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8106c30:	6878      	ldr	r0, [r7, #4]
 8106c32:	f000 ff71 	bl	8107b18 <UART_CheckIdleState>
 8106c36:	4603      	mov	r3, r0
}
 8106c38:	4618      	mov	r0, r3
 8106c3a:	3708      	adds	r7, #8
 8106c3c:	46bd      	mov	sp, r7
 8106c3e:	bd80      	pop	{r7, pc}

08106c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106c40:	b580      	push	{r7, lr}
 8106c42:	b08a      	sub	sp, #40	; 0x28
 8106c44:	af02      	add	r7, sp, #8
 8106c46:	60f8      	str	r0, [r7, #12]
 8106c48:	60b9      	str	r1, [r7, #8]
 8106c4a:	603b      	str	r3, [r7, #0]
 8106c4c:	4613      	mov	r3, r2
 8106c4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106c50:	68fb      	ldr	r3, [r7, #12]
 8106c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106c56:	2b20      	cmp	r3, #32
 8106c58:	f040 8083 	bne.w	8106d62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8106c5c:	68bb      	ldr	r3, [r7, #8]
 8106c5e:	2b00      	cmp	r3, #0
 8106c60:	d002      	beq.n	8106c68 <HAL_UART_Transmit+0x28>
 8106c62:	88fb      	ldrh	r3, [r7, #6]
 8106c64:	2b00      	cmp	r3, #0
 8106c66:	d101      	bne.n	8106c6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8106c68:	2301      	movs	r3, #1
 8106c6a:	e07b      	b.n	8106d64 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8106c6c:	68fb      	ldr	r3, [r7, #12]
 8106c6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106c72:	2b01      	cmp	r3, #1
 8106c74:	d101      	bne.n	8106c7a <HAL_UART_Transmit+0x3a>
 8106c76:	2302      	movs	r3, #2
 8106c78:	e074      	b.n	8106d64 <HAL_UART_Transmit+0x124>
 8106c7a:	68fb      	ldr	r3, [r7, #12]
 8106c7c:	2201      	movs	r2, #1
 8106c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106c82:	68fb      	ldr	r3, [r7, #12]
 8106c84:	2200      	movs	r2, #0
 8106c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106c8a:	68fb      	ldr	r3, [r7, #12]
 8106c8c:	2221      	movs	r2, #33	; 0x21
 8106c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106c92:	f7fa fbcd 	bl	8101430 <HAL_GetTick>
 8106c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106c98:	68fb      	ldr	r3, [r7, #12]
 8106c9a:	88fa      	ldrh	r2, [r7, #6]
 8106c9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8106ca0:	68fb      	ldr	r3, [r7, #12]
 8106ca2:	88fa      	ldrh	r2, [r7, #6]
 8106ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106ca8:	68fb      	ldr	r3, [r7, #12]
 8106caa:	689b      	ldr	r3, [r3, #8]
 8106cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106cb0:	d108      	bne.n	8106cc4 <HAL_UART_Transmit+0x84>
 8106cb2:	68fb      	ldr	r3, [r7, #12]
 8106cb4:	691b      	ldr	r3, [r3, #16]
 8106cb6:	2b00      	cmp	r3, #0
 8106cb8:	d104      	bne.n	8106cc4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8106cba:	2300      	movs	r3, #0
 8106cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106cbe:	68bb      	ldr	r3, [r7, #8]
 8106cc0:	61bb      	str	r3, [r7, #24]
 8106cc2:	e003      	b.n	8106ccc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8106cc4:	68bb      	ldr	r3, [r7, #8]
 8106cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106cc8:	2300      	movs	r3, #0
 8106cca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8106ccc:	68fb      	ldr	r3, [r7, #12]
 8106cce:	2200      	movs	r2, #0
 8106cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8106cd4:	e02c      	b.n	8106d30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106cd6:	683b      	ldr	r3, [r7, #0]
 8106cd8:	9300      	str	r3, [sp, #0]
 8106cda:	697b      	ldr	r3, [r7, #20]
 8106cdc:	2200      	movs	r2, #0
 8106cde:	2180      	movs	r1, #128	; 0x80
 8106ce0:	68f8      	ldr	r0, [r7, #12]
 8106ce2:	f000 ff64 	bl	8107bae <UART_WaitOnFlagUntilTimeout>
 8106ce6:	4603      	mov	r3, r0
 8106ce8:	2b00      	cmp	r3, #0
 8106cea:	d001      	beq.n	8106cf0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8106cec:	2303      	movs	r3, #3
 8106cee:	e039      	b.n	8106d64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8106cf0:	69fb      	ldr	r3, [r7, #28]
 8106cf2:	2b00      	cmp	r3, #0
 8106cf4:	d10b      	bne.n	8106d0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106cf6:	69bb      	ldr	r3, [r7, #24]
 8106cf8:	881b      	ldrh	r3, [r3, #0]
 8106cfa:	461a      	mov	r2, r3
 8106cfc:	68fb      	ldr	r3, [r7, #12]
 8106cfe:	681b      	ldr	r3, [r3, #0]
 8106d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106d04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8106d06:	69bb      	ldr	r3, [r7, #24]
 8106d08:	3302      	adds	r3, #2
 8106d0a:	61bb      	str	r3, [r7, #24]
 8106d0c:	e007      	b.n	8106d1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106d0e:	69fb      	ldr	r3, [r7, #28]
 8106d10:	781a      	ldrb	r2, [r3, #0]
 8106d12:	68fb      	ldr	r3, [r7, #12]
 8106d14:	681b      	ldr	r3, [r3, #0]
 8106d16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8106d18:	69fb      	ldr	r3, [r7, #28]
 8106d1a:	3301      	adds	r3, #1
 8106d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106d1e:	68fb      	ldr	r3, [r7, #12]
 8106d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106d24:	b29b      	uxth	r3, r3
 8106d26:	3b01      	subs	r3, #1
 8106d28:	b29a      	uxth	r2, r3
 8106d2a:	68fb      	ldr	r3, [r7, #12]
 8106d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8106d30:	68fb      	ldr	r3, [r7, #12]
 8106d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106d36:	b29b      	uxth	r3, r3
 8106d38:	2b00      	cmp	r3, #0
 8106d3a:	d1cc      	bne.n	8106cd6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106d3c:	683b      	ldr	r3, [r7, #0]
 8106d3e:	9300      	str	r3, [sp, #0]
 8106d40:	697b      	ldr	r3, [r7, #20]
 8106d42:	2200      	movs	r2, #0
 8106d44:	2140      	movs	r1, #64	; 0x40
 8106d46:	68f8      	ldr	r0, [r7, #12]
 8106d48:	f000 ff31 	bl	8107bae <UART_WaitOnFlagUntilTimeout>
 8106d4c:	4603      	mov	r3, r0
 8106d4e:	2b00      	cmp	r3, #0
 8106d50:	d001      	beq.n	8106d56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8106d52:	2303      	movs	r3, #3
 8106d54:	e006      	b.n	8106d64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106d56:	68fb      	ldr	r3, [r7, #12]
 8106d58:	2220      	movs	r2, #32
 8106d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8106d5e:	2300      	movs	r3, #0
 8106d60:	e000      	b.n	8106d64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8106d62:	2302      	movs	r3, #2
  }
}
 8106d64:	4618      	mov	r0, r3
 8106d66:	3720      	adds	r7, #32
 8106d68:	46bd      	mov	sp, r7
 8106d6a:	bd80      	pop	{r7, pc}

08106d6c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106d6c:	b580      	push	{r7, lr}
 8106d6e:	b08a      	sub	sp, #40	; 0x28
 8106d70:	af02      	add	r7, sp, #8
 8106d72:	60f8      	str	r0, [r7, #12]
 8106d74:	60b9      	str	r1, [r7, #8]
 8106d76:	603b      	str	r3, [r7, #0]
 8106d78:	4613      	mov	r3, r2
 8106d7a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8106d7c:	68fb      	ldr	r3, [r7, #12]
 8106d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106d82:	2b20      	cmp	r3, #32
 8106d84:	f040 80c0 	bne.w	8106f08 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8106d88:	68bb      	ldr	r3, [r7, #8]
 8106d8a:	2b00      	cmp	r3, #0
 8106d8c:	d002      	beq.n	8106d94 <HAL_UART_Receive+0x28>
 8106d8e:	88fb      	ldrh	r3, [r7, #6]
 8106d90:	2b00      	cmp	r3, #0
 8106d92:	d101      	bne.n	8106d98 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8106d94:	2301      	movs	r3, #1
 8106d96:	e0b8      	b.n	8106f0a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8106d98:	68fb      	ldr	r3, [r7, #12]
 8106d9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106d9e:	2b01      	cmp	r3, #1
 8106da0:	d101      	bne.n	8106da6 <HAL_UART_Receive+0x3a>
 8106da2:	2302      	movs	r3, #2
 8106da4:	e0b1      	b.n	8106f0a <HAL_UART_Receive+0x19e>
 8106da6:	68fb      	ldr	r3, [r7, #12]
 8106da8:	2201      	movs	r2, #1
 8106daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106dae:	68fb      	ldr	r3, [r7, #12]
 8106db0:	2200      	movs	r2, #0
 8106db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8106db6:	68fb      	ldr	r3, [r7, #12]
 8106db8:	2222      	movs	r2, #34	; 0x22
 8106dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106dbe:	68fb      	ldr	r3, [r7, #12]
 8106dc0:	2200      	movs	r2, #0
 8106dc2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106dc4:	f7fa fb34 	bl	8101430 <HAL_GetTick>
 8106dc8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8106dca:	68fb      	ldr	r3, [r7, #12]
 8106dcc:	88fa      	ldrh	r2, [r7, #6]
 8106dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8106dd2:	68fb      	ldr	r3, [r7, #12]
 8106dd4:	88fa      	ldrh	r2, [r7, #6]
 8106dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8106dda:	68fb      	ldr	r3, [r7, #12]
 8106ddc:	689b      	ldr	r3, [r3, #8]
 8106dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106de2:	d10e      	bne.n	8106e02 <HAL_UART_Receive+0x96>
 8106de4:	68fb      	ldr	r3, [r7, #12]
 8106de6:	691b      	ldr	r3, [r3, #16]
 8106de8:	2b00      	cmp	r3, #0
 8106dea:	d105      	bne.n	8106df8 <HAL_UART_Receive+0x8c>
 8106dec:	68fb      	ldr	r3, [r7, #12]
 8106dee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8106df2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106df6:	e02d      	b.n	8106e54 <HAL_UART_Receive+0xe8>
 8106df8:	68fb      	ldr	r3, [r7, #12]
 8106dfa:	22ff      	movs	r2, #255	; 0xff
 8106dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106e00:	e028      	b.n	8106e54 <HAL_UART_Receive+0xe8>
 8106e02:	68fb      	ldr	r3, [r7, #12]
 8106e04:	689b      	ldr	r3, [r3, #8]
 8106e06:	2b00      	cmp	r3, #0
 8106e08:	d10d      	bne.n	8106e26 <HAL_UART_Receive+0xba>
 8106e0a:	68fb      	ldr	r3, [r7, #12]
 8106e0c:	691b      	ldr	r3, [r3, #16]
 8106e0e:	2b00      	cmp	r3, #0
 8106e10:	d104      	bne.n	8106e1c <HAL_UART_Receive+0xb0>
 8106e12:	68fb      	ldr	r3, [r7, #12]
 8106e14:	22ff      	movs	r2, #255	; 0xff
 8106e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106e1a:	e01b      	b.n	8106e54 <HAL_UART_Receive+0xe8>
 8106e1c:	68fb      	ldr	r3, [r7, #12]
 8106e1e:	227f      	movs	r2, #127	; 0x7f
 8106e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106e24:	e016      	b.n	8106e54 <HAL_UART_Receive+0xe8>
 8106e26:	68fb      	ldr	r3, [r7, #12]
 8106e28:	689b      	ldr	r3, [r3, #8]
 8106e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106e2e:	d10d      	bne.n	8106e4c <HAL_UART_Receive+0xe0>
 8106e30:	68fb      	ldr	r3, [r7, #12]
 8106e32:	691b      	ldr	r3, [r3, #16]
 8106e34:	2b00      	cmp	r3, #0
 8106e36:	d104      	bne.n	8106e42 <HAL_UART_Receive+0xd6>
 8106e38:	68fb      	ldr	r3, [r7, #12]
 8106e3a:	227f      	movs	r2, #127	; 0x7f
 8106e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106e40:	e008      	b.n	8106e54 <HAL_UART_Receive+0xe8>
 8106e42:	68fb      	ldr	r3, [r7, #12]
 8106e44:	223f      	movs	r2, #63	; 0x3f
 8106e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106e4a:	e003      	b.n	8106e54 <HAL_UART_Receive+0xe8>
 8106e4c:	68fb      	ldr	r3, [r7, #12]
 8106e4e:	2200      	movs	r2, #0
 8106e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8106e54:	68fb      	ldr	r3, [r7, #12]
 8106e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8106e5a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106e5c:	68fb      	ldr	r3, [r7, #12]
 8106e5e:	689b      	ldr	r3, [r3, #8]
 8106e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106e64:	d108      	bne.n	8106e78 <HAL_UART_Receive+0x10c>
 8106e66:	68fb      	ldr	r3, [r7, #12]
 8106e68:	691b      	ldr	r3, [r3, #16]
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	d104      	bne.n	8106e78 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8106e6e:	2300      	movs	r3, #0
 8106e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8106e72:	68bb      	ldr	r3, [r7, #8]
 8106e74:	61bb      	str	r3, [r7, #24]
 8106e76:	e003      	b.n	8106e80 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8106e78:	68bb      	ldr	r3, [r7, #8]
 8106e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106e7c:	2300      	movs	r3, #0
 8106e7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8106e80:	68fb      	ldr	r3, [r7, #12]
 8106e82:	2200      	movs	r2, #0
 8106e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8106e88:	e032      	b.n	8106ef0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8106e8a:	683b      	ldr	r3, [r7, #0]
 8106e8c:	9300      	str	r3, [sp, #0]
 8106e8e:	697b      	ldr	r3, [r7, #20]
 8106e90:	2200      	movs	r2, #0
 8106e92:	2120      	movs	r1, #32
 8106e94:	68f8      	ldr	r0, [r7, #12]
 8106e96:	f000 fe8a 	bl	8107bae <UART_WaitOnFlagUntilTimeout>
 8106e9a:	4603      	mov	r3, r0
 8106e9c:	2b00      	cmp	r3, #0
 8106e9e:	d001      	beq.n	8106ea4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8106ea0:	2303      	movs	r3, #3
 8106ea2:	e032      	b.n	8106f0a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8106ea4:	69fb      	ldr	r3, [r7, #28]
 8106ea6:	2b00      	cmp	r3, #0
 8106ea8:	d10c      	bne.n	8106ec4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8106eaa:	68fb      	ldr	r3, [r7, #12]
 8106eac:	681b      	ldr	r3, [r3, #0]
 8106eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106eb0:	b29a      	uxth	r2, r3
 8106eb2:	8a7b      	ldrh	r3, [r7, #18]
 8106eb4:	4013      	ands	r3, r2
 8106eb6:	b29a      	uxth	r2, r3
 8106eb8:	69bb      	ldr	r3, [r7, #24]
 8106eba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8106ebc:	69bb      	ldr	r3, [r7, #24]
 8106ebe:	3302      	adds	r3, #2
 8106ec0:	61bb      	str	r3, [r7, #24]
 8106ec2:	e00c      	b.n	8106ede <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8106ec4:	68fb      	ldr	r3, [r7, #12]
 8106ec6:	681b      	ldr	r3, [r3, #0]
 8106ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106eca:	b2da      	uxtb	r2, r3
 8106ecc:	8a7b      	ldrh	r3, [r7, #18]
 8106ece:	b2db      	uxtb	r3, r3
 8106ed0:	4013      	ands	r3, r2
 8106ed2:	b2da      	uxtb	r2, r3
 8106ed4:	69fb      	ldr	r3, [r7, #28]
 8106ed6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8106ed8:	69fb      	ldr	r3, [r7, #28]
 8106eda:	3301      	adds	r3, #1
 8106edc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8106ede:	68fb      	ldr	r3, [r7, #12]
 8106ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106ee4:	b29b      	uxth	r3, r3
 8106ee6:	3b01      	subs	r3, #1
 8106ee8:	b29a      	uxth	r2, r3
 8106eea:	68fb      	ldr	r3, [r7, #12]
 8106eec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8106ef0:	68fb      	ldr	r3, [r7, #12]
 8106ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106ef6:	b29b      	uxth	r3, r3
 8106ef8:	2b00      	cmp	r3, #0
 8106efa:	d1c6      	bne.n	8106e8a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	2220      	movs	r2, #32
 8106f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8106f04:	2300      	movs	r3, #0
 8106f06:	e000      	b.n	8106f0a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8106f08:	2302      	movs	r3, #2
  }
}
 8106f0a:	4618      	mov	r0, r3
 8106f0c:	3720      	adds	r7, #32
 8106f0e:	46bd      	mov	sp, r7
 8106f10:	bd80      	pop	{r7, pc}
	...

08106f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106f14:	b5b0      	push	{r4, r5, r7, lr}
 8106f16:	b08e      	sub	sp, #56	; 0x38
 8106f18:	af00      	add	r7, sp, #0
 8106f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106f1c:	2300      	movs	r3, #0
 8106f1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	689a      	ldr	r2, [r3, #8]
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	691b      	ldr	r3, [r3, #16]
 8106f2a:	431a      	orrs	r2, r3
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	695b      	ldr	r3, [r3, #20]
 8106f30:	431a      	orrs	r2, r3
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	69db      	ldr	r3, [r3, #28]
 8106f36:	4313      	orrs	r3, r2
 8106f38:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	681a      	ldr	r2, [r3, #0]
 8106f40:	4bc0      	ldr	r3, [pc, #768]	; (8107244 <UART_SetConfig+0x330>)
 8106f42:	4013      	ands	r3, r2
 8106f44:	687a      	ldr	r2, [r7, #4]
 8106f46:	6812      	ldr	r2, [r2, #0]
 8106f48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106f4a:	430b      	orrs	r3, r1
 8106f4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	681b      	ldr	r3, [r3, #0]
 8106f52:	685b      	ldr	r3, [r3, #4]
 8106f54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	68da      	ldr	r2, [r3, #12]
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	681b      	ldr	r3, [r3, #0]
 8106f60:	430a      	orrs	r2, r1
 8106f62:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	699b      	ldr	r3, [r3, #24]
 8106f68:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106f6a:	687b      	ldr	r3, [r7, #4]
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	4ab6      	ldr	r2, [pc, #728]	; (8107248 <UART_SetConfig+0x334>)
 8106f70:	4293      	cmp	r3, r2
 8106f72:	d004      	beq.n	8106f7e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	6a1b      	ldr	r3, [r3, #32]
 8106f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106f7a:	4313      	orrs	r3, r2
 8106f7c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	689b      	ldr	r3, [r3, #8]
 8106f84:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8106f88:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8106f8c:	687a      	ldr	r2, [r7, #4]
 8106f8e:	6812      	ldr	r2, [r2, #0]
 8106f90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106f92:	430b      	orrs	r3, r1
 8106f94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	681b      	ldr	r3, [r3, #0]
 8106f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f9c:	f023 010f 	bic.w	r1, r3, #15
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	430a      	orrs	r2, r1
 8106faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	681b      	ldr	r3, [r3, #0]
 8106fb0:	4aa6      	ldr	r2, [pc, #664]	; (810724c <UART_SetConfig+0x338>)
 8106fb2:	4293      	cmp	r3, r2
 8106fb4:	d176      	bne.n	81070a4 <UART_SetConfig+0x190>
 8106fb6:	4ba6      	ldr	r3, [pc, #664]	; (8107250 <UART_SetConfig+0x33c>)
 8106fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106fbe:	2b28      	cmp	r3, #40	; 0x28
 8106fc0:	d86c      	bhi.n	810709c <UART_SetConfig+0x188>
 8106fc2:	a201      	add	r2, pc, #4	; (adr r2, 8106fc8 <UART_SetConfig+0xb4>)
 8106fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106fc8:	0810706d 	.word	0x0810706d
 8106fcc:	0810709d 	.word	0x0810709d
 8106fd0:	0810709d 	.word	0x0810709d
 8106fd4:	0810709d 	.word	0x0810709d
 8106fd8:	0810709d 	.word	0x0810709d
 8106fdc:	0810709d 	.word	0x0810709d
 8106fe0:	0810709d 	.word	0x0810709d
 8106fe4:	0810709d 	.word	0x0810709d
 8106fe8:	08107075 	.word	0x08107075
 8106fec:	0810709d 	.word	0x0810709d
 8106ff0:	0810709d 	.word	0x0810709d
 8106ff4:	0810709d 	.word	0x0810709d
 8106ff8:	0810709d 	.word	0x0810709d
 8106ffc:	0810709d 	.word	0x0810709d
 8107000:	0810709d 	.word	0x0810709d
 8107004:	0810709d 	.word	0x0810709d
 8107008:	0810707d 	.word	0x0810707d
 810700c:	0810709d 	.word	0x0810709d
 8107010:	0810709d 	.word	0x0810709d
 8107014:	0810709d 	.word	0x0810709d
 8107018:	0810709d 	.word	0x0810709d
 810701c:	0810709d 	.word	0x0810709d
 8107020:	0810709d 	.word	0x0810709d
 8107024:	0810709d 	.word	0x0810709d
 8107028:	08107085 	.word	0x08107085
 810702c:	0810709d 	.word	0x0810709d
 8107030:	0810709d 	.word	0x0810709d
 8107034:	0810709d 	.word	0x0810709d
 8107038:	0810709d 	.word	0x0810709d
 810703c:	0810709d 	.word	0x0810709d
 8107040:	0810709d 	.word	0x0810709d
 8107044:	0810709d 	.word	0x0810709d
 8107048:	0810708d 	.word	0x0810708d
 810704c:	0810709d 	.word	0x0810709d
 8107050:	0810709d 	.word	0x0810709d
 8107054:	0810709d 	.word	0x0810709d
 8107058:	0810709d 	.word	0x0810709d
 810705c:	0810709d 	.word	0x0810709d
 8107060:	0810709d 	.word	0x0810709d
 8107064:	0810709d 	.word	0x0810709d
 8107068:	08107095 	.word	0x08107095
 810706c:	2301      	movs	r3, #1
 810706e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107072:	e220      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107074:	2304      	movs	r3, #4
 8107076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810707a:	e21c      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810707c:	2308      	movs	r3, #8
 810707e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107082:	e218      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107084:	2310      	movs	r3, #16
 8107086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810708a:	e214      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810708c:	2320      	movs	r3, #32
 810708e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107092:	e210      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107094:	2340      	movs	r3, #64	; 0x40
 8107096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810709a:	e20c      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810709c:	2380      	movs	r3, #128	; 0x80
 810709e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070a2:	e208      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81070a4:	687b      	ldr	r3, [r7, #4]
 81070a6:	681b      	ldr	r3, [r3, #0]
 81070a8:	4a6a      	ldr	r2, [pc, #424]	; (8107254 <UART_SetConfig+0x340>)
 81070aa:	4293      	cmp	r3, r2
 81070ac:	d130      	bne.n	8107110 <UART_SetConfig+0x1fc>
 81070ae:	4b68      	ldr	r3, [pc, #416]	; (8107250 <UART_SetConfig+0x33c>)
 81070b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81070b2:	f003 0307 	and.w	r3, r3, #7
 81070b6:	2b05      	cmp	r3, #5
 81070b8:	d826      	bhi.n	8107108 <UART_SetConfig+0x1f4>
 81070ba:	a201      	add	r2, pc, #4	; (adr r2, 81070c0 <UART_SetConfig+0x1ac>)
 81070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81070c0:	081070d9 	.word	0x081070d9
 81070c4:	081070e1 	.word	0x081070e1
 81070c8:	081070e9 	.word	0x081070e9
 81070cc:	081070f1 	.word	0x081070f1
 81070d0:	081070f9 	.word	0x081070f9
 81070d4:	08107101 	.word	0x08107101
 81070d8:	2300      	movs	r3, #0
 81070da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070de:	e1ea      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81070e0:	2304      	movs	r3, #4
 81070e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070e6:	e1e6      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81070e8:	2308      	movs	r3, #8
 81070ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070ee:	e1e2      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81070f0:	2310      	movs	r3, #16
 81070f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070f6:	e1de      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81070f8:	2320      	movs	r3, #32
 81070fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81070fe:	e1da      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107100:	2340      	movs	r3, #64	; 0x40
 8107102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107106:	e1d6      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107108:	2380      	movs	r3, #128	; 0x80
 810710a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810710e:	e1d2      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	681b      	ldr	r3, [r3, #0]
 8107114:	4a50      	ldr	r2, [pc, #320]	; (8107258 <UART_SetConfig+0x344>)
 8107116:	4293      	cmp	r3, r2
 8107118:	d130      	bne.n	810717c <UART_SetConfig+0x268>
 810711a:	4b4d      	ldr	r3, [pc, #308]	; (8107250 <UART_SetConfig+0x33c>)
 810711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810711e:	f003 0307 	and.w	r3, r3, #7
 8107122:	2b05      	cmp	r3, #5
 8107124:	d826      	bhi.n	8107174 <UART_SetConfig+0x260>
 8107126:	a201      	add	r2, pc, #4	; (adr r2, 810712c <UART_SetConfig+0x218>)
 8107128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810712c:	08107145 	.word	0x08107145
 8107130:	0810714d 	.word	0x0810714d
 8107134:	08107155 	.word	0x08107155
 8107138:	0810715d 	.word	0x0810715d
 810713c:	08107165 	.word	0x08107165
 8107140:	0810716d 	.word	0x0810716d
 8107144:	2300      	movs	r3, #0
 8107146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810714a:	e1b4      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810714c:	2304      	movs	r3, #4
 810714e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107152:	e1b0      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107154:	2308      	movs	r3, #8
 8107156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810715a:	e1ac      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810715c:	2310      	movs	r3, #16
 810715e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107162:	e1a8      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107164:	2320      	movs	r3, #32
 8107166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810716a:	e1a4      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810716c:	2340      	movs	r3, #64	; 0x40
 810716e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107172:	e1a0      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107174:	2380      	movs	r3, #128	; 0x80
 8107176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810717a:	e19c      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	4a36      	ldr	r2, [pc, #216]	; (810725c <UART_SetConfig+0x348>)
 8107182:	4293      	cmp	r3, r2
 8107184:	d130      	bne.n	81071e8 <UART_SetConfig+0x2d4>
 8107186:	4b32      	ldr	r3, [pc, #200]	; (8107250 <UART_SetConfig+0x33c>)
 8107188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810718a:	f003 0307 	and.w	r3, r3, #7
 810718e:	2b05      	cmp	r3, #5
 8107190:	d826      	bhi.n	81071e0 <UART_SetConfig+0x2cc>
 8107192:	a201      	add	r2, pc, #4	; (adr r2, 8107198 <UART_SetConfig+0x284>)
 8107194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107198:	081071b1 	.word	0x081071b1
 810719c:	081071b9 	.word	0x081071b9
 81071a0:	081071c1 	.word	0x081071c1
 81071a4:	081071c9 	.word	0x081071c9
 81071a8:	081071d1 	.word	0x081071d1
 81071ac:	081071d9 	.word	0x081071d9
 81071b0:	2300      	movs	r3, #0
 81071b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071b6:	e17e      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81071b8:	2304      	movs	r3, #4
 81071ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071be:	e17a      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81071c0:	2308      	movs	r3, #8
 81071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071c6:	e176      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81071c8:	2310      	movs	r3, #16
 81071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071ce:	e172      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81071d0:	2320      	movs	r3, #32
 81071d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071d6:	e16e      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81071d8:	2340      	movs	r3, #64	; 0x40
 81071da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071de:	e16a      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81071e0:	2380      	movs	r3, #128	; 0x80
 81071e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81071e6:	e166      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	4a1c      	ldr	r2, [pc, #112]	; (8107260 <UART_SetConfig+0x34c>)
 81071ee:	4293      	cmp	r3, r2
 81071f0:	d140      	bne.n	8107274 <UART_SetConfig+0x360>
 81071f2:	4b17      	ldr	r3, [pc, #92]	; (8107250 <UART_SetConfig+0x33c>)
 81071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81071f6:	f003 0307 	and.w	r3, r3, #7
 81071fa:	2b05      	cmp	r3, #5
 81071fc:	d836      	bhi.n	810726c <UART_SetConfig+0x358>
 81071fe:	a201      	add	r2, pc, #4	; (adr r2, 8107204 <UART_SetConfig+0x2f0>)
 8107200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107204:	0810721d 	.word	0x0810721d
 8107208:	08107225 	.word	0x08107225
 810720c:	0810722d 	.word	0x0810722d
 8107210:	08107235 	.word	0x08107235
 8107214:	0810723d 	.word	0x0810723d
 8107218:	08107265 	.word	0x08107265
 810721c:	2300      	movs	r3, #0
 810721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107222:	e148      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107224:	2304      	movs	r3, #4
 8107226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810722a:	e144      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810722c:	2308      	movs	r3, #8
 810722e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107232:	e140      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107234:	2310      	movs	r3, #16
 8107236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810723a:	e13c      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810723c:	2320      	movs	r3, #32
 810723e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107242:	e138      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107244:	cfff69f3 	.word	0xcfff69f3
 8107248:	58000c00 	.word	0x58000c00
 810724c:	40011000 	.word	0x40011000
 8107250:	58024400 	.word	0x58024400
 8107254:	40004400 	.word	0x40004400
 8107258:	40004800 	.word	0x40004800
 810725c:	40004c00 	.word	0x40004c00
 8107260:	40005000 	.word	0x40005000
 8107264:	2340      	movs	r3, #64	; 0x40
 8107266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810726a:	e124      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810726c:	2380      	movs	r3, #128	; 0x80
 810726e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107272:	e120      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107274:	687b      	ldr	r3, [r7, #4]
 8107276:	681b      	ldr	r3, [r3, #0]
 8107278:	4acc      	ldr	r2, [pc, #816]	; (81075ac <UART_SetConfig+0x698>)
 810727a:	4293      	cmp	r3, r2
 810727c:	d176      	bne.n	810736c <UART_SetConfig+0x458>
 810727e:	4bcc      	ldr	r3, [pc, #816]	; (81075b0 <UART_SetConfig+0x69c>)
 8107280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107286:	2b28      	cmp	r3, #40	; 0x28
 8107288:	d86c      	bhi.n	8107364 <UART_SetConfig+0x450>
 810728a:	a201      	add	r2, pc, #4	; (adr r2, 8107290 <UART_SetConfig+0x37c>)
 810728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107290:	08107335 	.word	0x08107335
 8107294:	08107365 	.word	0x08107365
 8107298:	08107365 	.word	0x08107365
 810729c:	08107365 	.word	0x08107365
 81072a0:	08107365 	.word	0x08107365
 81072a4:	08107365 	.word	0x08107365
 81072a8:	08107365 	.word	0x08107365
 81072ac:	08107365 	.word	0x08107365
 81072b0:	0810733d 	.word	0x0810733d
 81072b4:	08107365 	.word	0x08107365
 81072b8:	08107365 	.word	0x08107365
 81072bc:	08107365 	.word	0x08107365
 81072c0:	08107365 	.word	0x08107365
 81072c4:	08107365 	.word	0x08107365
 81072c8:	08107365 	.word	0x08107365
 81072cc:	08107365 	.word	0x08107365
 81072d0:	08107345 	.word	0x08107345
 81072d4:	08107365 	.word	0x08107365
 81072d8:	08107365 	.word	0x08107365
 81072dc:	08107365 	.word	0x08107365
 81072e0:	08107365 	.word	0x08107365
 81072e4:	08107365 	.word	0x08107365
 81072e8:	08107365 	.word	0x08107365
 81072ec:	08107365 	.word	0x08107365
 81072f0:	0810734d 	.word	0x0810734d
 81072f4:	08107365 	.word	0x08107365
 81072f8:	08107365 	.word	0x08107365
 81072fc:	08107365 	.word	0x08107365
 8107300:	08107365 	.word	0x08107365
 8107304:	08107365 	.word	0x08107365
 8107308:	08107365 	.word	0x08107365
 810730c:	08107365 	.word	0x08107365
 8107310:	08107355 	.word	0x08107355
 8107314:	08107365 	.word	0x08107365
 8107318:	08107365 	.word	0x08107365
 810731c:	08107365 	.word	0x08107365
 8107320:	08107365 	.word	0x08107365
 8107324:	08107365 	.word	0x08107365
 8107328:	08107365 	.word	0x08107365
 810732c:	08107365 	.word	0x08107365
 8107330:	0810735d 	.word	0x0810735d
 8107334:	2301      	movs	r3, #1
 8107336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810733a:	e0bc      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810733c:	2304      	movs	r3, #4
 810733e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107342:	e0b8      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107344:	2308      	movs	r3, #8
 8107346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810734a:	e0b4      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810734c:	2310      	movs	r3, #16
 810734e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107352:	e0b0      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107354:	2320      	movs	r3, #32
 8107356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810735a:	e0ac      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810735c:	2340      	movs	r3, #64	; 0x40
 810735e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107362:	e0a8      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107364:	2380      	movs	r3, #128	; 0x80
 8107366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810736a:	e0a4      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	681b      	ldr	r3, [r3, #0]
 8107370:	4a90      	ldr	r2, [pc, #576]	; (81075b4 <UART_SetConfig+0x6a0>)
 8107372:	4293      	cmp	r3, r2
 8107374:	d130      	bne.n	81073d8 <UART_SetConfig+0x4c4>
 8107376:	4b8e      	ldr	r3, [pc, #568]	; (81075b0 <UART_SetConfig+0x69c>)
 8107378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810737a:	f003 0307 	and.w	r3, r3, #7
 810737e:	2b05      	cmp	r3, #5
 8107380:	d826      	bhi.n	81073d0 <UART_SetConfig+0x4bc>
 8107382:	a201      	add	r2, pc, #4	; (adr r2, 8107388 <UART_SetConfig+0x474>)
 8107384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107388:	081073a1 	.word	0x081073a1
 810738c:	081073a9 	.word	0x081073a9
 8107390:	081073b1 	.word	0x081073b1
 8107394:	081073b9 	.word	0x081073b9
 8107398:	081073c1 	.word	0x081073c1
 810739c:	081073c9 	.word	0x081073c9
 81073a0:	2300      	movs	r3, #0
 81073a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81073a6:	e086      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81073a8:	2304      	movs	r3, #4
 81073aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81073ae:	e082      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81073b0:	2308      	movs	r3, #8
 81073b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81073b6:	e07e      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81073b8:	2310      	movs	r3, #16
 81073ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81073be:	e07a      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81073c0:	2320      	movs	r3, #32
 81073c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81073c6:	e076      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81073c8:	2340      	movs	r3, #64	; 0x40
 81073ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81073ce:	e072      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81073d0:	2380      	movs	r3, #128	; 0x80
 81073d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81073d6:	e06e      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81073d8:	687b      	ldr	r3, [r7, #4]
 81073da:	681b      	ldr	r3, [r3, #0]
 81073dc:	4a76      	ldr	r2, [pc, #472]	; (81075b8 <UART_SetConfig+0x6a4>)
 81073de:	4293      	cmp	r3, r2
 81073e0:	d130      	bne.n	8107444 <UART_SetConfig+0x530>
 81073e2:	4b73      	ldr	r3, [pc, #460]	; (81075b0 <UART_SetConfig+0x69c>)
 81073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81073e6:	f003 0307 	and.w	r3, r3, #7
 81073ea:	2b05      	cmp	r3, #5
 81073ec:	d826      	bhi.n	810743c <UART_SetConfig+0x528>
 81073ee:	a201      	add	r2, pc, #4	; (adr r2, 81073f4 <UART_SetConfig+0x4e0>)
 81073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81073f4:	0810740d 	.word	0x0810740d
 81073f8:	08107415 	.word	0x08107415
 81073fc:	0810741d 	.word	0x0810741d
 8107400:	08107425 	.word	0x08107425
 8107404:	0810742d 	.word	0x0810742d
 8107408:	08107435 	.word	0x08107435
 810740c:	2300      	movs	r3, #0
 810740e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107412:	e050      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107414:	2304      	movs	r3, #4
 8107416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810741a:	e04c      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810741c:	2308      	movs	r3, #8
 810741e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107422:	e048      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107424:	2310      	movs	r3, #16
 8107426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810742a:	e044      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810742c:	2320      	movs	r3, #32
 810742e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107432:	e040      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107434:	2340      	movs	r3, #64	; 0x40
 8107436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810743a:	e03c      	b.n	81074b6 <UART_SetConfig+0x5a2>
 810743c:	2380      	movs	r3, #128	; 0x80
 810743e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107442:	e038      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107444:	687b      	ldr	r3, [r7, #4]
 8107446:	681b      	ldr	r3, [r3, #0]
 8107448:	4a5c      	ldr	r2, [pc, #368]	; (81075bc <UART_SetConfig+0x6a8>)
 810744a:	4293      	cmp	r3, r2
 810744c:	d130      	bne.n	81074b0 <UART_SetConfig+0x59c>
 810744e:	4b58      	ldr	r3, [pc, #352]	; (81075b0 <UART_SetConfig+0x69c>)
 8107450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107452:	f003 0307 	and.w	r3, r3, #7
 8107456:	2b05      	cmp	r3, #5
 8107458:	d826      	bhi.n	81074a8 <UART_SetConfig+0x594>
 810745a:	a201      	add	r2, pc, #4	; (adr r2, 8107460 <UART_SetConfig+0x54c>)
 810745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107460:	08107479 	.word	0x08107479
 8107464:	08107481 	.word	0x08107481
 8107468:	08107489 	.word	0x08107489
 810746c:	08107491 	.word	0x08107491
 8107470:	08107499 	.word	0x08107499
 8107474:	081074a1 	.word	0x081074a1
 8107478:	2302      	movs	r3, #2
 810747a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810747e:	e01a      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107480:	2304      	movs	r3, #4
 8107482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107486:	e016      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107488:	2308      	movs	r3, #8
 810748a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810748e:	e012      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107490:	2310      	movs	r3, #16
 8107492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107496:	e00e      	b.n	81074b6 <UART_SetConfig+0x5a2>
 8107498:	2320      	movs	r3, #32
 810749a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810749e:	e00a      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81074a0:	2340      	movs	r3, #64	; 0x40
 81074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074a6:	e006      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81074a8:	2380      	movs	r3, #128	; 0x80
 81074aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074ae:	e002      	b.n	81074b6 <UART_SetConfig+0x5a2>
 81074b0:	2380      	movs	r3, #128	; 0x80
 81074b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81074b6:	687b      	ldr	r3, [r7, #4]
 81074b8:	681b      	ldr	r3, [r3, #0]
 81074ba:	4a40      	ldr	r2, [pc, #256]	; (81075bc <UART_SetConfig+0x6a8>)
 81074bc:	4293      	cmp	r3, r2
 81074be:	f040 80ef 	bne.w	81076a0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81074c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81074c6:	2b20      	cmp	r3, #32
 81074c8:	dc46      	bgt.n	8107558 <UART_SetConfig+0x644>
 81074ca:	2b02      	cmp	r3, #2
 81074cc:	f2c0 8081 	blt.w	81075d2 <UART_SetConfig+0x6be>
 81074d0:	3b02      	subs	r3, #2
 81074d2:	2b1e      	cmp	r3, #30
 81074d4:	d87d      	bhi.n	81075d2 <UART_SetConfig+0x6be>
 81074d6:	a201      	add	r2, pc, #4	; (adr r2, 81074dc <UART_SetConfig+0x5c8>)
 81074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074dc:	0810755f 	.word	0x0810755f
 81074e0:	081075d3 	.word	0x081075d3
 81074e4:	08107567 	.word	0x08107567
 81074e8:	081075d3 	.word	0x081075d3
 81074ec:	081075d3 	.word	0x081075d3
 81074f0:	081075d3 	.word	0x081075d3
 81074f4:	08107577 	.word	0x08107577
 81074f8:	081075d3 	.word	0x081075d3
 81074fc:	081075d3 	.word	0x081075d3
 8107500:	081075d3 	.word	0x081075d3
 8107504:	081075d3 	.word	0x081075d3
 8107508:	081075d3 	.word	0x081075d3
 810750c:	081075d3 	.word	0x081075d3
 8107510:	081075d3 	.word	0x081075d3
 8107514:	08107587 	.word	0x08107587
 8107518:	081075d3 	.word	0x081075d3
 810751c:	081075d3 	.word	0x081075d3
 8107520:	081075d3 	.word	0x081075d3
 8107524:	081075d3 	.word	0x081075d3
 8107528:	081075d3 	.word	0x081075d3
 810752c:	081075d3 	.word	0x081075d3
 8107530:	081075d3 	.word	0x081075d3
 8107534:	081075d3 	.word	0x081075d3
 8107538:	081075d3 	.word	0x081075d3
 810753c:	081075d3 	.word	0x081075d3
 8107540:	081075d3 	.word	0x081075d3
 8107544:	081075d3 	.word	0x081075d3
 8107548:	081075d3 	.word	0x081075d3
 810754c:	081075d3 	.word	0x081075d3
 8107550:	081075d3 	.word	0x081075d3
 8107554:	081075c5 	.word	0x081075c5
 8107558:	2b40      	cmp	r3, #64	; 0x40
 810755a:	d036      	beq.n	81075ca <UART_SetConfig+0x6b6>
 810755c:	e039      	b.n	81075d2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810755e:	f7fd fcdd 	bl	8104f1c <HAL_RCCEx_GetD3PCLK1Freq>
 8107562:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107564:	e03b      	b.n	81075de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107566:	f107 0314 	add.w	r3, r7, #20
 810756a:	4618      	mov	r0, r3
 810756c:	f7fd fcec 	bl	8104f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107570:	69bb      	ldr	r3, [r7, #24]
 8107572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107574:	e033      	b.n	81075de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107576:	f107 0308 	add.w	r3, r7, #8
 810757a:	4618      	mov	r0, r3
 810757c:	f7fd fe38 	bl	81051f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107580:	68fb      	ldr	r3, [r7, #12]
 8107582:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107584:	e02b      	b.n	81075de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107586:	4b0a      	ldr	r3, [pc, #40]	; (81075b0 <UART_SetConfig+0x69c>)
 8107588:	681b      	ldr	r3, [r3, #0]
 810758a:	f003 0320 	and.w	r3, r3, #32
 810758e:	2b00      	cmp	r3, #0
 8107590:	d009      	beq.n	81075a6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107592:	4b07      	ldr	r3, [pc, #28]	; (81075b0 <UART_SetConfig+0x69c>)
 8107594:	681b      	ldr	r3, [r3, #0]
 8107596:	08db      	lsrs	r3, r3, #3
 8107598:	f003 0303 	and.w	r3, r3, #3
 810759c:	4a08      	ldr	r2, [pc, #32]	; (81075c0 <UART_SetConfig+0x6ac>)
 810759e:	fa22 f303 	lsr.w	r3, r2, r3
 81075a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81075a4:	e01b      	b.n	81075de <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 81075a6:	4b06      	ldr	r3, [pc, #24]	; (81075c0 <UART_SetConfig+0x6ac>)
 81075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81075aa:	e018      	b.n	81075de <UART_SetConfig+0x6ca>
 81075ac:	40011400 	.word	0x40011400
 81075b0:	58024400 	.word	0x58024400
 81075b4:	40007800 	.word	0x40007800
 81075b8:	40007c00 	.word	0x40007c00
 81075bc:	58000c00 	.word	0x58000c00
 81075c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81075c4:	4bc4      	ldr	r3, [pc, #784]	; (81078d8 <UART_SetConfig+0x9c4>)
 81075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81075c8:	e009      	b.n	81075de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81075ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81075d0:	e005      	b.n	81075de <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 81075d2:	2300      	movs	r3, #0
 81075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81075d6:	2301      	movs	r3, #1
 81075d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81075dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81075e0:	2b00      	cmp	r3, #0
 81075e2:	f000 81da 	beq.w	810799a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81075e6:	687b      	ldr	r3, [r7, #4]
 81075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81075ea:	4abc      	ldr	r2, [pc, #752]	; (81078dc <UART_SetConfig+0x9c8>)
 81075ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81075f0:	461a      	mov	r2, r3
 81075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81075f4:	fbb3 f3f2 	udiv	r3, r3, r2
 81075f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81075fa:	687b      	ldr	r3, [r7, #4]
 81075fc:	685a      	ldr	r2, [r3, #4]
 81075fe:	4613      	mov	r3, r2
 8107600:	005b      	lsls	r3, r3, #1
 8107602:	4413      	add	r3, r2
 8107604:	6a3a      	ldr	r2, [r7, #32]
 8107606:	429a      	cmp	r2, r3
 8107608:	d305      	bcc.n	8107616 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810760a:	687b      	ldr	r3, [r7, #4]
 810760c:	685b      	ldr	r3, [r3, #4]
 810760e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107610:	6a3a      	ldr	r2, [r7, #32]
 8107612:	429a      	cmp	r2, r3
 8107614:	d903      	bls.n	810761e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8107616:	2301      	movs	r3, #1
 8107618:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810761c:	e1bd      	b.n	810799a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107620:	4618      	mov	r0, r3
 8107622:	f04f 0100 	mov.w	r1, #0
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810762a:	4aac      	ldr	r2, [pc, #688]	; (81078dc <UART_SetConfig+0x9c8>)
 810762c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107630:	b29a      	uxth	r2, r3
 8107632:	f04f 0300 	mov.w	r3, #0
 8107636:	f7f9 fb8f 	bl	8100d58 <__aeabi_uldivmod>
 810763a:	4602      	mov	r2, r0
 810763c:	460b      	mov	r3, r1
 810763e:	4610      	mov	r0, r2
 8107640:	4619      	mov	r1, r3
 8107642:	f04f 0200 	mov.w	r2, #0
 8107646:	f04f 0300 	mov.w	r3, #0
 810764a:	020b      	lsls	r3, r1, #8
 810764c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8107650:	0202      	lsls	r2, r0, #8
 8107652:	6879      	ldr	r1, [r7, #4]
 8107654:	6849      	ldr	r1, [r1, #4]
 8107656:	0849      	lsrs	r1, r1, #1
 8107658:	4608      	mov	r0, r1
 810765a:	f04f 0100 	mov.w	r1, #0
 810765e:	1814      	adds	r4, r2, r0
 8107660:	eb43 0501 	adc.w	r5, r3, r1
 8107664:	687b      	ldr	r3, [r7, #4]
 8107666:	685b      	ldr	r3, [r3, #4]
 8107668:	461a      	mov	r2, r3
 810766a:	f04f 0300 	mov.w	r3, #0
 810766e:	4620      	mov	r0, r4
 8107670:	4629      	mov	r1, r5
 8107672:	f7f9 fb71 	bl	8100d58 <__aeabi_uldivmod>
 8107676:	4602      	mov	r2, r0
 8107678:	460b      	mov	r3, r1
 810767a:	4613      	mov	r3, r2
 810767c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107684:	d308      	bcc.n	8107698 <UART_SetConfig+0x784>
 8107686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810768c:	d204      	bcs.n	8107698 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	681b      	ldr	r3, [r3, #0]
 8107692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107694:	60da      	str	r2, [r3, #12]
 8107696:	e180      	b.n	810799a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8107698:	2301      	movs	r3, #1
 810769a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810769e:	e17c      	b.n	810799a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81076a0:	687b      	ldr	r3, [r7, #4]
 81076a2:	69db      	ldr	r3, [r3, #28]
 81076a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81076a8:	f040 80be 	bne.w	8107828 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 81076ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81076b0:	2b20      	cmp	r3, #32
 81076b2:	dc49      	bgt.n	8107748 <UART_SetConfig+0x834>
 81076b4:	2b00      	cmp	r3, #0
 81076b6:	db7c      	blt.n	81077b2 <UART_SetConfig+0x89e>
 81076b8:	2b20      	cmp	r3, #32
 81076ba:	d87a      	bhi.n	81077b2 <UART_SetConfig+0x89e>
 81076bc:	a201      	add	r2, pc, #4	; (adr r2, 81076c4 <UART_SetConfig+0x7b0>)
 81076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076c2:	bf00      	nop
 81076c4:	0810774f 	.word	0x0810774f
 81076c8:	08107757 	.word	0x08107757
 81076cc:	081077b3 	.word	0x081077b3
 81076d0:	081077b3 	.word	0x081077b3
 81076d4:	0810775f 	.word	0x0810775f
 81076d8:	081077b3 	.word	0x081077b3
 81076dc:	081077b3 	.word	0x081077b3
 81076e0:	081077b3 	.word	0x081077b3
 81076e4:	0810776f 	.word	0x0810776f
 81076e8:	081077b3 	.word	0x081077b3
 81076ec:	081077b3 	.word	0x081077b3
 81076f0:	081077b3 	.word	0x081077b3
 81076f4:	081077b3 	.word	0x081077b3
 81076f8:	081077b3 	.word	0x081077b3
 81076fc:	081077b3 	.word	0x081077b3
 8107700:	081077b3 	.word	0x081077b3
 8107704:	0810777f 	.word	0x0810777f
 8107708:	081077b3 	.word	0x081077b3
 810770c:	081077b3 	.word	0x081077b3
 8107710:	081077b3 	.word	0x081077b3
 8107714:	081077b3 	.word	0x081077b3
 8107718:	081077b3 	.word	0x081077b3
 810771c:	081077b3 	.word	0x081077b3
 8107720:	081077b3 	.word	0x081077b3
 8107724:	081077b3 	.word	0x081077b3
 8107728:	081077b3 	.word	0x081077b3
 810772c:	081077b3 	.word	0x081077b3
 8107730:	081077b3 	.word	0x081077b3
 8107734:	081077b3 	.word	0x081077b3
 8107738:	081077b3 	.word	0x081077b3
 810773c:	081077b3 	.word	0x081077b3
 8107740:	081077b3 	.word	0x081077b3
 8107744:	081077a5 	.word	0x081077a5
 8107748:	2b40      	cmp	r3, #64	; 0x40
 810774a:	d02e      	beq.n	81077aa <UART_SetConfig+0x896>
 810774c:	e031      	b.n	81077b2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810774e:	f7fc fc37 	bl	8103fc0 <HAL_RCC_GetPCLK1Freq>
 8107752:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107754:	e033      	b.n	81077be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107756:	f7fc fc49 	bl	8103fec <HAL_RCC_GetPCLK2Freq>
 810775a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810775c:	e02f      	b.n	81077be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810775e:	f107 0314 	add.w	r3, r7, #20
 8107762:	4618      	mov	r0, r3
 8107764:	f7fd fbf0 	bl	8104f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107768:	69bb      	ldr	r3, [r7, #24]
 810776a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810776c:	e027      	b.n	81077be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810776e:	f107 0308 	add.w	r3, r7, #8
 8107772:	4618      	mov	r0, r3
 8107774:	f7fd fd3c 	bl	81051f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107778:	68fb      	ldr	r3, [r7, #12]
 810777a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810777c:	e01f      	b.n	81077be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810777e:	4b58      	ldr	r3, [pc, #352]	; (81078e0 <UART_SetConfig+0x9cc>)
 8107780:	681b      	ldr	r3, [r3, #0]
 8107782:	f003 0320 	and.w	r3, r3, #32
 8107786:	2b00      	cmp	r3, #0
 8107788:	d009      	beq.n	810779e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810778a:	4b55      	ldr	r3, [pc, #340]	; (81078e0 <UART_SetConfig+0x9cc>)
 810778c:	681b      	ldr	r3, [r3, #0]
 810778e:	08db      	lsrs	r3, r3, #3
 8107790:	f003 0303 	and.w	r3, r3, #3
 8107794:	4a53      	ldr	r2, [pc, #332]	; (81078e4 <UART_SetConfig+0x9d0>)
 8107796:	fa22 f303 	lsr.w	r3, r2, r3
 810779a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810779c:	e00f      	b.n	81077be <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810779e:	4b51      	ldr	r3, [pc, #324]	; (81078e4 <UART_SetConfig+0x9d0>)
 81077a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81077a2:	e00c      	b.n	81077be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81077a4:	4b4c      	ldr	r3, [pc, #304]	; (81078d8 <UART_SetConfig+0x9c4>)
 81077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81077a8:	e009      	b.n	81077be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81077aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81077b0:	e005      	b.n	81077be <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 81077b2:	2300      	movs	r3, #0
 81077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81077b6:	2301      	movs	r3, #1
 81077b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81077bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81077c0:	2b00      	cmp	r3, #0
 81077c2:	f000 80ea 	beq.w	810799a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81077ca:	4a44      	ldr	r2, [pc, #272]	; (81078dc <UART_SetConfig+0x9c8>)
 81077cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81077d0:	461a      	mov	r2, r3
 81077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81077d4:	fbb3 f3f2 	udiv	r3, r3, r2
 81077d8:	005a      	lsls	r2, r3, #1
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	685b      	ldr	r3, [r3, #4]
 81077de:	085b      	lsrs	r3, r3, #1
 81077e0:	441a      	add	r2, r3
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	685b      	ldr	r3, [r3, #4]
 81077e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81077ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81077ee:	2b0f      	cmp	r3, #15
 81077f0:	d916      	bls.n	8107820 <UART_SetConfig+0x90c>
 81077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81077f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81077f8:	d212      	bcs.n	8107820 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81077fc:	b29b      	uxth	r3, r3
 81077fe:	f023 030f 	bic.w	r3, r3, #15
 8107802:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107806:	085b      	lsrs	r3, r3, #1
 8107808:	b29b      	uxth	r3, r3
 810780a:	f003 0307 	and.w	r3, r3, #7
 810780e:	b29a      	uxth	r2, r3
 8107810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8107812:	4313      	orrs	r3, r2
 8107814:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	681b      	ldr	r3, [r3, #0]
 810781a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810781c:	60da      	str	r2, [r3, #12]
 810781e:	e0bc      	b.n	810799a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8107820:	2301      	movs	r3, #1
 8107822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107826:	e0b8      	b.n	810799a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8107828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810782c:	2b20      	cmp	r3, #32
 810782e:	dc4b      	bgt.n	81078c8 <UART_SetConfig+0x9b4>
 8107830:	2b00      	cmp	r3, #0
 8107832:	f2c0 8087 	blt.w	8107944 <UART_SetConfig+0xa30>
 8107836:	2b20      	cmp	r3, #32
 8107838:	f200 8084 	bhi.w	8107944 <UART_SetConfig+0xa30>
 810783c:	a201      	add	r2, pc, #4	; (adr r2, 8107844 <UART_SetConfig+0x930>)
 810783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107842:	bf00      	nop
 8107844:	081078cf 	.word	0x081078cf
 8107848:	081078e9 	.word	0x081078e9
 810784c:	08107945 	.word	0x08107945
 8107850:	08107945 	.word	0x08107945
 8107854:	081078f1 	.word	0x081078f1
 8107858:	08107945 	.word	0x08107945
 810785c:	08107945 	.word	0x08107945
 8107860:	08107945 	.word	0x08107945
 8107864:	08107901 	.word	0x08107901
 8107868:	08107945 	.word	0x08107945
 810786c:	08107945 	.word	0x08107945
 8107870:	08107945 	.word	0x08107945
 8107874:	08107945 	.word	0x08107945
 8107878:	08107945 	.word	0x08107945
 810787c:	08107945 	.word	0x08107945
 8107880:	08107945 	.word	0x08107945
 8107884:	08107911 	.word	0x08107911
 8107888:	08107945 	.word	0x08107945
 810788c:	08107945 	.word	0x08107945
 8107890:	08107945 	.word	0x08107945
 8107894:	08107945 	.word	0x08107945
 8107898:	08107945 	.word	0x08107945
 810789c:	08107945 	.word	0x08107945
 81078a0:	08107945 	.word	0x08107945
 81078a4:	08107945 	.word	0x08107945
 81078a8:	08107945 	.word	0x08107945
 81078ac:	08107945 	.word	0x08107945
 81078b0:	08107945 	.word	0x08107945
 81078b4:	08107945 	.word	0x08107945
 81078b8:	08107945 	.word	0x08107945
 81078bc:	08107945 	.word	0x08107945
 81078c0:	08107945 	.word	0x08107945
 81078c4:	08107937 	.word	0x08107937
 81078c8:	2b40      	cmp	r3, #64	; 0x40
 81078ca:	d037      	beq.n	810793c <UART_SetConfig+0xa28>
 81078cc:	e03a      	b.n	8107944 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81078ce:	f7fc fb77 	bl	8103fc0 <HAL_RCC_GetPCLK1Freq>
 81078d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81078d4:	e03c      	b.n	8107950 <UART_SetConfig+0xa3c>
 81078d6:	bf00      	nop
 81078d8:	003d0900 	.word	0x003d0900
 81078dc:	08116a64 	.word	0x08116a64
 81078e0:	58024400 	.word	0x58024400
 81078e4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81078e8:	f7fc fb80 	bl	8103fec <HAL_RCC_GetPCLK2Freq>
 81078ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81078ee:	e02f      	b.n	8107950 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81078f0:	f107 0314 	add.w	r3, r7, #20
 81078f4:	4618      	mov	r0, r3
 81078f6:	f7fd fb27 	bl	8104f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81078fa:	69bb      	ldr	r3, [r7, #24]
 81078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81078fe:	e027      	b.n	8107950 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107900:	f107 0308 	add.w	r3, r7, #8
 8107904:	4618      	mov	r0, r3
 8107906:	f7fd fc73 	bl	81051f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810790a:	68fb      	ldr	r3, [r7, #12]
 810790c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810790e:	e01f      	b.n	8107950 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107910:	4b2c      	ldr	r3, [pc, #176]	; (81079c4 <UART_SetConfig+0xab0>)
 8107912:	681b      	ldr	r3, [r3, #0]
 8107914:	f003 0320 	and.w	r3, r3, #32
 8107918:	2b00      	cmp	r3, #0
 810791a:	d009      	beq.n	8107930 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810791c:	4b29      	ldr	r3, [pc, #164]	; (81079c4 <UART_SetConfig+0xab0>)
 810791e:	681b      	ldr	r3, [r3, #0]
 8107920:	08db      	lsrs	r3, r3, #3
 8107922:	f003 0303 	and.w	r3, r3, #3
 8107926:	4a28      	ldr	r2, [pc, #160]	; (81079c8 <UART_SetConfig+0xab4>)
 8107928:	fa22 f303 	lsr.w	r3, r2, r3
 810792c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810792e:	e00f      	b.n	8107950 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8107930:	4b25      	ldr	r3, [pc, #148]	; (81079c8 <UART_SetConfig+0xab4>)
 8107932:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107934:	e00c      	b.n	8107950 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107936:	4b25      	ldr	r3, [pc, #148]	; (81079cc <UART_SetConfig+0xab8>)
 8107938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810793a:	e009      	b.n	8107950 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810793c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107942:	e005      	b.n	8107950 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8107944:	2300      	movs	r3, #0
 8107946:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107948:	2301      	movs	r3, #1
 810794a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810794e:	bf00      	nop
    }

    if (pclk != 0U)
 8107950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107952:	2b00      	cmp	r3, #0
 8107954:	d021      	beq.n	810799a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810795a:	4a1d      	ldr	r2, [pc, #116]	; (81079d0 <UART_SetConfig+0xabc>)
 810795c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107960:	461a      	mov	r2, r3
 8107962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107964:	fbb3 f2f2 	udiv	r2, r3, r2
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	685b      	ldr	r3, [r3, #4]
 810796c:	085b      	lsrs	r3, r3, #1
 810796e:	441a      	add	r2, r3
 8107970:	687b      	ldr	r3, [r7, #4]
 8107972:	685b      	ldr	r3, [r3, #4]
 8107974:	fbb2 f3f3 	udiv	r3, r2, r3
 8107978:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810797c:	2b0f      	cmp	r3, #15
 810797e:	d909      	bls.n	8107994 <UART_SetConfig+0xa80>
 8107980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107986:	d205      	bcs.n	8107994 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810798a:	b29a      	uxth	r2, r3
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	60da      	str	r2, [r3, #12]
 8107992:	e002      	b.n	810799a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8107994:	2301      	movs	r3, #1
 8107996:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810799a:	687b      	ldr	r3, [r7, #4]
 810799c:	2201      	movs	r2, #1
 810799e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	2201      	movs	r2, #1
 81079a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	2200      	movs	r2, #0
 81079ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	2200      	movs	r2, #0
 81079b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81079b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81079ba:	4618      	mov	r0, r3
 81079bc:	3738      	adds	r7, #56	; 0x38
 81079be:	46bd      	mov	sp, r7
 81079c0:	bdb0      	pop	{r4, r5, r7, pc}
 81079c2:	bf00      	nop
 81079c4:	58024400 	.word	0x58024400
 81079c8:	03d09000 	.word	0x03d09000
 81079cc:	003d0900 	.word	0x003d0900
 81079d0:	08116a64 	.word	0x08116a64

081079d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81079d4:	b480      	push	{r7}
 81079d6:	b083      	sub	sp, #12
 81079d8:	af00      	add	r7, sp, #0
 81079da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079e0:	f003 0301 	and.w	r3, r3, #1
 81079e4:	2b00      	cmp	r3, #0
 81079e6:	d00a      	beq.n	81079fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	681b      	ldr	r3, [r3, #0]
 81079ec:	685b      	ldr	r3, [r3, #4]
 81079ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	430a      	orrs	r2, r1
 81079fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a02:	f003 0302 	and.w	r3, r3, #2
 8107a06:	2b00      	cmp	r3, #0
 8107a08:	d00a      	beq.n	8107a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107a0a:	687b      	ldr	r3, [r7, #4]
 8107a0c:	681b      	ldr	r3, [r3, #0]
 8107a0e:	685b      	ldr	r3, [r3, #4]
 8107a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	681b      	ldr	r3, [r3, #0]
 8107a1c:	430a      	orrs	r2, r1
 8107a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a24:	f003 0304 	and.w	r3, r3, #4
 8107a28:	2b00      	cmp	r3, #0
 8107a2a:	d00a      	beq.n	8107a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	685b      	ldr	r3, [r3, #4]
 8107a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107a3a:	687b      	ldr	r3, [r7, #4]
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	430a      	orrs	r2, r1
 8107a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107a42:	687b      	ldr	r3, [r7, #4]
 8107a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a46:	f003 0308 	and.w	r3, r3, #8
 8107a4a:	2b00      	cmp	r3, #0
 8107a4c:	d00a      	beq.n	8107a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107a4e:	687b      	ldr	r3, [r7, #4]
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	685b      	ldr	r3, [r3, #4]
 8107a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107a5c:	687b      	ldr	r3, [r7, #4]
 8107a5e:	681b      	ldr	r3, [r3, #0]
 8107a60:	430a      	orrs	r2, r1
 8107a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a68:	f003 0310 	and.w	r3, r3, #16
 8107a6c:	2b00      	cmp	r3, #0
 8107a6e:	d00a      	beq.n	8107a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	689b      	ldr	r3, [r3, #8]
 8107a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107a7a:	687b      	ldr	r3, [r7, #4]
 8107a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107a7e:	687b      	ldr	r3, [r7, #4]
 8107a80:	681b      	ldr	r3, [r3, #0]
 8107a82:	430a      	orrs	r2, r1
 8107a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a8a:	f003 0320 	and.w	r3, r3, #32
 8107a8e:	2b00      	cmp	r3, #0
 8107a90:	d00a      	beq.n	8107aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	681b      	ldr	r3, [r3, #0]
 8107a96:	689b      	ldr	r3, [r3, #8]
 8107a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107a9c:	687b      	ldr	r3, [r7, #4]
 8107a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	681b      	ldr	r3, [r3, #0]
 8107aa4:	430a      	orrs	r2, r1
 8107aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107ab0:	2b00      	cmp	r3, #0
 8107ab2:	d01a      	beq.n	8107aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	681b      	ldr	r3, [r3, #0]
 8107ab8:	685b      	ldr	r3, [r3, #4]
 8107aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107abe:	687b      	ldr	r3, [r7, #4]
 8107ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	681b      	ldr	r3, [r3, #0]
 8107ac6:	430a      	orrs	r2, r1
 8107ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107ad2:	d10a      	bne.n	8107aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107ad4:	687b      	ldr	r3, [r7, #4]
 8107ad6:	681b      	ldr	r3, [r3, #0]
 8107ad8:	685b      	ldr	r3, [r3, #4]
 8107ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107ade:	687b      	ldr	r3, [r7, #4]
 8107ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	430a      	orrs	r2, r1
 8107ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107af2:	2b00      	cmp	r3, #0
 8107af4:	d00a      	beq.n	8107b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	681b      	ldr	r3, [r3, #0]
 8107afa:	685b      	ldr	r3, [r3, #4]
 8107afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	681b      	ldr	r3, [r3, #0]
 8107b08:	430a      	orrs	r2, r1
 8107b0a:	605a      	str	r2, [r3, #4]
  }
}
 8107b0c:	bf00      	nop
 8107b0e:	370c      	adds	r7, #12
 8107b10:	46bd      	mov	sp, r7
 8107b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b16:	4770      	bx	lr

08107b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107b18:	b580      	push	{r7, lr}
 8107b1a:	b086      	sub	sp, #24
 8107b1c:	af02      	add	r7, sp, #8
 8107b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107b20:	687b      	ldr	r3, [r7, #4]
 8107b22:	2200      	movs	r2, #0
 8107b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107b28:	f7f9 fc82 	bl	8101430 <HAL_GetTick>
 8107b2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	681b      	ldr	r3, [r3, #0]
 8107b32:	681b      	ldr	r3, [r3, #0]
 8107b34:	f003 0308 	and.w	r3, r3, #8
 8107b38:	2b08      	cmp	r3, #8
 8107b3a:	d10e      	bne.n	8107b5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107b40:	9300      	str	r3, [sp, #0]
 8107b42:	68fb      	ldr	r3, [r7, #12]
 8107b44:	2200      	movs	r2, #0
 8107b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107b4a:	6878      	ldr	r0, [r7, #4]
 8107b4c:	f000 f82f 	bl	8107bae <UART_WaitOnFlagUntilTimeout>
 8107b50:	4603      	mov	r3, r0
 8107b52:	2b00      	cmp	r3, #0
 8107b54:	d001      	beq.n	8107b5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107b56:	2303      	movs	r3, #3
 8107b58:	e025      	b.n	8107ba6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107b5a:	687b      	ldr	r3, [r7, #4]
 8107b5c:	681b      	ldr	r3, [r3, #0]
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	f003 0304 	and.w	r3, r3, #4
 8107b64:	2b04      	cmp	r3, #4
 8107b66:	d10e      	bne.n	8107b86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107b6c:	9300      	str	r3, [sp, #0]
 8107b6e:	68fb      	ldr	r3, [r7, #12]
 8107b70:	2200      	movs	r2, #0
 8107b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107b76:	6878      	ldr	r0, [r7, #4]
 8107b78:	f000 f819 	bl	8107bae <UART_WaitOnFlagUntilTimeout>
 8107b7c:	4603      	mov	r3, r0
 8107b7e:	2b00      	cmp	r3, #0
 8107b80:	d001      	beq.n	8107b86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107b82:	2303      	movs	r3, #3
 8107b84:	e00f      	b.n	8107ba6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	2220      	movs	r2, #32
 8107b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	2220      	movs	r2, #32
 8107b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	2200      	movs	r2, #0
 8107b9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8107b9c:	687b      	ldr	r3, [r7, #4]
 8107b9e:	2200      	movs	r2, #0
 8107ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107ba4:	2300      	movs	r3, #0
}
 8107ba6:	4618      	mov	r0, r3
 8107ba8:	3710      	adds	r7, #16
 8107baa:	46bd      	mov	sp, r7
 8107bac:	bd80      	pop	{r7, pc}

08107bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107bae:	b580      	push	{r7, lr}
 8107bb0:	b09c      	sub	sp, #112	; 0x70
 8107bb2:	af00      	add	r7, sp, #0
 8107bb4:	60f8      	str	r0, [r7, #12]
 8107bb6:	60b9      	str	r1, [r7, #8]
 8107bb8:	603b      	str	r3, [r7, #0]
 8107bba:	4613      	mov	r3, r2
 8107bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107bbe:	e0a9      	b.n	8107d14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107bc6:	f000 80a5 	beq.w	8107d14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107bca:	f7f9 fc31 	bl	8101430 <HAL_GetTick>
 8107bce:	4602      	mov	r2, r0
 8107bd0:	683b      	ldr	r3, [r7, #0]
 8107bd2:	1ad3      	subs	r3, r2, r3
 8107bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8107bd6:	429a      	cmp	r2, r3
 8107bd8:	d302      	bcc.n	8107be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8107bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107bdc:	2b00      	cmp	r3, #0
 8107bde:	d140      	bne.n	8107c62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107be0:	68fb      	ldr	r3, [r7, #12]
 8107be2:	681b      	ldr	r3, [r3, #0]
 8107be4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107be8:	e853 3f00 	ldrex	r3, [r3]
 8107bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8107bf6:	68fb      	ldr	r3, [r7, #12]
 8107bf8:	681b      	ldr	r3, [r3, #0]
 8107bfa:	461a      	mov	r2, r3
 8107bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107c00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107c06:	e841 2300 	strex	r3, r2, [r1]
 8107c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107c0e:	2b00      	cmp	r3, #0
 8107c10:	d1e6      	bne.n	8107be0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107c12:	68fb      	ldr	r3, [r7, #12]
 8107c14:	681b      	ldr	r3, [r3, #0]
 8107c16:	3308      	adds	r3, #8
 8107c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107c1c:	e853 3f00 	ldrex	r3, [r3]
 8107c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c24:	f023 0301 	bic.w	r3, r3, #1
 8107c28:	663b      	str	r3, [r7, #96]	; 0x60
 8107c2a:	68fb      	ldr	r3, [r7, #12]
 8107c2c:	681b      	ldr	r3, [r3, #0]
 8107c2e:	3308      	adds	r3, #8
 8107c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8107c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8107c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107c3a:	e841 2300 	strex	r3, r2, [r1]
 8107c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107c42:	2b00      	cmp	r3, #0
 8107c44:	d1e5      	bne.n	8107c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8107c46:	68fb      	ldr	r3, [r7, #12]
 8107c48:	2220      	movs	r2, #32
 8107c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8107c4e:	68fb      	ldr	r3, [r7, #12]
 8107c50:	2220      	movs	r2, #32
 8107c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107c56:	68fb      	ldr	r3, [r7, #12]
 8107c58:	2200      	movs	r2, #0
 8107c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8107c5e:	2303      	movs	r3, #3
 8107c60:	e069      	b.n	8107d36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107c62:	68fb      	ldr	r3, [r7, #12]
 8107c64:	681b      	ldr	r3, [r3, #0]
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	f003 0304 	and.w	r3, r3, #4
 8107c6c:	2b00      	cmp	r3, #0
 8107c6e:	d051      	beq.n	8107d14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107c70:	68fb      	ldr	r3, [r7, #12]
 8107c72:	681b      	ldr	r3, [r3, #0]
 8107c74:	69db      	ldr	r3, [r3, #28]
 8107c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107c7e:	d149      	bne.n	8107d14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107c80:	68fb      	ldr	r3, [r7, #12]
 8107c82:	681b      	ldr	r3, [r3, #0]
 8107c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107c88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107c8a:	68fb      	ldr	r3, [r7, #12]
 8107c8c:	681b      	ldr	r3, [r3, #0]
 8107c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107c92:	e853 3f00 	ldrex	r3, [r3]
 8107c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107ca0:	68fb      	ldr	r3, [r7, #12]
 8107ca2:	681b      	ldr	r3, [r3, #0]
 8107ca4:	461a      	mov	r2, r3
 8107ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8107ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8107caa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107cb0:	e841 2300 	strex	r3, r2, [r1]
 8107cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107cb8:	2b00      	cmp	r3, #0
 8107cba:	d1e6      	bne.n	8107c8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107cbc:	68fb      	ldr	r3, [r7, #12]
 8107cbe:	681b      	ldr	r3, [r3, #0]
 8107cc0:	3308      	adds	r3, #8
 8107cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107cc4:	697b      	ldr	r3, [r7, #20]
 8107cc6:	e853 3f00 	ldrex	r3, [r3]
 8107cca:	613b      	str	r3, [r7, #16]
   return(result);
 8107ccc:	693b      	ldr	r3, [r7, #16]
 8107cce:	f023 0301 	bic.w	r3, r3, #1
 8107cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	3308      	adds	r3, #8
 8107cda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107cdc:	623a      	str	r2, [r7, #32]
 8107cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ce0:	69f9      	ldr	r1, [r7, #28]
 8107ce2:	6a3a      	ldr	r2, [r7, #32]
 8107ce4:	e841 2300 	strex	r3, r2, [r1]
 8107ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8107cea:	69bb      	ldr	r3, [r7, #24]
 8107cec:	2b00      	cmp	r3, #0
 8107cee:	d1e5      	bne.n	8107cbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107cf0:	68fb      	ldr	r3, [r7, #12]
 8107cf2:	2220      	movs	r2, #32
 8107cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8107cf8:	68fb      	ldr	r3, [r7, #12]
 8107cfa:	2220      	movs	r2, #32
 8107cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107d00:	68fb      	ldr	r3, [r7, #12]
 8107d02:	2220      	movs	r2, #32
 8107d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107d08:	68fb      	ldr	r3, [r7, #12]
 8107d0a:	2200      	movs	r2, #0
 8107d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107d10:	2303      	movs	r3, #3
 8107d12:	e010      	b.n	8107d36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107d14:	68fb      	ldr	r3, [r7, #12]
 8107d16:	681b      	ldr	r3, [r3, #0]
 8107d18:	69da      	ldr	r2, [r3, #28]
 8107d1a:	68bb      	ldr	r3, [r7, #8]
 8107d1c:	4013      	ands	r3, r2
 8107d1e:	68ba      	ldr	r2, [r7, #8]
 8107d20:	429a      	cmp	r2, r3
 8107d22:	bf0c      	ite	eq
 8107d24:	2301      	moveq	r3, #1
 8107d26:	2300      	movne	r3, #0
 8107d28:	b2db      	uxtb	r3, r3
 8107d2a:	461a      	mov	r2, r3
 8107d2c:	79fb      	ldrb	r3, [r7, #7]
 8107d2e:	429a      	cmp	r2, r3
 8107d30:	f43f af46 	beq.w	8107bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107d34:	2300      	movs	r3, #0
}
 8107d36:	4618      	mov	r0, r3
 8107d38:	3770      	adds	r7, #112	; 0x70
 8107d3a:	46bd      	mov	sp, r7
 8107d3c:	bd80      	pop	{r7, pc}

08107d3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8107d3e:	b480      	push	{r7}
 8107d40:	b085      	sub	sp, #20
 8107d42:	af00      	add	r7, sp, #0
 8107d44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107d4c:	2b01      	cmp	r3, #1
 8107d4e:	d101      	bne.n	8107d54 <HAL_UARTEx_DisableFifoMode+0x16>
 8107d50:	2302      	movs	r3, #2
 8107d52:	e027      	b.n	8107da4 <HAL_UARTEx_DisableFifoMode+0x66>
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	2201      	movs	r2, #1
 8107d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	2224      	movs	r2, #36	; 0x24
 8107d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107d64:	687b      	ldr	r3, [r7, #4]
 8107d66:	681b      	ldr	r3, [r3, #0]
 8107d68:	681b      	ldr	r3, [r3, #0]
 8107d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	681b      	ldr	r3, [r3, #0]
 8107d70:	681a      	ldr	r2, [r3, #0]
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	681b      	ldr	r3, [r3, #0]
 8107d76:	f022 0201 	bic.w	r2, r2, #1
 8107d7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107d7c:	68fb      	ldr	r3, [r7, #12]
 8107d7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8107d82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	2200      	movs	r2, #0
 8107d88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107d8a:	687b      	ldr	r3, [r7, #4]
 8107d8c:	681b      	ldr	r3, [r3, #0]
 8107d8e:	68fa      	ldr	r2, [r7, #12]
 8107d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	2220      	movs	r2, #32
 8107d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107d9a:	687b      	ldr	r3, [r7, #4]
 8107d9c:	2200      	movs	r2, #0
 8107d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107da2:	2300      	movs	r3, #0
}
 8107da4:	4618      	mov	r0, r3
 8107da6:	3714      	adds	r7, #20
 8107da8:	46bd      	mov	sp, r7
 8107daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dae:	4770      	bx	lr

08107db0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107db0:	b580      	push	{r7, lr}
 8107db2:	b084      	sub	sp, #16
 8107db4:	af00      	add	r7, sp, #0
 8107db6:	6078      	str	r0, [r7, #4]
 8107db8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107dc0:	2b01      	cmp	r3, #1
 8107dc2:	d101      	bne.n	8107dc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107dc4:	2302      	movs	r3, #2
 8107dc6:	e02d      	b.n	8107e24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8107dc8:	687b      	ldr	r3, [r7, #4]
 8107dca:	2201      	movs	r2, #1
 8107dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	2224      	movs	r2, #36	; 0x24
 8107dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	681b      	ldr	r3, [r3, #0]
 8107dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107de0:	687b      	ldr	r3, [r7, #4]
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	681a      	ldr	r2, [r3, #0]
 8107de6:	687b      	ldr	r3, [r7, #4]
 8107de8:	681b      	ldr	r3, [r3, #0]
 8107dea:	f022 0201 	bic.w	r2, r2, #1
 8107dee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107df0:	687b      	ldr	r3, [r7, #4]
 8107df2:	681b      	ldr	r3, [r3, #0]
 8107df4:	689b      	ldr	r3, [r3, #8]
 8107df6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8107dfa:	687b      	ldr	r3, [r7, #4]
 8107dfc:	681b      	ldr	r3, [r3, #0]
 8107dfe:	683a      	ldr	r2, [r7, #0]
 8107e00:	430a      	orrs	r2, r1
 8107e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107e04:	6878      	ldr	r0, [r7, #4]
 8107e06:	f000 f84f 	bl	8107ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107e0a:	687b      	ldr	r3, [r7, #4]
 8107e0c:	681b      	ldr	r3, [r3, #0]
 8107e0e:	68fa      	ldr	r2, [r7, #12]
 8107e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	2220      	movs	r2, #32
 8107e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	2200      	movs	r2, #0
 8107e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107e22:	2300      	movs	r3, #0
}
 8107e24:	4618      	mov	r0, r3
 8107e26:	3710      	adds	r7, #16
 8107e28:	46bd      	mov	sp, r7
 8107e2a:	bd80      	pop	{r7, pc}

08107e2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107e2c:	b580      	push	{r7, lr}
 8107e2e:	b084      	sub	sp, #16
 8107e30:	af00      	add	r7, sp, #0
 8107e32:	6078      	str	r0, [r7, #4]
 8107e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107e36:	687b      	ldr	r3, [r7, #4]
 8107e38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107e3c:	2b01      	cmp	r3, #1
 8107e3e:	d101      	bne.n	8107e44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8107e40:	2302      	movs	r3, #2
 8107e42:	e02d      	b.n	8107ea0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	2201      	movs	r2, #1
 8107e48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	2224      	movs	r2, #36	; 0x24
 8107e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	681b      	ldr	r3, [r3, #0]
 8107e58:	681b      	ldr	r3, [r3, #0]
 8107e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	681b      	ldr	r3, [r3, #0]
 8107e60:	681a      	ldr	r2, [r3, #0]
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	681b      	ldr	r3, [r3, #0]
 8107e66:	f022 0201 	bic.w	r2, r2, #1
 8107e6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	681b      	ldr	r3, [r3, #0]
 8107e70:	689b      	ldr	r3, [r3, #8]
 8107e72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	683a      	ldr	r2, [r7, #0]
 8107e7c:	430a      	orrs	r2, r1
 8107e7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107e80:	6878      	ldr	r0, [r7, #4]
 8107e82:	f000 f811 	bl	8107ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	68fa      	ldr	r2, [r7, #12]
 8107e8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107e8e:	687b      	ldr	r3, [r7, #4]
 8107e90:	2220      	movs	r2, #32
 8107e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107e96:	687b      	ldr	r3, [r7, #4]
 8107e98:	2200      	movs	r2, #0
 8107e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107e9e:	2300      	movs	r3, #0
}
 8107ea0:	4618      	mov	r0, r3
 8107ea2:	3710      	adds	r7, #16
 8107ea4:	46bd      	mov	sp, r7
 8107ea6:	bd80      	pop	{r7, pc}

08107ea8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8107ea8:	b480      	push	{r7}
 8107eaa:	b085      	sub	sp, #20
 8107eac:	af00      	add	r7, sp, #0
 8107eae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107eb4:	2b00      	cmp	r3, #0
 8107eb6:	d108      	bne.n	8107eca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	2201      	movs	r2, #1
 8107ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	2201      	movs	r2, #1
 8107ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8107ec8:	e031      	b.n	8107f2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8107eca:	2310      	movs	r3, #16
 8107ecc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8107ece:	2310      	movs	r3, #16
 8107ed0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107ed2:	687b      	ldr	r3, [r7, #4]
 8107ed4:	681b      	ldr	r3, [r3, #0]
 8107ed6:	689b      	ldr	r3, [r3, #8]
 8107ed8:	0e5b      	lsrs	r3, r3, #25
 8107eda:	b2db      	uxtb	r3, r3
 8107edc:	f003 0307 	and.w	r3, r3, #7
 8107ee0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	681b      	ldr	r3, [r3, #0]
 8107ee6:	689b      	ldr	r3, [r3, #8]
 8107ee8:	0f5b      	lsrs	r3, r3, #29
 8107eea:	b2db      	uxtb	r3, r3
 8107eec:	f003 0307 	and.w	r3, r3, #7
 8107ef0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107ef2:	7bbb      	ldrb	r3, [r7, #14]
 8107ef4:	7b3a      	ldrb	r2, [r7, #12]
 8107ef6:	4911      	ldr	r1, [pc, #68]	; (8107f3c <UARTEx_SetNbDataToProcess+0x94>)
 8107ef8:	5c8a      	ldrb	r2, [r1, r2]
 8107efa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8107efe:	7b3a      	ldrb	r2, [r7, #12]
 8107f00:	490f      	ldr	r1, [pc, #60]	; (8107f40 <UARTEx_SetNbDataToProcess+0x98>)
 8107f02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8107f08:	b29a      	uxth	r2, r3
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107f10:	7bfb      	ldrb	r3, [r7, #15]
 8107f12:	7b7a      	ldrb	r2, [r7, #13]
 8107f14:	4909      	ldr	r1, [pc, #36]	; (8107f3c <UARTEx_SetNbDataToProcess+0x94>)
 8107f16:	5c8a      	ldrb	r2, [r1, r2]
 8107f18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8107f1c:	7b7a      	ldrb	r2, [r7, #13]
 8107f1e:	4908      	ldr	r1, [pc, #32]	; (8107f40 <UARTEx_SetNbDataToProcess+0x98>)
 8107f20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107f22:	fb93 f3f2 	sdiv	r3, r3, r2
 8107f26:	b29a      	uxth	r2, r3
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8107f2e:	bf00      	nop
 8107f30:	3714      	adds	r7, #20
 8107f32:	46bd      	mov	sp, r7
 8107f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f38:	4770      	bx	lr
 8107f3a:	bf00      	nop
 8107f3c:	08116a7c 	.word	0x08116a7c
 8107f40:	08116a84 	.word	0x08116a84

08107f44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8107f44:	b480      	push	{r7}
 8107f46:	b085      	sub	sp, #20
 8107f48:	af00      	add	r7, sp, #0
 8107f4a:	4603      	mov	r3, r0
 8107f4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8107f4e:	2300      	movs	r3, #0
 8107f50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8107f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8107f56:	2b84      	cmp	r3, #132	; 0x84
 8107f58:	d005      	beq.n	8107f66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8107f5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8107f5e:	68fb      	ldr	r3, [r7, #12]
 8107f60:	4413      	add	r3, r2
 8107f62:	3303      	adds	r3, #3
 8107f64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8107f66:	68fb      	ldr	r3, [r7, #12]
}
 8107f68:	4618      	mov	r0, r3
 8107f6a:	3714      	adds	r7, #20
 8107f6c:	46bd      	mov	sp, r7
 8107f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f72:	4770      	bx	lr

08107f74 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8107f74:	b480      	push	{r7}
 8107f76:	b083      	sub	sp, #12
 8107f78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107f7a:	f3ef 8305 	mrs	r3, IPSR
 8107f7e:	607b      	str	r3, [r7, #4]
  return(result);
 8107f80:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8107f82:	2b00      	cmp	r3, #0
 8107f84:	bf14      	ite	ne
 8107f86:	2301      	movne	r3, #1
 8107f88:	2300      	moveq	r3, #0
 8107f8a:	b2db      	uxtb	r3, r3
}
 8107f8c:	4618      	mov	r0, r3
 8107f8e:	370c      	adds	r7, #12
 8107f90:	46bd      	mov	sp, r7
 8107f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f96:	4770      	bx	lr

08107f98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8107f98:	b580      	push	{r7, lr}
 8107f9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8107f9c:	f001 ffd0 	bl	8109f40 <vTaskStartScheduler>
  
  return osOK;
 8107fa0:	2300      	movs	r3, #0
}
 8107fa2:	4618      	mov	r0, r3
 8107fa4:	bd80      	pop	{r7, pc}

08107fa6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8107fa6:	b580      	push	{r7, lr}
 8107fa8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8107faa:	f7ff ffe3 	bl	8107f74 <inHandlerMode>
 8107fae:	4603      	mov	r3, r0
 8107fb0:	2b00      	cmp	r3, #0
 8107fb2:	d003      	beq.n	8107fbc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8107fb4:	f002 f8e8 	bl	810a188 <xTaskGetTickCountFromISR>
 8107fb8:	4603      	mov	r3, r0
 8107fba:	e002      	b.n	8107fc2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8107fbc:	f002 f8d4 	bl	810a168 <xTaskGetTickCount>
 8107fc0:	4603      	mov	r3, r0
  }
}
 8107fc2:	4618      	mov	r0, r3
 8107fc4:	bd80      	pop	{r7, pc}

08107fc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8107fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107fc8:	b089      	sub	sp, #36	; 0x24
 8107fca:	af04      	add	r7, sp, #16
 8107fcc:	6078      	str	r0, [r7, #4]
 8107fce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	695b      	ldr	r3, [r3, #20]
 8107fd4:	2b00      	cmp	r3, #0
 8107fd6:	d020      	beq.n	810801a <osThreadCreate+0x54>
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	699b      	ldr	r3, [r3, #24]
 8107fdc:	2b00      	cmp	r3, #0
 8107fde:	d01c      	beq.n	810801a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	685c      	ldr	r4, [r3, #4]
 8107fe4:	687b      	ldr	r3, [r7, #4]
 8107fe6:	681d      	ldr	r5, [r3, #0]
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	691e      	ldr	r6, [r3, #16]
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8107ff2:	4618      	mov	r0, r3
 8107ff4:	f7ff ffa6 	bl	8107f44 <makeFreeRtosPriority>
 8107ff8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8107ffa:	687b      	ldr	r3, [r7, #4]
 8107ffc:	695b      	ldr	r3, [r3, #20]
 8107ffe:	687a      	ldr	r2, [r7, #4]
 8108000:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108002:	9202      	str	r2, [sp, #8]
 8108004:	9301      	str	r3, [sp, #4]
 8108006:	9100      	str	r1, [sp, #0]
 8108008:	683b      	ldr	r3, [r7, #0]
 810800a:	4632      	mov	r2, r6
 810800c:	4629      	mov	r1, r5
 810800e:	4620      	mov	r0, r4
 8108010:	f001 fdb8 	bl	8109b84 <xTaskCreateStatic>
 8108014:	4603      	mov	r3, r0
 8108016:	60fb      	str	r3, [r7, #12]
 8108018:	e01c      	b.n	8108054 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	685c      	ldr	r4, [r3, #4]
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108026:	b29e      	uxth	r6, r3
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810802e:	4618      	mov	r0, r3
 8108030:	f7ff ff88 	bl	8107f44 <makeFreeRtosPriority>
 8108034:	4602      	mov	r2, r0
 8108036:	f107 030c 	add.w	r3, r7, #12
 810803a:	9301      	str	r3, [sp, #4]
 810803c:	9200      	str	r2, [sp, #0]
 810803e:	683b      	ldr	r3, [r7, #0]
 8108040:	4632      	mov	r2, r6
 8108042:	4629      	mov	r1, r5
 8108044:	4620      	mov	r0, r4
 8108046:	f001 fdfa 	bl	8109c3e <xTaskCreate>
 810804a:	4603      	mov	r3, r0
 810804c:	2b01      	cmp	r3, #1
 810804e:	d001      	beq.n	8108054 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8108050:	2300      	movs	r3, #0
 8108052:	e000      	b.n	8108056 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8108054:	68fb      	ldr	r3, [r7, #12]
}
 8108056:	4618      	mov	r0, r3
 8108058:	3714      	adds	r7, #20
 810805a:	46bd      	mov	sp, r7
 810805c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810805e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 810805e:	b580      	push	{r7, lr}
 8108060:	b084      	sub	sp, #16
 8108062:	af00      	add	r7, sp, #0
 8108064:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 810806a:	68fb      	ldr	r3, [r7, #12]
 810806c:	2b00      	cmp	r3, #0
 810806e:	d001      	beq.n	8108074 <osDelay+0x16>
 8108070:	68fb      	ldr	r3, [r7, #12]
 8108072:	e000      	b.n	8108076 <osDelay+0x18>
 8108074:	2301      	movs	r3, #1
 8108076:	4618      	mov	r0, r3
 8108078:	f001 ff2e 	bl	8109ed8 <vTaskDelay>
  
  return osOK;
 810807c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 810807e:	4618      	mov	r0, r3
 8108080:	3710      	adds	r7, #16
 8108082:	46bd      	mov	sp, r7
 8108084:	bd80      	pop	{r7, pc}

08108086 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8108086:	b580      	push	{r7, lr}
 8108088:	b082      	sub	sp, #8
 810808a:	af00      	add	r7, sp, #0
 810808c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	685b      	ldr	r3, [r3, #4]
 8108092:	2b00      	cmp	r3, #0
 8108094:	d007      	beq.n	81080a6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8108096:	687b      	ldr	r3, [r7, #4]
 8108098:	685b      	ldr	r3, [r3, #4]
 810809a:	4619      	mov	r1, r3
 810809c:	2001      	movs	r0, #1
 810809e:	f001 f836 	bl	810910e <xQueueCreateMutexStatic>
 81080a2:	4603      	mov	r3, r0
 81080a4:	e003      	b.n	81080ae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 81080a6:	2001      	movs	r0, #1
 81080a8:	f001 f819 	bl	81090de <xQueueCreateMutex>
 81080ac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 81080ae:	4618      	mov	r0, r3
 81080b0:	3708      	adds	r7, #8
 81080b2:	46bd      	mov	sp, r7
 81080b4:	bd80      	pop	{r7, pc}
	...

081080b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 81080b8:	b580      	push	{r7, lr}
 81080ba:	b084      	sub	sp, #16
 81080bc:	af00      	add	r7, sp, #0
 81080be:	6078      	str	r0, [r7, #4]
 81080c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 81080c2:	2300      	movs	r3, #0
 81080c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	2b00      	cmp	r3, #0
 81080ca:	d101      	bne.n	81080d0 <osMutexWait+0x18>
    return osErrorParameter;
 81080cc:	2380      	movs	r3, #128	; 0x80
 81080ce:	e03a      	b.n	8108146 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 81080d0:	2300      	movs	r3, #0
 81080d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 81080d4:	683b      	ldr	r3, [r7, #0]
 81080d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81080da:	d103      	bne.n	81080e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 81080dc:	f04f 33ff 	mov.w	r3, #4294967295
 81080e0:	60fb      	str	r3, [r7, #12]
 81080e2:	e009      	b.n	81080f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 81080e4:	683b      	ldr	r3, [r7, #0]
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d006      	beq.n	81080f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 81080ea:	683b      	ldr	r3, [r7, #0]
 81080ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 81080ee:	68fb      	ldr	r3, [r7, #12]
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d101      	bne.n	81080f8 <osMutexWait+0x40>
      ticks = 1;
 81080f4:	2301      	movs	r3, #1
 81080f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 81080f8:	f7ff ff3c 	bl	8107f74 <inHandlerMode>
 81080fc:	4603      	mov	r3, r0
 81080fe:	2b00      	cmp	r3, #0
 8108100:	d017      	beq.n	8108132 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8108102:	f107 0308 	add.w	r3, r7, #8
 8108106:	461a      	mov	r2, r3
 8108108:	2100      	movs	r1, #0
 810810a:	6878      	ldr	r0, [r7, #4]
 810810c:	f001 fb92 	bl	8109834 <xQueueReceiveFromISR>
 8108110:	4603      	mov	r3, r0
 8108112:	2b01      	cmp	r3, #1
 8108114:	d001      	beq.n	810811a <osMutexWait+0x62>
      return osErrorOS;
 8108116:	23ff      	movs	r3, #255	; 0xff
 8108118:	e015      	b.n	8108146 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 810811a:	68bb      	ldr	r3, [r7, #8]
 810811c:	2b00      	cmp	r3, #0
 810811e:	d011      	beq.n	8108144 <osMutexWait+0x8c>
 8108120:	4b0b      	ldr	r3, [pc, #44]	; (8108150 <osMutexWait+0x98>)
 8108122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108126:	601a      	str	r2, [r3, #0]
 8108128:	f3bf 8f4f 	dsb	sy
 810812c:	f3bf 8f6f 	isb	sy
 8108130:	e008      	b.n	8108144 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8108132:	68f9      	ldr	r1, [r7, #12]
 8108134:	6878      	ldr	r0, [r7, #4]
 8108136:	f001 fa71 	bl	810961c <xQueueSemaphoreTake>
 810813a:	4603      	mov	r3, r0
 810813c:	2b01      	cmp	r3, #1
 810813e:	d001      	beq.n	8108144 <osMutexWait+0x8c>
    return osErrorOS;
 8108140:	23ff      	movs	r3, #255	; 0xff
 8108142:	e000      	b.n	8108146 <osMutexWait+0x8e>
  }
  
  return osOK;
 8108144:	2300      	movs	r3, #0
}
 8108146:	4618      	mov	r0, r3
 8108148:	3710      	adds	r7, #16
 810814a:	46bd      	mov	sp, r7
 810814c:	bd80      	pop	{r7, pc}
 810814e:	bf00      	nop
 8108150:	e000ed04 	.word	0xe000ed04

08108154 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8108154:	b580      	push	{r7, lr}
 8108156:	b084      	sub	sp, #16
 8108158:	af00      	add	r7, sp, #0
 810815a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 810815c:	2300      	movs	r3, #0
 810815e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8108160:	2300      	movs	r3, #0
 8108162:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8108164:	f7ff ff06 	bl	8107f74 <inHandlerMode>
 8108168:	4603      	mov	r3, r0
 810816a:	2b00      	cmp	r3, #0
 810816c:	d016      	beq.n	810819c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 810816e:	f107 0308 	add.w	r3, r7, #8
 8108172:	4619      	mov	r1, r3
 8108174:	6878      	ldr	r0, [r7, #4]
 8108176:	f001 f8e3 	bl	8109340 <xQueueGiveFromISR>
 810817a:	4603      	mov	r3, r0
 810817c:	2b01      	cmp	r3, #1
 810817e:	d001      	beq.n	8108184 <osMutexRelease+0x30>
      return osErrorOS;
 8108180:	23ff      	movs	r3, #255	; 0xff
 8108182:	e017      	b.n	81081b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8108184:	68bb      	ldr	r3, [r7, #8]
 8108186:	2b00      	cmp	r3, #0
 8108188:	d013      	beq.n	81081b2 <osMutexRelease+0x5e>
 810818a:	4b0c      	ldr	r3, [pc, #48]	; (81081bc <osMutexRelease+0x68>)
 810818c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108190:	601a      	str	r2, [r3, #0]
 8108192:	f3bf 8f4f 	dsb	sy
 8108196:	f3bf 8f6f 	isb	sy
 810819a:	e00a      	b.n	81081b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 810819c:	2300      	movs	r3, #0
 810819e:	2200      	movs	r2, #0
 81081a0:	2100      	movs	r1, #0
 81081a2:	6878      	ldr	r0, [r7, #4]
 81081a4:	f000 ffce 	bl	8109144 <xQueueGenericSend>
 81081a8:	4603      	mov	r3, r0
 81081aa:	2b01      	cmp	r3, #1
 81081ac:	d001      	beq.n	81081b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 81081ae:	23ff      	movs	r3, #255	; 0xff
 81081b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 81081b2:	68fb      	ldr	r3, [r7, #12]
}
 81081b4:	4618      	mov	r0, r3
 81081b6:	3710      	adds	r7, #16
 81081b8:	46bd      	mov	sp, r7
 81081ba:	bd80      	pop	{r7, pc}
 81081bc:	e000ed04 	.word	0xe000ed04

081081c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 81081c0:	b580      	push	{r7, lr}
 81081c2:	b086      	sub	sp, #24
 81081c4:	af02      	add	r7, sp, #8
 81081c6:	6078      	str	r0, [r7, #4]
 81081c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	685b      	ldr	r3, [r3, #4]
 81081ce:	2b00      	cmp	r3, #0
 81081d0:	d00f      	beq.n	81081f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 81081d2:	683b      	ldr	r3, [r7, #0]
 81081d4:	2b01      	cmp	r3, #1
 81081d6:	d10a      	bne.n	81081ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	685b      	ldr	r3, [r3, #4]
 81081dc:	2203      	movs	r2, #3
 81081de:	9200      	str	r2, [sp, #0]
 81081e0:	2200      	movs	r2, #0
 81081e2:	2100      	movs	r1, #0
 81081e4:	2001      	movs	r0, #1
 81081e6:	f000 fe8f 	bl	8108f08 <xQueueGenericCreateStatic>
 81081ea:	4603      	mov	r3, r0
 81081ec:	e016      	b.n	810821c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 81081ee:	2300      	movs	r3, #0
 81081f0:	e014      	b.n	810821c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 81081f2:	683b      	ldr	r3, [r7, #0]
 81081f4:	2b01      	cmp	r3, #1
 81081f6:	d110      	bne.n	810821a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 81081f8:	2203      	movs	r2, #3
 81081fa:	2100      	movs	r1, #0
 81081fc:	2001      	movs	r0, #1
 81081fe:	f000 fefb 	bl	8108ff8 <xQueueGenericCreate>
 8108202:	60f8      	str	r0, [r7, #12]
 8108204:	68fb      	ldr	r3, [r7, #12]
 8108206:	2b00      	cmp	r3, #0
 8108208:	d005      	beq.n	8108216 <osSemaphoreCreate+0x56>
 810820a:	2300      	movs	r3, #0
 810820c:	2200      	movs	r2, #0
 810820e:	2100      	movs	r1, #0
 8108210:	68f8      	ldr	r0, [r7, #12]
 8108212:	f000 ff97 	bl	8109144 <xQueueGenericSend>
      return sema;
 8108216:	68fb      	ldr	r3, [r7, #12]
 8108218:	e000      	b.n	810821c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 810821a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 810821c:	4618      	mov	r0, r3
 810821e:	3710      	adds	r7, #16
 8108220:	46bd      	mov	sp, r7
 8108222:	bd80      	pop	{r7, pc}

08108224 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8108224:	b580      	push	{r7, lr}
 8108226:	b084      	sub	sp, #16
 8108228:	af00      	add	r7, sp, #0
 810822a:	6078      	str	r0, [r7, #4]
 810822c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 810822e:	2300      	movs	r3, #0
 8108230:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	2b00      	cmp	r3, #0
 8108236:	d101      	bne.n	810823c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8108238:	2380      	movs	r3, #128	; 0x80
 810823a:	e03a      	b.n	81082b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 810823c:	2300      	movs	r3, #0
 810823e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8108240:	683b      	ldr	r3, [r7, #0]
 8108242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108246:	d103      	bne.n	8108250 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8108248:	f04f 33ff 	mov.w	r3, #4294967295
 810824c:	60fb      	str	r3, [r7, #12]
 810824e:	e009      	b.n	8108264 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8108250:	683b      	ldr	r3, [r7, #0]
 8108252:	2b00      	cmp	r3, #0
 8108254:	d006      	beq.n	8108264 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8108256:	683b      	ldr	r3, [r7, #0]
 8108258:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 810825a:	68fb      	ldr	r3, [r7, #12]
 810825c:	2b00      	cmp	r3, #0
 810825e:	d101      	bne.n	8108264 <osSemaphoreWait+0x40>
      ticks = 1;
 8108260:	2301      	movs	r3, #1
 8108262:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8108264:	f7ff fe86 	bl	8107f74 <inHandlerMode>
 8108268:	4603      	mov	r3, r0
 810826a:	2b00      	cmp	r3, #0
 810826c:	d017      	beq.n	810829e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 810826e:	f107 0308 	add.w	r3, r7, #8
 8108272:	461a      	mov	r2, r3
 8108274:	2100      	movs	r1, #0
 8108276:	6878      	ldr	r0, [r7, #4]
 8108278:	f001 fadc 	bl	8109834 <xQueueReceiveFromISR>
 810827c:	4603      	mov	r3, r0
 810827e:	2b01      	cmp	r3, #1
 8108280:	d001      	beq.n	8108286 <osSemaphoreWait+0x62>
      return osErrorOS;
 8108282:	23ff      	movs	r3, #255	; 0xff
 8108284:	e015      	b.n	81082b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8108286:	68bb      	ldr	r3, [r7, #8]
 8108288:	2b00      	cmp	r3, #0
 810828a:	d011      	beq.n	81082b0 <osSemaphoreWait+0x8c>
 810828c:	4b0b      	ldr	r3, [pc, #44]	; (81082bc <osSemaphoreWait+0x98>)
 810828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108292:	601a      	str	r2, [r3, #0]
 8108294:	f3bf 8f4f 	dsb	sy
 8108298:	f3bf 8f6f 	isb	sy
 810829c:	e008      	b.n	81082b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 810829e:	68f9      	ldr	r1, [r7, #12]
 81082a0:	6878      	ldr	r0, [r7, #4]
 81082a2:	f001 f9bb 	bl	810961c <xQueueSemaphoreTake>
 81082a6:	4603      	mov	r3, r0
 81082a8:	2b01      	cmp	r3, #1
 81082aa:	d001      	beq.n	81082b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 81082ac:	23ff      	movs	r3, #255	; 0xff
 81082ae:	e000      	b.n	81082b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 81082b0:	2300      	movs	r3, #0
}
 81082b2:	4618      	mov	r0, r3
 81082b4:	3710      	adds	r7, #16
 81082b6:	46bd      	mov	sp, r7
 81082b8:	bd80      	pop	{r7, pc}
 81082ba:	bf00      	nop
 81082bc:	e000ed04 	.word	0xe000ed04

081082c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 81082c0:	b580      	push	{r7, lr}
 81082c2:	b084      	sub	sp, #16
 81082c4:	af00      	add	r7, sp, #0
 81082c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 81082c8:	2300      	movs	r3, #0
 81082ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 81082cc:	2300      	movs	r3, #0
 81082ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 81082d0:	f7ff fe50 	bl	8107f74 <inHandlerMode>
 81082d4:	4603      	mov	r3, r0
 81082d6:	2b00      	cmp	r3, #0
 81082d8:	d016      	beq.n	8108308 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 81082da:	f107 0308 	add.w	r3, r7, #8
 81082de:	4619      	mov	r1, r3
 81082e0:	6878      	ldr	r0, [r7, #4]
 81082e2:	f001 f82d 	bl	8109340 <xQueueGiveFromISR>
 81082e6:	4603      	mov	r3, r0
 81082e8:	2b01      	cmp	r3, #1
 81082ea:	d001      	beq.n	81082f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 81082ec:	23ff      	movs	r3, #255	; 0xff
 81082ee:	e017      	b.n	8108320 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 81082f0:	68bb      	ldr	r3, [r7, #8]
 81082f2:	2b00      	cmp	r3, #0
 81082f4:	d013      	beq.n	810831e <osSemaphoreRelease+0x5e>
 81082f6:	4b0c      	ldr	r3, [pc, #48]	; (8108328 <osSemaphoreRelease+0x68>)
 81082f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81082fc:	601a      	str	r2, [r3, #0]
 81082fe:	f3bf 8f4f 	dsb	sy
 8108302:	f3bf 8f6f 	isb	sy
 8108306:	e00a      	b.n	810831e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8108308:	2300      	movs	r3, #0
 810830a:	2200      	movs	r2, #0
 810830c:	2100      	movs	r1, #0
 810830e:	6878      	ldr	r0, [r7, #4]
 8108310:	f000 ff18 	bl	8109144 <xQueueGenericSend>
 8108314:	4603      	mov	r3, r0
 8108316:	2b01      	cmp	r3, #1
 8108318:	d001      	beq.n	810831e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 810831a:	23ff      	movs	r3, #255	; 0xff
 810831c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 810831e:	68fb      	ldr	r3, [r7, #12]
}
 8108320:	4618      	mov	r0, r3
 8108322:	3710      	adds	r7, #16
 8108324:	46bd      	mov	sp, r7
 8108326:	bd80      	pop	{r7, pc}
 8108328:	e000ed04 	.word	0xe000ed04

0810832c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 810832c:	b590      	push	{r4, r7, lr}
 810832e:	b085      	sub	sp, #20
 8108330:	af02      	add	r7, sp, #8
 8108332:	6078      	str	r0, [r7, #4]
 8108334:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	689b      	ldr	r3, [r3, #8]
 810833a:	2b00      	cmp	r3, #0
 810833c:	d011      	beq.n	8108362 <osMessageCreate+0x36>
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	68db      	ldr	r3, [r3, #12]
 8108342:	2b00      	cmp	r3, #0
 8108344:	d00d      	beq.n	8108362 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8108346:	687b      	ldr	r3, [r7, #4]
 8108348:	6818      	ldr	r0, [r3, #0]
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	6859      	ldr	r1, [r3, #4]
 810834e:	687b      	ldr	r3, [r7, #4]
 8108350:	689a      	ldr	r2, [r3, #8]
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	68db      	ldr	r3, [r3, #12]
 8108356:	2400      	movs	r4, #0
 8108358:	9400      	str	r4, [sp, #0]
 810835a:	f000 fdd5 	bl	8108f08 <xQueueGenericCreateStatic>
 810835e:	4603      	mov	r3, r0
 8108360:	e008      	b.n	8108374 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8108362:	687b      	ldr	r3, [r7, #4]
 8108364:	6818      	ldr	r0, [r3, #0]
 8108366:	687b      	ldr	r3, [r7, #4]
 8108368:	685b      	ldr	r3, [r3, #4]
 810836a:	2200      	movs	r2, #0
 810836c:	4619      	mov	r1, r3
 810836e:	f000 fe43 	bl	8108ff8 <xQueueGenericCreate>
 8108372:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8108374:	4618      	mov	r0, r3
 8108376:	370c      	adds	r7, #12
 8108378:	46bd      	mov	sp, r7
 810837a:	bd90      	pop	{r4, r7, pc}

0810837c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 810837c:	b590      	push	{r4, r7, lr}
 810837e:	b08b      	sub	sp, #44	; 0x2c
 8108380:	af00      	add	r7, sp, #0
 8108382:	60f8      	str	r0, [r7, #12]
 8108384:	60b9      	str	r1, [r7, #8]
 8108386:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8108388:	68bb      	ldr	r3, [r7, #8]
 810838a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 810838c:	2300      	movs	r3, #0
 810838e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8108390:	68bb      	ldr	r3, [r7, #8]
 8108392:	2b00      	cmp	r3, #0
 8108394:	d10a      	bne.n	81083ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8108396:	2380      	movs	r3, #128	; 0x80
 8108398:	617b      	str	r3, [r7, #20]
    return event;
 810839a:	68fb      	ldr	r3, [r7, #12]
 810839c:	461c      	mov	r4, r3
 810839e:	f107 0314 	add.w	r3, r7, #20
 81083a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81083a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81083aa:	e054      	b.n	8108456 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 81083ac:	2300      	movs	r3, #0
 81083ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 81083b0:	2300      	movs	r3, #0
 81083b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 81083b4:	687b      	ldr	r3, [r7, #4]
 81083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81083ba:	d103      	bne.n	81083c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 81083bc:	f04f 33ff 	mov.w	r3, #4294967295
 81083c0:	627b      	str	r3, [r7, #36]	; 0x24
 81083c2:	e009      	b.n	81083d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 81083c4:	687b      	ldr	r3, [r7, #4]
 81083c6:	2b00      	cmp	r3, #0
 81083c8:	d006      	beq.n	81083d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 81083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81083d0:	2b00      	cmp	r3, #0
 81083d2:	d101      	bne.n	81083d8 <osMessageGet+0x5c>
      ticks = 1;
 81083d4:	2301      	movs	r3, #1
 81083d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 81083d8:	f7ff fdcc 	bl	8107f74 <inHandlerMode>
 81083dc:	4603      	mov	r3, r0
 81083de:	2b00      	cmp	r3, #0
 81083e0:	d01c      	beq.n	810841c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 81083e2:	f107 0220 	add.w	r2, r7, #32
 81083e6:	f107 0314 	add.w	r3, r7, #20
 81083ea:	3304      	adds	r3, #4
 81083ec:	4619      	mov	r1, r3
 81083ee:	68b8      	ldr	r0, [r7, #8]
 81083f0:	f001 fa20 	bl	8109834 <xQueueReceiveFromISR>
 81083f4:	4603      	mov	r3, r0
 81083f6:	2b01      	cmp	r3, #1
 81083f8:	d102      	bne.n	8108400 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 81083fa:	2310      	movs	r3, #16
 81083fc:	617b      	str	r3, [r7, #20]
 81083fe:	e001      	b.n	8108404 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8108400:	2300      	movs	r3, #0
 8108402:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8108404:	6a3b      	ldr	r3, [r7, #32]
 8108406:	2b00      	cmp	r3, #0
 8108408:	d01d      	beq.n	8108446 <osMessageGet+0xca>
 810840a:	4b15      	ldr	r3, [pc, #84]	; (8108460 <osMessageGet+0xe4>)
 810840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108410:	601a      	str	r2, [r3, #0]
 8108412:	f3bf 8f4f 	dsb	sy
 8108416:	f3bf 8f6f 	isb	sy
 810841a:	e014      	b.n	8108446 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 810841c:	f107 0314 	add.w	r3, r7, #20
 8108420:	3304      	adds	r3, #4
 8108422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108424:	4619      	mov	r1, r3
 8108426:	68b8      	ldr	r0, [r7, #8]
 8108428:	f001 f818 	bl	810945c <xQueueReceive>
 810842c:	4603      	mov	r3, r0
 810842e:	2b01      	cmp	r3, #1
 8108430:	d102      	bne.n	8108438 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8108432:	2310      	movs	r3, #16
 8108434:	617b      	str	r3, [r7, #20]
 8108436:	e006      	b.n	8108446 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8108438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810843a:	2b00      	cmp	r3, #0
 810843c:	d101      	bne.n	8108442 <osMessageGet+0xc6>
 810843e:	2300      	movs	r3, #0
 8108440:	e000      	b.n	8108444 <osMessageGet+0xc8>
 8108442:	2340      	movs	r3, #64	; 0x40
 8108444:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8108446:	68fb      	ldr	r3, [r7, #12]
 8108448:	461c      	mov	r4, r3
 810844a:	f107 0314 	add.w	r3, r7, #20
 810844e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108452:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8108456:	68f8      	ldr	r0, [r7, #12]
 8108458:	372c      	adds	r7, #44	; 0x2c
 810845a:	46bd      	mov	sp, r7
 810845c:	bd90      	pop	{r4, r7, pc}
 810845e:	bf00      	nop
 8108460:	e000ed04 	.word	0xe000ed04

08108464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8108464:	b580      	push	{r7, lr}
 8108466:	b08a      	sub	sp, #40	; 0x28
 8108468:	af00      	add	r7, sp, #0
 810846a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810846c:	2300      	movs	r3, #0
 810846e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8108470:	f001 fdd0 	bl	810a014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8108474:	4b5b      	ldr	r3, [pc, #364]	; (81085e4 <pvPortMalloc+0x180>)
 8108476:	681b      	ldr	r3, [r3, #0]
 8108478:	2b00      	cmp	r3, #0
 810847a:	d101      	bne.n	8108480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810847c:	f000 f920 	bl	81086c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8108480:	4b59      	ldr	r3, [pc, #356]	; (81085e8 <pvPortMalloc+0x184>)
 8108482:	681a      	ldr	r2, [r3, #0]
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	4013      	ands	r3, r2
 8108488:	2b00      	cmp	r3, #0
 810848a:	f040 8093 	bne.w	81085b4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810848e:	687b      	ldr	r3, [r7, #4]
 8108490:	2b00      	cmp	r3, #0
 8108492:	d01d      	beq.n	81084d0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8108494:	2208      	movs	r2, #8
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	4413      	add	r3, r2
 810849a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	f003 0307 	and.w	r3, r3, #7
 81084a2:	2b00      	cmp	r3, #0
 81084a4:	d014      	beq.n	81084d0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	f023 0307 	bic.w	r3, r3, #7
 81084ac:	3308      	adds	r3, #8
 81084ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81084b0:	687b      	ldr	r3, [r7, #4]
 81084b2:	f003 0307 	and.w	r3, r3, #7
 81084b6:	2b00      	cmp	r3, #0
 81084b8:	d00a      	beq.n	81084d0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81084be:	f383 8811 	msr	BASEPRI, r3
 81084c2:	f3bf 8f6f 	isb	sy
 81084c6:	f3bf 8f4f 	dsb	sy
 81084ca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81084cc:	bf00      	nop
 81084ce:	e7fe      	b.n	81084ce <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	2b00      	cmp	r3, #0
 81084d4:	d06e      	beq.n	81085b4 <pvPortMalloc+0x150>
 81084d6:	4b45      	ldr	r3, [pc, #276]	; (81085ec <pvPortMalloc+0x188>)
 81084d8:	681b      	ldr	r3, [r3, #0]
 81084da:	687a      	ldr	r2, [r7, #4]
 81084dc:	429a      	cmp	r2, r3
 81084de:	d869      	bhi.n	81085b4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81084e0:	4b43      	ldr	r3, [pc, #268]	; (81085f0 <pvPortMalloc+0x18c>)
 81084e2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81084e4:	4b42      	ldr	r3, [pc, #264]	; (81085f0 <pvPortMalloc+0x18c>)
 81084e6:	681b      	ldr	r3, [r3, #0]
 81084e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81084ea:	e004      	b.n	81084f6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 81084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084ee:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084f2:	681b      	ldr	r3, [r3, #0]
 81084f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084f8:	685b      	ldr	r3, [r3, #4]
 81084fa:	687a      	ldr	r2, [r7, #4]
 81084fc:	429a      	cmp	r2, r3
 81084fe:	d903      	bls.n	8108508 <pvPortMalloc+0xa4>
 8108500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108502:	681b      	ldr	r3, [r3, #0]
 8108504:	2b00      	cmp	r3, #0
 8108506:	d1f1      	bne.n	81084ec <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8108508:	4b36      	ldr	r3, [pc, #216]	; (81085e4 <pvPortMalloc+0x180>)
 810850a:	681b      	ldr	r3, [r3, #0]
 810850c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810850e:	429a      	cmp	r2, r3
 8108510:	d050      	beq.n	81085b4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8108512:	6a3b      	ldr	r3, [r7, #32]
 8108514:	681b      	ldr	r3, [r3, #0]
 8108516:	2208      	movs	r2, #8
 8108518:	4413      	add	r3, r2
 810851a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810851e:	681a      	ldr	r2, [r3, #0]
 8108520:	6a3b      	ldr	r3, [r7, #32]
 8108522:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8108524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108526:	685a      	ldr	r2, [r3, #4]
 8108528:	687b      	ldr	r3, [r7, #4]
 810852a:	1ad2      	subs	r2, r2, r3
 810852c:	2308      	movs	r3, #8
 810852e:	005b      	lsls	r3, r3, #1
 8108530:	429a      	cmp	r2, r3
 8108532:	d91f      	bls.n	8108574 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8108534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	4413      	add	r3, r2
 810853a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810853c:	69bb      	ldr	r3, [r7, #24]
 810853e:	f003 0307 	and.w	r3, r3, #7
 8108542:	2b00      	cmp	r3, #0
 8108544:	d00a      	beq.n	810855c <pvPortMalloc+0xf8>
	__asm volatile
 8108546:	f04f 0350 	mov.w	r3, #80	; 0x50
 810854a:	f383 8811 	msr	BASEPRI, r3
 810854e:	f3bf 8f6f 	isb	sy
 8108552:	f3bf 8f4f 	dsb	sy
 8108556:	613b      	str	r3, [r7, #16]
}
 8108558:	bf00      	nop
 810855a:	e7fe      	b.n	810855a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810855e:	685a      	ldr	r2, [r3, #4]
 8108560:	687b      	ldr	r3, [r7, #4]
 8108562:	1ad2      	subs	r2, r2, r3
 8108564:	69bb      	ldr	r3, [r7, #24]
 8108566:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8108568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810856a:	687a      	ldr	r2, [r7, #4]
 810856c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810856e:	69b8      	ldr	r0, [r7, #24]
 8108570:	f000 f908 	bl	8108784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8108574:	4b1d      	ldr	r3, [pc, #116]	; (81085ec <pvPortMalloc+0x188>)
 8108576:	681a      	ldr	r2, [r3, #0]
 8108578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810857a:	685b      	ldr	r3, [r3, #4]
 810857c:	1ad3      	subs	r3, r2, r3
 810857e:	4a1b      	ldr	r2, [pc, #108]	; (81085ec <pvPortMalloc+0x188>)
 8108580:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8108582:	4b1a      	ldr	r3, [pc, #104]	; (81085ec <pvPortMalloc+0x188>)
 8108584:	681a      	ldr	r2, [r3, #0]
 8108586:	4b1b      	ldr	r3, [pc, #108]	; (81085f4 <pvPortMalloc+0x190>)
 8108588:	681b      	ldr	r3, [r3, #0]
 810858a:	429a      	cmp	r2, r3
 810858c:	d203      	bcs.n	8108596 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810858e:	4b17      	ldr	r3, [pc, #92]	; (81085ec <pvPortMalloc+0x188>)
 8108590:	681b      	ldr	r3, [r3, #0]
 8108592:	4a18      	ldr	r2, [pc, #96]	; (81085f4 <pvPortMalloc+0x190>)
 8108594:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8108596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108598:	685a      	ldr	r2, [r3, #4]
 810859a:	4b13      	ldr	r3, [pc, #76]	; (81085e8 <pvPortMalloc+0x184>)
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	431a      	orrs	r2, r3
 81085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81085a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81085a6:	2200      	movs	r2, #0
 81085a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81085aa:	4b13      	ldr	r3, [pc, #76]	; (81085f8 <pvPortMalloc+0x194>)
 81085ac:	681b      	ldr	r3, [r3, #0]
 81085ae:	3301      	adds	r3, #1
 81085b0:	4a11      	ldr	r2, [pc, #68]	; (81085f8 <pvPortMalloc+0x194>)
 81085b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81085b4:	f001 fd3c 	bl	810a030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81085b8:	69fb      	ldr	r3, [r7, #28]
 81085ba:	f003 0307 	and.w	r3, r3, #7
 81085be:	2b00      	cmp	r3, #0
 81085c0:	d00a      	beq.n	81085d8 <pvPortMalloc+0x174>
	__asm volatile
 81085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81085c6:	f383 8811 	msr	BASEPRI, r3
 81085ca:	f3bf 8f6f 	isb	sy
 81085ce:	f3bf 8f4f 	dsb	sy
 81085d2:	60fb      	str	r3, [r7, #12]
}
 81085d4:	bf00      	nop
 81085d6:	e7fe      	b.n	81085d6 <pvPortMalloc+0x172>
	return pvReturn;
 81085d8:	69fb      	ldr	r3, [r7, #28]
}
 81085da:	4618      	mov	r0, r3
 81085dc:	3728      	adds	r7, #40	; 0x28
 81085de:	46bd      	mov	sp, r7
 81085e0:	bd80      	pop	{r7, pc}
 81085e2:	bf00      	nop
 81085e4:	100056b0 	.word	0x100056b0
 81085e8:	100056c4 	.word	0x100056c4
 81085ec:	100056b4 	.word	0x100056b4
 81085f0:	100056a8 	.word	0x100056a8
 81085f4:	100056b8 	.word	0x100056b8
 81085f8:	100056bc 	.word	0x100056bc

081085fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81085fc:	b580      	push	{r7, lr}
 81085fe:	b086      	sub	sp, #24
 8108600:	af00      	add	r7, sp, #0
 8108602:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8108608:	687b      	ldr	r3, [r7, #4]
 810860a:	2b00      	cmp	r3, #0
 810860c:	d04d      	beq.n	81086aa <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810860e:	2308      	movs	r3, #8
 8108610:	425b      	negs	r3, r3
 8108612:	697a      	ldr	r2, [r7, #20]
 8108614:	4413      	add	r3, r2
 8108616:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8108618:	697b      	ldr	r3, [r7, #20]
 810861a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810861c:	693b      	ldr	r3, [r7, #16]
 810861e:	685a      	ldr	r2, [r3, #4]
 8108620:	4b24      	ldr	r3, [pc, #144]	; (81086b4 <vPortFree+0xb8>)
 8108622:	681b      	ldr	r3, [r3, #0]
 8108624:	4013      	ands	r3, r2
 8108626:	2b00      	cmp	r3, #0
 8108628:	d10a      	bne.n	8108640 <vPortFree+0x44>
	__asm volatile
 810862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810862e:	f383 8811 	msr	BASEPRI, r3
 8108632:	f3bf 8f6f 	isb	sy
 8108636:	f3bf 8f4f 	dsb	sy
 810863a:	60fb      	str	r3, [r7, #12]
}
 810863c:	bf00      	nop
 810863e:	e7fe      	b.n	810863e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8108640:	693b      	ldr	r3, [r7, #16]
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	2b00      	cmp	r3, #0
 8108646:	d00a      	beq.n	810865e <vPortFree+0x62>
	__asm volatile
 8108648:	f04f 0350 	mov.w	r3, #80	; 0x50
 810864c:	f383 8811 	msr	BASEPRI, r3
 8108650:	f3bf 8f6f 	isb	sy
 8108654:	f3bf 8f4f 	dsb	sy
 8108658:	60bb      	str	r3, [r7, #8]
}
 810865a:	bf00      	nop
 810865c:	e7fe      	b.n	810865c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810865e:	693b      	ldr	r3, [r7, #16]
 8108660:	685a      	ldr	r2, [r3, #4]
 8108662:	4b14      	ldr	r3, [pc, #80]	; (81086b4 <vPortFree+0xb8>)
 8108664:	681b      	ldr	r3, [r3, #0]
 8108666:	4013      	ands	r3, r2
 8108668:	2b00      	cmp	r3, #0
 810866a:	d01e      	beq.n	81086aa <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810866c:	693b      	ldr	r3, [r7, #16]
 810866e:	681b      	ldr	r3, [r3, #0]
 8108670:	2b00      	cmp	r3, #0
 8108672:	d11a      	bne.n	81086aa <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8108674:	693b      	ldr	r3, [r7, #16]
 8108676:	685a      	ldr	r2, [r3, #4]
 8108678:	4b0e      	ldr	r3, [pc, #56]	; (81086b4 <vPortFree+0xb8>)
 810867a:	681b      	ldr	r3, [r3, #0]
 810867c:	43db      	mvns	r3, r3
 810867e:	401a      	ands	r2, r3
 8108680:	693b      	ldr	r3, [r7, #16]
 8108682:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8108684:	f001 fcc6 	bl	810a014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8108688:	693b      	ldr	r3, [r7, #16]
 810868a:	685a      	ldr	r2, [r3, #4]
 810868c:	4b0a      	ldr	r3, [pc, #40]	; (81086b8 <vPortFree+0xbc>)
 810868e:	681b      	ldr	r3, [r3, #0]
 8108690:	4413      	add	r3, r2
 8108692:	4a09      	ldr	r2, [pc, #36]	; (81086b8 <vPortFree+0xbc>)
 8108694:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8108696:	6938      	ldr	r0, [r7, #16]
 8108698:	f000 f874 	bl	8108784 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810869c:	4b07      	ldr	r3, [pc, #28]	; (81086bc <vPortFree+0xc0>)
 810869e:	681b      	ldr	r3, [r3, #0]
 81086a0:	3301      	adds	r3, #1
 81086a2:	4a06      	ldr	r2, [pc, #24]	; (81086bc <vPortFree+0xc0>)
 81086a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81086a6:	f001 fcc3 	bl	810a030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81086aa:	bf00      	nop
 81086ac:	3718      	adds	r7, #24
 81086ae:	46bd      	mov	sp, r7
 81086b0:	bd80      	pop	{r7, pc}
 81086b2:	bf00      	nop
 81086b4:	100056c4 	.word	0x100056c4
 81086b8:	100056b4 	.word	0x100056b4
 81086bc:	100056c0 	.word	0x100056c0

081086c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81086c0:	b480      	push	{r7}
 81086c2:	b085      	sub	sp, #20
 81086c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81086c6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81086ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81086cc:	4b27      	ldr	r3, [pc, #156]	; (810876c <prvHeapInit+0xac>)
 81086ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81086d0:	68fb      	ldr	r3, [r7, #12]
 81086d2:	f003 0307 	and.w	r3, r3, #7
 81086d6:	2b00      	cmp	r3, #0
 81086d8:	d00c      	beq.n	81086f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81086da:	68fb      	ldr	r3, [r7, #12]
 81086dc:	3307      	adds	r3, #7
 81086de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81086e0:	68fb      	ldr	r3, [r7, #12]
 81086e2:	f023 0307 	bic.w	r3, r3, #7
 81086e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81086e8:	68ba      	ldr	r2, [r7, #8]
 81086ea:	68fb      	ldr	r3, [r7, #12]
 81086ec:	1ad3      	subs	r3, r2, r3
 81086ee:	4a1f      	ldr	r2, [pc, #124]	; (810876c <prvHeapInit+0xac>)
 81086f0:	4413      	add	r3, r2
 81086f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81086f4:	68fb      	ldr	r3, [r7, #12]
 81086f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81086f8:	4a1d      	ldr	r2, [pc, #116]	; (8108770 <prvHeapInit+0xb0>)
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81086fe:	4b1c      	ldr	r3, [pc, #112]	; (8108770 <prvHeapInit+0xb0>)
 8108700:	2200      	movs	r2, #0
 8108702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8108704:	687b      	ldr	r3, [r7, #4]
 8108706:	68ba      	ldr	r2, [r7, #8]
 8108708:	4413      	add	r3, r2
 810870a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810870c:	2208      	movs	r2, #8
 810870e:	68fb      	ldr	r3, [r7, #12]
 8108710:	1a9b      	subs	r3, r3, r2
 8108712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108714:	68fb      	ldr	r3, [r7, #12]
 8108716:	f023 0307 	bic.w	r3, r3, #7
 810871a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810871c:	68fb      	ldr	r3, [r7, #12]
 810871e:	4a15      	ldr	r2, [pc, #84]	; (8108774 <prvHeapInit+0xb4>)
 8108720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8108722:	4b14      	ldr	r3, [pc, #80]	; (8108774 <prvHeapInit+0xb4>)
 8108724:	681b      	ldr	r3, [r3, #0]
 8108726:	2200      	movs	r2, #0
 8108728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810872a:	4b12      	ldr	r3, [pc, #72]	; (8108774 <prvHeapInit+0xb4>)
 810872c:	681b      	ldr	r3, [r3, #0]
 810872e:	2200      	movs	r2, #0
 8108730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8108736:	683b      	ldr	r3, [r7, #0]
 8108738:	68fa      	ldr	r2, [r7, #12]
 810873a:	1ad2      	subs	r2, r2, r3
 810873c:	683b      	ldr	r3, [r7, #0]
 810873e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8108740:	4b0c      	ldr	r3, [pc, #48]	; (8108774 <prvHeapInit+0xb4>)
 8108742:	681a      	ldr	r2, [r3, #0]
 8108744:	683b      	ldr	r3, [r7, #0]
 8108746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108748:	683b      	ldr	r3, [r7, #0]
 810874a:	685b      	ldr	r3, [r3, #4]
 810874c:	4a0a      	ldr	r2, [pc, #40]	; (8108778 <prvHeapInit+0xb8>)
 810874e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108750:	683b      	ldr	r3, [r7, #0]
 8108752:	685b      	ldr	r3, [r3, #4]
 8108754:	4a09      	ldr	r2, [pc, #36]	; (810877c <prvHeapInit+0xbc>)
 8108756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8108758:	4b09      	ldr	r3, [pc, #36]	; (8108780 <prvHeapInit+0xc0>)
 810875a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810875e:	601a      	str	r2, [r3, #0]
}
 8108760:	bf00      	nop
 8108762:	3714      	adds	r7, #20
 8108764:	46bd      	mov	sp, r7
 8108766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810876a:	4770      	bx	lr
 810876c:	10001aa8 	.word	0x10001aa8
 8108770:	100056a8 	.word	0x100056a8
 8108774:	100056b0 	.word	0x100056b0
 8108778:	100056b8 	.word	0x100056b8
 810877c:	100056b4 	.word	0x100056b4
 8108780:	100056c4 	.word	0x100056c4

08108784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8108784:	b480      	push	{r7}
 8108786:	b085      	sub	sp, #20
 8108788:	af00      	add	r7, sp, #0
 810878a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810878c:	4b28      	ldr	r3, [pc, #160]	; (8108830 <prvInsertBlockIntoFreeList+0xac>)
 810878e:	60fb      	str	r3, [r7, #12]
 8108790:	e002      	b.n	8108798 <prvInsertBlockIntoFreeList+0x14>
 8108792:	68fb      	ldr	r3, [r7, #12]
 8108794:	681b      	ldr	r3, [r3, #0]
 8108796:	60fb      	str	r3, [r7, #12]
 8108798:	68fb      	ldr	r3, [r7, #12]
 810879a:	681b      	ldr	r3, [r3, #0]
 810879c:	687a      	ldr	r2, [r7, #4]
 810879e:	429a      	cmp	r2, r3
 81087a0:	d8f7      	bhi.n	8108792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81087a2:	68fb      	ldr	r3, [r7, #12]
 81087a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81087a6:	68fb      	ldr	r3, [r7, #12]
 81087a8:	685b      	ldr	r3, [r3, #4]
 81087aa:	68ba      	ldr	r2, [r7, #8]
 81087ac:	4413      	add	r3, r2
 81087ae:	687a      	ldr	r2, [r7, #4]
 81087b0:	429a      	cmp	r2, r3
 81087b2:	d108      	bne.n	81087c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81087b4:	68fb      	ldr	r3, [r7, #12]
 81087b6:	685a      	ldr	r2, [r3, #4]
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	685b      	ldr	r3, [r3, #4]
 81087bc:	441a      	add	r2, r3
 81087be:	68fb      	ldr	r3, [r7, #12]
 81087c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81087c2:	68fb      	ldr	r3, [r7, #12]
 81087c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81087c6:	687b      	ldr	r3, [r7, #4]
 81087c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81087ca:	687b      	ldr	r3, [r7, #4]
 81087cc:	685b      	ldr	r3, [r3, #4]
 81087ce:	68ba      	ldr	r2, [r7, #8]
 81087d0:	441a      	add	r2, r3
 81087d2:	68fb      	ldr	r3, [r7, #12]
 81087d4:	681b      	ldr	r3, [r3, #0]
 81087d6:	429a      	cmp	r2, r3
 81087d8:	d118      	bne.n	810880c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81087da:	68fb      	ldr	r3, [r7, #12]
 81087dc:	681a      	ldr	r2, [r3, #0]
 81087de:	4b15      	ldr	r3, [pc, #84]	; (8108834 <prvInsertBlockIntoFreeList+0xb0>)
 81087e0:	681b      	ldr	r3, [r3, #0]
 81087e2:	429a      	cmp	r2, r3
 81087e4:	d00d      	beq.n	8108802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81087e6:	687b      	ldr	r3, [r7, #4]
 81087e8:	685a      	ldr	r2, [r3, #4]
 81087ea:	68fb      	ldr	r3, [r7, #12]
 81087ec:	681b      	ldr	r3, [r3, #0]
 81087ee:	685b      	ldr	r3, [r3, #4]
 81087f0:	441a      	add	r2, r3
 81087f2:	687b      	ldr	r3, [r7, #4]
 81087f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81087f6:	68fb      	ldr	r3, [r7, #12]
 81087f8:	681b      	ldr	r3, [r3, #0]
 81087fa:	681a      	ldr	r2, [r3, #0]
 81087fc:	687b      	ldr	r3, [r7, #4]
 81087fe:	601a      	str	r2, [r3, #0]
 8108800:	e008      	b.n	8108814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8108802:	4b0c      	ldr	r3, [pc, #48]	; (8108834 <prvInsertBlockIntoFreeList+0xb0>)
 8108804:	681a      	ldr	r2, [r3, #0]
 8108806:	687b      	ldr	r3, [r7, #4]
 8108808:	601a      	str	r2, [r3, #0]
 810880a:	e003      	b.n	8108814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810880c:	68fb      	ldr	r3, [r7, #12]
 810880e:	681a      	ldr	r2, [r3, #0]
 8108810:	687b      	ldr	r3, [r7, #4]
 8108812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8108814:	68fa      	ldr	r2, [r7, #12]
 8108816:	687b      	ldr	r3, [r7, #4]
 8108818:	429a      	cmp	r2, r3
 810881a:	d002      	beq.n	8108822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810881c:	68fb      	ldr	r3, [r7, #12]
 810881e:	687a      	ldr	r2, [r7, #4]
 8108820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8108822:	bf00      	nop
 8108824:	3714      	adds	r7, #20
 8108826:	46bd      	mov	sp, r7
 8108828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810882c:	4770      	bx	lr
 810882e:	bf00      	nop
 8108830:	100056a8 	.word	0x100056a8
 8108834:	100056b0 	.word	0x100056b0

08108838 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8108838:	b480      	push	{r7}
 810883a:	b083      	sub	sp, #12
 810883c:	af00      	add	r7, sp, #0
 810883e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108840:	687b      	ldr	r3, [r7, #4]
 8108842:	f103 0208 	add.w	r2, r3, #8
 8108846:	687b      	ldr	r3, [r7, #4]
 8108848:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810884a:	687b      	ldr	r3, [r7, #4]
 810884c:	f04f 32ff 	mov.w	r2, #4294967295
 8108850:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108852:	687b      	ldr	r3, [r7, #4]
 8108854:	f103 0208 	add.w	r2, r3, #8
 8108858:	687b      	ldr	r3, [r7, #4]
 810885a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	f103 0208 	add.w	r2, r3, #8
 8108862:	687b      	ldr	r3, [r7, #4]
 8108864:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8108866:	687b      	ldr	r3, [r7, #4]
 8108868:	2200      	movs	r2, #0
 810886a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810886c:	bf00      	nop
 810886e:	370c      	adds	r7, #12
 8108870:	46bd      	mov	sp, r7
 8108872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108876:	4770      	bx	lr

08108878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8108878:	b480      	push	{r7}
 810887a:	b083      	sub	sp, #12
 810887c:	af00      	add	r7, sp, #0
 810887e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	2200      	movs	r2, #0
 8108884:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8108886:	bf00      	nop
 8108888:	370c      	adds	r7, #12
 810888a:	46bd      	mov	sp, r7
 810888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108890:	4770      	bx	lr

08108892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8108892:	b480      	push	{r7}
 8108894:	b085      	sub	sp, #20
 8108896:	af00      	add	r7, sp, #0
 8108898:	6078      	str	r0, [r7, #4]
 810889a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	685b      	ldr	r3, [r3, #4]
 81088a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81088a2:	683b      	ldr	r3, [r7, #0]
 81088a4:	68fa      	ldr	r2, [r7, #12]
 81088a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81088a8:	68fb      	ldr	r3, [r7, #12]
 81088aa:	689a      	ldr	r2, [r3, #8]
 81088ac:	683b      	ldr	r3, [r7, #0]
 81088ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81088b0:	68fb      	ldr	r3, [r7, #12]
 81088b2:	689b      	ldr	r3, [r3, #8]
 81088b4:	683a      	ldr	r2, [r7, #0]
 81088b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81088b8:	68fb      	ldr	r3, [r7, #12]
 81088ba:	683a      	ldr	r2, [r7, #0]
 81088bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81088be:	683b      	ldr	r3, [r7, #0]
 81088c0:	687a      	ldr	r2, [r7, #4]
 81088c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	1c5a      	adds	r2, r3, #1
 81088ca:	687b      	ldr	r3, [r7, #4]
 81088cc:	601a      	str	r2, [r3, #0]
}
 81088ce:	bf00      	nop
 81088d0:	3714      	adds	r7, #20
 81088d2:	46bd      	mov	sp, r7
 81088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088d8:	4770      	bx	lr

081088da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81088da:	b480      	push	{r7}
 81088dc:	b085      	sub	sp, #20
 81088de:	af00      	add	r7, sp, #0
 81088e0:	6078      	str	r0, [r7, #4]
 81088e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81088e4:	683b      	ldr	r3, [r7, #0]
 81088e6:	681b      	ldr	r3, [r3, #0]
 81088e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81088ea:	68bb      	ldr	r3, [r7, #8]
 81088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81088f0:	d103      	bne.n	81088fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81088f2:	687b      	ldr	r3, [r7, #4]
 81088f4:	691b      	ldr	r3, [r3, #16]
 81088f6:	60fb      	str	r3, [r7, #12]
 81088f8:	e00c      	b.n	8108914 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	3308      	adds	r3, #8
 81088fe:	60fb      	str	r3, [r7, #12]
 8108900:	e002      	b.n	8108908 <vListInsert+0x2e>
 8108902:	68fb      	ldr	r3, [r7, #12]
 8108904:	685b      	ldr	r3, [r3, #4]
 8108906:	60fb      	str	r3, [r7, #12]
 8108908:	68fb      	ldr	r3, [r7, #12]
 810890a:	685b      	ldr	r3, [r3, #4]
 810890c:	681b      	ldr	r3, [r3, #0]
 810890e:	68ba      	ldr	r2, [r7, #8]
 8108910:	429a      	cmp	r2, r3
 8108912:	d2f6      	bcs.n	8108902 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8108914:	68fb      	ldr	r3, [r7, #12]
 8108916:	685a      	ldr	r2, [r3, #4]
 8108918:	683b      	ldr	r3, [r7, #0]
 810891a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810891c:	683b      	ldr	r3, [r7, #0]
 810891e:	685b      	ldr	r3, [r3, #4]
 8108920:	683a      	ldr	r2, [r7, #0]
 8108922:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8108924:	683b      	ldr	r3, [r7, #0]
 8108926:	68fa      	ldr	r2, [r7, #12]
 8108928:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810892a:	68fb      	ldr	r3, [r7, #12]
 810892c:	683a      	ldr	r2, [r7, #0]
 810892e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8108930:	683b      	ldr	r3, [r7, #0]
 8108932:	687a      	ldr	r2, [r7, #4]
 8108934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	681b      	ldr	r3, [r3, #0]
 810893a:	1c5a      	adds	r2, r3, #1
 810893c:	687b      	ldr	r3, [r7, #4]
 810893e:	601a      	str	r2, [r3, #0]
}
 8108940:	bf00      	nop
 8108942:	3714      	adds	r7, #20
 8108944:	46bd      	mov	sp, r7
 8108946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810894a:	4770      	bx	lr

0810894c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810894c:	b480      	push	{r7}
 810894e:	b085      	sub	sp, #20
 8108950:	af00      	add	r7, sp, #0
 8108952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8108954:	687b      	ldr	r3, [r7, #4]
 8108956:	691b      	ldr	r3, [r3, #16]
 8108958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810895a:	687b      	ldr	r3, [r7, #4]
 810895c:	685b      	ldr	r3, [r3, #4]
 810895e:	687a      	ldr	r2, [r7, #4]
 8108960:	6892      	ldr	r2, [r2, #8]
 8108962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8108964:	687b      	ldr	r3, [r7, #4]
 8108966:	689b      	ldr	r3, [r3, #8]
 8108968:	687a      	ldr	r2, [r7, #4]
 810896a:	6852      	ldr	r2, [r2, #4]
 810896c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810896e:	68fb      	ldr	r3, [r7, #12]
 8108970:	685b      	ldr	r3, [r3, #4]
 8108972:	687a      	ldr	r2, [r7, #4]
 8108974:	429a      	cmp	r2, r3
 8108976:	d103      	bne.n	8108980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8108978:	687b      	ldr	r3, [r7, #4]
 810897a:	689a      	ldr	r2, [r3, #8]
 810897c:	68fb      	ldr	r3, [r7, #12]
 810897e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8108980:	687b      	ldr	r3, [r7, #4]
 8108982:	2200      	movs	r2, #0
 8108984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8108986:	68fb      	ldr	r3, [r7, #12]
 8108988:	681b      	ldr	r3, [r3, #0]
 810898a:	1e5a      	subs	r2, r3, #1
 810898c:	68fb      	ldr	r3, [r7, #12]
 810898e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8108990:	68fb      	ldr	r3, [r7, #12]
 8108992:	681b      	ldr	r3, [r3, #0]
}
 8108994:	4618      	mov	r0, r3
 8108996:	3714      	adds	r7, #20
 8108998:	46bd      	mov	sp, r7
 810899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810899e:	4770      	bx	lr

081089a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81089a0:	b480      	push	{r7}
 81089a2:	b085      	sub	sp, #20
 81089a4:	af00      	add	r7, sp, #0
 81089a6:	60f8      	str	r0, [r7, #12]
 81089a8:	60b9      	str	r1, [r7, #8]
 81089aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81089ac:	68fb      	ldr	r3, [r7, #12]
 81089ae:	3b04      	subs	r3, #4
 81089b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81089b2:	68fb      	ldr	r3, [r7, #12]
 81089b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81089b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81089ba:	68fb      	ldr	r3, [r7, #12]
 81089bc:	3b04      	subs	r3, #4
 81089be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81089c0:	68bb      	ldr	r3, [r7, #8]
 81089c2:	f023 0201 	bic.w	r2, r3, #1
 81089c6:	68fb      	ldr	r3, [r7, #12]
 81089c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81089ca:	68fb      	ldr	r3, [r7, #12]
 81089cc:	3b04      	subs	r3, #4
 81089ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81089d0:	4a0c      	ldr	r2, [pc, #48]	; (8108a04 <pxPortInitialiseStack+0x64>)
 81089d2:	68fb      	ldr	r3, [r7, #12]
 81089d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81089d6:	68fb      	ldr	r3, [r7, #12]
 81089d8:	3b14      	subs	r3, #20
 81089da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81089dc:	687a      	ldr	r2, [r7, #4]
 81089de:	68fb      	ldr	r3, [r7, #12]
 81089e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81089e2:	68fb      	ldr	r3, [r7, #12]
 81089e4:	3b04      	subs	r3, #4
 81089e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81089e8:	68fb      	ldr	r3, [r7, #12]
 81089ea:	f06f 0202 	mvn.w	r2, #2
 81089ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81089f0:	68fb      	ldr	r3, [r7, #12]
 81089f2:	3b20      	subs	r3, #32
 81089f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81089f6:	68fb      	ldr	r3, [r7, #12]
}
 81089f8:	4618      	mov	r0, r3
 81089fa:	3714      	adds	r7, #20
 81089fc:	46bd      	mov	sp, r7
 81089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a02:	4770      	bx	lr
 8108a04:	08108a09 	.word	0x08108a09

08108a08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8108a08:	b480      	push	{r7}
 8108a0a:	b085      	sub	sp, #20
 8108a0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8108a0e:	2300      	movs	r3, #0
 8108a10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8108a12:	4b12      	ldr	r3, [pc, #72]	; (8108a5c <prvTaskExitError+0x54>)
 8108a14:	681b      	ldr	r3, [r3, #0]
 8108a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108a1a:	d00a      	beq.n	8108a32 <prvTaskExitError+0x2a>
	__asm volatile
 8108a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a20:	f383 8811 	msr	BASEPRI, r3
 8108a24:	f3bf 8f6f 	isb	sy
 8108a28:	f3bf 8f4f 	dsb	sy
 8108a2c:	60fb      	str	r3, [r7, #12]
}
 8108a2e:	bf00      	nop
 8108a30:	e7fe      	b.n	8108a30 <prvTaskExitError+0x28>
	__asm volatile
 8108a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a36:	f383 8811 	msr	BASEPRI, r3
 8108a3a:	f3bf 8f6f 	isb	sy
 8108a3e:	f3bf 8f4f 	dsb	sy
 8108a42:	60bb      	str	r3, [r7, #8]
}
 8108a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8108a46:	bf00      	nop
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	2b00      	cmp	r3, #0
 8108a4c:	d0fc      	beq.n	8108a48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8108a4e:	bf00      	nop
 8108a50:	bf00      	nop
 8108a52:	3714      	adds	r7, #20
 8108a54:	46bd      	mov	sp, r7
 8108a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a5a:	4770      	bx	lr
 8108a5c:	10000010 	.word	0x10000010

08108a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8108a60:	4b07      	ldr	r3, [pc, #28]	; (8108a80 <pxCurrentTCBConst2>)
 8108a62:	6819      	ldr	r1, [r3, #0]
 8108a64:	6808      	ldr	r0, [r1, #0]
 8108a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108a6a:	f380 8809 	msr	PSP, r0
 8108a6e:	f3bf 8f6f 	isb	sy
 8108a72:	f04f 0000 	mov.w	r0, #0
 8108a76:	f380 8811 	msr	BASEPRI, r0
 8108a7a:	4770      	bx	lr
 8108a7c:	f3af 8000 	nop.w

08108a80 <pxCurrentTCBConst2>:
 8108a80:	100056d0 	.word	0x100056d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8108a84:	bf00      	nop
 8108a86:	bf00      	nop

08108a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8108a88:	4808      	ldr	r0, [pc, #32]	; (8108aac <prvPortStartFirstTask+0x24>)
 8108a8a:	6800      	ldr	r0, [r0, #0]
 8108a8c:	6800      	ldr	r0, [r0, #0]
 8108a8e:	f380 8808 	msr	MSP, r0
 8108a92:	f04f 0000 	mov.w	r0, #0
 8108a96:	f380 8814 	msr	CONTROL, r0
 8108a9a:	b662      	cpsie	i
 8108a9c:	b661      	cpsie	f
 8108a9e:	f3bf 8f4f 	dsb	sy
 8108aa2:	f3bf 8f6f 	isb	sy
 8108aa6:	df00      	svc	0
 8108aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8108aaa:	bf00      	nop
 8108aac:	e000ed08 	.word	0xe000ed08

08108ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8108ab0:	b580      	push	{r7, lr}
 8108ab2:	b086      	sub	sp, #24
 8108ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8108ab6:	4b46      	ldr	r3, [pc, #280]	; (8108bd0 <xPortStartScheduler+0x120>)
 8108ab8:	681b      	ldr	r3, [r3, #0]
 8108aba:	4a46      	ldr	r2, [pc, #280]	; (8108bd4 <xPortStartScheduler+0x124>)
 8108abc:	4293      	cmp	r3, r2
 8108abe:	d10a      	bne.n	8108ad6 <xPortStartScheduler+0x26>
	__asm volatile
 8108ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ac4:	f383 8811 	msr	BASEPRI, r3
 8108ac8:	f3bf 8f6f 	isb	sy
 8108acc:	f3bf 8f4f 	dsb	sy
 8108ad0:	613b      	str	r3, [r7, #16]
}
 8108ad2:	bf00      	nop
 8108ad4:	e7fe      	b.n	8108ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8108ad6:	4b3e      	ldr	r3, [pc, #248]	; (8108bd0 <xPortStartScheduler+0x120>)
 8108ad8:	681b      	ldr	r3, [r3, #0]
 8108ada:	4a3f      	ldr	r2, [pc, #252]	; (8108bd8 <xPortStartScheduler+0x128>)
 8108adc:	4293      	cmp	r3, r2
 8108ade:	d10a      	bne.n	8108af6 <xPortStartScheduler+0x46>
	__asm volatile
 8108ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ae4:	f383 8811 	msr	BASEPRI, r3
 8108ae8:	f3bf 8f6f 	isb	sy
 8108aec:	f3bf 8f4f 	dsb	sy
 8108af0:	60fb      	str	r3, [r7, #12]
}
 8108af2:	bf00      	nop
 8108af4:	e7fe      	b.n	8108af4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8108af6:	4b39      	ldr	r3, [pc, #228]	; (8108bdc <xPortStartScheduler+0x12c>)
 8108af8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8108afa:	697b      	ldr	r3, [r7, #20]
 8108afc:	781b      	ldrb	r3, [r3, #0]
 8108afe:	b2db      	uxtb	r3, r3
 8108b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8108b02:	697b      	ldr	r3, [r7, #20]
 8108b04:	22ff      	movs	r2, #255	; 0xff
 8108b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8108b08:	697b      	ldr	r3, [r7, #20]
 8108b0a:	781b      	ldrb	r3, [r3, #0]
 8108b0c:	b2db      	uxtb	r3, r3
 8108b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8108b10:	78fb      	ldrb	r3, [r7, #3]
 8108b12:	b2db      	uxtb	r3, r3
 8108b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8108b18:	b2da      	uxtb	r2, r3
 8108b1a:	4b31      	ldr	r3, [pc, #196]	; (8108be0 <xPortStartScheduler+0x130>)
 8108b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8108b1e:	4b31      	ldr	r3, [pc, #196]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b20:	2207      	movs	r2, #7
 8108b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8108b24:	e009      	b.n	8108b3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8108b26:	4b2f      	ldr	r3, [pc, #188]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b28:	681b      	ldr	r3, [r3, #0]
 8108b2a:	3b01      	subs	r3, #1
 8108b2c:	4a2d      	ldr	r2, [pc, #180]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8108b30:	78fb      	ldrb	r3, [r7, #3]
 8108b32:	b2db      	uxtb	r3, r3
 8108b34:	005b      	lsls	r3, r3, #1
 8108b36:	b2db      	uxtb	r3, r3
 8108b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8108b3a:	78fb      	ldrb	r3, [r7, #3]
 8108b3c:	b2db      	uxtb	r3, r3
 8108b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108b42:	2b80      	cmp	r3, #128	; 0x80
 8108b44:	d0ef      	beq.n	8108b26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8108b46:	4b27      	ldr	r3, [pc, #156]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b48:	681b      	ldr	r3, [r3, #0]
 8108b4a:	f1c3 0307 	rsb	r3, r3, #7
 8108b4e:	2b04      	cmp	r3, #4
 8108b50:	d00a      	beq.n	8108b68 <xPortStartScheduler+0xb8>
	__asm volatile
 8108b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b56:	f383 8811 	msr	BASEPRI, r3
 8108b5a:	f3bf 8f6f 	isb	sy
 8108b5e:	f3bf 8f4f 	dsb	sy
 8108b62:	60bb      	str	r3, [r7, #8]
}
 8108b64:	bf00      	nop
 8108b66:	e7fe      	b.n	8108b66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8108b68:	4b1e      	ldr	r3, [pc, #120]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b6a:	681b      	ldr	r3, [r3, #0]
 8108b6c:	021b      	lsls	r3, r3, #8
 8108b6e:	4a1d      	ldr	r2, [pc, #116]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8108b72:	4b1c      	ldr	r3, [pc, #112]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b74:	681b      	ldr	r3, [r3, #0]
 8108b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108b7a:	4a1a      	ldr	r2, [pc, #104]	; (8108be4 <xPortStartScheduler+0x134>)
 8108b7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8108b7e:	687b      	ldr	r3, [r7, #4]
 8108b80:	b2da      	uxtb	r2, r3
 8108b82:	697b      	ldr	r3, [r7, #20]
 8108b84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8108b86:	4b18      	ldr	r3, [pc, #96]	; (8108be8 <xPortStartScheduler+0x138>)
 8108b88:	681b      	ldr	r3, [r3, #0]
 8108b8a:	4a17      	ldr	r2, [pc, #92]	; (8108be8 <xPortStartScheduler+0x138>)
 8108b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8108b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8108b92:	4b15      	ldr	r3, [pc, #84]	; (8108be8 <xPortStartScheduler+0x138>)
 8108b94:	681b      	ldr	r3, [r3, #0]
 8108b96:	4a14      	ldr	r2, [pc, #80]	; (8108be8 <xPortStartScheduler+0x138>)
 8108b98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8108b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8108b9e:	f000 f8dd 	bl	8108d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8108ba2:	4b12      	ldr	r3, [pc, #72]	; (8108bec <xPortStartScheduler+0x13c>)
 8108ba4:	2200      	movs	r2, #0
 8108ba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8108ba8:	f000 f8fc 	bl	8108da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8108bac:	4b10      	ldr	r3, [pc, #64]	; (8108bf0 <xPortStartScheduler+0x140>)
 8108bae:	681b      	ldr	r3, [r3, #0]
 8108bb0:	4a0f      	ldr	r2, [pc, #60]	; (8108bf0 <xPortStartScheduler+0x140>)
 8108bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8108bb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8108bb8:	f7ff ff66 	bl	8108a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8108bbc:	f001 fbae 	bl	810a31c <vTaskSwitchContext>
	prvTaskExitError();
 8108bc0:	f7ff ff22 	bl	8108a08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8108bc4:	2300      	movs	r3, #0
}
 8108bc6:	4618      	mov	r0, r3
 8108bc8:	3718      	adds	r7, #24
 8108bca:	46bd      	mov	sp, r7
 8108bcc:	bd80      	pop	{r7, pc}
 8108bce:	bf00      	nop
 8108bd0:	e000ed00 	.word	0xe000ed00
 8108bd4:	410fc271 	.word	0x410fc271
 8108bd8:	410fc270 	.word	0x410fc270
 8108bdc:	e000e400 	.word	0xe000e400
 8108be0:	100056c8 	.word	0x100056c8
 8108be4:	100056cc 	.word	0x100056cc
 8108be8:	e000ed20 	.word	0xe000ed20
 8108bec:	10000010 	.word	0x10000010
 8108bf0:	e000ef34 	.word	0xe000ef34

08108bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8108bf4:	b480      	push	{r7}
 8108bf6:	b083      	sub	sp, #12
 8108bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8108bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108bfe:	f383 8811 	msr	BASEPRI, r3
 8108c02:	f3bf 8f6f 	isb	sy
 8108c06:	f3bf 8f4f 	dsb	sy
 8108c0a:	607b      	str	r3, [r7, #4]
}
 8108c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8108c0e:	4b0f      	ldr	r3, [pc, #60]	; (8108c4c <vPortEnterCritical+0x58>)
 8108c10:	681b      	ldr	r3, [r3, #0]
 8108c12:	3301      	adds	r3, #1
 8108c14:	4a0d      	ldr	r2, [pc, #52]	; (8108c4c <vPortEnterCritical+0x58>)
 8108c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8108c18:	4b0c      	ldr	r3, [pc, #48]	; (8108c4c <vPortEnterCritical+0x58>)
 8108c1a:	681b      	ldr	r3, [r3, #0]
 8108c1c:	2b01      	cmp	r3, #1
 8108c1e:	d10f      	bne.n	8108c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8108c20:	4b0b      	ldr	r3, [pc, #44]	; (8108c50 <vPortEnterCritical+0x5c>)
 8108c22:	681b      	ldr	r3, [r3, #0]
 8108c24:	b2db      	uxtb	r3, r3
 8108c26:	2b00      	cmp	r3, #0
 8108c28:	d00a      	beq.n	8108c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8108c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c2e:	f383 8811 	msr	BASEPRI, r3
 8108c32:	f3bf 8f6f 	isb	sy
 8108c36:	f3bf 8f4f 	dsb	sy
 8108c3a:	603b      	str	r3, [r7, #0]
}
 8108c3c:	bf00      	nop
 8108c3e:	e7fe      	b.n	8108c3e <vPortEnterCritical+0x4a>
	}
}
 8108c40:	bf00      	nop
 8108c42:	370c      	adds	r7, #12
 8108c44:	46bd      	mov	sp, r7
 8108c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c4a:	4770      	bx	lr
 8108c4c:	10000010 	.word	0x10000010
 8108c50:	e000ed04 	.word	0xe000ed04

08108c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8108c54:	b480      	push	{r7}
 8108c56:	b083      	sub	sp, #12
 8108c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8108c5a:	4b12      	ldr	r3, [pc, #72]	; (8108ca4 <vPortExitCritical+0x50>)
 8108c5c:	681b      	ldr	r3, [r3, #0]
 8108c5e:	2b00      	cmp	r3, #0
 8108c60:	d10a      	bne.n	8108c78 <vPortExitCritical+0x24>
	__asm volatile
 8108c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108c66:	f383 8811 	msr	BASEPRI, r3
 8108c6a:	f3bf 8f6f 	isb	sy
 8108c6e:	f3bf 8f4f 	dsb	sy
 8108c72:	607b      	str	r3, [r7, #4]
}
 8108c74:	bf00      	nop
 8108c76:	e7fe      	b.n	8108c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8108c78:	4b0a      	ldr	r3, [pc, #40]	; (8108ca4 <vPortExitCritical+0x50>)
 8108c7a:	681b      	ldr	r3, [r3, #0]
 8108c7c:	3b01      	subs	r3, #1
 8108c7e:	4a09      	ldr	r2, [pc, #36]	; (8108ca4 <vPortExitCritical+0x50>)
 8108c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8108c82:	4b08      	ldr	r3, [pc, #32]	; (8108ca4 <vPortExitCritical+0x50>)
 8108c84:	681b      	ldr	r3, [r3, #0]
 8108c86:	2b00      	cmp	r3, #0
 8108c88:	d105      	bne.n	8108c96 <vPortExitCritical+0x42>
 8108c8a:	2300      	movs	r3, #0
 8108c8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8108c8e:	683b      	ldr	r3, [r7, #0]
 8108c90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8108c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8108c96:	bf00      	nop
 8108c98:	370c      	adds	r7, #12
 8108c9a:	46bd      	mov	sp, r7
 8108c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ca0:	4770      	bx	lr
 8108ca2:	bf00      	nop
 8108ca4:	10000010 	.word	0x10000010
	...

08108cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8108cb0:	f3ef 8009 	mrs	r0, PSP
 8108cb4:	f3bf 8f6f 	isb	sy
 8108cb8:	4b15      	ldr	r3, [pc, #84]	; (8108d10 <pxCurrentTCBConst>)
 8108cba:	681a      	ldr	r2, [r3, #0]
 8108cbc:	f01e 0f10 	tst.w	lr, #16
 8108cc0:	bf08      	it	eq
 8108cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8108cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108cca:	6010      	str	r0, [r2, #0]
 8108ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8108cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8108cd4:	f380 8811 	msr	BASEPRI, r0
 8108cd8:	f3bf 8f4f 	dsb	sy
 8108cdc:	f3bf 8f6f 	isb	sy
 8108ce0:	f001 fb1c 	bl	810a31c <vTaskSwitchContext>
 8108ce4:	f04f 0000 	mov.w	r0, #0
 8108ce8:	f380 8811 	msr	BASEPRI, r0
 8108cec:	bc09      	pop	{r0, r3}
 8108cee:	6819      	ldr	r1, [r3, #0]
 8108cf0:	6808      	ldr	r0, [r1, #0]
 8108cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108cf6:	f01e 0f10 	tst.w	lr, #16
 8108cfa:	bf08      	it	eq
 8108cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8108d00:	f380 8809 	msr	PSP, r0
 8108d04:	f3bf 8f6f 	isb	sy
 8108d08:	4770      	bx	lr
 8108d0a:	bf00      	nop
 8108d0c:	f3af 8000 	nop.w

08108d10 <pxCurrentTCBConst>:
 8108d10:	100056d0 	.word	0x100056d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8108d14:	bf00      	nop
 8108d16:	bf00      	nop

08108d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8108d18:	b580      	push	{r7, lr}
 8108d1a:	b082      	sub	sp, #8
 8108d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8108d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108d22:	f383 8811 	msr	BASEPRI, r3
 8108d26:	f3bf 8f6f 	isb	sy
 8108d2a:	f3bf 8f4f 	dsb	sy
 8108d2e:	607b      	str	r3, [r7, #4]
}
 8108d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8108d32:	f001 fa3b 	bl	810a1ac <xTaskIncrementTick>
 8108d36:	4603      	mov	r3, r0
 8108d38:	2b00      	cmp	r3, #0
 8108d3a:	d003      	beq.n	8108d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8108d3c:	4b06      	ldr	r3, [pc, #24]	; (8108d58 <SysTick_Handler+0x40>)
 8108d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108d42:	601a      	str	r2, [r3, #0]
 8108d44:	2300      	movs	r3, #0
 8108d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8108d48:	683b      	ldr	r3, [r7, #0]
 8108d4a:	f383 8811 	msr	BASEPRI, r3
}
 8108d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8108d50:	bf00      	nop
 8108d52:	3708      	adds	r7, #8
 8108d54:	46bd      	mov	sp, r7
 8108d56:	bd80      	pop	{r7, pc}
 8108d58:	e000ed04 	.word	0xe000ed04

08108d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8108d5c:	b480      	push	{r7}
 8108d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8108d60:	4b0b      	ldr	r3, [pc, #44]	; (8108d90 <vPortSetupTimerInterrupt+0x34>)
 8108d62:	2200      	movs	r2, #0
 8108d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8108d66:	4b0b      	ldr	r3, [pc, #44]	; (8108d94 <vPortSetupTimerInterrupt+0x38>)
 8108d68:	2200      	movs	r2, #0
 8108d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8108d6c:	4b0a      	ldr	r3, [pc, #40]	; (8108d98 <vPortSetupTimerInterrupt+0x3c>)
 8108d6e:	681b      	ldr	r3, [r3, #0]
 8108d70:	4a0a      	ldr	r2, [pc, #40]	; (8108d9c <vPortSetupTimerInterrupt+0x40>)
 8108d72:	fba2 2303 	umull	r2, r3, r2, r3
 8108d76:	099b      	lsrs	r3, r3, #6
 8108d78:	4a09      	ldr	r2, [pc, #36]	; (8108da0 <vPortSetupTimerInterrupt+0x44>)
 8108d7a:	3b01      	subs	r3, #1
 8108d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8108d7e:	4b04      	ldr	r3, [pc, #16]	; (8108d90 <vPortSetupTimerInterrupt+0x34>)
 8108d80:	2207      	movs	r2, #7
 8108d82:	601a      	str	r2, [r3, #0]
}
 8108d84:	bf00      	nop
 8108d86:	46bd      	mov	sp, r7
 8108d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d8c:	4770      	bx	lr
 8108d8e:	bf00      	nop
 8108d90:	e000e010 	.word	0xe000e010
 8108d94:	e000e018 	.word	0xe000e018
 8108d98:	10000004 	.word	0x10000004
 8108d9c:	10624dd3 	.word	0x10624dd3
 8108da0:	e000e014 	.word	0xe000e014

08108da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8108da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8108db4 <vPortEnableVFP+0x10>
 8108da8:	6801      	ldr	r1, [r0, #0]
 8108daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8108dae:	6001      	str	r1, [r0, #0]
 8108db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8108db2:	bf00      	nop
 8108db4:	e000ed88 	.word	0xe000ed88

08108db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8108db8:	b480      	push	{r7}
 8108dba:	b085      	sub	sp, #20
 8108dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8108dbe:	f3ef 8305 	mrs	r3, IPSR
 8108dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8108dc4:	68fb      	ldr	r3, [r7, #12]
 8108dc6:	2b0f      	cmp	r3, #15
 8108dc8:	d914      	bls.n	8108df4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8108dca:	4a17      	ldr	r2, [pc, #92]	; (8108e28 <vPortValidateInterruptPriority+0x70>)
 8108dcc:	68fb      	ldr	r3, [r7, #12]
 8108dce:	4413      	add	r3, r2
 8108dd0:	781b      	ldrb	r3, [r3, #0]
 8108dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8108dd4:	4b15      	ldr	r3, [pc, #84]	; (8108e2c <vPortValidateInterruptPriority+0x74>)
 8108dd6:	781b      	ldrb	r3, [r3, #0]
 8108dd8:	7afa      	ldrb	r2, [r7, #11]
 8108dda:	429a      	cmp	r2, r3
 8108ddc:	d20a      	bcs.n	8108df4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8108dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108de2:	f383 8811 	msr	BASEPRI, r3
 8108de6:	f3bf 8f6f 	isb	sy
 8108dea:	f3bf 8f4f 	dsb	sy
 8108dee:	607b      	str	r3, [r7, #4]
}
 8108df0:	bf00      	nop
 8108df2:	e7fe      	b.n	8108df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8108df4:	4b0e      	ldr	r3, [pc, #56]	; (8108e30 <vPortValidateInterruptPriority+0x78>)
 8108df6:	681b      	ldr	r3, [r3, #0]
 8108df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8108dfc:	4b0d      	ldr	r3, [pc, #52]	; (8108e34 <vPortValidateInterruptPriority+0x7c>)
 8108dfe:	681b      	ldr	r3, [r3, #0]
 8108e00:	429a      	cmp	r2, r3
 8108e02:	d90a      	bls.n	8108e1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8108e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108e08:	f383 8811 	msr	BASEPRI, r3
 8108e0c:	f3bf 8f6f 	isb	sy
 8108e10:	f3bf 8f4f 	dsb	sy
 8108e14:	603b      	str	r3, [r7, #0]
}
 8108e16:	bf00      	nop
 8108e18:	e7fe      	b.n	8108e18 <vPortValidateInterruptPriority+0x60>
	}
 8108e1a:	bf00      	nop
 8108e1c:	3714      	adds	r7, #20
 8108e1e:	46bd      	mov	sp, r7
 8108e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e24:	4770      	bx	lr
 8108e26:	bf00      	nop
 8108e28:	e000e3f0 	.word	0xe000e3f0
 8108e2c:	100056c8 	.word	0x100056c8
 8108e30:	e000ed0c 	.word	0xe000ed0c
 8108e34:	100056cc 	.word	0x100056cc

08108e38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8108e38:	b580      	push	{r7, lr}
 8108e3a:	b084      	sub	sp, #16
 8108e3c:	af00      	add	r7, sp, #0
 8108e3e:	6078      	str	r0, [r7, #4]
 8108e40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8108e42:	687b      	ldr	r3, [r7, #4]
 8108e44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8108e46:	68fb      	ldr	r3, [r7, #12]
 8108e48:	2b00      	cmp	r3, #0
 8108e4a:	d10a      	bne.n	8108e62 <xQueueGenericReset+0x2a>
	__asm volatile
 8108e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108e50:	f383 8811 	msr	BASEPRI, r3
 8108e54:	f3bf 8f6f 	isb	sy
 8108e58:	f3bf 8f4f 	dsb	sy
 8108e5c:	60bb      	str	r3, [r7, #8]
}
 8108e5e:	bf00      	nop
 8108e60:	e7fe      	b.n	8108e60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8108e62:	f7ff fec7 	bl	8108bf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108e66:	68fb      	ldr	r3, [r7, #12]
 8108e68:	681a      	ldr	r2, [r3, #0]
 8108e6a:	68fb      	ldr	r3, [r7, #12]
 8108e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108e6e:	68f9      	ldr	r1, [r7, #12]
 8108e70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108e72:	fb01 f303 	mul.w	r3, r1, r3
 8108e76:	441a      	add	r2, r3
 8108e78:	68fb      	ldr	r3, [r7, #12]
 8108e7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8108e7c:	68fb      	ldr	r3, [r7, #12]
 8108e7e:	2200      	movs	r2, #0
 8108e80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8108e82:	68fb      	ldr	r3, [r7, #12]
 8108e84:	681a      	ldr	r2, [r3, #0]
 8108e86:	68fb      	ldr	r3, [r7, #12]
 8108e88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108e8a:	68fb      	ldr	r3, [r7, #12]
 8108e8c:	681a      	ldr	r2, [r3, #0]
 8108e8e:	68fb      	ldr	r3, [r7, #12]
 8108e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108e92:	3b01      	subs	r3, #1
 8108e94:	68f9      	ldr	r1, [r7, #12]
 8108e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8108e98:	fb01 f303 	mul.w	r3, r1, r3
 8108e9c:	441a      	add	r2, r3
 8108e9e:	68fb      	ldr	r3, [r7, #12]
 8108ea0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8108ea2:	68fb      	ldr	r3, [r7, #12]
 8108ea4:	22ff      	movs	r2, #255	; 0xff
 8108ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8108eaa:	68fb      	ldr	r3, [r7, #12]
 8108eac:	22ff      	movs	r2, #255	; 0xff
 8108eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8108eb2:	683b      	ldr	r3, [r7, #0]
 8108eb4:	2b00      	cmp	r3, #0
 8108eb6:	d114      	bne.n	8108ee2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8108eb8:	68fb      	ldr	r3, [r7, #12]
 8108eba:	691b      	ldr	r3, [r3, #16]
 8108ebc:	2b00      	cmp	r3, #0
 8108ebe:	d01a      	beq.n	8108ef6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108ec0:	68fb      	ldr	r3, [r7, #12]
 8108ec2:	3310      	adds	r3, #16
 8108ec4:	4618      	mov	r0, r3
 8108ec6:	f001 faaf 	bl	810a428 <xTaskRemoveFromEventList>
 8108eca:	4603      	mov	r3, r0
 8108ecc:	2b00      	cmp	r3, #0
 8108ece:	d012      	beq.n	8108ef6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8108ed0:	4b0c      	ldr	r3, [pc, #48]	; (8108f04 <xQueueGenericReset+0xcc>)
 8108ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8108ed6:	601a      	str	r2, [r3, #0]
 8108ed8:	f3bf 8f4f 	dsb	sy
 8108edc:	f3bf 8f6f 	isb	sy
 8108ee0:	e009      	b.n	8108ef6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8108ee2:	68fb      	ldr	r3, [r7, #12]
 8108ee4:	3310      	adds	r3, #16
 8108ee6:	4618      	mov	r0, r3
 8108ee8:	f7ff fca6 	bl	8108838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8108eec:	68fb      	ldr	r3, [r7, #12]
 8108eee:	3324      	adds	r3, #36	; 0x24
 8108ef0:	4618      	mov	r0, r3
 8108ef2:	f7ff fca1 	bl	8108838 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8108ef6:	f7ff fead 	bl	8108c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8108efa:	2301      	movs	r3, #1
}
 8108efc:	4618      	mov	r0, r3
 8108efe:	3710      	adds	r7, #16
 8108f00:	46bd      	mov	sp, r7
 8108f02:	bd80      	pop	{r7, pc}
 8108f04:	e000ed04 	.word	0xe000ed04

08108f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8108f08:	b580      	push	{r7, lr}
 8108f0a:	b08e      	sub	sp, #56	; 0x38
 8108f0c:	af02      	add	r7, sp, #8
 8108f0e:	60f8      	str	r0, [r7, #12]
 8108f10:	60b9      	str	r1, [r7, #8]
 8108f12:	607a      	str	r2, [r7, #4]
 8108f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8108f16:	68fb      	ldr	r3, [r7, #12]
 8108f18:	2b00      	cmp	r3, #0
 8108f1a:	d10a      	bne.n	8108f32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8108f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f20:	f383 8811 	msr	BASEPRI, r3
 8108f24:	f3bf 8f6f 	isb	sy
 8108f28:	f3bf 8f4f 	dsb	sy
 8108f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8108f2e:	bf00      	nop
 8108f30:	e7fe      	b.n	8108f30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8108f32:	683b      	ldr	r3, [r7, #0]
 8108f34:	2b00      	cmp	r3, #0
 8108f36:	d10a      	bne.n	8108f4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8108f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f3c:	f383 8811 	msr	BASEPRI, r3
 8108f40:	f3bf 8f6f 	isb	sy
 8108f44:	f3bf 8f4f 	dsb	sy
 8108f48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8108f4a:	bf00      	nop
 8108f4c:	e7fe      	b.n	8108f4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8108f4e:	687b      	ldr	r3, [r7, #4]
 8108f50:	2b00      	cmp	r3, #0
 8108f52:	d002      	beq.n	8108f5a <xQueueGenericCreateStatic+0x52>
 8108f54:	68bb      	ldr	r3, [r7, #8]
 8108f56:	2b00      	cmp	r3, #0
 8108f58:	d001      	beq.n	8108f5e <xQueueGenericCreateStatic+0x56>
 8108f5a:	2301      	movs	r3, #1
 8108f5c:	e000      	b.n	8108f60 <xQueueGenericCreateStatic+0x58>
 8108f5e:	2300      	movs	r3, #0
 8108f60:	2b00      	cmp	r3, #0
 8108f62:	d10a      	bne.n	8108f7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8108f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f68:	f383 8811 	msr	BASEPRI, r3
 8108f6c:	f3bf 8f6f 	isb	sy
 8108f70:	f3bf 8f4f 	dsb	sy
 8108f74:	623b      	str	r3, [r7, #32]
}
 8108f76:	bf00      	nop
 8108f78:	e7fe      	b.n	8108f78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8108f7a:	687b      	ldr	r3, [r7, #4]
 8108f7c:	2b00      	cmp	r3, #0
 8108f7e:	d102      	bne.n	8108f86 <xQueueGenericCreateStatic+0x7e>
 8108f80:	68bb      	ldr	r3, [r7, #8]
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	d101      	bne.n	8108f8a <xQueueGenericCreateStatic+0x82>
 8108f86:	2301      	movs	r3, #1
 8108f88:	e000      	b.n	8108f8c <xQueueGenericCreateStatic+0x84>
 8108f8a:	2300      	movs	r3, #0
 8108f8c:	2b00      	cmp	r3, #0
 8108f8e:	d10a      	bne.n	8108fa6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8108f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f94:	f383 8811 	msr	BASEPRI, r3
 8108f98:	f3bf 8f6f 	isb	sy
 8108f9c:	f3bf 8f4f 	dsb	sy
 8108fa0:	61fb      	str	r3, [r7, #28]
}
 8108fa2:	bf00      	nop
 8108fa4:	e7fe      	b.n	8108fa4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8108fa6:	2348      	movs	r3, #72	; 0x48
 8108fa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8108faa:	697b      	ldr	r3, [r7, #20]
 8108fac:	2b48      	cmp	r3, #72	; 0x48
 8108fae:	d00a      	beq.n	8108fc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8108fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108fb4:	f383 8811 	msr	BASEPRI, r3
 8108fb8:	f3bf 8f6f 	isb	sy
 8108fbc:	f3bf 8f4f 	dsb	sy
 8108fc0:	61bb      	str	r3, [r7, #24]
}
 8108fc2:	bf00      	nop
 8108fc4:	e7fe      	b.n	8108fc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8108fc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8108fc8:	683b      	ldr	r3, [r7, #0]
 8108fca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8108fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fce:	2b00      	cmp	r3, #0
 8108fd0:	d00d      	beq.n	8108fee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8108fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fd4:	2201      	movs	r2, #1
 8108fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8108fda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8108fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108fe0:	9300      	str	r3, [sp, #0]
 8108fe2:	4613      	mov	r3, r2
 8108fe4:	687a      	ldr	r2, [r7, #4]
 8108fe6:	68b9      	ldr	r1, [r7, #8]
 8108fe8:	68f8      	ldr	r0, [r7, #12]
 8108fea:	f000 f83f 	bl	810906c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8108fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8108ff0:	4618      	mov	r0, r3
 8108ff2:	3730      	adds	r7, #48	; 0x30
 8108ff4:	46bd      	mov	sp, r7
 8108ff6:	bd80      	pop	{r7, pc}

08108ff8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8108ff8:	b580      	push	{r7, lr}
 8108ffa:	b08a      	sub	sp, #40	; 0x28
 8108ffc:	af02      	add	r7, sp, #8
 8108ffe:	60f8      	str	r0, [r7, #12]
 8109000:	60b9      	str	r1, [r7, #8]
 8109002:	4613      	mov	r3, r2
 8109004:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109006:	68fb      	ldr	r3, [r7, #12]
 8109008:	2b00      	cmp	r3, #0
 810900a:	d10a      	bne.n	8109022 <xQueueGenericCreate+0x2a>
	__asm volatile
 810900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109010:	f383 8811 	msr	BASEPRI, r3
 8109014:	f3bf 8f6f 	isb	sy
 8109018:	f3bf 8f4f 	dsb	sy
 810901c:	613b      	str	r3, [r7, #16]
}
 810901e:	bf00      	nop
 8109020:	e7fe      	b.n	8109020 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109022:	68fb      	ldr	r3, [r7, #12]
 8109024:	68ba      	ldr	r2, [r7, #8]
 8109026:	fb02 f303 	mul.w	r3, r2, r3
 810902a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810902c:	69fb      	ldr	r3, [r7, #28]
 810902e:	3348      	adds	r3, #72	; 0x48
 8109030:	4618      	mov	r0, r3
 8109032:	f7ff fa17 	bl	8108464 <pvPortMalloc>
 8109036:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8109038:	69bb      	ldr	r3, [r7, #24]
 810903a:	2b00      	cmp	r3, #0
 810903c:	d011      	beq.n	8109062 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810903e:	69bb      	ldr	r3, [r7, #24]
 8109040:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109042:	697b      	ldr	r3, [r7, #20]
 8109044:	3348      	adds	r3, #72	; 0x48
 8109046:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8109048:	69bb      	ldr	r3, [r7, #24]
 810904a:	2200      	movs	r2, #0
 810904c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109050:	79fa      	ldrb	r2, [r7, #7]
 8109052:	69bb      	ldr	r3, [r7, #24]
 8109054:	9300      	str	r3, [sp, #0]
 8109056:	4613      	mov	r3, r2
 8109058:	697a      	ldr	r2, [r7, #20]
 810905a:	68b9      	ldr	r1, [r7, #8]
 810905c:	68f8      	ldr	r0, [r7, #12]
 810905e:	f000 f805 	bl	810906c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109062:	69bb      	ldr	r3, [r7, #24]
	}
 8109064:	4618      	mov	r0, r3
 8109066:	3720      	adds	r7, #32
 8109068:	46bd      	mov	sp, r7
 810906a:	bd80      	pop	{r7, pc}

0810906c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810906c:	b580      	push	{r7, lr}
 810906e:	b084      	sub	sp, #16
 8109070:	af00      	add	r7, sp, #0
 8109072:	60f8      	str	r0, [r7, #12]
 8109074:	60b9      	str	r1, [r7, #8]
 8109076:	607a      	str	r2, [r7, #4]
 8109078:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810907a:	68bb      	ldr	r3, [r7, #8]
 810907c:	2b00      	cmp	r3, #0
 810907e:	d103      	bne.n	8109088 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8109080:	69bb      	ldr	r3, [r7, #24]
 8109082:	69ba      	ldr	r2, [r7, #24]
 8109084:	601a      	str	r2, [r3, #0]
 8109086:	e002      	b.n	810908e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8109088:	69bb      	ldr	r3, [r7, #24]
 810908a:	687a      	ldr	r2, [r7, #4]
 810908c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810908e:	69bb      	ldr	r3, [r7, #24]
 8109090:	68fa      	ldr	r2, [r7, #12]
 8109092:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8109094:	69bb      	ldr	r3, [r7, #24]
 8109096:	68ba      	ldr	r2, [r7, #8]
 8109098:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810909a:	2101      	movs	r1, #1
 810909c:	69b8      	ldr	r0, [r7, #24]
 810909e:	f7ff fecb 	bl	8108e38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81090a2:	bf00      	nop
 81090a4:	3710      	adds	r7, #16
 81090a6:	46bd      	mov	sp, r7
 81090a8:	bd80      	pop	{r7, pc}

081090aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 81090aa:	b580      	push	{r7, lr}
 81090ac:	b082      	sub	sp, #8
 81090ae:	af00      	add	r7, sp, #0
 81090b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 81090b2:	687b      	ldr	r3, [r7, #4]
 81090b4:	2b00      	cmp	r3, #0
 81090b6:	d00e      	beq.n	81090d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	2200      	movs	r2, #0
 81090bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 81090be:	687b      	ldr	r3, [r7, #4]
 81090c0:	2200      	movs	r2, #0
 81090c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	2200      	movs	r2, #0
 81090c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 81090ca:	2300      	movs	r3, #0
 81090cc:	2200      	movs	r2, #0
 81090ce:	2100      	movs	r1, #0
 81090d0:	6878      	ldr	r0, [r7, #4]
 81090d2:	f000 f837 	bl	8109144 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 81090d6:	bf00      	nop
 81090d8:	3708      	adds	r7, #8
 81090da:	46bd      	mov	sp, r7
 81090dc:	bd80      	pop	{r7, pc}

081090de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 81090de:	b580      	push	{r7, lr}
 81090e0:	b086      	sub	sp, #24
 81090e2:	af00      	add	r7, sp, #0
 81090e4:	4603      	mov	r3, r0
 81090e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 81090e8:	2301      	movs	r3, #1
 81090ea:	617b      	str	r3, [r7, #20]
 81090ec:	2300      	movs	r3, #0
 81090ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 81090f0:	79fb      	ldrb	r3, [r7, #7]
 81090f2:	461a      	mov	r2, r3
 81090f4:	6939      	ldr	r1, [r7, #16]
 81090f6:	6978      	ldr	r0, [r7, #20]
 81090f8:	f7ff ff7e 	bl	8108ff8 <xQueueGenericCreate>
 81090fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 81090fe:	68f8      	ldr	r0, [r7, #12]
 8109100:	f7ff ffd3 	bl	81090aa <prvInitialiseMutex>

		return xNewQueue;
 8109104:	68fb      	ldr	r3, [r7, #12]
	}
 8109106:	4618      	mov	r0, r3
 8109108:	3718      	adds	r7, #24
 810910a:	46bd      	mov	sp, r7
 810910c:	bd80      	pop	{r7, pc}

0810910e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810910e:	b580      	push	{r7, lr}
 8109110:	b088      	sub	sp, #32
 8109112:	af02      	add	r7, sp, #8
 8109114:	4603      	mov	r3, r0
 8109116:	6039      	str	r1, [r7, #0]
 8109118:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810911a:	2301      	movs	r3, #1
 810911c:	617b      	str	r3, [r7, #20]
 810911e:	2300      	movs	r3, #0
 8109120:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8109122:	79fb      	ldrb	r3, [r7, #7]
 8109124:	9300      	str	r3, [sp, #0]
 8109126:	683b      	ldr	r3, [r7, #0]
 8109128:	2200      	movs	r2, #0
 810912a:	6939      	ldr	r1, [r7, #16]
 810912c:	6978      	ldr	r0, [r7, #20]
 810912e:	f7ff feeb 	bl	8108f08 <xQueueGenericCreateStatic>
 8109132:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8109134:	68f8      	ldr	r0, [r7, #12]
 8109136:	f7ff ffb8 	bl	81090aa <prvInitialiseMutex>

		return xNewQueue;
 810913a:	68fb      	ldr	r3, [r7, #12]
	}
 810913c:	4618      	mov	r0, r3
 810913e:	3718      	adds	r7, #24
 8109140:	46bd      	mov	sp, r7
 8109142:	bd80      	pop	{r7, pc}

08109144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8109144:	b580      	push	{r7, lr}
 8109146:	b08e      	sub	sp, #56	; 0x38
 8109148:	af00      	add	r7, sp, #0
 810914a:	60f8      	str	r0, [r7, #12]
 810914c:	60b9      	str	r1, [r7, #8]
 810914e:	607a      	str	r2, [r7, #4]
 8109150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8109152:	2300      	movs	r3, #0
 8109154:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109156:	68fb      	ldr	r3, [r7, #12]
 8109158:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810915c:	2b00      	cmp	r3, #0
 810915e:	d10a      	bne.n	8109176 <xQueueGenericSend+0x32>
	__asm volatile
 8109160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109164:	f383 8811 	msr	BASEPRI, r3
 8109168:	f3bf 8f6f 	isb	sy
 810916c:	f3bf 8f4f 	dsb	sy
 8109170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8109172:	bf00      	nop
 8109174:	e7fe      	b.n	8109174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109176:	68bb      	ldr	r3, [r7, #8]
 8109178:	2b00      	cmp	r3, #0
 810917a:	d103      	bne.n	8109184 <xQueueGenericSend+0x40>
 810917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810917e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109180:	2b00      	cmp	r3, #0
 8109182:	d101      	bne.n	8109188 <xQueueGenericSend+0x44>
 8109184:	2301      	movs	r3, #1
 8109186:	e000      	b.n	810918a <xQueueGenericSend+0x46>
 8109188:	2300      	movs	r3, #0
 810918a:	2b00      	cmp	r3, #0
 810918c:	d10a      	bne.n	81091a4 <xQueueGenericSend+0x60>
	__asm volatile
 810918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109192:	f383 8811 	msr	BASEPRI, r3
 8109196:	f3bf 8f6f 	isb	sy
 810919a:	f3bf 8f4f 	dsb	sy
 810919e:	627b      	str	r3, [r7, #36]	; 0x24
}
 81091a0:	bf00      	nop
 81091a2:	e7fe      	b.n	81091a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81091a4:	683b      	ldr	r3, [r7, #0]
 81091a6:	2b02      	cmp	r3, #2
 81091a8:	d103      	bne.n	81091b2 <xQueueGenericSend+0x6e>
 81091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81091ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81091ae:	2b01      	cmp	r3, #1
 81091b0:	d101      	bne.n	81091b6 <xQueueGenericSend+0x72>
 81091b2:	2301      	movs	r3, #1
 81091b4:	e000      	b.n	81091b8 <xQueueGenericSend+0x74>
 81091b6:	2300      	movs	r3, #0
 81091b8:	2b00      	cmp	r3, #0
 81091ba:	d10a      	bne.n	81091d2 <xQueueGenericSend+0x8e>
	__asm volatile
 81091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81091c0:	f383 8811 	msr	BASEPRI, r3
 81091c4:	f3bf 8f6f 	isb	sy
 81091c8:	f3bf 8f4f 	dsb	sy
 81091cc:	623b      	str	r3, [r7, #32]
}
 81091ce:	bf00      	nop
 81091d0:	e7fe      	b.n	81091d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81091d2:	f001 fae9 	bl	810a7a8 <xTaskGetSchedulerState>
 81091d6:	4603      	mov	r3, r0
 81091d8:	2b00      	cmp	r3, #0
 81091da:	d102      	bne.n	81091e2 <xQueueGenericSend+0x9e>
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	2b00      	cmp	r3, #0
 81091e0:	d101      	bne.n	81091e6 <xQueueGenericSend+0xa2>
 81091e2:	2301      	movs	r3, #1
 81091e4:	e000      	b.n	81091e8 <xQueueGenericSend+0xa4>
 81091e6:	2300      	movs	r3, #0
 81091e8:	2b00      	cmp	r3, #0
 81091ea:	d10a      	bne.n	8109202 <xQueueGenericSend+0xbe>
	__asm volatile
 81091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81091f0:	f383 8811 	msr	BASEPRI, r3
 81091f4:	f3bf 8f6f 	isb	sy
 81091f8:	f3bf 8f4f 	dsb	sy
 81091fc:	61fb      	str	r3, [r7, #28]
}
 81091fe:	bf00      	nop
 8109200:	e7fe      	b.n	8109200 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109202:	f7ff fcf7 	bl	8108bf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8109206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810920e:	429a      	cmp	r2, r3
 8109210:	d302      	bcc.n	8109218 <xQueueGenericSend+0xd4>
 8109212:	683b      	ldr	r3, [r7, #0]
 8109214:	2b02      	cmp	r3, #2
 8109216:	d129      	bne.n	810926c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8109218:	683a      	ldr	r2, [r7, #0]
 810921a:	68b9      	ldr	r1, [r7, #8]
 810921c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810921e:	f000 fba1 	bl	8109964 <prvCopyDataToQueue>
 8109222:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109228:	2b00      	cmp	r3, #0
 810922a:	d010      	beq.n	810924e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810922e:	3324      	adds	r3, #36	; 0x24
 8109230:	4618      	mov	r0, r3
 8109232:	f001 f8f9 	bl	810a428 <xTaskRemoveFromEventList>
 8109236:	4603      	mov	r3, r0
 8109238:	2b00      	cmp	r3, #0
 810923a:	d013      	beq.n	8109264 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810923c:	4b3f      	ldr	r3, [pc, #252]	; (810933c <xQueueGenericSend+0x1f8>)
 810923e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109242:	601a      	str	r2, [r3, #0]
 8109244:	f3bf 8f4f 	dsb	sy
 8109248:	f3bf 8f6f 	isb	sy
 810924c:	e00a      	b.n	8109264 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109250:	2b00      	cmp	r3, #0
 8109252:	d007      	beq.n	8109264 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8109254:	4b39      	ldr	r3, [pc, #228]	; (810933c <xQueueGenericSend+0x1f8>)
 8109256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810925a:	601a      	str	r2, [r3, #0]
 810925c:	f3bf 8f4f 	dsb	sy
 8109260:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8109264:	f7ff fcf6 	bl	8108c54 <vPortExitCritical>
				return pdPASS;
 8109268:	2301      	movs	r3, #1
 810926a:	e063      	b.n	8109334 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810926c:	687b      	ldr	r3, [r7, #4]
 810926e:	2b00      	cmp	r3, #0
 8109270:	d103      	bne.n	810927a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109272:	f7ff fcef 	bl	8108c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8109276:	2300      	movs	r3, #0
 8109278:	e05c      	b.n	8109334 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810927a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810927c:	2b00      	cmp	r3, #0
 810927e:	d106      	bne.n	810928e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109280:	f107 0314 	add.w	r3, r7, #20
 8109284:	4618      	mov	r0, r3
 8109286:	f001 f931 	bl	810a4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810928a:	2301      	movs	r3, #1
 810928c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810928e:	f7ff fce1 	bl	8108c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109292:	f000 febf 	bl	810a014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109296:	f7ff fcad 	bl	8108bf4 <vPortEnterCritical>
 810929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810929c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81092a0:	b25b      	sxtb	r3, r3
 81092a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81092a6:	d103      	bne.n	81092b0 <xQueueGenericSend+0x16c>
 81092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81092aa:	2200      	movs	r2, #0
 81092ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81092b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81092b6:	b25b      	sxtb	r3, r3
 81092b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81092bc:	d103      	bne.n	81092c6 <xQueueGenericSend+0x182>
 81092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81092c0:	2200      	movs	r2, #0
 81092c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81092c6:	f7ff fcc5 	bl	8108c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81092ca:	1d3a      	adds	r2, r7, #4
 81092cc:	f107 0314 	add.w	r3, r7, #20
 81092d0:	4611      	mov	r1, r2
 81092d2:	4618      	mov	r0, r3
 81092d4:	f001 f920 	bl	810a518 <xTaskCheckForTimeOut>
 81092d8:	4603      	mov	r3, r0
 81092da:	2b00      	cmp	r3, #0
 81092dc:	d124      	bne.n	8109328 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81092de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81092e0:	f000 fc38 	bl	8109b54 <prvIsQueueFull>
 81092e4:	4603      	mov	r3, r0
 81092e6:	2b00      	cmp	r3, #0
 81092e8:	d018      	beq.n	810931c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81092ec:	3310      	adds	r3, #16
 81092ee:	687a      	ldr	r2, [r7, #4]
 81092f0:	4611      	mov	r1, r2
 81092f2:	4618      	mov	r0, r3
 81092f4:	f001 f874 	bl	810a3e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81092f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81092fa:	f000 fbc3 	bl	8109a84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81092fe:	f000 fe97 	bl	810a030 <xTaskResumeAll>
 8109302:	4603      	mov	r3, r0
 8109304:	2b00      	cmp	r3, #0
 8109306:	f47f af7c 	bne.w	8109202 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810930a:	4b0c      	ldr	r3, [pc, #48]	; (810933c <xQueueGenericSend+0x1f8>)
 810930c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109310:	601a      	str	r2, [r3, #0]
 8109312:	f3bf 8f4f 	dsb	sy
 8109316:	f3bf 8f6f 	isb	sy
 810931a:	e772      	b.n	8109202 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810931c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810931e:	f000 fbb1 	bl	8109a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109322:	f000 fe85 	bl	810a030 <xTaskResumeAll>
 8109326:	e76c      	b.n	8109202 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8109328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810932a:	f000 fbab 	bl	8109a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810932e:	f000 fe7f 	bl	810a030 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8109332:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8109334:	4618      	mov	r0, r3
 8109336:	3738      	adds	r7, #56	; 0x38
 8109338:	46bd      	mov	sp, r7
 810933a:	bd80      	pop	{r7, pc}
 810933c:	e000ed04 	.word	0xe000ed04

08109340 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8109340:	b580      	push	{r7, lr}
 8109342:	b08e      	sub	sp, #56	; 0x38
 8109344:	af00      	add	r7, sp, #0
 8109346:	6078      	str	r0, [r7, #4]
 8109348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810934a:	687b      	ldr	r3, [r7, #4]
 810934c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109350:	2b00      	cmp	r3, #0
 8109352:	d10a      	bne.n	810936a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8109354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109358:	f383 8811 	msr	BASEPRI, r3
 810935c:	f3bf 8f6f 	isb	sy
 8109360:	f3bf 8f4f 	dsb	sy
 8109364:	623b      	str	r3, [r7, #32]
}
 8109366:	bf00      	nop
 8109368:	e7fe      	b.n	8109368 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810936e:	2b00      	cmp	r3, #0
 8109370:	d00a      	beq.n	8109388 <xQueueGiveFromISR+0x48>
	__asm volatile
 8109372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109376:	f383 8811 	msr	BASEPRI, r3
 810937a:	f3bf 8f6f 	isb	sy
 810937e:	f3bf 8f4f 	dsb	sy
 8109382:	61fb      	str	r3, [r7, #28]
}
 8109384:	bf00      	nop
 8109386:	e7fe      	b.n	8109386 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8109388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810938a:	681b      	ldr	r3, [r3, #0]
 810938c:	2b00      	cmp	r3, #0
 810938e:	d103      	bne.n	8109398 <xQueueGiveFromISR+0x58>
 8109390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109392:	689b      	ldr	r3, [r3, #8]
 8109394:	2b00      	cmp	r3, #0
 8109396:	d101      	bne.n	810939c <xQueueGiveFromISR+0x5c>
 8109398:	2301      	movs	r3, #1
 810939a:	e000      	b.n	810939e <xQueueGiveFromISR+0x5e>
 810939c:	2300      	movs	r3, #0
 810939e:	2b00      	cmp	r3, #0
 81093a0:	d10a      	bne.n	81093b8 <xQueueGiveFromISR+0x78>
	__asm volatile
 81093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81093a6:	f383 8811 	msr	BASEPRI, r3
 81093aa:	f3bf 8f6f 	isb	sy
 81093ae:	f3bf 8f4f 	dsb	sy
 81093b2:	61bb      	str	r3, [r7, #24]
}
 81093b4:	bf00      	nop
 81093b6:	e7fe      	b.n	81093b6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81093b8:	f7ff fcfe 	bl	8108db8 <vPortValidateInterruptPriority>
	__asm volatile
 81093bc:	f3ef 8211 	mrs	r2, BASEPRI
 81093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81093c4:	f383 8811 	msr	BASEPRI, r3
 81093c8:	f3bf 8f6f 	isb	sy
 81093cc:	f3bf 8f4f 	dsb	sy
 81093d0:	617a      	str	r2, [r7, #20]
 81093d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81093d4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093dc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 81093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81093e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81093e4:	429a      	cmp	r2, r3
 81093e6:	d22b      	bcs.n	8109440 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81093ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81093ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81093f4:	1c5a      	adds	r2, r3, #1
 81093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81093f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81093fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81093fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109402:	d112      	bne.n	810942a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109408:	2b00      	cmp	r3, #0
 810940a:	d016      	beq.n	810943a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810940e:	3324      	adds	r3, #36	; 0x24
 8109410:	4618      	mov	r0, r3
 8109412:	f001 f809 	bl	810a428 <xTaskRemoveFromEventList>
 8109416:	4603      	mov	r3, r0
 8109418:	2b00      	cmp	r3, #0
 810941a:	d00e      	beq.n	810943a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810941c:	683b      	ldr	r3, [r7, #0]
 810941e:	2b00      	cmp	r3, #0
 8109420:	d00b      	beq.n	810943a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8109422:	683b      	ldr	r3, [r7, #0]
 8109424:	2201      	movs	r2, #1
 8109426:	601a      	str	r2, [r3, #0]
 8109428:	e007      	b.n	810943a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810942a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810942e:	3301      	adds	r3, #1
 8109430:	b2db      	uxtb	r3, r3
 8109432:	b25a      	sxtb	r2, r3
 8109434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810943a:	2301      	movs	r3, #1
 810943c:	637b      	str	r3, [r7, #52]	; 0x34
 810943e:	e001      	b.n	8109444 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8109440:	2300      	movs	r3, #0
 8109442:	637b      	str	r3, [r7, #52]	; 0x34
 8109444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109446:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8109448:	68fb      	ldr	r3, [r7, #12]
 810944a:	f383 8811 	msr	BASEPRI, r3
}
 810944e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8109450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8109452:	4618      	mov	r0, r3
 8109454:	3738      	adds	r7, #56	; 0x38
 8109456:	46bd      	mov	sp, r7
 8109458:	bd80      	pop	{r7, pc}
	...

0810945c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810945c:	b580      	push	{r7, lr}
 810945e:	b08c      	sub	sp, #48	; 0x30
 8109460:	af00      	add	r7, sp, #0
 8109462:	60f8      	str	r0, [r7, #12]
 8109464:	60b9      	str	r1, [r7, #8]
 8109466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8109468:	2300      	movs	r3, #0
 810946a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810946c:	68fb      	ldr	r3, [r7, #12]
 810946e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8109470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109472:	2b00      	cmp	r3, #0
 8109474:	d10a      	bne.n	810948c <xQueueReceive+0x30>
	__asm volatile
 8109476:	f04f 0350 	mov.w	r3, #80	; 0x50
 810947a:	f383 8811 	msr	BASEPRI, r3
 810947e:	f3bf 8f6f 	isb	sy
 8109482:	f3bf 8f4f 	dsb	sy
 8109486:	623b      	str	r3, [r7, #32]
}
 8109488:	bf00      	nop
 810948a:	e7fe      	b.n	810948a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810948c:	68bb      	ldr	r3, [r7, #8]
 810948e:	2b00      	cmp	r3, #0
 8109490:	d103      	bne.n	810949a <xQueueReceive+0x3e>
 8109492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109496:	2b00      	cmp	r3, #0
 8109498:	d101      	bne.n	810949e <xQueueReceive+0x42>
 810949a:	2301      	movs	r3, #1
 810949c:	e000      	b.n	81094a0 <xQueueReceive+0x44>
 810949e:	2300      	movs	r3, #0
 81094a0:	2b00      	cmp	r3, #0
 81094a2:	d10a      	bne.n	81094ba <xQueueReceive+0x5e>
	__asm volatile
 81094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094a8:	f383 8811 	msr	BASEPRI, r3
 81094ac:	f3bf 8f6f 	isb	sy
 81094b0:	f3bf 8f4f 	dsb	sy
 81094b4:	61fb      	str	r3, [r7, #28]
}
 81094b6:	bf00      	nop
 81094b8:	e7fe      	b.n	81094b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81094ba:	f001 f975 	bl	810a7a8 <xTaskGetSchedulerState>
 81094be:	4603      	mov	r3, r0
 81094c0:	2b00      	cmp	r3, #0
 81094c2:	d102      	bne.n	81094ca <xQueueReceive+0x6e>
 81094c4:	687b      	ldr	r3, [r7, #4]
 81094c6:	2b00      	cmp	r3, #0
 81094c8:	d101      	bne.n	81094ce <xQueueReceive+0x72>
 81094ca:	2301      	movs	r3, #1
 81094cc:	e000      	b.n	81094d0 <xQueueReceive+0x74>
 81094ce:	2300      	movs	r3, #0
 81094d0:	2b00      	cmp	r3, #0
 81094d2:	d10a      	bne.n	81094ea <xQueueReceive+0x8e>
	__asm volatile
 81094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094d8:	f383 8811 	msr	BASEPRI, r3
 81094dc:	f3bf 8f6f 	isb	sy
 81094e0:	f3bf 8f4f 	dsb	sy
 81094e4:	61bb      	str	r3, [r7, #24]
}
 81094e6:	bf00      	nop
 81094e8:	e7fe      	b.n	81094e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81094ea:	f7ff fb83 	bl	8108bf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81094f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094f6:	2b00      	cmp	r3, #0
 81094f8:	d01f      	beq.n	810953a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81094fa:	68b9      	ldr	r1, [r7, #8]
 81094fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81094fe:	f000 fa9b 	bl	8109a38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8109502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109504:	1e5a      	subs	r2, r3, #1
 8109506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109508:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810950c:	691b      	ldr	r3, [r3, #16]
 810950e:	2b00      	cmp	r3, #0
 8109510:	d00f      	beq.n	8109532 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109514:	3310      	adds	r3, #16
 8109516:	4618      	mov	r0, r3
 8109518:	f000 ff86 	bl	810a428 <xTaskRemoveFromEventList>
 810951c:	4603      	mov	r3, r0
 810951e:	2b00      	cmp	r3, #0
 8109520:	d007      	beq.n	8109532 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8109522:	4b3d      	ldr	r3, [pc, #244]	; (8109618 <xQueueReceive+0x1bc>)
 8109524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109528:	601a      	str	r2, [r3, #0]
 810952a:	f3bf 8f4f 	dsb	sy
 810952e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8109532:	f7ff fb8f 	bl	8108c54 <vPortExitCritical>
				return pdPASS;
 8109536:	2301      	movs	r3, #1
 8109538:	e069      	b.n	810960e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810953a:	687b      	ldr	r3, [r7, #4]
 810953c:	2b00      	cmp	r3, #0
 810953e:	d103      	bne.n	8109548 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109540:	f7ff fb88 	bl	8108c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8109544:	2300      	movs	r3, #0
 8109546:	e062      	b.n	810960e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810954a:	2b00      	cmp	r3, #0
 810954c:	d106      	bne.n	810955c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810954e:	f107 0310 	add.w	r3, r7, #16
 8109552:	4618      	mov	r0, r3
 8109554:	f000 ffca 	bl	810a4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109558:	2301      	movs	r3, #1
 810955a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810955c:	f7ff fb7a 	bl	8108c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109560:	f000 fd58 	bl	810a014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109564:	f7ff fb46 	bl	8108bf4 <vPortEnterCritical>
 8109568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810956a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810956e:	b25b      	sxtb	r3, r3
 8109570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109574:	d103      	bne.n	810957e <xQueueReceive+0x122>
 8109576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109578:	2200      	movs	r2, #0
 810957a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109584:	b25b      	sxtb	r3, r3
 8109586:	f1b3 3fff 	cmp.w	r3, #4294967295
 810958a:	d103      	bne.n	8109594 <xQueueReceive+0x138>
 810958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810958e:	2200      	movs	r2, #0
 8109590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109594:	f7ff fb5e 	bl	8108c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109598:	1d3a      	adds	r2, r7, #4
 810959a:	f107 0310 	add.w	r3, r7, #16
 810959e:	4611      	mov	r1, r2
 81095a0:	4618      	mov	r0, r3
 81095a2:	f000 ffb9 	bl	810a518 <xTaskCheckForTimeOut>
 81095a6:	4603      	mov	r3, r0
 81095a8:	2b00      	cmp	r3, #0
 81095aa:	d123      	bne.n	81095f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81095ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81095ae:	f000 fabb 	bl	8109b28 <prvIsQueueEmpty>
 81095b2:	4603      	mov	r3, r0
 81095b4:	2b00      	cmp	r3, #0
 81095b6:	d017      	beq.n	81095e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81095ba:	3324      	adds	r3, #36	; 0x24
 81095bc:	687a      	ldr	r2, [r7, #4]
 81095be:	4611      	mov	r1, r2
 81095c0:	4618      	mov	r0, r3
 81095c2:	f000 ff0d 	bl	810a3e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81095c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81095c8:	f000 fa5c 	bl	8109a84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81095cc:	f000 fd30 	bl	810a030 <xTaskResumeAll>
 81095d0:	4603      	mov	r3, r0
 81095d2:	2b00      	cmp	r3, #0
 81095d4:	d189      	bne.n	81094ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 81095d6:	4b10      	ldr	r3, [pc, #64]	; (8109618 <xQueueReceive+0x1bc>)
 81095d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81095dc:	601a      	str	r2, [r3, #0]
 81095de:	f3bf 8f4f 	dsb	sy
 81095e2:	f3bf 8f6f 	isb	sy
 81095e6:	e780      	b.n	81094ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81095e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81095ea:	f000 fa4b 	bl	8109a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81095ee:	f000 fd1f 	bl	810a030 <xTaskResumeAll>
 81095f2:	e77a      	b.n	81094ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81095f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81095f6:	f000 fa45 	bl	8109a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81095fa:	f000 fd19 	bl	810a030 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81095fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109600:	f000 fa92 	bl	8109b28 <prvIsQueueEmpty>
 8109604:	4603      	mov	r3, r0
 8109606:	2b00      	cmp	r3, #0
 8109608:	f43f af6f 	beq.w	81094ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810960c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810960e:	4618      	mov	r0, r3
 8109610:	3730      	adds	r7, #48	; 0x30
 8109612:	46bd      	mov	sp, r7
 8109614:	bd80      	pop	{r7, pc}
 8109616:	bf00      	nop
 8109618:	e000ed04 	.word	0xe000ed04

0810961c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810961c:	b580      	push	{r7, lr}
 810961e:	b08e      	sub	sp, #56	; 0x38
 8109620:	af00      	add	r7, sp, #0
 8109622:	6078      	str	r0, [r7, #4]
 8109624:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8109626:	2300      	movs	r3, #0
 8109628:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810962a:	687b      	ldr	r3, [r7, #4]
 810962c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810962e:	2300      	movs	r3, #0
 8109630:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8109632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109634:	2b00      	cmp	r3, #0
 8109636:	d10a      	bne.n	810964e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8109638:	f04f 0350 	mov.w	r3, #80	; 0x50
 810963c:	f383 8811 	msr	BASEPRI, r3
 8109640:	f3bf 8f6f 	isb	sy
 8109644:	f3bf 8f4f 	dsb	sy
 8109648:	623b      	str	r3, [r7, #32]
}
 810964a:	bf00      	nop
 810964c:	e7fe      	b.n	810964c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109652:	2b00      	cmp	r3, #0
 8109654:	d00a      	beq.n	810966c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8109656:	f04f 0350 	mov.w	r3, #80	; 0x50
 810965a:	f383 8811 	msr	BASEPRI, r3
 810965e:	f3bf 8f6f 	isb	sy
 8109662:	f3bf 8f4f 	dsb	sy
 8109666:	61fb      	str	r3, [r7, #28]
}
 8109668:	bf00      	nop
 810966a:	e7fe      	b.n	810966a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810966c:	f001 f89c 	bl	810a7a8 <xTaskGetSchedulerState>
 8109670:	4603      	mov	r3, r0
 8109672:	2b00      	cmp	r3, #0
 8109674:	d102      	bne.n	810967c <xQueueSemaphoreTake+0x60>
 8109676:	683b      	ldr	r3, [r7, #0]
 8109678:	2b00      	cmp	r3, #0
 810967a:	d101      	bne.n	8109680 <xQueueSemaphoreTake+0x64>
 810967c:	2301      	movs	r3, #1
 810967e:	e000      	b.n	8109682 <xQueueSemaphoreTake+0x66>
 8109680:	2300      	movs	r3, #0
 8109682:	2b00      	cmp	r3, #0
 8109684:	d10a      	bne.n	810969c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8109686:	f04f 0350 	mov.w	r3, #80	; 0x50
 810968a:	f383 8811 	msr	BASEPRI, r3
 810968e:	f3bf 8f6f 	isb	sy
 8109692:	f3bf 8f4f 	dsb	sy
 8109696:	61bb      	str	r3, [r7, #24]
}
 8109698:	bf00      	nop
 810969a:	e7fe      	b.n	810969a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810969c:	f7ff faaa 	bl	8108bf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 81096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81096a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 81096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096a8:	2b00      	cmp	r3, #0
 81096aa:	d024      	beq.n	81096f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 81096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096ae:	1e5a      	subs	r2, r3, #1
 81096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096b6:	681b      	ldr	r3, [r3, #0]
 81096b8:	2b00      	cmp	r3, #0
 81096ba:	d104      	bne.n	81096c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 81096bc:	f001 fa1c 	bl	810aaf8 <pvTaskIncrementMutexHeldCount>
 81096c0:	4602      	mov	r2, r0
 81096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096c8:	691b      	ldr	r3, [r3, #16]
 81096ca:	2b00      	cmp	r3, #0
 81096cc:	d00f      	beq.n	81096ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096d0:	3310      	adds	r3, #16
 81096d2:	4618      	mov	r0, r3
 81096d4:	f000 fea8 	bl	810a428 <xTaskRemoveFromEventList>
 81096d8:	4603      	mov	r3, r0
 81096da:	2b00      	cmp	r3, #0
 81096dc:	d007      	beq.n	81096ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81096de:	4b54      	ldr	r3, [pc, #336]	; (8109830 <xQueueSemaphoreTake+0x214>)
 81096e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81096e4:	601a      	str	r2, [r3, #0]
 81096e6:	f3bf 8f4f 	dsb	sy
 81096ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81096ee:	f7ff fab1 	bl	8108c54 <vPortExitCritical>
				return pdPASS;
 81096f2:	2301      	movs	r3, #1
 81096f4:	e097      	b.n	8109826 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81096f6:	683b      	ldr	r3, [r7, #0]
 81096f8:	2b00      	cmp	r3, #0
 81096fa:	d111      	bne.n	8109720 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 81096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096fe:	2b00      	cmp	r3, #0
 8109700:	d00a      	beq.n	8109718 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8109702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109706:	f383 8811 	msr	BASEPRI, r3
 810970a:	f3bf 8f6f 	isb	sy
 810970e:	f3bf 8f4f 	dsb	sy
 8109712:	617b      	str	r3, [r7, #20]
}
 8109714:	bf00      	nop
 8109716:	e7fe      	b.n	8109716 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8109718:	f7ff fa9c 	bl	8108c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810971c:	2300      	movs	r3, #0
 810971e:	e082      	b.n	8109826 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109722:	2b00      	cmp	r3, #0
 8109724:	d106      	bne.n	8109734 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109726:	f107 030c 	add.w	r3, r7, #12
 810972a:	4618      	mov	r0, r3
 810972c:	f000 fede 	bl	810a4ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109730:	2301      	movs	r3, #1
 8109732:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109734:	f7ff fa8e 	bl	8108c54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109738:	f000 fc6c 	bl	810a014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810973c:	f7ff fa5a 	bl	8108bf4 <vPortEnterCritical>
 8109740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109746:	b25b      	sxtb	r3, r3
 8109748:	f1b3 3fff 	cmp.w	r3, #4294967295
 810974c:	d103      	bne.n	8109756 <xQueueSemaphoreTake+0x13a>
 810974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109750:	2200      	movs	r2, #0
 8109752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810975c:	b25b      	sxtb	r3, r3
 810975e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109762:	d103      	bne.n	810976c <xQueueSemaphoreTake+0x150>
 8109764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109766:	2200      	movs	r2, #0
 8109768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810976c:	f7ff fa72 	bl	8108c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109770:	463a      	mov	r2, r7
 8109772:	f107 030c 	add.w	r3, r7, #12
 8109776:	4611      	mov	r1, r2
 8109778:	4618      	mov	r0, r3
 810977a:	f000 fecd 	bl	810a518 <xTaskCheckForTimeOut>
 810977e:	4603      	mov	r3, r0
 8109780:	2b00      	cmp	r3, #0
 8109782:	d132      	bne.n	81097ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109786:	f000 f9cf 	bl	8109b28 <prvIsQueueEmpty>
 810978a:	4603      	mov	r3, r0
 810978c:	2b00      	cmp	r3, #0
 810978e:	d026      	beq.n	81097de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109792:	681b      	ldr	r3, [r3, #0]
 8109794:	2b00      	cmp	r3, #0
 8109796:	d109      	bne.n	81097ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8109798:	f7ff fa2c 	bl	8108bf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810979e:	689b      	ldr	r3, [r3, #8]
 81097a0:	4618      	mov	r0, r3
 81097a2:	f001 f81f 	bl	810a7e4 <xTaskPriorityInherit>
 81097a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 81097a8:	f7ff fa54 	bl	8108c54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81097ae:	3324      	adds	r3, #36	; 0x24
 81097b0:	683a      	ldr	r2, [r7, #0]
 81097b2:	4611      	mov	r1, r2
 81097b4:	4618      	mov	r0, r3
 81097b6:	f000 fe13 	bl	810a3e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81097ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81097bc:	f000 f962 	bl	8109a84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81097c0:	f000 fc36 	bl	810a030 <xTaskResumeAll>
 81097c4:	4603      	mov	r3, r0
 81097c6:	2b00      	cmp	r3, #0
 81097c8:	f47f af68 	bne.w	810969c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 81097cc:	4b18      	ldr	r3, [pc, #96]	; (8109830 <xQueueSemaphoreTake+0x214>)
 81097ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81097d2:	601a      	str	r2, [r3, #0]
 81097d4:	f3bf 8f4f 	dsb	sy
 81097d8:	f3bf 8f6f 	isb	sy
 81097dc:	e75e      	b.n	810969c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 81097de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81097e0:	f000 f950 	bl	8109a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81097e4:	f000 fc24 	bl	810a030 <xTaskResumeAll>
 81097e8:	e758      	b.n	810969c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 81097ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81097ec:	f000 f94a 	bl	8109a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81097f0:	f000 fc1e 	bl	810a030 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81097f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81097f6:	f000 f997 	bl	8109b28 <prvIsQueueEmpty>
 81097fa:	4603      	mov	r3, r0
 81097fc:	2b00      	cmp	r3, #0
 81097fe:	f43f af4d 	beq.w	810969c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8109802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109804:	2b00      	cmp	r3, #0
 8109806:	d00d      	beq.n	8109824 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8109808:	f7ff f9f4 	bl	8108bf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810980c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810980e:	f000 f891 	bl	8109934 <prvGetDisinheritPriorityAfterTimeout>
 8109812:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8109814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109816:	689b      	ldr	r3, [r3, #8]
 8109818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810981a:	4618      	mov	r0, r3
 810981c:	f001 f8de 	bl	810a9dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8109820:	f7ff fa18 	bl	8108c54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109824:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8109826:	4618      	mov	r0, r3
 8109828:	3738      	adds	r7, #56	; 0x38
 810982a:	46bd      	mov	sp, r7
 810982c:	bd80      	pop	{r7, pc}
 810982e:	bf00      	nop
 8109830:	e000ed04 	.word	0xe000ed04

08109834 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8109834:	b580      	push	{r7, lr}
 8109836:	b08e      	sub	sp, #56	; 0x38
 8109838:	af00      	add	r7, sp, #0
 810983a:	60f8      	str	r0, [r7, #12]
 810983c:	60b9      	str	r1, [r7, #8]
 810983e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8109840:	68fb      	ldr	r3, [r7, #12]
 8109842:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8109844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109846:	2b00      	cmp	r3, #0
 8109848:	d10a      	bne.n	8109860 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 810984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810984e:	f383 8811 	msr	BASEPRI, r3
 8109852:	f3bf 8f6f 	isb	sy
 8109856:	f3bf 8f4f 	dsb	sy
 810985a:	623b      	str	r3, [r7, #32]
}
 810985c:	bf00      	nop
 810985e:	e7fe      	b.n	810985e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109860:	68bb      	ldr	r3, [r7, #8]
 8109862:	2b00      	cmp	r3, #0
 8109864:	d103      	bne.n	810986e <xQueueReceiveFromISR+0x3a>
 8109866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810986a:	2b00      	cmp	r3, #0
 810986c:	d101      	bne.n	8109872 <xQueueReceiveFromISR+0x3e>
 810986e:	2301      	movs	r3, #1
 8109870:	e000      	b.n	8109874 <xQueueReceiveFromISR+0x40>
 8109872:	2300      	movs	r3, #0
 8109874:	2b00      	cmp	r3, #0
 8109876:	d10a      	bne.n	810988e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8109878:	f04f 0350 	mov.w	r3, #80	; 0x50
 810987c:	f383 8811 	msr	BASEPRI, r3
 8109880:	f3bf 8f6f 	isb	sy
 8109884:	f3bf 8f4f 	dsb	sy
 8109888:	61fb      	str	r3, [r7, #28]
}
 810988a:	bf00      	nop
 810988c:	e7fe      	b.n	810988c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810988e:	f7ff fa93 	bl	8108db8 <vPortValidateInterruptPriority>
	__asm volatile
 8109892:	f3ef 8211 	mrs	r2, BASEPRI
 8109896:	f04f 0350 	mov.w	r3, #80	; 0x50
 810989a:	f383 8811 	msr	BASEPRI, r3
 810989e:	f3bf 8f6f 	isb	sy
 81098a2:	f3bf 8f4f 	dsb	sy
 81098a6:	61ba      	str	r2, [r7, #24]
 81098a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81098aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81098b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81098b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81098b6:	2b00      	cmp	r3, #0
 81098b8:	d02f      	beq.n	810991a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 81098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81098bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81098c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 81098c4:	68b9      	ldr	r1, [r7, #8]
 81098c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81098c8:	f000 f8b6 	bl	8109a38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81098ce:	1e5a      	subs	r2, r3, #1
 81098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81098d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 81098d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81098dc:	d112      	bne.n	8109904 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81098e0:	691b      	ldr	r3, [r3, #16]
 81098e2:	2b00      	cmp	r3, #0
 81098e4:	d016      	beq.n	8109914 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81098e8:	3310      	adds	r3, #16
 81098ea:	4618      	mov	r0, r3
 81098ec:	f000 fd9c 	bl	810a428 <xTaskRemoveFromEventList>
 81098f0:	4603      	mov	r3, r0
 81098f2:	2b00      	cmp	r3, #0
 81098f4:	d00e      	beq.n	8109914 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 81098f6:	687b      	ldr	r3, [r7, #4]
 81098f8:	2b00      	cmp	r3, #0
 81098fa:	d00b      	beq.n	8109914 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 81098fc:	687b      	ldr	r3, [r7, #4]
 81098fe:	2201      	movs	r2, #1
 8109900:	601a      	str	r2, [r3, #0]
 8109902:	e007      	b.n	8109914 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8109904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8109908:	3301      	adds	r3, #1
 810990a:	b2db      	uxtb	r3, r3
 810990c:	b25a      	sxtb	r2, r3
 810990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8109914:	2301      	movs	r3, #1
 8109916:	637b      	str	r3, [r7, #52]	; 0x34
 8109918:	e001      	b.n	810991e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 810991a:	2300      	movs	r3, #0
 810991c:	637b      	str	r3, [r7, #52]	; 0x34
 810991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109920:	613b      	str	r3, [r7, #16]
	__asm volatile
 8109922:	693b      	ldr	r3, [r7, #16]
 8109924:	f383 8811 	msr	BASEPRI, r3
}
 8109928:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810992a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810992c:	4618      	mov	r0, r3
 810992e:	3738      	adds	r7, #56	; 0x38
 8109930:	46bd      	mov	sp, r7
 8109932:	bd80      	pop	{r7, pc}

08109934 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8109934:	b480      	push	{r7}
 8109936:	b085      	sub	sp, #20
 8109938:	af00      	add	r7, sp, #0
 810993a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109940:	2b00      	cmp	r3, #0
 8109942:	d006      	beq.n	8109952 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8109944:	687b      	ldr	r3, [r7, #4]
 8109946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109948:	681b      	ldr	r3, [r3, #0]
 810994a:	f1c3 0307 	rsb	r3, r3, #7
 810994e:	60fb      	str	r3, [r7, #12]
 8109950:	e001      	b.n	8109956 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8109952:	2300      	movs	r3, #0
 8109954:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8109956:	68fb      	ldr	r3, [r7, #12]
	}
 8109958:	4618      	mov	r0, r3
 810995a:	3714      	adds	r7, #20
 810995c:	46bd      	mov	sp, r7
 810995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109962:	4770      	bx	lr

08109964 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109964:	b580      	push	{r7, lr}
 8109966:	b086      	sub	sp, #24
 8109968:	af00      	add	r7, sp, #0
 810996a:	60f8      	str	r0, [r7, #12]
 810996c:	60b9      	str	r1, [r7, #8]
 810996e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8109970:	2300      	movs	r3, #0
 8109972:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109974:	68fb      	ldr	r3, [r7, #12]
 8109976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109978:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810997a:	68fb      	ldr	r3, [r7, #12]
 810997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810997e:	2b00      	cmp	r3, #0
 8109980:	d10d      	bne.n	810999e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109982:	68fb      	ldr	r3, [r7, #12]
 8109984:	681b      	ldr	r3, [r3, #0]
 8109986:	2b00      	cmp	r3, #0
 8109988:	d14d      	bne.n	8109a26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810998a:	68fb      	ldr	r3, [r7, #12]
 810998c:	689b      	ldr	r3, [r3, #8]
 810998e:	4618      	mov	r0, r3
 8109990:	f000 ff9e 	bl	810a8d0 <xTaskPriorityDisinherit>
 8109994:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109996:	68fb      	ldr	r3, [r7, #12]
 8109998:	2200      	movs	r2, #0
 810999a:	609a      	str	r2, [r3, #8]
 810999c:	e043      	b.n	8109a26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810999e:	687b      	ldr	r3, [r7, #4]
 81099a0:	2b00      	cmp	r3, #0
 81099a2:	d119      	bne.n	81099d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81099a4:	68fb      	ldr	r3, [r7, #12]
 81099a6:	6858      	ldr	r0, [r3, #4]
 81099a8:	68fb      	ldr	r3, [r7, #12]
 81099aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099ac:	461a      	mov	r2, r3
 81099ae:	68b9      	ldr	r1, [r7, #8]
 81099b0:	f008 fca3 	bl	81122fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81099b4:	68fb      	ldr	r3, [r7, #12]
 81099b6:	685a      	ldr	r2, [r3, #4]
 81099b8:	68fb      	ldr	r3, [r7, #12]
 81099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099bc:	441a      	add	r2, r3
 81099be:	68fb      	ldr	r3, [r7, #12]
 81099c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81099c2:	68fb      	ldr	r3, [r7, #12]
 81099c4:	685a      	ldr	r2, [r3, #4]
 81099c6:	68fb      	ldr	r3, [r7, #12]
 81099c8:	689b      	ldr	r3, [r3, #8]
 81099ca:	429a      	cmp	r2, r3
 81099cc:	d32b      	bcc.n	8109a26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81099ce:	68fb      	ldr	r3, [r7, #12]
 81099d0:	681a      	ldr	r2, [r3, #0]
 81099d2:	68fb      	ldr	r3, [r7, #12]
 81099d4:	605a      	str	r2, [r3, #4]
 81099d6:	e026      	b.n	8109a26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81099d8:	68fb      	ldr	r3, [r7, #12]
 81099da:	68d8      	ldr	r0, [r3, #12]
 81099dc:	68fb      	ldr	r3, [r7, #12]
 81099de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099e0:	461a      	mov	r2, r3
 81099e2:	68b9      	ldr	r1, [r7, #8]
 81099e4:	f008 fc89 	bl	81122fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81099e8:	68fb      	ldr	r3, [r7, #12]
 81099ea:	68da      	ldr	r2, [r3, #12]
 81099ec:	68fb      	ldr	r3, [r7, #12]
 81099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099f0:	425b      	negs	r3, r3
 81099f2:	441a      	add	r2, r3
 81099f4:	68fb      	ldr	r3, [r7, #12]
 81099f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81099f8:	68fb      	ldr	r3, [r7, #12]
 81099fa:	68da      	ldr	r2, [r3, #12]
 81099fc:	68fb      	ldr	r3, [r7, #12]
 81099fe:	681b      	ldr	r3, [r3, #0]
 8109a00:	429a      	cmp	r2, r3
 8109a02:	d207      	bcs.n	8109a14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8109a04:	68fb      	ldr	r3, [r7, #12]
 8109a06:	689a      	ldr	r2, [r3, #8]
 8109a08:	68fb      	ldr	r3, [r7, #12]
 8109a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a0c:	425b      	negs	r3, r3
 8109a0e:	441a      	add	r2, r3
 8109a10:	68fb      	ldr	r3, [r7, #12]
 8109a12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8109a14:	687b      	ldr	r3, [r7, #4]
 8109a16:	2b02      	cmp	r3, #2
 8109a18:	d105      	bne.n	8109a26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8109a1a:	693b      	ldr	r3, [r7, #16]
 8109a1c:	2b00      	cmp	r3, #0
 8109a1e:	d002      	beq.n	8109a26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8109a20:	693b      	ldr	r3, [r7, #16]
 8109a22:	3b01      	subs	r3, #1
 8109a24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8109a26:	693b      	ldr	r3, [r7, #16]
 8109a28:	1c5a      	adds	r2, r3, #1
 8109a2a:	68fb      	ldr	r3, [r7, #12]
 8109a2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8109a2e:	697b      	ldr	r3, [r7, #20]
}
 8109a30:	4618      	mov	r0, r3
 8109a32:	3718      	adds	r7, #24
 8109a34:	46bd      	mov	sp, r7
 8109a36:	bd80      	pop	{r7, pc}

08109a38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8109a38:	b580      	push	{r7, lr}
 8109a3a:	b082      	sub	sp, #8
 8109a3c:	af00      	add	r7, sp, #0
 8109a3e:	6078      	str	r0, [r7, #4]
 8109a40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8109a42:	687b      	ldr	r3, [r7, #4]
 8109a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a46:	2b00      	cmp	r3, #0
 8109a48:	d018      	beq.n	8109a7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	68da      	ldr	r2, [r3, #12]
 8109a4e:	687b      	ldr	r3, [r7, #4]
 8109a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a52:	441a      	add	r2, r3
 8109a54:	687b      	ldr	r3, [r7, #4]
 8109a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8109a58:	687b      	ldr	r3, [r7, #4]
 8109a5a:	68da      	ldr	r2, [r3, #12]
 8109a5c:	687b      	ldr	r3, [r7, #4]
 8109a5e:	689b      	ldr	r3, [r3, #8]
 8109a60:	429a      	cmp	r2, r3
 8109a62:	d303      	bcc.n	8109a6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8109a64:	687b      	ldr	r3, [r7, #4]
 8109a66:	681a      	ldr	r2, [r3, #0]
 8109a68:	687b      	ldr	r3, [r7, #4]
 8109a6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	68d9      	ldr	r1, [r3, #12]
 8109a70:	687b      	ldr	r3, [r7, #4]
 8109a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a74:	461a      	mov	r2, r3
 8109a76:	6838      	ldr	r0, [r7, #0]
 8109a78:	f008 fc3f 	bl	81122fa <memcpy>
	}
}
 8109a7c:	bf00      	nop
 8109a7e:	3708      	adds	r7, #8
 8109a80:	46bd      	mov	sp, r7
 8109a82:	bd80      	pop	{r7, pc}

08109a84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8109a84:	b580      	push	{r7, lr}
 8109a86:	b084      	sub	sp, #16
 8109a88:	af00      	add	r7, sp, #0
 8109a8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8109a8c:	f7ff f8b2 	bl	8108bf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8109a90:	687b      	ldr	r3, [r7, #4]
 8109a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109a96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109a98:	e011      	b.n	8109abe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109a9a:	687b      	ldr	r3, [r7, #4]
 8109a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a9e:	2b00      	cmp	r3, #0
 8109aa0:	d012      	beq.n	8109ac8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109aa2:	687b      	ldr	r3, [r7, #4]
 8109aa4:	3324      	adds	r3, #36	; 0x24
 8109aa6:	4618      	mov	r0, r3
 8109aa8:	f000 fcbe 	bl	810a428 <xTaskRemoveFromEventList>
 8109aac:	4603      	mov	r3, r0
 8109aae:	2b00      	cmp	r3, #0
 8109ab0:	d001      	beq.n	8109ab6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8109ab2:	f000 fd93 	bl	810a5dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8109ab6:	7bfb      	ldrb	r3, [r7, #15]
 8109ab8:	3b01      	subs	r3, #1
 8109aba:	b2db      	uxtb	r3, r3
 8109abc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109ac2:	2b00      	cmp	r3, #0
 8109ac4:	dce9      	bgt.n	8109a9a <prvUnlockQueue+0x16>
 8109ac6:	e000      	b.n	8109aca <prvUnlockQueue+0x46>
					break;
 8109ac8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	22ff      	movs	r2, #255	; 0xff
 8109ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8109ad2:	f7ff f8bf 	bl	8108c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8109ad6:	f7ff f88d 	bl	8108bf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109ae0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109ae2:	e011      	b.n	8109b08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109ae4:	687b      	ldr	r3, [r7, #4]
 8109ae6:	691b      	ldr	r3, [r3, #16]
 8109ae8:	2b00      	cmp	r3, #0
 8109aea:	d012      	beq.n	8109b12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109aec:	687b      	ldr	r3, [r7, #4]
 8109aee:	3310      	adds	r3, #16
 8109af0:	4618      	mov	r0, r3
 8109af2:	f000 fc99 	bl	810a428 <xTaskRemoveFromEventList>
 8109af6:	4603      	mov	r3, r0
 8109af8:	2b00      	cmp	r3, #0
 8109afa:	d001      	beq.n	8109b00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8109afc:	f000 fd6e 	bl	810a5dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8109b00:	7bbb      	ldrb	r3, [r7, #14]
 8109b02:	3b01      	subs	r3, #1
 8109b04:	b2db      	uxtb	r3, r3
 8109b06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8109b0c:	2b00      	cmp	r3, #0
 8109b0e:	dce9      	bgt.n	8109ae4 <prvUnlockQueue+0x60>
 8109b10:	e000      	b.n	8109b14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8109b12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8109b14:	687b      	ldr	r3, [r7, #4]
 8109b16:	22ff      	movs	r2, #255	; 0xff
 8109b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8109b1c:	f7ff f89a 	bl	8108c54 <vPortExitCritical>
}
 8109b20:	bf00      	nop
 8109b22:	3710      	adds	r7, #16
 8109b24:	46bd      	mov	sp, r7
 8109b26:	bd80      	pop	{r7, pc}

08109b28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8109b28:	b580      	push	{r7, lr}
 8109b2a:	b084      	sub	sp, #16
 8109b2c:	af00      	add	r7, sp, #0
 8109b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8109b30:	f7ff f860 	bl	8108bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109b38:	2b00      	cmp	r3, #0
 8109b3a:	d102      	bne.n	8109b42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8109b3c:	2301      	movs	r3, #1
 8109b3e:	60fb      	str	r3, [r7, #12]
 8109b40:	e001      	b.n	8109b46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8109b42:	2300      	movs	r3, #0
 8109b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109b46:	f7ff f885 	bl	8108c54 <vPortExitCritical>

	return xReturn;
 8109b4a:	68fb      	ldr	r3, [r7, #12]
}
 8109b4c:	4618      	mov	r0, r3
 8109b4e:	3710      	adds	r7, #16
 8109b50:	46bd      	mov	sp, r7
 8109b52:	bd80      	pop	{r7, pc}

08109b54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8109b54:	b580      	push	{r7, lr}
 8109b56:	b084      	sub	sp, #16
 8109b58:	af00      	add	r7, sp, #0
 8109b5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8109b5c:	f7ff f84a 	bl	8108bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109b64:	687b      	ldr	r3, [r7, #4]
 8109b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b68:	429a      	cmp	r2, r3
 8109b6a:	d102      	bne.n	8109b72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8109b6c:	2301      	movs	r3, #1
 8109b6e:	60fb      	str	r3, [r7, #12]
 8109b70:	e001      	b.n	8109b76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8109b72:	2300      	movs	r3, #0
 8109b74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109b76:	f7ff f86d 	bl	8108c54 <vPortExitCritical>

	return xReturn;
 8109b7a:	68fb      	ldr	r3, [r7, #12]
}
 8109b7c:	4618      	mov	r0, r3
 8109b7e:	3710      	adds	r7, #16
 8109b80:	46bd      	mov	sp, r7
 8109b82:	bd80      	pop	{r7, pc}

08109b84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109b84:	b580      	push	{r7, lr}
 8109b86:	b08e      	sub	sp, #56	; 0x38
 8109b88:	af04      	add	r7, sp, #16
 8109b8a:	60f8      	str	r0, [r7, #12]
 8109b8c:	60b9      	str	r1, [r7, #8]
 8109b8e:	607a      	str	r2, [r7, #4]
 8109b90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109b94:	2b00      	cmp	r3, #0
 8109b96:	d10a      	bne.n	8109bae <xTaskCreateStatic+0x2a>
	__asm volatile
 8109b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b9c:	f383 8811 	msr	BASEPRI, r3
 8109ba0:	f3bf 8f6f 	isb	sy
 8109ba4:	f3bf 8f4f 	dsb	sy
 8109ba8:	623b      	str	r3, [r7, #32]
}
 8109baa:	bf00      	nop
 8109bac:	e7fe      	b.n	8109bac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8109bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109bb0:	2b00      	cmp	r3, #0
 8109bb2:	d10a      	bne.n	8109bca <xTaskCreateStatic+0x46>
	__asm volatile
 8109bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109bb8:	f383 8811 	msr	BASEPRI, r3
 8109bbc:	f3bf 8f6f 	isb	sy
 8109bc0:	f3bf 8f4f 	dsb	sy
 8109bc4:	61fb      	str	r3, [r7, #28]
}
 8109bc6:	bf00      	nop
 8109bc8:	e7fe      	b.n	8109bc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8109bca:	23b4      	movs	r3, #180	; 0xb4
 8109bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8109bce:	693b      	ldr	r3, [r7, #16]
 8109bd0:	2bb4      	cmp	r3, #180	; 0xb4
 8109bd2:	d00a      	beq.n	8109bea <xTaskCreateStatic+0x66>
	__asm volatile
 8109bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109bd8:	f383 8811 	msr	BASEPRI, r3
 8109bdc:	f3bf 8f6f 	isb	sy
 8109be0:	f3bf 8f4f 	dsb	sy
 8109be4:	61bb      	str	r3, [r7, #24]
}
 8109be6:	bf00      	nop
 8109be8:	e7fe      	b.n	8109be8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8109bea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8109bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109bee:	2b00      	cmp	r3, #0
 8109bf0:	d01e      	beq.n	8109c30 <xTaskCreateStatic+0xac>
 8109bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109bf4:	2b00      	cmp	r3, #0
 8109bf6:	d01b      	beq.n	8109c30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109bfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8109bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109c00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8109c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109c04:	2202      	movs	r2, #2
 8109c06:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8109c0a:	2300      	movs	r3, #0
 8109c0c:	9303      	str	r3, [sp, #12]
 8109c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109c10:	9302      	str	r3, [sp, #8]
 8109c12:	f107 0314 	add.w	r3, r7, #20
 8109c16:	9301      	str	r3, [sp, #4]
 8109c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c1a:	9300      	str	r3, [sp, #0]
 8109c1c:	683b      	ldr	r3, [r7, #0]
 8109c1e:	687a      	ldr	r2, [r7, #4]
 8109c20:	68b9      	ldr	r1, [r7, #8]
 8109c22:	68f8      	ldr	r0, [r7, #12]
 8109c24:	f000 f850 	bl	8109cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109c2a:	f000 f8eb 	bl	8109e04 <prvAddNewTaskToReadyList>
 8109c2e:	e001      	b.n	8109c34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8109c30:	2300      	movs	r3, #0
 8109c32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8109c34:	697b      	ldr	r3, [r7, #20]
	}
 8109c36:	4618      	mov	r0, r3
 8109c38:	3728      	adds	r7, #40	; 0x28
 8109c3a:	46bd      	mov	sp, r7
 8109c3c:	bd80      	pop	{r7, pc}

08109c3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8109c3e:	b580      	push	{r7, lr}
 8109c40:	b08c      	sub	sp, #48	; 0x30
 8109c42:	af04      	add	r7, sp, #16
 8109c44:	60f8      	str	r0, [r7, #12]
 8109c46:	60b9      	str	r1, [r7, #8]
 8109c48:	603b      	str	r3, [r7, #0]
 8109c4a:	4613      	mov	r3, r2
 8109c4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8109c4e:	88fb      	ldrh	r3, [r7, #6]
 8109c50:	009b      	lsls	r3, r3, #2
 8109c52:	4618      	mov	r0, r3
 8109c54:	f7fe fc06 	bl	8108464 <pvPortMalloc>
 8109c58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8109c5a:	697b      	ldr	r3, [r7, #20]
 8109c5c:	2b00      	cmp	r3, #0
 8109c5e:	d00e      	beq.n	8109c7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8109c60:	20b4      	movs	r0, #180	; 0xb4
 8109c62:	f7fe fbff 	bl	8108464 <pvPortMalloc>
 8109c66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8109c68:	69fb      	ldr	r3, [r7, #28]
 8109c6a:	2b00      	cmp	r3, #0
 8109c6c:	d003      	beq.n	8109c76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8109c6e:	69fb      	ldr	r3, [r7, #28]
 8109c70:	697a      	ldr	r2, [r7, #20]
 8109c72:	631a      	str	r2, [r3, #48]	; 0x30
 8109c74:	e005      	b.n	8109c82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8109c76:	6978      	ldr	r0, [r7, #20]
 8109c78:	f7fe fcc0 	bl	81085fc <vPortFree>
 8109c7c:	e001      	b.n	8109c82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8109c7e:	2300      	movs	r3, #0
 8109c80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8109c82:	69fb      	ldr	r3, [r7, #28]
 8109c84:	2b00      	cmp	r3, #0
 8109c86:	d017      	beq.n	8109cb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8109c88:	69fb      	ldr	r3, [r7, #28]
 8109c8a:	2200      	movs	r2, #0
 8109c8c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8109c90:	88fa      	ldrh	r2, [r7, #6]
 8109c92:	2300      	movs	r3, #0
 8109c94:	9303      	str	r3, [sp, #12]
 8109c96:	69fb      	ldr	r3, [r7, #28]
 8109c98:	9302      	str	r3, [sp, #8]
 8109c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109c9c:	9301      	str	r3, [sp, #4]
 8109c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109ca0:	9300      	str	r3, [sp, #0]
 8109ca2:	683b      	ldr	r3, [r7, #0]
 8109ca4:	68b9      	ldr	r1, [r7, #8]
 8109ca6:	68f8      	ldr	r0, [r7, #12]
 8109ca8:	f000 f80e 	bl	8109cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109cac:	69f8      	ldr	r0, [r7, #28]
 8109cae:	f000 f8a9 	bl	8109e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8109cb2:	2301      	movs	r3, #1
 8109cb4:	61bb      	str	r3, [r7, #24]
 8109cb6:	e002      	b.n	8109cbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8109cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8109cbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8109cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8109cc0:	4618      	mov	r0, r3
 8109cc2:	3720      	adds	r7, #32
 8109cc4:	46bd      	mov	sp, r7
 8109cc6:	bd80      	pop	{r7, pc}

08109cc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8109cc8:	b580      	push	{r7, lr}
 8109cca:	b088      	sub	sp, #32
 8109ccc:	af00      	add	r7, sp, #0
 8109cce:	60f8      	str	r0, [r7, #12]
 8109cd0:	60b9      	str	r1, [r7, #8]
 8109cd2:	607a      	str	r2, [r7, #4]
 8109cd4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8109cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8109ce0:	3b01      	subs	r3, #1
 8109ce2:	009b      	lsls	r3, r3, #2
 8109ce4:	4413      	add	r3, r2
 8109ce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8109ce8:	69bb      	ldr	r3, [r7, #24]
 8109cea:	f023 0307 	bic.w	r3, r3, #7
 8109cee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8109cf0:	69bb      	ldr	r3, [r7, #24]
 8109cf2:	f003 0307 	and.w	r3, r3, #7
 8109cf6:	2b00      	cmp	r3, #0
 8109cf8:	d00a      	beq.n	8109d10 <prvInitialiseNewTask+0x48>
	__asm volatile
 8109cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109cfe:	f383 8811 	msr	BASEPRI, r3
 8109d02:	f3bf 8f6f 	isb	sy
 8109d06:	f3bf 8f4f 	dsb	sy
 8109d0a:	617b      	str	r3, [r7, #20]
}
 8109d0c:	bf00      	nop
 8109d0e:	e7fe      	b.n	8109d0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8109d10:	68bb      	ldr	r3, [r7, #8]
 8109d12:	2b00      	cmp	r3, #0
 8109d14:	d01f      	beq.n	8109d56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109d16:	2300      	movs	r3, #0
 8109d18:	61fb      	str	r3, [r7, #28]
 8109d1a:	e012      	b.n	8109d42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8109d1c:	68ba      	ldr	r2, [r7, #8]
 8109d1e:	69fb      	ldr	r3, [r7, #28]
 8109d20:	4413      	add	r3, r2
 8109d22:	7819      	ldrb	r1, [r3, #0]
 8109d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109d26:	69fb      	ldr	r3, [r7, #28]
 8109d28:	4413      	add	r3, r2
 8109d2a:	3334      	adds	r3, #52	; 0x34
 8109d2c:	460a      	mov	r2, r1
 8109d2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8109d30:	68ba      	ldr	r2, [r7, #8]
 8109d32:	69fb      	ldr	r3, [r7, #28]
 8109d34:	4413      	add	r3, r2
 8109d36:	781b      	ldrb	r3, [r3, #0]
 8109d38:	2b00      	cmp	r3, #0
 8109d3a:	d006      	beq.n	8109d4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109d3c:	69fb      	ldr	r3, [r7, #28]
 8109d3e:	3301      	adds	r3, #1
 8109d40:	61fb      	str	r3, [r7, #28]
 8109d42:	69fb      	ldr	r3, [r7, #28]
 8109d44:	2b0f      	cmp	r3, #15
 8109d46:	d9e9      	bls.n	8109d1c <prvInitialiseNewTask+0x54>
 8109d48:	e000      	b.n	8109d4c <prvInitialiseNewTask+0x84>
			{
				break;
 8109d4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8109d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d4e:	2200      	movs	r2, #0
 8109d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8109d54:	e003      	b.n	8109d5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8109d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d58:	2200      	movs	r2, #0
 8109d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8109d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d60:	2b06      	cmp	r3, #6
 8109d62:	d901      	bls.n	8109d68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8109d64:	2306      	movs	r3, #6
 8109d66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8109d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109d6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8109d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109d72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8109d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d76:	2200      	movs	r2, #0
 8109d78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8109d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d7c:	3304      	adds	r3, #4
 8109d7e:	4618      	mov	r0, r3
 8109d80:	f7fe fd7a 	bl	8108878 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8109d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d86:	3318      	adds	r3, #24
 8109d88:	4618      	mov	r0, r3
 8109d8a:	f7fe fd75 	bl	8108878 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8109d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109d92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d96:	f1c3 0207 	rsb	r2, r3, #7
 8109d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8109d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109da2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8109da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109da6:	2200      	movs	r2, #0
 8109da8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8109dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109dae:	2200      	movs	r2, #0
 8109db0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8109db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109db6:	334c      	adds	r3, #76	; 0x4c
 8109db8:	2260      	movs	r2, #96	; 0x60
 8109dba:	2100      	movs	r1, #0
 8109dbc:	4618      	mov	r0, r3
 8109dbe:	f008 faaa 	bl	8112316 <memset>
 8109dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109dc4:	4a0c      	ldr	r2, [pc, #48]	; (8109df8 <prvInitialiseNewTask+0x130>)
 8109dc6:	651a      	str	r2, [r3, #80]	; 0x50
 8109dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109dca:	4a0c      	ldr	r2, [pc, #48]	; (8109dfc <prvInitialiseNewTask+0x134>)
 8109dcc:	655a      	str	r2, [r3, #84]	; 0x54
 8109dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109dd0:	4a0b      	ldr	r2, [pc, #44]	; (8109e00 <prvInitialiseNewTask+0x138>)
 8109dd2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8109dd4:	683a      	ldr	r2, [r7, #0]
 8109dd6:	68f9      	ldr	r1, [r7, #12]
 8109dd8:	69b8      	ldr	r0, [r7, #24]
 8109dda:	f7fe fde1 	bl	81089a0 <pxPortInitialiseStack>
 8109dde:	4602      	mov	r2, r0
 8109de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109de2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8109de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109de6:	2b00      	cmp	r3, #0
 8109de8:	d002      	beq.n	8109df0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8109dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109dee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109df0:	bf00      	nop
 8109df2:	3720      	adds	r7, #32
 8109df4:	46bd      	mov	sp, r7
 8109df6:	bd80      	pop	{r7, pc}
 8109df8:	08116c88 	.word	0x08116c88
 8109dfc:	08116ca8 	.word	0x08116ca8
 8109e00:	08116c68 	.word	0x08116c68

08109e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8109e04:	b580      	push	{r7, lr}
 8109e06:	b082      	sub	sp, #8
 8109e08:	af00      	add	r7, sp, #0
 8109e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8109e0c:	f7fe fef2 	bl	8108bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8109e10:	4b2a      	ldr	r3, [pc, #168]	; (8109ebc <prvAddNewTaskToReadyList+0xb8>)
 8109e12:	681b      	ldr	r3, [r3, #0]
 8109e14:	3301      	adds	r3, #1
 8109e16:	4a29      	ldr	r2, [pc, #164]	; (8109ebc <prvAddNewTaskToReadyList+0xb8>)
 8109e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8109e1a:	4b29      	ldr	r3, [pc, #164]	; (8109ec0 <prvAddNewTaskToReadyList+0xbc>)
 8109e1c:	681b      	ldr	r3, [r3, #0]
 8109e1e:	2b00      	cmp	r3, #0
 8109e20:	d109      	bne.n	8109e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8109e22:	4a27      	ldr	r2, [pc, #156]	; (8109ec0 <prvAddNewTaskToReadyList+0xbc>)
 8109e24:	687b      	ldr	r3, [r7, #4]
 8109e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8109e28:	4b24      	ldr	r3, [pc, #144]	; (8109ebc <prvAddNewTaskToReadyList+0xb8>)
 8109e2a:	681b      	ldr	r3, [r3, #0]
 8109e2c:	2b01      	cmp	r3, #1
 8109e2e:	d110      	bne.n	8109e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8109e30:	f000 fbf8 	bl	810a624 <prvInitialiseTaskLists>
 8109e34:	e00d      	b.n	8109e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8109e36:	4b23      	ldr	r3, [pc, #140]	; (8109ec4 <prvAddNewTaskToReadyList+0xc0>)
 8109e38:	681b      	ldr	r3, [r3, #0]
 8109e3a:	2b00      	cmp	r3, #0
 8109e3c:	d109      	bne.n	8109e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8109e3e:	4b20      	ldr	r3, [pc, #128]	; (8109ec0 <prvAddNewTaskToReadyList+0xbc>)
 8109e40:	681b      	ldr	r3, [r3, #0]
 8109e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e48:	429a      	cmp	r2, r3
 8109e4a:	d802      	bhi.n	8109e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8109e4c:	4a1c      	ldr	r2, [pc, #112]	; (8109ec0 <prvAddNewTaskToReadyList+0xbc>)
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8109e52:	4b1d      	ldr	r3, [pc, #116]	; (8109ec8 <prvAddNewTaskToReadyList+0xc4>)
 8109e54:	681b      	ldr	r3, [r3, #0]
 8109e56:	3301      	adds	r3, #1
 8109e58:	4a1b      	ldr	r2, [pc, #108]	; (8109ec8 <prvAddNewTaskToReadyList+0xc4>)
 8109e5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8109e5c:	687b      	ldr	r3, [r7, #4]
 8109e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e60:	2201      	movs	r2, #1
 8109e62:	409a      	lsls	r2, r3
 8109e64:	4b19      	ldr	r3, [pc, #100]	; (8109ecc <prvAddNewTaskToReadyList+0xc8>)
 8109e66:	681b      	ldr	r3, [r3, #0]
 8109e68:	4313      	orrs	r3, r2
 8109e6a:	4a18      	ldr	r2, [pc, #96]	; (8109ecc <prvAddNewTaskToReadyList+0xc8>)
 8109e6c:	6013      	str	r3, [r2, #0]
 8109e6e:	687b      	ldr	r3, [r7, #4]
 8109e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109e72:	4613      	mov	r3, r2
 8109e74:	009b      	lsls	r3, r3, #2
 8109e76:	4413      	add	r3, r2
 8109e78:	009b      	lsls	r3, r3, #2
 8109e7a:	4a15      	ldr	r2, [pc, #84]	; (8109ed0 <prvAddNewTaskToReadyList+0xcc>)
 8109e7c:	441a      	add	r2, r3
 8109e7e:	687b      	ldr	r3, [r7, #4]
 8109e80:	3304      	adds	r3, #4
 8109e82:	4619      	mov	r1, r3
 8109e84:	4610      	mov	r0, r2
 8109e86:	f7fe fd04 	bl	8108892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8109e8a:	f7fe fee3 	bl	8108c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8109e8e:	4b0d      	ldr	r3, [pc, #52]	; (8109ec4 <prvAddNewTaskToReadyList+0xc0>)
 8109e90:	681b      	ldr	r3, [r3, #0]
 8109e92:	2b00      	cmp	r3, #0
 8109e94:	d00e      	beq.n	8109eb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8109e96:	4b0a      	ldr	r3, [pc, #40]	; (8109ec0 <prvAddNewTaskToReadyList+0xbc>)
 8109e98:	681b      	ldr	r3, [r3, #0]
 8109e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ea0:	429a      	cmp	r2, r3
 8109ea2:	d207      	bcs.n	8109eb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8109ea4:	4b0b      	ldr	r3, [pc, #44]	; (8109ed4 <prvAddNewTaskToReadyList+0xd0>)
 8109ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109eaa:	601a      	str	r2, [r3, #0]
 8109eac:	f3bf 8f4f 	dsb	sy
 8109eb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109eb4:	bf00      	nop
 8109eb6:	3708      	adds	r7, #8
 8109eb8:	46bd      	mov	sp, r7
 8109eba:	bd80      	pop	{r7, pc}
 8109ebc:	100057d0 	.word	0x100057d0
 8109ec0:	100056d0 	.word	0x100056d0
 8109ec4:	100057dc 	.word	0x100057dc
 8109ec8:	100057ec 	.word	0x100057ec
 8109ecc:	100057d8 	.word	0x100057d8
 8109ed0:	100056d4 	.word	0x100056d4
 8109ed4:	e000ed04 	.word	0xe000ed04

08109ed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8109ed8:	b580      	push	{r7, lr}
 8109eda:	b084      	sub	sp, #16
 8109edc:	af00      	add	r7, sp, #0
 8109ede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8109ee0:	2300      	movs	r3, #0
 8109ee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8109ee4:	687b      	ldr	r3, [r7, #4]
 8109ee6:	2b00      	cmp	r3, #0
 8109ee8:	d017      	beq.n	8109f1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8109eea:	4b13      	ldr	r3, [pc, #76]	; (8109f38 <vTaskDelay+0x60>)
 8109eec:	681b      	ldr	r3, [r3, #0]
 8109eee:	2b00      	cmp	r3, #0
 8109ef0:	d00a      	beq.n	8109f08 <vTaskDelay+0x30>
	__asm volatile
 8109ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ef6:	f383 8811 	msr	BASEPRI, r3
 8109efa:	f3bf 8f6f 	isb	sy
 8109efe:	f3bf 8f4f 	dsb	sy
 8109f02:	60bb      	str	r3, [r7, #8]
}
 8109f04:	bf00      	nop
 8109f06:	e7fe      	b.n	8109f06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8109f08:	f000 f884 	bl	810a014 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8109f0c:	2100      	movs	r1, #0
 8109f0e:	6878      	ldr	r0, [r7, #4]
 8109f10:	f000 fe06 	bl	810ab20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8109f14:	f000 f88c 	bl	810a030 <xTaskResumeAll>
 8109f18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8109f1a:	68fb      	ldr	r3, [r7, #12]
 8109f1c:	2b00      	cmp	r3, #0
 8109f1e:	d107      	bne.n	8109f30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8109f20:	4b06      	ldr	r3, [pc, #24]	; (8109f3c <vTaskDelay+0x64>)
 8109f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109f26:	601a      	str	r2, [r3, #0]
 8109f28:	f3bf 8f4f 	dsb	sy
 8109f2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8109f30:	bf00      	nop
 8109f32:	3710      	adds	r7, #16
 8109f34:	46bd      	mov	sp, r7
 8109f36:	bd80      	pop	{r7, pc}
 8109f38:	100057f8 	.word	0x100057f8
 8109f3c:	e000ed04 	.word	0xe000ed04

08109f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8109f40:	b580      	push	{r7, lr}
 8109f42:	b08a      	sub	sp, #40	; 0x28
 8109f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8109f46:	2300      	movs	r3, #0
 8109f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8109f4a:	2300      	movs	r3, #0
 8109f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8109f4e:	463a      	mov	r2, r7
 8109f50:	1d39      	adds	r1, r7, #4
 8109f52:	f107 0308 	add.w	r3, r7, #8
 8109f56:	4618      	mov	r0, r3
 8109f58:	f006 fcee 	bl	8110938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8109f5c:	6839      	ldr	r1, [r7, #0]
 8109f5e:	687b      	ldr	r3, [r7, #4]
 8109f60:	68ba      	ldr	r2, [r7, #8]
 8109f62:	9202      	str	r2, [sp, #8]
 8109f64:	9301      	str	r3, [sp, #4]
 8109f66:	2300      	movs	r3, #0
 8109f68:	9300      	str	r3, [sp, #0]
 8109f6a:	2300      	movs	r3, #0
 8109f6c:	460a      	mov	r2, r1
 8109f6e:	4921      	ldr	r1, [pc, #132]	; (8109ff4 <vTaskStartScheduler+0xb4>)
 8109f70:	4821      	ldr	r0, [pc, #132]	; (8109ff8 <vTaskStartScheduler+0xb8>)
 8109f72:	f7ff fe07 	bl	8109b84 <xTaskCreateStatic>
 8109f76:	4603      	mov	r3, r0
 8109f78:	4a20      	ldr	r2, [pc, #128]	; (8109ffc <vTaskStartScheduler+0xbc>)
 8109f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8109f7c:	4b1f      	ldr	r3, [pc, #124]	; (8109ffc <vTaskStartScheduler+0xbc>)
 8109f7e:	681b      	ldr	r3, [r3, #0]
 8109f80:	2b00      	cmp	r3, #0
 8109f82:	d002      	beq.n	8109f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8109f84:	2301      	movs	r3, #1
 8109f86:	617b      	str	r3, [r7, #20]
 8109f88:	e001      	b.n	8109f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8109f8a:	2300      	movs	r3, #0
 8109f8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8109f8e:	697b      	ldr	r3, [r7, #20]
 8109f90:	2b01      	cmp	r3, #1
 8109f92:	d11b      	bne.n	8109fcc <vTaskStartScheduler+0x8c>
	__asm volatile
 8109f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f98:	f383 8811 	msr	BASEPRI, r3
 8109f9c:	f3bf 8f6f 	isb	sy
 8109fa0:	f3bf 8f4f 	dsb	sy
 8109fa4:	613b      	str	r3, [r7, #16]
}
 8109fa6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8109fa8:	4b15      	ldr	r3, [pc, #84]	; (810a000 <vTaskStartScheduler+0xc0>)
 8109faa:	681b      	ldr	r3, [r3, #0]
 8109fac:	334c      	adds	r3, #76	; 0x4c
 8109fae:	4a15      	ldr	r2, [pc, #84]	; (810a004 <vTaskStartScheduler+0xc4>)
 8109fb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8109fb2:	4b15      	ldr	r3, [pc, #84]	; (810a008 <vTaskStartScheduler+0xc8>)
 8109fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8109fb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8109fba:	4b14      	ldr	r3, [pc, #80]	; (810a00c <vTaskStartScheduler+0xcc>)
 8109fbc:	2201      	movs	r2, #1
 8109fbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8109fc0:	4b13      	ldr	r3, [pc, #76]	; (810a010 <vTaskStartScheduler+0xd0>)
 8109fc2:	2200      	movs	r2, #0
 8109fc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8109fc6:	f7fe fd73 	bl	8108ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8109fca:	e00e      	b.n	8109fea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8109fcc:	697b      	ldr	r3, [r7, #20]
 8109fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109fd2:	d10a      	bne.n	8109fea <vTaskStartScheduler+0xaa>
	__asm volatile
 8109fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109fd8:	f383 8811 	msr	BASEPRI, r3
 8109fdc:	f3bf 8f6f 	isb	sy
 8109fe0:	f3bf 8f4f 	dsb	sy
 8109fe4:	60fb      	str	r3, [r7, #12]
}
 8109fe6:	bf00      	nop
 8109fe8:	e7fe      	b.n	8109fe8 <vTaskStartScheduler+0xa8>
}
 8109fea:	bf00      	nop
 8109fec:	3718      	adds	r7, #24
 8109fee:	46bd      	mov	sp, r7
 8109ff0:	bd80      	pop	{r7, pc}
 8109ff2:	bf00      	nop
 8109ff4:	08114f18 	.word	0x08114f18
 8109ff8:	0810a5f5 	.word	0x0810a5f5
 8109ffc:	100057f4 	.word	0x100057f4
 810a000:	100056d0 	.word	0x100056d0
 810a004:	1000002c 	.word	0x1000002c
 810a008:	100057f0 	.word	0x100057f0
 810a00c:	100057dc 	.word	0x100057dc
 810a010:	100057d4 	.word	0x100057d4

0810a014 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a014:	b480      	push	{r7}
 810a016:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810a018:	4b04      	ldr	r3, [pc, #16]	; (810a02c <vTaskSuspendAll+0x18>)
 810a01a:	681b      	ldr	r3, [r3, #0]
 810a01c:	3301      	adds	r3, #1
 810a01e:	4a03      	ldr	r2, [pc, #12]	; (810a02c <vTaskSuspendAll+0x18>)
 810a020:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810a022:	bf00      	nop
 810a024:	46bd      	mov	sp, r7
 810a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a02a:	4770      	bx	lr
 810a02c:	100057f8 	.word	0x100057f8

0810a030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a030:	b580      	push	{r7, lr}
 810a032:	b084      	sub	sp, #16
 810a034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a036:	2300      	movs	r3, #0
 810a038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a03a:	2300      	movs	r3, #0
 810a03c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a03e:	4b41      	ldr	r3, [pc, #260]	; (810a144 <xTaskResumeAll+0x114>)
 810a040:	681b      	ldr	r3, [r3, #0]
 810a042:	2b00      	cmp	r3, #0
 810a044:	d10a      	bne.n	810a05c <xTaskResumeAll+0x2c>
	__asm volatile
 810a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a04a:	f383 8811 	msr	BASEPRI, r3
 810a04e:	f3bf 8f6f 	isb	sy
 810a052:	f3bf 8f4f 	dsb	sy
 810a056:	603b      	str	r3, [r7, #0]
}
 810a058:	bf00      	nop
 810a05a:	e7fe      	b.n	810a05a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a05c:	f7fe fdca 	bl	8108bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a060:	4b38      	ldr	r3, [pc, #224]	; (810a144 <xTaskResumeAll+0x114>)
 810a062:	681b      	ldr	r3, [r3, #0]
 810a064:	3b01      	subs	r3, #1
 810a066:	4a37      	ldr	r2, [pc, #220]	; (810a144 <xTaskResumeAll+0x114>)
 810a068:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a06a:	4b36      	ldr	r3, [pc, #216]	; (810a144 <xTaskResumeAll+0x114>)
 810a06c:	681b      	ldr	r3, [r3, #0]
 810a06e:	2b00      	cmp	r3, #0
 810a070:	d161      	bne.n	810a136 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a072:	4b35      	ldr	r3, [pc, #212]	; (810a148 <xTaskResumeAll+0x118>)
 810a074:	681b      	ldr	r3, [r3, #0]
 810a076:	2b00      	cmp	r3, #0
 810a078:	d05d      	beq.n	810a136 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a07a:	e02e      	b.n	810a0da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a07c:	4b33      	ldr	r3, [pc, #204]	; (810a14c <xTaskResumeAll+0x11c>)
 810a07e:	68db      	ldr	r3, [r3, #12]
 810a080:	68db      	ldr	r3, [r3, #12]
 810a082:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a084:	68fb      	ldr	r3, [r7, #12]
 810a086:	3318      	adds	r3, #24
 810a088:	4618      	mov	r0, r3
 810a08a:	f7fe fc5f 	bl	810894c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a08e:	68fb      	ldr	r3, [r7, #12]
 810a090:	3304      	adds	r3, #4
 810a092:	4618      	mov	r0, r3
 810a094:	f7fe fc5a 	bl	810894c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a098:	68fb      	ldr	r3, [r7, #12]
 810a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a09c:	2201      	movs	r2, #1
 810a09e:	409a      	lsls	r2, r3
 810a0a0:	4b2b      	ldr	r3, [pc, #172]	; (810a150 <xTaskResumeAll+0x120>)
 810a0a2:	681b      	ldr	r3, [r3, #0]
 810a0a4:	4313      	orrs	r3, r2
 810a0a6:	4a2a      	ldr	r2, [pc, #168]	; (810a150 <xTaskResumeAll+0x120>)
 810a0a8:	6013      	str	r3, [r2, #0]
 810a0aa:	68fb      	ldr	r3, [r7, #12]
 810a0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a0ae:	4613      	mov	r3, r2
 810a0b0:	009b      	lsls	r3, r3, #2
 810a0b2:	4413      	add	r3, r2
 810a0b4:	009b      	lsls	r3, r3, #2
 810a0b6:	4a27      	ldr	r2, [pc, #156]	; (810a154 <xTaskResumeAll+0x124>)
 810a0b8:	441a      	add	r2, r3
 810a0ba:	68fb      	ldr	r3, [r7, #12]
 810a0bc:	3304      	adds	r3, #4
 810a0be:	4619      	mov	r1, r3
 810a0c0:	4610      	mov	r0, r2
 810a0c2:	f7fe fbe6 	bl	8108892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a0c6:	68fb      	ldr	r3, [r7, #12]
 810a0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a0ca:	4b23      	ldr	r3, [pc, #140]	; (810a158 <xTaskResumeAll+0x128>)
 810a0cc:	681b      	ldr	r3, [r3, #0]
 810a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0d0:	429a      	cmp	r2, r3
 810a0d2:	d302      	bcc.n	810a0da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 810a0d4:	4b21      	ldr	r3, [pc, #132]	; (810a15c <xTaskResumeAll+0x12c>)
 810a0d6:	2201      	movs	r2, #1
 810a0d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a0da:	4b1c      	ldr	r3, [pc, #112]	; (810a14c <xTaskResumeAll+0x11c>)
 810a0dc:	681b      	ldr	r3, [r3, #0]
 810a0de:	2b00      	cmp	r3, #0
 810a0e0:	d1cc      	bne.n	810a07c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a0e2:	68fb      	ldr	r3, [r7, #12]
 810a0e4:	2b00      	cmp	r3, #0
 810a0e6:	d001      	beq.n	810a0ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a0e8:	f000 fb3e 	bl	810a768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810a0ec:	4b1c      	ldr	r3, [pc, #112]	; (810a160 <xTaskResumeAll+0x130>)
 810a0ee:	681b      	ldr	r3, [r3, #0]
 810a0f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810a0f2:	687b      	ldr	r3, [r7, #4]
 810a0f4:	2b00      	cmp	r3, #0
 810a0f6:	d010      	beq.n	810a11a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a0f8:	f000 f858 	bl	810a1ac <xTaskIncrementTick>
 810a0fc:	4603      	mov	r3, r0
 810a0fe:	2b00      	cmp	r3, #0
 810a100:	d002      	beq.n	810a108 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 810a102:	4b16      	ldr	r3, [pc, #88]	; (810a15c <xTaskResumeAll+0x12c>)
 810a104:	2201      	movs	r2, #1
 810a106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810a108:	687b      	ldr	r3, [r7, #4]
 810a10a:	3b01      	subs	r3, #1
 810a10c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810a10e:	687b      	ldr	r3, [r7, #4]
 810a110:	2b00      	cmp	r3, #0
 810a112:	d1f1      	bne.n	810a0f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 810a114:	4b12      	ldr	r3, [pc, #72]	; (810a160 <xTaskResumeAll+0x130>)
 810a116:	2200      	movs	r2, #0
 810a118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a11a:	4b10      	ldr	r3, [pc, #64]	; (810a15c <xTaskResumeAll+0x12c>)
 810a11c:	681b      	ldr	r3, [r3, #0]
 810a11e:	2b00      	cmp	r3, #0
 810a120:	d009      	beq.n	810a136 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a122:	2301      	movs	r3, #1
 810a124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a126:	4b0f      	ldr	r3, [pc, #60]	; (810a164 <xTaskResumeAll+0x134>)
 810a128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a12c:	601a      	str	r2, [r3, #0]
 810a12e:	f3bf 8f4f 	dsb	sy
 810a132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a136:	f7fe fd8d 	bl	8108c54 <vPortExitCritical>

	return xAlreadyYielded;
 810a13a:	68bb      	ldr	r3, [r7, #8]
}
 810a13c:	4618      	mov	r0, r3
 810a13e:	3710      	adds	r7, #16
 810a140:	46bd      	mov	sp, r7
 810a142:	bd80      	pop	{r7, pc}
 810a144:	100057f8 	.word	0x100057f8
 810a148:	100057d0 	.word	0x100057d0
 810a14c:	10005790 	.word	0x10005790
 810a150:	100057d8 	.word	0x100057d8
 810a154:	100056d4 	.word	0x100056d4
 810a158:	100056d0 	.word	0x100056d0
 810a15c:	100057e4 	.word	0x100057e4
 810a160:	100057e0 	.word	0x100057e0
 810a164:	e000ed04 	.word	0xe000ed04

0810a168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810a168:	b480      	push	{r7}
 810a16a:	b083      	sub	sp, #12
 810a16c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810a16e:	4b05      	ldr	r3, [pc, #20]	; (810a184 <xTaskGetTickCount+0x1c>)
 810a170:	681b      	ldr	r3, [r3, #0]
 810a172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810a174:	687b      	ldr	r3, [r7, #4]
}
 810a176:	4618      	mov	r0, r3
 810a178:	370c      	adds	r7, #12
 810a17a:	46bd      	mov	sp, r7
 810a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a180:	4770      	bx	lr
 810a182:	bf00      	nop
 810a184:	100057d4 	.word	0x100057d4

0810a188 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810a188:	b580      	push	{r7, lr}
 810a18a:	b082      	sub	sp, #8
 810a18c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a18e:	f7fe fe13 	bl	8108db8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810a192:	2300      	movs	r3, #0
 810a194:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810a196:	4b04      	ldr	r3, [pc, #16]	; (810a1a8 <xTaskGetTickCountFromISR+0x20>)
 810a198:	681b      	ldr	r3, [r3, #0]
 810a19a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a19c:	683b      	ldr	r3, [r7, #0]
}
 810a19e:	4618      	mov	r0, r3
 810a1a0:	3708      	adds	r7, #8
 810a1a2:	46bd      	mov	sp, r7
 810a1a4:	bd80      	pop	{r7, pc}
 810a1a6:	bf00      	nop
 810a1a8:	100057d4 	.word	0x100057d4

0810a1ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a1ac:	b580      	push	{r7, lr}
 810a1ae:	b086      	sub	sp, #24
 810a1b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a1b2:	2300      	movs	r3, #0
 810a1b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a1b6:	4b4e      	ldr	r3, [pc, #312]	; (810a2f0 <xTaskIncrementTick+0x144>)
 810a1b8:	681b      	ldr	r3, [r3, #0]
 810a1ba:	2b00      	cmp	r3, #0
 810a1bc:	f040 808e 	bne.w	810a2dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a1c0:	4b4c      	ldr	r3, [pc, #304]	; (810a2f4 <xTaskIncrementTick+0x148>)
 810a1c2:	681b      	ldr	r3, [r3, #0]
 810a1c4:	3301      	adds	r3, #1
 810a1c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a1c8:	4a4a      	ldr	r2, [pc, #296]	; (810a2f4 <xTaskIncrementTick+0x148>)
 810a1ca:	693b      	ldr	r3, [r7, #16]
 810a1cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a1ce:	693b      	ldr	r3, [r7, #16]
 810a1d0:	2b00      	cmp	r3, #0
 810a1d2:	d120      	bne.n	810a216 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 810a1d4:	4b48      	ldr	r3, [pc, #288]	; (810a2f8 <xTaskIncrementTick+0x14c>)
 810a1d6:	681b      	ldr	r3, [r3, #0]
 810a1d8:	681b      	ldr	r3, [r3, #0]
 810a1da:	2b00      	cmp	r3, #0
 810a1dc:	d00a      	beq.n	810a1f4 <xTaskIncrementTick+0x48>
	__asm volatile
 810a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1e2:	f383 8811 	msr	BASEPRI, r3
 810a1e6:	f3bf 8f6f 	isb	sy
 810a1ea:	f3bf 8f4f 	dsb	sy
 810a1ee:	603b      	str	r3, [r7, #0]
}
 810a1f0:	bf00      	nop
 810a1f2:	e7fe      	b.n	810a1f2 <xTaskIncrementTick+0x46>
 810a1f4:	4b40      	ldr	r3, [pc, #256]	; (810a2f8 <xTaskIncrementTick+0x14c>)
 810a1f6:	681b      	ldr	r3, [r3, #0]
 810a1f8:	60fb      	str	r3, [r7, #12]
 810a1fa:	4b40      	ldr	r3, [pc, #256]	; (810a2fc <xTaskIncrementTick+0x150>)
 810a1fc:	681b      	ldr	r3, [r3, #0]
 810a1fe:	4a3e      	ldr	r2, [pc, #248]	; (810a2f8 <xTaskIncrementTick+0x14c>)
 810a200:	6013      	str	r3, [r2, #0]
 810a202:	4a3e      	ldr	r2, [pc, #248]	; (810a2fc <xTaskIncrementTick+0x150>)
 810a204:	68fb      	ldr	r3, [r7, #12]
 810a206:	6013      	str	r3, [r2, #0]
 810a208:	4b3d      	ldr	r3, [pc, #244]	; (810a300 <xTaskIncrementTick+0x154>)
 810a20a:	681b      	ldr	r3, [r3, #0]
 810a20c:	3301      	adds	r3, #1
 810a20e:	4a3c      	ldr	r2, [pc, #240]	; (810a300 <xTaskIncrementTick+0x154>)
 810a210:	6013      	str	r3, [r2, #0]
 810a212:	f000 faa9 	bl	810a768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a216:	4b3b      	ldr	r3, [pc, #236]	; (810a304 <xTaskIncrementTick+0x158>)
 810a218:	681b      	ldr	r3, [r3, #0]
 810a21a:	693a      	ldr	r2, [r7, #16]
 810a21c:	429a      	cmp	r2, r3
 810a21e:	d348      	bcc.n	810a2b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a220:	4b35      	ldr	r3, [pc, #212]	; (810a2f8 <xTaskIncrementTick+0x14c>)
 810a222:	681b      	ldr	r3, [r3, #0]
 810a224:	681b      	ldr	r3, [r3, #0]
 810a226:	2b00      	cmp	r3, #0
 810a228:	d104      	bne.n	810a234 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a22a:	4b36      	ldr	r3, [pc, #216]	; (810a304 <xTaskIncrementTick+0x158>)
 810a22c:	f04f 32ff 	mov.w	r2, #4294967295
 810a230:	601a      	str	r2, [r3, #0]
					break;
 810a232:	e03e      	b.n	810a2b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a234:	4b30      	ldr	r3, [pc, #192]	; (810a2f8 <xTaskIncrementTick+0x14c>)
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	68db      	ldr	r3, [r3, #12]
 810a23a:	68db      	ldr	r3, [r3, #12]
 810a23c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a23e:	68bb      	ldr	r3, [r7, #8]
 810a240:	685b      	ldr	r3, [r3, #4]
 810a242:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a244:	693a      	ldr	r2, [r7, #16]
 810a246:	687b      	ldr	r3, [r7, #4]
 810a248:	429a      	cmp	r2, r3
 810a24a:	d203      	bcs.n	810a254 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a24c:	4a2d      	ldr	r2, [pc, #180]	; (810a304 <xTaskIncrementTick+0x158>)
 810a24e:	687b      	ldr	r3, [r7, #4]
 810a250:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a252:	e02e      	b.n	810a2b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a254:	68bb      	ldr	r3, [r7, #8]
 810a256:	3304      	adds	r3, #4
 810a258:	4618      	mov	r0, r3
 810a25a:	f7fe fb77 	bl	810894c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a25e:	68bb      	ldr	r3, [r7, #8]
 810a260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a262:	2b00      	cmp	r3, #0
 810a264:	d004      	beq.n	810a270 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a266:	68bb      	ldr	r3, [r7, #8]
 810a268:	3318      	adds	r3, #24
 810a26a:	4618      	mov	r0, r3
 810a26c:	f7fe fb6e 	bl	810894c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a270:	68bb      	ldr	r3, [r7, #8]
 810a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a274:	2201      	movs	r2, #1
 810a276:	409a      	lsls	r2, r3
 810a278:	4b23      	ldr	r3, [pc, #140]	; (810a308 <xTaskIncrementTick+0x15c>)
 810a27a:	681b      	ldr	r3, [r3, #0]
 810a27c:	4313      	orrs	r3, r2
 810a27e:	4a22      	ldr	r2, [pc, #136]	; (810a308 <xTaskIncrementTick+0x15c>)
 810a280:	6013      	str	r3, [r2, #0]
 810a282:	68bb      	ldr	r3, [r7, #8]
 810a284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a286:	4613      	mov	r3, r2
 810a288:	009b      	lsls	r3, r3, #2
 810a28a:	4413      	add	r3, r2
 810a28c:	009b      	lsls	r3, r3, #2
 810a28e:	4a1f      	ldr	r2, [pc, #124]	; (810a30c <xTaskIncrementTick+0x160>)
 810a290:	441a      	add	r2, r3
 810a292:	68bb      	ldr	r3, [r7, #8]
 810a294:	3304      	adds	r3, #4
 810a296:	4619      	mov	r1, r3
 810a298:	4610      	mov	r0, r2
 810a29a:	f7fe fafa 	bl	8108892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a29e:	68bb      	ldr	r3, [r7, #8]
 810a2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2a2:	4b1b      	ldr	r3, [pc, #108]	; (810a310 <xTaskIncrementTick+0x164>)
 810a2a4:	681b      	ldr	r3, [r3, #0]
 810a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2a8:	429a      	cmp	r2, r3
 810a2aa:	d3b9      	bcc.n	810a220 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 810a2ac:	2301      	movs	r3, #1
 810a2ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a2b0:	e7b6      	b.n	810a220 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a2b2:	4b17      	ldr	r3, [pc, #92]	; (810a310 <xTaskIncrementTick+0x164>)
 810a2b4:	681b      	ldr	r3, [r3, #0]
 810a2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2b8:	4914      	ldr	r1, [pc, #80]	; (810a30c <xTaskIncrementTick+0x160>)
 810a2ba:	4613      	mov	r3, r2
 810a2bc:	009b      	lsls	r3, r3, #2
 810a2be:	4413      	add	r3, r2
 810a2c0:	009b      	lsls	r3, r3, #2
 810a2c2:	440b      	add	r3, r1
 810a2c4:	681b      	ldr	r3, [r3, #0]
 810a2c6:	2b01      	cmp	r3, #1
 810a2c8:	d901      	bls.n	810a2ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 810a2ca:	2301      	movs	r3, #1
 810a2cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810a2ce:	4b11      	ldr	r3, [pc, #68]	; (810a314 <xTaskIncrementTick+0x168>)
 810a2d0:	681b      	ldr	r3, [r3, #0]
 810a2d2:	2b00      	cmp	r3, #0
 810a2d4:	d007      	beq.n	810a2e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 810a2d6:	2301      	movs	r3, #1
 810a2d8:	617b      	str	r3, [r7, #20]
 810a2da:	e004      	b.n	810a2e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810a2dc:	4b0e      	ldr	r3, [pc, #56]	; (810a318 <xTaskIncrementTick+0x16c>)
 810a2de:	681b      	ldr	r3, [r3, #0]
 810a2e0:	3301      	adds	r3, #1
 810a2e2:	4a0d      	ldr	r2, [pc, #52]	; (810a318 <xTaskIncrementTick+0x16c>)
 810a2e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810a2e6:	697b      	ldr	r3, [r7, #20]
}
 810a2e8:	4618      	mov	r0, r3
 810a2ea:	3718      	adds	r7, #24
 810a2ec:	46bd      	mov	sp, r7
 810a2ee:	bd80      	pop	{r7, pc}
 810a2f0:	100057f8 	.word	0x100057f8
 810a2f4:	100057d4 	.word	0x100057d4
 810a2f8:	10005788 	.word	0x10005788
 810a2fc:	1000578c 	.word	0x1000578c
 810a300:	100057e8 	.word	0x100057e8
 810a304:	100057f0 	.word	0x100057f0
 810a308:	100057d8 	.word	0x100057d8
 810a30c:	100056d4 	.word	0x100056d4
 810a310:	100056d0 	.word	0x100056d0
 810a314:	100057e4 	.word	0x100057e4
 810a318:	100057e0 	.word	0x100057e0

0810a31c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a31c:	b480      	push	{r7}
 810a31e:	b087      	sub	sp, #28
 810a320:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a322:	4b29      	ldr	r3, [pc, #164]	; (810a3c8 <vTaskSwitchContext+0xac>)
 810a324:	681b      	ldr	r3, [r3, #0]
 810a326:	2b00      	cmp	r3, #0
 810a328:	d003      	beq.n	810a332 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a32a:	4b28      	ldr	r3, [pc, #160]	; (810a3cc <vTaskSwitchContext+0xb0>)
 810a32c:	2201      	movs	r2, #1
 810a32e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a330:	e044      	b.n	810a3bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 810a332:	4b26      	ldr	r3, [pc, #152]	; (810a3cc <vTaskSwitchContext+0xb0>)
 810a334:	2200      	movs	r2, #0
 810a336:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a338:	4b25      	ldr	r3, [pc, #148]	; (810a3d0 <vTaskSwitchContext+0xb4>)
 810a33a:	681b      	ldr	r3, [r3, #0]
 810a33c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 810a33e:	68fb      	ldr	r3, [r7, #12]
 810a340:	fab3 f383 	clz	r3, r3
 810a344:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810a346:	7afb      	ldrb	r3, [r7, #11]
 810a348:	f1c3 031f 	rsb	r3, r3, #31
 810a34c:	617b      	str	r3, [r7, #20]
 810a34e:	4921      	ldr	r1, [pc, #132]	; (810a3d4 <vTaskSwitchContext+0xb8>)
 810a350:	697a      	ldr	r2, [r7, #20]
 810a352:	4613      	mov	r3, r2
 810a354:	009b      	lsls	r3, r3, #2
 810a356:	4413      	add	r3, r2
 810a358:	009b      	lsls	r3, r3, #2
 810a35a:	440b      	add	r3, r1
 810a35c:	681b      	ldr	r3, [r3, #0]
 810a35e:	2b00      	cmp	r3, #0
 810a360:	d10a      	bne.n	810a378 <vTaskSwitchContext+0x5c>
	__asm volatile
 810a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a366:	f383 8811 	msr	BASEPRI, r3
 810a36a:	f3bf 8f6f 	isb	sy
 810a36e:	f3bf 8f4f 	dsb	sy
 810a372:	607b      	str	r3, [r7, #4]
}
 810a374:	bf00      	nop
 810a376:	e7fe      	b.n	810a376 <vTaskSwitchContext+0x5a>
 810a378:	697a      	ldr	r2, [r7, #20]
 810a37a:	4613      	mov	r3, r2
 810a37c:	009b      	lsls	r3, r3, #2
 810a37e:	4413      	add	r3, r2
 810a380:	009b      	lsls	r3, r3, #2
 810a382:	4a14      	ldr	r2, [pc, #80]	; (810a3d4 <vTaskSwitchContext+0xb8>)
 810a384:	4413      	add	r3, r2
 810a386:	613b      	str	r3, [r7, #16]
 810a388:	693b      	ldr	r3, [r7, #16]
 810a38a:	685b      	ldr	r3, [r3, #4]
 810a38c:	685a      	ldr	r2, [r3, #4]
 810a38e:	693b      	ldr	r3, [r7, #16]
 810a390:	605a      	str	r2, [r3, #4]
 810a392:	693b      	ldr	r3, [r7, #16]
 810a394:	685a      	ldr	r2, [r3, #4]
 810a396:	693b      	ldr	r3, [r7, #16]
 810a398:	3308      	adds	r3, #8
 810a39a:	429a      	cmp	r2, r3
 810a39c:	d104      	bne.n	810a3a8 <vTaskSwitchContext+0x8c>
 810a39e:	693b      	ldr	r3, [r7, #16]
 810a3a0:	685b      	ldr	r3, [r3, #4]
 810a3a2:	685a      	ldr	r2, [r3, #4]
 810a3a4:	693b      	ldr	r3, [r7, #16]
 810a3a6:	605a      	str	r2, [r3, #4]
 810a3a8:	693b      	ldr	r3, [r7, #16]
 810a3aa:	685b      	ldr	r3, [r3, #4]
 810a3ac:	68db      	ldr	r3, [r3, #12]
 810a3ae:	4a0a      	ldr	r2, [pc, #40]	; (810a3d8 <vTaskSwitchContext+0xbc>)
 810a3b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810a3b2:	4b09      	ldr	r3, [pc, #36]	; (810a3d8 <vTaskSwitchContext+0xbc>)
 810a3b4:	681b      	ldr	r3, [r3, #0]
 810a3b6:	334c      	adds	r3, #76	; 0x4c
 810a3b8:	4a08      	ldr	r2, [pc, #32]	; (810a3dc <vTaskSwitchContext+0xc0>)
 810a3ba:	6013      	str	r3, [r2, #0]
}
 810a3bc:	bf00      	nop
 810a3be:	371c      	adds	r7, #28
 810a3c0:	46bd      	mov	sp, r7
 810a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3c6:	4770      	bx	lr
 810a3c8:	100057f8 	.word	0x100057f8
 810a3cc:	100057e4 	.word	0x100057e4
 810a3d0:	100057d8 	.word	0x100057d8
 810a3d4:	100056d4 	.word	0x100056d4
 810a3d8:	100056d0 	.word	0x100056d0
 810a3dc:	1000002c 	.word	0x1000002c

0810a3e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810a3e0:	b580      	push	{r7, lr}
 810a3e2:	b084      	sub	sp, #16
 810a3e4:	af00      	add	r7, sp, #0
 810a3e6:	6078      	str	r0, [r7, #4]
 810a3e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810a3ea:	687b      	ldr	r3, [r7, #4]
 810a3ec:	2b00      	cmp	r3, #0
 810a3ee:	d10a      	bne.n	810a406 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a3f4:	f383 8811 	msr	BASEPRI, r3
 810a3f8:	f3bf 8f6f 	isb	sy
 810a3fc:	f3bf 8f4f 	dsb	sy
 810a400:	60fb      	str	r3, [r7, #12]
}
 810a402:	bf00      	nop
 810a404:	e7fe      	b.n	810a404 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a406:	4b07      	ldr	r3, [pc, #28]	; (810a424 <vTaskPlaceOnEventList+0x44>)
 810a408:	681b      	ldr	r3, [r3, #0]
 810a40a:	3318      	adds	r3, #24
 810a40c:	4619      	mov	r1, r3
 810a40e:	6878      	ldr	r0, [r7, #4]
 810a410:	f7fe fa63 	bl	81088da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810a414:	2101      	movs	r1, #1
 810a416:	6838      	ldr	r0, [r7, #0]
 810a418:	f000 fb82 	bl	810ab20 <prvAddCurrentTaskToDelayedList>
}
 810a41c:	bf00      	nop
 810a41e:	3710      	adds	r7, #16
 810a420:	46bd      	mov	sp, r7
 810a422:	bd80      	pop	{r7, pc}
 810a424:	100056d0 	.word	0x100056d0

0810a428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810a428:	b580      	push	{r7, lr}
 810a42a:	b086      	sub	sp, #24
 810a42c:	af00      	add	r7, sp, #0
 810a42e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a430:	687b      	ldr	r3, [r7, #4]
 810a432:	68db      	ldr	r3, [r3, #12]
 810a434:	68db      	ldr	r3, [r3, #12]
 810a436:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810a438:	693b      	ldr	r3, [r7, #16]
 810a43a:	2b00      	cmp	r3, #0
 810a43c:	d10a      	bne.n	810a454 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 810a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a442:	f383 8811 	msr	BASEPRI, r3
 810a446:	f3bf 8f6f 	isb	sy
 810a44a:	f3bf 8f4f 	dsb	sy
 810a44e:	60fb      	str	r3, [r7, #12]
}
 810a450:	bf00      	nop
 810a452:	e7fe      	b.n	810a452 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810a454:	693b      	ldr	r3, [r7, #16]
 810a456:	3318      	adds	r3, #24
 810a458:	4618      	mov	r0, r3
 810a45a:	f7fe fa77 	bl	810894c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a45e:	4b1d      	ldr	r3, [pc, #116]	; (810a4d4 <xTaskRemoveFromEventList+0xac>)
 810a460:	681b      	ldr	r3, [r3, #0]
 810a462:	2b00      	cmp	r3, #0
 810a464:	d11c      	bne.n	810a4a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810a466:	693b      	ldr	r3, [r7, #16]
 810a468:	3304      	adds	r3, #4
 810a46a:	4618      	mov	r0, r3
 810a46c:	f7fe fa6e 	bl	810894c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810a470:	693b      	ldr	r3, [r7, #16]
 810a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a474:	2201      	movs	r2, #1
 810a476:	409a      	lsls	r2, r3
 810a478:	4b17      	ldr	r3, [pc, #92]	; (810a4d8 <xTaskRemoveFromEventList+0xb0>)
 810a47a:	681b      	ldr	r3, [r3, #0]
 810a47c:	4313      	orrs	r3, r2
 810a47e:	4a16      	ldr	r2, [pc, #88]	; (810a4d8 <xTaskRemoveFromEventList+0xb0>)
 810a480:	6013      	str	r3, [r2, #0]
 810a482:	693b      	ldr	r3, [r7, #16]
 810a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a486:	4613      	mov	r3, r2
 810a488:	009b      	lsls	r3, r3, #2
 810a48a:	4413      	add	r3, r2
 810a48c:	009b      	lsls	r3, r3, #2
 810a48e:	4a13      	ldr	r2, [pc, #76]	; (810a4dc <xTaskRemoveFromEventList+0xb4>)
 810a490:	441a      	add	r2, r3
 810a492:	693b      	ldr	r3, [r7, #16]
 810a494:	3304      	adds	r3, #4
 810a496:	4619      	mov	r1, r3
 810a498:	4610      	mov	r0, r2
 810a49a:	f7fe f9fa 	bl	8108892 <vListInsertEnd>
 810a49e:	e005      	b.n	810a4ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810a4a0:	693b      	ldr	r3, [r7, #16]
 810a4a2:	3318      	adds	r3, #24
 810a4a4:	4619      	mov	r1, r3
 810a4a6:	480e      	ldr	r0, [pc, #56]	; (810a4e0 <xTaskRemoveFromEventList+0xb8>)
 810a4a8:	f7fe f9f3 	bl	8108892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810a4ac:	693b      	ldr	r3, [r7, #16]
 810a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a4b0:	4b0c      	ldr	r3, [pc, #48]	; (810a4e4 <xTaskRemoveFromEventList+0xbc>)
 810a4b2:	681b      	ldr	r3, [r3, #0]
 810a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a4b6:	429a      	cmp	r2, r3
 810a4b8:	d905      	bls.n	810a4c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810a4ba:	2301      	movs	r3, #1
 810a4bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810a4be:	4b0a      	ldr	r3, [pc, #40]	; (810a4e8 <xTaskRemoveFromEventList+0xc0>)
 810a4c0:	2201      	movs	r2, #1
 810a4c2:	601a      	str	r2, [r3, #0]
 810a4c4:	e001      	b.n	810a4ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810a4c6:	2300      	movs	r3, #0
 810a4c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810a4ca:	697b      	ldr	r3, [r7, #20]
}
 810a4cc:	4618      	mov	r0, r3
 810a4ce:	3718      	adds	r7, #24
 810a4d0:	46bd      	mov	sp, r7
 810a4d2:	bd80      	pop	{r7, pc}
 810a4d4:	100057f8 	.word	0x100057f8
 810a4d8:	100057d8 	.word	0x100057d8
 810a4dc:	100056d4 	.word	0x100056d4
 810a4e0:	10005790 	.word	0x10005790
 810a4e4:	100056d0 	.word	0x100056d0
 810a4e8:	100057e4 	.word	0x100057e4

0810a4ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810a4ec:	b480      	push	{r7}
 810a4ee:	b083      	sub	sp, #12
 810a4f0:	af00      	add	r7, sp, #0
 810a4f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810a4f4:	4b06      	ldr	r3, [pc, #24]	; (810a510 <vTaskInternalSetTimeOutState+0x24>)
 810a4f6:	681a      	ldr	r2, [r3, #0]
 810a4f8:	687b      	ldr	r3, [r7, #4]
 810a4fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810a4fc:	4b05      	ldr	r3, [pc, #20]	; (810a514 <vTaskInternalSetTimeOutState+0x28>)
 810a4fe:	681a      	ldr	r2, [r3, #0]
 810a500:	687b      	ldr	r3, [r7, #4]
 810a502:	605a      	str	r2, [r3, #4]
}
 810a504:	bf00      	nop
 810a506:	370c      	adds	r7, #12
 810a508:	46bd      	mov	sp, r7
 810a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a50e:	4770      	bx	lr
 810a510:	100057e8 	.word	0x100057e8
 810a514:	100057d4 	.word	0x100057d4

0810a518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810a518:	b580      	push	{r7, lr}
 810a51a:	b088      	sub	sp, #32
 810a51c:	af00      	add	r7, sp, #0
 810a51e:	6078      	str	r0, [r7, #4]
 810a520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810a522:	687b      	ldr	r3, [r7, #4]
 810a524:	2b00      	cmp	r3, #0
 810a526:	d10a      	bne.n	810a53e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 810a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a52c:	f383 8811 	msr	BASEPRI, r3
 810a530:	f3bf 8f6f 	isb	sy
 810a534:	f3bf 8f4f 	dsb	sy
 810a538:	613b      	str	r3, [r7, #16]
}
 810a53a:	bf00      	nop
 810a53c:	e7fe      	b.n	810a53c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810a53e:	683b      	ldr	r3, [r7, #0]
 810a540:	2b00      	cmp	r3, #0
 810a542:	d10a      	bne.n	810a55a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a548:	f383 8811 	msr	BASEPRI, r3
 810a54c:	f3bf 8f6f 	isb	sy
 810a550:	f3bf 8f4f 	dsb	sy
 810a554:	60fb      	str	r3, [r7, #12]
}
 810a556:	bf00      	nop
 810a558:	e7fe      	b.n	810a558 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 810a55a:	f7fe fb4b 	bl	8108bf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810a55e:	4b1d      	ldr	r3, [pc, #116]	; (810a5d4 <xTaskCheckForTimeOut+0xbc>)
 810a560:	681b      	ldr	r3, [r3, #0]
 810a562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810a564:	687b      	ldr	r3, [r7, #4]
 810a566:	685b      	ldr	r3, [r3, #4]
 810a568:	69ba      	ldr	r2, [r7, #24]
 810a56a:	1ad3      	subs	r3, r2, r3
 810a56c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810a56e:	683b      	ldr	r3, [r7, #0]
 810a570:	681b      	ldr	r3, [r3, #0]
 810a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a576:	d102      	bne.n	810a57e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810a578:	2300      	movs	r3, #0
 810a57a:	61fb      	str	r3, [r7, #28]
 810a57c:	e023      	b.n	810a5c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810a57e:	687b      	ldr	r3, [r7, #4]
 810a580:	681a      	ldr	r2, [r3, #0]
 810a582:	4b15      	ldr	r3, [pc, #84]	; (810a5d8 <xTaskCheckForTimeOut+0xc0>)
 810a584:	681b      	ldr	r3, [r3, #0]
 810a586:	429a      	cmp	r2, r3
 810a588:	d007      	beq.n	810a59a <xTaskCheckForTimeOut+0x82>
 810a58a:	687b      	ldr	r3, [r7, #4]
 810a58c:	685b      	ldr	r3, [r3, #4]
 810a58e:	69ba      	ldr	r2, [r7, #24]
 810a590:	429a      	cmp	r2, r3
 810a592:	d302      	bcc.n	810a59a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810a594:	2301      	movs	r3, #1
 810a596:	61fb      	str	r3, [r7, #28]
 810a598:	e015      	b.n	810a5c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810a59a:	683b      	ldr	r3, [r7, #0]
 810a59c:	681b      	ldr	r3, [r3, #0]
 810a59e:	697a      	ldr	r2, [r7, #20]
 810a5a0:	429a      	cmp	r2, r3
 810a5a2:	d20b      	bcs.n	810a5bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810a5a4:	683b      	ldr	r3, [r7, #0]
 810a5a6:	681a      	ldr	r2, [r3, #0]
 810a5a8:	697b      	ldr	r3, [r7, #20]
 810a5aa:	1ad2      	subs	r2, r2, r3
 810a5ac:	683b      	ldr	r3, [r7, #0]
 810a5ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810a5b0:	6878      	ldr	r0, [r7, #4]
 810a5b2:	f7ff ff9b 	bl	810a4ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810a5b6:	2300      	movs	r3, #0
 810a5b8:	61fb      	str	r3, [r7, #28]
 810a5ba:	e004      	b.n	810a5c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 810a5bc:	683b      	ldr	r3, [r7, #0]
 810a5be:	2200      	movs	r2, #0
 810a5c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810a5c2:	2301      	movs	r3, #1
 810a5c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810a5c6:	f7fe fb45 	bl	8108c54 <vPortExitCritical>

	return xReturn;
 810a5ca:	69fb      	ldr	r3, [r7, #28]
}
 810a5cc:	4618      	mov	r0, r3
 810a5ce:	3720      	adds	r7, #32
 810a5d0:	46bd      	mov	sp, r7
 810a5d2:	bd80      	pop	{r7, pc}
 810a5d4:	100057d4 	.word	0x100057d4
 810a5d8:	100057e8 	.word	0x100057e8

0810a5dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810a5dc:	b480      	push	{r7}
 810a5de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810a5e0:	4b03      	ldr	r3, [pc, #12]	; (810a5f0 <vTaskMissedYield+0x14>)
 810a5e2:	2201      	movs	r2, #1
 810a5e4:	601a      	str	r2, [r3, #0]
}
 810a5e6:	bf00      	nop
 810a5e8:	46bd      	mov	sp, r7
 810a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5ee:	4770      	bx	lr
 810a5f0:	100057e4 	.word	0x100057e4

0810a5f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810a5f4:	b580      	push	{r7, lr}
 810a5f6:	b082      	sub	sp, #8
 810a5f8:	af00      	add	r7, sp, #0
 810a5fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810a5fc:	f000 f852 	bl	810a6a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810a600:	4b06      	ldr	r3, [pc, #24]	; (810a61c <prvIdleTask+0x28>)
 810a602:	681b      	ldr	r3, [r3, #0]
 810a604:	2b01      	cmp	r3, #1
 810a606:	d9f9      	bls.n	810a5fc <prvIdleTask+0x8>
			{
				taskYIELD();
 810a608:	4b05      	ldr	r3, [pc, #20]	; (810a620 <prvIdleTask+0x2c>)
 810a60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a60e:	601a      	str	r2, [r3, #0]
 810a610:	f3bf 8f4f 	dsb	sy
 810a614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810a618:	e7f0      	b.n	810a5fc <prvIdleTask+0x8>
 810a61a:	bf00      	nop
 810a61c:	100056d4 	.word	0x100056d4
 810a620:	e000ed04 	.word	0xe000ed04

0810a624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810a624:	b580      	push	{r7, lr}
 810a626:	b082      	sub	sp, #8
 810a628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a62a:	2300      	movs	r3, #0
 810a62c:	607b      	str	r3, [r7, #4]
 810a62e:	e00c      	b.n	810a64a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810a630:	687a      	ldr	r2, [r7, #4]
 810a632:	4613      	mov	r3, r2
 810a634:	009b      	lsls	r3, r3, #2
 810a636:	4413      	add	r3, r2
 810a638:	009b      	lsls	r3, r3, #2
 810a63a:	4a12      	ldr	r2, [pc, #72]	; (810a684 <prvInitialiseTaskLists+0x60>)
 810a63c:	4413      	add	r3, r2
 810a63e:	4618      	mov	r0, r3
 810a640:	f7fe f8fa 	bl	8108838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	3301      	adds	r3, #1
 810a648:	607b      	str	r3, [r7, #4]
 810a64a:	687b      	ldr	r3, [r7, #4]
 810a64c:	2b06      	cmp	r3, #6
 810a64e:	d9ef      	bls.n	810a630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810a650:	480d      	ldr	r0, [pc, #52]	; (810a688 <prvInitialiseTaskLists+0x64>)
 810a652:	f7fe f8f1 	bl	8108838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810a656:	480d      	ldr	r0, [pc, #52]	; (810a68c <prvInitialiseTaskLists+0x68>)
 810a658:	f7fe f8ee 	bl	8108838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810a65c:	480c      	ldr	r0, [pc, #48]	; (810a690 <prvInitialiseTaskLists+0x6c>)
 810a65e:	f7fe f8eb 	bl	8108838 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810a662:	480c      	ldr	r0, [pc, #48]	; (810a694 <prvInitialiseTaskLists+0x70>)
 810a664:	f7fe f8e8 	bl	8108838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810a668:	480b      	ldr	r0, [pc, #44]	; (810a698 <prvInitialiseTaskLists+0x74>)
 810a66a:	f7fe f8e5 	bl	8108838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810a66e:	4b0b      	ldr	r3, [pc, #44]	; (810a69c <prvInitialiseTaskLists+0x78>)
 810a670:	4a05      	ldr	r2, [pc, #20]	; (810a688 <prvInitialiseTaskLists+0x64>)
 810a672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810a674:	4b0a      	ldr	r3, [pc, #40]	; (810a6a0 <prvInitialiseTaskLists+0x7c>)
 810a676:	4a05      	ldr	r2, [pc, #20]	; (810a68c <prvInitialiseTaskLists+0x68>)
 810a678:	601a      	str	r2, [r3, #0]
}
 810a67a:	bf00      	nop
 810a67c:	3708      	adds	r7, #8
 810a67e:	46bd      	mov	sp, r7
 810a680:	bd80      	pop	{r7, pc}
 810a682:	bf00      	nop
 810a684:	100056d4 	.word	0x100056d4
 810a688:	10005760 	.word	0x10005760
 810a68c:	10005774 	.word	0x10005774
 810a690:	10005790 	.word	0x10005790
 810a694:	100057a4 	.word	0x100057a4
 810a698:	100057bc 	.word	0x100057bc
 810a69c:	10005788 	.word	0x10005788
 810a6a0:	1000578c 	.word	0x1000578c

0810a6a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810a6a4:	b580      	push	{r7, lr}
 810a6a6:	b082      	sub	sp, #8
 810a6a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a6aa:	e019      	b.n	810a6e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810a6ac:	f7fe faa2 	bl	8108bf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a6b0:	4b10      	ldr	r3, [pc, #64]	; (810a6f4 <prvCheckTasksWaitingTermination+0x50>)
 810a6b2:	68db      	ldr	r3, [r3, #12]
 810a6b4:	68db      	ldr	r3, [r3, #12]
 810a6b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a6b8:	687b      	ldr	r3, [r7, #4]
 810a6ba:	3304      	adds	r3, #4
 810a6bc:	4618      	mov	r0, r3
 810a6be:	f7fe f945 	bl	810894c <uxListRemove>
				--uxCurrentNumberOfTasks;
 810a6c2:	4b0d      	ldr	r3, [pc, #52]	; (810a6f8 <prvCheckTasksWaitingTermination+0x54>)
 810a6c4:	681b      	ldr	r3, [r3, #0]
 810a6c6:	3b01      	subs	r3, #1
 810a6c8:	4a0b      	ldr	r2, [pc, #44]	; (810a6f8 <prvCheckTasksWaitingTermination+0x54>)
 810a6ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810a6cc:	4b0b      	ldr	r3, [pc, #44]	; (810a6fc <prvCheckTasksWaitingTermination+0x58>)
 810a6ce:	681b      	ldr	r3, [r3, #0]
 810a6d0:	3b01      	subs	r3, #1
 810a6d2:	4a0a      	ldr	r2, [pc, #40]	; (810a6fc <prvCheckTasksWaitingTermination+0x58>)
 810a6d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810a6d6:	f7fe fabd 	bl	8108c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810a6da:	6878      	ldr	r0, [r7, #4]
 810a6dc:	f000 f810 	bl	810a700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a6e0:	4b06      	ldr	r3, [pc, #24]	; (810a6fc <prvCheckTasksWaitingTermination+0x58>)
 810a6e2:	681b      	ldr	r3, [r3, #0]
 810a6e4:	2b00      	cmp	r3, #0
 810a6e6:	d1e1      	bne.n	810a6ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810a6e8:	bf00      	nop
 810a6ea:	bf00      	nop
 810a6ec:	3708      	adds	r7, #8
 810a6ee:	46bd      	mov	sp, r7
 810a6f0:	bd80      	pop	{r7, pc}
 810a6f2:	bf00      	nop
 810a6f4:	100057a4 	.word	0x100057a4
 810a6f8:	100057d0 	.word	0x100057d0
 810a6fc:	100057b8 	.word	0x100057b8

0810a700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810a700:	b580      	push	{r7, lr}
 810a702:	b084      	sub	sp, #16
 810a704:	af00      	add	r7, sp, #0
 810a706:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	334c      	adds	r3, #76	; 0x4c
 810a70c:	4618      	mov	r0, r3
 810a70e:	f008 fbab 	bl	8112e68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810a712:	687b      	ldr	r3, [r7, #4]
 810a714:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 810a718:	2b00      	cmp	r3, #0
 810a71a:	d108      	bne.n	810a72e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810a71c:	687b      	ldr	r3, [r7, #4]
 810a71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a720:	4618      	mov	r0, r3
 810a722:	f7fd ff6b 	bl	81085fc <vPortFree>
				vPortFree( pxTCB );
 810a726:	6878      	ldr	r0, [r7, #4]
 810a728:	f7fd ff68 	bl	81085fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810a72c:	e018      	b.n	810a760 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810a72e:	687b      	ldr	r3, [r7, #4]
 810a730:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 810a734:	2b01      	cmp	r3, #1
 810a736:	d103      	bne.n	810a740 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810a738:	6878      	ldr	r0, [r7, #4]
 810a73a:	f7fd ff5f 	bl	81085fc <vPortFree>
	}
 810a73e:	e00f      	b.n	810a760 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810a740:	687b      	ldr	r3, [r7, #4]
 810a742:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 810a746:	2b02      	cmp	r3, #2
 810a748:	d00a      	beq.n	810a760 <prvDeleteTCB+0x60>
	__asm volatile
 810a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a74e:	f383 8811 	msr	BASEPRI, r3
 810a752:	f3bf 8f6f 	isb	sy
 810a756:	f3bf 8f4f 	dsb	sy
 810a75a:	60fb      	str	r3, [r7, #12]
}
 810a75c:	bf00      	nop
 810a75e:	e7fe      	b.n	810a75e <prvDeleteTCB+0x5e>
	}
 810a760:	bf00      	nop
 810a762:	3710      	adds	r7, #16
 810a764:	46bd      	mov	sp, r7
 810a766:	bd80      	pop	{r7, pc}

0810a768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810a768:	b480      	push	{r7}
 810a76a:	b083      	sub	sp, #12
 810a76c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a76e:	4b0c      	ldr	r3, [pc, #48]	; (810a7a0 <prvResetNextTaskUnblockTime+0x38>)
 810a770:	681b      	ldr	r3, [r3, #0]
 810a772:	681b      	ldr	r3, [r3, #0]
 810a774:	2b00      	cmp	r3, #0
 810a776:	d104      	bne.n	810a782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810a778:	4b0a      	ldr	r3, [pc, #40]	; (810a7a4 <prvResetNextTaskUnblockTime+0x3c>)
 810a77a:	f04f 32ff 	mov.w	r2, #4294967295
 810a77e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810a780:	e008      	b.n	810a794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a782:	4b07      	ldr	r3, [pc, #28]	; (810a7a0 <prvResetNextTaskUnblockTime+0x38>)
 810a784:	681b      	ldr	r3, [r3, #0]
 810a786:	68db      	ldr	r3, [r3, #12]
 810a788:	68db      	ldr	r3, [r3, #12]
 810a78a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810a78c:	687b      	ldr	r3, [r7, #4]
 810a78e:	685b      	ldr	r3, [r3, #4]
 810a790:	4a04      	ldr	r2, [pc, #16]	; (810a7a4 <prvResetNextTaskUnblockTime+0x3c>)
 810a792:	6013      	str	r3, [r2, #0]
}
 810a794:	bf00      	nop
 810a796:	370c      	adds	r7, #12
 810a798:	46bd      	mov	sp, r7
 810a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a79e:	4770      	bx	lr
 810a7a0:	10005788 	.word	0x10005788
 810a7a4:	100057f0 	.word	0x100057f0

0810a7a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810a7a8:	b480      	push	{r7}
 810a7aa:	b083      	sub	sp, #12
 810a7ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810a7ae:	4b0b      	ldr	r3, [pc, #44]	; (810a7dc <xTaskGetSchedulerState+0x34>)
 810a7b0:	681b      	ldr	r3, [r3, #0]
 810a7b2:	2b00      	cmp	r3, #0
 810a7b4:	d102      	bne.n	810a7bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810a7b6:	2301      	movs	r3, #1
 810a7b8:	607b      	str	r3, [r7, #4]
 810a7ba:	e008      	b.n	810a7ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a7bc:	4b08      	ldr	r3, [pc, #32]	; (810a7e0 <xTaskGetSchedulerState+0x38>)
 810a7be:	681b      	ldr	r3, [r3, #0]
 810a7c0:	2b00      	cmp	r3, #0
 810a7c2:	d102      	bne.n	810a7ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810a7c4:	2302      	movs	r3, #2
 810a7c6:	607b      	str	r3, [r7, #4]
 810a7c8:	e001      	b.n	810a7ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810a7ca:	2300      	movs	r3, #0
 810a7cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810a7ce:	687b      	ldr	r3, [r7, #4]
	}
 810a7d0:	4618      	mov	r0, r3
 810a7d2:	370c      	adds	r7, #12
 810a7d4:	46bd      	mov	sp, r7
 810a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7da:	4770      	bx	lr
 810a7dc:	100057dc 	.word	0x100057dc
 810a7e0:	100057f8 	.word	0x100057f8

0810a7e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810a7e4:	b580      	push	{r7, lr}
 810a7e6:	b084      	sub	sp, #16
 810a7e8:	af00      	add	r7, sp, #0
 810a7ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810a7ec:	687b      	ldr	r3, [r7, #4]
 810a7ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810a7f0:	2300      	movs	r3, #0
 810a7f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810a7f4:	687b      	ldr	r3, [r7, #4]
 810a7f6:	2b00      	cmp	r3, #0
 810a7f8:	d05e      	beq.n	810a8b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810a7fa:	68bb      	ldr	r3, [r7, #8]
 810a7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a7fe:	4b31      	ldr	r3, [pc, #196]	; (810a8c4 <xTaskPriorityInherit+0xe0>)
 810a800:	681b      	ldr	r3, [r3, #0]
 810a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a804:	429a      	cmp	r2, r3
 810a806:	d24e      	bcs.n	810a8a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810a808:	68bb      	ldr	r3, [r7, #8]
 810a80a:	699b      	ldr	r3, [r3, #24]
 810a80c:	2b00      	cmp	r3, #0
 810a80e:	db06      	blt.n	810a81e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a810:	4b2c      	ldr	r3, [pc, #176]	; (810a8c4 <xTaskPriorityInherit+0xe0>)
 810a812:	681b      	ldr	r3, [r3, #0]
 810a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a816:	f1c3 0207 	rsb	r2, r3, #7
 810a81a:	68bb      	ldr	r3, [r7, #8]
 810a81c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810a81e:	68bb      	ldr	r3, [r7, #8]
 810a820:	6959      	ldr	r1, [r3, #20]
 810a822:	68bb      	ldr	r3, [r7, #8]
 810a824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a826:	4613      	mov	r3, r2
 810a828:	009b      	lsls	r3, r3, #2
 810a82a:	4413      	add	r3, r2
 810a82c:	009b      	lsls	r3, r3, #2
 810a82e:	4a26      	ldr	r2, [pc, #152]	; (810a8c8 <xTaskPriorityInherit+0xe4>)
 810a830:	4413      	add	r3, r2
 810a832:	4299      	cmp	r1, r3
 810a834:	d12f      	bne.n	810a896 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a836:	68bb      	ldr	r3, [r7, #8]
 810a838:	3304      	adds	r3, #4
 810a83a:	4618      	mov	r0, r3
 810a83c:	f7fe f886 	bl	810894c <uxListRemove>
 810a840:	4603      	mov	r3, r0
 810a842:	2b00      	cmp	r3, #0
 810a844:	d10a      	bne.n	810a85c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 810a846:	68bb      	ldr	r3, [r7, #8]
 810a848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a84a:	2201      	movs	r2, #1
 810a84c:	fa02 f303 	lsl.w	r3, r2, r3
 810a850:	43da      	mvns	r2, r3
 810a852:	4b1e      	ldr	r3, [pc, #120]	; (810a8cc <xTaskPriorityInherit+0xe8>)
 810a854:	681b      	ldr	r3, [r3, #0]
 810a856:	4013      	ands	r3, r2
 810a858:	4a1c      	ldr	r2, [pc, #112]	; (810a8cc <xTaskPriorityInherit+0xe8>)
 810a85a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810a85c:	4b19      	ldr	r3, [pc, #100]	; (810a8c4 <xTaskPriorityInherit+0xe0>)
 810a85e:	681b      	ldr	r3, [r3, #0]
 810a860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a862:	68bb      	ldr	r3, [r7, #8]
 810a864:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810a866:	68bb      	ldr	r3, [r7, #8]
 810a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a86a:	2201      	movs	r2, #1
 810a86c:	409a      	lsls	r2, r3
 810a86e:	4b17      	ldr	r3, [pc, #92]	; (810a8cc <xTaskPriorityInherit+0xe8>)
 810a870:	681b      	ldr	r3, [r3, #0]
 810a872:	4313      	orrs	r3, r2
 810a874:	4a15      	ldr	r2, [pc, #84]	; (810a8cc <xTaskPriorityInherit+0xe8>)
 810a876:	6013      	str	r3, [r2, #0]
 810a878:	68bb      	ldr	r3, [r7, #8]
 810a87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a87c:	4613      	mov	r3, r2
 810a87e:	009b      	lsls	r3, r3, #2
 810a880:	4413      	add	r3, r2
 810a882:	009b      	lsls	r3, r3, #2
 810a884:	4a10      	ldr	r2, [pc, #64]	; (810a8c8 <xTaskPriorityInherit+0xe4>)
 810a886:	441a      	add	r2, r3
 810a888:	68bb      	ldr	r3, [r7, #8]
 810a88a:	3304      	adds	r3, #4
 810a88c:	4619      	mov	r1, r3
 810a88e:	4610      	mov	r0, r2
 810a890:	f7fd ffff 	bl	8108892 <vListInsertEnd>
 810a894:	e004      	b.n	810a8a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810a896:	4b0b      	ldr	r3, [pc, #44]	; (810a8c4 <xTaskPriorityInherit+0xe0>)
 810a898:	681b      	ldr	r3, [r3, #0]
 810a89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a89c:	68bb      	ldr	r3, [r7, #8]
 810a89e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810a8a0:	2301      	movs	r3, #1
 810a8a2:	60fb      	str	r3, [r7, #12]
 810a8a4:	e008      	b.n	810a8b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810a8a6:	68bb      	ldr	r3, [r7, #8]
 810a8a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a8aa:	4b06      	ldr	r3, [pc, #24]	; (810a8c4 <xTaskPriorityInherit+0xe0>)
 810a8ac:	681b      	ldr	r3, [r3, #0]
 810a8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8b0:	429a      	cmp	r2, r3
 810a8b2:	d201      	bcs.n	810a8b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810a8b4:	2301      	movs	r3, #1
 810a8b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810a8b8:	68fb      	ldr	r3, [r7, #12]
	}
 810a8ba:	4618      	mov	r0, r3
 810a8bc:	3710      	adds	r7, #16
 810a8be:	46bd      	mov	sp, r7
 810a8c0:	bd80      	pop	{r7, pc}
 810a8c2:	bf00      	nop
 810a8c4:	100056d0 	.word	0x100056d0
 810a8c8:	100056d4 	.word	0x100056d4
 810a8cc:	100057d8 	.word	0x100057d8

0810a8d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810a8d0:	b580      	push	{r7, lr}
 810a8d2:	b086      	sub	sp, #24
 810a8d4:	af00      	add	r7, sp, #0
 810a8d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810a8d8:	687b      	ldr	r3, [r7, #4]
 810a8da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810a8dc:	2300      	movs	r3, #0
 810a8de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810a8e0:	687b      	ldr	r3, [r7, #4]
 810a8e2:	2b00      	cmp	r3, #0
 810a8e4:	d06e      	beq.n	810a9c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810a8e6:	4b3a      	ldr	r3, [pc, #232]	; (810a9d0 <xTaskPriorityDisinherit+0x100>)
 810a8e8:	681b      	ldr	r3, [r3, #0]
 810a8ea:	693a      	ldr	r2, [r7, #16]
 810a8ec:	429a      	cmp	r2, r3
 810a8ee:	d00a      	beq.n	810a906 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a8f4:	f383 8811 	msr	BASEPRI, r3
 810a8f8:	f3bf 8f6f 	isb	sy
 810a8fc:	f3bf 8f4f 	dsb	sy
 810a900:	60fb      	str	r3, [r7, #12]
}
 810a902:	bf00      	nop
 810a904:	e7fe      	b.n	810a904 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810a906:	693b      	ldr	r3, [r7, #16]
 810a908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a90a:	2b00      	cmp	r3, #0
 810a90c:	d10a      	bne.n	810a924 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a912:	f383 8811 	msr	BASEPRI, r3
 810a916:	f3bf 8f6f 	isb	sy
 810a91a:	f3bf 8f4f 	dsb	sy
 810a91e:	60bb      	str	r3, [r7, #8]
}
 810a920:	bf00      	nop
 810a922:	e7fe      	b.n	810a922 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 810a924:	693b      	ldr	r3, [r7, #16]
 810a926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a928:	1e5a      	subs	r2, r3, #1
 810a92a:	693b      	ldr	r3, [r7, #16]
 810a92c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810a92e:	693b      	ldr	r3, [r7, #16]
 810a930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a932:	693b      	ldr	r3, [r7, #16]
 810a934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a936:	429a      	cmp	r2, r3
 810a938:	d044      	beq.n	810a9c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810a93a:	693b      	ldr	r3, [r7, #16]
 810a93c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a93e:	2b00      	cmp	r3, #0
 810a940:	d140      	bne.n	810a9c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a942:	693b      	ldr	r3, [r7, #16]
 810a944:	3304      	adds	r3, #4
 810a946:	4618      	mov	r0, r3
 810a948:	f7fe f800 	bl	810894c <uxListRemove>
 810a94c:	4603      	mov	r3, r0
 810a94e:	2b00      	cmp	r3, #0
 810a950:	d115      	bne.n	810a97e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810a952:	693b      	ldr	r3, [r7, #16]
 810a954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a956:	491f      	ldr	r1, [pc, #124]	; (810a9d4 <xTaskPriorityDisinherit+0x104>)
 810a958:	4613      	mov	r3, r2
 810a95a:	009b      	lsls	r3, r3, #2
 810a95c:	4413      	add	r3, r2
 810a95e:	009b      	lsls	r3, r3, #2
 810a960:	440b      	add	r3, r1
 810a962:	681b      	ldr	r3, [r3, #0]
 810a964:	2b00      	cmp	r3, #0
 810a966:	d10a      	bne.n	810a97e <xTaskPriorityDisinherit+0xae>
 810a968:	693b      	ldr	r3, [r7, #16]
 810a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a96c:	2201      	movs	r2, #1
 810a96e:	fa02 f303 	lsl.w	r3, r2, r3
 810a972:	43da      	mvns	r2, r3
 810a974:	4b18      	ldr	r3, [pc, #96]	; (810a9d8 <xTaskPriorityDisinherit+0x108>)
 810a976:	681b      	ldr	r3, [r3, #0]
 810a978:	4013      	ands	r3, r2
 810a97a:	4a17      	ldr	r2, [pc, #92]	; (810a9d8 <xTaskPriorityDisinherit+0x108>)
 810a97c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810a97e:	693b      	ldr	r3, [r7, #16]
 810a980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a982:	693b      	ldr	r3, [r7, #16]
 810a984:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a986:	693b      	ldr	r3, [r7, #16]
 810a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a98a:	f1c3 0207 	rsb	r2, r3, #7
 810a98e:	693b      	ldr	r3, [r7, #16]
 810a990:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810a992:	693b      	ldr	r3, [r7, #16]
 810a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a996:	2201      	movs	r2, #1
 810a998:	409a      	lsls	r2, r3
 810a99a:	4b0f      	ldr	r3, [pc, #60]	; (810a9d8 <xTaskPriorityDisinherit+0x108>)
 810a99c:	681b      	ldr	r3, [r3, #0]
 810a99e:	4313      	orrs	r3, r2
 810a9a0:	4a0d      	ldr	r2, [pc, #52]	; (810a9d8 <xTaskPriorityDisinherit+0x108>)
 810a9a2:	6013      	str	r3, [r2, #0]
 810a9a4:	693b      	ldr	r3, [r7, #16]
 810a9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a9a8:	4613      	mov	r3, r2
 810a9aa:	009b      	lsls	r3, r3, #2
 810a9ac:	4413      	add	r3, r2
 810a9ae:	009b      	lsls	r3, r3, #2
 810a9b0:	4a08      	ldr	r2, [pc, #32]	; (810a9d4 <xTaskPriorityDisinherit+0x104>)
 810a9b2:	441a      	add	r2, r3
 810a9b4:	693b      	ldr	r3, [r7, #16]
 810a9b6:	3304      	adds	r3, #4
 810a9b8:	4619      	mov	r1, r3
 810a9ba:	4610      	mov	r0, r2
 810a9bc:	f7fd ff69 	bl	8108892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810a9c0:	2301      	movs	r3, #1
 810a9c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810a9c4:	697b      	ldr	r3, [r7, #20]
	}
 810a9c6:	4618      	mov	r0, r3
 810a9c8:	3718      	adds	r7, #24
 810a9ca:	46bd      	mov	sp, r7
 810a9cc:	bd80      	pop	{r7, pc}
 810a9ce:	bf00      	nop
 810a9d0:	100056d0 	.word	0x100056d0
 810a9d4:	100056d4 	.word	0x100056d4
 810a9d8:	100057d8 	.word	0x100057d8

0810a9dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810a9dc:	b580      	push	{r7, lr}
 810a9de:	b088      	sub	sp, #32
 810a9e0:	af00      	add	r7, sp, #0
 810a9e2:	6078      	str	r0, [r7, #4]
 810a9e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810a9e6:	687b      	ldr	r3, [r7, #4]
 810a9e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810a9ea:	2301      	movs	r3, #1
 810a9ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810a9ee:	687b      	ldr	r3, [r7, #4]
 810a9f0:	2b00      	cmp	r3, #0
 810a9f2:	d077      	beq.n	810aae4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810a9f4:	69bb      	ldr	r3, [r7, #24]
 810a9f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a9f8:	2b00      	cmp	r3, #0
 810a9fa:	d10a      	bne.n	810aa12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 810a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa00:	f383 8811 	msr	BASEPRI, r3
 810aa04:	f3bf 8f6f 	isb	sy
 810aa08:	f3bf 8f4f 	dsb	sy
 810aa0c:	60fb      	str	r3, [r7, #12]
}
 810aa0e:	bf00      	nop
 810aa10:	e7fe      	b.n	810aa10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810aa12:	69bb      	ldr	r3, [r7, #24]
 810aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810aa16:	683a      	ldr	r2, [r7, #0]
 810aa18:	429a      	cmp	r2, r3
 810aa1a:	d902      	bls.n	810aa22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810aa1c:	683b      	ldr	r3, [r7, #0]
 810aa1e:	61fb      	str	r3, [r7, #28]
 810aa20:	e002      	b.n	810aa28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810aa22:	69bb      	ldr	r3, [r7, #24]
 810aa24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810aa26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810aa28:	69bb      	ldr	r3, [r7, #24]
 810aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aa2c:	69fa      	ldr	r2, [r7, #28]
 810aa2e:	429a      	cmp	r2, r3
 810aa30:	d058      	beq.n	810aae4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810aa32:	69bb      	ldr	r3, [r7, #24]
 810aa34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aa36:	697a      	ldr	r2, [r7, #20]
 810aa38:	429a      	cmp	r2, r3
 810aa3a:	d153      	bne.n	810aae4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810aa3c:	4b2b      	ldr	r3, [pc, #172]	; (810aaec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 810aa3e:	681b      	ldr	r3, [r3, #0]
 810aa40:	69ba      	ldr	r2, [r7, #24]
 810aa42:	429a      	cmp	r2, r3
 810aa44:	d10a      	bne.n	810aa5c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 810aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa4a:	f383 8811 	msr	BASEPRI, r3
 810aa4e:	f3bf 8f6f 	isb	sy
 810aa52:	f3bf 8f4f 	dsb	sy
 810aa56:	60bb      	str	r3, [r7, #8]
}
 810aa58:	bf00      	nop
 810aa5a:	e7fe      	b.n	810aa5a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810aa5c:	69bb      	ldr	r3, [r7, #24]
 810aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aa60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810aa62:	69bb      	ldr	r3, [r7, #24]
 810aa64:	69fa      	ldr	r2, [r7, #28]
 810aa66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810aa68:	69bb      	ldr	r3, [r7, #24]
 810aa6a:	699b      	ldr	r3, [r3, #24]
 810aa6c:	2b00      	cmp	r3, #0
 810aa6e:	db04      	blt.n	810aa7a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810aa70:	69fb      	ldr	r3, [r7, #28]
 810aa72:	f1c3 0207 	rsb	r2, r3, #7
 810aa76:	69bb      	ldr	r3, [r7, #24]
 810aa78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810aa7a:	69bb      	ldr	r3, [r7, #24]
 810aa7c:	6959      	ldr	r1, [r3, #20]
 810aa7e:	693a      	ldr	r2, [r7, #16]
 810aa80:	4613      	mov	r3, r2
 810aa82:	009b      	lsls	r3, r3, #2
 810aa84:	4413      	add	r3, r2
 810aa86:	009b      	lsls	r3, r3, #2
 810aa88:	4a19      	ldr	r2, [pc, #100]	; (810aaf0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 810aa8a:	4413      	add	r3, r2
 810aa8c:	4299      	cmp	r1, r3
 810aa8e:	d129      	bne.n	810aae4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810aa90:	69bb      	ldr	r3, [r7, #24]
 810aa92:	3304      	adds	r3, #4
 810aa94:	4618      	mov	r0, r3
 810aa96:	f7fd ff59 	bl	810894c <uxListRemove>
 810aa9a:	4603      	mov	r3, r0
 810aa9c:	2b00      	cmp	r3, #0
 810aa9e:	d10a      	bne.n	810aab6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 810aaa0:	69bb      	ldr	r3, [r7, #24]
 810aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aaa4:	2201      	movs	r2, #1
 810aaa6:	fa02 f303 	lsl.w	r3, r2, r3
 810aaaa:	43da      	mvns	r2, r3
 810aaac:	4b11      	ldr	r3, [pc, #68]	; (810aaf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810aaae:	681b      	ldr	r3, [r3, #0]
 810aab0:	4013      	ands	r3, r2
 810aab2:	4a10      	ldr	r2, [pc, #64]	; (810aaf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810aab4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810aab6:	69bb      	ldr	r3, [r7, #24]
 810aab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aaba:	2201      	movs	r2, #1
 810aabc:	409a      	lsls	r2, r3
 810aabe:	4b0d      	ldr	r3, [pc, #52]	; (810aaf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810aac0:	681b      	ldr	r3, [r3, #0]
 810aac2:	4313      	orrs	r3, r2
 810aac4:	4a0b      	ldr	r2, [pc, #44]	; (810aaf4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810aac6:	6013      	str	r3, [r2, #0]
 810aac8:	69bb      	ldr	r3, [r7, #24]
 810aaca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aacc:	4613      	mov	r3, r2
 810aace:	009b      	lsls	r3, r3, #2
 810aad0:	4413      	add	r3, r2
 810aad2:	009b      	lsls	r3, r3, #2
 810aad4:	4a06      	ldr	r2, [pc, #24]	; (810aaf0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 810aad6:	441a      	add	r2, r3
 810aad8:	69bb      	ldr	r3, [r7, #24]
 810aada:	3304      	adds	r3, #4
 810aadc:	4619      	mov	r1, r3
 810aade:	4610      	mov	r0, r2
 810aae0:	f7fd fed7 	bl	8108892 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810aae4:	bf00      	nop
 810aae6:	3720      	adds	r7, #32
 810aae8:	46bd      	mov	sp, r7
 810aaea:	bd80      	pop	{r7, pc}
 810aaec:	100056d0 	.word	0x100056d0
 810aaf0:	100056d4 	.word	0x100056d4
 810aaf4:	100057d8 	.word	0x100057d8

0810aaf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810aaf8:	b480      	push	{r7}
 810aafa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810aafc:	4b07      	ldr	r3, [pc, #28]	; (810ab1c <pvTaskIncrementMutexHeldCount+0x24>)
 810aafe:	681b      	ldr	r3, [r3, #0]
 810ab00:	2b00      	cmp	r3, #0
 810ab02:	d004      	beq.n	810ab0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810ab04:	4b05      	ldr	r3, [pc, #20]	; (810ab1c <pvTaskIncrementMutexHeldCount+0x24>)
 810ab06:	681b      	ldr	r3, [r3, #0]
 810ab08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810ab0a:	3201      	adds	r2, #1
 810ab0c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 810ab0e:	4b03      	ldr	r3, [pc, #12]	; (810ab1c <pvTaskIncrementMutexHeldCount+0x24>)
 810ab10:	681b      	ldr	r3, [r3, #0]
	}
 810ab12:	4618      	mov	r0, r3
 810ab14:	46bd      	mov	sp, r7
 810ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab1a:	4770      	bx	lr
 810ab1c:	100056d0 	.word	0x100056d0

0810ab20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810ab20:	b580      	push	{r7, lr}
 810ab22:	b084      	sub	sp, #16
 810ab24:	af00      	add	r7, sp, #0
 810ab26:	6078      	str	r0, [r7, #4]
 810ab28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810ab2a:	4b29      	ldr	r3, [pc, #164]	; (810abd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 810ab2c:	681b      	ldr	r3, [r3, #0]
 810ab2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ab30:	4b28      	ldr	r3, [pc, #160]	; (810abd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab32:	681b      	ldr	r3, [r3, #0]
 810ab34:	3304      	adds	r3, #4
 810ab36:	4618      	mov	r0, r3
 810ab38:	f7fd ff08 	bl	810894c <uxListRemove>
 810ab3c:	4603      	mov	r3, r0
 810ab3e:	2b00      	cmp	r3, #0
 810ab40:	d10b      	bne.n	810ab5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810ab42:	4b24      	ldr	r3, [pc, #144]	; (810abd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab44:	681b      	ldr	r3, [r3, #0]
 810ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ab48:	2201      	movs	r2, #1
 810ab4a:	fa02 f303 	lsl.w	r3, r2, r3
 810ab4e:	43da      	mvns	r2, r3
 810ab50:	4b21      	ldr	r3, [pc, #132]	; (810abd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 810ab52:	681b      	ldr	r3, [r3, #0]
 810ab54:	4013      	ands	r3, r2
 810ab56:	4a20      	ldr	r2, [pc, #128]	; (810abd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 810ab58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810ab5a:	687b      	ldr	r3, [r7, #4]
 810ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ab60:	d10a      	bne.n	810ab78 <prvAddCurrentTaskToDelayedList+0x58>
 810ab62:	683b      	ldr	r3, [r7, #0]
 810ab64:	2b00      	cmp	r3, #0
 810ab66:	d007      	beq.n	810ab78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ab68:	4b1a      	ldr	r3, [pc, #104]	; (810abd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab6a:	681b      	ldr	r3, [r3, #0]
 810ab6c:	3304      	adds	r3, #4
 810ab6e:	4619      	mov	r1, r3
 810ab70:	481a      	ldr	r0, [pc, #104]	; (810abdc <prvAddCurrentTaskToDelayedList+0xbc>)
 810ab72:	f7fd fe8e 	bl	8108892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810ab76:	e026      	b.n	810abc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810ab78:	68fa      	ldr	r2, [r7, #12]
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	4413      	add	r3, r2
 810ab7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810ab80:	4b14      	ldr	r3, [pc, #80]	; (810abd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab82:	681b      	ldr	r3, [r3, #0]
 810ab84:	68ba      	ldr	r2, [r7, #8]
 810ab86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810ab88:	68ba      	ldr	r2, [r7, #8]
 810ab8a:	68fb      	ldr	r3, [r7, #12]
 810ab8c:	429a      	cmp	r2, r3
 810ab8e:	d209      	bcs.n	810aba4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ab90:	4b13      	ldr	r3, [pc, #76]	; (810abe0 <prvAddCurrentTaskToDelayedList+0xc0>)
 810ab92:	681a      	ldr	r2, [r3, #0]
 810ab94:	4b0f      	ldr	r3, [pc, #60]	; (810abd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ab96:	681b      	ldr	r3, [r3, #0]
 810ab98:	3304      	adds	r3, #4
 810ab9a:	4619      	mov	r1, r3
 810ab9c:	4610      	mov	r0, r2
 810ab9e:	f7fd fe9c 	bl	81088da <vListInsert>
}
 810aba2:	e010      	b.n	810abc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810aba4:	4b0f      	ldr	r3, [pc, #60]	; (810abe4 <prvAddCurrentTaskToDelayedList+0xc4>)
 810aba6:	681a      	ldr	r2, [r3, #0]
 810aba8:	4b0a      	ldr	r3, [pc, #40]	; (810abd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810abaa:	681b      	ldr	r3, [r3, #0]
 810abac:	3304      	adds	r3, #4
 810abae:	4619      	mov	r1, r3
 810abb0:	4610      	mov	r0, r2
 810abb2:	f7fd fe92 	bl	81088da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810abb6:	4b0c      	ldr	r3, [pc, #48]	; (810abe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 810abb8:	681b      	ldr	r3, [r3, #0]
 810abba:	68ba      	ldr	r2, [r7, #8]
 810abbc:	429a      	cmp	r2, r3
 810abbe:	d202      	bcs.n	810abc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 810abc0:	4a09      	ldr	r2, [pc, #36]	; (810abe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 810abc2:	68bb      	ldr	r3, [r7, #8]
 810abc4:	6013      	str	r3, [r2, #0]
}
 810abc6:	bf00      	nop
 810abc8:	3710      	adds	r7, #16
 810abca:	46bd      	mov	sp, r7
 810abcc:	bd80      	pop	{r7, pc}
 810abce:	bf00      	nop
 810abd0:	100057d4 	.word	0x100057d4
 810abd4:	100056d0 	.word	0x100056d0
 810abd8:	100057d8 	.word	0x100057d8
 810abdc:	100057bc 	.word	0x100057bc
 810abe0:	1000578c 	.word	0x1000578c
 810abe4:	10005788 	.word	0x10005788
 810abe8:	100057f0 	.word	0x100057f0

0810abec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 810abec:	b480      	push	{r7}
 810abee:	b083      	sub	sp, #12
 810abf0:	af00      	add	r7, sp, #0
 810abf2:	4603      	mov	r3, r0
 810abf4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 810abf6:	88fb      	ldrh	r3, [r7, #6]
 810abf8:	021b      	lsls	r3, r3, #8
 810abfa:	b21a      	sxth	r2, r3
 810abfc:	88fb      	ldrh	r3, [r7, #6]
 810abfe:	0a1b      	lsrs	r3, r3, #8
 810ac00:	b29b      	uxth	r3, r3
 810ac02:	b21b      	sxth	r3, r3
 810ac04:	4313      	orrs	r3, r2
 810ac06:	b21b      	sxth	r3, r3
 810ac08:	b29b      	uxth	r3, r3
}
 810ac0a:	4618      	mov	r0, r3
 810ac0c:	370c      	adds	r7, #12
 810ac0e:	46bd      	mov	sp, r7
 810ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac14:	4770      	bx	lr
	...

0810ac18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 810ac18:	b580      	push	{r7, lr}
 810ac1a:	b082      	sub	sp, #8
 810ac1c:	af00      	add	r7, sp, #0
 810ac1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 810ac20:	4915      	ldr	r1, [pc, #84]	; (810ac78 <etharp_free_entry+0x60>)
 810ac22:	687a      	ldr	r2, [r7, #4]
 810ac24:	4613      	mov	r3, r2
 810ac26:	005b      	lsls	r3, r3, #1
 810ac28:	4413      	add	r3, r2
 810ac2a:	00db      	lsls	r3, r3, #3
 810ac2c:	440b      	add	r3, r1
 810ac2e:	681b      	ldr	r3, [r3, #0]
 810ac30:	2b00      	cmp	r3, #0
 810ac32:	d013      	beq.n	810ac5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 810ac34:	4910      	ldr	r1, [pc, #64]	; (810ac78 <etharp_free_entry+0x60>)
 810ac36:	687a      	ldr	r2, [r7, #4]
 810ac38:	4613      	mov	r3, r2
 810ac3a:	005b      	lsls	r3, r3, #1
 810ac3c:	4413      	add	r3, r2
 810ac3e:	00db      	lsls	r3, r3, #3
 810ac40:	440b      	add	r3, r1
 810ac42:	681b      	ldr	r3, [r3, #0]
 810ac44:	4618      	mov	r0, r3
 810ac46:	f003 feed 	bl	810ea24 <pbuf_free>
    arp_table[i].q = NULL;
 810ac4a:	490b      	ldr	r1, [pc, #44]	; (810ac78 <etharp_free_entry+0x60>)
 810ac4c:	687a      	ldr	r2, [r7, #4]
 810ac4e:	4613      	mov	r3, r2
 810ac50:	005b      	lsls	r3, r3, #1
 810ac52:	4413      	add	r3, r2
 810ac54:	00db      	lsls	r3, r3, #3
 810ac56:	440b      	add	r3, r1
 810ac58:	2200      	movs	r2, #0
 810ac5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 810ac5c:	4906      	ldr	r1, [pc, #24]	; (810ac78 <etharp_free_entry+0x60>)
 810ac5e:	687a      	ldr	r2, [r7, #4]
 810ac60:	4613      	mov	r3, r2
 810ac62:	005b      	lsls	r3, r3, #1
 810ac64:	4413      	add	r3, r2
 810ac66:	00db      	lsls	r3, r3, #3
 810ac68:	440b      	add	r3, r1
 810ac6a:	3314      	adds	r3, #20
 810ac6c:	2200      	movs	r2, #0
 810ac6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 810ac70:	bf00      	nop
 810ac72:	3708      	adds	r7, #8
 810ac74:	46bd      	mov	sp, r7
 810ac76:	bd80      	pop	{r7, pc}
 810ac78:	100057fc 	.word	0x100057fc

0810ac7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 810ac7c:	b580      	push	{r7, lr}
 810ac7e:	b082      	sub	sp, #8
 810ac80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810ac82:	2300      	movs	r3, #0
 810ac84:	607b      	str	r3, [r7, #4]
 810ac86:	e096      	b.n	810adb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 810ac88:	494f      	ldr	r1, [pc, #316]	; (810adc8 <etharp_tmr+0x14c>)
 810ac8a:	687a      	ldr	r2, [r7, #4]
 810ac8c:	4613      	mov	r3, r2
 810ac8e:	005b      	lsls	r3, r3, #1
 810ac90:	4413      	add	r3, r2
 810ac92:	00db      	lsls	r3, r3, #3
 810ac94:	440b      	add	r3, r1
 810ac96:	3314      	adds	r3, #20
 810ac98:	781b      	ldrb	r3, [r3, #0]
 810ac9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 810ac9c:	78fb      	ldrb	r3, [r7, #3]
 810ac9e:	2b00      	cmp	r3, #0
 810aca0:	f000 8086 	beq.w	810adb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 810aca4:	4948      	ldr	r1, [pc, #288]	; (810adc8 <etharp_tmr+0x14c>)
 810aca6:	687a      	ldr	r2, [r7, #4]
 810aca8:	4613      	mov	r3, r2
 810acaa:	005b      	lsls	r3, r3, #1
 810acac:	4413      	add	r3, r2
 810acae:	00db      	lsls	r3, r3, #3
 810acb0:	440b      	add	r3, r1
 810acb2:	3312      	adds	r3, #18
 810acb4:	881b      	ldrh	r3, [r3, #0]
 810acb6:	3301      	adds	r3, #1
 810acb8:	b298      	uxth	r0, r3
 810acba:	4943      	ldr	r1, [pc, #268]	; (810adc8 <etharp_tmr+0x14c>)
 810acbc:	687a      	ldr	r2, [r7, #4]
 810acbe:	4613      	mov	r3, r2
 810acc0:	005b      	lsls	r3, r3, #1
 810acc2:	4413      	add	r3, r2
 810acc4:	00db      	lsls	r3, r3, #3
 810acc6:	440b      	add	r3, r1
 810acc8:	3312      	adds	r3, #18
 810acca:	4602      	mov	r2, r0
 810accc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810acce:	493e      	ldr	r1, [pc, #248]	; (810adc8 <etharp_tmr+0x14c>)
 810acd0:	687a      	ldr	r2, [r7, #4]
 810acd2:	4613      	mov	r3, r2
 810acd4:	005b      	lsls	r3, r3, #1
 810acd6:	4413      	add	r3, r2
 810acd8:	00db      	lsls	r3, r3, #3
 810acda:	440b      	add	r3, r1
 810acdc:	3312      	adds	r3, #18
 810acde:	881b      	ldrh	r3, [r3, #0]
 810ace0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 810ace4:	d215      	bcs.n	810ad12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810ace6:	4938      	ldr	r1, [pc, #224]	; (810adc8 <etharp_tmr+0x14c>)
 810ace8:	687a      	ldr	r2, [r7, #4]
 810acea:	4613      	mov	r3, r2
 810acec:	005b      	lsls	r3, r3, #1
 810acee:	4413      	add	r3, r2
 810acf0:	00db      	lsls	r3, r3, #3
 810acf2:	440b      	add	r3, r1
 810acf4:	3314      	adds	r3, #20
 810acf6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810acf8:	2b01      	cmp	r3, #1
 810acfa:	d10e      	bne.n	810ad1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 810acfc:	4932      	ldr	r1, [pc, #200]	; (810adc8 <etharp_tmr+0x14c>)
 810acfe:	687a      	ldr	r2, [r7, #4]
 810ad00:	4613      	mov	r3, r2
 810ad02:	005b      	lsls	r3, r3, #1
 810ad04:	4413      	add	r3, r2
 810ad06:	00db      	lsls	r3, r3, #3
 810ad08:	440b      	add	r3, r1
 810ad0a:	3312      	adds	r3, #18
 810ad0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810ad0e:	2b04      	cmp	r3, #4
 810ad10:	d903      	bls.n	810ad1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 810ad12:	6878      	ldr	r0, [r7, #4]
 810ad14:	f7ff ff80 	bl	810ac18 <etharp_free_entry>
 810ad18:	e04a      	b.n	810adb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 810ad1a:	492b      	ldr	r1, [pc, #172]	; (810adc8 <etharp_tmr+0x14c>)
 810ad1c:	687a      	ldr	r2, [r7, #4]
 810ad1e:	4613      	mov	r3, r2
 810ad20:	005b      	lsls	r3, r3, #1
 810ad22:	4413      	add	r3, r2
 810ad24:	00db      	lsls	r3, r3, #3
 810ad26:	440b      	add	r3, r1
 810ad28:	3314      	adds	r3, #20
 810ad2a:	781b      	ldrb	r3, [r3, #0]
 810ad2c:	2b03      	cmp	r3, #3
 810ad2e:	d10a      	bne.n	810ad46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 810ad30:	4925      	ldr	r1, [pc, #148]	; (810adc8 <etharp_tmr+0x14c>)
 810ad32:	687a      	ldr	r2, [r7, #4]
 810ad34:	4613      	mov	r3, r2
 810ad36:	005b      	lsls	r3, r3, #1
 810ad38:	4413      	add	r3, r2
 810ad3a:	00db      	lsls	r3, r3, #3
 810ad3c:	440b      	add	r3, r1
 810ad3e:	3314      	adds	r3, #20
 810ad40:	2204      	movs	r2, #4
 810ad42:	701a      	strb	r2, [r3, #0]
 810ad44:	e034      	b.n	810adb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 810ad46:	4920      	ldr	r1, [pc, #128]	; (810adc8 <etharp_tmr+0x14c>)
 810ad48:	687a      	ldr	r2, [r7, #4]
 810ad4a:	4613      	mov	r3, r2
 810ad4c:	005b      	lsls	r3, r3, #1
 810ad4e:	4413      	add	r3, r2
 810ad50:	00db      	lsls	r3, r3, #3
 810ad52:	440b      	add	r3, r1
 810ad54:	3314      	adds	r3, #20
 810ad56:	781b      	ldrb	r3, [r3, #0]
 810ad58:	2b04      	cmp	r3, #4
 810ad5a:	d10a      	bne.n	810ad72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 810ad5c:	491a      	ldr	r1, [pc, #104]	; (810adc8 <etharp_tmr+0x14c>)
 810ad5e:	687a      	ldr	r2, [r7, #4]
 810ad60:	4613      	mov	r3, r2
 810ad62:	005b      	lsls	r3, r3, #1
 810ad64:	4413      	add	r3, r2
 810ad66:	00db      	lsls	r3, r3, #3
 810ad68:	440b      	add	r3, r1
 810ad6a:	3314      	adds	r3, #20
 810ad6c:	2202      	movs	r2, #2
 810ad6e:	701a      	strb	r2, [r3, #0]
 810ad70:	e01e      	b.n	810adb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810ad72:	4915      	ldr	r1, [pc, #84]	; (810adc8 <etharp_tmr+0x14c>)
 810ad74:	687a      	ldr	r2, [r7, #4]
 810ad76:	4613      	mov	r3, r2
 810ad78:	005b      	lsls	r3, r3, #1
 810ad7a:	4413      	add	r3, r2
 810ad7c:	00db      	lsls	r3, r3, #3
 810ad7e:	440b      	add	r3, r1
 810ad80:	3314      	adds	r3, #20
 810ad82:	781b      	ldrb	r3, [r3, #0]
 810ad84:	2b01      	cmp	r3, #1
 810ad86:	d113      	bne.n	810adb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 810ad88:	490f      	ldr	r1, [pc, #60]	; (810adc8 <etharp_tmr+0x14c>)
 810ad8a:	687a      	ldr	r2, [r7, #4]
 810ad8c:	4613      	mov	r3, r2
 810ad8e:	005b      	lsls	r3, r3, #1
 810ad90:	4413      	add	r3, r2
 810ad92:	00db      	lsls	r3, r3, #3
 810ad94:	440b      	add	r3, r1
 810ad96:	3308      	adds	r3, #8
 810ad98:	6818      	ldr	r0, [r3, #0]
 810ad9a:	687a      	ldr	r2, [r7, #4]
 810ad9c:	4613      	mov	r3, r2
 810ad9e:	005b      	lsls	r3, r3, #1
 810ada0:	4413      	add	r3, r2
 810ada2:	00db      	lsls	r3, r3, #3
 810ada4:	4a08      	ldr	r2, [pc, #32]	; (810adc8 <etharp_tmr+0x14c>)
 810ada6:	4413      	add	r3, r2
 810ada8:	3304      	adds	r3, #4
 810adaa:	4619      	mov	r1, r3
 810adac:	f000 fe6e 	bl	810ba8c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810adb0:	687b      	ldr	r3, [r7, #4]
 810adb2:	3301      	adds	r3, #1
 810adb4:	607b      	str	r3, [r7, #4]
 810adb6:	687b      	ldr	r3, [r7, #4]
 810adb8:	2b09      	cmp	r3, #9
 810adba:	f77f af65 	ble.w	810ac88 <etharp_tmr+0xc>
      }
    }
  }
}
 810adbe:	bf00      	nop
 810adc0:	bf00      	nop
 810adc2:	3708      	adds	r7, #8
 810adc4:	46bd      	mov	sp, r7
 810adc6:	bd80      	pop	{r7, pc}
 810adc8:	100057fc 	.word	0x100057fc

0810adcc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 810adcc:	b580      	push	{r7, lr}
 810adce:	b08a      	sub	sp, #40	; 0x28
 810add0:	af00      	add	r7, sp, #0
 810add2:	60f8      	str	r0, [r7, #12]
 810add4:	460b      	mov	r3, r1
 810add6:	607a      	str	r2, [r7, #4]
 810add8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 810adda:	230a      	movs	r3, #10
 810addc:	84fb      	strh	r3, [r7, #38]	; 0x26
 810adde:	230a      	movs	r3, #10
 810ade0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 810ade2:	230a      	movs	r3, #10
 810ade4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 810ade6:	2300      	movs	r3, #0
 810ade8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 810adea:	230a      	movs	r3, #10
 810adec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 810adee:	2300      	movs	r3, #0
 810adf0:	83bb      	strh	r3, [r7, #28]
 810adf2:	2300      	movs	r3, #0
 810adf4:	837b      	strh	r3, [r7, #26]
 810adf6:	2300      	movs	r3, #0
 810adf8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810adfa:	2300      	movs	r3, #0
 810adfc:	843b      	strh	r3, [r7, #32]
 810adfe:	e0ae      	b.n	810af5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 810ae00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ae04:	49a6      	ldr	r1, [pc, #664]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810ae06:	4613      	mov	r3, r2
 810ae08:	005b      	lsls	r3, r3, #1
 810ae0a:	4413      	add	r3, r2
 810ae0c:	00db      	lsls	r3, r3, #3
 810ae0e:	440b      	add	r3, r1
 810ae10:	3314      	adds	r3, #20
 810ae12:	781b      	ldrb	r3, [r3, #0]
 810ae14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 810ae16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 810ae1a:	2b0a      	cmp	r3, #10
 810ae1c:	d105      	bne.n	810ae2a <etharp_find_entry+0x5e>
 810ae1e:	7dfb      	ldrb	r3, [r7, #23]
 810ae20:	2b00      	cmp	r3, #0
 810ae22:	d102      	bne.n	810ae2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 810ae24:	8c3b      	ldrh	r3, [r7, #32]
 810ae26:	847b      	strh	r3, [r7, #34]	; 0x22
 810ae28:	e095      	b.n	810af56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 810ae2a:	7dfb      	ldrb	r3, [r7, #23]
 810ae2c:	2b00      	cmp	r3, #0
 810ae2e:	f000 8092 	beq.w	810af56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 810ae32:	7dfb      	ldrb	r3, [r7, #23]
 810ae34:	2b01      	cmp	r3, #1
 810ae36:	d009      	beq.n	810ae4c <etharp_find_entry+0x80>
 810ae38:	7dfb      	ldrb	r3, [r7, #23]
 810ae3a:	2b01      	cmp	r3, #1
 810ae3c:	d806      	bhi.n	810ae4c <etharp_find_entry+0x80>
 810ae3e:	4b99      	ldr	r3, [pc, #612]	; (810b0a4 <etharp_find_entry+0x2d8>)
 810ae40:	f240 1223 	movw	r2, #291	; 0x123
 810ae44:	4998      	ldr	r1, [pc, #608]	; (810b0a8 <etharp_find_entry+0x2dc>)
 810ae46:	4899      	ldr	r0, [pc, #612]	; (810b0ac <etharp_find_entry+0x2e0>)
 810ae48:	f007 ff32 	bl	8112cb0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 810ae4c:	68fb      	ldr	r3, [r7, #12]
 810ae4e:	2b00      	cmp	r3, #0
 810ae50:	d020      	beq.n	810ae94 <etharp_find_entry+0xc8>
 810ae52:	68fb      	ldr	r3, [r7, #12]
 810ae54:	6819      	ldr	r1, [r3, #0]
 810ae56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ae5a:	4891      	ldr	r0, [pc, #580]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810ae5c:	4613      	mov	r3, r2
 810ae5e:	005b      	lsls	r3, r3, #1
 810ae60:	4413      	add	r3, r2
 810ae62:	00db      	lsls	r3, r3, #3
 810ae64:	4403      	add	r3, r0
 810ae66:	3304      	adds	r3, #4
 810ae68:	681b      	ldr	r3, [r3, #0]
 810ae6a:	4299      	cmp	r1, r3
 810ae6c:	d112      	bne.n	810ae94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 810ae6e:	687b      	ldr	r3, [r7, #4]
 810ae70:	2b00      	cmp	r3, #0
 810ae72:	d00c      	beq.n	810ae8e <etharp_find_entry+0xc2>
 810ae74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ae78:	4989      	ldr	r1, [pc, #548]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810ae7a:	4613      	mov	r3, r2
 810ae7c:	005b      	lsls	r3, r3, #1
 810ae7e:	4413      	add	r3, r2
 810ae80:	00db      	lsls	r3, r3, #3
 810ae82:	440b      	add	r3, r1
 810ae84:	3308      	adds	r3, #8
 810ae86:	681b      	ldr	r3, [r3, #0]
 810ae88:	687a      	ldr	r2, [r7, #4]
 810ae8a:	429a      	cmp	r2, r3
 810ae8c:	d102      	bne.n	810ae94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 810ae8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810ae92:	e100      	b.n	810b096 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 810ae94:	7dfb      	ldrb	r3, [r7, #23]
 810ae96:	2b01      	cmp	r3, #1
 810ae98:	d140      	bne.n	810af1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 810ae9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ae9e:	4980      	ldr	r1, [pc, #512]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810aea0:	4613      	mov	r3, r2
 810aea2:	005b      	lsls	r3, r3, #1
 810aea4:	4413      	add	r3, r2
 810aea6:	00db      	lsls	r3, r3, #3
 810aea8:	440b      	add	r3, r1
 810aeaa:	681b      	ldr	r3, [r3, #0]
 810aeac:	2b00      	cmp	r3, #0
 810aeae:	d01a      	beq.n	810aee6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 810aeb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810aeb4:	497a      	ldr	r1, [pc, #488]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810aeb6:	4613      	mov	r3, r2
 810aeb8:	005b      	lsls	r3, r3, #1
 810aeba:	4413      	add	r3, r2
 810aebc:	00db      	lsls	r3, r3, #3
 810aebe:	440b      	add	r3, r1
 810aec0:	3312      	adds	r3, #18
 810aec2:	881b      	ldrh	r3, [r3, #0]
 810aec4:	8bba      	ldrh	r2, [r7, #28]
 810aec6:	429a      	cmp	r2, r3
 810aec8:	d845      	bhi.n	810af56 <etharp_find_entry+0x18a>
            old_queue = i;
 810aeca:	8c3b      	ldrh	r3, [r7, #32]
 810aecc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 810aece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810aed2:	4973      	ldr	r1, [pc, #460]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810aed4:	4613      	mov	r3, r2
 810aed6:	005b      	lsls	r3, r3, #1
 810aed8:	4413      	add	r3, r2
 810aeda:	00db      	lsls	r3, r3, #3
 810aedc:	440b      	add	r3, r1
 810aede:	3312      	adds	r3, #18
 810aee0:	881b      	ldrh	r3, [r3, #0]
 810aee2:	83bb      	strh	r3, [r7, #28]
 810aee4:	e037      	b.n	810af56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 810aee6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810aeea:	496d      	ldr	r1, [pc, #436]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810aeec:	4613      	mov	r3, r2
 810aeee:	005b      	lsls	r3, r3, #1
 810aef0:	4413      	add	r3, r2
 810aef2:	00db      	lsls	r3, r3, #3
 810aef4:	440b      	add	r3, r1
 810aef6:	3312      	adds	r3, #18
 810aef8:	881b      	ldrh	r3, [r3, #0]
 810aefa:	8b7a      	ldrh	r2, [r7, #26]
 810aefc:	429a      	cmp	r2, r3
 810aefe:	d82a      	bhi.n	810af56 <etharp_find_entry+0x18a>
            old_pending = i;
 810af00:	8c3b      	ldrh	r3, [r7, #32]
 810af02:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 810af04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810af08:	4965      	ldr	r1, [pc, #404]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810af0a:	4613      	mov	r3, r2
 810af0c:	005b      	lsls	r3, r3, #1
 810af0e:	4413      	add	r3, r2
 810af10:	00db      	lsls	r3, r3, #3
 810af12:	440b      	add	r3, r1
 810af14:	3312      	adds	r3, #18
 810af16:	881b      	ldrh	r3, [r3, #0]
 810af18:	837b      	strh	r3, [r7, #26]
 810af1a:	e01c      	b.n	810af56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 810af1c:	7dfb      	ldrb	r3, [r7, #23]
 810af1e:	2b01      	cmp	r3, #1
 810af20:	d919      	bls.n	810af56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 810af22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810af26:	495e      	ldr	r1, [pc, #376]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810af28:	4613      	mov	r3, r2
 810af2a:	005b      	lsls	r3, r3, #1
 810af2c:	4413      	add	r3, r2
 810af2e:	00db      	lsls	r3, r3, #3
 810af30:	440b      	add	r3, r1
 810af32:	3312      	adds	r3, #18
 810af34:	881b      	ldrh	r3, [r3, #0]
 810af36:	8b3a      	ldrh	r2, [r7, #24]
 810af38:	429a      	cmp	r2, r3
 810af3a:	d80c      	bhi.n	810af56 <etharp_find_entry+0x18a>
            old_stable = i;
 810af3c:	8c3b      	ldrh	r3, [r7, #32]
 810af3e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 810af40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810af44:	4956      	ldr	r1, [pc, #344]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810af46:	4613      	mov	r3, r2
 810af48:	005b      	lsls	r3, r3, #1
 810af4a:	4413      	add	r3, r2
 810af4c:	00db      	lsls	r3, r3, #3
 810af4e:	440b      	add	r3, r1
 810af50:	3312      	adds	r3, #18
 810af52:	881b      	ldrh	r3, [r3, #0]
 810af54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810af56:	8c3b      	ldrh	r3, [r7, #32]
 810af58:	3301      	adds	r3, #1
 810af5a:	b29b      	uxth	r3, r3
 810af5c:	843b      	strh	r3, [r7, #32]
 810af5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810af62:	2b09      	cmp	r3, #9
 810af64:	f77f af4c 	ble.w	810ae00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 810af68:	7afb      	ldrb	r3, [r7, #11]
 810af6a:	f003 0302 	and.w	r3, r3, #2
 810af6e:	2b00      	cmp	r3, #0
 810af70:	d108      	bne.n	810af84 <etharp_find_entry+0x1b8>
 810af72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 810af76:	2b0a      	cmp	r3, #10
 810af78:	d107      	bne.n	810af8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 810af7a:	7afb      	ldrb	r3, [r7, #11]
 810af7c:	f003 0301 	and.w	r3, r3, #1
 810af80:	2b00      	cmp	r3, #0
 810af82:	d102      	bne.n	810af8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 810af84:	f04f 33ff 	mov.w	r3, #4294967295
 810af88:	e085      	b.n	810b096 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 810af8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 810af8e:	2b09      	cmp	r3, #9
 810af90:	dc02      	bgt.n	810af98 <etharp_find_entry+0x1cc>
    i = empty;
 810af92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810af94:	843b      	strh	r3, [r7, #32]
 810af96:	e039      	b.n	810b00c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 810af98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 810af9c:	2b09      	cmp	r3, #9
 810af9e:	dc14      	bgt.n	810afca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 810afa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810afa2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 810afa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810afa8:	493d      	ldr	r1, [pc, #244]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810afaa:	4613      	mov	r3, r2
 810afac:	005b      	lsls	r3, r3, #1
 810afae:	4413      	add	r3, r2
 810afb0:	00db      	lsls	r3, r3, #3
 810afb2:	440b      	add	r3, r1
 810afb4:	681b      	ldr	r3, [r3, #0]
 810afb6:	2b00      	cmp	r3, #0
 810afb8:	d018      	beq.n	810afec <etharp_find_entry+0x220>
 810afba:	4b3a      	ldr	r3, [pc, #232]	; (810b0a4 <etharp_find_entry+0x2d8>)
 810afbc:	f240 126d 	movw	r2, #365	; 0x16d
 810afc0:	493b      	ldr	r1, [pc, #236]	; (810b0b0 <etharp_find_entry+0x2e4>)
 810afc2:	483a      	ldr	r0, [pc, #232]	; (810b0ac <etharp_find_entry+0x2e0>)
 810afc4:	f007 fe74 	bl	8112cb0 <iprintf>
 810afc8:	e010      	b.n	810afec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 810afca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 810afce:	2b09      	cmp	r3, #9
 810afd0:	dc02      	bgt.n	810afd8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 810afd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810afd4:	843b      	strh	r3, [r7, #32]
 810afd6:	e009      	b.n	810afec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 810afd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 810afdc:	2b09      	cmp	r3, #9
 810afde:	dc02      	bgt.n	810afe6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 810afe0:	8bfb      	ldrh	r3, [r7, #30]
 810afe2:	843b      	strh	r3, [r7, #32]
 810afe4:	e002      	b.n	810afec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 810afe6:	f04f 33ff 	mov.w	r3, #4294967295
 810afea:	e054      	b.n	810b096 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810afec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810aff0:	2b09      	cmp	r3, #9
 810aff2:	dd06      	ble.n	810b002 <etharp_find_entry+0x236>
 810aff4:	4b2b      	ldr	r3, [pc, #172]	; (810b0a4 <etharp_find_entry+0x2d8>)
 810aff6:	f240 127f 	movw	r2, #383	; 0x17f
 810affa:	492e      	ldr	r1, [pc, #184]	; (810b0b4 <etharp_find_entry+0x2e8>)
 810affc:	482b      	ldr	r0, [pc, #172]	; (810b0ac <etharp_find_entry+0x2e0>)
 810affe:	f007 fe57 	bl	8112cb0 <iprintf>
    etharp_free_entry(i);
 810b002:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810b006:	4618      	mov	r0, r3
 810b008:	f7ff fe06 	bl	810ac18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810b00c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810b010:	2b09      	cmp	r3, #9
 810b012:	dd06      	ble.n	810b022 <etharp_find_entry+0x256>
 810b014:	4b23      	ldr	r3, [pc, #140]	; (810b0a4 <etharp_find_entry+0x2d8>)
 810b016:	f240 1283 	movw	r2, #387	; 0x183
 810b01a:	4926      	ldr	r1, [pc, #152]	; (810b0b4 <etharp_find_entry+0x2e8>)
 810b01c:	4823      	ldr	r0, [pc, #140]	; (810b0ac <etharp_find_entry+0x2e0>)
 810b01e:	f007 fe47 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 810b022:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b026:	491e      	ldr	r1, [pc, #120]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810b028:	4613      	mov	r3, r2
 810b02a:	005b      	lsls	r3, r3, #1
 810b02c:	4413      	add	r3, r2
 810b02e:	00db      	lsls	r3, r3, #3
 810b030:	440b      	add	r3, r1
 810b032:	3314      	adds	r3, #20
 810b034:	781b      	ldrb	r3, [r3, #0]
 810b036:	2b00      	cmp	r3, #0
 810b038:	d006      	beq.n	810b048 <etharp_find_entry+0x27c>
 810b03a:	4b1a      	ldr	r3, [pc, #104]	; (810b0a4 <etharp_find_entry+0x2d8>)
 810b03c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 810b040:	491d      	ldr	r1, [pc, #116]	; (810b0b8 <etharp_find_entry+0x2ec>)
 810b042:	481a      	ldr	r0, [pc, #104]	; (810b0ac <etharp_find_entry+0x2e0>)
 810b044:	f007 fe34 	bl	8112cb0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 810b048:	68fb      	ldr	r3, [r7, #12]
 810b04a:	2b00      	cmp	r3, #0
 810b04c:	d00b      	beq.n	810b066 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 810b04e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b052:	68fb      	ldr	r3, [r7, #12]
 810b054:	6819      	ldr	r1, [r3, #0]
 810b056:	4812      	ldr	r0, [pc, #72]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810b058:	4613      	mov	r3, r2
 810b05a:	005b      	lsls	r3, r3, #1
 810b05c:	4413      	add	r3, r2
 810b05e:	00db      	lsls	r3, r3, #3
 810b060:	4403      	add	r3, r0
 810b062:	3304      	adds	r3, #4
 810b064:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 810b066:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b06a:	490d      	ldr	r1, [pc, #52]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810b06c:	4613      	mov	r3, r2
 810b06e:	005b      	lsls	r3, r3, #1
 810b070:	4413      	add	r3, r2
 810b072:	00db      	lsls	r3, r3, #3
 810b074:	440b      	add	r3, r1
 810b076:	3312      	adds	r3, #18
 810b078:	2200      	movs	r2, #0
 810b07a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 810b07c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b080:	4907      	ldr	r1, [pc, #28]	; (810b0a0 <etharp_find_entry+0x2d4>)
 810b082:	4613      	mov	r3, r2
 810b084:	005b      	lsls	r3, r3, #1
 810b086:	4413      	add	r3, r2
 810b088:	00db      	lsls	r3, r3, #3
 810b08a:	440b      	add	r3, r1
 810b08c:	3308      	adds	r3, #8
 810b08e:	687a      	ldr	r2, [r7, #4]
 810b090:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 810b092:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 810b096:	4618      	mov	r0, r3
 810b098:	3728      	adds	r7, #40	; 0x28
 810b09a:	46bd      	mov	sp, r7
 810b09c:	bd80      	pop	{r7, pc}
 810b09e:	bf00      	nop
 810b0a0:	100057fc 	.word	0x100057fc
 810b0a4:	08114f20 	.word	0x08114f20
 810b0a8:	08114f80 	.word	0x08114f80
 810b0ac:	08114fc0 	.word	0x08114fc0
 810b0b0:	08114fe8 	.word	0x08114fe8
 810b0b4:	08115000 	.word	0x08115000
 810b0b8:	08115014 	.word	0x08115014

0810b0bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 810b0bc:	b580      	push	{r7, lr}
 810b0be:	b088      	sub	sp, #32
 810b0c0:	af02      	add	r7, sp, #8
 810b0c2:	60f8      	str	r0, [r7, #12]
 810b0c4:	60b9      	str	r1, [r7, #8]
 810b0c6:	607a      	str	r2, [r7, #4]
 810b0c8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 810b0ca:	68fb      	ldr	r3, [r7, #12]
 810b0cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810b0d0:	2b06      	cmp	r3, #6
 810b0d2:	d006      	beq.n	810b0e2 <etharp_update_arp_entry+0x26>
 810b0d4:	4b48      	ldr	r3, [pc, #288]	; (810b1f8 <etharp_update_arp_entry+0x13c>)
 810b0d6:	f240 12a9 	movw	r2, #425	; 0x1a9
 810b0da:	4948      	ldr	r1, [pc, #288]	; (810b1fc <etharp_update_arp_entry+0x140>)
 810b0dc:	4848      	ldr	r0, [pc, #288]	; (810b200 <etharp_update_arp_entry+0x144>)
 810b0de:	f007 fde7 	bl	8112cb0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 810b0e2:	68bb      	ldr	r3, [r7, #8]
 810b0e4:	2b00      	cmp	r3, #0
 810b0e6:	d012      	beq.n	810b10e <etharp_update_arp_entry+0x52>
 810b0e8:	68bb      	ldr	r3, [r7, #8]
 810b0ea:	681b      	ldr	r3, [r3, #0]
 810b0ec:	2b00      	cmp	r3, #0
 810b0ee:	d00e      	beq.n	810b10e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810b0f0:	68bb      	ldr	r3, [r7, #8]
 810b0f2:	681b      	ldr	r3, [r3, #0]
 810b0f4:	68f9      	ldr	r1, [r7, #12]
 810b0f6:	4618      	mov	r0, r3
 810b0f8:	f001 fac2 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810b0fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 810b0fe:	2b00      	cmp	r3, #0
 810b100:	d105      	bne.n	810b10e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 810b102:	68bb      	ldr	r3, [r7, #8]
 810b104:	681b      	ldr	r3, [r3, #0]
 810b106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810b10a:	2be0      	cmp	r3, #224	; 0xe0
 810b10c:	d102      	bne.n	810b114 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810b10e:	f06f 030f 	mvn.w	r3, #15
 810b112:	e06c      	b.n	810b1ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 810b114:	78fb      	ldrb	r3, [r7, #3]
 810b116:	68fa      	ldr	r2, [r7, #12]
 810b118:	4619      	mov	r1, r3
 810b11a:	68b8      	ldr	r0, [r7, #8]
 810b11c:	f7ff fe56 	bl	810adcc <etharp_find_entry>
 810b120:	4603      	mov	r3, r0
 810b122:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 810b124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810b128:	2b00      	cmp	r3, #0
 810b12a:	da02      	bge.n	810b132 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 810b12c:	8afb      	ldrh	r3, [r7, #22]
 810b12e:	b25b      	sxtb	r3, r3
 810b130:	e05d      	b.n	810b1ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 810b132:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810b136:	4933      	ldr	r1, [pc, #204]	; (810b204 <etharp_update_arp_entry+0x148>)
 810b138:	4613      	mov	r3, r2
 810b13a:	005b      	lsls	r3, r3, #1
 810b13c:	4413      	add	r3, r2
 810b13e:	00db      	lsls	r3, r3, #3
 810b140:	440b      	add	r3, r1
 810b142:	3314      	adds	r3, #20
 810b144:	2202      	movs	r2, #2
 810b146:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 810b148:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810b14c:	492d      	ldr	r1, [pc, #180]	; (810b204 <etharp_update_arp_entry+0x148>)
 810b14e:	4613      	mov	r3, r2
 810b150:	005b      	lsls	r3, r3, #1
 810b152:	4413      	add	r3, r2
 810b154:	00db      	lsls	r3, r3, #3
 810b156:	440b      	add	r3, r1
 810b158:	3308      	adds	r3, #8
 810b15a:	68fa      	ldr	r2, [r7, #12]
 810b15c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 810b15e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810b162:	4613      	mov	r3, r2
 810b164:	005b      	lsls	r3, r3, #1
 810b166:	4413      	add	r3, r2
 810b168:	00db      	lsls	r3, r3, #3
 810b16a:	3308      	adds	r3, #8
 810b16c:	4a25      	ldr	r2, [pc, #148]	; (810b204 <etharp_update_arp_entry+0x148>)
 810b16e:	4413      	add	r3, r2
 810b170:	3304      	adds	r3, #4
 810b172:	2206      	movs	r2, #6
 810b174:	6879      	ldr	r1, [r7, #4]
 810b176:	4618      	mov	r0, r3
 810b178:	f007 f8bf 	bl	81122fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 810b17c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810b180:	4920      	ldr	r1, [pc, #128]	; (810b204 <etharp_update_arp_entry+0x148>)
 810b182:	4613      	mov	r3, r2
 810b184:	005b      	lsls	r3, r3, #1
 810b186:	4413      	add	r3, r2
 810b188:	00db      	lsls	r3, r3, #3
 810b18a:	440b      	add	r3, r1
 810b18c:	3312      	adds	r3, #18
 810b18e:	2200      	movs	r2, #0
 810b190:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 810b192:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810b196:	491b      	ldr	r1, [pc, #108]	; (810b204 <etharp_update_arp_entry+0x148>)
 810b198:	4613      	mov	r3, r2
 810b19a:	005b      	lsls	r3, r3, #1
 810b19c:	4413      	add	r3, r2
 810b19e:	00db      	lsls	r3, r3, #3
 810b1a0:	440b      	add	r3, r1
 810b1a2:	681b      	ldr	r3, [r3, #0]
 810b1a4:	2b00      	cmp	r3, #0
 810b1a6:	d021      	beq.n	810b1ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 810b1a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810b1ac:	4915      	ldr	r1, [pc, #84]	; (810b204 <etharp_update_arp_entry+0x148>)
 810b1ae:	4613      	mov	r3, r2
 810b1b0:	005b      	lsls	r3, r3, #1
 810b1b2:	4413      	add	r3, r2
 810b1b4:	00db      	lsls	r3, r3, #3
 810b1b6:	440b      	add	r3, r1
 810b1b8:	681b      	ldr	r3, [r3, #0]
 810b1ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 810b1bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810b1c0:	4910      	ldr	r1, [pc, #64]	; (810b204 <etharp_update_arp_entry+0x148>)
 810b1c2:	4613      	mov	r3, r2
 810b1c4:	005b      	lsls	r3, r3, #1
 810b1c6:	4413      	add	r3, r2
 810b1c8:	00db      	lsls	r3, r3, #3
 810b1ca:	440b      	add	r3, r1
 810b1cc:	2200      	movs	r2, #0
 810b1ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 810b1d0:	68fb      	ldr	r3, [r7, #12]
 810b1d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 810b1d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810b1da:	9300      	str	r3, [sp, #0]
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	6939      	ldr	r1, [r7, #16]
 810b1e0:	68f8      	ldr	r0, [r7, #12]
 810b1e2:	f000 fcf3 	bl	810bbcc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 810b1e6:	6938      	ldr	r0, [r7, #16]
 810b1e8:	f003 fc1c 	bl	810ea24 <pbuf_free>
  }
  return ERR_OK;
 810b1ec:	2300      	movs	r3, #0
}
 810b1ee:	4618      	mov	r0, r3
 810b1f0:	3718      	adds	r7, #24
 810b1f2:	46bd      	mov	sp, r7
 810b1f4:	bd80      	pop	{r7, pc}
 810b1f6:	bf00      	nop
 810b1f8:	08114f20 	.word	0x08114f20
 810b1fc:	08115040 	.word	0x08115040
 810b200:	08114fc0 	.word	0x08114fc0
 810b204:	100057fc 	.word	0x100057fc

0810b208 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 810b208:	b580      	push	{r7, lr}
 810b20a:	b084      	sub	sp, #16
 810b20c:	af00      	add	r7, sp, #0
 810b20e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810b210:	2300      	movs	r3, #0
 810b212:	60fb      	str	r3, [r7, #12]
 810b214:	e01e      	b.n	810b254 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 810b216:	4913      	ldr	r1, [pc, #76]	; (810b264 <etharp_cleanup_netif+0x5c>)
 810b218:	68fa      	ldr	r2, [r7, #12]
 810b21a:	4613      	mov	r3, r2
 810b21c:	005b      	lsls	r3, r3, #1
 810b21e:	4413      	add	r3, r2
 810b220:	00db      	lsls	r3, r3, #3
 810b222:	440b      	add	r3, r1
 810b224:	3314      	adds	r3, #20
 810b226:	781b      	ldrb	r3, [r3, #0]
 810b228:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 810b22a:	7afb      	ldrb	r3, [r7, #11]
 810b22c:	2b00      	cmp	r3, #0
 810b22e:	d00e      	beq.n	810b24e <etharp_cleanup_netif+0x46>
 810b230:	490c      	ldr	r1, [pc, #48]	; (810b264 <etharp_cleanup_netif+0x5c>)
 810b232:	68fa      	ldr	r2, [r7, #12]
 810b234:	4613      	mov	r3, r2
 810b236:	005b      	lsls	r3, r3, #1
 810b238:	4413      	add	r3, r2
 810b23a:	00db      	lsls	r3, r3, #3
 810b23c:	440b      	add	r3, r1
 810b23e:	3308      	adds	r3, #8
 810b240:	681b      	ldr	r3, [r3, #0]
 810b242:	687a      	ldr	r2, [r7, #4]
 810b244:	429a      	cmp	r2, r3
 810b246:	d102      	bne.n	810b24e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 810b248:	68f8      	ldr	r0, [r7, #12]
 810b24a:	f7ff fce5 	bl	810ac18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810b24e:	68fb      	ldr	r3, [r7, #12]
 810b250:	3301      	adds	r3, #1
 810b252:	60fb      	str	r3, [r7, #12]
 810b254:	68fb      	ldr	r3, [r7, #12]
 810b256:	2b09      	cmp	r3, #9
 810b258:	dddd      	ble.n	810b216 <etharp_cleanup_netif+0xe>
    }
  }
}
 810b25a:	bf00      	nop
 810b25c:	bf00      	nop
 810b25e:	3710      	adds	r7, #16
 810b260:	46bd      	mov	sp, r7
 810b262:	bd80      	pop	{r7, pc}
 810b264:	100057fc 	.word	0x100057fc

0810b268 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 810b268:	b5b0      	push	{r4, r5, r7, lr}
 810b26a:	b08a      	sub	sp, #40	; 0x28
 810b26c:	af04      	add	r7, sp, #16
 810b26e:	6078      	str	r0, [r7, #4]
 810b270:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 810b272:	683b      	ldr	r3, [r7, #0]
 810b274:	2b00      	cmp	r3, #0
 810b276:	d107      	bne.n	810b288 <etharp_input+0x20>
 810b278:	4b3d      	ldr	r3, [pc, #244]	; (810b370 <etharp_input+0x108>)
 810b27a:	f240 228a 	movw	r2, #650	; 0x28a
 810b27e:	493d      	ldr	r1, [pc, #244]	; (810b374 <etharp_input+0x10c>)
 810b280:	483d      	ldr	r0, [pc, #244]	; (810b378 <etharp_input+0x110>)
 810b282:	f007 fd15 	bl	8112cb0 <iprintf>
 810b286:	e06f      	b.n	810b368 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 810b288:	687b      	ldr	r3, [r7, #4]
 810b28a:	685b      	ldr	r3, [r3, #4]
 810b28c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810b28e:	693b      	ldr	r3, [r7, #16]
 810b290:	881b      	ldrh	r3, [r3, #0]
 810b292:	b29b      	uxth	r3, r3
 810b294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b298:	d10c      	bne.n	810b2b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810b29a:	693b      	ldr	r3, [r7, #16]
 810b29c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810b29e:	2b06      	cmp	r3, #6
 810b2a0:	d108      	bne.n	810b2b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810b2a2:	693b      	ldr	r3, [r7, #16]
 810b2a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810b2a6:	2b04      	cmp	r3, #4
 810b2a8:	d104      	bne.n	810b2b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 810b2aa:	693b      	ldr	r3, [r7, #16]
 810b2ac:	885b      	ldrh	r3, [r3, #2]
 810b2ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810b2b0:	2b08      	cmp	r3, #8
 810b2b2:	d003      	beq.n	810b2bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 810b2b4:	6878      	ldr	r0, [r7, #4]
 810b2b6:	f003 fbb5 	bl	810ea24 <pbuf_free>
    return;
 810b2ba:	e055      	b.n	810b368 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 810b2bc:	693b      	ldr	r3, [r7, #16]
 810b2be:	330e      	adds	r3, #14
 810b2c0:	681b      	ldr	r3, [r3, #0]
 810b2c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 810b2c4:	693b      	ldr	r3, [r7, #16]
 810b2c6:	3318      	adds	r3, #24
 810b2c8:	681b      	ldr	r3, [r3, #0]
 810b2ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810b2cc:	683b      	ldr	r3, [r7, #0]
 810b2ce:	3304      	adds	r3, #4
 810b2d0:	681b      	ldr	r3, [r3, #0]
 810b2d2:	2b00      	cmp	r3, #0
 810b2d4:	d102      	bne.n	810b2dc <etharp_input+0x74>
    for_us = 0;
 810b2d6:	2300      	movs	r3, #0
 810b2d8:	75fb      	strb	r3, [r7, #23]
 810b2da:	e009      	b.n	810b2f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 810b2dc:	68ba      	ldr	r2, [r7, #8]
 810b2de:	683b      	ldr	r3, [r7, #0]
 810b2e0:	3304      	adds	r3, #4
 810b2e2:	681b      	ldr	r3, [r3, #0]
 810b2e4:	429a      	cmp	r2, r3
 810b2e6:	bf0c      	ite	eq
 810b2e8:	2301      	moveq	r3, #1
 810b2ea:	2300      	movne	r3, #0
 810b2ec:	b2db      	uxtb	r3, r3
 810b2ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 810b2f0:	693b      	ldr	r3, [r7, #16]
 810b2f2:	f103 0208 	add.w	r2, r3, #8
 810b2f6:	7dfb      	ldrb	r3, [r7, #23]
 810b2f8:	2b00      	cmp	r3, #0
 810b2fa:	d001      	beq.n	810b300 <etharp_input+0x98>
 810b2fc:	2301      	movs	r3, #1
 810b2fe:	e000      	b.n	810b302 <etharp_input+0x9a>
 810b300:	2302      	movs	r3, #2
 810b302:	f107 010c 	add.w	r1, r7, #12
 810b306:	6838      	ldr	r0, [r7, #0]
 810b308:	f7ff fed8 	bl	810b0bc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 810b30c:	693b      	ldr	r3, [r7, #16]
 810b30e:	88db      	ldrh	r3, [r3, #6]
 810b310:	b29b      	uxth	r3, r3
 810b312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b316:	d003      	beq.n	810b320 <etharp_input+0xb8>
 810b318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b31c:	d01e      	beq.n	810b35c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 810b31e:	e020      	b.n	810b362 <etharp_input+0xfa>
      if (for_us) {
 810b320:	7dfb      	ldrb	r3, [r7, #23]
 810b322:	2b00      	cmp	r3, #0
 810b324:	d01c      	beq.n	810b360 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 810b326:	683b      	ldr	r3, [r7, #0]
 810b328:	f103 0026 	add.w	r0, r3, #38	; 0x26
 810b32c:	693b      	ldr	r3, [r7, #16]
 810b32e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 810b332:	683b      	ldr	r3, [r7, #0]
 810b334:	f103 0526 	add.w	r5, r3, #38	; 0x26
 810b338:	683b      	ldr	r3, [r7, #0]
 810b33a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 810b33c:	693a      	ldr	r2, [r7, #16]
 810b33e:	3208      	adds	r2, #8
        etharp_raw(netif,
 810b340:	2102      	movs	r1, #2
 810b342:	9103      	str	r1, [sp, #12]
 810b344:	f107 010c 	add.w	r1, r7, #12
 810b348:	9102      	str	r1, [sp, #8]
 810b34a:	9201      	str	r2, [sp, #4]
 810b34c:	9300      	str	r3, [sp, #0]
 810b34e:	462b      	mov	r3, r5
 810b350:	4622      	mov	r2, r4
 810b352:	4601      	mov	r1, r0
 810b354:	6838      	ldr	r0, [r7, #0]
 810b356:	f000 faeb 	bl	810b930 <etharp_raw>
      break;
 810b35a:	e001      	b.n	810b360 <etharp_input+0xf8>
      break;
 810b35c:	bf00      	nop
 810b35e:	e000      	b.n	810b362 <etharp_input+0xfa>
      break;
 810b360:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 810b362:	6878      	ldr	r0, [r7, #4]
 810b364:	f003 fb5e 	bl	810ea24 <pbuf_free>
}
 810b368:	3718      	adds	r7, #24
 810b36a:	46bd      	mov	sp, r7
 810b36c:	bdb0      	pop	{r4, r5, r7, pc}
 810b36e:	bf00      	nop
 810b370:	08114f20 	.word	0x08114f20
 810b374:	08115098 	.word	0x08115098
 810b378:	08114fc0 	.word	0x08114fc0

0810b37c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 810b37c:	b580      	push	{r7, lr}
 810b37e:	b086      	sub	sp, #24
 810b380:	af02      	add	r7, sp, #8
 810b382:	60f8      	str	r0, [r7, #12]
 810b384:	60b9      	str	r1, [r7, #8]
 810b386:	4613      	mov	r3, r2
 810b388:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 810b38a:	79fa      	ldrb	r2, [r7, #7]
 810b38c:	4944      	ldr	r1, [pc, #272]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b38e:	4613      	mov	r3, r2
 810b390:	005b      	lsls	r3, r3, #1
 810b392:	4413      	add	r3, r2
 810b394:	00db      	lsls	r3, r3, #3
 810b396:	440b      	add	r3, r1
 810b398:	3314      	adds	r3, #20
 810b39a:	781b      	ldrb	r3, [r3, #0]
 810b39c:	2b01      	cmp	r3, #1
 810b39e:	d806      	bhi.n	810b3ae <etharp_output_to_arp_index+0x32>
 810b3a0:	4b40      	ldr	r3, [pc, #256]	; (810b4a4 <etharp_output_to_arp_index+0x128>)
 810b3a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 810b3a6:	4940      	ldr	r1, [pc, #256]	; (810b4a8 <etharp_output_to_arp_index+0x12c>)
 810b3a8:	4840      	ldr	r0, [pc, #256]	; (810b4ac <etharp_output_to_arp_index+0x130>)
 810b3aa:	f007 fc81 	bl	8112cb0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 810b3ae:	79fa      	ldrb	r2, [r7, #7]
 810b3b0:	493b      	ldr	r1, [pc, #236]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b3b2:	4613      	mov	r3, r2
 810b3b4:	005b      	lsls	r3, r3, #1
 810b3b6:	4413      	add	r3, r2
 810b3b8:	00db      	lsls	r3, r3, #3
 810b3ba:	440b      	add	r3, r1
 810b3bc:	3314      	adds	r3, #20
 810b3be:	781b      	ldrb	r3, [r3, #0]
 810b3c0:	2b02      	cmp	r3, #2
 810b3c2:	d153      	bne.n	810b46c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 810b3c4:	79fa      	ldrb	r2, [r7, #7]
 810b3c6:	4936      	ldr	r1, [pc, #216]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b3c8:	4613      	mov	r3, r2
 810b3ca:	005b      	lsls	r3, r3, #1
 810b3cc:	4413      	add	r3, r2
 810b3ce:	00db      	lsls	r3, r3, #3
 810b3d0:	440b      	add	r3, r1
 810b3d2:	3312      	adds	r3, #18
 810b3d4:	881b      	ldrh	r3, [r3, #0]
 810b3d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 810b3da:	d919      	bls.n	810b410 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 810b3dc:	79fa      	ldrb	r2, [r7, #7]
 810b3de:	4613      	mov	r3, r2
 810b3e0:	005b      	lsls	r3, r3, #1
 810b3e2:	4413      	add	r3, r2
 810b3e4:	00db      	lsls	r3, r3, #3
 810b3e6:	4a2e      	ldr	r2, [pc, #184]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b3e8:	4413      	add	r3, r2
 810b3ea:	3304      	adds	r3, #4
 810b3ec:	4619      	mov	r1, r3
 810b3ee:	68f8      	ldr	r0, [r7, #12]
 810b3f0:	f000 fb4c 	bl	810ba8c <etharp_request>
 810b3f4:	4603      	mov	r3, r0
 810b3f6:	2b00      	cmp	r3, #0
 810b3f8:	d138      	bne.n	810b46c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810b3fa:	79fa      	ldrb	r2, [r7, #7]
 810b3fc:	4928      	ldr	r1, [pc, #160]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b3fe:	4613      	mov	r3, r2
 810b400:	005b      	lsls	r3, r3, #1
 810b402:	4413      	add	r3, r2
 810b404:	00db      	lsls	r3, r3, #3
 810b406:	440b      	add	r3, r1
 810b408:	3314      	adds	r3, #20
 810b40a:	2203      	movs	r2, #3
 810b40c:	701a      	strb	r2, [r3, #0]
 810b40e:	e02d      	b.n	810b46c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 810b410:	79fa      	ldrb	r2, [r7, #7]
 810b412:	4923      	ldr	r1, [pc, #140]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b414:	4613      	mov	r3, r2
 810b416:	005b      	lsls	r3, r3, #1
 810b418:	4413      	add	r3, r2
 810b41a:	00db      	lsls	r3, r3, #3
 810b41c:	440b      	add	r3, r1
 810b41e:	3312      	adds	r3, #18
 810b420:	881b      	ldrh	r3, [r3, #0]
 810b422:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 810b426:	d321      	bcc.n	810b46c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 810b428:	79fa      	ldrb	r2, [r7, #7]
 810b42a:	4613      	mov	r3, r2
 810b42c:	005b      	lsls	r3, r3, #1
 810b42e:	4413      	add	r3, r2
 810b430:	00db      	lsls	r3, r3, #3
 810b432:	4a1b      	ldr	r2, [pc, #108]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b434:	4413      	add	r3, r2
 810b436:	1d19      	adds	r1, r3, #4
 810b438:	79fa      	ldrb	r2, [r7, #7]
 810b43a:	4613      	mov	r3, r2
 810b43c:	005b      	lsls	r3, r3, #1
 810b43e:	4413      	add	r3, r2
 810b440:	00db      	lsls	r3, r3, #3
 810b442:	3308      	adds	r3, #8
 810b444:	4a16      	ldr	r2, [pc, #88]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b446:	4413      	add	r3, r2
 810b448:	3304      	adds	r3, #4
 810b44a:	461a      	mov	r2, r3
 810b44c:	68f8      	ldr	r0, [r7, #12]
 810b44e:	f000 fafb 	bl	810ba48 <etharp_request_dst>
 810b452:	4603      	mov	r3, r0
 810b454:	2b00      	cmp	r3, #0
 810b456:	d109      	bne.n	810b46c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810b458:	79fa      	ldrb	r2, [r7, #7]
 810b45a:	4911      	ldr	r1, [pc, #68]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b45c:	4613      	mov	r3, r2
 810b45e:	005b      	lsls	r3, r3, #1
 810b460:	4413      	add	r3, r2
 810b462:	00db      	lsls	r3, r3, #3
 810b464:	440b      	add	r3, r1
 810b466:	3314      	adds	r3, #20
 810b468:	2203      	movs	r2, #3
 810b46a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 810b46c:	68fb      	ldr	r3, [r7, #12]
 810b46e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 810b472:	79fa      	ldrb	r2, [r7, #7]
 810b474:	4613      	mov	r3, r2
 810b476:	005b      	lsls	r3, r3, #1
 810b478:	4413      	add	r3, r2
 810b47a:	00db      	lsls	r3, r3, #3
 810b47c:	3308      	adds	r3, #8
 810b47e:	4a08      	ldr	r2, [pc, #32]	; (810b4a0 <etharp_output_to_arp_index+0x124>)
 810b480:	4413      	add	r3, r2
 810b482:	3304      	adds	r3, #4
 810b484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b488:	9200      	str	r2, [sp, #0]
 810b48a:	460a      	mov	r2, r1
 810b48c:	68b9      	ldr	r1, [r7, #8]
 810b48e:	68f8      	ldr	r0, [r7, #12]
 810b490:	f000 fb9c 	bl	810bbcc <ethernet_output>
 810b494:	4603      	mov	r3, r0
}
 810b496:	4618      	mov	r0, r3
 810b498:	3710      	adds	r7, #16
 810b49a:	46bd      	mov	sp, r7
 810b49c:	bd80      	pop	{r7, pc}
 810b49e:	bf00      	nop
 810b4a0:	100057fc 	.word	0x100057fc
 810b4a4:	08114f20 	.word	0x08114f20
 810b4a8:	081150b8 	.word	0x081150b8
 810b4ac:	08114fc0 	.word	0x08114fc0

0810b4b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 810b4b0:	b580      	push	{r7, lr}
 810b4b2:	b08a      	sub	sp, #40	; 0x28
 810b4b4:	af02      	add	r7, sp, #8
 810b4b6:	60f8      	str	r0, [r7, #12]
 810b4b8:	60b9      	str	r1, [r7, #8]
 810b4ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 810b4bc:	687b      	ldr	r3, [r7, #4]
 810b4be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 810b4c0:	68fb      	ldr	r3, [r7, #12]
 810b4c2:	2b00      	cmp	r3, #0
 810b4c4:	d106      	bne.n	810b4d4 <etharp_output+0x24>
 810b4c6:	4b73      	ldr	r3, [pc, #460]	; (810b694 <etharp_output+0x1e4>)
 810b4c8:	f240 321e 	movw	r2, #798	; 0x31e
 810b4cc:	4972      	ldr	r1, [pc, #456]	; (810b698 <etharp_output+0x1e8>)
 810b4ce:	4873      	ldr	r0, [pc, #460]	; (810b69c <etharp_output+0x1ec>)
 810b4d0:	f007 fbee 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 810b4d4:	68bb      	ldr	r3, [r7, #8]
 810b4d6:	2b00      	cmp	r3, #0
 810b4d8:	d106      	bne.n	810b4e8 <etharp_output+0x38>
 810b4da:	4b6e      	ldr	r3, [pc, #440]	; (810b694 <etharp_output+0x1e4>)
 810b4dc:	f240 321f 	movw	r2, #799	; 0x31f
 810b4e0:	496f      	ldr	r1, [pc, #444]	; (810b6a0 <etharp_output+0x1f0>)
 810b4e2:	486e      	ldr	r0, [pc, #440]	; (810b69c <etharp_output+0x1ec>)
 810b4e4:	f007 fbe4 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 810b4e8:	687b      	ldr	r3, [r7, #4]
 810b4ea:	2b00      	cmp	r3, #0
 810b4ec:	d106      	bne.n	810b4fc <etharp_output+0x4c>
 810b4ee:	4b69      	ldr	r3, [pc, #420]	; (810b694 <etharp_output+0x1e4>)
 810b4f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 810b4f4:	496b      	ldr	r1, [pc, #428]	; (810b6a4 <etharp_output+0x1f4>)
 810b4f6:	4869      	ldr	r0, [pc, #420]	; (810b69c <etharp_output+0x1ec>)
 810b4f8:	f007 fbda 	bl	8112cb0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 810b4fc:	687b      	ldr	r3, [r7, #4]
 810b4fe:	681b      	ldr	r3, [r3, #0]
 810b500:	68f9      	ldr	r1, [r7, #12]
 810b502:	4618      	mov	r0, r3
 810b504:	f001 f8bc 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810b508:	4603      	mov	r3, r0
 810b50a:	2b00      	cmp	r3, #0
 810b50c:	d002      	beq.n	810b514 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 810b50e:	4b66      	ldr	r3, [pc, #408]	; (810b6a8 <etharp_output+0x1f8>)
 810b510:	61fb      	str	r3, [r7, #28]
 810b512:	e0af      	b.n	810b674 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 810b514:	687b      	ldr	r3, [r7, #4]
 810b516:	681b      	ldr	r3, [r3, #0]
 810b518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 810b51c:	2be0      	cmp	r3, #224	; 0xe0
 810b51e:	d118      	bne.n	810b552 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 810b520:	2301      	movs	r3, #1
 810b522:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 810b524:	2300      	movs	r3, #0
 810b526:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 810b528:	235e      	movs	r3, #94	; 0x5e
 810b52a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 810b52c:	687b      	ldr	r3, [r7, #4]
 810b52e:	3301      	adds	r3, #1
 810b530:	781b      	ldrb	r3, [r3, #0]
 810b532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b536:	b2db      	uxtb	r3, r3
 810b538:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 810b53a:	687b      	ldr	r3, [r7, #4]
 810b53c:	3302      	adds	r3, #2
 810b53e:	781b      	ldrb	r3, [r3, #0]
 810b540:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 810b542:	687b      	ldr	r3, [r7, #4]
 810b544:	3303      	adds	r3, #3
 810b546:	781b      	ldrb	r3, [r3, #0]
 810b548:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 810b54a:	f107 0310 	add.w	r3, r7, #16
 810b54e:	61fb      	str	r3, [r7, #28]
 810b550:	e090      	b.n	810b674 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810b552:	687b      	ldr	r3, [r7, #4]
 810b554:	681a      	ldr	r2, [r3, #0]
 810b556:	68fb      	ldr	r3, [r7, #12]
 810b558:	3304      	adds	r3, #4
 810b55a:	681b      	ldr	r3, [r3, #0]
 810b55c:	405a      	eors	r2, r3
 810b55e:	68fb      	ldr	r3, [r7, #12]
 810b560:	3308      	adds	r3, #8
 810b562:	681b      	ldr	r3, [r3, #0]
 810b564:	4013      	ands	r3, r2
 810b566:	2b00      	cmp	r3, #0
 810b568:	d012      	beq.n	810b590 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 810b56a:	687b      	ldr	r3, [r7, #4]
 810b56c:	681b      	ldr	r3, [r3, #0]
 810b56e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810b570:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 810b574:	4293      	cmp	r3, r2
 810b576:	d00b      	beq.n	810b590 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 810b578:	68fb      	ldr	r3, [r7, #12]
 810b57a:	330c      	adds	r3, #12
 810b57c:	681b      	ldr	r3, [r3, #0]
 810b57e:	2b00      	cmp	r3, #0
 810b580:	d003      	beq.n	810b58a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 810b582:	68fb      	ldr	r3, [r7, #12]
 810b584:	330c      	adds	r3, #12
 810b586:	61bb      	str	r3, [r7, #24]
 810b588:	e002      	b.n	810b590 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 810b58a:	f06f 0303 	mvn.w	r3, #3
 810b58e:	e07d      	b.n	810b68c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810b590:	4b46      	ldr	r3, [pc, #280]	; (810b6ac <etharp_output+0x1fc>)
 810b592:	781b      	ldrb	r3, [r3, #0]
 810b594:	4619      	mov	r1, r3
 810b596:	4a46      	ldr	r2, [pc, #280]	; (810b6b0 <etharp_output+0x200>)
 810b598:	460b      	mov	r3, r1
 810b59a:	005b      	lsls	r3, r3, #1
 810b59c:	440b      	add	r3, r1
 810b59e:	00db      	lsls	r3, r3, #3
 810b5a0:	4413      	add	r3, r2
 810b5a2:	3314      	adds	r3, #20
 810b5a4:	781b      	ldrb	r3, [r3, #0]
 810b5a6:	2b01      	cmp	r3, #1
 810b5a8:	d925      	bls.n	810b5f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 810b5aa:	4b40      	ldr	r3, [pc, #256]	; (810b6ac <etharp_output+0x1fc>)
 810b5ac:	781b      	ldrb	r3, [r3, #0]
 810b5ae:	4619      	mov	r1, r3
 810b5b0:	4a3f      	ldr	r2, [pc, #252]	; (810b6b0 <etharp_output+0x200>)
 810b5b2:	460b      	mov	r3, r1
 810b5b4:	005b      	lsls	r3, r3, #1
 810b5b6:	440b      	add	r3, r1
 810b5b8:	00db      	lsls	r3, r3, #3
 810b5ba:	4413      	add	r3, r2
 810b5bc:	3308      	adds	r3, #8
 810b5be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810b5c0:	68fa      	ldr	r2, [r7, #12]
 810b5c2:	429a      	cmp	r2, r3
 810b5c4:	d117      	bne.n	810b5f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 810b5c6:	69bb      	ldr	r3, [r7, #24]
 810b5c8:	681a      	ldr	r2, [r3, #0]
 810b5ca:	4b38      	ldr	r3, [pc, #224]	; (810b6ac <etharp_output+0x1fc>)
 810b5cc:	781b      	ldrb	r3, [r3, #0]
 810b5ce:	4618      	mov	r0, r3
 810b5d0:	4937      	ldr	r1, [pc, #220]	; (810b6b0 <etharp_output+0x200>)
 810b5d2:	4603      	mov	r3, r0
 810b5d4:	005b      	lsls	r3, r3, #1
 810b5d6:	4403      	add	r3, r0
 810b5d8:	00db      	lsls	r3, r3, #3
 810b5da:	440b      	add	r3, r1
 810b5dc:	3304      	adds	r3, #4
 810b5de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 810b5e0:	429a      	cmp	r2, r3
 810b5e2:	d108      	bne.n	810b5f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 810b5e4:	4b31      	ldr	r3, [pc, #196]	; (810b6ac <etharp_output+0x1fc>)
 810b5e6:	781b      	ldrb	r3, [r3, #0]
 810b5e8:	461a      	mov	r2, r3
 810b5ea:	68b9      	ldr	r1, [r7, #8]
 810b5ec:	68f8      	ldr	r0, [r7, #12]
 810b5ee:	f7ff fec5 	bl	810b37c <etharp_output_to_arp_index>
 810b5f2:	4603      	mov	r3, r0
 810b5f4:	e04a      	b.n	810b68c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810b5f6:	2300      	movs	r3, #0
 810b5f8:	75fb      	strb	r3, [r7, #23]
 810b5fa:	e031      	b.n	810b660 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810b5fc:	7dfa      	ldrb	r2, [r7, #23]
 810b5fe:	492c      	ldr	r1, [pc, #176]	; (810b6b0 <etharp_output+0x200>)
 810b600:	4613      	mov	r3, r2
 810b602:	005b      	lsls	r3, r3, #1
 810b604:	4413      	add	r3, r2
 810b606:	00db      	lsls	r3, r3, #3
 810b608:	440b      	add	r3, r1
 810b60a:	3314      	adds	r3, #20
 810b60c:	781b      	ldrb	r3, [r3, #0]
 810b60e:	2b01      	cmp	r3, #1
 810b610:	d923      	bls.n	810b65a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 810b612:	7dfa      	ldrb	r2, [r7, #23]
 810b614:	4926      	ldr	r1, [pc, #152]	; (810b6b0 <etharp_output+0x200>)
 810b616:	4613      	mov	r3, r2
 810b618:	005b      	lsls	r3, r3, #1
 810b61a:	4413      	add	r3, r2
 810b61c:	00db      	lsls	r3, r3, #3
 810b61e:	440b      	add	r3, r1
 810b620:	3308      	adds	r3, #8
 810b622:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810b624:	68fa      	ldr	r2, [r7, #12]
 810b626:	429a      	cmp	r2, r3
 810b628:	d117      	bne.n	810b65a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 810b62a:	69bb      	ldr	r3, [r7, #24]
 810b62c:	6819      	ldr	r1, [r3, #0]
 810b62e:	7dfa      	ldrb	r2, [r7, #23]
 810b630:	481f      	ldr	r0, [pc, #124]	; (810b6b0 <etharp_output+0x200>)
 810b632:	4613      	mov	r3, r2
 810b634:	005b      	lsls	r3, r3, #1
 810b636:	4413      	add	r3, r2
 810b638:	00db      	lsls	r3, r3, #3
 810b63a:	4403      	add	r3, r0
 810b63c:	3304      	adds	r3, #4
 810b63e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 810b640:	4299      	cmp	r1, r3
 810b642:	d10a      	bne.n	810b65a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 810b644:	4a19      	ldr	r2, [pc, #100]	; (810b6ac <etharp_output+0x1fc>)
 810b646:	7dfb      	ldrb	r3, [r7, #23]
 810b648:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 810b64a:	7dfb      	ldrb	r3, [r7, #23]
 810b64c:	461a      	mov	r2, r3
 810b64e:	68b9      	ldr	r1, [r7, #8]
 810b650:	68f8      	ldr	r0, [r7, #12]
 810b652:	f7ff fe93 	bl	810b37c <etharp_output_to_arp_index>
 810b656:	4603      	mov	r3, r0
 810b658:	e018      	b.n	810b68c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810b65a:	7dfb      	ldrb	r3, [r7, #23]
 810b65c:	3301      	adds	r3, #1
 810b65e:	75fb      	strb	r3, [r7, #23]
 810b660:	7dfb      	ldrb	r3, [r7, #23]
 810b662:	2b09      	cmp	r3, #9
 810b664:	d9ca      	bls.n	810b5fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 810b666:	68ba      	ldr	r2, [r7, #8]
 810b668:	69b9      	ldr	r1, [r7, #24]
 810b66a:	68f8      	ldr	r0, [r7, #12]
 810b66c:	f000 f822 	bl	810b6b4 <etharp_query>
 810b670:	4603      	mov	r3, r0
 810b672:	e00b      	b.n	810b68c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 810b674:	68fb      	ldr	r3, [r7, #12]
 810b676:	f103 0226 	add.w	r2, r3, #38	; 0x26
 810b67a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810b67e:	9300      	str	r3, [sp, #0]
 810b680:	69fb      	ldr	r3, [r7, #28]
 810b682:	68b9      	ldr	r1, [r7, #8]
 810b684:	68f8      	ldr	r0, [r7, #12]
 810b686:	f000 faa1 	bl	810bbcc <ethernet_output>
 810b68a:	4603      	mov	r3, r0
}
 810b68c:	4618      	mov	r0, r3
 810b68e:	3720      	adds	r7, #32
 810b690:	46bd      	mov	sp, r7
 810b692:	bd80      	pop	{r7, pc}
 810b694:	08114f20 	.word	0x08114f20
 810b698:	08115098 	.word	0x08115098
 810b69c:	08114fc0 	.word	0x08114fc0
 810b6a0:	081150e8 	.word	0x081150e8
 810b6a4:	08115088 	.word	0x08115088
 810b6a8:	08116a8c 	.word	0x08116a8c
 810b6ac:	100058ec 	.word	0x100058ec
 810b6b0:	100057fc 	.word	0x100057fc

0810b6b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 810b6b4:	b580      	push	{r7, lr}
 810b6b6:	b08c      	sub	sp, #48	; 0x30
 810b6b8:	af02      	add	r7, sp, #8
 810b6ba:	60f8      	str	r0, [r7, #12]
 810b6bc:	60b9      	str	r1, [r7, #8]
 810b6be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 810b6c0:	68fb      	ldr	r3, [r7, #12]
 810b6c2:	3326      	adds	r3, #38	; 0x26
 810b6c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 810b6c6:	23ff      	movs	r3, #255	; 0xff
 810b6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 810b6cc:	2300      	movs	r3, #0
 810b6ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810b6d0:	68bb      	ldr	r3, [r7, #8]
 810b6d2:	681b      	ldr	r3, [r3, #0]
 810b6d4:	68f9      	ldr	r1, [r7, #12]
 810b6d6:	4618      	mov	r0, r3
 810b6d8:	f000 ffd2 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810b6dc:	4603      	mov	r3, r0
 810b6de:	2b00      	cmp	r3, #0
 810b6e0:	d10c      	bne.n	810b6fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810b6e2:	68bb      	ldr	r3, [r7, #8]
 810b6e4:	681b      	ldr	r3, [r3, #0]
 810b6e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810b6ea:	2be0      	cmp	r3, #224	; 0xe0
 810b6ec:	d006      	beq.n	810b6fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810b6ee:	68bb      	ldr	r3, [r7, #8]
 810b6f0:	2b00      	cmp	r3, #0
 810b6f2:	d003      	beq.n	810b6fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 810b6f4:	68bb      	ldr	r3, [r7, #8]
 810b6f6:	681b      	ldr	r3, [r3, #0]
 810b6f8:	2b00      	cmp	r3, #0
 810b6fa:	d102      	bne.n	810b702 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810b6fc:	f06f 030f 	mvn.w	r3, #15
 810b700:	e101      	b.n	810b906 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 810b702:	68fa      	ldr	r2, [r7, #12]
 810b704:	2101      	movs	r1, #1
 810b706:	68b8      	ldr	r0, [r7, #8]
 810b708:	f7ff fb60 	bl	810adcc <etharp_find_entry>
 810b70c:	4603      	mov	r3, r0
 810b70e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 810b710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810b714:	2b00      	cmp	r3, #0
 810b716:	da02      	bge.n	810b71e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 810b718:	8a7b      	ldrh	r3, [r7, #18]
 810b71a:	b25b      	sxtb	r3, r3
 810b71c:	e0f3      	b.n	810b906 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 810b71e:	8a7b      	ldrh	r3, [r7, #18]
 810b720:	2b7e      	cmp	r3, #126	; 0x7e
 810b722:	d906      	bls.n	810b732 <etharp_query+0x7e>
 810b724:	4b7a      	ldr	r3, [pc, #488]	; (810b910 <etharp_query+0x25c>)
 810b726:	f240 32c1 	movw	r2, #961	; 0x3c1
 810b72a:	497a      	ldr	r1, [pc, #488]	; (810b914 <etharp_query+0x260>)
 810b72c:	487a      	ldr	r0, [pc, #488]	; (810b918 <etharp_query+0x264>)
 810b72e:	f007 fabf 	bl	8112cb0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 810b732:	8a7b      	ldrh	r3, [r7, #18]
 810b734:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 810b736:	7c7a      	ldrb	r2, [r7, #17]
 810b738:	4978      	ldr	r1, [pc, #480]	; (810b91c <etharp_query+0x268>)
 810b73a:	4613      	mov	r3, r2
 810b73c:	005b      	lsls	r3, r3, #1
 810b73e:	4413      	add	r3, r2
 810b740:	00db      	lsls	r3, r3, #3
 810b742:	440b      	add	r3, r1
 810b744:	3314      	adds	r3, #20
 810b746:	781b      	ldrb	r3, [r3, #0]
 810b748:	2b00      	cmp	r3, #0
 810b74a:	d115      	bne.n	810b778 <etharp_query+0xc4>
    is_new_entry = 1;
 810b74c:	2301      	movs	r3, #1
 810b74e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 810b750:	7c7a      	ldrb	r2, [r7, #17]
 810b752:	4972      	ldr	r1, [pc, #456]	; (810b91c <etharp_query+0x268>)
 810b754:	4613      	mov	r3, r2
 810b756:	005b      	lsls	r3, r3, #1
 810b758:	4413      	add	r3, r2
 810b75a:	00db      	lsls	r3, r3, #3
 810b75c:	440b      	add	r3, r1
 810b75e:	3314      	adds	r3, #20
 810b760:	2201      	movs	r2, #1
 810b762:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 810b764:	7c7a      	ldrb	r2, [r7, #17]
 810b766:	496d      	ldr	r1, [pc, #436]	; (810b91c <etharp_query+0x268>)
 810b768:	4613      	mov	r3, r2
 810b76a:	005b      	lsls	r3, r3, #1
 810b76c:	4413      	add	r3, r2
 810b76e:	00db      	lsls	r3, r3, #3
 810b770:	440b      	add	r3, r1
 810b772:	3308      	adds	r3, #8
 810b774:	68fa      	ldr	r2, [r7, #12]
 810b776:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 810b778:	7c7a      	ldrb	r2, [r7, #17]
 810b77a:	4968      	ldr	r1, [pc, #416]	; (810b91c <etharp_query+0x268>)
 810b77c:	4613      	mov	r3, r2
 810b77e:	005b      	lsls	r3, r3, #1
 810b780:	4413      	add	r3, r2
 810b782:	00db      	lsls	r3, r3, #3
 810b784:	440b      	add	r3, r1
 810b786:	3314      	adds	r3, #20
 810b788:	781b      	ldrb	r3, [r3, #0]
 810b78a:	2b01      	cmp	r3, #1
 810b78c:	d011      	beq.n	810b7b2 <etharp_query+0xfe>
 810b78e:	7c7a      	ldrb	r2, [r7, #17]
 810b790:	4962      	ldr	r1, [pc, #392]	; (810b91c <etharp_query+0x268>)
 810b792:	4613      	mov	r3, r2
 810b794:	005b      	lsls	r3, r3, #1
 810b796:	4413      	add	r3, r2
 810b798:	00db      	lsls	r3, r3, #3
 810b79a:	440b      	add	r3, r1
 810b79c:	3314      	adds	r3, #20
 810b79e:	781b      	ldrb	r3, [r3, #0]
 810b7a0:	2b01      	cmp	r3, #1
 810b7a2:	d806      	bhi.n	810b7b2 <etharp_query+0xfe>
 810b7a4:	4b5a      	ldr	r3, [pc, #360]	; (810b910 <etharp_query+0x25c>)
 810b7a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 810b7aa:	495d      	ldr	r1, [pc, #372]	; (810b920 <etharp_query+0x26c>)
 810b7ac:	485a      	ldr	r0, [pc, #360]	; (810b918 <etharp_query+0x264>)
 810b7ae:	f007 fa7f 	bl	8112cb0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 810b7b2:	6a3b      	ldr	r3, [r7, #32]
 810b7b4:	2b00      	cmp	r3, #0
 810b7b6:	d102      	bne.n	810b7be <etharp_query+0x10a>
 810b7b8:	687b      	ldr	r3, [r7, #4]
 810b7ba:	2b00      	cmp	r3, #0
 810b7bc:	d10c      	bne.n	810b7d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 810b7be:	68b9      	ldr	r1, [r7, #8]
 810b7c0:	68f8      	ldr	r0, [r7, #12]
 810b7c2:	f000 f963 	bl	810ba8c <etharp_request>
 810b7c6:	4603      	mov	r3, r0
 810b7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 810b7cc:	687b      	ldr	r3, [r7, #4]
 810b7ce:	2b00      	cmp	r3, #0
 810b7d0:	d102      	bne.n	810b7d8 <etharp_query+0x124>
      return result;
 810b7d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810b7d6:	e096      	b.n	810b906 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 810b7d8:	687b      	ldr	r3, [r7, #4]
 810b7da:	2b00      	cmp	r3, #0
 810b7dc:	d106      	bne.n	810b7ec <etharp_query+0x138>
 810b7de:	4b4c      	ldr	r3, [pc, #304]	; (810b910 <etharp_query+0x25c>)
 810b7e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 810b7e4:	494f      	ldr	r1, [pc, #316]	; (810b924 <etharp_query+0x270>)
 810b7e6:	484c      	ldr	r0, [pc, #304]	; (810b918 <etharp_query+0x264>)
 810b7e8:	f007 fa62 	bl	8112cb0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 810b7ec:	7c7a      	ldrb	r2, [r7, #17]
 810b7ee:	494b      	ldr	r1, [pc, #300]	; (810b91c <etharp_query+0x268>)
 810b7f0:	4613      	mov	r3, r2
 810b7f2:	005b      	lsls	r3, r3, #1
 810b7f4:	4413      	add	r3, r2
 810b7f6:	00db      	lsls	r3, r3, #3
 810b7f8:	440b      	add	r3, r1
 810b7fa:	3314      	adds	r3, #20
 810b7fc:	781b      	ldrb	r3, [r3, #0]
 810b7fe:	2b01      	cmp	r3, #1
 810b800:	d917      	bls.n	810b832 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 810b802:	4a49      	ldr	r2, [pc, #292]	; (810b928 <etharp_query+0x274>)
 810b804:	7c7b      	ldrb	r3, [r7, #17]
 810b806:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 810b808:	7c7a      	ldrb	r2, [r7, #17]
 810b80a:	4613      	mov	r3, r2
 810b80c:	005b      	lsls	r3, r3, #1
 810b80e:	4413      	add	r3, r2
 810b810:	00db      	lsls	r3, r3, #3
 810b812:	3308      	adds	r3, #8
 810b814:	4a41      	ldr	r2, [pc, #260]	; (810b91c <etharp_query+0x268>)
 810b816:	4413      	add	r3, r2
 810b818:	3304      	adds	r3, #4
 810b81a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b81e:	9200      	str	r2, [sp, #0]
 810b820:	697a      	ldr	r2, [r7, #20]
 810b822:	6879      	ldr	r1, [r7, #4]
 810b824:	68f8      	ldr	r0, [r7, #12]
 810b826:	f000 f9d1 	bl	810bbcc <ethernet_output>
 810b82a:	4603      	mov	r3, r0
 810b82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 810b830:	e067      	b.n	810b902 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810b832:	7c7a      	ldrb	r2, [r7, #17]
 810b834:	4939      	ldr	r1, [pc, #228]	; (810b91c <etharp_query+0x268>)
 810b836:	4613      	mov	r3, r2
 810b838:	005b      	lsls	r3, r3, #1
 810b83a:	4413      	add	r3, r2
 810b83c:	00db      	lsls	r3, r3, #3
 810b83e:	440b      	add	r3, r1
 810b840:	3314      	adds	r3, #20
 810b842:	781b      	ldrb	r3, [r3, #0]
 810b844:	2b01      	cmp	r3, #1
 810b846:	d15c      	bne.n	810b902 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 810b848:	2300      	movs	r3, #0
 810b84a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 810b84c:	687b      	ldr	r3, [r7, #4]
 810b84e:	61fb      	str	r3, [r7, #28]
    while (p) {
 810b850:	e01c      	b.n	810b88c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 810b852:	69fb      	ldr	r3, [r7, #28]
 810b854:	895a      	ldrh	r2, [r3, #10]
 810b856:	69fb      	ldr	r3, [r7, #28]
 810b858:	891b      	ldrh	r3, [r3, #8]
 810b85a:	429a      	cmp	r2, r3
 810b85c:	d10a      	bne.n	810b874 <etharp_query+0x1c0>
 810b85e:	69fb      	ldr	r3, [r7, #28]
 810b860:	681b      	ldr	r3, [r3, #0]
 810b862:	2b00      	cmp	r3, #0
 810b864:	d006      	beq.n	810b874 <etharp_query+0x1c0>
 810b866:	4b2a      	ldr	r3, [pc, #168]	; (810b910 <etharp_query+0x25c>)
 810b868:	f240 32f1 	movw	r2, #1009	; 0x3f1
 810b86c:	492f      	ldr	r1, [pc, #188]	; (810b92c <etharp_query+0x278>)
 810b86e:	482a      	ldr	r0, [pc, #168]	; (810b918 <etharp_query+0x264>)
 810b870:	f007 fa1e 	bl	8112cb0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 810b874:	69fb      	ldr	r3, [r7, #28]
 810b876:	7b1b      	ldrb	r3, [r3, #12]
 810b878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b87c:	2b00      	cmp	r3, #0
 810b87e:	d002      	beq.n	810b886 <etharp_query+0x1d2>
        copy_needed = 1;
 810b880:	2301      	movs	r3, #1
 810b882:	61bb      	str	r3, [r7, #24]
        break;
 810b884:	e005      	b.n	810b892 <etharp_query+0x1de>
      }
      p = p->next;
 810b886:	69fb      	ldr	r3, [r7, #28]
 810b888:	681b      	ldr	r3, [r3, #0]
 810b88a:	61fb      	str	r3, [r7, #28]
    while (p) {
 810b88c:	69fb      	ldr	r3, [r7, #28]
 810b88e:	2b00      	cmp	r3, #0
 810b890:	d1df      	bne.n	810b852 <etharp_query+0x19e>
    }
    if (copy_needed) {
 810b892:	69bb      	ldr	r3, [r7, #24]
 810b894:	2b00      	cmp	r3, #0
 810b896:	d007      	beq.n	810b8a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 810b898:	687a      	ldr	r2, [r7, #4]
 810b89a:	f44f 7120 	mov.w	r1, #640	; 0x280
 810b89e:	200e      	movs	r0, #14
 810b8a0:	f003 fb58 	bl	810ef54 <pbuf_clone>
 810b8a4:	61f8      	str	r0, [r7, #28]
 810b8a6:	e004      	b.n	810b8b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 810b8a8:	687b      	ldr	r3, [r7, #4]
 810b8aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 810b8ac:	69f8      	ldr	r0, [r7, #28]
 810b8ae:	f003 f95f 	bl	810eb70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 810b8b2:	69fb      	ldr	r3, [r7, #28]
 810b8b4:	2b00      	cmp	r3, #0
 810b8b6:	d021      	beq.n	810b8fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 810b8b8:	7c7a      	ldrb	r2, [r7, #17]
 810b8ba:	4918      	ldr	r1, [pc, #96]	; (810b91c <etharp_query+0x268>)
 810b8bc:	4613      	mov	r3, r2
 810b8be:	005b      	lsls	r3, r3, #1
 810b8c0:	4413      	add	r3, r2
 810b8c2:	00db      	lsls	r3, r3, #3
 810b8c4:	440b      	add	r3, r1
 810b8c6:	681b      	ldr	r3, [r3, #0]
 810b8c8:	2b00      	cmp	r3, #0
 810b8ca:	d00a      	beq.n	810b8e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 810b8cc:	7c7a      	ldrb	r2, [r7, #17]
 810b8ce:	4913      	ldr	r1, [pc, #76]	; (810b91c <etharp_query+0x268>)
 810b8d0:	4613      	mov	r3, r2
 810b8d2:	005b      	lsls	r3, r3, #1
 810b8d4:	4413      	add	r3, r2
 810b8d6:	00db      	lsls	r3, r3, #3
 810b8d8:	440b      	add	r3, r1
 810b8da:	681b      	ldr	r3, [r3, #0]
 810b8dc:	4618      	mov	r0, r3
 810b8de:	f003 f8a1 	bl	810ea24 <pbuf_free>
      }
      arp_table[i].q = p;
 810b8e2:	7c7a      	ldrb	r2, [r7, #17]
 810b8e4:	490d      	ldr	r1, [pc, #52]	; (810b91c <etharp_query+0x268>)
 810b8e6:	4613      	mov	r3, r2
 810b8e8:	005b      	lsls	r3, r3, #1
 810b8ea:	4413      	add	r3, r2
 810b8ec:	00db      	lsls	r3, r3, #3
 810b8ee:	440b      	add	r3, r1
 810b8f0:	69fa      	ldr	r2, [r7, #28]
 810b8f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 810b8f4:	2300      	movs	r3, #0
 810b8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 810b8fa:	e002      	b.n	810b902 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 810b8fc:	23ff      	movs	r3, #255	; 0xff
 810b8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 810b902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 810b906:	4618      	mov	r0, r3
 810b908:	3728      	adds	r7, #40	; 0x28
 810b90a:	46bd      	mov	sp, r7
 810b90c:	bd80      	pop	{r7, pc}
 810b90e:	bf00      	nop
 810b910:	08114f20 	.word	0x08114f20
 810b914:	081150f4 	.word	0x081150f4
 810b918:	08114fc0 	.word	0x08114fc0
 810b91c:	100057fc 	.word	0x100057fc
 810b920:	08115104 	.word	0x08115104
 810b924:	081150e8 	.word	0x081150e8
 810b928:	100058ec 	.word	0x100058ec
 810b92c:	0811512c 	.word	0x0811512c

0810b930 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 810b930:	b580      	push	{r7, lr}
 810b932:	b08a      	sub	sp, #40	; 0x28
 810b934:	af02      	add	r7, sp, #8
 810b936:	60f8      	str	r0, [r7, #12]
 810b938:	60b9      	str	r1, [r7, #8]
 810b93a:	607a      	str	r2, [r7, #4]
 810b93c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 810b93e:	2300      	movs	r3, #0
 810b940:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 810b942:	68fb      	ldr	r3, [r7, #12]
 810b944:	2b00      	cmp	r3, #0
 810b946:	d106      	bne.n	810b956 <etharp_raw+0x26>
 810b948:	4b3a      	ldr	r3, [pc, #232]	; (810ba34 <etharp_raw+0x104>)
 810b94a:	f240 4257 	movw	r2, #1111	; 0x457
 810b94e:	493a      	ldr	r1, [pc, #232]	; (810ba38 <etharp_raw+0x108>)
 810b950:	483a      	ldr	r0, [pc, #232]	; (810ba3c <etharp_raw+0x10c>)
 810b952:	f007 f9ad 	bl	8112cb0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 810b956:	f44f 7220 	mov.w	r2, #640	; 0x280
 810b95a:	211c      	movs	r1, #28
 810b95c:	200e      	movs	r0, #14
 810b95e:	f002 fd7f 	bl	810e460 <pbuf_alloc>
 810b962:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 810b964:	69bb      	ldr	r3, [r7, #24]
 810b966:	2b00      	cmp	r3, #0
 810b968:	d102      	bne.n	810b970 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 810b96a:	f04f 33ff 	mov.w	r3, #4294967295
 810b96e:	e05d      	b.n	810ba2c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 810b970:	69bb      	ldr	r3, [r7, #24]
 810b972:	895b      	ldrh	r3, [r3, #10]
 810b974:	2b1b      	cmp	r3, #27
 810b976:	d806      	bhi.n	810b986 <etharp_raw+0x56>
 810b978:	4b2e      	ldr	r3, [pc, #184]	; (810ba34 <etharp_raw+0x104>)
 810b97a:	f240 4262 	movw	r2, #1122	; 0x462
 810b97e:	4930      	ldr	r1, [pc, #192]	; (810ba40 <etharp_raw+0x110>)
 810b980:	482e      	ldr	r0, [pc, #184]	; (810ba3c <etharp_raw+0x10c>)
 810b982:	f007 f995 	bl	8112cb0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 810b986:	69bb      	ldr	r3, [r7, #24]
 810b988:	685b      	ldr	r3, [r3, #4]
 810b98a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 810b98c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 810b98e:	4618      	mov	r0, r3
 810b990:	f7ff f92c 	bl	810abec <lwip_htons>
 810b994:	4603      	mov	r3, r0
 810b996:	461a      	mov	r2, r3
 810b998:	697b      	ldr	r3, [r7, #20]
 810b99a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 810b99c:	68fb      	ldr	r3, [r7, #12]
 810b99e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810b9a2:	2b06      	cmp	r3, #6
 810b9a4:	d006      	beq.n	810b9b4 <etharp_raw+0x84>
 810b9a6:	4b23      	ldr	r3, [pc, #140]	; (810ba34 <etharp_raw+0x104>)
 810b9a8:	f240 4269 	movw	r2, #1129	; 0x469
 810b9ac:	4925      	ldr	r1, [pc, #148]	; (810ba44 <etharp_raw+0x114>)
 810b9ae:	4823      	ldr	r0, [pc, #140]	; (810ba3c <etharp_raw+0x10c>)
 810b9b0:	f007 f97e 	bl	8112cb0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 810b9b4:	697b      	ldr	r3, [r7, #20]
 810b9b6:	3308      	adds	r3, #8
 810b9b8:	2206      	movs	r2, #6
 810b9ba:	6839      	ldr	r1, [r7, #0]
 810b9bc:	4618      	mov	r0, r3
 810b9be:	f006 fc9c 	bl	81122fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 810b9c2:	697b      	ldr	r3, [r7, #20]
 810b9c4:	3312      	adds	r3, #18
 810b9c6:	2206      	movs	r2, #6
 810b9c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810b9ca:	4618      	mov	r0, r3
 810b9cc:	f006 fc95 	bl	81122fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 810b9d0:	697b      	ldr	r3, [r7, #20]
 810b9d2:	330e      	adds	r3, #14
 810b9d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810b9d6:	6812      	ldr	r2, [r2, #0]
 810b9d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 810b9da:	697b      	ldr	r3, [r7, #20]
 810b9dc:	3318      	adds	r3, #24
 810b9de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b9e0:	6812      	ldr	r2, [r2, #0]
 810b9e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 810b9e4:	697b      	ldr	r3, [r7, #20]
 810b9e6:	2200      	movs	r2, #0
 810b9e8:	701a      	strb	r2, [r3, #0]
 810b9ea:	2200      	movs	r2, #0
 810b9ec:	f042 0201 	orr.w	r2, r2, #1
 810b9f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 810b9f2:	697b      	ldr	r3, [r7, #20]
 810b9f4:	2200      	movs	r2, #0
 810b9f6:	f042 0208 	orr.w	r2, r2, #8
 810b9fa:	709a      	strb	r2, [r3, #2]
 810b9fc:	2200      	movs	r2, #0
 810b9fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 810ba00:	697b      	ldr	r3, [r7, #20]
 810ba02:	2206      	movs	r2, #6
 810ba04:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 810ba06:	697b      	ldr	r3, [r7, #20]
 810ba08:	2204      	movs	r2, #4
 810ba0a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 810ba0c:	f640 0306 	movw	r3, #2054	; 0x806
 810ba10:	9300      	str	r3, [sp, #0]
 810ba12:	687b      	ldr	r3, [r7, #4]
 810ba14:	68ba      	ldr	r2, [r7, #8]
 810ba16:	69b9      	ldr	r1, [r7, #24]
 810ba18:	68f8      	ldr	r0, [r7, #12]
 810ba1a:	f000 f8d7 	bl	810bbcc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 810ba1e:	69b8      	ldr	r0, [r7, #24]
 810ba20:	f003 f800 	bl	810ea24 <pbuf_free>
  p = NULL;
 810ba24:	2300      	movs	r3, #0
 810ba26:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 810ba28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 810ba2c:	4618      	mov	r0, r3
 810ba2e:	3720      	adds	r7, #32
 810ba30:	46bd      	mov	sp, r7
 810ba32:	bd80      	pop	{r7, pc}
 810ba34:	08114f20 	.word	0x08114f20
 810ba38:	08115098 	.word	0x08115098
 810ba3c:	08114fc0 	.word	0x08114fc0
 810ba40:	08115148 	.word	0x08115148
 810ba44:	0811517c 	.word	0x0811517c

0810ba48 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 810ba48:	b580      	push	{r7, lr}
 810ba4a:	b088      	sub	sp, #32
 810ba4c:	af04      	add	r7, sp, #16
 810ba4e:	60f8      	str	r0, [r7, #12]
 810ba50:	60b9      	str	r1, [r7, #8]
 810ba52:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810ba54:	68fb      	ldr	r3, [r7, #12]
 810ba56:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 810ba5a:	68fb      	ldr	r3, [r7, #12]
 810ba5c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 810ba60:	68fb      	ldr	r3, [r7, #12]
 810ba62:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810ba64:	2201      	movs	r2, #1
 810ba66:	9203      	str	r2, [sp, #12]
 810ba68:	68ba      	ldr	r2, [r7, #8]
 810ba6a:	9202      	str	r2, [sp, #8]
 810ba6c:	4a06      	ldr	r2, [pc, #24]	; (810ba88 <etharp_request_dst+0x40>)
 810ba6e:	9201      	str	r2, [sp, #4]
 810ba70:	9300      	str	r3, [sp, #0]
 810ba72:	4603      	mov	r3, r0
 810ba74:	687a      	ldr	r2, [r7, #4]
 810ba76:	68f8      	ldr	r0, [r7, #12]
 810ba78:	f7ff ff5a 	bl	810b930 <etharp_raw>
 810ba7c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 810ba7e:	4618      	mov	r0, r3
 810ba80:	3710      	adds	r7, #16
 810ba82:	46bd      	mov	sp, r7
 810ba84:	bd80      	pop	{r7, pc}
 810ba86:	bf00      	nop
 810ba88:	08116a94 	.word	0x08116a94

0810ba8c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 810ba8c:	b580      	push	{r7, lr}
 810ba8e:	b082      	sub	sp, #8
 810ba90:	af00      	add	r7, sp, #0
 810ba92:	6078      	str	r0, [r7, #4]
 810ba94:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 810ba96:	4a05      	ldr	r2, [pc, #20]	; (810baac <etharp_request+0x20>)
 810ba98:	6839      	ldr	r1, [r7, #0]
 810ba9a:	6878      	ldr	r0, [r7, #4]
 810ba9c:	f7ff ffd4 	bl	810ba48 <etharp_request_dst>
 810baa0:	4603      	mov	r3, r0
}
 810baa2:	4618      	mov	r0, r3
 810baa4:	3708      	adds	r7, #8
 810baa6:	46bd      	mov	sp, r7
 810baa8:	bd80      	pop	{r7, pc}
 810baaa:	bf00      	nop
 810baac:	08116a8c 	.word	0x08116a8c

0810bab0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 810bab0:	b580      	push	{r7, lr}
 810bab2:	b086      	sub	sp, #24
 810bab4:	af00      	add	r7, sp, #0
 810bab6:	6078      	str	r0, [r7, #4]
 810bab8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 810baba:	230e      	movs	r3, #14
 810babc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 810babe:	687b      	ldr	r3, [r7, #4]
 810bac0:	895b      	ldrh	r3, [r3, #10]
 810bac2:	2b0e      	cmp	r3, #14
 810bac4:	d96e      	bls.n	810bba4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 810bac6:	687b      	ldr	r3, [r7, #4]
 810bac8:	7bdb      	ldrb	r3, [r3, #15]
 810baca:	2b00      	cmp	r3, #0
 810bacc:	d106      	bne.n	810badc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 810bace:	683b      	ldr	r3, [r7, #0]
 810bad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810bad4:	3301      	adds	r3, #1
 810bad6:	b2da      	uxtb	r2, r3
 810bad8:	687b      	ldr	r3, [r7, #4]
 810bada:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 810badc:	687b      	ldr	r3, [r7, #4]
 810bade:	685b      	ldr	r3, [r3, #4]
 810bae0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 810bae2:	693b      	ldr	r3, [r7, #16]
 810bae4:	7b1a      	ldrb	r2, [r3, #12]
 810bae6:	7b5b      	ldrb	r3, [r3, #13]
 810bae8:	021b      	lsls	r3, r3, #8
 810baea:	4313      	orrs	r3, r2
 810baec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 810baee:	693b      	ldr	r3, [r7, #16]
 810baf0:	781b      	ldrb	r3, [r3, #0]
 810baf2:	f003 0301 	and.w	r3, r3, #1
 810baf6:	2b00      	cmp	r3, #0
 810baf8:	d023      	beq.n	810bb42 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 810bafa:	693b      	ldr	r3, [r7, #16]
 810bafc:	781b      	ldrb	r3, [r3, #0]
 810bafe:	2b01      	cmp	r3, #1
 810bb00:	d10f      	bne.n	810bb22 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810bb02:	693b      	ldr	r3, [r7, #16]
 810bb04:	785b      	ldrb	r3, [r3, #1]
 810bb06:	2b00      	cmp	r3, #0
 810bb08:	d11b      	bne.n	810bb42 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 810bb0a:	693b      	ldr	r3, [r7, #16]
 810bb0c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810bb0e:	2b5e      	cmp	r3, #94	; 0x5e
 810bb10:	d117      	bne.n	810bb42 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 810bb12:	687b      	ldr	r3, [r7, #4]
 810bb14:	7b5b      	ldrb	r3, [r3, #13]
 810bb16:	f043 0310 	orr.w	r3, r3, #16
 810bb1a:	b2da      	uxtb	r2, r3
 810bb1c:	687b      	ldr	r3, [r7, #4]
 810bb1e:	735a      	strb	r2, [r3, #13]
 810bb20:	e00f      	b.n	810bb42 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 810bb22:	693b      	ldr	r3, [r7, #16]
 810bb24:	2206      	movs	r2, #6
 810bb26:	4928      	ldr	r1, [pc, #160]	; (810bbc8 <ethernet_input+0x118>)
 810bb28:	4618      	mov	r0, r3
 810bb2a:	f006 fbd8 	bl	81122de <memcmp>
 810bb2e:	4603      	mov	r3, r0
 810bb30:	2b00      	cmp	r3, #0
 810bb32:	d106      	bne.n	810bb42 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 810bb34:	687b      	ldr	r3, [r7, #4]
 810bb36:	7b5b      	ldrb	r3, [r3, #13]
 810bb38:	f043 0308 	orr.w	r3, r3, #8
 810bb3c:	b2da      	uxtb	r2, r3
 810bb3e:	687b      	ldr	r3, [r7, #4]
 810bb40:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 810bb42:	89fb      	ldrh	r3, [r7, #14]
 810bb44:	2b08      	cmp	r3, #8
 810bb46:	d003      	beq.n	810bb50 <ethernet_input+0xa0>
 810bb48:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 810bb4c:	d014      	beq.n	810bb78 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 810bb4e:	e032      	b.n	810bbb6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810bb50:	683b      	ldr	r3, [r7, #0]
 810bb52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810bb56:	f003 0308 	and.w	r3, r3, #8
 810bb5a:	2b00      	cmp	r3, #0
 810bb5c:	d024      	beq.n	810bba8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810bb5e:	8afb      	ldrh	r3, [r7, #22]
 810bb60:	4619      	mov	r1, r3
 810bb62:	6878      	ldr	r0, [r7, #4]
 810bb64:	f002 fed8 	bl	810e918 <pbuf_remove_header>
 810bb68:	4603      	mov	r3, r0
 810bb6a:	2b00      	cmp	r3, #0
 810bb6c:	d11e      	bne.n	810bbac <ethernet_input+0xfc>
        ip4_input(p, netif);
 810bb6e:	6839      	ldr	r1, [r7, #0]
 810bb70:	6878      	ldr	r0, [r7, #4]
 810bb72:	f000 fb93 	bl	810c29c <ip4_input>
      break;
 810bb76:	e013      	b.n	810bba0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810bb78:	683b      	ldr	r3, [r7, #0]
 810bb7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810bb7e:	f003 0308 	and.w	r3, r3, #8
 810bb82:	2b00      	cmp	r3, #0
 810bb84:	d014      	beq.n	810bbb0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810bb86:	8afb      	ldrh	r3, [r7, #22]
 810bb88:	4619      	mov	r1, r3
 810bb8a:	6878      	ldr	r0, [r7, #4]
 810bb8c:	f002 fec4 	bl	810e918 <pbuf_remove_header>
 810bb90:	4603      	mov	r3, r0
 810bb92:	2b00      	cmp	r3, #0
 810bb94:	d10e      	bne.n	810bbb4 <ethernet_input+0x104>
        etharp_input(p, netif);
 810bb96:	6839      	ldr	r1, [r7, #0]
 810bb98:	6878      	ldr	r0, [r7, #4]
 810bb9a:	f7ff fb65 	bl	810b268 <etharp_input>
      break;
 810bb9e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 810bba0:	2300      	movs	r3, #0
 810bba2:	e00c      	b.n	810bbbe <ethernet_input+0x10e>
    goto free_and_return;
 810bba4:	bf00      	nop
 810bba6:	e006      	b.n	810bbb6 <ethernet_input+0x106>
        goto free_and_return;
 810bba8:	bf00      	nop
 810bbaa:	e004      	b.n	810bbb6 <ethernet_input+0x106>
        goto free_and_return;
 810bbac:	bf00      	nop
 810bbae:	e002      	b.n	810bbb6 <ethernet_input+0x106>
        goto free_and_return;
 810bbb0:	bf00      	nop
 810bbb2:	e000      	b.n	810bbb6 <ethernet_input+0x106>
        goto free_and_return;
 810bbb4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 810bbb6:	6878      	ldr	r0, [r7, #4]
 810bbb8:	f002 ff34 	bl	810ea24 <pbuf_free>
  return ERR_OK;
 810bbbc:	2300      	movs	r3, #0
}
 810bbbe:	4618      	mov	r0, r3
 810bbc0:	3718      	adds	r7, #24
 810bbc2:	46bd      	mov	sp, r7
 810bbc4:	bd80      	pop	{r7, pc}
 810bbc6:	bf00      	nop
 810bbc8:	08116a8c 	.word	0x08116a8c

0810bbcc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 810bbcc:	b580      	push	{r7, lr}
 810bbce:	b086      	sub	sp, #24
 810bbd0:	af00      	add	r7, sp, #0
 810bbd2:	60f8      	str	r0, [r7, #12]
 810bbd4:	60b9      	str	r1, [r7, #8]
 810bbd6:	607a      	str	r2, [r7, #4]
 810bbd8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 810bbda:	8c3b      	ldrh	r3, [r7, #32]
 810bbdc:	4618      	mov	r0, r3
 810bbde:	f7ff f805 	bl	810abec <lwip_htons>
 810bbe2:	4603      	mov	r3, r0
 810bbe4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 810bbe6:	210e      	movs	r1, #14
 810bbe8:	68b8      	ldr	r0, [r7, #8]
 810bbea:	f002 fe85 	bl	810e8f8 <pbuf_add_header>
 810bbee:	4603      	mov	r3, r0
 810bbf0:	2b00      	cmp	r3, #0
 810bbf2:	d125      	bne.n	810bc40 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 810bbf4:	68bb      	ldr	r3, [r7, #8]
 810bbf6:	685b      	ldr	r3, [r3, #4]
 810bbf8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 810bbfa:	693b      	ldr	r3, [r7, #16]
 810bbfc:	8afa      	ldrh	r2, [r7, #22]
 810bbfe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 810bc00:	693b      	ldr	r3, [r7, #16]
 810bc02:	2206      	movs	r2, #6
 810bc04:	6839      	ldr	r1, [r7, #0]
 810bc06:	4618      	mov	r0, r3
 810bc08:	f006 fb77 	bl	81122fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 810bc0c:	693b      	ldr	r3, [r7, #16]
 810bc0e:	3306      	adds	r3, #6
 810bc10:	2206      	movs	r2, #6
 810bc12:	6879      	ldr	r1, [r7, #4]
 810bc14:	4618      	mov	r0, r3
 810bc16:	f006 fb70 	bl	81122fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 810bc1a:	68fb      	ldr	r3, [r7, #12]
 810bc1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810bc20:	2b06      	cmp	r3, #6
 810bc22:	d006      	beq.n	810bc32 <ethernet_output+0x66>
 810bc24:	4b0a      	ldr	r3, [pc, #40]	; (810bc50 <ethernet_output+0x84>)
 810bc26:	f44f 7299 	mov.w	r2, #306	; 0x132
 810bc2a:	490a      	ldr	r1, [pc, #40]	; (810bc54 <ethernet_output+0x88>)
 810bc2c:	480a      	ldr	r0, [pc, #40]	; (810bc58 <ethernet_output+0x8c>)
 810bc2e:	f007 f83f 	bl	8112cb0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 810bc32:	68fb      	ldr	r3, [r7, #12]
 810bc34:	699b      	ldr	r3, [r3, #24]
 810bc36:	68b9      	ldr	r1, [r7, #8]
 810bc38:	68f8      	ldr	r0, [r7, #12]
 810bc3a:	4798      	blx	r3
 810bc3c:	4603      	mov	r3, r0
 810bc3e:	e002      	b.n	810bc46 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 810bc40:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 810bc42:	f06f 0301 	mvn.w	r3, #1
}
 810bc46:	4618      	mov	r0, r3
 810bc48:	3718      	adds	r7, #24
 810bc4a:	46bd      	mov	sp, r7
 810bc4c:	bd80      	pop	{r7, pc}
 810bc4e:	bf00      	nop
 810bc50:	081151c0 	.word	0x081151c0
 810bc54:	08115220 	.word	0x08115220
 810bc58:	08115254 	.word	0x08115254

0810bc5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 810bc5c:	b580      	push	{r7, lr}
 810bc5e:	b08e      	sub	sp, #56	; 0x38
 810bc60:	af04      	add	r7, sp, #16
 810bc62:	6078      	str	r0, [r7, #4]
 810bc64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 810bc66:	4b87      	ldr	r3, [pc, #540]	; (810be84 <icmp_input+0x228>)
 810bc68:	689b      	ldr	r3, [r3, #8]
 810bc6a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 810bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bc6e:	781b      	ldrb	r3, [r3, #0]
 810bc70:	f003 030f 	and.w	r3, r3, #15
 810bc74:	b2db      	uxtb	r3, r3
 810bc76:	009b      	lsls	r3, r3, #2
 810bc78:	b2db      	uxtb	r3, r3
 810bc7a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 810bc7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810bc7e:	2b13      	cmp	r3, #19
 810bc80:	f240 80e8 	bls.w	810be54 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 810bc84:	687b      	ldr	r3, [r7, #4]
 810bc86:	895b      	ldrh	r3, [r3, #10]
 810bc88:	2b03      	cmp	r3, #3
 810bc8a:	f240 80e5 	bls.w	810be58 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 810bc8e:	687b      	ldr	r3, [r7, #4]
 810bc90:	685b      	ldr	r3, [r3, #4]
 810bc92:	781b      	ldrb	r3, [r3, #0]
 810bc94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 810bc98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 810bc9c:	2b00      	cmp	r3, #0
 810bc9e:	f000 80d2 	beq.w	810be46 <icmp_input+0x1ea>
 810bca2:	2b08      	cmp	r3, #8
 810bca4:	f040 80d2 	bne.w	810be4c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 810bca8:	4b77      	ldr	r3, [pc, #476]	; (810be88 <icmp_input+0x22c>)
 810bcaa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810bcac:	4b75      	ldr	r3, [pc, #468]	; (810be84 <icmp_input+0x228>)
 810bcae:	695b      	ldr	r3, [r3, #20]
 810bcb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 810bcb4:	2be0      	cmp	r3, #224	; 0xe0
 810bcb6:	f000 80d6 	beq.w	810be66 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 810bcba:	4b72      	ldr	r3, [pc, #456]	; (810be84 <icmp_input+0x228>)
 810bcbc:	695b      	ldr	r3, [r3, #20]
 810bcbe:	4a71      	ldr	r2, [pc, #452]	; (810be84 <icmp_input+0x228>)
 810bcc0:	6812      	ldr	r2, [r2, #0]
 810bcc2:	4611      	mov	r1, r2
 810bcc4:	4618      	mov	r0, r3
 810bcc6:	f000 fcdb 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810bcca:	4603      	mov	r3, r0
 810bccc:	2b00      	cmp	r3, #0
 810bcce:	f040 80cc 	bne.w	810be6a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 810bcd2:	687b      	ldr	r3, [r7, #4]
 810bcd4:	891b      	ldrh	r3, [r3, #8]
 810bcd6:	2b07      	cmp	r3, #7
 810bcd8:	f240 80c0 	bls.w	810be5c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 810bcdc:	6878      	ldr	r0, [r7, #4]
 810bcde:	f000 f9e0 	bl	810c0a2 <inet_chksum_pbuf>
 810bce2:	4603      	mov	r3, r0
 810bce4:	2b00      	cmp	r3, #0
 810bce6:	d003      	beq.n	810bcf0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 810bce8:	6878      	ldr	r0, [r7, #4]
 810bcea:	f002 fe9b 	bl	810ea24 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 810bcee:	e0c5      	b.n	810be7c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810bcf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810bcf2:	330e      	adds	r3, #14
 810bcf4:	4619      	mov	r1, r3
 810bcf6:	6878      	ldr	r0, [r7, #4]
 810bcf8:	f002 fdfe 	bl	810e8f8 <pbuf_add_header>
 810bcfc:	4603      	mov	r3, r0
 810bcfe:	2b00      	cmp	r3, #0
 810bd00:	d04b      	beq.n	810bd9a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 810bd02:	687b      	ldr	r3, [r7, #4]
 810bd04:	891a      	ldrh	r2, [r3, #8]
 810bd06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810bd08:	4413      	add	r3, r2
 810bd0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 810bd0c:	687b      	ldr	r3, [r7, #4]
 810bd0e:	891b      	ldrh	r3, [r3, #8]
 810bd10:	8b7a      	ldrh	r2, [r7, #26]
 810bd12:	429a      	cmp	r2, r3
 810bd14:	f0c0 80ab 	bcc.w	810be6e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 810bd18:	8b7b      	ldrh	r3, [r7, #26]
 810bd1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 810bd1e:	4619      	mov	r1, r3
 810bd20:	200e      	movs	r0, #14
 810bd22:	f002 fb9d 	bl	810e460 <pbuf_alloc>
 810bd26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 810bd28:	697b      	ldr	r3, [r7, #20]
 810bd2a:	2b00      	cmp	r3, #0
 810bd2c:	f000 80a1 	beq.w	810be72 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 810bd30:	697b      	ldr	r3, [r7, #20]
 810bd32:	895b      	ldrh	r3, [r3, #10]
 810bd34:	461a      	mov	r2, r3
 810bd36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810bd38:	3308      	adds	r3, #8
 810bd3a:	429a      	cmp	r2, r3
 810bd3c:	d203      	bcs.n	810bd46 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 810bd3e:	6978      	ldr	r0, [r7, #20]
 810bd40:	f002 fe70 	bl	810ea24 <pbuf_free>
          goto icmperr;
 810bd44:	e096      	b.n	810be74 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 810bd46:	697b      	ldr	r3, [r7, #20]
 810bd48:	685b      	ldr	r3, [r3, #4]
 810bd4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 810bd4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810bd4e:	4618      	mov	r0, r3
 810bd50:	f006 fad3 	bl	81122fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 810bd54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810bd56:	4619      	mov	r1, r3
 810bd58:	6978      	ldr	r0, [r7, #20]
 810bd5a:	f002 fddd 	bl	810e918 <pbuf_remove_header>
 810bd5e:	4603      	mov	r3, r0
 810bd60:	2b00      	cmp	r3, #0
 810bd62:	d009      	beq.n	810bd78 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 810bd64:	4b49      	ldr	r3, [pc, #292]	; (810be8c <icmp_input+0x230>)
 810bd66:	22b6      	movs	r2, #182	; 0xb6
 810bd68:	4949      	ldr	r1, [pc, #292]	; (810be90 <icmp_input+0x234>)
 810bd6a:	484a      	ldr	r0, [pc, #296]	; (810be94 <icmp_input+0x238>)
 810bd6c:	f006 ffa0 	bl	8112cb0 <iprintf>
          pbuf_free(r);
 810bd70:	6978      	ldr	r0, [r7, #20]
 810bd72:	f002 fe57 	bl	810ea24 <pbuf_free>
          goto icmperr;
 810bd76:	e07d      	b.n	810be74 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 810bd78:	6879      	ldr	r1, [r7, #4]
 810bd7a:	6978      	ldr	r0, [r7, #20]
 810bd7c:	f002 ff86 	bl	810ec8c <pbuf_copy>
 810bd80:	4603      	mov	r3, r0
 810bd82:	2b00      	cmp	r3, #0
 810bd84:	d003      	beq.n	810bd8e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 810bd86:	6978      	ldr	r0, [r7, #20]
 810bd88:	f002 fe4c 	bl	810ea24 <pbuf_free>
          goto icmperr;
 810bd8c:	e072      	b.n	810be74 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 810bd8e:	6878      	ldr	r0, [r7, #4]
 810bd90:	f002 fe48 	bl	810ea24 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 810bd94:	697b      	ldr	r3, [r7, #20]
 810bd96:	607b      	str	r3, [r7, #4]
 810bd98:	e00f      	b.n	810bdba <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810bd9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810bd9c:	330e      	adds	r3, #14
 810bd9e:	4619      	mov	r1, r3
 810bda0:	6878      	ldr	r0, [r7, #4]
 810bda2:	f002 fdb9 	bl	810e918 <pbuf_remove_header>
 810bda6:	4603      	mov	r3, r0
 810bda8:	2b00      	cmp	r3, #0
 810bdaa:	d006      	beq.n	810bdba <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 810bdac:	4b37      	ldr	r3, [pc, #220]	; (810be8c <icmp_input+0x230>)
 810bdae:	22c7      	movs	r2, #199	; 0xc7
 810bdb0:	4939      	ldr	r1, [pc, #228]	; (810be98 <icmp_input+0x23c>)
 810bdb2:	4838      	ldr	r0, [pc, #224]	; (810be94 <icmp_input+0x238>)
 810bdb4:	f006 ff7c 	bl	8112cb0 <iprintf>
          goto icmperr;
 810bdb8:	e05c      	b.n	810be74 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 810bdba:	687b      	ldr	r3, [r7, #4]
 810bdbc:	685b      	ldr	r3, [r3, #4]
 810bdbe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 810bdc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810bdc2:	4619      	mov	r1, r3
 810bdc4:	6878      	ldr	r0, [r7, #4]
 810bdc6:	f002 fd97 	bl	810e8f8 <pbuf_add_header>
 810bdca:	4603      	mov	r3, r0
 810bdcc:	2b00      	cmp	r3, #0
 810bdce:	d13c      	bne.n	810be4a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 810bdd0:	687b      	ldr	r3, [r7, #4]
 810bdd2:	685b      	ldr	r3, [r3, #4]
 810bdd4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 810bdd6:	69fb      	ldr	r3, [r7, #28]
 810bdd8:	681a      	ldr	r2, [r3, #0]
 810bdda:	68fb      	ldr	r3, [r7, #12]
 810bddc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 810bdde:	4b29      	ldr	r3, [pc, #164]	; (810be84 <icmp_input+0x228>)
 810bde0:	691a      	ldr	r2, [r3, #16]
 810bde2:	68fb      	ldr	r3, [r7, #12]
 810bde4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 810bde6:	693b      	ldr	r3, [r7, #16]
 810bde8:	2200      	movs	r2, #0
 810bdea:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 810bdec:	693b      	ldr	r3, [r7, #16]
 810bdee:	885b      	ldrh	r3, [r3, #2]
 810bdf0:	b29b      	uxth	r3, r3
 810bdf2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 810bdf6:	4293      	cmp	r3, r2
 810bdf8:	d907      	bls.n	810be0a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 810bdfa:	693b      	ldr	r3, [r7, #16]
 810bdfc:	885b      	ldrh	r3, [r3, #2]
 810bdfe:	b29b      	uxth	r3, r3
 810be00:	3309      	adds	r3, #9
 810be02:	b29a      	uxth	r2, r3
 810be04:	693b      	ldr	r3, [r7, #16]
 810be06:	805a      	strh	r2, [r3, #2]
 810be08:	e006      	b.n	810be18 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 810be0a:	693b      	ldr	r3, [r7, #16]
 810be0c:	885b      	ldrh	r3, [r3, #2]
 810be0e:	b29b      	uxth	r3, r3
 810be10:	3308      	adds	r3, #8
 810be12:	b29a      	uxth	r2, r3
 810be14:	693b      	ldr	r3, [r7, #16]
 810be16:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 810be18:	68fb      	ldr	r3, [r7, #12]
 810be1a:	22ff      	movs	r2, #255	; 0xff
 810be1c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 810be1e:	68fb      	ldr	r3, [r7, #12]
 810be20:	2200      	movs	r2, #0
 810be22:	729a      	strb	r2, [r3, #10]
 810be24:	2200      	movs	r2, #0
 810be26:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 810be28:	683b      	ldr	r3, [r7, #0]
 810be2a:	9302      	str	r3, [sp, #8]
 810be2c:	2301      	movs	r3, #1
 810be2e:	9301      	str	r3, [sp, #4]
 810be30:	2300      	movs	r3, #0
 810be32:	9300      	str	r3, [sp, #0]
 810be34:	23ff      	movs	r3, #255	; 0xff
 810be36:	2200      	movs	r2, #0
 810be38:	69f9      	ldr	r1, [r7, #28]
 810be3a:	6878      	ldr	r0, [r7, #4]
 810be3c:	f000 fb48 	bl	810c4d0 <ip4_output_if>
 810be40:	4603      	mov	r3, r0
 810be42:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 810be44:	e001      	b.n	810be4a <icmp_input+0x1ee>
      break;
 810be46:	bf00      	nop
 810be48:	e000      	b.n	810be4c <icmp_input+0x1f0>
      break;
 810be4a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 810be4c:	6878      	ldr	r0, [r7, #4]
 810be4e:	f002 fde9 	bl	810ea24 <pbuf_free>
  return;
 810be52:	e013      	b.n	810be7c <icmp_input+0x220>
    goto lenerr;
 810be54:	bf00      	nop
 810be56:	e002      	b.n	810be5e <icmp_input+0x202>
    goto lenerr;
 810be58:	bf00      	nop
 810be5a:	e000      	b.n	810be5e <icmp_input+0x202>
        goto lenerr;
 810be5c:	bf00      	nop
lenerr:
  pbuf_free(p);
 810be5e:	6878      	ldr	r0, [r7, #4]
 810be60:	f002 fde0 	bl	810ea24 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810be64:	e00a      	b.n	810be7c <icmp_input+0x220>
        goto icmperr;
 810be66:	bf00      	nop
 810be68:	e004      	b.n	810be74 <icmp_input+0x218>
        goto icmperr;
 810be6a:	bf00      	nop
 810be6c:	e002      	b.n	810be74 <icmp_input+0x218>
          goto icmperr;
 810be6e:	bf00      	nop
 810be70:	e000      	b.n	810be74 <icmp_input+0x218>
          goto icmperr;
 810be72:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 810be74:	6878      	ldr	r0, [r7, #4]
 810be76:	f002 fdd5 	bl	810ea24 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810be7a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 810be7c:	3728      	adds	r7, #40	; 0x28
 810be7e:	46bd      	mov	sp, r7
 810be80:	bd80      	pop	{r7, pc}
 810be82:	bf00      	nop
 810be84:	10005c18 	.word	0x10005c18
 810be88:	10005c2c 	.word	0x10005c2c
 810be8c:	0811527c 	.word	0x0811527c
 810be90:	081152dc 	.word	0x081152dc
 810be94:	08115314 	.word	0x08115314
 810be98:	0811533c 	.word	0x0811533c

0810be9c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 810be9c:	b580      	push	{r7, lr}
 810be9e:	b082      	sub	sp, #8
 810bea0:	af00      	add	r7, sp, #0
 810bea2:	6078      	str	r0, [r7, #4]
 810bea4:	460b      	mov	r3, r1
 810bea6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 810bea8:	78fb      	ldrb	r3, [r7, #3]
 810beaa:	461a      	mov	r2, r3
 810beac:	2103      	movs	r1, #3
 810beae:	6878      	ldr	r0, [r7, #4]
 810beb0:	f000 f814 	bl	810bedc <icmp_send_response>
}
 810beb4:	bf00      	nop
 810beb6:	3708      	adds	r7, #8
 810beb8:	46bd      	mov	sp, r7
 810beba:	bd80      	pop	{r7, pc}

0810bebc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 810bebc:	b580      	push	{r7, lr}
 810bebe:	b082      	sub	sp, #8
 810bec0:	af00      	add	r7, sp, #0
 810bec2:	6078      	str	r0, [r7, #4]
 810bec4:	460b      	mov	r3, r1
 810bec6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 810bec8:	78fb      	ldrb	r3, [r7, #3]
 810beca:	461a      	mov	r2, r3
 810becc:	210b      	movs	r1, #11
 810bece:	6878      	ldr	r0, [r7, #4]
 810bed0:	f000 f804 	bl	810bedc <icmp_send_response>
}
 810bed4:	bf00      	nop
 810bed6:	3708      	adds	r7, #8
 810bed8:	46bd      	mov	sp, r7
 810beda:	bd80      	pop	{r7, pc}

0810bedc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 810bedc:	b580      	push	{r7, lr}
 810bede:	b08c      	sub	sp, #48	; 0x30
 810bee0:	af04      	add	r7, sp, #16
 810bee2:	6078      	str	r0, [r7, #4]
 810bee4:	460b      	mov	r3, r1
 810bee6:	70fb      	strb	r3, [r7, #3]
 810bee8:	4613      	mov	r3, r2
 810beea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 810beec:	f44f 7220 	mov.w	r2, #640	; 0x280
 810bef0:	2124      	movs	r1, #36	; 0x24
 810bef2:	2022      	movs	r0, #34	; 0x22
 810bef4:	f002 fab4 	bl	810e460 <pbuf_alloc>
 810bef8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 810befa:	69fb      	ldr	r3, [r7, #28]
 810befc:	2b00      	cmp	r3, #0
 810befe:	d056      	beq.n	810bfae <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 810bf00:	69fb      	ldr	r3, [r7, #28]
 810bf02:	895b      	ldrh	r3, [r3, #10]
 810bf04:	2b23      	cmp	r3, #35	; 0x23
 810bf06:	d806      	bhi.n	810bf16 <icmp_send_response+0x3a>
 810bf08:	4b2b      	ldr	r3, [pc, #172]	; (810bfb8 <icmp_send_response+0xdc>)
 810bf0a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 810bf0e:	492b      	ldr	r1, [pc, #172]	; (810bfbc <icmp_send_response+0xe0>)
 810bf10:	482b      	ldr	r0, [pc, #172]	; (810bfc0 <icmp_send_response+0xe4>)
 810bf12:	f006 fecd 	bl	8112cb0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 810bf16:	687b      	ldr	r3, [r7, #4]
 810bf18:	685b      	ldr	r3, [r3, #4]
 810bf1a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 810bf1c:	69fb      	ldr	r3, [r7, #28]
 810bf1e:	685b      	ldr	r3, [r3, #4]
 810bf20:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 810bf22:	697b      	ldr	r3, [r7, #20]
 810bf24:	78fa      	ldrb	r2, [r7, #3]
 810bf26:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 810bf28:	697b      	ldr	r3, [r7, #20]
 810bf2a:	78ba      	ldrb	r2, [r7, #2]
 810bf2c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 810bf2e:	697b      	ldr	r3, [r7, #20]
 810bf30:	2200      	movs	r2, #0
 810bf32:	711a      	strb	r2, [r3, #4]
 810bf34:	2200      	movs	r2, #0
 810bf36:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 810bf38:	697b      	ldr	r3, [r7, #20]
 810bf3a:	2200      	movs	r2, #0
 810bf3c:	719a      	strb	r2, [r3, #6]
 810bf3e:	2200      	movs	r2, #0
 810bf40:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 810bf42:	69fb      	ldr	r3, [r7, #28]
 810bf44:	685b      	ldr	r3, [r3, #4]
 810bf46:	f103 0008 	add.w	r0, r3, #8
 810bf4a:	687b      	ldr	r3, [r7, #4]
 810bf4c:	685b      	ldr	r3, [r3, #4]
 810bf4e:	221c      	movs	r2, #28
 810bf50:	4619      	mov	r1, r3
 810bf52:	f006 f9d2 	bl	81122fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 810bf56:	69bb      	ldr	r3, [r7, #24]
 810bf58:	68db      	ldr	r3, [r3, #12]
 810bf5a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 810bf5c:	f107 030c 	add.w	r3, r7, #12
 810bf60:	4618      	mov	r0, r3
 810bf62:	f000 f901 	bl	810c168 <ip4_route>
 810bf66:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 810bf68:	693b      	ldr	r3, [r7, #16]
 810bf6a:	2b00      	cmp	r3, #0
 810bf6c:	d01b      	beq.n	810bfa6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 810bf6e:	697b      	ldr	r3, [r7, #20]
 810bf70:	2200      	movs	r2, #0
 810bf72:	709a      	strb	r2, [r3, #2]
 810bf74:	2200      	movs	r2, #0
 810bf76:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 810bf78:	69fb      	ldr	r3, [r7, #28]
 810bf7a:	895b      	ldrh	r3, [r3, #10]
 810bf7c:	4619      	mov	r1, r3
 810bf7e:	6978      	ldr	r0, [r7, #20]
 810bf80:	f000 f87d 	bl	810c07e <inet_chksum>
 810bf84:	4603      	mov	r3, r0
 810bf86:	461a      	mov	r2, r3
 810bf88:	697b      	ldr	r3, [r7, #20]
 810bf8a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 810bf8c:	f107 020c 	add.w	r2, r7, #12
 810bf90:	693b      	ldr	r3, [r7, #16]
 810bf92:	9302      	str	r3, [sp, #8]
 810bf94:	2301      	movs	r3, #1
 810bf96:	9301      	str	r3, [sp, #4]
 810bf98:	2300      	movs	r3, #0
 810bf9a:	9300      	str	r3, [sp, #0]
 810bf9c:	23ff      	movs	r3, #255	; 0xff
 810bf9e:	2100      	movs	r1, #0
 810bfa0:	69f8      	ldr	r0, [r7, #28]
 810bfa2:	f000 fa95 	bl	810c4d0 <ip4_output_if>
  }
  pbuf_free(q);
 810bfa6:	69f8      	ldr	r0, [r7, #28]
 810bfa8:	f002 fd3c 	bl	810ea24 <pbuf_free>
 810bfac:	e000      	b.n	810bfb0 <icmp_send_response+0xd4>
    return;
 810bfae:	bf00      	nop
}
 810bfb0:	3720      	adds	r7, #32
 810bfb2:	46bd      	mov	sp, r7
 810bfb4:	bd80      	pop	{r7, pc}
 810bfb6:	bf00      	nop
 810bfb8:	0811527c 	.word	0x0811527c
 810bfbc:	08115370 	.word	0x08115370
 810bfc0:	08115314 	.word	0x08115314

0810bfc4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 810bfc4:	b480      	push	{r7}
 810bfc6:	b089      	sub	sp, #36	; 0x24
 810bfc8:	af00      	add	r7, sp, #0
 810bfca:	6078      	str	r0, [r7, #4]
 810bfcc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 810bfce:	687b      	ldr	r3, [r7, #4]
 810bfd0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 810bfd2:	2300      	movs	r3, #0
 810bfd4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 810bfd6:	2300      	movs	r3, #0
 810bfd8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 810bfda:	69fb      	ldr	r3, [r7, #28]
 810bfdc:	f003 0301 	and.w	r3, r3, #1
 810bfe0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 810bfe2:	693b      	ldr	r3, [r7, #16]
 810bfe4:	2b00      	cmp	r3, #0
 810bfe6:	d00d      	beq.n	810c004 <lwip_standard_chksum+0x40>
 810bfe8:	683b      	ldr	r3, [r7, #0]
 810bfea:	2b00      	cmp	r3, #0
 810bfec:	dd0a      	ble.n	810c004 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 810bfee:	69fa      	ldr	r2, [r7, #28]
 810bff0:	1c53      	adds	r3, r2, #1
 810bff2:	61fb      	str	r3, [r7, #28]
 810bff4:	f107 030e 	add.w	r3, r7, #14
 810bff8:	3301      	adds	r3, #1
 810bffa:	7812      	ldrb	r2, [r2, #0]
 810bffc:	701a      	strb	r2, [r3, #0]
    len--;
 810bffe:	683b      	ldr	r3, [r7, #0]
 810c000:	3b01      	subs	r3, #1
 810c002:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 810c004:	69fb      	ldr	r3, [r7, #28]
 810c006:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 810c008:	e00a      	b.n	810c020 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 810c00a:	69bb      	ldr	r3, [r7, #24]
 810c00c:	1c9a      	adds	r2, r3, #2
 810c00e:	61ba      	str	r2, [r7, #24]
 810c010:	881b      	ldrh	r3, [r3, #0]
 810c012:	461a      	mov	r2, r3
 810c014:	697b      	ldr	r3, [r7, #20]
 810c016:	4413      	add	r3, r2
 810c018:	617b      	str	r3, [r7, #20]
    len -= 2;
 810c01a:	683b      	ldr	r3, [r7, #0]
 810c01c:	3b02      	subs	r3, #2
 810c01e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 810c020:	683b      	ldr	r3, [r7, #0]
 810c022:	2b01      	cmp	r3, #1
 810c024:	dcf1      	bgt.n	810c00a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 810c026:	683b      	ldr	r3, [r7, #0]
 810c028:	2b00      	cmp	r3, #0
 810c02a:	dd04      	ble.n	810c036 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 810c02c:	f107 030e 	add.w	r3, r7, #14
 810c030:	69ba      	ldr	r2, [r7, #24]
 810c032:	7812      	ldrb	r2, [r2, #0]
 810c034:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 810c036:	89fb      	ldrh	r3, [r7, #14]
 810c038:	461a      	mov	r2, r3
 810c03a:	697b      	ldr	r3, [r7, #20]
 810c03c:	4413      	add	r3, r2
 810c03e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 810c040:	697b      	ldr	r3, [r7, #20]
 810c042:	0c1a      	lsrs	r2, r3, #16
 810c044:	697b      	ldr	r3, [r7, #20]
 810c046:	b29b      	uxth	r3, r3
 810c048:	4413      	add	r3, r2
 810c04a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 810c04c:	697b      	ldr	r3, [r7, #20]
 810c04e:	0c1a      	lsrs	r2, r3, #16
 810c050:	697b      	ldr	r3, [r7, #20]
 810c052:	b29b      	uxth	r3, r3
 810c054:	4413      	add	r3, r2
 810c056:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 810c058:	693b      	ldr	r3, [r7, #16]
 810c05a:	2b00      	cmp	r3, #0
 810c05c:	d007      	beq.n	810c06e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 810c05e:	697b      	ldr	r3, [r7, #20]
 810c060:	021b      	lsls	r3, r3, #8
 810c062:	b29a      	uxth	r2, r3
 810c064:	697b      	ldr	r3, [r7, #20]
 810c066:	0a1b      	lsrs	r3, r3, #8
 810c068:	b2db      	uxtb	r3, r3
 810c06a:	4313      	orrs	r3, r2
 810c06c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 810c06e:	697b      	ldr	r3, [r7, #20]
 810c070:	b29b      	uxth	r3, r3
}
 810c072:	4618      	mov	r0, r3
 810c074:	3724      	adds	r7, #36	; 0x24
 810c076:	46bd      	mov	sp, r7
 810c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c07c:	4770      	bx	lr

0810c07e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 810c07e:	b580      	push	{r7, lr}
 810c080:	b082      	sub	sp, #8
 810c082:	af00      	add	r7, sp, #0
 810c084:	6078      	str	r0, [r7, #4]
 810c086:	460b      	mov	r3, r1
 810c088:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 810c08a:	887b      	ldrh	r3, [r7, #2]
 810c08c:	4619      	mov	r1, r3
 810c08e:	6878      	ldr	r0, [r7, #4]
 810c090:	f7ff ff98 	bl	810bfc4 <lwip_standard_chksum>
 810c094:	4603      	mov	r3, r0
 810c096:	43db      	mvns	r3, r3
 810c098:	b29b      	uxth	r3, r3
}
 810c09a:	4618      	mov	r0, r3
 810c09c:	3708      	adds	r7, #8
 810c09e:	46bd      	mov	sp, r7
 810c0a0:	bd80      	pop	{r7, pc}

0810c0a2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 810c0a2:	b580      	push	{r7, lr}
 810c0a4:	b086      	sub	sp, #24
 810c0a6:	af00      	add	r7, sp, #0
 810c0a8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 810c0aa:	2300      	movs	r3, #0
 810c0ac:	60fb      	str	r3, [r7, #12]

  acc = 0;
 810c0ae:	2300      	movs	r3, #0
 810c0b0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810c0b2:	687b      	ldr	r3, [r7, #4]
 810c0b4:	613b      	str	r3, [r7, #16]
 810c0b6:	e02b      	b.n	810c110 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 810c0b8:	693b      	ldr	r3, [r7, #16]
 810c0ba:	685a      	ldr	r2, [r3, #4]
 810c0bc:	693b      	ldr	r3, [r7, #16]
 810c0be:	895b      	ldrh	r3, [r3, #10]
 810c0c0:	4619      	mov	r1, r3
 810c0c2:	4610      	mov	r0, r2
 810c0c4:	f7ff ff7e 	bl	810bfc4 <lwip_standard_chksum>
 810c0c8:	4603      	mov	r3, r0
 810c0ca:	461a      	mov	r2, r3
 810c0cc:	697b      	ldr	r3, [r7, #20]
 810c0ce:	4413      	add	r3, r2
 810c0d0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 810c0d2:	697b      	ldr	r3, [r7, #20]
 810c0d4:	0c1a      	lsrs	r2, r3, #16
 810c0d6:	697b      	ldr	r3, [r7, #20]
 810c0d8:	b29b      	uxth	r3, r3
 810c0da:	4413      	add	r3, r2
 810c0dc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 810c0de:	693b      	ldr	r3, [r7, #16]
 810c0e0:	895b      	ldrh	r3, [r3, #10]
 810c0e2:	f003 0301 	and.w	r3, r3, #1
 810c0e6:	b29b      	uxth	r3, r3
 810c0e8:	2b00      	cmp	r3, #0
 810c0ea:	d00e      	beq.n	810c10a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 810c0ec:	68fb      	ldr	r3, [r7, #12]
 810c0ee:	2b00      	cmp	r3, #0
 810c0f0:	bf0c      	ite	eq
 810c0f2:	2301      	moveq	r3, #1
 810c0f4:	2300      	movne	r3, #0
 810c0f6:	b2db      	uxtb	r3, r3
 810c0f8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 810c0fa:	697b      	ldr	r3, [r7, #20]
 810c0fc:	021b      	lsls	r3, r3, #8
 810c0fe:	b29a      	uxth	r2, r3
 810c100:	697b      	ldr	r3, [r7, #20]
 810c102:	0a1b      	lsrs	r3, r3, #8
 810c104:	b2db      	uxtb	r3, r3
 810c106:	4313      	orrs	r3, r2
 810c108:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810c10a:	693b      	ldr	r3, [r7, #16]
 810c10c:	681b      	ldr	r3, [r3, #0]
 810c10e:	613b      	str	r3, [r7, #16]
 810c110:	693b      	ldr	r3, [r7, #16]
 810c112:	2b00      	cmp	r3, #0
 810c114:	d1d0      	bne.n	810c0b8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 810c116:	68fb      	ldr	r3, [r7, #12]
 810c118:	2b00      	cmp	r3, #0
 810c11a:	d007      	beq.n	810c12c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 810c11c:	697b      	ldr	r3, [r7, #20]
 810c11e:	021b      	lsls	r3, r3, #8
 810c120:	b29a      	uxth	r2, r3
 810c122:	697b      	ldr	r3, [r7, #20]
 810c124:	0a1b      	lsrs	r3, r3, #8
 810c126:	b2db      	uxtb	r3, r3
 810c128:	4313      	orrs	r3, r2
 810c12a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 810c12c:	697b      	ldr	r3, [r7, #20]
 810c12e:	b29b      	uxth	r3, r3
 810c130:	43db      	mvns	r3, r3
 810c132:	b29b      	uxth	r3, r3
}
 810c134:	4618      	mov	r0, r3
 810c136:	3718      	adds	r7, #24
 810c138:	46bd      	mov	sp, r7
 810c13a:	bd80      	pop	{r7, pc}

0810c13c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 810c13c:	b580      	push	{r7, lr}
 810c13e:	b082      	sub	sp, #8
 810c140:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 810c142:	2300      	movs	r3, #0
 810c144:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 810c146:	f002 ff99 	bl	810f07c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 810c14a:	f001 f9dd 	bl	810d508 <mem_init>
  memp_init();
 810c14e:	f001 fd41 	bl	810dbd4 <memp_init>
  pbuf_init();
  netif_init();
 810c152:	f001 fe4d 	bl	810ddf0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 810c156:	f003 fa71 	bl	810f63c <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 810c15a:	f003 f9b5 	bl	810f4c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 810c15e:	bf00      	nop
 810c160:	3708      	adds	r7, #8
 810c162:	46bd      	mov	sp, r7
 810c164:	bd80      	pop	{r7, pc}
	...

0810c168 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 810c168:	b480      	push	{r7}
 810c16a:	b085      	sub	sp, #20
 810c16c:	af00      	add	r7, sp, #0
 810c16e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 810c170:	4b33      	ldr	r3, [pc, #204]	; (810c240 <ip4_route+0xd8>)
 810c172:	681b      	ldr	r3, [r3, #0]
 810c174:	60fb      	str	r3, [r7, #12]
 810c176:	e036      	b.n	810c1e6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810c178:	68fb      	ldr	r3, [r7, #12]
 810c17a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c17e:	f003 0301 	and.w	r3, r3, #1
 810c182:	b2db      	uxtb	r3, r3
 810c184:	2b00      	cmp	r3, #0
 810c186:	d02b      	beq.n	810c1e0 <ip4_route+0x78>
 810c188:	68fb      	ldr	r3, [r7, #12]
 810c18a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c18e:	089b      	lsrs	r3, r3, #2
 810c190:	f003 0301 	and.w	r3, r3, #1
 810c194:	b2db      	uxtb	r3, r3
 810c196:	2b00      	cmp	r3, #0
 810c198:	d022      	beq.n	810c1e0 <ip4_route+0x78>
 810c19a:	68fb      	ldr	r3, [r7, #12]
 810c19c:	3304      	adds	r3, #4
 810c19e:	681b      	ldr	r3, [r3, #0]
 810c1a0:	2b00      	cmp	r3, #0
 810c1a2:	d01d      	beq.n	810c1e0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 810c1a4:	687b      	ldr	r3, [r7, #4]
 810c1a6:	681a      	ldr	r2, [r3, #0]
 810c1a8:	68fb      	ldr	r3, [r7, #12]
 810c1aa:	3304      	adds	r3, #4
 810c1ac:	681b      	ldr	r3, [r3, #0]
 810c1ae:	405a      	eors	r2, r3
 810c1b0:	68fb      	ldr	r3, [r7, #12]
 810c1b2:	3308      	adds	r3, #8
 810c1b4:	681b      	ldr	r3, [r3, #0]
 810c1b6:	4013      	ands	r3, r2
 810c1b8:	2b00      	cmp	r3, #0
 810c1ba:	d101      	bne.n	810c1c0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 810c1bc:	68fb      	ldr	r3, [r7, #12]
 810c1be:	e038      	b.n	810c232 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 810c1c0:	68fb      	ldr	r3, [r7, #12]
 810c1c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c1c6:	f003 0302 	and.w	r3, r3, #2
 810c1ca:	2b00      	cmp	r3, #0
 810c1cc:	d108      	bne.n	810c1e0 <ip4_route+0x78>
 810c1ce:	687b      	ldr	r3, [r7, #4]
 810c1d0:	681a      	ldr	r2, [r3, #0]
 810c1d2:	68fb      	ldr	r3, [r7, #12]
 810c1d4:	330c      	adds	r3, #12
 810c1d6:	681b      	ldr	r3, [r3, #0]
 810c1d8:	429a      	cmp	r2, r3
 810c1da:	d101      	bne.n	810c1e0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 810c1dc:	68fb      	ldr	r3, [r7, #12]
 810c1de:	e028      	b.n	810c232 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 810c1e0:	68fb      	ldr	r3, [r7, #12]
 810c1e2:	681b      	ldr	r3, [r3, #0]
 810c1e4:	60fb      	str	r3, [r7, #12]
 810c1e6:	68fb      	ldr	r3, [r7, #12]
 810c1e8:	2b00      	cmp	r3, #0
 810c1ea:	d1c5      	bne.n	810c178 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810c1ec:	4b15      	ldr	r3, [pc, #84]	; (810c244 <ip4_route+0xdc>)
 810c1ee:	681b      	ldr	r3, [r3, #0]
 810c1f0:	2b00      	cmp	r3, #0
 810c1f2:	d01a      	beq.n	810c22a <ip4_route+0xc2>
 810c1f4:	4b13      	ldr	r3, [pc, #76]	; (810c244 <ip4_route+0xdc>)
 810c1f6:	681b      	ldr	r3, [r3, #0]
 810c1f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c1fc:	f003 0301 	and.w	r3, r3, #1
 810c200:	2b00      	cmp	r3, #0
 810c202:	d012      	beq.n	810c22a <ip4_route+0xc2>
 810c204:	4b0f      	ldr	r3, [pc, #60]	; (810c244 <ip4_route+0xdc>)
 810c206:	681b      	ldr	r3, [r3, #0]
 810c208:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c20c:	f003 0304 	and.w	r3, r3, #4
 810c210:	2b00      	cmp	r3, #0
 810c212:	d00a      	beq.n	810c22a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810c214:	4b0b      	ldr	r3, [pc, #44]	; (810c244 <ip4_route+0xdc>)
 810c216:	681b      	ldr	r3, [r3, #0]
 810c218:	3304      	adds	r3, #4
 810c21a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810c21c:	2b00      	cmp	r3, #0
 810c21e:	d004      	beq.n	810c22a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810c220:	687b      	ldr	r3, [r7, #4]
 810c222:	681b      	ldr	r3, [r3, #0]
 810c224:	b2db      	uxtb	r3, r3
 810c226:	2b7f      	cmp	r3, #127	; 0x7f
 810c228:	d101      	bne.n	810c22e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 810c22a:	2300      	movs	r3, #0
 810c22c:	e001      	b.n	810c232 <ip4_route+0xca>
  }

  return netif_default;
 810c22e:	4b05      	ldr	r3, [pc, #20]	; (810c244 <ip4_route+0xdc>)
 810c230:	681b      	ldr	r3, [r3, #0]
}
 810c232:	4618      	mov	r0, r3
 810c234:	3714      	adds	r7, #20
 810c236:	46bd      	mov	sp, r7
 810c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c23c:	4770      	bx	lr
 810c23e:	bf00      	nop
 810c240:	100087a0 	.word	0x100087a0
 810c244:	100087a4 	.word	0x100087a4

0810c248 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 810c248:	b580      	push	{r7, lr}
 810c24a:	b082      	sub	sp, #8
 810c24c:	af00      	add	r7, sp, #0
 810c24e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 810c250:	687b      	ldr	r3, [r7, #4]
 810c252:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c256:	f003 0301 	and.w	r3, r3, #1
 810c25a:	b2db      	uxtb	r3, r3
 810c25c:	2b00      	cmp	r3, #0
 810c25e:	d016      	beq.n	810c28e <ip4_input_accept+0x46>
 810c260:	687b      	ldr	r3, [r7, #4]
 810c262:	3304      	adds	r3, #4
 810c264:	681b      	ldr	r3, [r3, #0]
 810c266:	2b00      	cmp	r3, #0
 810c268:	d011      	beq.n	810c28e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810c26a:	4b0b      	ldr	r3, [pc, #44]	; (810c298 <ip4_input_accept+0x50>)
 810c26c:	695a      	ldr	r2, [r3, #20]
 810c26e:	687b      	ldr	r3, [r7, #4]
 810c270:	3304      	adds	r3, #4
 810c272:	681b      	ldr	r3, [r3, #0]
 810c274:	429a      	cmp	r2, r3
 810c276:	d008      	beq.n	810c28a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 810c278:	4b07      	ldr	r3, [pc, #28]	; (810c298 <ip4_input_accept+0x50>)
 810c27a:	695b      	ldr	r3, [r3, #20]
 810c27c:	6879      	ldr	r1, [r7, #4]
 810c27e:	4618      	mov	r0, r3
 810c280:	f000 f9fe 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810c284:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810c286:	2b00      	cmp	r3, #0
 810c288:	d001      	beq.n	810c28e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 810c28a:	2301      	movs	r3, #1
 810c28c:	e000      	b.n	810c290 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 810c28e:	2300      	movs	r3, #0
}
 810c290:	4618      	mov	r0, r3
 810c292:	3708      	adds	r7, #8
 810c294:	46bd      	mov	sp, r7
 810c296:	bd80      	pop	{r7, pc}
 810c298:	10005c18 	.word	0x10005c18

0810c29c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 810c29c:	b580      	push	{r7, lr}
 810c29e:	b086      	sub	sp, #24
 810c2a0:	af00      	add	r7, sp, #0
 810c2a2:	6078      	str	r0, [r7, #4]
 810c2a4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 810c2a6:	687b      	ldr	r3, [r7, #4]
 810c2a8:	685b      	ldr	r3, [r3, #4]
 810c2aa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 810c2ac:	697b      	ldr	r3, [r7, #20]
 810c2ae:	781b      	ldrb	r3, [r3, #0]
 810c2b0:	091b      	lsrs	r3, r3, #4
 810c2b2:	b2db      	uxtb	r3, r3
 810c2b4:	2b04      	cmp	r3, #4
 810c2b6:	d004      	beq.n	810c2c2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 810c2b8:	6878      	ldr	r0, [r7, #4]
 810c2ba:	f002 fbb3 	bl	810ea24 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 810c2be:	2300      	movs	r3, #0
 810c2c0:	e0fd      	b.n	810c4be <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 810c2c2:	697b      	ldr	r3, [r7, #20]
 810c2c4:	781b      	ldrb	r3, [r3, #0]
 810c2c6:	f003 030f 	and.w	r3, r3, #15
 810c2ca:	b2db      	uxtb	r3, r3
 810c2cc:	009b      	lsls	r3, r3, #2
 810c2ce:	b2db      	uxtb	r3, r3
 810c2d0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 810c2d2:	697b      	ldr	r3, [r7, #20]
 810c2d4:	885b      	ldrh	r3, [r3, #2]
 810c2d6:	b29b      	uxth	r3, r3
 810c2d8:	4618      	mov	r0, r3
 810c2da:	f7fe fc87 	bl	810abec <lwip_htons>
 810c2de:	4603      	mov	r3, r0
 810c2e0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 810c2e2:	687b      	ldr	r3, [r7, #4]
 810c2e4:	891b      	ldrh	r3, [r3, #8]
 810c2e6:	89ba      	ldrh	r2, [r7, #12]
 810c2e8:	429a      	cmp	r2, r3
 810c2ea:	d204      	bcs.n	810c2f6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 810c2ec:	89bb      	ldrh	r3, [r7, #12]
 810c2ee:	4619      	mov	r1, r3
 810c2f0:	6878      	ldr	r0, [r7, #4]
 810c2f2:	f002 fa11 	bl	810e718 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 810c2f6:	687b      	ldr	r3, [r7, #4]
 810c2f8:	895b      	ldrh	r3, [r3, #10]
 810c2fa:	89fa      	ldrh	r2, [r7, #14]
 810c2fc:	429a      	cmp	r2, r3
 810c2fe:	d807      	bhi.n	810c310 <ip4_input+0x74>
 810c300:	687b      	ldr	r3, [r7, #4]
 810c302:	891b      	ldrh	r3, [r3, #8]
 810c304:	89ba      	ldrh	r2, [r7, #12]
 810c306:	429a      	cmp	r2, r3
 810c308:	d802      	bhi.n	810c310 <ip4_input+0x74>
 810c30a:	89fb      	ldrh	r3, [r7, #14]
 810c30c:	2b13      	cmp	r3, #19
 810c30e:	d804      	bhi.n	810c31a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 810c310:	6878      	ldr	r0, [r7, #4]
 810c312:	f002 fb87 	bl	810ea24 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 810c316:	2300      	movs	r3, #0
 810c318:	e0d1      	b.n	810c4be <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 810c31a:	697b      	ldr	r3, [r7, #20]
 810c31c:	691b      	ldr	r3, [r3, #16]
 810c31e:	4a6a      	ldr	r2, [pc, #424]	; (810c4c8 <ip4_input+0x22c>)
 810c320:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 810c322:	697b      	ldr	r3, [r7, #20]
 810c324:	68db      	ldr	r3, [r3, #12]
 810c326:	4a68      	ldr	r2, [pc, #416]	; (810c4c8 <ip4_input+0x22c>)
 810c328:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810c32a:	4b67      	ldr	r3, [pc, #412]	; (810c4c8 <ip4_input+0x22c>)
 810c32c:	695b      	ldr	r3, [r3, #20]
 810c32e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 810c332:	2be0      	cmp	r3, #224	; 0xe0
 810c334:	d112      	bne.n	810c35c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 810c336:	683b      	ldr	r3, [r7, #0]
 810c338:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c33c:	f003 0301 	and.w	r3, r3, #1
 810c340:	b2db      	uxtb	r3, r3
 810c342:	2b00      	cmp	r3, #0
 810c344:	d007      	beq.n	810c356 <ip4_input+0xba>
 810c346:	683b      	ldr	r3, [r7, #0]
 810c348:	3304      	adds	r3, #4
 810c34a:	681b      	ldr	r3, [r3, #0]
 810c34c:	2b00      	cmp	r3, #0
 810c34e:	d002      	beq.n	810c356 <ip4_input+0xba>
      netif = inp;
 810c350:	683b      	ldr	r3, [r7, #0]
 810c352:	613b      	str	r3, [r7, #16]
 810c354:	e02a      	b.n	810c3ac <ip4_input+0x110>
    } else {
      netif = NULL;
 810c356:	2300      	movs	r3, #0
 810c358:	613b      	str	r3, [r7, #16]
 810c35a:	e027      	b.n	810c3ac <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 810c35c:	6838      	ldr	r0, [r7, #0]
 810c35e:	f7ff ff73 	bl	810c248 <ip4_input_accept>
 810c362:	4603      	mov	r3, r0
 810c364:	2b00      	cmp	r3, #0
 810c366:	d002      	beq.n	810c36e <ip4_input+0xd2>
      netif = inp;
 810c368:	683b      	ldr	r3, [r7, #0]
 810c36a:	613b      	str	r3, [r7, #16]
 810c36c:	e01e      	b.n	810c3ac <ip4_input+0x110>
    } else {
      netif = NULL;
 810c36e:	2300      	movs	r3, #0
 810c370:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 810c372:	4b55      	ldr	r3, [pc, #340]	; (810c4c8 <ip4_input+0x22c>)
 810c374:	695b      	ldr	r3, [r3, #20]
 810c376:	b2db      	uxtb	r3, r3
 810c378:	2b7f      	cmp	r3, #127	; 0x7f
 810c37a:	d017      	beq.n	810c3ac <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 810c37c:	4b53      	ldr	r3, [pc, #332]	; (810c4cc <ip4_input+0x230>)
 810c37e:	681b      	ldr	r3, [r3, #0]
 810c380:	613b      	str	r3, [r7, #16]
 810c382:	e00e      	b.n	810c3a2 <ip4_input+0x106>
          if (netif == inp) {
 810c384:	693a      	ldr	r2, [r7, #16]
 810c386:	683b      	ldr	r3, [r7, #0]
 810c388:	429a      	cmp	r2, r3
 810c38a:	d006      	beq.n	810c39a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 810c38c:	6938      	ldr	r0, [r7, #16]
 810c38e:	f7ff ff5b 	bl	810c248 <ip4_input_accept>
 810c392:	4603      	mov	r3, r0
 810c394:	2b00      	cmp	r3, #0
 810c396:	d108      	bne.n	810c3aa <ip4_input+0x10e>
 810c398:	e000      	b.n	810c39c <ip4_input+0x100>
            continue;
 810c39a:	bf00      	nop
        NETIF_FOREACH(netif) {
 810c39c:	693b      	ldr	r3, [r7, #16]
 810c39e:	681b      	ldr	r3, [r3, #0]
 810c3a0:	613b      	str	r3, [r7, #16]
 810c3a2:	693b      	ldr	r3, [r7, #16]
 810c3a4:	2b00      	cmp	r3, #0
 810c3a6:	d1ed      	bne.n	810c384 <ip4_input+0xe8>
 810c3a8:	e000      	b.n	810c3ac <ip4_input+0x110>
            break;
 810c3aa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810c3ac:	4b46      	ldr	r3, [pc, #280]	; (810c4c8 <ip4_input+0x22c>)
 810c3ae:	691b      	ldr	r3, [r3, #16]
 810c3b0:	6839      	ldr	r1, [r7, #0]
 810c3b2:	4618      	mov	r0, r3
 810c3b4:	f000 f964 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810c3b8:	4603      	mov	r3, r0
 810c3ba:	2b00      	cmp	r3, #0
 810c3bc:	d105      	bne.n	810c3ca <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 810c3be:	4b42      	ldr	r3, [pc, #264]	; (810c4c8 <ip4_input+0x22c>)
 810c3c0:	691b      	ldr	r3, [r3, #16]
 810c3c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810c3c6:	2be0      	cmp	r3, #224	; 0xe0
 810c3c8:	d104      	bne.n	810c3d4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 810c3ca:	6878      	ldr	r0, [r7, #4]
 810c3cc:	f002 fb2a 	bl	810ea24 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 810c3d0:	2300      	movs	r3, #0
 810c3d2:	e074      	b.n	810c4be <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 810c3d4:	693b      	ldr	r3, [r7, #16]
 810c3d6:	2b00      	cmp	r3, #0
 810c3d8:	d104      	bne.n	810c3e4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 810c3da:	6878      	ldr	r0, [r7, #4]
 810c3dc:	f002 fb22 	bl	810ea24 <pbuf_free>
    return ERR_OK;
 810c3e0:	2300      	movs	r3, #0
 810c3e2:	e06c      	b.n	810c4be <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 810c3e4:	697b      	ldr	r3, [r7, #20]
 810c3e6:	88db      	ldrh	r3, [r3, #6]
 810c3e8:	b29b      	uxth	r3, r3
 810c3ea:	461a      	mov	r2, r3
 810c3ec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 810c3f0:	4013      	ands	r3, r2
 810c3f2:	2b00      	cmp	r3, #0
 810c3f4:	d00b      	beq.n	810c40e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 810c3f6:	6878      	ldr	r0, [r7, #4]
 810c3f8:	f000 fc88 	bl	810cd0c <ip4_reass>
 810c3fc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 810c3fe:	687b      	ldr	r3, [r7, #4]
 810c400:	2b00      	cmp	r3, #0
 810c402:	d101      	bne.n	810c408 <ip4_input+0x16c>
      return ERR_OK;
 810c404:	2300      	movs	r3, #0
 810c406:	e05a      	b.n	810c4be <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 810c408:	687b      	ldr	r3, [r7, #4]
 810c40a:	685b      	ldr	r3, [r3, #4]
 810c40c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 810c40e:	4a2e      	ldr	r2, [pc, #184]	; (810c4c8 <ip4_input+0x22c>)
 810c410:	693b      	ldr	r3, [r7, #16]
 810c412:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 810c414:	4a2c      	ldr	r2, [pc, #176]	; (810c4c8 <ip4_input+0x22c>)
 810c416:	683b      	ldr	r3, [r7, #0]
 810c418:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 810c41a:	4a2b      	ldr	r2, [pc, #172]	; (810c4c8 <ip4_input+0x22c>)
 810c41c:	697b      	ldr	r3, [r7, #20]
 810c41e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 810c420:	697b      	ldr	r3, [r7, #20]
 810c422:	781b      	ldrb	r3, [r3, #0]
 810c424:	f003 030f 	and.w	r3, r3, #15
 810c428:	b2db      	uxtb	r3, r3
 810c42a:	009b      	lsls	r3, r3, #2
 810c42c:	b2db      	uxtb	r3, r3
 810c42e:	b29a      	uxth	r2, r3
 810c430:	4b25      	ldr	r3, [pc, #148]	; (810c4c8 <ip4_input+0x22c>)
 810c432:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 810c434:	89fb      	ldrh	r3, [r7, #14]
 810c436:	4619      	mov	r1, r3
 810c438:	6878      	ldr	r0, [r7, #4]
 810c43a:	f002 fa6d 	bl	810e918 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 810c43e:	697b      	ldr	r3, [r7, #20]
 810c440:	7a5b      	ldrb	r3, [r3, #9]
 810c442:	2b01      	cmp	r3, #1
 810c444:	d006      	beq.n	810c454 <ip4_input+0x1b8>
 810c446:	2b11      	cmp	r3, #17
 810c448:	d109      	bne.n	810c45e <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 810c44a:	6839      	ldr	r1, [r7, #0]
 810c44c:	6878      	ldr	r0, [r7, #4]
 810c44e:	f003 f9a3 	bl	810f798 <udp_input>
        break;
 810c452:	e021      	b.n	810c498 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 810c454:	6839      	ldr	r1, [r7, #0]
 810c456:	6878      	ldr	r0, [r7, #4]
 810c458:	f7ff fc00 	bl	810bc5c <icmp_input>
        break;
 810c45c:	e01c      	b.n	810c498 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810c45e:	4b1a      	ldr	r3, [pc, #104]	; (810c4c8 <ip4_input+0x22c>)
 810c460:	695b      	ldr	r3, [r3, #20]
 810c462:	6939      	ldr	r1, [r7, #16]
 810c464:	4618      	mov	r0, r3
 810c466:	f000 f90b 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810c46a:	4603      	mov	r3, r0
 810c46c:	2b00      	cmp	r3, #0
 810c46e:	d10f      	bne.n	810c490 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810c470:	4b15      	ldr	r3, [pc, #84]	; (810c4c8 <ip4_input+0x22c>)
 810c472:	695b      	ldr	r3, [r3, #20]
 810c474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810c478:	2be0      	cmp	r3, #224	; 0xe0
 810c47a:	d009      	beq.n	810c490 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 810c47c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810c480:	4619      	mov	r1, r3
 810c482:	6878      	ldr	r0, [r7, #4]
 810c484:	f002 fabb 	bl	810e9fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 810c488:	2102      	movs	r1, #2
 810c48a:	6878      	ldr	r0, [r7, #4]
 810c48c:	f7ff fd06 	bl	810be9c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 810c490:	6878      	ldr	r0, [r7, #4]
 810c492:	f002 fac7 	bl	810ea24 <pbuf_free>
        break;
 810c496:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 810c498:	4b0b      	ldr	r3, [pc, #44]	; (810c4c8 <ip4_input+0x22c>)
 810c49a:	2200      	movs	r2, #0
 810c49c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 810c49e:	4b0a      	ldr	r3, [pc, #40]	; (810c4c8 <ip4_input+0x22c>)
 810c4a0:	2200      	movs	r2, #0
 810c4a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 810c4a4:	4b08      	ldr	r3, [pc, #32]	; (810c4c8 <ip4_input+0x22c>)
 810c4a6:	2200      	movs	r2, #0
 810c4a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 810c4aa:	4b07      	ldr	r3, [pc, #28]	; (810c4c8 <ip4_input+0x22c>)
 810c4ac:	2200      	movs	r2, #0
 810c4ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 810c4b0:	4b05      	ldr	r3, [pc, #20]	; (810c4c8 <ip4_input+0x22c>)
 810c4b2:	2200      	movs	r2, #0
 810c4b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 810c4b6:	4b04      	ldr	r3, [pc, #16]	; (810c4c8 <ip4_input+0x22c>)
 810c4b8:	2200      	movs	r2, #0
 810c4ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 810c4bc:	2300      	movs	r3, #0
}
 810c4be:	4618      	mov	r0, r3
 810c4c0:	3718      	adds	r7, #24
 810c4c2:	46bd      	mov	sp, r7
 810c4c4:	bd80      	pop	{r7, pc}
 810c4c6:	bf00      	nop
 810c4c8:	10005c18 	.word	0x10005c18
 810c4cc:	100087a0 	.word	0x100087a0

0810c4d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 810c4d0:	b580      	push	{r7, lr}
 810c4d2:	b08a      	sub	sp, #40	; 0x28
 810c4d4:	af04      	add	r7, sp, #16
 810c4d6:	60f8      	str	r0, [r7, #12]
 810c4d8:	60b9      	str	r1, [r7, #8]
 810c4da:	607a      	str	r2, [r7, #4]
 810c4dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 810c4de:	68bb      	ldr	r3, [r7, #8]
 810c4e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 810c4e2:	687b      	ldr	r3, [r7, #4]
 810c4e4:	2b00      	cmp	r3, #0
 810c4e6:	d009      	beq.n	810c4fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 810c4e8:	68bb      	ldr	r3, [r7, #8]
 810c4ea:	2b00      	cmp	r3, #0
 810c4ec:	d003      	beq.n	810c4f6 <ip4_output_if+0x26>
 810c4ee:	68bb      	ldr	r3, [r7, #8]
 810c4f0:	681b      	ldr	r3, [r3, #0]
 810c4f2:	2b00      	cmp	r3, #0
 810c4f4:	d102      	bne.n	810c4fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 810c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c4f8:	3304      	adds	r3, #4
 810c4fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 810c4fc:	78fa      	ldrb	r2, [r7, #3]
 810c4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c500:	9302      	str	r3, [sp, #8]
 810c502:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 810c506:	9301      	str	r3, [sp, #4]
 810c508:	f897 3020 	ldrb.w	r3, [r7, #32]
 810c50c:	9300      	str	r3, [sp, #0]
 810c50e:	4613      	mov	r3, r2
 810c510:	687a      	ldr	r2, [r7, #4]
 810c512:	6979      	ldr	r1, [r7, #20]
 810c514:	68f8      	ldr	r0, [r7, #12]
 810c516:	f000 f805 	bl	810c524 <ip4_output_if_src>
 810c51a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 810c51c:	4618      	mov	r0, r3
 810c51e:	3718      	adds	r7, #24
 810c520:	46bd      	mov	sp, r7
 810c522:	bd80      	pop	{r7, pc}

0810c524 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 810c524:	b580      	push	{r7, lr}
 810c526:	b088      	sub	sp, #32
 810c528:	af00      	add	r7, sp, #0
 810c52a:	60f8      	str	r0, [r7, #12]
 810c52c:	60b9      	str	r1, [r7, #8]
 810c52e:	607a      	str	r2, [r7, #4]
 810c530:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 810c532:	68fb      	ldr	r3, [r7, #12]
 810c534:	7b9b      	ldrb	r3, [r3, #14]
 810c536:	2b01      	cmp	r3, #1
 810c538:	d006      	beq.n	810c548 <ip4_output_if_src+0x24>
 810c53a:	4b4b      	ldr	r3, [pc, #300]	; (810c668 <ip4_output_if_src+0x144>)
 810c53c:	f44f 7255 	mov.w	r2, #852	; 0x354
 810c540:	494a      	ldr	r1, [pc, #296]	; (810c66c <ip4_output_if_src+0x148>)
 810c542:	484b      	ldr	r0, [pc, #300]	; (810c670 <ip4_output_if_src+0x14c>)
 810c544:	f006 fbb4 	bl	8112cb0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	2b00      	cmp	r3, #0
 810c54c:	d060      	beq.n	810c610 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 810c54e:	2314      	movs	r3, #20
 810c550:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 810c552:	2114      	movs	r1, #20
 810c554:	68f8      	ldr	r0, [r7, #12]
 810c556:	f002 f9cf 	bl	810e8f8 <pbuf_add_header>
 810c55a:	4603      	mov	r3, r0
 810c55c:	2b00      	cmp	r3, #0
 810c55e:	d002      	beq.n	810c566 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810c560:	f06f 0301 	mvn.w	r3, #1
 810c564:	e07c      	b.n	810c660 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 810c566:	68fb      	ldr	r3, [r7, #12]
 810c568:	685b      	ldr	r3, [r3, #4]
 810c56a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 810c56c:	68fb      	ldr	r3, [r7, #12]
 810c56e:	895b      	ldrh	r3, [r3, #10]
 810c570:	2b13      	cmp	r3, #19
 810c572:	d806      	bhi.n	810c582 <ip4_output_if_src+0x5e>
 810c574:	4b3c      	ldr	r3, [pc, #240]	; (810c668 <ip4_output_if_src+0x144>)
 810c576:	f44f 7262 	mov.w	r2, #904	; 0x388
 810c57a:	493e      	ldr	r1, [pc, #248]	; (810c674 <ip4_output_if_src+0x150>)
 810c57c:	483c      	ldr	r0, [pc, #240]	; (810c670 <ip4_output_if_src+0x14c>)
 810c57e:	f006 fb97 	bl	8112cb0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 810c582:	69fb      	ldr	r3, [r7, #28]
 810c584:	78fa      	ldrb	r2, [r7, #3]
 810c586:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 810c588:	69fb      	ldr	r3, [r7, #28]
 810c58a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 810c58e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 810c590:	687b      	ldr	r3, [r7, #4]
 810c592:	681a      	ldr	r2, [r3, #0]
 810c594:	69fb      	ldr	r3, [r7, #28]
 810c596:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 810c598:	8b7b      	ldrh	r3, [r7, #26]
 810c59a:	089b      	lsrs	r3, r3, #2
 810c59c:	b29b      	uxth	r3, r3
 810c59e:	b2db      	uxtb	r3, r3
 810c5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c5a4:	b2da      	uxtb	r2, r3
 810c5a6:	69fb      	ldr	r3, [r7, #28]
 810c5a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 810c5aa:	69fb      	ldr	r3, [r7, #28]
 810c5ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 810c5b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 810c5b2:	68fb      	ldr	r3, [r7, #12]
 810c5b4:	891b      	ldrh	r3, [r3, #8]
 810c5b6:	4618      	mov	r0, r3
 810c5b8:	f7fe fb18 	bl	810abec <lwip_htons>
 810c5bc:	4603      	mov	r3, r0
 810c5be:	461a      	mov	r2, r3
 810c5c0:	69fb      	ldr	r3, [r7, #28]
 810c5c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 810c5c4:	69fb      	ldr	r3, [r7, #28]
 810c5c6:	2200      	movs	r2, #0
 810c5c8:	719a      	strb	r2, [r3, #6]
 810c5ca:	2200      	movs	r2, #0
 810c5cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 810c5ce:	4b2a      	ldr	r3, [pc, #168]	; (810c678 <ip4_output_if_src+0x154>)
 810c5d0:	881b      	ldrh	r3, [r3, #0]
 810c5d2:	4618      	mov	r0, r3
 810c5d4:	f7fe fb0a 	bl	810abec <lwip_htons>
 810c5d8:	4603      	mov	r3, r0
 810c5da:	461a      	mov	r2, r3
 810c5dc:	69fb      	ldr	r3, [r7, #28]
 810c5de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 810c5e0:	4b25      	ldr	r3, [pc, #148]	; (810c678 <ip4_output_if_src+0x154>)
 810c5e2:	881b      	ldrh	r3, [r3, #0]
 810c5e4:	3301      	adds	r3, #1
 810c5e6:	b29a      	uxth	r2, r3
 810c5e8:	4b23      	ldr	r3, [pc, #140]	; (810c678 <ip4_output_if_src+0x154>)
 810c5ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 810c5ec:	68bb      	ldr	r3, [r7, #8]
 810c5ee:	2b00      	cmp	r3, #0
 810c5f0:	d104      	bne.n	810c5fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 810c5f2:	4b22      	ldr	r3, [pc, #136]	; (810c67c <ip4_output_if_src+0x158>)
 810c5f4:	681a      	ldr	r2, [r3, #0]
 810c5f6:	69fb      	ldr	r3, [r7, #28]
 810c5f8:	60da      	str	r2, [r3, #12]
 810c5fa:	e003      	b.n	810c604 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 810c5fc:	68bb      	ldr	r3, [r7, #8]
 810c5fe:	681a      	ldr	r2, [r3, #0]
 810c600:	69fb      	ldr	r3, [r7, #28]
 810c602:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 810c604:	69fb      	ldr	r3, [r7, #28]
 810c606:	2200      	movs	r2, #0
 810c608:	729a      	strb	r2, [r3, #10]
 810c60a:	2200      	movs	r2, #0
 810c60c:	72da      	strb	r2, [r3, #11]
 810c60e:	e00f      	b.n	810c630 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 810c610:	68fb      	ldr	r3, [r7, #12]
 810c612:	895b      	ldrh	r3, [r3, #10]
 810c614:	2b13      	cmp	r3, #19
 810c616:	d802      	bhi.n	810c61e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810c618:	f06f 0301 	mvn.w	r3, #1
 810c61c:	e020      	b.n	810c660 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 810c61e:	68fb      	ldr	r3, [r7, #12]
 810c620:	685b      	ldr	r3, [r3, #4]
 810c622:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 810c624:	69fb      	ldr	r3, [r7, #28]
 810c626:	691b      	ldr	r3, [r3, #16]
 810c628:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 810c62a:	f107 0314 	add.w	r3, r7, #20
 810c62e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 810c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810c632:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c634:	2b00      	cmp	r3, #0
 810c636:	d00c      	beq.n	810c652 <ip4_output_if_src+0x12e>
 810c638:	68fb      	ldr	r3, [r7, #12]
 810c63a:	891a      	ldrh	r2, [r3, #8]
 810c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810c63e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810c640:	429a      	cmp	r2, r3
 810c642:	d906      	bls.n	810c652 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 810c644:	687a      	ldr	r2, [r7, #4]
 810c646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810c648:	68f8      	ldr	r0, [r7, #12]
 810c64a:	f000 fd4d 	bl	810d0e8 <ip4_frag>
 810c64e:	4603      	mov	r3, r0
 810c650:	e006      	b.n	810c660 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 810c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810c654:	695b      	ldr	r3, [r3, #20]
 810c656:	687a      	ldr	r2, [r7, #4]
 810c658:	68f9      	ldr	r1, [r7, #12]
 810c65a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810c65c:	4798      	blx	r3
 810c65e:	4603      	mov	r3, r0
}
 810c660:	4618      	mov	r0, r3
 810c662:	3720      	adds	r7, #32
 810c664:	46bd      	mov	sp, r7
 810c666:	bd80      	pop	{r7, pc}
 810c668:	0811539c 	.word	0x0811539c
 810c66c:	081153fc 	.word	0x081153fc
 810c670:	08115408 	.word	0x08115408
 810c674:	08115430 	.word	0x08115430
 810c678:	100058ee 	.word	0x100058ee
 810c67c:	08116a9c 	.word	0x08116a9c

0810c680 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 810c680:	b480      	push	{r7}
 810c682:	b085      	sub	sp, #20
 810c684:	af00      	add	r7, sp, #0
 810c686:	6078      	str	r0, [r7, #4]
 810c688:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 810c68a:	687b      	ldr	r3, [r7, #4]
 810c68c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 810c68e:	687b      	ldr	r3, [r7, #4]
 810c690:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c694:	d002      	beq.n	810c69c <ip4_addr_isbroadcast_u32+0x1c>
 810c696:	687b      	ldr	r3, [r7, #4]
 810c698:	2b00      	cmp	r3, #0
 810c69a:	d101      	bne.n	810c6a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 810c69c:	2301      	movs	r3, #1
 810c69e:	e02a      	b.n	810c6f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 810c6a0:	683b      	ldr	r3, [r7, #0]
 810c6a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810c6a6:	f003 0302 	and.w	r3, r3, #2
 810c6aa:	2b00      	cmp	r3, #0
 810c6ac:	d101      	bne.n	810c6b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 810c6ae:	2300      	movs	r3, #0
 810c6b0:	e021      	b.n	810c6f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 810c6b2:	683b      	ldr	r3, [r7, #0]
 810c6b4:	3304      	adds	r3, #4
 810c6b6:	681b      	ldr	r3, [r3, #0]
 810c6b8:	687a      	ldr	r2, [r7, #4]
 810c6ba:	429a      	cmp	r2, r3
 810c6bc:	d101      	bne.n	810c6c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 810c6be:	2300      	movs	r3, #0
 810c6c0:	e019      	b.n	810c6f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 810c6c2:	68fa      	ldr	r2, [r7, #12]
 810c6c4:	683b      	ldr	r3, [r7, #0]
 810c6c6:	3304      	adds	r3, #4
 810c6c8:	681b      	ldr	r3, [r3, #0]
 810c6ca:	405a      	eors	r2, r3
 810c6cc:	683b      	ldr	r3, [r7, #0]
 810c6ce:	3308      	adds	r3, #8
 810c6d0:	681b      	ldr	r3, [r3, #0]
 810c6d2:	4013      	ands	r3, r2
 810c6d4:	2b00      	cmp	r3, #0
 810c6d6:	d10d      	bne.n	810c6f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810c6d8:	683b      	ldr	r3, [r7, #0]
 810c6da:	3308      	adds	r3, #8
 810c6dc:	681b      	ldr	r3, [r3, #0]
 810c6de:	43da      	mvns	r2, r3
 810c6e0:	687b      	ldr	r3, [r7, #4]
 810c6e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 810c6e4:	683b      	ldr	r3, [r7, #0]
 810c6e6:	3308      	adds	r3, #8
 810c6e8:	681b      	ldr	r3, [r3, #0]
 810c6ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810c6ec:	429a      	cmp	r2, r3
 810c6ee:	d101      	bne.n	810c6f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 810c6f0:	2301      	movs	r3, #1
 810c6f2:	e000      	b.n	810c6f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 810c6f4:	2300      	movs	r3, #0
  }
}
 810c6f6:	4618      	mov	r0, r3
 810c6f8:	3714      	adds	r7, #20
 810c6fa:	46bd      	mov	sp, r7
 810c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c700:	4770      	bx	lr
	...

0810c704 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 810c704:	b580      	push	{r7, lr}
 810c706:	b084      	sub	sp, #16
 810c708:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 810c70a:	2300      	movs	r3, #0
 810c70c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 810c70e:	4b12      	ldr	r3, [pc, #72]	; (810c758 <ip_reass_tmr+0x54>)
 810c710:	681b      	ldr	r3, [r3, #0]
 810c712:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 810c714:	e018      	b.n	810c748 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 810c716:	68fb      	ldr	r3, [r7, #12]
 810c718:	7fdb      	ldrb	r3, [r3, #31]
 810c71a:	2b00      	cmp	r3, #0
 810c71c:	d00b      	beq.n	810c736 <ip_reass_tmr+0x32>
      r->timer--;
 810c71e:	68fb      	ldr	r3, [r7, #12]
 810c720:	7fdb      	ldrb	r3, [r3, #31]
 810c722:	3b01      	subs	r3, #1
 810c724:	b2da      	uxtb	r2, r3
 810c726:	68fb      	ldr	r3, [r7, #12]
 810c728:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 810c72a:	68fb      	ldr	r3, [r7, #12]
 810c72c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 810c72e:	68fb      	ldr	r3, [r7, #12]
 810c730:	681b      	ldr	r3, [r3, #0]
 810c732:	60fb      	str	r3, [r7, #12]
 810c734:	e008      	b.n	810c748 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 810c736:	68fb      	ldr	r3, [r7, #12]
 810c738:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 810c73a:	68fb      	ldr	r3, [r7, #12]
 810c73c:	681b      	ldr	r3, [r3, #0]
 810c73e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 810c740:	68b9      	ldr	r1, [r7, #8]
 810c742:	6878      	ldr	r0, [r7, #4]
 810c744:	f000 f80a 	bl	810c75c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 810c748:	68fb      	ldr	r3, [r7, #12]
 810c74a:	2b00      	cmp	r3, #0
 810c74c:	d1e3      	bne.n	810c716 <ip_reass_tmr+0x12>
    }
  }
}
 810c74e:	bf00      	nop
 810c750:	bf00      	nop
 810c752:	3710      	adds	r7, #16
 810c754:	46bd      	mov	sp, r7
 810c756:	bd80      	pop	{r7, pc}
 810c758:	100058f0 	.word	0x100058f0

0810c75c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810c75c:	b580      	push	{r7, lr}
 810c75e:	b088      	sub	sp, #32
 810c760:	af00      	add	r7, sp, #0
 810c762:	6078      	str	r0, [r7, #4]
 810c764:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 810c766:	2300      	movs	r3, #0
 810c768:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 810c76a:	683a      	ldr	r2, [r7, #0]
 810c76c:	687b      	ldr	r3, [r7, #4]
 810c76e:	429a      	cmp	r2, r3
 810c770:	d105      	bne.n	810c77e <ip_reass_free_complete_datagram+0x22>
 810c772:	4b45      	ldr	r3, [pc, #276]	; (810c888 <ip_reass_free_complete_datagram+0x12c>)
 810c774:	22ab      	movs	r2, #171	; 0xab
 810c776:	4945      	ldr	r1, [pc, #276]	; (810c88c <ip_reass_free_complete_datagram+0x130>)
 810c778:	4845      	ldr	r0, [pc, #276]	; (810c890 <ip_reass_free_complete_datagram+0x134>)
 810c77a:	f006 fa99 	bl	8112cb0 <iprintf>
  if (prev != NULL) {
 810c77e:	683b      	ldr	r3, [r7, #0]
 810c780:	2b00      	cmp	r3, #0
 810c782:	d00a      	beq.n	810c79a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 810c784:	683b      	ldr	r3, [r7, #0]
 810c786:	681b      	ldr	r3, [r3, #0]
 810c788:	687a      	ldr	r2, [r7, #4]
 810c78a:	429a      	cmp	r2, r3
 810c78c:	d005      	beq.n	810c79a <ip_reass_free_complete_datagram+0x3e>
 810c78e:	4b3e      	ldr	r3, [pc, #248]	; (810c888 <ip_reass_free_complete_datagram+0x12c>)
 810c790:	22ad      	movs	r2, #173	; 0xad
 810c792:	4940      	ldr	r1, [pc, #256]	; (810c894 <ip_reass_free_complete_datagram+0x138>)
 810c794:	483e      	ldr	r0, [pc, #248]	; (810c890 <ip_reass_free_complete_datagram+0x134>)
 810c796:	f006 fa8b 	bl	8112cb0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 810c79a:	687b      	ldr	r3, [r7, #4]
 810c79c:	685b      	ldr	r3, [r3, #4]
 810c79e:	685b      	ldr	r3, [r3, #4]
 810c7a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 810c7a2:	697b      	ldr	r3, [r7, #20]
 810c7a4:	889b      	ldrh	r3, [r3, #4]
 810c7a6:	b29b      	uxth	r3, r3
 810c7a8:	2b00      	cmp	r3, #0
 810c7aa:	d12a      	bne.n	810c802 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 810c7ac:	687b      	ldr	r3, [r7, #4]
 810c7ae:	685b      	ldr	r3, [r3, #4]
 810c7b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 810c7b2:	697b      	ldr	r3, [r7, #20]
 810c7b4:	681a      	ldr	r2, [r3, #0]
 810c7b6:	687b      	ldr	r3, [r7, #4]
 810c7b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 810c7ba:	69bb      	ldr	r3, [r7, #24]
 810c7bc:	6858      	ldr	r0, [r3, #4]
 810c7be:	687b      	ldr	r3, [r7, #4]
 810c7c0:	3308      	adds	r3, #8
 810c7c2:	2214      	movs	r2, #20
 810c7c4:	4619      	mov	r1, r3
 810c7c6:	f005 fd98 	bl	81122fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 810c7ca:	2101      	movs	r1, #1
 810c7cc:	69b8      	ldr	r0, [r7, #24]
 810c7ce:	f7ff fb75 	bl	810bebc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 810c7d2:	69b8      	ldr	r0, [r7, #24]
 810c7d4:	f002 f9b4 	bl	810eb40 <pbuf_clen>
 810c7d8:	4603      	mov	r3, r0
 810c7da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810c7dc:	8bfa      	ldrh	r2, [r7, #30]
 810c7de:	8a7b      	ldrh	r3, [r7, #18]
 810c7e0:	4413      	add	r3, r2
 810c7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c7e6:	db05      	blt.n	810c7f4 <ip_reass_free_complete_datagram+0x98>
 810c7e8:	4b27      	ldr	r3, [pc, #156]	; (810c888 <ip_reass_free_complete_datagram+0x12c>)
 810c7ea:	22bc      	movs	r2, #188	; 0xbc
 810c7ec:	492a      	ldr	r1, [pc, #168]	; (810c898 <ip_reass_free_complete_datagram+0x13c>)
 810c7ee:	4828      	ldr	r0, [pc, #160]	; (810c890 <ip_reass_free_complete_datagram+0x134>)
 810c7f0:	f006 fa5e 	bl	8112cb0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810c7f4:	8bfa      	ldrh	r2, [r7, #30]
 810c7f6:	8a7b      	ldrh	r3, [r7, #18]
 810c7f8:	4413      	add	r3, r2
 810c7fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 810c7fc:	69b8      	ldr	r0, [r7, #24]
 810c7fe:	f002 f911 	bl	810ea24 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 810c802:	687b      	ldr	r3, [r7, #4]
 810c804:	685b      	ldr	r3, [r3, #4]
 810c806:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 810c808:	e01f      	b.n	810c84a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 810c80a:	69bb      	ldr	r3, [r7, #24]
 810c80c:	685b      	ldr	r3, [r3, #4]
 810c80e:	617b      	str	r3, [r7, #20]
    pcur = p;
 810c810:	69bb      	ldr	r3, [r7, #24]
 810c812:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 810c814:	697b      	ldr	r3, [r7, #20]
 810c816:	681b      	ldr	r3, [r3, #0]
 810c818:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 810c81a:	68f8      	ldr	r0, [r7, #12]
 810c81c:	f002 f990 	bl	810eb40 <pbuf_clen>
 810c820:	4603      	mov	r3, r0
 810c822:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810c824:	8bfa      	ldrh	r2, [r7, #30]
 810c826:	8a7b      	ldrh	r3, [r7, #18]
 810c828:	4413      	add	r3, r2
 810c82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c82e:	db05      	blt.n	810c83c <ip_reass_free_complete_datagram+0xe0>
 810c830:	4b15      	ldr	r3, [pc, #84]	; (810c888 <ip_reass_free_complete_datagram+0x12c>)
 810c832:	22cc      	movs	r2, #204	; 0xcc
 810c834:	4918      	ldr	r1, [pc, #96]	; (810c898 <ip_reass_free_complete_datagram+0x13c>)
 810c836:	4816      	ldr	r0, [pc, #88]	; (810c890 <ip_reass_free_complete_datagram+0x134>)
 810c838:	f006 fa3a 	bl	8112cb0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810c83c:	8bfa      	ldrh	r2, [r7, #30]
 810c83e:	8a7b      	ldrh	r3, [r7, #18]
 810c840:	4413      	add	r3, r2
 810c842:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 810c844:	68f8      	ldr	r0, [r7, #12]
 810c846:	f002 f8ed 	bl	810ea24 <pbuf_free>
  while (p != NULL) {
 810c84a:	69bb      	ldr	r3, [r7, #24]
 810c84c:	2b00      	cmp	r3, #0
 810c84e:	d1dc      	bne.n	810c80a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 810c850:	6839      	ldr	r1, [r7, #0]
 810c852:	6878      	ldr	r0, [r7, #4]
 810c854:	f000 f8c2 	bl	810c9dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 810c858:	4b10      	ldr	r3, [pc, #64]	; (810c89c <ip_reass_free_complete_datagram+0x140>)
 810c85a:	881b      	ldrh	r3, [r3, #0]
 810c85c:	8bfa      	ldrh	r2, [r7, #30]
 810c85e:	429a      	cmp	r2, r3
 810c860:	d905      	bls.n	810c86e <ip_reass_free_complete_datagram+0x112>
 810c862:	4b09      	ldr	r3, [pc, #36]	; (810c888 <ip_reass_free_complete_datagram+0x12c>)
 810c864:	22d2      	movs	r2, #210	; 0xd2
 810c866:	490e      	ldr	r1, [pc, #56]	; (810c8a0 <ip_reass_free_complete_datagram+0x144>)
 810c868:	4809      	ldr	r0, [pc, #36]	; (810c890 <ip_reass_free_complete_datagram+0x134>)
 810c86a:	f006 fa21 	bl	8112cb0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 810c86e:	4b0b      	ldr	r3, [pc, #44]	; (810c89c <ip_reass_free_complete_datagram+0x140>)
 810c870:	881a      	ldrh	r2, [r3, #0]
 810c872:	8bfb      	ldrh	r3, [r7, #30]
 810c874:	1ad3      	subs	r3, r2, r3
 810c876:	b29a      	uxth	r2, r3
 810c878:	4b08      	ldr	r3, [pc, #32]	; (810c89c <ip_reass_free_complete_datagram+0x140>)
 810c87a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 810c87c:	8bfb      	ldrh	r3, [r7, #30]
}
 810c87e:	4618      	mov	r0, r3
 810c880:	3720      	adds	r7, #32
 810c882:	46bd      	mov	sp, r7
 810c884:	bd80      	pop	{r7, pc}
 810c886:	bf00      	nop
 810c888:	08115460 	.word	0x08115460
 810c88c:	081154c4 	.word	0x081154c4
 810c890:	081154d0 	.word	0x081154d0
 810c894:	081154f8 	.word	0x081154f8
 810c898:	0811550c 	.word	0x0811550c
 810c89c:	100058f4 	.word	0x100058f4
 810c8a0:	0811552c 	.word	0x0811552c

0810c8a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 810c8a4:	b580      	push	{r7, lr}
 810c8a6:	b08a      	sub	sp, #40	; 0x28
 810c8a8:	af00      	add	r7, sp, #0
 810c8aa:	6078      	str	r0, [r7, #4]
 810c8ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 810c8ae:	2300      	movs	r3, #0
 810c8b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 810c8b2:	2300      	movs	r3, #0
 810c8b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 810c8b6:	2300      	movs	r3, #0
 810c8b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 810c8ba:	2300      	movs	r3, #0
 810c8bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 810c8be:	2300      	movs	r3, #0
 810c8c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 810c8c2:	4b28      	ldr	r3, [pc, #160]	; (810c964 <ip_reass_remove_oldest_datagram+0xc0>)
 810c8c4:	681b      	ldr	r3, [r3, #0]
 810c8c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 810c8c8:	e030      	b.n	810c92c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 810c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c8cc:	695a      	ldr	r2, [r3, #20]
 810c8ce:	687b      	ldr	r3, [r7, #4]
 810c8d0:	68db      	ldr	r3, [r3, #12]
 810c8d2:	429a      	cmp	r2, r3
 810c8d4:	d10c      	bne.n	810c8f0 <ip_reass_remove_oldest_datagram+0x4c>
 810c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c8d8:	699a      	ldr	r2, [r3, #24]
 810c8da:	687b      	ldr	r3, [r7, #4]
 810c8dc:	691b      	ldr	r3, [r3, #16]
 810c8de:	429a      	cmp	r2, r3
 810c8e0:	d106      	bne.n	810c8f0 <ip_reass_remove_oldest_datagram+0x4c>
 810c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c8e4:	899a      	ldrh	r2, [r3, #12]
 810c8e6:	687b      	ldr	r3, [r7, #4]
 810c8e8:	889b      	ldrh	r3, [r3, #4]
 810c8ea:	b29b      	uxth	r3, r3
 810c8ec:	429a      	cmp	r2, r3
 810c8ee:	d014      	beq.n	810c91a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 810c8f0:	693b      	ldr	r3, [r7, #16]
 810c8f2:	3301      	adds	r3, #1
 810c8f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 810c8f6:	6a3b      	ldr	r3, [r7, #32]
 810c8f8:	2b00      	cmp	r3, #0
 810c8fa:	d104      	bne.n	810c906 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 810c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c8fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810c900:	69fb      	ldr	r3, [r7, #28]
 810c902:	61bb      	str	r3, [r7, #24]
 810c904:	e009      	b.n	810c91a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 810c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c908:	7fda      	ldrb	r2, [r3, #31]
 810c90a:	6a3b      	ldr	r3, [r7, #32]
 810c90c:	7fdb      	ldrb	r3, [r3, #31]
 810c90e:	429a      	cmp	r2, r3
 810c910:	d803      	bhi.n	810c91a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 810c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c914:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810c916:	69fb      	ldr	r3, [r7, #28]
 810c918:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 810c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c91c:	681b      	ldr	r3, [r3, #0]
 810c91e:	2b00      	cmp	r3, #0
 810c920:	d001      	beq.n	810c926 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 810c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c924:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 810c926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c928:	681b      	ldr	r3, [r3, #0]
 810c92a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 810c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c92e:	2b00      	cmp	r3, #0
 810c930:	d1cb      	bne.n	810c8ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 810c932:	6a3b      	ldr	r3, [r7, #32]
 810c934:	2b00      	cmp	r3, #0
 810c936:	d008      	beq.n	810c94a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 810c938:	69b9      	ldr	r1, [r7, #24]
 810c93a:	6a38      	ldr	r0, [r7, #32]
 810c93c:	f7ff ff0e 	bl	810c75c <ip_reass_free_complete_datagram>
 810c940:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 810c942:	697a      	ldr	r2, [r7, #20]
 810c944:	68fb      	ldr	r3, [r7, #12]
 810c946:	4413      	add	r3, r2
 810c948:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 810c94a:	697a      	ldr	r2, [r7, #20]
 810c94c:	683b      	ldr	r3, [r7, #0]
 810c94e:	429a      	cmp	r2, r3
 810c950:	da02      	bge.n	810c958 <ip_reass_remove_oldest_datagram+0xb4>
 810c952:	693b      	ldr	r3, [r7, #16]
 810c954:	2b01      	cmp	r3, #1
 810c956:	dcac      	bgt.n	810c8b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 810c958:	697b      	ldr	r3, [r7, #20]
}
 810c95a:	4618      	mov	r0, r3
 810c95c:	3728      	adds	r7, #40	; 0x28
 810c95e:	46bd      	mov	sp, r7
 810c960:	bd80      	pop	{r7, pc}
 810c962:	bf00      	nop
 810c964:	100058f0 	.word	0x100058f0

0810c968 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 810c968:	b580      	push	{r7, lr}
 810c96a:	b084      	sub	sp, #16
 810c96c:	af00      	add	r7, sp, #0
 810c96e:	6078      	str	r0, [r7, #4]
 810c970:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810c972:	2001      	movs	r0, #1
 810c974:	f001 f99c 	bl	810dcb0 <memp_malloc>
 810c978:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 810c97a:	68fb      	ldr	r3, [r7, #12]
 810c97c:	2b00      	cmp	r3, #0
 810c97e:	d110      	bne.n	810c9a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 810c980:	6839      	ldr	r1, [r7, #0]
 810c982:	6878      	ldr	r0, [r7, #4]
 810c984:	f7ff ff8e 	bl	810c8a4 <ip_reass_remove_oldest_datagram>
 810c988:	4602      	mov	r2, r0
 810c98a:	683b      	ldr	r3, [r7, #0]
 810c98c:	4293      	cmp	r3, r2
 810c98e:	dc03      	bgt.n	810c998 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810c990:	2001      	movs	r0, #1
 810c992:	f001 f98d 	bl	810dcb0 <memp_malloc>
 810c996:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 810c998:	68fb      	ldr	r3, [r7, #12]
 810c99a:	2b00      	cmp	r3, #0
 810c99c:	d101      	bne.n	810c9a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 810c99e:	2300      	movs	r3, #0
 810c9a0:	e016      	b.n	810c9d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 810c9a2:	2220      	movs	r2, #32
 810c9a4:	2100      	movs	r1, #0
 810c9a6:	68f8      	ldr	r0, [r7, #12]
 810c9a8:	f005 fcb5 	bl	8112316 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 810c9ac:	68fb      	ldr	r3, [r7, #12]
 810c9ae:	220f      	movs	r2, #15
 810c9b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 810c9b2:	4b09      	ldr	r3, [pc, #36]	; (810c9d8 <ip_reass_enqueue_new_datagram+0x70>)
 810c9b4:	681a      	ldr	r2, [r3, #0]
 810c9b6:	68fb      	ldr	r3, [r7, #12]
 810c9b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 810c9ba:	4a07      	ldr	r2, [pc, #28]	; (810c9d8 <ip_reass_enqueue_new_datagram+0x70>)
 810c9bc:	68fb      	ldr	r3, [r7, #12]
 810c9be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 810c9c0:	68fb      	ldr	r3, [r7, #12]
 810c9c2:	3308      	adds	r3, #8
 810c9c4:	2214      	movs	r2, #20
 810c9c6:	6879      	ldr	r1, [r7, #4]
 810c9c8:	4618      	mov	r0, r3
 810c9ca:	f005 fc96 	bl	81122fa <memcpy>
  return ipr;
 810c9ce:	68fb      	ldr	r3, [r7, #12]
}
 810c9d0:	4618      	mov	r0, r3
 810c9d2:	3710      	adds	r7, #16
 810c9d4:	46bd      	mov	sp, r7
 810c9d6:	bd80      	pop	{r7, pc}
 810c9d8:	100058f0 	.word	0x100058f0

0810c9dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810c9dc:	b580      	push	{r7, lr}
 810c9de:	b082      	sub	sp, #8
 810c9e0:	af00      	add	r7, sp, #0
 810c9e2:	6078      	str	r0, [r7, #4]
 810c9e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 810c9e6:	4b10      	ldr	r3, [pc, #64]	; (810ca28 <ip_reass_dequeue_datagram+0x4c>)
 810c9e8:	681b      	ldr	r3, [r3, #0]
 810c9ea:	687a      	ldr	r2, [r7, #4]
 810c9ec:	429a      	cmp	r2, r3
 810c9ee:	d104      	bne.n	810c9fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 810c9f0:	687b      	ldr	r3, [r7, #4]
 810c9f2:	681b      	ldr	r3, [r3, #0]
 810c9f4:	4a0c      	ldr	r2, [pc, #48]	; (810ca28 <ip_reass_dequeue_datagram+0x4c>)
 810c9f6:	6013      	str	r3, [r2, #0]
 810c9f8:	e00d      	b.n	810ca16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 810c9fa:	683b      	ldr	r3, [r7, #0]
 810c9fc:	2b00      	cmp	r3, #0
 810c9fe:	d106      	bne.n	810ca0e <ip_reass_dequeue_datagram+0x32>
 810ca00:	4b0a      	ldr	r3, [pc, #40]	; (810ca2c <ip_reass_dequeue_datagram+0x50>)
 810ca02:	f240 1245 	movw	r2, #325	; 0x145
 810ca06:	490a      	ldr	r1, [pc, #40]	; (810ca30 <ip_reass_dequeue_datagram+0x54>)
 810ca08:	480a      	ldr	r0, [pc, #40]	; (810ca34 <ip_reass_dequeue_datagram+0x58>)
 810ca0a:	f006 f951 	bl	8112cb0 <iprintf>
    prev->next = ipr->next;
 810ca0e:	687b      	ldr	r3, [r7, #4]
 810ca10:	681a      	ldr	r2, [r3, #0]
 810ca12:	683b      	ldr	r3, [r7, #0]
 810ca14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 810ca16:	6879      	ldr	r1, [r7, #4]
 810ca18:	2001      	movs	r0, #1
 810ca1a:	f001 f9bf 	bl	810dd9c <memp_free>
}
 810ca1e:	bf00      	nop
 810ca20:	3708      	adds	r7, #8
 810ca22:	46bd      	mov	sp, r7
 810ca24:	bd80      	pop	{r7, pc}
 810ca26:	bf00      	nop
 810ca28:	100058f0 	.word	0x100058f0
 810ca2c:	08115460 	.word	0x08115460
 810ca30:	08115550 	.word	0x08115550
 810ca34:	081154d0 	.word	0x081154d0

0810ca38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 810ca38:	b580      	push	{r7, lr}
 810ca3a:	b08c      	sub	sp, #48	; 0x30
 810ca3c:	af00      	add	r7, sp, #0
 810ca3e:	60f8      	str	r0, [r7, #12]
 810ca40:	60b9      	str	r1, [r7, #8]
 810ca42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 810ca44:	2300      	movs	r3, #0
 810ca46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 810ca48:	2301      	movs	r3, #1
 810ca4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 810ca4c:	68bb      	ldr	r3, [r7, #8]
 810ca4e:	685b      	ldr	r3, [r3, #4]
 810ca50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810ca52:	69fb      	ldr	r3, [r7, #28]
 810ca54:	885b      	ldrh	r3, [r3, #2]
 810ca56:	b29b      	uxth	r3, r3
 810ca58:	4618      	mov	r0, r3
 810ca5a:	f7fe f8c7 	bl	810abec <lwip_htons>
 810ca5e:	4603      	mov	r3, r0
 810ca60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 810ca62:	69fb      	ldr	r3, [r7, #28]
 810ca64:	781b      	ldrb	r3, [r3, #0]
 810ca66:	f003 030f 	and.w	r3, r3, #15
 810ca6a:	b2db      	uxtb	r3, r3
 810ca6c:	009b      	lsls	r3, r3, #2
 810ca6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 810ca70:	7e7b      	ldrb	r3, [r7, #25]
 810ca72:	b29b      	uxth	r3, r3
 810ca74:	8b7a      	ldrh	r2, [r7, #26]
 810ca76:	429a      	cmp	r2, r3
 810ca78:	d202      	bcs.n	810ca80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810ca7a:	f04f 33ff 	mov.w	r3, #4294967295
 810ca7e:	e135      	b.n	810ccec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 810ca80:	7e7b      	ldrb	r3, [r7, #25]
 810ca82:	b29b      	uxth	r3, r3
 810ca84:	8b7a      	ldrh	r2, [r7, #26]
 810ca86:	1ad3      	subs	r3, r2, r3
 810ca88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 810ca8a:	69fb      	ldr	r3, [r7, #28]
 810ca8c:	88db      	ldrh	r3, [r3, #6]
 810ca8e:	b29b      	uxth	r3, r3
 810ca90:	4618      	mov	r0, r3
 810ca92:	f7fe f8ab 	bl	810abec <lwip_htons>
 810ca96:	4603      	mov	r3, r0
 810ca98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810ca9c:	b29b      	uxth	r3, r3
 810ca9e:	00db      	lsls	r3, r3, #3
 810caa0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 810caa2:	68bb      	ldr	r3, [r7, #8]
 810caa4:	685b      	ldr	r3, [r3, #4]
 810caa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 810caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810caaa:	2200      	movs	r2, #0
 810caac:	701a      	strb	r2, [r3, #0]
 810caae:	2200      	movs	r2, #0
 810cab0:	705a      	strb	r2, [r3, #1]
 810cab2:	2200      	movs	r2, #0
 810cab4:	709a      	strb	r2, [r3, #2]
 810cab6:	2200      	movs	r2, #0
 810cab8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 810caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cabc:	8afa      	ldrh	r2, [r7, #22]
 810cabe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 810cac0:	8afa      	ldrh	r2, [r7, #22]
 810cac2:	8b7b      	ldrh	r3, [r7, #26]
 810cac4:	4413      	add	r3, r2
 810cac6:	b29a      	uxth	r2, r3
 810cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810caca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 810cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cace:	88db      	ldrh	r3, [r3, #6]
 810cad0:	b29b      	uxth	r3, r3
 810cad2:	8afa      	ldrh	r2, [r7, #22]
 810cad4:	429a      	cmp	r2, r3
 810cad6:	d902      	bls.n	810cade <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810cad8:	f04f 33ff 	mov.w	r3, #4294967295
 810cadc:	e106      	b.n	810ccec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 810cade:	68fb      	ldr	r3, [r7, #12]
 810cae0:	685b      	ldr	r3, [r3, #4]
 810cae2:	627b      	str	r3, [r7, #36]	; 0x24
 810cae4:	e068      	b.n	810cbb8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 810cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cae8:	685b      	ldr	r3, [r3, #4]
 810caea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 810caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810caee:	889b      	ldrh	r3, [r3, #4]
 810caf0:	b29a      	uxth	r2, r3
 810caf2:	693b      	ldr	r3, [r7, #16]
 810caf4:	889b      	ldrh	r3, [r3, #4]
 810caf6:	b29b      	uxth	r3, r3
 810caf8:	429a      	cmp	r2, r3
 810cafa:	d235      	bcs.n	810cb68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 810cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810cb00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 810cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb04:	2b00      	cmp	r3, #0
 810cb06:	d020      	beq.n	810cb4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 810cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb0a:	889b      	ldrh	r3, [r3, #4]
 810cb0c:	b29a      	uxth	r2, r3
 810cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb10:	88db      	ldrh	r3, [r3, #6]
 810cb12:	b29b      	uxth	r3, r3
 810cb14:	429a      	cmp	r2, r3
 810cb16:	d307      	bcc.n	810cb28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 810cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb1a:	88db      	ldrh	r3, [r3, #6]
 810cb1c:	b29a      	uxth	r2, r3
 810cb1e:	693b      	ldr	r3, [r7, #16]
 810cb20:	889b      	ldrh	r3, [r3, #4]
 810cb22:	b29b      	uxth	r3, r3
 810cb24:	429a      	cmp	r2, r3
 810cb26:	d902      	bls.n	810cb2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810cb28:	f04f 33ff 	mov.w	r3, #4294967295
 810cb2c:	e0de      	b.n	810ccec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 810cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb30:	68ba      	ldr	r2, [r7, #8]
 810cb32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 810cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb36:	88db      	ldrh	r3, [r3, #6]
 810cb38:	b29a      	uxth	r2, r3
 810cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb3c:	889b      	ldrh	r3, [r3, #4]
 810cb3e:	b29b      	uxth	r3, r3
 810cb40:	429a      	cmp	r2, r3
 810cb42:	d03d      	beq.n	810cbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810cb44:	2300      	movs	r3, #0
 810cb46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 810cb48:	e03a      	b.n	810cbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 810cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb4c:	88db      	ldrh	r3, [r3, #6]
 810cb4e:	b29a      	uxth	r2, r3
 810cb50:	693b      	ldr	r3, [r7, #16]
 810cb52:	889b      	ldrh	r3, [r3, #4]
 810cb54:	b29b      	uxth	r3, r3
 810cb56:	429a      	cmp	r2, r3
 810cb58:	d902      	bls.n	810cb60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810cb5a:	f04f 33ff 	mov.w	r3, #4294967295
 810cb5e:	e0c5      	b.n	810ccec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 810cb60:	68fb      	ldr	r3, [r7, #12]
 810cb62:	68ba      	ldr	r2, [r7, #8]
 810cb64:	605a      	str	r2, [r3, #4]
      break;
 810cb66:	e02b      	b.n	810cbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 810cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb6a:	889b      	ldrh	r3, [r3, #4]
 810cb6c:	b29a      	uxth	r2, r3
 810cb6e:	693b      	ldr	r3, [r7, #16]
 810cb70:	889b      	ldrh	r3, [r3, #4]
 810cb72:	b29b      	uxth	r3, r3
 810cb74:	429a      	cmp	r2, r3
 810cb76:	d102      	bne.n	810cb7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810cb78:	f04f 33ff 	mov.w	r3, #4294967295
 810cb7c:	e0b6      	b.n	810ccec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 810cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb80:	889b      	ldrh	r3, [r3, #4]
 810cb82:	b29a      	uxth	r2, r3
 810cb84:	693b      	ldr	r3, [r7, #16]
 810cb86:	88db      	ldrh	r3, [r3, #6]
 810cb88:	b29b      	uxth	r3, r3
 810cb8a:	429a      	cmp	r2, r3
 810cb8c:	d202      	bcs.n	810cb94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810cb8e:	f04f 33ff 	mov.w	r3, #4294967295
 810cb92:	e0ab      	b.n	810ccec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 810cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb96:	2b00      	cmp	r3, #0
 810cb98:	d009      	beq.n	810cbae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 810cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb9c:	88db      	ldrh	r3, [r3, #6]
 810cb9e:	b29a      	uxth	r2, r3
 810cba0:	693b      	ldr	r3, [r7, #16]
 810cba2:	889b      	ldrh	r3, [r3, #4]
 810cba4:	b29b      	uxth	r3, r3
 810cba6:	429a      	cmp	r2, r3
 810cba8:	d001      	beq.n	810cbae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810cbaa:	2300      	movs	r3, #0
 810cbac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 810cbae:	693b      	ldr	r3, [r7, #16]
 810cbb0:	681b      	ldr	r3, [r3, #0]
 810cbb2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 810cbb4:	693b      	ldr	r3, [r7, #16]
 810cbb6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 810cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cbba:	2b00      	cmp	r3, #0
 810cbbc:	d193      	bne.n	810cae6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 810cbbe:	e000      	b.n	810cbc2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 810cbc0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 810cbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cbc4:	2b00      	cmp	r3, #0
 810cbc6:	d12d      	bne.n	810cc24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 810cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cbca:	2b00      	cmp	r3, #0
 810cbcc:	d01c      	beq.n	810cc08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 810cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cbd0:	88db      	ldrh	r3, [r3, #6]
 810cbd2:	b29a      	uxth	r2, r3
 810cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cbd6:	889b      	ldrh	r3, [r3, #4]
 810cbd8:	b29b      	uxth	r3, r3
 810cbda:	429a      	cmp	r2, r3
 810cbdc:	d906      	bls.n	810cbec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 810cbde:	4b45      	ldr	r3, [pc, #276]	; (810ccf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810cbe0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 810cbe4:	4944      	ldr	r1, [pc, #272]	; (810ccf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 810cbe6:	4845      	ldr	r0, [pc, #276]	; (810ccfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810cbe8:	f006 f862 	bl	8112cb0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 810cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cbee:	68ba      	ldr	r2, [r7, #8]
 810cbf0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 810cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cbf4:	88db      	ldrh	r3, [r3, #6]
 810cbf6:	b29a      	uxth	r2, r3
 810cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cbfa:	889b      	ldrh	r3, [r3, #4]
 810cbfc:	b29b      	uxth	r3, r3
 810cbfe:	429a      	cmp	r2, r3
 810cc00:	d010      	beq.n	810cc24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 810cc02:	2300      	movs	r3, #0
 810cc04:	623b      	str	r3, [r7, #32]
 810cc06:	e00d      	b.n	810cc24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 810cc08:	68fb      	ldr	r3, [r7, #12]
 810cc0a:	685b      	ldr	r3, [r3, #4]
 810cc0c:	2b00      	cmp	r3, #0
 810cc0e:	d006      	beq.n	810cc1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 810cc10:	4b38      	ldr	r3, [pc, #224]	; (810ccf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810cc12:	f44f 72df 	mov.w	r2, #446	; 0x1be
 810cc16:	493a      	ldr	r1, [pc, #232]	; (810cd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 810cc18:	4838      	ldr	r0, [pc, #224]	; (810ccfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810cc1a:	f006 f849 	bl	8112cb0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 810cc1e:	68fb      	ldr	r3, [r7, #12]
 810cc20:	68ba      	ldr	r2, [r7, #8]
 810cc22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 810cc24:	687b      	ldr	r3, [r7, #4]
 810cc26:	2b00      	cmp	r3, #0
 810cc28:	d105      	bne.n	810cc36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 810cc2a:	68fb      	ldr	r3, [r7, #12]
 810cc2c:	7f9b      	ldrb	r3, [r3, #30]
 810cc2e:	f003 0301 	and.w	r3, r3, #1
 810cc32:	2b00      	cmp	r3, #0
 810cc34:	d059      	beq.n	810ccea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 810cc36:	6a3b      	ldr	r3, [r7, #32]
 810cc38:	2b00      	cmp	r3, #0
 810cc3a:	d04f      	beq.n	810ccdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 810cc3c:	68fb      	ldr	r3, [r7, #12]
 810cc3e:	685b      	ldr	r3, [r3, #4]
 810cc40:	2b00      	cmp	r3, #0
 810cc42:	d006      	beq.n	810cc52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 810cc44:	68fb      	ldr	r3, [r7, #12]
 810cc46:	685b      	ldr	r3, [r3, #4]
 810cc48:	685b      	ldr	r3, [r3, #4]
 810cc4a:	889b      	ldrh	r3, [r3, #4]
 810cc4c:	b29b      	uxth	r3, r3
 810cc4e:	2b00      	cmp	r3, #0
 810cc50:	d002      	beq.n	810cc58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 810cc52:	2300      	movs	r3, #0
 810cc54:	623b      	str	r3, [r7, #32]
 810cc56:	e041      	b.n	810ccdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 810cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cc5a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 810cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cc5e:	681b      	ldr	r3, [r3, #0]
 810cc60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 810cc62:	e012      	b.n	810cc8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 810cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cc66:	685b      	ldr	r3, [r3, #4]
 810cc68:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 810cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cc6c:	88db      	ldrh	r3, [r3, #6]
 810cc6e:	b29a      	uxth	r2, r3
 810cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cc72:	889b      	ldrh	r3, [r3, #4]
 810cc74:	b29b      	uxth	r3, r3
 810cc76:	429a      	cmp	r2, r3
 810cc78:	d002      	beq.n	810cc80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 810cc7a:	2300      	movs	r3, #0
 810cc7c:	623b      	str	r3, [r7, #32]
            break;
 810cc7e:	e007      	b.n	810cc90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 810cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cc82:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 810cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cc86:	681b      	ldr	r3, [r3, #0]
 810cc88:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 810cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cc8c:	2b00      	cmp	r3, #0
 810cc8e:	d1e9      	bne.n	810cc64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 810cc90:	6a3b      	ldr	r3, [r7, #32]
 810cc92:	2b00      	cmp	r3, #0
 810cc94:	d022      	beq.n	810ccdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 810cc96:	68fb      	ldr	r3, [r7, #12]
 810cc98:	685b      	ldr	r3, [r3, #4]
 810cc9a:	2b00      	cmp	r3, #0
 810cc9c:	d106      	bne.n	810ccac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 810cc9e:	4b15      	ldr	r3, [pc, #84]	; (810ccf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810cca0:	f240 12df 	movw	r2, #479	; 0x1df
 810cca4:	4917      	ldr	r1, [pc, #92]	; (810cd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810cca6:	4815      	ldr	r0, [pc, #84]	; (810ccfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810cca8:	f006 f802 	bl	8112cb0 <iprintf>
          LWIP_ASSERT("sanity check",
 810ccac:	68fb      	ldr	r3, [r7, #12]
 810ccae:	685b      	ldr	r3, [r3, #4]
 810ccb0:	685b      	ldr	r3, [r3, #4]
 810ccb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810ccb4:	429a      	cmp	r2, r3
 810ccb6:	d106      	bne.n	810ccc6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 810ccb8:	4b0e      	ldr	r3, [pc, #56]	; (810ccf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810ccba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 810ccbe:	4911      	ldr	r1, [pc, #68]	; (810cd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810ccc0:	480e      	ldr	r0, [pc, #56]	; (810ccfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810ccc2:	f005 fff5 	bl	8112cb0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 810ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ccc8:	681b      	ldr	r3, [r3, #0]
 810ccca:	2b00      	cmp	r3, #0
 810cccc:	d006      	beq.n	810ccdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 810ccce:	4b09      	ldr	r3, [pc, #36]	; (810ccf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810ccd0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 810ccd4:	490c      	ldr	r1, [pc, #48]	; (810cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 810ccd6:	4809      	ldr	r0, [pc, #36]	; (810ccfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810ccd8:	f005 ffea 	bl	8112cb0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 810ccdc:	6a3b      	ldr	r3, [r7, #32]
 810ccde:	2b00      	cmp	r3, #0
 810cce0:	bf14      	ite	ne
 810cce2:	2301      	movne	r3, #1
 810cce4:	2300      	moveq	r3, #0
 810cce6:	b2db      	uxtb	r3, r3
 810cce8:	e000      	b.n	810ccec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 810ccea:	2300      	movs	r3, #0
}
 810ccec:	4618      	mov	r0, r3
 810ccee:	3730      	adds	r7, #48	; 0x30
 810ccf0:	46bd      	mov	sp, r7
 810ccf2:	bd80      	pop	{r7, pc}
 810ccf4:	08115460 	.word	0x08115460
 810ccf8:	0811556c 	.word	0x0811556c
 810ccfc:	081154d0 	.word	0x081154d0
 810cd00:	0811558c 	.word	0x0811558c
 810cd04:	081155c4 	.word	0x081155c4
 810cd08:	081155d4 	.word	0x081155d4

0810cd0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 810cd0c:	b580      	push	{r7, lr}
 810cd0e:	b08e      	sub	sp, #56	; 0x38
 810cd10:	af00      	add	r7, sp, #0
 810cd12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 810cd14:	687b      	ldr	r3, [r7, #4]
 810cd16:	685b      	ldr	r3, [r3, #4]
 810cd18:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 810cd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd1c:	781b      	ldrb	r3, [r3, #0]
 810cd1e:	f003 030f 	and.w	r3, r3, #15
 810cd22:	b2db      	uxtb	r3, r3
 810cd24:	009b      	lsls	r3, r3, #2
 810cd26:	b2db      	uxtb	r3, r3
 810cd28:	2b14      	cmp	r3, #20
 810cd2a:	f040 8167 	bne.w	810cffc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 810cd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd30:	88db      	ldrh	r3, [r3, #6]
 810cd32:	b29b      	uxth	r3, r3
 810cd34:	4618      	mov	r0, r3
 810cd36:	f7fd ff59 	bl	810abec <lwip_htons>
 810cd3a:	4603      	mov	r3, r0
 810cd3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810cd40:	b29b      	uxth	r3, r3
 810cd42:	00db      	lsls	r3, r3, #3
 810cd44:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd48:	885b      	ldrh	r3, [r3, #2]
 810cd4a:	b29b      	uxth	r3, r3
 810cd4c:	4618      	mov	r0, r3
 810cd4e:	f7fd ff4d 	bl	810abec <lwip_htons>
 810cd52:	4603      	mov	r3, r0
 810cd54:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 810cd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd58:	781b      	ldrb	r3, [r3, #0]
 810cd5a:	f003 030f 	and.w	r3, r3, #15
 810cd5e:	b2db      	uxtb	r3, r3
 810cd60:	009b      	lsls	r3, r3, #2
 810cd62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 810cd66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 810cd6a:	b29b      	uxth	r3, r3
 810cd6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810cd6e:	429a      	cmp	r2, r3
 810cd70:	f0c0 8146 	bcc.w	810d000 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 810cd74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 810cd78:	b29b      	uxth	r3, r3
 810cd7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810cd7c:	1ad3      	subs	r3, r2, r3
 810cd7e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 810cd80:	6878      	ldr	r0, [r7, #4]
 810cd82:	f001 fedd 	bl	810eb40 <pbuf_clen>
 810cd86:	4603      	mov	r3, r0
 810cd88:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 810cd8a:	4b9f      	ldr	r3, [pc, #636]	; (810d008 <ip4_reass+0x2fc>)
 810cd8c:	881b      	ldrh	r3, [r3, #0]
 810cd8e:	461a      	mov	r2, r3
 810cd90:	8c3b      	ldrh	r3, [r7, #32]
 810cd92:	4413      	add	r3, r2
 810cd94:	2b0a      	cmp	r3, #10
 810cd96:	dd10      	ble.n	810cdba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810cd98:	8c3b      	ldrh	r3, [r7, #32]
 810cd9a:	4619      	mov	r1, r3
 810cd9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810cd9e:	f7ff fd81 	bl	810c8a4 <ip_reass_remove_oldest_datagram>
 810cda2:	4603      	mov	r3, r0
 810cda4:	2b00      	cmp	r3, #0
 810cda6:	f000 812d 	beq.w	810d004 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 810cdaa:	4b97      	ldr	r3, [pc, #604]	; (810d008 <ip4_reass+0x2fc>)
 810cdac:	881b      	ldrh	r3, [r3, #0]
 810cdae:	461a      	mov	r2, r3
 810cdb0:	8c3b      	ldrh	r3, [r7, #32]
 810cdb2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810cdb4:	2b0a      	cmp	r3, #10
 810cdb6:	f300 8125 	bgt.w	810d004 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810cdba:	4b94      	ldr	r3, [pc, #592]	; (810d00c <ip4_reass+0x300>)
 810cdbc:	681b      	ldr	r3, [r3, #0]
 810cdbe:	633b      	str	r3, [r7, #48]	; 0x30
 810cdc0:	e015      	b.n	810cdee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 810cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cdc4:	695a      	ldr	r2, [r3, #20]
 810cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cdc8:	68db      	ldr	r3, [r3, #12]
 810cdca:	429a      	cmp	r2, r3
 810cdcc:	d10c      	bne.n	810cde8 <ip4_reass+0xdc>
 810cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cdd0:	699a      	ldr	r2, [r3, #24]
 810cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cdd4:	691b      	ldr	r3, [r3, #16]
 810cdd6:	429a      	cmp	r2, r3
 810cdd8:	d106      	bne.n	810cde8 <ip4_reass+0xdc>
 810cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cddc:	899a      	ldrh	r2, [r3, #12]
 810cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cde0:	889b      	ldrh	r3, [r3, #4]
 810cde2:	b29b      	uxth	r3, r3
 810cde4:	429a      	cmp	r2, r3
 810cde6:	d006      	beq.n	810cdf6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cdea:	681b      	ldr	r3, [r3, #0]
 810cdec:	633b      	str	r3, [r7, #48]	; 0x30
 810cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cdf0:	2b00      	cmp	r3, #0
 810cdf2:	d1e6      	bne.n	810cdc2 <ip4_reass+0xb6>
 810cdf4:	e000      	b.n	810cdf8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 810cdf6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 810cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cdfa:	2b00      	cmp	r3, #0
 810cdfc:	d109      	bne.n	810ce12 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 810cdfe:	8c3b      	ldrh	r3, [r7, #32]
 810ce00:	4619      	mov	r1, r3
 810ce02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810ce04:	f7ff fdb0 	bl	810c968 <ip_reass_enqueue_new_datagram>
 810ce08:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 810ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ce0c:	2b00      	cmp	r3, #0
 810ce0e:	d11c      	bne.n	810ce4a <ip4_reass+0x13e>
      goto nullreturn;
 810ce10:	e109      	b.n	810d026 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ce14:	88db      	ldrh	r3, [r3, #6]
 810ce16:	b29b      	uxth	r3, r3
 810ce18:	4618      	mov	r0, r3
 810ce1a:	f7fd fee7 	bl	810abec <lwip_htons>
 810ce1e:	4603      	mov	r3, r0
 810ce20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810ce24:	2b00      	cmp	r3, #0
 810ce26:	d110      	bne.n	810ce4a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 810ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ce2a:	89db      	ldrh	r3, [r3, #14]
 810ce2c:	4618      	mov	r0, r3
 810ce2e:	f7fd fedd 	bl	810abec <lwip_htons>
 810ce32:	4603      	mov	r3, r0
 810ce34:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810ce38:	2b00      	cmp	r3, #0
 810ce3a:	d006      	beq.n	810ce4a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 810ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ce3e:	3308      	adds	r3, #8
 810ce40:	2214      	movs	r2, #20
 810ce42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810ce44:	4618      	mov	r0, r3
 810ce46:	f005 fa58 	bl	81122fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 810ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ce4c:	88db      	ldrh	r3, [r3, #6]
 810ce4e:	b29b      	uxth	r3, r3
 810ce50:	f003 0320 	and.w	r3, r3, #32
 810ce54:	2b00      	cmp	r3, #0
 810ce56:	bf0c      	ite	eq
 810ce58:	2301      	moveq	r3, #1
 810ce5a:	2300      	movne	r3, #0
 810ce5c:	b2db      	uxtb	r3, r3
 810ce5e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 810ce60:	69fb      	ldr	r3, [r7, #28]
 810ce62:	2b00      	cmp	r3, #0
 810ce64:	d00e      	beq.n	810ce84 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 810ce66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810ce68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810ce6a:	4413      	add	r3, r2
 810ce6c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 810ce6e:	8b7a      	ldrh	r2, [r7, #26]
 810ce70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810ce72:	429a      	cmp	r2, r3
 810ce74:	f0c0 80a0 	bcc.w	810cfb8 <ip4_reass+0x2ac>
 810ce78:	8b7b      	ldrh	r3, [r7, #26]
 810ce7a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 810ce7e:	4293      	cmp	r3, r2
 810ce80:	f200 809a 	bhi.w	810cfb8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 810ce84:	69fa      	ldr	r2, [r7, #28]
 810ce86:	6879      	ldr	r1, [r7, #4]
 810ce88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810ce8a:	f7ff fdd5 	bl	810ca38 <ip_reass_chain_frag_into_datagram_and_validate>
 810ce8e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 810ce90:	697b      	ldr	r3, [r7, #20]
 810ce92:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ce96:	f000 8091 	beq.w	810cfbc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 810ce9a:	4b5b      	ldr	r3, [pc, #364]	; (810d008 <ip4_reass+0x2fc>)
 810ce9c:	881a      	ldrh	r2, [r3, #0]
 810ce9e:	8c3b      	ldrh	r3, [r7, #32]
 810cea0:	4413      	add	r3, r2
 810cea2:	b29a      	uxth	r2, r3
 810cea4:	4b58      	ldr	r3, [pc, #352]	; (810d008 <ip4_reass+0x2fc>)
 810cea6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 810cea8:	69fb      	ldr	r3, [r7, #28]
 810ceaa:	2b00      	cmp	r3, #0
 810ceac:	d00d      	beq.n	810ceca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 810ceae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810ceb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810ceb2:	4413      	add	r3, r2
 810ceb4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 810ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ceb8:	8a7a      	ldrh	r2, [r7, #18]
 810ceba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 810cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cebe:	7f9b      	ldrb	r3, [r3, #30]
 810cec0:	f043 0301 	orr.w	r3, r3, #1
 810cec4:	b2da      	uxtb	r2, r3
 810cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cec8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 810ceca:	697b      	ldr	r3, [r7, #20]
 810cecc:	2b01      	cmp	r3, #1
 810cece:	d171      	bne.n	810cfb4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 810ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ced2:	8b9b      	ldrh	r3, [r3, #28]
 810ced4:	3314      	adds	r3, #20
 810ced6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 810ced8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ceda:	685b      	ldr	r3, [r3, #4]
 810cedc:	685b      	ldr	r3, [r3, #4]
 810cede:	681b      	ldr	r3, [r3, #0]
 810cee0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 810cee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cee4:	685b      	ldr	r3, [r3, #4]
 810cee6:	685b      	ldr	r3, [r3, #4]
 810cee8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 810ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ceec:	3308      	adds	r3, #8
 810ceee:	2214      	movs	r2, #20
 810cef0:	4619      	mov	r1, r3
 810cef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810cef4:	f005 fa01 	bl	81122fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 810cef8:	8a3b      	ldrh	r3, [r7, #16]
 810cefa:	4618      	mov	r0, r3
 810cefc:	f7fd fe76 	bl	810abec <lwip_htons>
 810cf00:	4603      	mov	r3, r0
 810cf02:	461a      	mov	r2, r3
 810cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf06:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 810cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf0a:	2200      	movs	r2, #0
 810cf0c:	719a      	strb	r2, [r3, #6]
 810cf0e:	2200      	movs	r2, #0
 810cf10:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 810cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf14:	2200      	movs	r2, #0
 810cf16:	729a      	strb	r2, [r3, #10]
 810cf18:	2200      	movs	r2, #0
 810cf1a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 810cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cf1e:	685b      	ldr	r3, [r3, #4]
 810cf20:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 810cf22:	e00d      	b.n	810cf40 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 810cf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810cf26:	685b      	ldr	r3, [r3, #4]
 810cf28:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 810cf2a:	2114      	movs	r1, #20
 810cf2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810cf2e:	f001 fcf3 	bl	810e918 <pbuf_remove_header>
      pbuf_cat(p, r);
 810cf32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810cf34:	6878      	ldr	r0, [r7, #4]
 810cf36:	f001 fe43 	bl	810ebc0 <pbuf_cat>
      r = iprh->next_pbuf;
 810cf3a:	68fb      	ldr	r3, [r7, #12]
 810cf3c:	681b      	ldr	r3, [r3, #0]
 810cf3e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 810cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810cf42:	2b00      	cmp	r3, #0
 810cf44:	d1ee      	bne.n	810cf24 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 810cf46:	4b31      	ldr	r3, [pc, #196]	; (810d00c <ip4_reass+0x300>)
 810cf48:	681b      	ldr	r3, [r3, #0]
 810cf4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810cf4c:	429a      	cmp	r2, r3
 810cf4e:	d102      	bne.n	810cf56 <ip4_reass+0x24a>
      ipr_prev = NULL;
 810cf50:	2300      	movs	r3, #0
 810cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
 810cf54:	e010      	b.n	810cf78 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810cf56:	4b2d      	ldr	r3, [pc, #180]	; (810d00c <ip4_reass+0x300>)
 810cf58:	681b      	ldr	r3, [r3, #0]
 810cf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810cf5c:	e007      	b.n	810cf6e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 810cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cf60:	681b      	ldr	r3, [r3, #0]
 810cf62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810cf64:	429a      	cmp	r2, r3
 810cf66:	d006      	beq.n	810cf76 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cf6a:	681b      	ldr	r3, [r3, #0]
 810cf6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cf70:	2b00      	cmp	r3, #0
 810cf72:	d1f4      	bne.n	810cf5e <ip4_reass+0x252>
 810cf74:	e000      	b.n	810cf78 <ip4_reass+0x26c>
          break;
 810cf76:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 810cf78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810cf7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810cf7c:	f7ff fd2e 	bl	810c9dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 810cf80:	6878      	ldr	r0, [r7, #4]
 810cf82:	f001 fddd 	bl	810eb40 <pbuf_clen>
 810cf86:	4603      	mov	r3, r0
 810cf88:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 810cf8a:	4b1f      	ldr	r3, [pc, #124]	; (810d008 <ip4_reass+0x2fc>)
 810cf8c:	881b      	ldrh	r3, [r3, #0]
 810cf8e:	8c3a      	ldrh	r2, [r7, #32]
 810cf90:	429a      	cmp	r2, r3
 810cf92:	d906      	bls.n	810cfa2 <ip4_reass+0x296>
 810cf94:	4b1e      	ldr	r3, [pc, #120]	; (810d010 <ip4_reass+0x304>)
 810cf96:	f240 229b 	movw	r2, #667	; 0x29b
 810cf9a:	491e      	ldr	r1, [pc, #120]	; (810d014 <ip4_reass+0x308>)
 810cf9c:	481e      	ldr	r0, [pc, #120]	; (810d018 <ip4_reass+0x30c>)
 810cf9e:	f005 fe87 	bl	8112cb0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 810cfa2:	4b19      	ldr	r3, [pc, #100]	; (810d008 <ip4_reass+0x2fc>)
 810cfa4:	881a      	ldrh	r2, [r3, #0]
 810cfa6:	8c3b      	ldrh	r3, [r7, #32]
 810cfa8:	1ad3      	subs	r3, r2, r3
 810cfaa:	b29a      	uxth	r2, r3
 810cfac:	4b16      	ldr	r3, [pc, #88]	; (810d008 <ip4_reass+0x2fc>)
 810cfae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 810cfb0:	687b      	ldr	r3, [r7, #4]
 810cfb2:	e03c      	b.n	810d02e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 810cfb4:	2300      	movs	r3, #0
 810cfb6:	e03a      	b.n	810d02e <ip4_reass+0x322>
      goto nullreturn_ipr;
 810cfb8:	bf00      	nop
 810cfba:	e000      	b.n	810cfbe <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 810cfbc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 810cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cfc0:	2b00      	cmp	r3, #0
 810cfc2:	d106      	bne.n	810cfd2 <ip4_reass+0x2c6>
 810cfc4:	4b12      	ldr	r3, [pc, #72]	; (810d010 <ip4_reass+0x304>)
 810cfc6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 810cfca:	4914      	ldr	r1, [pc, #80]	; (810d01c <ip4_reass+0x310>)
 810cfcc:	4812      	ldr	r0, [pc, #72]	; (810d018 <ip4_reass+0x30c>)
 810cfce:	f005 fe6f 	bl	8112cb0 <iprintf>
  if (ipr->p == NULL) {
 810cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cfd4:	685b      	ldr	r3, [r3, #4]
 810cfd6:	2b00      	cmp	r3, #0
 810cfd8:	d124      	bne.n	810d024 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 810cfda:	4b0c      	ldr	r3, [pc, #48]	; (810d00c <ip4_reass+0x300>)
 810cfdc:	681b      	ldr	r3, [r3, #0]
 810cfde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810cfe0:	429a      	cmp	r2, r3
 810cfe2:	d006      	beq.n	810cff2 <ip4_reass+0x2e6>
 810cfe4:	4b0a      	ldr	r3, [pc, #40]	; (810d010 <ip4_reass+0x304>)
 810cfe6:	f240 22ab 	movw	r2, #683	; 0x2ab
 810cfea:	490d      	ldr	r1, [pc, #52]	; (810d020 <ip4_reass+0x314>)
 810cfec:	480a      	ldr	r0, [pc, #40]	; (810d018 <ip4_reass+0x30c>)
 810cfee:	f005 fe5f 	bl	8112cb0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 810cff2:	2100      	movs	r1, #0
 810cff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810cff6:	f7ff fcf1 	bl	810c9dc <ip_reass_dequeue_datagram>
 810cffa:	e014      	b.n	810d026 <ip4_reass+0x31a>
    goto nullreturn;
 810cffc:	bf00      	nop
 810cffe:	e012      	b.n	810d026 <ip4_reass+0x31a>
    goto nullreturn;
 810d000:	bf00      	nop
 810d002:	e010      	b.n	810d026 <ip4_reass+0x31a>
      goto nullreturn;
 810d004:	bf00      	nop
 810d006:	e00e      	b.n	810d026 <ip4_reass+0x31a>
 810d008:	100058f4 	.word	0x100058f4
 810d00c:	100058f0 	.word	0x100058f0
 810d010:	08115460 	.word	0x08115460
 810d014:	081155f8 	.word	0x081155f8
 810d018:	081154d0 	.word	0x081154d0
 810d01c:	08115614 	.word	0x08115614
 810d020:	08115620 	.word	0x08115620
  }

nullreturn:
 810d024:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 810d026:	6878      	ldr	r0, [r7, #4]
 810d028:	f001 fcfc 	bl	810ea24 <pbuf_free>
  return NULL;
 810d02c:	2300      	movs	r3, #0
}
 810d02e:	4618      	mov	r0, r3
 810d030:	3738      	adds	r7, #56	; 0x38
 810d032:	46bd      	mov	sp, r7
 810d034:	bd80      	pop	{r7, pc}
 810d036:	bf00      	nop

0810d038 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 810d038:	b580      	push	{r7, lr}
 810d03a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 810d03c:	2002      	movs	r0, #2
 810d03e:	f000 fe37 	bl	810dcb0 <memp_malloc>
 810d042:	4603      	mov	r3, r0
}
 810d044:	4618      	mov	r0, r3
 810d046:	bd80      	pop	{r7, pc}

0810d048 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 810d048:	b580      	push	{r7, lr}
 810d04a:	b082      	sub	sp, #8
 810d04c:	af00      	add	r7, sp, #0
 810d04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 810d050:	687b      	ldr	r3, [r7, #4]
 810d052:	2b00      	cmp	r3, #0
 810d054:	d106      	bne.n	810d064 <ip_frag_free_pbuf_custom_ref+0x1c>
 810d056:	4b07      	ldr	r3, [pc, #28]	; (810d074 <ip_frag_free_pbuf_custom_ref+0x2c>)
 810d058:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 810d05c:	4906      	ldr	r1, [pc, #24]	; (810d078 <ip_frag_free_pbuf_custom_ref+0x30>)
 810d05e:	4807      	ldr	r0, [pc, #28]	; (810d07c <ip_frag_free_pbuf_custom_ref+0x34>)
 810d060:	f005 fe26 	bl	8112cb0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 810d064:	6879      	ldr	r1, [r7, #4]
 810d066:	2002      	movs	r0, #2
 810d068:	f000 fe98 	bl	810dd9c <memp_free>
}
 810d06c:	bf00      	nop
 810d06e:	3708      	adds	r7, #8
 810d070:	46bd      	mov	sp, r7
 810d072:	bd80      	pop	{r7, pc}
 810d074:	08115460 	.word	0x08115460
 810d078:	08115640 	.word	0x08115640
 810d07c:	081154d0 	.word	0x081154d0

0810d080 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 810d080:	b580      	push	{r7, lr}
 810d082:	b084      	sub	sp, #16
 810d084:	af00      	add	r7, sp, #0
 810d086:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 810d088:	687b      	ldr	r3, [r7, #4]
 810d08a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 810d08c:	68fb      	ldr	r3, [r7, #12]
 810d08e:	2b00      	cmp	r3, #0
 810d090:	d106      	bne.n	810d0a0 <ipfrag_free_pbuf_custom+0x20>
 810d092:	4b11      	ldr	r3, [pc, #68]	; (810d0d8 <ipfrag_free_pbuf_custom+0x58>)
 810d094:	f240 22ce 	movw	r2, #718	; 0x2ce
 810d098:	4910      	ldr	r1, [pc, #64]	; (810d0dc <ipfrag_free_pbuf_custom+0x5c>)
 810d09a:	4811      	ldr	r0, [pc, #68]	; (810d0e0 <ipfrag_free_pbuf_custom+0x60>)
 810d09c:	f005 fe08 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 810d0a0:	68fa      	ldr	r2, [r7, #12]
 810d0a2:	687b      	ldr	r3, [r7, #4]
 810d0a4:	429a      	cmp	r2, r3
 810d0a6:	d006      	beq.n	810d0b6 <ipfrag_free_pbuf_custom+0x36>
 810d0a8:	4b0b      	ldr	r3, [pc, #44]	; (810d0d8 <ipfrag_free_pbuf_custom+0x58>)
 810d0aa:	f240 22cf 	movw	r2, #719	; 0x2cf
 810d0ae:	490d      	ldr	r1, [pc, #52]	; (810d0e4 <ipfrag_free_pbuf_custom+0x64>)
 810d0b0:	480b      	ldr	r0, [pc, #44]	; (810d0e0 <ipfrag_free_pbuf_custom+0x60>)
 810d0b2:	f005 fdfd 	bl	8112cb0 <iprintf>
  if (pcr->original != NULL) {
 810d0b6:	68fb      	ldr	r3, [r7, #12]
 810d0b8:	695b      	ldr	r3, [r3, #20]
 810d0ba:	2b00      	cmp	r3, #0
 810d0bc:	d004      	beq.n	810d0c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 810d0be:	68fb      	ldr	r3, [r7, #12]
 810d0c0:	695b      	ldr	r3, [r3, #20]
 810d0c2:	4618      	mov	r0, r3
 810d0c4:	f001 fcae 	bl	810ea24 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 810d0c8:	68f8      	ldr	r0, [r7, #12]
 810d0ca:	f7ff ffbd 	bl	810d048 <ip_frag_free_pbuf_custom_ref>
}
 810d0ce:	bf00      	nop
 810d0d0:	3710      	adds	r7, #16
 810d0d2:	46bd      	mov	sp, r7
 810d0d4:	bd80      	pop	{r7, pc}
 810d0d6:	bf00      	nop
 810d0d8:	08115460 	.word	0x08115460
 810d0dc:	0811564c 	.word	0x0811564c
 810d0e0:	081154d0 	.word	0x081154d0
 810d0e4:	08115658 	.word	0x08115658

0810d0e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 810d0e8:	b580      	push	{r7, lr}
 810d0ea:	b094      	sub	sp, #80	; 0x50
 810d0ec:	af02      	add	r7, sp, #8
 810d0ee:	60f8      	str	r0, [r7, #12]
 810d0f0:	60b9      	str	r1, [r7, #8]
 810d0f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 810d0f4:	2300      	movs	r3, #0
 810d0f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 810d0fa:	68bb      	ldr	r3, [r7, #8]
 810d0fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810d0fe:	3b14      	subs	r3, #20
 810d100:	2b00      	cmp	r3, #0
 810d102:	da00      	bge.n	810d106 <ip4_frag+0x1e>
 810d104:	3307      	adds	r3, #7
 810d106:	10db      	asrs	r3, r3, #3
 810d108:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 810d10a:	2314      	movs	r3, #20
 810d10c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 810d10e:	68fb      	ldr	r3, [r7, #12]
 810d110:	685b      	ldr	r3, [r3, #4]
 810d112:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 810d114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d116:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 810d118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d11a:	781b      	ldrb	r3, [r3, #0]
 810d11c:	f003 030f 	and.w	r3, r3, #15
 810d120:	b2db      	uxtb	r3, r3
 810d122:	009b      	lsls	r3, r3, #2
 810d124:	b2db      	uxtb	r3, r3
 810d126:	2b14      	cmp	r3, #20
 810d128:	d002      	beq.n	810d130 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 810d12a:	f06f 0305 	mvn.w	r3, #5
 810d12e:	e110      	b.n	810d352 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 810d130:	68fb      	ldr	r3, [r7, #12]
 810d132:	895b      	ldrh	r3, [r3, #10]
 810d134:	2b13      	cmp	r3, #19
 810d136:	d809      	bhi.n	810d14c <ip4_frag+0x64>
 810d138:	4b88      	ldr	r3, [pc, #544]	; (810d35c <ip4_frag+0x274>)
 810d13a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 810d13e:	4988      	ldr	r1, [pc, #544]	; (810d360 <ip4_frag+0x278>)
 810d140:	4888      	ldr	r0, [pc, #544]	; (810d364 <ip4_frag+0x27c>)
 810d142:	f005 fdb5 	bl	8112cb0 <iprintf>
 810d146:	f06f 0305 	mvn.w	r3, #5
 810d14a:	e102      	b.n	810d352 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 810d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d14e:	88db      	ldrh	r3, [r3, #6]
 810d150:	b29b      	uxth	r3, r3
 810d152:	4618      	mov	r0, r3
 810d154:	f7fd fd4a 	bl	810abec <lwip_htons>
 810d158:	4603      	mov	r3, r0
 810d15a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 810d15c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 810d15e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810d162:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 810d166:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 810d168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810d16c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 810d16e:	68fb      	ldr	r3, [r7, #12]
 810d170:	891b      	ldrh	r3, [r3, #8]
 810d172:	3b14      	subs	r3, #20
 810d174:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 810d178:	e0e1      	b.n	810d33e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 810d17a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 810d17c:	00db      	lsls	r3, r3, #3
 810d17e:	b29b      	uxth	r3, r3
 810d180:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 810d184:	4293      	cmp	r3, r2
 810d186:	bf28      	it	cs
 810d188:	4613      	movcs	r3, r2
 810d18a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 810d18c:	f44f 7220 	mov.w	r2, #640	; 0x280
 810d190:	2114      	movs	r1, #20
 810d192:	200e      	movs	r0, #14
 810d194:	f001 f964 	bl	810e460 <pbuf_alloc>
 810d198:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 810d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d19c:	2b00      	cmp	r3, #0
 810d19e:	f000 80d5 	beq.w	810d34c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 810d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d1a4:	895b      	ldrh	r3, [r3, #10]
 810d1a6:	2b13      	cmp	r3, #19
 810d1a8:	d806      	bhi.n	810d1b8 <ip4_frag+0xd0>
 810d1aa:	4b6c      	ldr	r3, [pc, #432]	; (810d35c <ip4_frag+0x274>)
 810d1ac:	f44f 7249 	mov.w	r2, #804	; 0x324
 810d1b0:	496d      	ldr	r1, [pc, #436]	; (810d368 <ip4_frag+0x280>)
 810d1b2:	486c      	ldr	r0, [pc, #432]	; (810d364 <ip4_frag+0x27c>)
 810d1b4:	f005 fd7c 	bl	8112cb0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 810d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d1ba:	685b      	ldr	r3, [r3, #4]
 810d1bc:	2214      	movs	r2, #20
 810d1be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810d1c0:	4618      	mov	r0, r3
 810d1c2:	f005 f89a 	bl	81122fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 810d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d1c8:	685b      	ldr	r3, [r3, #4]
 810d1ca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 810d1cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 810d1ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 810d1d2:	e064      	b.n	810d29e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 810d1d4:	68fb      	ldr	r3, [r7, #12]
 810d1d6:	895a      	ldrh	r2, [r3, #10]
 810d1d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 810d1da:	1ad3      	subs	r3, r2, r3
 810d1dc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 810d1de:	68fb      	ldr	r3, [r7, #12]
 810d1e0:	895b      	ldrh	r3, [r3, #10]
 810d1e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 810d1e4:	429a      	cmp	r2, r3
 810d1e6:	d906      	bls.n	810d1f6 <ip4_frag+0x10e>
 810d1e8:	4b5c      	ldr	r3, [pc, #368]	; (810d35c <ip4_frag+0x274>)
 810d1ea:	f240 322d 	movw	r2, #813	; 0x32d
 810d1ee:	495f      	ldr	r1, [pc, #380]	; (810d36c <ip4_frag+0x284>)
 810d1f0:	485c      	ldr	r0, [pc, #368]	; (810d364 <ip4_frag+0x27c>)
 810d1f2:	f005 fd5d 	bl	8112cb0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 810d1f6:	8bfa      	ldrh	r2, [r7, #30]
 810d1f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 810d1fc:	4293      	cmp	r3, r2
 810d1fe:	bf28      	it	cs
 810d200:	4613      	movcs	r3, r2
 810d202:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 810d206:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 810d20a:	2b00      	cmp	r3, #0
 810d20c:	d105      	bne.n	810d21a <ip4_frag+0x132>
        poff = 0;
 810d20e:	2300      	movs	r3, #0
 810d210:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 810d212:	68fb      	ldr	r3, [r7, #12]
 810d214:	681b      	ldr	r3, [r3, #0]
 810d216:	60fb      	str	r3, [r7, #12]
        continue;
 810d218:	e041      	b.n	810d29e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 810d21a:	f7ff ff0d 	bl	810d038 <ip_frag_alloc_pbuf_custom_ref>
 810d21e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 810d220:	69bb      	ldr	r3, [r7, #24]
 810d222:	2b00      	cmp	r3, #0
 810d224:	d103      	bne.n	810d22e <ip4_frag+0x146>
        pbuf_free(rambuf);
 810d226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810d228:	f001 fbfc 	bl	810ea24 <pbuf_free>
        goto memerr;
 810d22c:	e08f      	b.n	810d34e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810d22e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 810d230:	68fb      	ldr	r3, [r7, #12]
 810d232:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810d234:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 810d236:	4413      	add	r3, r2
 810d238:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 810d23c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 810d240:	9201      	str	r2, [sp, #4]
 810d242:	9300      	str	r3, [sp, #0]
 810d244:	4603      	mov	r3, r0
 810d246:	2241      	movs	r2, #65	; 0x41
 810d248:	2000      	movs	r0, #0
 810d24a:	f001 fa31 	bl	810e6b0 <pbuf_alloced_custom>
 810d24e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 810d250:	697b      	ldr	r3, [r7, #20]
 810d252:	2b00      	cmp	r3, #0
 810d254:	d106      	bne.n	810d264 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 810d256:	69b8      	ldr	r0, [r7, #24]
 810d258:	f7ff fef6 	bl	810d048 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 810d25c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810d25e:	f001 fbe1 	bl	810ea24 <pbuf_free>
        goto memerr;
 810d262:	e074      	b.n	810d34e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 810d264:	68f8      	ldr	r0, [r7, #12]
 810d266:	f001 fc83 	bl	810eb70 <pbuf_ref>
      pcr->original = p;
 810d26a:	69bb      	ldr	r3, [r7, #24]
 810d26c:	68fa      	ldr	r2, [r7, #12]
 810d26e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 810d270:	69bb      	ldr	r3, [r7, #24]
 810d272:	4a3f      	ldr	r2, [pc, #252]	; (810d370 <ip4_frag+0x288>)
 810d274:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 810d276:	6979      	ldr	r1, [r7, #20]
 810d278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810d27a:	f001 fca1 	bl	810ebc0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 810d27e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 810d282:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 810d286:	1ad3      	subs	r3, r2, r3
 810d288:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 810d28c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 810d290:	2b00      	cmp	r3, #0
 810d292:	d004      	beq.n	810d29e <ip4_frag+0x1b6>
        poff = 0;
 810d294:	2300      	movs	r3, #0
 810d296:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 810d298:	68fb      	ldr	r3, [r7, #12]
 810d29a:	681b      	ldr	r3, [r3, #0]
 810d29c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 810d29e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 810d2a2:	2b00      	cmp	r3, #0
 810d2a4:	d196      	bne.n	810d1d4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 810d2a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 810d2a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 810d2ac:	4413      	add	r3, r2
 810d2ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 810d2b0:	68bb      	ldr	r3, [r7, #8]
 810d2b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810d2b4:	f1a3 0213 	sub.w	r2, r3, #19
 810d2b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 810d2bc:	429a      	cmp	r2, r3
 810d2be:	bfcc      	ite	gt
 810d2c0:	2301      	movgt	r3, #1
 810d2c2:	2300      	movle	r3, #0
 810d2c4:	b2db      	uxtb	r3, r3
 810d2c6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 810d2c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 810d2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810d2d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 810d2d2:	6a3b      	ldr	r3, [r7, #32]
 810d2d4:	2b00      	cmp	r3, #0
 810d2d6:	d002      	beq.n	810d2de <ip4_frag+0x1f6>
 810d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d2da:	2b00      	cmp	r3, #0
 810d2dc:	d003      	beq.n	810d2e6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 810d2de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 810d2e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 810d2e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 810d2e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 810d2e8:	4618      	mov	r0, r3
 810d2ea:	f7fd fc7f 	bl	810abec <lwip_htons>
 810d2ee:	4603      	mov	r3, r0
 810d2f0:	461a      	mov	r2, r3
 810d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d2f4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 810d2f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 810d2f8:	3314      	adds	r3, #20
 810d2fa:	b29b      	uxth	r3, r3
 810d2fc:	4618      	mov	r0, r3
 810d2fe:	f7fd fc75 	bl	810abec <lwip_htons>
 810d302:	4603      	mov	r3, r0
 810d304:	461a      	mov	r2, r3
 810d306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d308:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 810d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d30c:	2200      	movs	r2, #0
 810d30e:	729a      	strb	r2, [r3, #10]
 810d310:	2200      	movs	r2, #0
 810d312:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 810d314:	68bb      	ldr	r3, [r7, #8]
 810d316:	695b      	ldr	r3, [r3, #20]
 810d318:	687a      	ldr	r2, [r7, #4]
 810d31a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810d31c:	68b8      	ldr	r0, [r7, #8]
 810d31e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 810d320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810d322:	f001 fb7f 	bl	810ea24 <pbuf_free>
    left = (u16_t)(left - fragsize);
 810d326:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 810d32a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 810d32c:	1ad3      	subs	r3, r2, r3
 810d32e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 810d332:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 810d336:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 810d338:	4413      	add	r3, r2
 810d33a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 810d33e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 810d342:	2b00      	cmp	r3, #0
 810d344:	f47f af19 	bne.w	810d17a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 810d348:	2300      	movs	r3, #0
 810d34a:	e002      	b.n	810d352 <ip4_frag+0x26a>
      goto memerr;
 810d34c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 810d34e:	f04f 33ff 	mov.w	r3, #4294967295
}
 810d352:	4618      	mov	r0, r3
 810d354:	3748      	adds	r7, #72	; 0x48
 810d356:	46bd      	mov	sp, r7
 810d358:	bd80      	pop	{r7, pc}
 810d35a:	bf00      	nop
 810d35c:	08115460 	.word	0x08115460
 810d360:	08115664 	.word	0x08115664
 810d364:	081154d0 	.word	0x081154d0
 810d368:	08115680 	.word	0x08115680
 810d36c:	081156a0 	.word	0x081156a0
 810d370:	0810d081 	.word	0x0810d081

0810d374 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 810d374:	b480      	push	{r7}
 810d376:	b083      	sub	sp, #12
 810d378:	af00      	add	r7, sp, #0
 810d37a:	4603      	mov	r3, r0
 810d37c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 810d37e:	4b05      	ldr	r3, [pc, #20]	; (810d394 <ptr_to_mem+0x20>)
 810d380:	681a      	ldr	r2, [r3, #0]
 810d382:	88fb      	ldrh	r3, [r7, #6]
 810d384:	4413      	add	r3, r2
}
 810d386:	4618      	mov	r0, r3
 810d388:	370c      	adds	r7, #12
 810d38a:	46bd      	mov	sp, r7
 810d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d390:	4770      	bx	lr
 810d392:	bf00      	nop
 810d394:	100058f8 	.word	0x100058f8

0810d398 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 810d398:	b480      	push	{r7}
 810d39a:	b083      	sub	sp, #12
 810d39c:	af00      	add	r7, sp, #0
 810d39e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 810d3a0:	4b05      	ldr	r3, [pc, #20]	; (810d3b8 <mem_to_ptr+0x20>)
 810d3a2:	681b      	ldr	r3, [r3, #0]
 810d3a4:	687a      	ldr	r2, [r7, #4]
 810d3a6:	1ad3      	subs	r3, r2, r3
 810d3a8:	b29b      	uxth	r3, r3
}
 810d3aa:	4618      	mov	r0, r3
 810d3ac:	370c      	adds	r7, #12
 810d3ae:	46bd      	mov	sp, r7
 810d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3b4:	4770      	bx	lr
 810d3b6:	bf00      	nop
 810d3b8:	100058f8 	.word	0x100058f8

0810d3bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 810d3bc:	b590      	push	{r4, r7, lr}
 810d3be:	b085      	sub	sp, #20
 810d3c0:	af00      	add	r7, sp, #0
 810d3c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 810d3c4:	4b47      	ldr	r3, [pc, #284]	; (810d4e4 <plug_holes+0x128>)
 810d3c6:	681b      	ldr	r3, [r3, #0]
 810d3c8:	687a      	ldr	r2, [r7, #4]
 810d3ca:	429a      	cmp	r2, r3
 810d3cc:	d206      	bcs.n	810d3dc <plug_holes+0x20>
 810d3ce:	4b46      	ldr	r3, [pc, #280]	; (810d4e8 <plug_holes+0x12c>)
 810d3d0:	f240 12df 	movw	r2, #479	; 0x1df
 810d3d4:	4945      	ldr	r1, [pc, #276]	; (810d4ec <plug_holes+0x130>)
 810d3d6:	4846      	ldr	r0, [pc, #280]	; (810d4f0 <plug_holes+0x134>)
 810d3d8:	f005 fc6a 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 810d3dc:	4b45      	ldr	r3, [pc, #276]	; (810d4f4 <plug_holes+0x138>)
 810d3de:	681b      	ldr	r3, [r3, #0]
 810d3e0:	687a      	ldr	r2, [r7, #4]
 810d3e2:	429a      	cmp	r2, r3
 810d3e4:	d306      	bcc.n	810d3f4 <plug_holes+0x38>
 810d3e6:	4b40      	ldr	r3, [pc, #256]	; (810d4e8 <plug_holes+0x12c>)
 810d3e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 810d3ec:	4942      	ldr	r1, [pc, #264]	; (810d4f8 <plug_holes+0x13c>)
 810d3ee:	4840      	ldr	r0, [pc, #256]	; (810d4f0 <plug_holes+0x134>)
 810d3f0:	f005 fc5e 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 810d3f4:	687b      	ldr	r3, [r7, #4]
 810d3f6:	791b      	ldrb	r3, [r3, #4]
 810d3f8:	2b00      	cmp	r3, #0
 810d3fa:	d006      	beq.n	810d40a <plug_holes+0x4e>
 810d3fc:	4b3a      	ldr	r3, [pc, #232]	; (810d4e8 <plug_holes+0x12c>)
 810d3fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 810d402:	493e      	ldr	r1, [pc, #248]	; (810d4fc <plug_holes+0x140>)
 810d404:	483a      	ldr	r0, [pc, #232]	; (810d4f0 <plug_holes+0x134>)
 810d406:	f005 fc53 	bl	8112cb0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 810d40a:	687b      	ldr	r3, [r7, #4]
 810d40c:	881b      	ldrh	r3, [r3, #0]
 810d40e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d412:	4293      	cmp	r3, r2
 810d414:	d906      	bls.n	810d424 <plug_holes+0x68>
 810d416:	4b34      	ldr	r3, [pc, #208]	; (810d4e8 <plug_holes+0x12c>)
 810d418:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 810d41c:	4938      	ldr	r1, [pc, #224]	; (810d500 <plug_holes+0x144>)
 810d41e:	4834      	ldr	r0, [pc, #208]	; (810d4f0 <plug_holes+0x134>)
 810d420:	f005 fc46 	bl	8112cb0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 810d424:	687b      	ldr	r3, [r7, #4]
 810d426:	881b      	ldrh	r3, [r3, #0]
 810d428:	4618      	mov	r0, r3
 810d42a:	f7ff ffa3 	bl	810d374 <ptr_to_mem>
 810d42e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 810d430:	687a      	ldr	r2, [r7, #4]
 810d432:	68fb      	ldr	r3, [r7, #12]
 810d434:	429a      	cmp	r2, r3
 810d436:	d025      	beq.n	810d484 <plug_holes+0xc8>
 810d438:	68fb      	ldr	r3, [r7, #12]
 810d43a:	791b      	ldrb	r3, [r3, #4]
 810d43c:	2b00      	cmp	r3, #0
 810d43e:	d121      	bne.n	810d484 <plug_holes+0xc8>
 810d440:	4b2c      	ldr	r3, [pc, #176]	; (810d4f4 <plug_holes+0x138>)
 810d442:	681b      	ldr	r3, [r3, #0]
 810d444:	68fa      	ldr	r2, [r7, #12]
 810d446:	429a      	cmp	r2, r3
 810d448:	d01c      	beq.n	810d484 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 810d44a:	4b2e      	ldr	r3, [pc, #184]	; (810d504 <plug_holes+0x148>)
 810d44c:	681b      	ldr	r3, [r3, #0]
 810d44e:	68fa      	ldr	r2, [r7, #12]
 810d450:	429a      	cmp	r2, r3
 810d452:	d102      	bne.n	810d45a <plug_holes+0x9e>
      lfree = mem;
 810d454:	4a2b      	ldr	r2, [pc, #172]	; (810d504 <plug_holes+0x148>)
 810d456:	687b      	ldr	r3, [r7, #4]
 810d458:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 810d45a:	68fb      	ldr	r3, [r7, #12]
 810d45c:	881a      	ldrh	r2, [r3, #0]
 810d45e:	687b      	ldr	r3, [r7, #4]
 810d460:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 810d462:	68fb      	ldr	r3, [r7, #12]
 810d464:	881b      	ldrh	r3, [r3, #0]
 810d466:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d46a:	4293      	cmp	r3, r2
 810d46c:	d00a      	beq.n	810d484 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 810d46e:	68fb      	ldr	r3, [r7, #12]
 810d470:	881b      	ldrh	r3, [r3, #0]
 810d472:	4618      	mov	r0, r3
 810d474:	f7ff ff7e 	bl	810d374 <ptr_to_mem>
 810d478:	4604      	mov	r4, r0
 810d47a:	6878      	ldr	r0, [r7, #4]
 810d47c:	f7ff ff8c 	bl	810d398 <mem_to_ptr>
 810d480:	4603      	mov	r3, r0
 810d482:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 810d484:	687b      	ldr	r3, [r7, #4]
 810d486:	885b      	ldrh	r3, [r3, #2]
 810d488:	4618      	mov	r0, r3
 810d48a:	f7ff ff73 	bl	810d374 <ptr_to_mem>
 810d48e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 810d490:	68ba      	ldr	r2, [r7, #8]
 810d492:	687b      	ldr	r3, [r7, #4]
 810d494:	429a      	cmp	r2, r3
 810d496:	d020      	beq.n	810d4da <plug_holes+0x11e>
 810d498:	68bb      	ldr	r3, [r7, #8]
 810d49a:	791b      	ldrb	r3, [r3, #4]
 810d49c:	2b00      	cmp	r3, #0
 810d49e:	d11c      	bne.n	810d4da <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 810d4a0:	4b18      	ldr	r3, [pc, #96]	; (810d504 <plug_holes+0x148>)
 810d4a2:	681b      	ldr	r3, [r3, #0]
 810d4a4:	687a      	ldr	r2, [r7, #4]
 810d4a6:	429a      	cmp	r2, r3
 810d4a8:	d102      	bne.n	810d4b0 <plug_holes+0xf4>
      lfree = pmem;
 810d4aa:	4a16      	ldr	r2, [pc, #88]	; (810d504 <plug_holes+0x148>)
 810d4ac:	68bb      	ldr	r3, [r7, #8]
 810d4ae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 810d4b0:	687b      	ldr	r3, [r7, #4]
 810d4b2:	881a      	ldrh	r2, [r3, #0]
 810d4b4:	68bb      	ldr	r3, [r7, #8]
 810d4b6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 810d4b8:	687b      	ldr	r3, [r7, #4]
 810d4ba:	881b      	ldrh	r3, [r3, #0]
 810d4bc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d4c0:	4293      	cmp	r3, r2
 810d4c2:	d00a      	beq.n	810d4da <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 810d4c4:	687b      	ldr	r3, [r7, #4]
 810d4c6:	881b      	ldrh	r3, [r3, #0]
 810d4c8:	4618      	mov	r0, r3
 810d4ca:	f7ff ff53 	bl	810d374 <ptr_to_mem>
 810d4ce:	4604      	mov	r4, r0
 810d4d0:	68b8      	ldr	r0, [r7, #8]
 810d4d2:	f7ff ff61 	bl	810d398 <mem_to_ptr>
 810d4d6:	4603      	mov	r3, r0
 810d4d8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 810d4da:	bf00      	nop
 810d4dc:	3714      	adds	r7, #20
 810d4de:	46bd      	mov	sp, r7
 810d4e0:	bd90      	pop	{r4, r7, pc}
 810d4e2:	bf00      	nop
 810d4e4:	100058f8 	.word	0x100058f8
 810d4e8:	081156b0 	.word	0x081156b0
 810d4ec:	08115708 	.word	0x08115708
 810d4f0:	08115720 	.word	0x08115720
 810d4f4:	100058fc 	.word	0x100058fc
 810d4f8:	08115748 	.word	0x08115748
 810d4fc:	08115764 	.word	0x08115764
 810d500:	08115780 	.word	0x08115780
 810d504:	10005904 	.word	0x10005904

0810d508 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 810d508:	b580      	push	{r7, lr}
 810d50a:	b082      	sub	sp, #8
 810d50c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 810d50e:	4b1d      	ldr	r3, [pc, #116]	; (810d584 <mem_init+0x7c>)
 810d510:	4a1d      	ldr	r2, [pc, #116]	; (810d588 <mem_init+0x80>)
 810d512:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 810d514:	4b1b      	ldr	r3, [pc, #108]	; (810d584 <mem_init+0x7c>)
 810d516:	681b      	ldr	r3, [r3, #0]
 810d518:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 810d51a:	687b      	ldr	r3, [r7, #4]
 810d51c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d520:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 810d522:	687b      	ldr	r3, [r7, #4]
 810d524:	2200      	movs	r2, #0
 810d526:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 810d528:	687b      	ldr	r3, [r7, #4]
 810d52a:	2200      	movs	r2, #0
 810d52c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 810d52e:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 810d532:	f7ff ff1f 	bl	810d374 <ptr_to_mem>
 810d536:	4603      	mov	r3, r0
 810d538:	4a14      	ldr	r2, [pc, #80]	; (810d58c <mem_init+0x84>)
 810d53a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 810d53c:	4b13      	ldr	r3, [pc, #76]	; (810d58c <mem_init+0x84>)
 810d53e:	681b      	ldr	r3, [r3, #0]
 810d540:	2201      	movs	r2, #1
 810d542:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 810d544:	4b11      	ldr	r3, [pc, #68]	; (810d58c <mem_init+0x84>)
 810d546:	681b      	ldr	r3, [r3, #0]
 810d548:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d54c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 810d54e:	4b0f      	ldr	r3, [pc, #60]	; (810d58c <mem_init+0x84>)
 810d550:	681b      	ldr	r3, [r3, #0]
 810d552:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d556:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 810d558:	4b0a      	ldr	r3, [pc, #40]	; (810d584 <mem_init+0x7c>)
 810d55a:	681b      	ldr	r3, [r3, #0]
 810d55c:	4a0c      	ldr	r2, [pc, #48]	; (810d590 <mem_init+0x88>)
 810d55e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 810d560:	480c      	ldr	r0, [pc, #48]	; (810d594 <mem_init+0x8c>)
 810d562:	f001 fd99 	bl	810f098 <sys_mutex_new>
 810d566:	4603      	mov	r3, r0
 810d568:	2b00      	cmp	r3, #0
 810d56a:	d006      	beq.n	810d57a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 810d56c:	4b0a      	ldr	r3, [pc, #40]	; (810d598 <mem_init+0x90>)
 810d56e:	f240 221f 	movw	r2, #543	; 0x21f
 810d572:	490a      	ldr	r1, [pc, #40]	; (810d59c <mem_init+0x94>)
 810d574:	480a      	ldr	r0, [pc, #40]	; (810d5a0 <mem_init+0x98>)
 810d576:	f005 fb9b 	bl	8112cb0 <iprintf>
  }
}
 810d57a:	bf00      	nop
 810d57c:	3708      	adds	r7, #8
 810d57e:	46bd      	mov	sp, r7
 810d580:	bd80      	pop	{r7, pc}
 810d582:	bf00      	nop
 810d584:	100058f8 	.word	0x100058f8
 810d588:	30044000 	.word	0x30044000
 810d58c:	100058fc 	.word	0x100058fc
 810d590:	10005904 	.word	0x10005904
 810d594:	10005900 	.word	0x10005900
 810d598:	081156b0 	.word	0x081156b0
 810d59c:	081157ac 	.word	0x081157ac
 810d5a0:	08115720 	.word	0x08115720

0810d5a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 810d5a4:	b580      	push	{r7, lr}
 810d5a6:	b086      	sub	sp, #24
 810d5a8:	af00      	add	r7, sp, #0
 810d5aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 810d5ac:	6878      	ldr	r0, [r7, #4]
 810d5ae:	f7ff fef3 	bl	810d398 <mem_to_ptr>
 810d5b2:	4603      	mov	r3, r0
 810d5b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 810d5b6:	687b      	ldr	r3, [r7, #4]
 810d5b8:	881b      	ldrh	r3, [r3, #0]
 810d5ba:	4618      	mov	r0, r3
 810d5bc:	f7ff feda 	bl	810d374 <ptr_to_mem>
 810d5c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 810d5c2:	687b      	ldr	r3, [r7, #4]
 810d5c4:	885b      	ldrh	r3, [r3, #2]
 810d5c6:	4618      	mov	r0, r3
 810d5c8:	f7ff fed4 	bl	810d374 <ptr_to_mem>
 810d5cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810d5ce:	687b      	ldr	r3, [r7, #4]
 810d5d0:	881b      	ldrh	r3, [r3, #0]
 810d5d2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d5d6:	4293      	cmp	r3, r2
 810d5d8:	d819      	bhi.n	810d60e <mem_link_valid+0x6a>
 810d5da:	687b      	ldr	r3, [r7, #4]
 810d5dc:	885b      	ldrh	r3, [r3, #2]
 810d5de:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d5e2:	4293      	cmp	r3, r2
 810d5e4:	d813      	bhi.n	810d60e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810d5e6:	687b      	ldr	r3, [r7, #4]
 810d5e8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810d5ea:	8afa      	ldrh	r2, [r7, #22]
 810d5ec:	429a      	cmp	r2, r3
 810d5ee:	d004      	beq.n	810d5fa <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810d5f0:	68fb      	ldr	r3, [r7, #12]
 810d5f2:	881b      	ldrh	r3, [r3, #0]
 810d5f4:	8afa      	ldrh	r2, [r7, #22]
 810d5f6:	429a      	cmp	r2, r3
 810d5f8:	d109      	bne.n	810d60e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810d5fa:	4b08      	ldr	r3, [pc, #32]	; (810d61c <mem_link_valid+0x78>)
 810d5fc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810d5fe:	693a      	ldr	r2, [r7, #16]
 810d600:	429a      	cmp	r2, r3
 810d602:	d006      	beq.n	810d612 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810d604:	693b      	ldr	r3, [r7, #16]
 810d606:	885b      	ldrh	r3, [r3, #2]
 810d608:	8afa      	ldrh	r2, [r7, #22]
 810d60a:	429a      	cmp	r2, r3
 810d60c:	d001      	beq.n	810d612 <mem_link_valid+0x6e>
    return 0;
 810d60e:	2300      	movs	r3, #0
 810d610:	e000      	b.n	810d614 <mem_link_valid+0x70>
  }
  return 1;
 810d612:	2301      	movs	r3, #1
}
 810d614:	4618      	mov	r0, r3
 810d616:	3718      	adds	r7, #24
 810d618:	46bd      	mov	sp, r7
 810d61a:	bd80      	pop	{r7, pc}
 810d61c:	100058fc 	.word	0x100058fc

0810d620 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 810d620:	b580      	push	{r7, lr}
 810d622:	b088      	sub	sp, #32
 810d624:	af00      	add	r7, sp, #0
 810d626:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 810d628:	687b      	ldr	r3, [r7, #4]
 810d62a:	2b00      	cmp	r3, #0
 810d62c:	d070      	beq.n	810d710 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 810d62e:	687b      	ldr	r3, [r7, #4]
 810d630:	f003 0303 	and.w	r3, r3, #3
 810d634:	2b00      	cmp	r3, #0
 810d636:	d00d      	beq.n	810d654 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 810d638:	4b37      	ldr	r3, [pc, #220]	; (810d718 <mem_free+0xf8>)
 810d63a:	f240 2273 	movw	r2, #627	; 0x273
 810d63e:	4937      	ldr	r1, [pc, #220]	; (810d71c <mem_free+0xfc>)
 810d640:	4837      	ldr	r0, [pc, #220]	; (810d720 <mem_free+0x100>)
 810d642:	f005 fb35 	bl	8112cb0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810d646:	f001 fd85 	bl	810f154 <sys_arch_protect>
 810d64a:	60f8      	str	r0, [r7, #12]
 810d64c:	68f8      	ldr	r0, [r7, #12]
 810d64e:	f001 fd8f 	bl	810f170 <sys_arch_unprotect>
    return;
 810d652:	e05e      	b.n	810d712 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810d654:	687b      	ldr	r3, [r7, #4]
 810d656:	3b08      	subs	r3, #8
 810d658:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 810d65a:	4b32      	ldr	r3, [pc, #200]	; (810d724 <mem_free+0x104>)
 810d65c:	681b      	ldr	r3, [r3, #0]
 810d65e:	69fa      	ldr	r2, [r7, #28]
 810d660:	429a      	cmp	r2, r3
 810d662:	d306      	bcc.n	810d672 <mem_free+0x52>
 810d664:	687b      	ldr	r3, [r7, #4]
 810d666:	f103 020c 	add.w	r2, r3, #12
 810d66a:	4b2f      	ldr	r3, [pc, #188]	; (810d728 <mem_free+0x108>)
 810d66c:	681b      	ldr	r3, [r3, #0]
 810d66e:	429a      	cmp	r2, r3
 810d670:	d90d      	bls.n	810d68e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 810d672:	4b29      	ldr	r3, [pc, #164]	; (810d718 <mem_free+0xf8>)
 810d674:	f240 227f 	movw	r2, #639	; 0x27f
 810d678:	492c      	ldr	r1, [pc, #176]	; (810d72c <mem_free+0x10c>)
 810d67a:	4829      	ldr	r0, [pc, #164]	; (810d720 <mem_free+0x100>)
 810d67c:	f005 fb18 	bl	8112cb0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810d680:	f001 fd68 	bl	810f154 <sys_arch_protect>
 810d684:	6138      	str	r0, [r7, #16]
 810d686:	6938      	ldr	r0, [r7, #16]
 810d688:	f001 fd72 	bl	810f170 <sys_arch_unprotect>
    return;
 810d68c:	e041      	b.n	810d712 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 810d68e:	4828      	ldr	r0, [pc, #160]	; (810d730 <mem_free+0x110>)
 810d690:	f001 fd1e 	bl	810f0d0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 810d694:	69fb      	ldr	r3, [r7, #28]
 810d696:	791b      	ldrb	r3, [r3, #4]
 810d698:	2b00      	cmp	r3, #0
 810d69a:	d110      	bne.n	810d6be <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 810d69c:	4b1e      	ldr	r3, [pc, #120]	; (810d718 <mem_free+0xf8>)
 810d69e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 810d6a2:	4924      	ldr	r1, [pc, #144]	; (810d734 <mem_free+0x114>)
 810d6a4:	481e      	ldr	r0, [pc, #120]	; (810d720 <mem_free+0x100>)
 810d6a6:	f005 fb03 	bl	8112cb0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 810d6aa:	4821      	ldr	r0, [pc, #132]	; (810d730 <mem_free+0x110>)
 810d6ac:	f001 fd1f 	bl	810f0ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810d6b0:	f001 fd50 	bl	810f154 <sys_arch_protect>
 810d6b4:	6178      	str	r0, [r7, #20]
 810d6b6:	6978      	ldr	r0, [r7, #20]
 810d6b8:	f001 fd5a 	bl	810f170 <sys_arch_unprotect>
    return;
 810d6bc:	e029      	b.n	810d712 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 810d6be:	69f8      	ldr	r0, [r7, #28]
 810d6c0:	f7ff ff70 	bl	810d5a4 <mem_link_valid>
 810d6c4:	4603      	mov	r3, r0
 810d6c6:	2b00      	cmp	r3, #0
 810d6c8:	d110      	bne.n	810d6ec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 810d6ca:	4b13      	ldr	r3, [pc, #76]	; (810d718 <mem_free+0xf8>)
 810d6cc:	f240 2295 	movw	r2, #661	; 0x295
 810d6d0:	4919      	ldr	r1, [pc, #100]	; (810d738 <mem_free+0x118>)
 810d6d2:	4813      	ldr	r0, [pc, #76]	; (810d720 <mem_free+0x100>)
 810d6d4:	f005 faec 	bl	8112cb0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 810d6d8:	4815      	ldr	r0, [pc, #84]	; (810d730 <mem_free+0x110>)
 810d6da:	f001 fd08 	bl	810f0ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810d6de:	f001 fd39 	bl	810f154 <sys_arch_protect>
 810d6e2:	61b8      	str	r0, [r7, #24]
 810d6e4:	69b8      	ldr	r0, [r7, #24]
 810d6e6:	f001 fd43 	bl	810f170 <sys_arch_unprotect>
    return;
 810d6ea:	e012      	b.n	810d712 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 810d6ec:	69fb      	ldr	r3, [r7, #28]
 810d6ee:	2200      	movs	r2, #0
 810d6f0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 810d6f2:	4b12      	ldr	r3, [pc, #72]	; (810d73c <mem_free+0x11c>)
 810d6f4:	681b      	ldr	r3, [r3, #0]
 810d6f6:	69fa      	ldr	r2, [r7, #28]
 810d6f8:	429a      	cmp	r2, r3
 810d6fa:	d202      	bcs.n	810d702 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 810d6fc:	4a0f      	ldr	r2, [pc, #60]	; (810d73c <mem_free+0x11c>)
 810d6fe:	69fb      	ldr	r3, [r7, #28]
 810d700:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 810d702:	69f8      	ldr	r0, [r7, #28]
 810d704:	f7ff fe5a 	bl	810d3bc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 810d708:	4809      	ldr	r0, [pc, #36]	; (810d730 <mem_free+0x110>)
 810d70a:	f001 fcf0 	bl	810f0ee <sys_mutex_unlock>
 810d70e:	e000      	b.n	810d712 <mem_free+0xf2>
    return;
 810d710:	bf00      	nop
}
 810d712:	3720      	adds	r7, #32
 810d714:	46bd      	mov	sp, r7
 810d716:	bd80      	pop	{r7, pc}
 810d718:	081156b0 	.word	0x081156b0
 810d71c:	081157c8 	.word	0x081157c8
 810d720:	08115720 	.word	0x08115720
 810d724:	100058f8 	.word	0x100058f8
 810d728:	100058fc 	.word	0x100058fc
 810d72c:	081157ec 	.word	0x081157ec
 810d730:	10005900 	.word	0x10005900
 810d734:	08115808 	.word	0x08115808
 810d738:	08115830 	.word	0x08115830
 810d73c:	10005904 	.word	0x10005904

0810d740 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 810d740:	b580      	push	{r7, lr}
 810d742:	b088      	sub	sp, #32
 810d744:	af00      	add	r7, sp, #0
 810d746:	6078      	str	r0, [r7, #4]
 810d748:	460b      	mov	r3, r1
 810d74a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 810d74c:	887b      	ldrh	r3, [r7, #2]
 810d74e:	3303      	adds	r3, #3
 810d750:	b29b      	uxth	r3, r3
 810d752:	f023 0303 	bic.w	r3, r3, #3
 810d756:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 810d758:	8bfb      	ldrh	r3, [r7, #30]
 810d75a:	2b0b      	cmp	r3, #11
 810d75c:	d801      	bhi.n	810d762 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 810d75e:	230c      	movs	r3, #12
 810d760:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 810d762:	8bfb      	ldrh	r3, [r7, #30]
 810d764:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d768:	4293      	cmp	r3, r2
 810d76a:	d803      	bhi.n	810d774 <mem_trim+0x34>
 810d76c:	8bfa      	ldrh	r2, [r7, #30]
 810d76e:	887b      	ldrh	r3, [r7, #2]
 810d770:	429a      	cmp	r2, r3
 810d772:	d201      	bcs.n	810d778 <mem_trim+0x38>
    return NULL;
 810d774:	2300      	movs	r3, #0
 810d776:	e0dc      	b.n	810d932 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 810d778:	4b70      	ldr	r3, [pc, #448]	; (810d93c <mem_trim+0x1fc>)
 810d77a:	681b      	ldr	r3, [r3, #0]
 810d77c:	687a      	ldr	r2, [r7, #4]
 810d77e:	429a      	cmp	r2, r3
 810d780:	d304      	bcc.n	810d78c <mem_trim+0x4c>
 810d782:	4b6f      	ldr	r3, [pc, #444]	; (810d940 <mem_trim+0x200>)
 810d784:	681b      	ldr	r3, [r3, #0]
 810d786:	687a      	ldr	r2, [r7, #4]
 810d788:	429a      	cmp	r2, r3
 810d78a:	d306      	bcc.n	810d79a <mem_trim+0x5a>
 810d78c:	4b6d      	ldr	r3, [pc, #436]	; (810d944 <mem_trim+0x204>)
 810d78e:	f240 22d1 	movw	r2, #721	; 0x2d1
 810d792:	496d      	ldr	r1, [pc, #436]	; (810d948 <mem_trim+0x208>)
 810d794:	486d      	ldr	r0, [pc, #436]	; (810d94c <mem_trim+0x20c>)
 810d796:	f005 fa8b 	bl	8112cb0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 810d79a:	4b68      	ldr	r3, [pc, #416]	; (810d93c <mem_trim+0x1fc>)
 810d79c:	681b      	ldr	r3, [r3, #0]
 810d79e:	687a      	ldr	r2, [r7, #4]
 810d7a0:	429a      	cmp	r2, r3
 810d7a2:	d304      	bcc.n	810d7ae <mem_trim+0x6e>
 810d7a4:	4b66      	ldr	r3, [pc, #408]	; (810d940 <mem_trim+0x200>)
 810d7a6:	681b      	ldr	r3, [r3, #0]
 810d7a8:	687a      	ldr	r2, [r7, #4]
 810d7aa:	429a      	cmp	r2, r3
 810d7ac:	d307      	bcc.n	810d7be <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810d7ae:	f001 fcd1 	bl	810f154 <sys_arch_protect>
 810d7b2:	60b8      	str	r0, [r7, #8]
 810d7b4:	68b8      	ldr	r0, [r7, #8]
 810d7b6:	f001 fcdb 	bl	810f170 <sys_arch_unprotect>
    return rmem;
 810d7ba:	687b      	ldr	r3, [r7, #4]
 810d7bc:	e0b9      	b.n	810d932 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810d7be:	687b      	ldr	r3, [r7, #4]
 810d7c0:	3b08      	subs	r3, #8
 810d7c2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 810d7c4:	69b8      	ldr	r0, [r7, #24]
 810d7c6:	f7ff fde7 	bl	810d398 <mem_to_ptr>
 810d7ca:	4603      	mov	r3, r0
 810d7cc:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 810d7ce:	69bb      	ldr	r3, [r7, #24]
 810d7d0:	881a      	ldrh	r2, [r3, #0]
 810d7d2:	8afb      	ldrh	r3, [r7, #22]
 810d7d4:	1ad3      	subs	r3, r2, r3
 810d7d6:	b29b      	uxth	r3, r3
 810d7d8:	3b08      	subs	r3, #8
 810d7da:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 810d7dc:	8bfa      	ldrh	r2, [r7, #30]
 810d7de:	8abb      	ldrh	r3, [r7, #20]
 810d7e0:	429a      	cmp	r2, r3
 810d7e2:	d906      	bls.n	810d7f2 <mem_trim+0xb2>
 810d7e4:	4b57      	ldr	r3, [pc, #348]	; (810d944 <mem_trim+0x204>)
 810d7e6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 810d7ea:	4959      	ldr	r1, [pc, #356]	; (810d950 <mem_trim+0x210>)
 810d7ec:	4857      	ldr	r0, [pc, #348]	; (810d94c <mem_trim+0x20c>)
 810d7ee:	f005 fa5f 	bl	8112cb0 <iprintf>
  if (newsize > size) {
 810d7f2:	8bfa      	ldrh	r2, [r7, #30]
 810d7f4:	8abb      	ldrh	r3, [r7, #20]
 810d7f6:	429a      	cmp	r2, r3
 810d7f8:	d901      	bls.n	810d7fe <mem_trim+0xbe>
    /* not supported */
    return NULL;
 810d7fa:	2300      	movs	r3, #0
 810d7fc:	e099      	b.n	810d932 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 810d7fe:	8bfa      	ldrh	r2, [r7, #30]
 810d800:	8abb      	ldrh	r3, [r7, #20]
 810d802:	429a      	cmp	r2, r3
 810d804:	d101      	bne.n	810d80a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 810d806:	687b      	ldr	r3, [r7, #4]
 810d808:	e093      	b.n	810d932 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 810d80a:	4852      	ldr	r0, [pc, #328]	; (810d954 <mem_trim+0x214>)
 810d80c:	f001 fc60 	bl	810f0d0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 810d810:	69bb      	ldr	r3, [r7, #24]
 810d812:	881b      	ldrh	r3, [r3, #0]
 810d814:	4618      	mov	r0, r3
 810d816:	f7ff fdad 	bl	810d374 <ptr_to_mem>
 810d81a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 810d81c:	693b      	ldr	r3, [r7, #16]
 810d81e:	791b      	ldrb	r3, [r3, #4]
 810d820:	2b00      	cmp	r3, #0
 810d822:	d141      	bne.n	810d8a8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810d824:	69bb      	ldr	r3, [r7, #24]
 810d826:	881b      	ldrh	r3, [r3, #0]
 810d828:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d82c:	4293      	cmp	r3, r2
 810d82e:	d106      	bne.n	810d83e <mem_trim+0xfe>
 810d830:	4b44      	ldr	r3, [pc, #272]	; (810d944 <mem_trim+0x204>)
 810d832:	f240 22f5 	movw	r2, #757	; 0x2f5
 810d836:	4948      	ldr	r1, [pc, #288]	; (810d958 <mem_trim+0x218>)
 810d838:	4844      	ldr	r0, [pc, #272]	; (810d94c <mem_trim+0x20c>)
 810d83a:	f005 fa39 	bl	8112cb0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 810d83e:	693b      	ldr	r3, [r7, #16]
 810d840:	881b      	ldrh	r3, [r3, #0]
 810d842:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810d844:	8afa      	ldrh	r2, [r7, #22]
 810d846:	8bfb      	ldrh	r3, [r7, #30]
 810d848:	4413      	add	r3, r2
 810d84a:	b29b      	uxth	r3, r3
 810d84c:	3308      	adds	r3, #8
 810d84e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 810d850:	4b42      	ldr	r3, [pc, #264]	; (810d95c <mem_trim+0x21c>)
 810d852:	681b      	ldr	r3, [r3, #0]
 810d854:	693a      	ldr	r2, [r7, #16]
 810d856:	429a      	cmp	r2, r3
 810d858:	d106      	bne.n	810d868 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 810d85a:	89fb      	ldrh	r3, [r7, #14]
 810d85c:	4618      	mov	r0, r3
 810d85e:	f7ff fd89 	bl	810d374 <ptr_to_mem>
 810d862:	4603      	mov	r3, r0
 810d864:	4a3d      	ldr	r2, [pc, #244]	; (810d95c <mem_trim+0x21c>)
 810d866:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 810d868:	89fb      	ldrh	r3, [r7, #14]
 810d86a:	4618      	mov	r0, r3
 810d86c:	f7ff fd82 	bl	810d374 <ptr_to_mem>
 810d870:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 810d872:	693b      	ldr	r3, [r7, #16]
 810d874:	2200      	movs	r2, #0
 810d876:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 810d878:	693b      	ldr	r3, [r7, #16]
 810d87a:	89ba      	ldrh	r2, [r7, #12]
 810d87c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 810d87e:	693b      	ldr	r3, [r7, #16]
 810d880:	8afa      	ldrh	r2, [r7, #22]
 810d882:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 810d884:	69bb      	ldr	r3, [r7, #24]
 810d886:	89fa      	ldrh	r2, [r7, #14]
 810d888:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810d88a:	693b      	ldr	r3, [r7, #16]
 810d88c:	881b      	ldrh	r3, [r3, #0]
 810d88e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d892:	4293      	cmp	r3, r2
 810d894:	d049      	beq.n	810d92a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810d896:	693b      	ldr	r3, [r7, #16]
 810d898:	881b      	ldrh	r3, [r3, #0]
 810d89a:	4618      	mov	r0, r3
 810d89c:	f7ff fd6a 	bl	810d374 <ptr_to_mem>
 810d8a0:	4602      	mov	r2, r0
 810d8a2:	89fb      	ldrh	r3, [r7, #14]
 810d8a4:	8053      	strh	r3, [r2, #2]
 810d8a6:	e040      	b.n	810d92a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 810d8a8:	8bfb      	ldrh	r3, [r7, #30]
 810d8aa:	f103 0214 	add.w	r2, r3, #20
 810d8ae:	8abb      	ldrh	r3, [r7, #20]
 810d8b0:	429a      	cmp	r2, r3
 810d8b2:	d83a      	bhi.n	810d92a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810d8b4:	8afa      	ldrh	r2, [r7, #22]
 810d8b6:	8bfb      	ldrh	r3, [r7, #30]
 810d8b8:	4413      	add	r3, r2
 810d8ba:	b29b      	uxth	r3, r3
 810d8bc:	3308      	adds	r3, #8
 810d8be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810d8c0:	69bb      	ldr	r3, [r7, #24]
 810d8c2:	881b      	ldrh	r3, [r3, #0]
 810d8c4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d8c8:	4293      	cmp	r3, r2
 810d8ca:	d106      	bne.n	810d8da <mem_trim+0x19a>
 810d8cc:	4b1d      	ldr	r3, [pc, #116]	; (810d944 <mem_trim+0x204>)
 810d8ce:	f240 3216 	movw	r2, #790	; 0x316
 810d8d2:	4921      	ldr	r1, [pc, #132]	; (810d958 <mem_trim+0x218>)
 810d8d4:	481d      	ldr	r0, [pc, #116]	; (810d94c <mem_trim+0x20c>)
 810d8d6:	f005 f9eb 	bl	8112cb0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 810d8da:	89fb      	ldrh	r3, [r7, #14]
 810d8dc:	4618      	mov	r0, r3
 810d8de:	f7ff fd49 	bl	810d374 <ptr_to_mem>
 810d8e2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 810d8e4:	4b1d      	ldr	r3, [pc, #116]	; (810d95c <mem_trim+0x21c>)
 810d8e6:	681b      	ldr	r3, [r3, #0]
 810d8e8:	693a      	ldr	r2, [r7, #16]
 810d8ea:	429a      	cmp	r2, r3
 810d8ec:	d202      	bcs.n	810d8f4 <mem_trim+0x1b4>
      lfree = mem2;
 810d8ee:	4a1b      	ldr	r2, [pc, #108]	; (810d95c <mem_trim+0x21c>)
 810d8f0:	693b      	ldr	r3, [r7, #16]
 810d8f2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 810d8f4:	693b      	ldr	r3, [r7, #16]
 810d8f6:	2200      	movs	r2, #0
 810d8f8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 810d8fa:	69bb      	ldr	r3, [r7, #24]
 810d8fc:	881a      	ldrh	r2, [r3, #0]
 810d8fe:	693b      	ldr	r3, [r7, #16]
 810d900:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 810d902:	693b      	ldr	r3, [r7, #16]
 810d904:	8afa      	ldrh	r2, [r7, #22]
 810d906:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 810d908:	69bb      	ldr	r3, [r7, #24]
 810d90a:	89fa      	ldrh	r2, [r7, #14]
 810d90c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810d90e:	693b      	ldr	r3, [r7, #16]
 810d910:	881b      	ldrh	r3, [r3, #0]
 810d912:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d916:	4293      	cmp	r3, r2
 810d918:	d007      	beq.n	810d92a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810d91a:	693b      	ldr	r3, [r7, #16]
 810d91c:	881b      	ldrh	r3, [r3, #0]
 810d91e:	4618      	mov	r0, r3
 810d920:	f7ff fd28 	bl	810d374 <ptr_to_mem>
 810d924:	4602      	mov	r2, r0
 810d926:	89fb      	ldrh	r3, [r7, #14]
 810d928:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 810d92a:	480a      	ldr	r0, [pc, #40]	; (810d954 <mem_trim+0x214>)
 810d92c:	f001 fbdf 	bl	810f0ee <sys_mutex_unlock>
  return rmem;
 810d930:	687b      	ldr	r3, [r7, #4]
}
 810d932:	4618      	mov	r0, r3
 810d934:	3720      	adds	r7, #32
 810d936:	46bd      	mov	sp, r7
 810d938:	bd80      	pop	{r7, pc}
 810d93a:	bf00      	nop
 810d93c:	100058f8 	.word	0x100058f8
 810d940:	100058fc 	.word	0x100058fc
 810d944:	081156b0 	.word	0x081156b0
 810d948:	08115864 	.word	0x08115864
 810d94c:	08115720 	.word	0x08115720
 810d950:	0811587c 	.word	0x0811587c
 810d954:	10005900 	.word	0x10005900
 810d958:	0811589c 	.word	0x0811589c
 810d95c:	10005904 	.word	0x10005904

0810d960 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 810d960:	b580      	push	{r7, lr}
 810d962:	b088      	sub	sp, #32
 810d964:	af00      	add	r7, sp, #0
 810d966:	4603      	mov	r3, r0
 810d968:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 810d96a:	88fb      	ldrh	r3, [r7, #6]
 810d96c:	2b00      	cmp	r3, #0
 810d96e:	d101      	bne.n	810d974 <mem_malloc+0x14>
    return NULL;
 810d970:	2300      	movs	r3, #0
 810d972:	e0e6      	b.n	810db42 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 810d974:	88fb      	ldrh	r3, [r7, #6]
 810d976:	3303      	adds	r3, #3
 810d978:	b29b      	uxth	r3, r3
 810d97a:	f023 0303 	bic.w	r3, r3, #3
 810d97e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 810d980:	8bbb      	ldrh	r3, [r7, #28]
 810d982:	2b0b      	cmp	r3, #11
 810d984:	d801      	bhi.n	810d98a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 810d986:	230c      	movs	r3, #12
 810d988:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 810d98a:	8bbb      	ldrh	r3, [r7, #28]
 810d98c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810d990:	4293      	cmp	r3, r2
 810d992:	d803      	bhi.n	810d99c <mem_malloc+0x3c>
 810d994:	8bba      	ldrh	r2, [r7, #28]
 810d996:	88fb      	ldrh	r3, [r7, #6]
 810d998:	429a      	cmp	r2, r3
 810d99a:	d201      	bcs.n	810d9a0 <mem_malloc+0x40>
    return NULL;
 810d99c:	2300      	movs	r3, #0
 810d99e:	e0d0      	b.n	810db42 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 810d9a0:	486a      	ldr	r0, [pc, #424]	; (810db4c <mem_malloc+0x1ec>)
 810d9a2:	f001 fb95 	bl	810f0d0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810d9a6:	4b6a      	ldr	r3, [pc, #424]	; (810db50 <mem_malloc+0x1f0>)
 810d9a8:	681b      	ldr	r3, [r3, #0]
 810d9aa:	4618      	mov	r0, r3
 810d9ac:	f7ff fcf4 	bl	810d398 <mem_to_ptr>
 810d9b0:	4603      	mov	r3, r0
 810d9b2:	83fb      	strh	r3, [r7, #30]
 810d9b4:	e0b9      	b.n	810db2a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 810d9b6:	8bfb      	ldrh	r3, [r7, #30]
 810d9b8:	4618      	mov	r0, r3
 810d9ba:	f7ff fcdb 	bl	810d374 <ptr_to_mem>
 810d9be:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 810d9c0:	697b      	ldr	r3, [r7, #20]
 810d9c2:	791b      	ldrb	r3, [r3, #4]
 810d9c4:	2b00      	cmp	r3, #0
 810d9c6:	f040 80a9 	bne.w	810db1c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 810d9ca:	697b      	ldr	r3, [r7, #20]
 810d9cc:	881b      	ldrh	r3, [r3, #0]
 810d9ce:	461a      	mov	r2, r3
 810d9d0:	8bfb      	ldrh	r3, [r7, #30]
 810d9d2:	1ad3      	subs	r3, r2, r3
 810d9d4:	f1a3 0208 	sub.w	r2, r3, #8
 810d9d8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 810d9da:	429a      	cmp	r2, r3
 810d9dc:	f0c0 809e 	bcc.w	810db1c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 810d9e0:	697b      	ldr	r3, [r7, #20]
 810d9e2:	881b      	ldrh	r3, [r3, #0]
 810d9e4:	461a      	mov	r2, r3
 810d9e6:	8bfb      	ldrh	r3, [r7, #30]
 810d9e8:	1ad3      	subs	r3, r2, r3
 810d9ea:	f1a3 0208 	sub.w	r2, r3, #8
 810d9ee:	8bbb      	ldrh	r3, [r7, #28]
 810d9f0:	3314      	adds	r3, #20
 810d9f2:	429a      	cmp	r2, r3
 810d9f4:	d335      	bcc.n	810da62 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 810d9f6:	8bfa      	ldrh	r2, [r7, #30]
 810d9f8:	8bbb      	ldrh	r3, [r7, #28]
 810d9fa:	4413      	add	r3, r2
 810d9fc:	b29b      	uxth	r3, r3
 810d9fe:	3308      	adds	r3, #8
 810da00:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 810da02:	8a7b      	ldrh	r3, [r7, #18]
 810da04:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810da08:	4293      	cmp	r3, r2
 810da0a:	d106      	bne.n	810da1a <mem_malloc+0xba>
 810da0c:	4b51      	ldr	r3, [pc, #324]	; (810db54 <mem_malloc+0x1f4>)
 810da0e:	f240 3287 	movw	r2, #903	; 0x387
 810da12:	4951      	ldr	r1, [pc, #324]	; (810db58 <mem_malloc+0x1f8>)
 810da14:	4851      	ldr	r0, [pc, #324]	; (810db5c <mem_malloc+0x1fc>)
 810da16:	f005 f94b 	bl	8112cb0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 810da1a:	8a7b      	ldrh	r3, [r7, #18]
 810da1c:	4618      	mov	r0, r3
 810da1e:	f7ff fca9 	bl	810d374 <ptr_to_mem>
 810da22:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 810da24:	68fb      	ldr	r3, [r7, #12]
 810da26:	2200      	movs	r2, #0
 810da28:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 810da2a:	697b      	ldr	r3, [r7, #20]
 810da2c:	881a      	ldrh	r2, [r3, #0]
 810da2e:	68fb      	ldr	r3, [r7, #12]
 810da30:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 810da32:	68fb      	ldr	r3, [r7, #12]
 810da34:	8bfa      	ldrh	r2, [r7, #30]
 810da36:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 810da38:	697b      	ldr	r3, [r7, #20]
 810da3a:	8a7a      	ldrh	r2, [r7, #18]
 810da3c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 810da3e:	697b      	ldr	r3, [r7, #20]
 810da40:	2201      	movs	r2, #1
 810da42:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 810da44:	68fb      	ldr	r3, [r7, #12]
 810da46:	881b      	ldrh	r3, [r3, #0]
 810da48:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 810da4c:	4293      	cmp	r3, r2
 810da4e:	d00b      	beq.n	810da68 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 810da50:	68fb      	ldr	r3, [r7, #12]
 810da52:	881b      	ldrh	r3, [r3, #0]
 810da54:	4618      	mov	r0, r3
 810da56:	f7ff fc8d 	bl	810d374 <ptr_to_mem>
 810da5a:	4602      	mov	r2, r0
 810da5c:	8a7b      	ldrh	r3, [r7, #18]
 810da5e:	8053      	strh	r3, [r2, #2]
 810da60:	e002      	b.n	810da68 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 810da62:	697b      	ldr	r3, [r7, #20]
 810da64:	2201      	movs	r2, #1
 810da66:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 810da68:	4b39      	ldr	r3, [pc, #228]	; (810db50 <mem_malloc+0x1f0>)
 810da6a:	681b      	ldr	r3, [r3, #0]
 810da6c:	697a      	ldr	r2, [r7, #20]
 810da6e:	429a      	cmp	r2, r3
 810da70:	d127      	bne.n	810dac2 <mem_malloc+0x162>
          struct mem *cur = lfree;
 810da72:	4b37      	ldr	r3, [pc, #220]	; (810db50 <mem_malloc+0x1f0>)
 810da74:	681b      	ldr	r3, [r3, #0]
 810da76:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 810da78:	e005      	b.n	810da86 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 810da7a:	69bb      	ldr	r3, [r7, #24]
 810da7c:	881b      	ldrh	r3, [r3, #0]
 810da7e:	4618      	mov	r0, r3
 810da80:	f7ff fc78 	bl	810d374 <ptr_to_mem>
 810da84:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 810da86:	69bb      	ldr	r3, [r7, #24]
 810da88:	791b      	ldrb	r3, [r3, #4]
 810da8a:	2b00      	cmp	r3, #0
 810da8c:	d004      	beq.n	810da98 <mem_malloc+0x138>
 810da8e:	4b34      	ldr	r3, [pc, #208]	; (810db60 <mem_malloc+0x200>)
 810da90:	681b      	ldr	r3, [r3, #0]
 810da92:	69ba      	ldr	r2, [r7, #24]
 810da94:	429a      	cmp	r2, r3
 810da96:	d1f0      	bne.n	810da7a <mem_malloc+0x11a>
          }
          lfree = cur;
 810da98:	4a2d      	ldr	r2, [pc, #180]	; (810db50 <mem_malloc+0x1f0>)
 810da9a:	69bb      	ldr	r3, [r7, #24]
 810da9c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 810da9e:	4b2c      	ldr	r3, [pc, #176]	; (810db50 <mem_malloc+0x1f0>)
 810daa0:	681a      	ldr	r2, [r3, #0]
 810daa2:	4b2f      	ldr	r3, [pc, #188]	; (810db60 <mem_malloc+0x200>)
 810daa4:	681b      	ldr	r3, [r3, #0]
 810daa6:	429a      	cmp	r2, r3
 810daa8:	d00b      	beq.n	810dac2 <mem_malloc+0x162>
 810daaa:	4b29      	ldr	r3, [pc, #164]	; (810db50 <mem_malloc+0x1f0>)
 810daac:	681b      	ldr	r3, [r3, #0]
 810daae:	791b      	ldrb	r3, [r3, #4]
 810dab0:	2b00      	cmp	r3, #0
 810dab2:	d006      	beq.n	810dac2 <mem_malloc+0x162>
 810dab4:	4b27      	ldr	r3, [pc, #156]	; (810db54 <mem_malloc+0x1f4>)
 810dab6:	f240 32b5 	movw	r2, #949	; 0x3b5
 810daba:	492a      	ldr	r1, [pc, #168]	; (810db64 <mem_malloc+0x204>)
 810dabc:	4827      	ldr	r0, [pc, #156]	; (810db5c <mem_malloc+0x1fc>)
 810dabe:	f005 f8f7 	bl	8112cb0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 810dac2:	4822      	ldr	r0, [pc, #136]	; (810db4c <mem_malloc+0x1ec>)
 810dac4:	f001 fb13 	bl	810f0ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 810dac8:	8bba      	ldrh	r2, [r7, #28]
 810daca:	697b      	ldr	r3, [r7, #20]
 810dacc:	4413      	add	r3, r2
 810dace:	3308      	adds	r3, #8
 810dad0:	4a23      	ldr	r2, [pc, #140]	; (810db60 <mem_malloc+0x200>)
 810dad2:	6812      	ldr	r2, [r2, #0]
 810dad4:	4293      	cmp	r3, r2
 810dad6:	d906      	bls.n	810dae6 <mem_malloc+0x186>
 810dad8:	4b1e      	ldr	r3, [pc, #120]	; (810db54 <mem_malloc+0x1f4>)
 810dada:	f240 32b9 	movw	r2, #953	; 0x3b9
 810dade:	4922      	ldr	r1, [pc, #136]	; (810db68 <mem_malloc+0x208>)
 810dae0:	481e      	ldr	r0, [pc, #120]	; (810db5c <mem_malloc+0x1fc>)
 810dae2:	f005 f8e5 	bl	8112cb0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 810dae6:	697b      	ldr	r3, [r7, #20]
 810dae8:	f003 0303 	and.w	r3, r3, #3
 810daec:	2b00      	cmp	r3, #0
 810daee:	d006      	beq.n	810dafe <mem_malloc+0x19e>
 810daf0:	4b18      	ldr	r3, [pc, #96]	; (810db54 <mem_malloc+0x1f4>)
 810daf2:	f240 32bb 	movw	r2, #955	; 0x3bb
 810daf6:	491d      	ldr	r1, [pc, #116]	; (810db6c <mem_malloc+0x20c>)
 810daf8:	4818      	ldr	r0, [pc, #96]	; (810db5c <mem_malloc+0x1fc>)
 810dafa:	f005 f8d9 	bl	8112cb0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 810dafe:	697b      	ldr	r3, [r7, #20]
 810db00:	f003 0303 	and.w	r3, r3, #3
 810db04:	2b00      	cmp	r3, #0
 810db06:	d006      	beq.n	810db16 <mem_malloc+0x1b6>
 810db08:	4b12      	ldr	r3, [pc, #72]	; (810db54 <mem_malloc+0x1f4>)
 810db0a:	f240 32bd 	movw	r2, #957	; 0x3bd
 810db0e:	4918      	ldr	r1, [pc, #96]	; (810db70 <mem_malloc+0x210>)
 810db10:	4812      	ldr	r0, [pc, #72]	; (810db5c <mem_malloc+0x1fc>)
 810db12:	f005 f8cd 	bl	8112cb0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 810db16:	697b      	ldr	r3, [r7, #20]
 810db18:	3308      	adds	r3, #8
 810db1a:	e012      	b.n	810db42 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 810db1c:	8bfb      	ldrh	r3, [r7, #30]
 810db1e:	4618      	mov	r0, r3
 810db20:	f7ff fc28 	bl	810d374 <ptr_to_mem>
 810db24:	4603      	mov	r3, r0
 810db26:	881b      	ldrh	r3, [r3, #0]
 810db28:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810db2a:	8bfa      	ldrh	r2, [r7, #30]
 810db2c:	8bbb      	ldrh	r3, [r7, #28]
 810db2e:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 810db32:	3328      	adds	r3, #40	; 0x28
 810db34:	429a      	cmp	r2, r3
 810db36:	f4ff af3e 	bcc.w	810d9b6 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 810db3a:	4804      	ldr	r0, [pc, #16]	; (810db4c <mem_malloc+0x1ec>)
 810db3c:	f001 fad7 	bl	810f0ee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 810db40:	2300      	movs	r3, #0
}
 810db42:	4618      	mov	r0, r3
 810db44:	3720      	adds	r7, #32
 810db46:	46bd      	mov	sp, r7
 810db48:	bd80      	pop	{r7, pc}
 810db4a:	bf00      	nop
 810db4c:	10005900 	.word	0x10005900
 810db50:	10005904 	.word	0x10005904
 810db54:	081156b0 	.word	0x081156b0
 810db58:	0811589c 	.word	0x0811589c
 810db5c:	08115720 	.word	0x08115720
 810db60:	100058fc 	.word	0x100058fc
 810db64:	081158b0 	.word	0x081158b0
 810db68:	081158cc 	.word	0x081158cc
 810db6c:	081158fc 	.word	0x081158fc
 810db70:	0811592c 	.word	0x0811592c

0810db74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 810db74:	b480      	push	{r7}
 810db76:	b085      	sub	sp, #20
 810db78:	af00      	add	r7, sp, #0
 810db7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 810db7c:	687b      	ldr	r3, [r7, #4]
 810db7e:	689b      	ldr	r3, [r3, #8]
 810db80:	2200      	movs	r2, #0
 810db82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 810db84:	687b      	ldr	r3, [r7, #4]
 810db86:	685b      	ldr	r3, [r3, #4]
 810db88:	3303      	adds	r3, #3
 810db8a:	f023 0303 	bic.w	r3, r3, #3
 810db8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 810db90:	2300      	movs	r3, #0
 810db92:	60fb      	str	r3, [r7, #12]
 810db94:	e011      	b.n	810dbba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 810db96:	687b      	ldr	r3, [r7, #4]
 810db98:	689b      	ldr	r3, [r3, #8]
 810db9a:	681a      	ldr	r2, [r3, #0]
 810db9c:	68bb      	ldr	r3, [r7, #8]
 810db9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 810dba0:	687b      	ldr	r3, [r7, #4]
 810dba2:	689b      	ldr	r3, [r3, #8]
 810dba4:	68ba      	ldr	r2, [r7, #8]
 810dba6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 810dba8:	687b      	ldr	r3, [r7, #4]
 810dbaa:	881b      	ldrh	r3, [r3, #0]
 810dbac:	461a      	mov	r2, r3
 810dbae:	68bb      	ldr	r3, [r7, #8]
 810dbb0:	4413      	add	r3, r2
 810dbb2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 810dbb4:	68fb      	ldr	r3, [r7, #12]
 810dbb6:	3301      	adds	r3, #1
 810dbb8:	60fb      	str	r3, [r7, #12]
 810dbba:	687b      	ldr	r3, [r7, #4]
 810dbbc:	885b      	ldrh	r3, [r3, #2]
 810dbbe:	461a      	mov	r2, r3
 810dbc0:	68fb      	ldr	r3, [r7, #12]
 810dbc2:	4293      	cmp	r3, r2
 810dbc4:	dbe7      	blt.n	810db96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 810dbc6:	bf00      	nop
 810dbc8:	bf00      	nop
 810dbca:	3714      	adds	r7, #20
 810dbcc:	46bd      	mov	sp, r7
 810dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbd2:	4770      	bx	lr

0810dbd4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 810dbd4:	b580      	push	{r7, lr}
 810dbd6:	b082      	sub	sp, #8
 810dbd8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810dbda:	2300      	movs	r3, #0
 810dbdc:	80fb      	strh	r3, [r7, #6]
 810dbde:	e009      	b.n	810dbf4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 810dbe0:	88fb      	ldrh	r3, [r7, #6]
 810dbe2:	4a08      	ldr	r2, [pc, #32]	; (810dc04 <memp_init+0x30>)
 810dbe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810dbe8:	4618      	mov	r0, r3
 810dbea:	f7ff ffc3 	bl	810db74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810dbee:	88fb      	ldrh	r3, [r7, #6]
 810dbf0:	3301      	adds	r3, #1
 810dbf2:	80fb      	strh	r3, [r7, #6]
 810dbf4:	88fb      	ldrh	r3, [r7, #6]
 810dbf6:	2b09      	cmp	r3, #9
 810dbf8:	d9f2      	bls.n	810dbe0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 810dbfa:	bf00      	nop
 810dbfc:	bf00      	nop
 810dbfe:	3708      	adds	r7, #8
 810dc00:	46bd      	mov	sp, r7
 810dc02:	bd80      	pop	{r7, pc}
 810dc04:	08116b18 	.word	0x08116b18

0810dc08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810dc08:	b580      	push	{r7, lr}
 810dc0a:	b084      	sub	sp, #16
 810dc0c:	af00      	add	r7, sp, #0
 810dc0e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 810dc10:	f001 faa0 	bl	810f154 <sys_arch_protect>
 810dc14:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 810dc16:	687b      	ldr	r3, [r7, #4]
 810dc18:	689b      	ldr	r3, [r3, #8]
 810dc1a:	681b      	ldr	r3, [r3, #0]
 810dc1c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 810dc1e:	68bb      	ldr	r3, [r7, #8]
 810dc20:	2b00      	cmp	r3, #0
 810dc22:	d015      	beq.n	810dc50 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 810dc24:	687b      	ldr	r3, [r7, #4]
 810dc26:	689b      	ldr	r3, [r3, #8]
 810dc28:	68ba      	ldr	r2, [r7, #8]
 810dc2a:	6812      	ldr	r2, [r2, #0]
 810dc2c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 810dc2e:	68bb      	ldr	r3, [r7, #8]
 810dc30:	f003 0303 	and.w	r3, r3, #3
 810dc34:	2b00      	cmp	r3, #0
 810dc36:	d006      	beq.n	810dc46 <do_memp_malloc_pool+0x3e>
 810dc38:	4b09      	ldr	r3, [pc, #36]	; (810dc60 <do_memp_malloc_pool+0x58>)
 810dc3a:	f44f 728c 	mov.w	r2, #280	; 0x118
 810dc3e:	4909      	ldr	r1, [pc, #36]	; (810dc64 <do_memp_malloc_pool+0x5c>)
 810dc40:	4809      	ldr	r0, [pc, #36]	; (810dc68 <do_memp_malloc_pool+0x60>)
 810dc42:	f005 f835 	bl	8112cb0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 810dc46:	68f8      	ldr	r0, [r7, #12]
 810dc48:	f001 fa92 	bl	810f170 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 810dc4c:	68bb      	ldr	r3, [r7, #8]
 810dc4e:	e003      	b.n	810dc58 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 810dc50:	68f8      	ldr	r0, [r7, #12]
 810dc52:	f001 fa8d 	bl	810f170 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 810dc56:	2300      	movs	r3, #0
}
 810dc58:	4618      	mov	r0, r3
 810dc5a:	3710      	adds	r7, #16
 810dc5c:	46bd      	mov	sp, r7
 810dc5e:	bd80      	pop	{r7, pc}
 810dc60:	08115950 	.word	0x08115950
 810dc64:	081159ac 	.word	0x081159ac
 810dc68:	081159d0 	.word	0x081159d0

0810dc6c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810dc6c:	b580      	push	{r7, lr}
 810dc6e:	b082      	sub	sp, #8
 810dc70:	af00      	add	r7, sp, #0
 810dc72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810dc74:	687b      	ldr	r3, [r7, #4]
 810dc76:	2b00      	cmp	r3, #0
 810dc78:	d106      	bne.n	810dc88 <memp_malloc_pool+0x1c>
 810dc7a:	4b0a      	ldr	r3, [pc, #40]	; (810dca4 <memp_malloc_pool+0x38>)
 810dc7c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 810dc80:	4909      	ldr	r1, [pc, #36]	; (810dca8 <memp_malloc_pool+0x3c>)
 810dc82:	480a      	ldr	r0, [pc, #40]	; (810dcac <memp_malloc_pool+0x40>)
 810dc84:	f005 f814 	bl	8112cb0 <iprintf>
  if (desc == NULL) {
 810dc88:	687b      	ldr	r3, [r7, #4]
 810dc8a:	2b00      	cmp	r3, #0
 810dc8c:	d101      	bne.n	810dc92 <memp_malloc_pool+0x26>
    return NULL;
 810dc8e:	2300      	movs	r3, #0
 810dc90:	e003      	b.n	810dc9a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 810dc92:	6878      	ldr	r0, [r7, #4]
 810dc94:	f7ff ffb8 	bl	810dc08 <do_memp_malloc_pool>
 810dc98:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 810dc9a:	4618      	mov	r0, r3
 810dc9c:	3708      	adds	r7, #8
 810dc9e:	46bd      	mov	sp, r7
 810dca0:	bd80      	pop	{r7, pc}
 810dca2:	bf00      	nop
 810dca4:	08115950 	.word	0x08115950
 810dca8:	081159f8 	.word	0x081159f8
 810dcac:	081159d0 	.word	0x081159d0

0810dcb0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 810dcb0:	b580      	push	{r7, lr}
 810dcb2:	b084      	sub	sp, #16
 810dcb4:	af00      	add	r7, sp, #0
 810dcb6:	4603      	mov	r3, r0
 810dcb8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 810dcba:	79fb      	ldrb	r3, [r7, #7]
 810dcbc:	2b09      	cmp	r3, #9
 810dcbe:	d908      	bls.n	810dcd2 <memp_malloc+0x22>
 810dcc0:	4b0a      	ldr	r3, [pc, #40]	; (810dcec <memp_malloc+0x3c>)
 810dcc2:	f240 1257 	movw	r2, #343	; 0x157
 810dcc6:	490a      	ldr	r1, [pc, #40]	; (810dcf0 <memp_malloc+0x40>)
 810dcc8:	480a      	ldr	r0, [pc, #40]	; (810dcf4 <memp_malloc+0x44>)
 810dcca:	f004 fff1 	bl	8112cb0 <iprintf>
 810dcce:	2300      	movs	r3, #0
 810dcd0:	e008      	b.n	810dce4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 810dcd2:	79fb      	ldrb	r3, [r7, #7]
 810dcd4:	4a08      	ldr	r2, [pc, #32]	; (810dcf8 <memp_malloc+0x48>)
 810dcd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810dcda:	4618      	mov	r0, r3
 810dcdc:	f7ff ff94 	bl	810dc08 <do_memp_malloc_pool>
 810dce0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 810dce2:	68fb      	ldr	r3, [r7, #12]
}
 810dce4:	4618      	mov	r0, r3
 810dce6:	3710      	adds	r7, #16
 810dce8:	46bd      	mov	sp, r7
 810dcea:	bd80      	pop	{r7, pc}
 810dcec:	08115950 	.word	0x08115950
 810dcf0:	08115a0c 	.word	0x08115a0c
 810dcf4:	081159d0 	.word	0x081159d0
 810dcf8:	08116b18 	.word	0x08116b18

0810dcfc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810dcfc:	b580      	push	{r7, lr}
 810dcfe:	b084      	sub	sp, #16
 810dd00:	af00      	add	r7, sp, #0
 810dd02:	6078      	str	r0, [r7, #4]
 810dd04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 810dd06:	683b      	ldr	r3, [r7, #0]
 810dd08:	f003 0303 	and.w	r3, r3, #3
 810dd0c:	2b00      	cmp	r3, #0
 810dd0e:	d006      	beq.n	810dd1e <do_memp_free_pool+0x22>
 810dd10:	4b0d      	ldr	r3, [pc, #52]	; (810dd48 <do_memp_free_pool+0x4c>)
 810dd12:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 810dd16:	490d      	ldr	r1, [pc, #52]	; (810dd4c <do_memp_free_pool+0x50>)
 810dd18:	480d      	ldr	r0, [pc, #52]	; (810dd50 <do_memp_free_pool+0x54>)
 810dd1a:	f004 ffc9 	bl	8112cb0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 810dd1e:	683b      	ldr	r3, [r7, #0]
 810dd20:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 810dd22:	f001 fa17 	bl	810f154 <sys_arch_protect>
 810dd26:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 810dd28:	687b      	ldr	r3, [r7, #4]
 810dd2a:	689b      	ldr	r3, [r3, #8]
 810dd2c:	681a      	ldr	r2, [r3, #0]
 810dd2e:	68fb      	ldr	r3, [r7, #12]
 810dd30:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 810dd32:	687b      	ldr	r3, [r7, #4]
 810dd34:	689b      	ldr	r3, [r3, #8]
 810dd36:	68fa      	ldr	r2, [r7, #12]
 810dd38:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 810dd3a:	68b8      	ldr	r0, [r7, #8]
 810dd3c:	f001 fa18 	bl	810f170 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 810dd40:	bf00      	nop
 810dd42:	3710      	adds	r7, #16
 810dd44:	46bd      	mov	sp, r7
 810dd46:	bd80      	pop	{r7, pc}
 810dd48:	08115950 	.word	0x08115950
 810dd4c:	08115a2c 	.word	0x08115a2c
 810dd50:	081159d0 	.word	0x081159d0

0810dd54 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810dd54:	b580      	push	{r7, lr}
 810dd56:	b082      	sub	sp, #8
 810dd58:	af00      	add	r7, sp, #0
 810dd5a:	6078      	str	r0, [r7, #4]
 810dd5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810dd5e:	687b      	ldr	r3, [r7, #4]
 810dd60:	2b00      	cmp	r3, #0
 810dd62:	d106      	bne.n	810dd72 <memp_free_pool+0x1e>
 810dd64:	4b0a      	ldr	r3, [pc, #40]	; (810dd90 <memp_free_pool+0x3c>)
 810dd66:	f240 1295 	movw	r2, #405	; 0x195
 810dd6a:	490a      	ldr	r1, [pc, #40]	; (810dd94 <memp_free_pool+0x40>)
 810dd6c:	480a      	ldr	r0, [pc, #40]	; (810dd98 <memp_free_pool+0x44>)
 810dd6e:	f004 ff9f 	bl	8112cb0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 810dd72:	687b      	ldr	r3, [r7, #4]
 810dd74:	2b00      	cmp	r3, #0
 810dd76:	d007      	beq.n	810dd88 <memp_free_pool+0x34>
 810dd78:	683b      	ldr	r3, [r7, #0]
 810dd7a:	2b00      	cmp	r3, #0
 810dd7c:	d004      	beq.n	810dd88 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 810dd7e:	6839      	ldr	r1, [r7, #0]
 810dd80:	6878      	ldr	r0, [r7, #4]
 810dd82:	f7ff ffbb 	bl	810dcfc <do_memp_free_pool>
 810dd86:	e000      	b.n	810dd8a <memp_free_pool+0x36>
    return;
 810dd88:	bf00      	nop
}
 810dd8a:	3708      	adds	r7, #8
 810dd8c:	46bd      	mov	sp, r7
 810dd8e:	bd80      	pop	{r7, pc}
 810dd90:	08115950 	.word	0x08115950
 810dd94:	081159f8 	.word	0x081159f8
 810dd98:	081159d0 	.word	0x081159d0

0810dd9c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 810dd9c:	b580      	push	{r7, lr}
 810dd9e:	b082      	sub	sp, #8
 810dda0:	af00      	add	r7, sp, #0
 810dda2:	4603      	mov	r3, r0
 810dda4:	6039      	str	r1, [r7, #0]
 810dda6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 810dda8:	79fb      	ldrb	r3, [r7, #7]
 810ddaa:	2b09      	cmp	r3, #9
 810ddac:	d907      	bls.n	810ddbe <memp_free+0x22>
 810ddae:	4b0c      	ldr	r3, [pc, #48]	; (810dde0 <memp_free+0x44>)
 810ddb0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 810ddb4:	490b      	ldr	r1, [pc, #44]	; (810dde4 <memp_free+0x48>)
 810ddb6:	480c      	ldr	r0, [pc, #48]	; (810dde8 <memp_free+0x4c>)
 810ddb8:	f004 ff7a 	bl	8112cb0 <iprintf>
 810ddbc:	e00c      	b.n	810ddd8 <memp_free+0x3c>

  if (mem == NULL) {
 810ddbe:	683b      	ldr	r3, [r7, #0]
 810ddc0:	2b00      	cmp	r3, #0
 810ddc2:	d008      	beq.n	810ddd6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 810ddc4:	79fb      	ldrb	r3, [r7, #7]
 810ddc6:	4a09      	ldr	r2, [pc, #36]	; (810ddec <memp_free+0x50>)
 810ddc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810ddcc:	6839      	ldr	r1, [r7, #0]
 810ddce:	4618      	mov	r0, r3
 810ddd0:	f7ff ff94 	bl	810dcfc <do_memp_free_pool>
 810ddd4:	e000      	b.n	810ddd8 <memp_free+0x3c>
    return;
 810ddd6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 810ddd8:	3708      	adds	r7, #8
 810ddda:	46bd      	mov	sp, r7
 810dddc:	bd80      	pop	{r7, pc}
 810ddde:	bf00      	nop
 810dde0:	08115950 	.word	0x08115950
 810dde4:	08115a4c 	.word	0x08115a4c
 810dde8:	081159d0 	.word	0x081159d0
 810ddec:	08116b18 	.word	0x08116b18

0810ddf0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 810ddf0:	b480      	push	{r7}
 810ddf2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 810ddf4:	bf00      	nop
 810ddf6:	46bd      	mov	sp, r7
 810ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddfc:	4770      	bx	lr
	...

0810de00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 810de00:	b580      	push	{r7, lr}
 810de02:	b086      	sub	sp, #24
 810de04:	af00      	add	r7, sp, #0
 810de06:	60f8      	str	r0, [r7, #12]
 810de08:	60b9      	str	r1, [r7, #8]
 810de0a:	607a      	str	r2, [r7, #4]
 810de0c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 810de0e:	68fb      	ldr	r3, [r7, #12]
 810de10:	2b00      	cmp	r3, #0
 810de12:	d108      	bne.n	810de26 <netif_add+0x26>
 810de14:	4b57      	ldr	r3, [pc, #348]	; (810df74 <netif_add+0x174>)
 810de16:	f240 1227 	movw	r2, #295	; 0x127
 810de1a:	4957      	ldr	r1, [pc, #348]	; (810df78 <netif_add+0x178>)
 810de1c:	4857      	ldr	r0, [pc, #348]	; (810df7c <netif_add+0x17c>)
 810de1e:	f004 ff47 	bl	8112cb0 <iprintf>
 810de22:	2300      	movs	r3, #0
 810de24:	e0a2      	b.n	810df6c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 810de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810de28:	2b00      	cmp	r3, #0
 810de2a:	d108      	bne.n	810de3e <netif_add+0x3e>
 810de2c:	4b51      	ldr	r3, [pc, #324]	; (810df74 <netif_add+0x174>)
 810de2e:	f44f 7294 	mov.w	r2, #296	; 0x128
 810de32:	4953      	ldr	r1, [pc, #332]	; (810df80 <netif_add+0x180>)
 810de34:	4851      	ldr	r0, [pc, #324]	; (810df7c <netif_add+0x17c>)
 810de36:	f004 ff3b 	bl	8112cb0 <iprintf>
 810de3a:	2300      	movs	r3, #0
 810de3c:	e096      	b.n	810df6c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 810de3e:	68bb      	ldr	r3, [r7, #8]
 810de40:	2b00      	cmp	r3, #0
 810de42:	d101      	bne.n	810de48 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 810de44:	4b4f      	ldr	r3, [pc, #316]	; (810df84 <netif_add+0x184>)
 810de46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810de48:	687b      	ldr	r3, [r7, #4]
 810de4a:	2b00      	cmp	r3, #0
 810de4c:	d101      	bne.n	810de52 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 810de4e:	4b4d      	ldr	r3, [pc, #308]	; (810df84 <netif_add+0x184>)
 810de50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810de52:	683b      	ldr	r3, [r7, #0]
 810de54:	2b00      	cmp	r3, #0
 810de56:	d101      	bne.n	810de5c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 810de58:	4b4a      	ldr	r3, [pc, #296]	; (810df84 <netif_add+0x184>)
 810de5a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 810de5c:	68fb      	ldr	r3, [r7, #12]
 810de5e:	2200      	movs	r2, #0
 810de60:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 810de62:	68fb      	ldr	r3, [r7, #12]
 810de64:	2200      	movs	r2, #0
 810de66:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 810de68:	68fb      	ldr	r3, [r7, #12]
 810de6a:	2200      	movs	r2, #0
 810de6c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 810de6e:	68fb      	ldr	r3, [r7, #12]
 810de70:	4a45      	ldr	r2, [pc, #276]	; (810df88 <netif_add+0x188>)
 810de72:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 810de74:	68fb      	ldr	r3, [r7, #12]
 810de76:	2200      	movs	r2, #0
 810de78:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 810de7a:	68fb      	ldr	r3, [r7, #12]
 810de7c:	2200      	movs	r2, #0
 810de7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 810de82:	68fb      	ldr	r3, [r7, #12]
 810de84:	2200      	movs	r2, #0
 810de86:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 810de88:	68fb      	ldr	r3, [r7, #12]
 810de8a:	6a3a      	ldr	r2, [r7, #32]
 810de8c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 810de8e:	4b3f      	ldr	r3, [pc, #252]	; (810df8c <netif_add+0x18c>)
 810de90:	781a      	ldrb	r2, [r3, #0]
 810de92:	68fb      	ldr	r3, [r7, #12]
 810de94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 810de98:	68fb      	ldr	r3, [r7, #12]
 810de9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810de9c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 810de9e:	683b      	ldr	r3, [r7, #0]
 810dea0:	687a      	ldr	r2, [r7, #4]
 810dea2:	68b9      	ldr	r1, [r7, #8]
 810dea4:	68f8      	ldr	r0, [r7, #12]
 810dea6:	f000 f90f 	bl	810e0c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 810deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810deac:	68f8      	ldr	r0, [r7, #12]
 810deae:	4798      	blx	r3
 810deb0:	4603      	mov	r3, r0
 810deb2:	2b00      	cmp	r3, #0
 810deb4:	d001      	beq.n	810deba <netif_add+0xba>
    return NULL;
 810deb6:	2300      	movs	r3, #0
 810deb8:	e058      	b.n	810df6c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 810deba:	68fb      	ldr	r3, [r7, #12]
 810debc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810dec0:	2bff      	cmp	r3, #255	; 0xff
 810dec2:	d103      	bne.n	810decc <netif_add+0xcc>
        netif->num = 0;
 810dec4:	68fb      	ldr	r3, [r7, #12]
 810dec6:	2200      	movs	r2, #0
 810dec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 810decc:	2300      	movs	r3, #0
 810dece:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810ded0:	4b2f      	ldr	r3, [pc, #188]	; (810df90 <netif_add+0x190>)
 810ded2:	681b      	ldr	r3, [r3, #0]
 810ded4:	617b      	str	r3, [r7, #20]
 810ded6:	e02b      	b.n	810df30 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 810ded8:	697a      	ldr	r2, [r7, #20]
 810deda:	68fb      	ldr	r3, [r7, #12]
 810dedc:	429a      	cmp	r2, r3
 810dede:	d106      	bne.n	810deee <netif_add+0xee>
 810dee0:	4b24      	ldr	r3, [pc, #144]	; (810df74 <netif_add+0x174>)
 810dee2:	f240 128b 	movw	r2, #395	; 0x18b
 810dee6:	492b      	ldr	r1, [pc, #172]	; (810df94 <netif_add+0x194>)
 810dee8:	4824      	ldr	r0, [pc, #144]	; (810df7c <netif_add+0x17c>)
 810deea:	f004 fee1 	bl	8112cb0 <iprintf>
        num_netifs++;
 810deee:	693b      	ldr	r3, [r7, #16]
 810def0:	3301      	adds	r3, #1
 810def2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 810def4:	693b      	ldr	r3, [r7, #16]
 810def6:	2bff      	cmp	r3, #255	; 0xff
 810def8:	dd06      	ble.n	810df08 <netif_add+0x108>
 810defa:	4b1e      	ldr	r3, [pc, #120]	; (810df74 <netif_add+0x174>)
 810defc:	f240 128d 	movw	r2, #397	; 0x18d
 810df00:	4925      	ldr	r1, [pc, #148]	; (810df98 <netif_add+0x198>)
 810df02:	481e      	ldr	r0, [pc, #120]	; (810df7c <netif_add+0x17c>)
 810df04:	f004 fed4 	bl	8112cb0 <iprintf>
        if (netif2->num == netif->num) {
 810df08:	697b      	ldr	r3, [r7, #20]
 810df0a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 810df0e:	68fb      	ldr	r3, [r7, #12]
 810df10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810df14:	429a      	cmp	r2, r3
 810df16:	d108      	bne.n	810df2a <netif_add+0x12a>
          netif->num++;
 810df18:	68fb      	ldr	r3, [r7, #12]
 810df1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810df1e:	3301      	adds	r3, #1
 810df20:	b2da      	uxtb	r2, r3
 810df22:	68fb      	ldr	r3, [r7, #12]
 810df24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 810df28:	e005      	b.n	810df36 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810df2a:	697b      	ldr	r3, [r7, #20]
 810df2c:	681b      	ldr	r3, [r3, #0]
 810df2e:	617b      	str	r3, [r7, #20]
 810df30:	697b      	ldr	r3, [r7, #20]
 810df32:	2b00      	cmp	r3, #0
 810df34:	d1d0      	bne.n	810ded8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 810df36:	697b      	ldr	r3, [r7, #20]
 810df38:	2b00      	cmp	r3, #0
 810df3a:	d1be      	bne.n	810deba <netif_add+0xba>
  }
  if (netif->num == 254) {
 810df3c:	68fb      	ldr	r3, [r7, #12]
 810df3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810df42:	2bfe      	cmp	r3, #254	; 0xfe
 810df44:	d103      	bne.n	810df4e <netif_add+0x14e>
    netif_num = 0;
 810df46:	4b11      	ldr	r3, [pc, #68]	; (810df8c <netif_add+0x18c>)
 810df48:	2200      	movs	r2, #0
 810df4a:	701a      	strb	r2, [r3, #0]
 810df4c:	e006      	b.n	810df5c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 810df4e:	68fb      	ldr	r3, [r7, #12]
 810df50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810df54:	3301      	adds	r3, #1
 810df56:	b2da      	uxtb	r2, r3
 810df58:	4b0c      	ldr	r3, [pc, #48]	; (810df8c <netif_add+0x18c>)
 810df5a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 810df5c:	4b0c      	ldr	r3, [pc, #48]	; (810df90 <netif_add+0x190>)
 810df5e:	681a      	ldr	r2, [r3, #0]
 810df60:	68fb      	ldr	r3, [r7, #12]
 810df62:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 810df64:	4a0a      	ldr	r2, [pc, #40]	; (810df90 <netif_add+0x190>)
 810df66:	68fb      	ldr	r3, [r7, #12]
 810df68:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 810df6a:	68fb      	ldr	r3, [r7, #12]
}
 810df6c:	4618      	mov	r0, r3
 810df6e:	3718      	adds	r7, #24
 810df70:	46bd      	mov	sp, r7
 810df72:	bd80      	pop	{r7, pc}
 810df74:	08115a68 	.word	0x08115a68
 810df78:	08115b24 	.word	0x08115b24
 810df7c:	08115ae0 	.word	0x08115ae0
 810df80:	08115b40 	.word	0x08115b40
 810df84:	08116a9c 	.word	0x08116a9c
 810df88:	0810e3a3 	.word	0x0810e3a3
 810df8c:	10005930 	.word	0x10005930
 810df90:	100087a0 	.word	0x100087a0
 810df94:	08115b64 	.word	0x08115b64
 810df98:	08115b78 	.word	0x08115b78

0810df9c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 810df9c:	b580      	push	{r7, lr}
 810df9e:	b082      	sub	sp, #8
 810dfa0:	af00      	add	r7, sp, #0
 810dfa2:	6078      	str	r0, [r7, #4]
 810dfa4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 810dfa6:	6839      	ldr	r1, [r7, #0]
 810dfa8:	6878      	ldr	r0, [r7, #4]
 810dfaa:	f002 f821 	bl	810fff0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 810dfae:	bf00      	nop
 810dfb0:	3708      	adds	r7, #8
 810dfb2:	46bd      	mov	sp, r7
 810dfb4:	bd80      	pop	{r7, pc}
	...

0810dfb8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 810dfb8:	b580      	push	{r7, lr}
 810dfba:	b086      	sub	sp, #24
 810dfbc:	af00      	add	r7, sp, #0
 810dfbe:	60f8      	str	r0, [r7, #12]
 810dfc0:	60b9      	str	r1, [r7, #8]
 810dfc2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 810dfc4:	68bb      	ldr	r3, [r7, #8]
 810dfc6:	2b00      	cmp	r3, #0
 810dfc8:	d106      	bne.n	810dfd8 <netif_do_set_ipaddr+0x20>
 810dfca:	4b1d      	ldr	r3, [pc, #116]	; (810e040 <netif_do_set_ipaddr+0x88>)
 810dfcc:	f240 12cb 	movw	r2, #459	; 0x1cb
 810dfd0:	491c      	ldr	r1, [pc, #112]	; (810e044 <netif_do_set_ipaddr+0x8c>)
 810dfd2:	481d      	ldr	r0, [pc, #116]	; (810e048 <netif_do_set_ipaddr+0x90>)
 810dfd4:	f004 fe6c 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 810dfd8:	687b      	ldr	r3, [r7, #4]
 810dfda:	2b00      	cmp	r3, #0
 810dfdc:	d106      	bne.n	810dfec <netif_do_set_ipaddr+0x34>
 810dfde:	4b18      	ldr	r3, [pc, #96]	; (810e040 <netif_do_set_ipaddr+0x88>)
 810dfe0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 810dfe4:	4917      	ldr	r1, [pc, #92]	; (810e044 <netif_do_set_ipaddr+0x8c>)
 810dfe6:	4818      	ldr	r0, [pc, #96]	; (810e048 <netif_do_set_ipaddr+0x90>)
 810dfe8:	f004 fe62 	bl	8112cb0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 810dfec:	68bb      	ldr	r3, [r7, #8]
 810dfee:	681a      	ldr	r2, [r3, #0]
 810dff0:	68fb      	ldr	r3, [r7, #12]
 810dff2:	3304      	adds	r3, #4
 810dff4:	681b      	ldr	r3, [r3, #0]
 810dff6:	429a      	cmp	r2, r3
 810dff8:	d01c      	beq.n	810e034 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 810dffa:	68bb      	ldr	r3, [r7, #8]
 810dffc:	681b      	ldr	r3, [r3, #0]
 810dffe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 810e000:	68fb      	ldr	r3, [r7, #12]
 810e002:	3304      	adds	r3, #4
 810e004:	681a      	ldr	r2, [r3, #0]
 810e006:	687b      	ldr	r3, [r7, #4]
 810e008:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 810e00a:	f107 0314 	add.w	r3, r7, #20
 810e00e:	4619      	mov	r1, r3
 810e010:	6878      	ldr	r0, [r7, #4]
 810e012:	f7ff ffc3 	bl	810df9c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 810e016:	68bb      	ldr	r3, [r7, #8]
 810e018:	2b00      	cmp	r3, #0
 810e01a:	d002      	beq.n	810e022 <netif_do_set_ipaddr+0x6a>
 810e01c:	68bb      	ldr	r3, [r7, #8]
 810e01e:	681b      	ldr	r3, [r3, #0]
 810e020:	e000      	b.n	810e024 <netif_do_set_ipaddr+0x6c>
 810e022:	2300      	movs	r3, #0
 810e024:	68fa      	ldr	r2, [r7, #12]
 810e026:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 810e028:	2101      	movs	r1, #1
 810e02a:	68f8      	ldr	r0, [r7, #12]
 810e02c:	f000 f8d2 	bl	810e1d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 810e030:	2301      	movs	r3, #1
 810e032:	e000      	b.n	810e036 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 810e034:	2300      	movs	r3, #0
}
 810e036:	4618      	mov	r0, r3
 810e038:	3718      	adds	r7, #24
 810e03a:	46bd      	mov	sp, r7
 810e03c:	bd80      	pop	{r7, pc}
 810e03e:	bf00      	nop
 810e040:	08115a68 	.word	0x08115a68
 810e044:	08115ba8 	.word	0x08115ba8
 810e048:	08115ae0 	.word	0x08115ae0

0810e04c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 810e04c:	b480      	push	{r7}
 810e04e:	b085      	sub	sp, #20
 810e050:	af00      	add	r7, sp, #0
 810e052:	60f8      	str	r0, [r7, #12]
 810e054:	60b9      	str	r1, [r7, #8]
 810e056:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 810e058:	68bb      	ldr	r3, [r7, #8]
 810e05a:	681a      	ldr	r2, [r3, #0]
 810e05c:	68fb      	ldr	r3, [r7, #12]
 810e05e:	3308      	adds	r3, #8
 810e060:	681b      	ldr	r3, [r3, #0]
 810e062:	429a      	cmp	r2, r3
 810e064:	d00a      	beq.n	810e07c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 810e066:	68bb      	ldr	r3, [r7, #8]
 810e068:	2b00      	cmp	r3, #0
 810e06a:	d002      	beq.n	810e072 <netif_do_set_netmask+0x26>
 810e06c:	68bb      	ldr	r3, [r7, #8]
 810e06e:	681b      	ldr	r3, [r3, #0]
 810e070:	e000      	b.n	810e074 <netif_do_set_netmask+0x28>
 810e072:	2300      	movs	r3, #0
 810e074:	68fa      	ldr	r2, [r7, #12]
 810e076:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 810e078:	2301      	movs	r3, #1
 810e07a:	e000      	b.n	810e07e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 810e07c:	2300      	movs	r3, #0
}
 810e07e:	4618      	mov	r0, r3
 810e080:	3714      	adds	r7, #20
 810e082:	46bd      	mov	sp, r7
 810e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e088:	4770      	bx	lr

0810e08a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 810e08a:	b480      	push	{r7}
 810e08c:	b085      	sub	sp, #20
 810e08e:	af00      	add	r7, sp, #0
 810e090:	60f8      	str	r0, [r7, #12]
 810e092:	60b9      	str	r1, [r7, #8]
 810e094:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 810e096:	68bb      	ldr	r3, [r7, #8]
 810e098:	681a      	ldr	r2, [r3, #0]
 810e09a:	68fb      	ldr	r3, [r7, #12]
 810e09c:	330c      	adds	r3, #12
 810e09e:	681b      	ldr	r3, [r3, #0]
 810e0a0:	429a      	cmp	r2, r3
 810e0a2:	d00a      	beq.n	810e0ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 810e0a4:	68bb      	ldr	r3, [r7, #8]
 810e0a6:	2b00      	cmp	r3, #0
 810e0a8:	d002      	beq.n	810e0b0 <netif_do_set_gw+0x26>
 810e0aa:	68bb      	ldr	r3, [r7, #8]
 810e0ac:	681b      	ldr	r3, [r3, #0]
 810e0ae:	e000      	b.n	810e0b2 <netif_do_set_gw+0x28>
 810e0b0:	2300      	movs	r3, #0
 810e0b2:	68fa      	ldr	r2, [r7, #12]
 810e0b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 810e0b6:	2301      	movs	r3, #1
 810e0b8:	e000      	b.n	810e0bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 810e0ba:	2300      	movs	r3, #0
}
 810e0bc:	4618      	mov	r0, r3
 810e0be:	3714      	adds	r7, #20
 810e0c0:	46bd      	mov	sp, r7
 810e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0c6:	4770      	bx	lr

0810e0c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 810e0c8:	b580      	push	{r7, lr}
 810e0ca:	b088      	sub	sp, #32
 810e0cc:	af00      	add	r7, sp, #0
 810e0ce:	60f8      	str	r0, [r7, #12]
 810e0d0:	60b9      	str	r1, [r7, #8]
 810e0d2:	607a      	str	r2, [r7, #4]
 810e0d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 810e0d6:	2300      	movs	r3, #0
 810e0d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 810e0da:	2300      	movs	r3, #0
 810e0dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 810e0de:	68bb      	ldr	r3, [r7, #8]
 810e0e0:	2b00      	cmp	r3, #0
 810e0e2:	d101      	bne.n	810e0e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 810e0e4:	4b1c      	ldr	r3, [pc, #112]	; (810e158 <netif_set_addr+0x90>)
 810e0e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810e0e8:	687b      	ldr	r3, [r7, #4]
 810e0ea:	2b00      	cmp	r3, #0
 810e0ec:	d101      	bne.n	810e0f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 810e0ee:	4b1a      	ldr	r3, [pc, #104]	; (810e158 <netif_set_addr+0x90>)
 810e0f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810e0f2:	683b      	ldr	r3, [r7, #0]
 810e0f4:	2b00      	cmp	r3, #0
 810e0f6:	d101      	bne.n	810e0fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 810e0f8:	4b17      	ldr	r3, [pc, #92]	; (810e158 <netif_set_addr+0x90>)
 810e0fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 810e0fc:	68bb      	ldr	r3, [r7, #8]
 810e0fe:	2b00      	cmp	r3, #0
 810e100:	d003      	beq.n	810e10a <netif_set_addr+0x42>
 810e102:	68bb      	ldr	r3, [r7, #8]
 810e104:	681b      	ldr	r3, [r3, #0]
 810e106:	2b00      	cmp	r3, #0
 810e108:	d101      	bne.n	810e10e <netif_set_addr+0x46>
 810e10a:	2301      	movs	r3, #1
 810e10c:	e000      	b.n	810e110 <netif_set_addr+0x48>
 810e10e:	2300      	movs	r3, #0
 810e110:	617b      	str	r3, [r7, #20]
  if (remove) {
 810e112:	697b      	ldr	r3, [r7, #20]
 810e114:	2b00      	cmp	r3, #0
 810e116:	d006      	beq.n	810e126 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810e118:	f107 0310 	add.w	r3, r7, #16
 810e11c:	461a      	mov	r2, r3
 810e11e:	68b9      	ldr	r1, [r7, #8]
 810e120:	68f8      	ldr	r0, [r7, #12]
 810e122:	f7ff ff49 	bl	810dfb8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 810e126:	69fa      	ldr	r2, [r7, #28]
 810e128:	6879      	ldr	r1, [r7, #4]
 810e12a:	68f8      	ldr	r0, [r7, #12]
 810e12c:	f7ff ff8e 	bl	810e04c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 810e130:	69ba      	ldr	r2, [r7, #24]
 810e132:	6839      	ldr	r1, [r7, #0]
 810e134:	68f8      	ldr	r0, [r7, #12]
 810e136:	f7ff ffa8 	bl	810e08a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 810e13a:	697b      	ldr	r3, [r7, #20]
 810e13c:	2b00      	cmp	r3, #0
 810e13e:	d106      	bne.n	810e14e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810e140:	f107 0310 	add.w	r3, r7, #16
 810e144:	461a      	mov	r2, r3
 810e146:	68b9      	ldr	r1, [r7, #8]
 810e148:	68f8      	ldr	r0, [r7, #12]
 810e14a:	f7ff ff35 	bl	810dfb8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 810e14e:	bf00      	nop
 810e150:	3720      	adds	r7, #32
 810e152:	46bd      	mov	sp, r7
 810e154:	bd80      	pop	{r7, pc}
 810e156:	bf00      	nop
 810e158:	08116a9c 	.word	0x08116a9c

0810e15c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 810e15c:	b480      	push	{r7}
 810e15e:	b083      	sub	sp, #12
 810e160:	af00      	add	r7, sp, #0
 810e162:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 810e164:	4a04      	ldr	r2, [pc, #16]	; (810e178 <netif_set_default+0x1c>)
 810e166:	687b      	ldr	r3, [r7, #4]
 810e168:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 810e16a:	bf00      	nop
 810e16c:	370c      	adds	r7, #12
 810e16e:	46bd      	mov	sp, r7
 810e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e174:	4770      	bx	lr
 810e176:	bf00      	nop
 810e178:	100087a4 	.word	0x100087a4

0810e17c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 810e17c:	b580      	push	{r7, lr}
 810e17e:	b082      	sub	sp, #8
 810e180:	af00      	add	r7, sp, #0
 810e182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 810e184:	687b      	ldr	r3, [r7, #4]
 810e186:	2b00      	cmp	r3, #0
 810e188:	d107      	bne.n	810e19a <netif_set_up+0x1e>
 810e18a:	4b0f      	ldr	r3, [pc, #60]	; (810e1c8 <netif_set_up+0x4c>)
 810e18c:	f44f 7254 	mov.w	r2, #848	; 0x350
 810e190:	490e      	ldr	r1, [pc, #56]	; (810e1cc <netif_set_up+0x50>)
 810e192:	480f      	ldr	r0, [pc, #60]	; (810e1d0 <netif_set_up+0x54>)
 810e194:	f004 fd8c 	bl	8112cb0 <iprintf>
 810e198:	e013      	b.n	810e1c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 810e19a:	687b      	ldr	r3, [r7, #4]
 810e19c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e1a0:	f003 0301 	and.w	r3, r3, #1
 810e1a4:	2b00      	cmp	r3, #0
 810e1a6:	d10c      	bne.n	810e1c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 810e1a8:	687b      	ldr	r3, [r7, #4]
 810e1aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e1ae:	f043 0301 	orr.w	r3, r3, #1
 810e1b2:	b2da      	uxtb	r2, r3
 810e1b4:	687b      	ldr	r3, [r7, #4]
 810e1b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810e1ba:	2103      	movs	r1, #3
 810e1bc:	6878      	ldr	r0, [r7, #4]
 810e1be:	f000 f809 	bl	810e1d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 810e1c2:	3708      	adds	r7, #8
 810e1c4:	46bd      	mov	sp, r7
 810e1c6:	bd80      	pop	{r7, pc}
 810e1c8:	08115a68 	.word	0x08115a68
 810e1cc:	08115c18 	.word	0x08115c18
 810e1d0:	08115ae0 	.word	0x08115ae0

0810e1d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 810e1d4:	b580      	push	{r7, lr}
 810e1d6:	b082      	sub	sp, #8
 810e1d8:	af00      	add	r7, sp, #0
 810e1da:	6078      	str	r0, [r7, #4]
 810e1dc:	460b      	mov	r3, r1
 810e1de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 810e1e0:	687b      	ldr	r3, [r7, #4]
 810e1e2:	2b00      	cmp	r3, #0
 810e1e4:	d106      	bne.n	810e1f4 <netif_issue_reports+0x20>
 810e1e6:	4b18      	ldr	r3, [pc, #96]	; (810e248 <netif_issue_reports+0x74>)
 810e1e8:	f240 326d 	movw	r2, #877	; 0x36d
 810e1ec:	4917      	ldr	r1, [pc, #92]	; (810e24c <netif_issue_reports+0x78>)
 810e1ee:	4818      	ldr	r0, [pc, #96]	; (810e250 <netif_issue_reports+0x7c>)
 810e1f0:	f004 fd5e 	bl	8112cb0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810e1f4:	687b      	ldr	r3, [r7, #4]
 810e1f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e1fa:	f003 0304 	and.w	r3, r3, #4
 810e1fe:	2b00      	cmp	r3, #0
 810e200:	d01e      	beq.n	810e240 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 810e202:	687b      	ldr	r3, [r7, #4]
 810e204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e208:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810e20c:	2b00      	cmp	r3, #0
 810e20e:	d017      	beq.n	810e240 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810e210:	78fb      	ldrb	r3, [r7, #3]
 810e212:	f003 0301 	and.w	r3, r3, #1
 810e216:	2b00      	cmp	r3, #0
 810e218:	d013      	beq.n	810e242 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810e21a:	687b      	ldr	r3, [r7, #4]
 810e21c:	3304      	adds	r3, #4
 810e21e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810e220:	2b00      	cmp	r3, #0
 810e222:	d00e      	beq.n	810e242 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 810e224:	687b      	ldr	r3, [r7, #4]
 810e226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e22a:	f003 0308 	and.w	r3, r3, #8
 810e22e:	2b00      	cmp	r3, #0
 810e230:	d007      	beq.n	810e242 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 810e232:	687b      	ldr	r3, [r7, #4]
 810e234:	3304      	adds	r3, #4
 810e236:	4619      	mov	r1, r3
 810e238:	6878      	ldr	r0, [r7, #4]
 810e23a:	f7fd fc27 	bl	810ba8c <etharp_request>
 810e23e:	e000      	b.n	810e242 <netif_issue_reports+0x6e>
    return;
 810e240:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 810e242:	3708      	adds	r7, #8
 810e244:	46bd      	mov	sp, r7
 810e246:	bd80      	pop	{r7, pc}
 810e248:	08115a68 	.word	0x08115a68
 810e24c:	08115c34 	.word	0x08115c34
 810e250:	08115ae0 	.word	0x08115ae0

0810e254 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 810e254:	b580      	push	{r7, lr}
 810e256:	b082      	sub	sp, #8
 810e258:	af00      	add	r7, sp, #0
 810e25a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	2b00      	cmp	r3, #0
 810e260:	d107      	bne.n	810e272 <netif_set_down+0x1e>
 810e262:	4b12      	ldr	r3, [pc, #72]	; (810e2ac <netif_set_down+0x58>)
 810e264:	f240 329b 	movw	r2, #923	; 0x39b
 810e268:	4911      	ldr	r1, [pc, #68]	; (810e2b0 <netif_set_down+0x5c>)
 810e26a:	4812      	ldr	r0, [pc, #72]	; (810e2b4 <netif_set_down+0x60>)
 810e26c:	f004 fd20 	bl	8112cb0 <iprintf>
 810e270:	e019      	b.n	810e2a6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 810e272:	687b      	ldr	r3, [r7, #4]
 810e274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e278:	f003 0301 	and.w	r3, r3, #1
 810e27c:	2b00      	cmp	r3, #0
 810e27e:	d012      	beq.n	810e2a6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 810e280:	687b      	ldr	r3, [r7, #4]
 810e282:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e286:	f023 0301 	bic.w	r3, r3, #1
 810e28a:	b2da      	uxtb	r2, r3
 810e28c:	687b      	ldr	r3, [r7, #4]
 810e28e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 810e292:	687b      	ldr	r3, [r7, #4]
 810e294:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e298:	f003 0308 	and.w	r3, r3, #8
 810e29c:	2b00      	cmp	r3, #0
 810e29e:	d002      	beq.n	810e2a6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 810e2a0:	6878      	ldr	r0, [r7, #4]
 810e2a2:	f7fc ffb1 	bl	810b208 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 810e2a6:	3708      	adds	r7, #8
 810e2a8:	46bd      	mov	sp, r7
 810e2aa:	bd80      	pop	{r7, pc}
 810e2ac:	08115a68 	.word	0x08115a68
 810e2b0:	08115c58 	.word	0x08115c58
 810e2b4:	08115ae0 	.word	0x08115ae0

0810e2b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 810e2b8:	b580      	push	{r7, lr}
 810e2ba:	b082      	sub	sp, #8
 810e2bc:	af00      	add	r7, sp, #0
 810e2be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 810e2c0:	687b      	ldr	r3, [r7, #4]
 810e2c2:	2b00      	cmp	r3, #0
 810e2c4:	d107      	bne.n	810e2d6 <netif_set_link_up+0x1e>
 810e2c6:	4b13      	ldr	r3, [pc, #76]	; (810e314 <netif_set_link_up+0x5c>)
 810e2c8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 810e2cc:	4912      	ldr	r1, [pc, #72]	; (810e318 <netif_set_link_up+0x60>)
 810e2ce:	4813      	ldr	r0, [pc, #76]	; (810e31c <netif_set_link_up+0x64>)
 810e2d0:	f004 fcee 	bl	8112cb0 <iprintf>
 810e2d4:	e01b      	b.n	810e30e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 810e2d6:	687b      	ldr	r3, [r7, #4]
 810e2d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e2dc:	f003 0304 	and.w	r3, r3, #4
 810e2e0:	2b00      	cmp	r3, #0
 810e2e2:	d114      	bne.n	810e30e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 810e2e4:	687b      	ldr	r3, [r7, #4]
 810e2e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e2ea:	f043 0304 	orr.w	r3, r3, #4
 810e2ee:	b2da      	uxtb	r2, r3
 810e2f0:	687b      	ldr	r3, [r7, #4]
 810e2f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810e2f6:	2103      	movs	r1, #3
 810e2f8:	6878      	ldr	r0, [r7, #4]
 810e2fa:	f7ff ff6b 	bl	810e1d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 810e2fe:	687b      	ldr	r3, [r7, #4]
 810e300:	69db      	ldr	r3, [r3, #28]
 810e302:	2b00      	cmp	r3, #0
 810e304:	d003      	beq.n	810e30e <netif_set_link_up+0x56>
 810e306:	687b      	ldr	r3, [r7, #4]
 810e308:	69db      	ldr	r3, [r3, #28]
 810e30a:	6878      	ldr	r0, [r7, #4]
 810e30c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810e30e:	3708      	adds	r7, #8
 810e310:	46bd      	mov	sp, r7
 810e312:	bd80      	pop	{r7, pc}
 810e314:	08115a68 	.word	0x08115a68
 810e318:	08115c78 	.word	0x08115c78
 810e31c:	08115ae0 	.word	0x08115ae0

0810e320 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 810e320:	b580      	push	{r7, lr}
 810e322:	b082      	sub	sp, #8
 810e324:	af00      	add	r7, sp, #0
 810e326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 810e328:	687b      	ldr	r3, [r7, #4]
 810e32a:	2b00      	cmp	r3, #0
 810e32c:	d107      	bne.n	810e33e <netif_set_link_down+0x1e>
 810e32e:	4b11      	ldr	r3, [pc, #68]	; (810e374 <netif_set_link_down+0x54>)
 810e330:	f240 4206 	movw	r2, #1030	; 0x406
 810e334:	4910      	ldr	r1, [pc, #64]	; (810e378 <netif_set_link_down+0x58>)
 810e336:	4811      	ldr	r0, [pc, #68]	; (810e37c <netif_set_link_down+0x5c>)
 810e338:	f004 fcba 	bl	8112cb0 <iprintf>
 810e33c:	e017      	b.n	810e36e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 810e33e:	687b      	ldr	r3, [r7, #4]
 810e340:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e344:	f003 0304 	and.w	r3, r3, #4
 810e348:	2b00      	cmp	r3, #0
 810e34a:	d010      	beq.n	810e36e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 810e34c:	687b      	ldr	r3, [r7, #4]
 810e34e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e352:	f023 0304 	bic.w	r3, r3, #4
 810e356:	b2da      	uxtb	r2, r3
 810e358:	687b      	ldr	r3, [r7, #4]
 810e35a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 810e35e:	687b      	ldr	r3, [r7, #4]
 810e360:	69db      	ldr	r3, [r3, #28]
 810e362:	2b00      	cmp	r3, #0
 810e364:	d003      	beq.n	810e36e <netif_set_link_down+0x4e>
 810e366:	687b      	ldr	r3, [r7, #4]
 810e368:	69db      	ldr	r3, [r3, #28]
 810e36a:	6878      	ldr	r0, [r7, #4]
 810e36c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810e36e:	3708      	adds	r7, #8
 810e370:	46bd      	mov	sp, r7
 810e372:	bd80      	pop	{r7, pc}
 810e374:	08115a68 	.word	0x08115a68
 810e378:	08115c9c 	.word	0x08115c9c
 810e37c:	08115ae0 	.word	0x08115ae0

0810e380 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 810e380:	b480      	push	{r7}
 810e382:	b083      	sub	sp, #12
 810e384:	af00      	add	r7, sp, #0
 810e386:	6078      	str	r0, [r7, #4]
 810e388:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 810e38a:	687b      	ldr	r3, [r7, #4]
 810e38c:	2b00      	cmp	r3, #0
 810e38e:	d002      	beq.n	810e396 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 810e390:	687b      	ldr	r3, [r7, #4]
 810e392:	683a      	ldr	r2, [r7, #0]
 810e394:	61da      	str	r2, [r3, #28]
  }
}
 810e396:	bf00      	nop
 810e398:	370c      	adds	r7, #12
 810e39a:	46bd      	mov	sp, r7
 810e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3a0:	4770      	bx	lr

0810e3a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 810e3a2:	b480      	push	{r7}
 810e3a4:	b085      	sub	sp, #20
 810e3a6:	af00      	add	r7, sp, #0
 810e3a8:	60f8      	str	r0, [r7, #12]
 810e3aa:	60b9      	str	r1, [r7, #8]
 810e3ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 810e3ae:	f06f 030b 	mvn.w	r3, #11
}
 810e3b2:	4618      	mov	r0, r3
 810e3b4:	3714      	adds	r7, #20
 810e3b6:	46bd      	mov	sp, r7
 810e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3bc:	4770      	bx	lr
	...

0810e3c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 810e3c0:	b480      	push	{r7}
 810e3c2:	b085      	sub	sp, #20
 810e3c4:	af00      	add	r7, sp, #0
 810e3c6:	4603      	mov	r3, r0
 810e3c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 810e3ca:	79fb      	ldrb	r3, [r7, #7]
 810e3cc:	2b00      	cmp	r3, #0
 810e3ce:	d013      	beq.n	810e3f8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 810e3d0:	4b0d      	ldr	r3, [pc, #52]	; (810e408 <netif_get_by_index+0x48>)
 810e3d2:	681b      	ldr	r3, [r3, #0]
 810e3d4:	60fb      	str	r3, [r7, #12]
 810e3d6:	e00c      	b.n	810e3f2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 810e3d8:	68fb      	ldr	r3, [r7, #12]
 810e3da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810e3de:	3301      	adds	r3, #1
 810e3e0:	b2db      	uxtb	r3, r3
 810e3e2:	79fa      	ldrb	r2, [r7, #7]
 810e3e4:	429a      	cmp	r2, r3
 810e3e6:	d101      	bne.n	810e3ec <netif_get_by_index+0x2c>
        return netif; /* found! */
 810e3e8:	68fb      	ldr	r3, [r7, #12]
 810e3ea:	e006      	b.n	810e3fa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 810e3ec:	68fb      	ldr	r3, [r7, #12]
 810e3ee:	681b      	ldr	r3, [r3, #0]
 810e3f0:	60fb      	str	r3, [r7, #12]
 810e3f2:	68fb      	ldr	r3, [r7, #12]
 810e3f4:	2b00      	cmp	r3, #0
 810e3f6:	d1ef      	bne.n	810e3d8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 810e3f8:	2300      	movs	r3, #0
}
 810e3fa:	4618      	mov	r0, r3
 810e3fc:	3714      	adds	r7, #20
 810e3fe:	46bd      	mov	sp, r7
 810e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e404:	4770      	bx	lr
 810e406:	bf00      	nop
 810e408:	100087a0 	.word	0x100087a0

0810e40c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 810e40c:	b480      	push	{r7}
 810e40e:	b085      	sub	sp, #20
 810e410:	af00      	add	r7, sp, #0
 810e412:	60f8      	str	r0, [r7, #12]
 810e414:	60b9      	str	r1, [r7, #8]
 810e416:	4611      	mov	r1, r2
 810e418:	461a      	mov	r2, r3
 810e41a:	460b      	mov	r3, r1
 810e41c:	80fb      	strh	r3, [r7, #6]
 810e41e:	4613      	mov	r3, r2
 810e420:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 810e422:	68fb      	ldr	r3, [r7, #12]
 810e424:	2200      	movs	r2, #0
 810e426:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 810e428:	68fb      	ldr	r3, [r7, #12]
 810e42a:	68ba      	ldr	r2, [r7, #8]
 810e42c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 810e42e:	68fb      	ldr	r3, [r7, #12]
 810e430:	88fa      	ldrh	r2, [r7, #6]
 810e432:	811a      	strh	r2, [r3, #8]
  p->len = len;
 810e434:	68fb      	ldr	r3, [r7, #12]
 810e436:	88ba      	ldrh	r2, [r7, #4]
 810e438:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 810e43a:	8b3b      	ldrh	r3, [r7, #24]
 810e43c:	b2da      	uxtb	r2, r3
 810e43e:	68fb      	ldr	r3, [r7, #12]
 810e440:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 810e442:	68fb      	ldr	r3, [r7, #12]
 810e444:	7f3a      	ldrb	r2, [r7, #28]
 810e446:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 810e448:	68fb      	ldr	r3, [r7, #12]
 810e44a:	2201      	movs	r2, #1
 810e44c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 810e44e:	68fb      	ldr	r3, [r7, #12]
 810e450:	2200      	movs	r2, #0
 810e452:	73da      	strb	r2, [r3, #15]
}
 810e454:	bf00      	nop
 810e456:	3714      	adds	r7, #20
 810e458:	46bd      	mov	sp, r7
 810e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e45e:	4770      	bx	lr

0810e460 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 810e460:	b580      	push	{r7, lr}
 810e462:	b08c      	sub	sp, #48	; 0x30
 810e464:	af02      	add	r7, sp, #8
 810e466:	4603      	mov	r3, r0
 810e468:	71fb      	strb	r3, [r7, #7]
 810e46a:	460b      	mov	r3, r1
 810e46c:	80bb      	strh	r3, [r7, #4]
 810e46e:	4613      	mov	r3, r2
 810e470:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 810e472:	79fb      	ldrb	r3, [r7, #7]
 810e474:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 810e476:	887b      	ldrh	r3, [r7, #2]
 810e478:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 810e47c:	d07d      	beq.n	810e57a <pbuf_alloc+0x11a>
 810e47e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 810e482:	f300 80c6 	bgt.w	810e612 <pbuf_alloc+0x1b2>
 810e486:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 810e48a:	d010      	beq.n	810e4ae <pbuf_alloc+0x4e>
 810e48c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 810e490:	f300 80bf 	bgt.w	810e612 <pbuf_alloc+0x1b2>
 810e494:	2b01      	cmp	r3, #1
 810e496:	d002      	beq.n	810e49e <pbuf_alloc+0x3e>
 810e498:	2b41      	cmp	r3, #65	; 0x41
 810e49a:	f040 80ba 	bne.w	810e612 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 810e49e:	887a      	ldrh	r2, [r7, #2]
 810e4a0:	88bb      	ldrh	r3, [r7, #4]
 810e4a2:	4619      	mov	r1, r3
 810e4a4:	2000      	movs	r0, #0
 810e4a6:	f000 f8cf 	bl	810e648 <pbuf_alloc_reference>
 810e4aa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 810e4ac:	e0bb      	b.n	810e626 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 810e4ae:	2300      	movs	r3, #0
 810e4b0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 810e4b2:	2300      	movs	r3, #0
 810e4b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 810e4b6:	88bb      	ldrh	r3, [r7, #4]
 810e4b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 810e4ba:	2009      	movs	r0, #9
 810e4bc:	f7ff fbf8 	bl	810dcb0 <memp_malloc>
 810e4c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 810e4c2:	693b      	ldr	r3, [r7, #16]
 810e4c4:	2b00      	cmp	r3, #0
 810e4c6:	d107      	bne.n	810e4d8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 810e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e4ca:	2b00      	cmp	r3, #0
 810e4cc:	d002      	beq.n	810e4d4 <pbuf_alloc+0x74>
            pbuf_free(p);
 810e4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810e4d0:	f000 faa8 	bl	810ea24 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 810e4d4:	2300      	movs	r3, #0
 810e4d6:	e0a7      	b.n	810e628 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 810e4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810e4da:	3303      	adds	r3, #3
 810e4dc:	b29b      	uxth	r3, r3
 810e4de:	f023 0303 	bic.w	r3, r3, #3
 810e4e2:	b29b      	uxth	r3, r3
 810e4e4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 810e4e8:	b29b      	uxth	r3, r3
 810e4ea:	8b7a      	ldrh	r2, [r7, #26]
 810e4ec:	4293      	cmp	r3, r2
 810e4ee:	bf28      	it	cs
 810e4f0:	4613      	movcs	r3, r2
 810e4f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 810e4f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810e4f6:	3310      	adds	r3, #16
 810e4f8:	693a      	ldr	r2, [r7, #16]
 810e4fa:	4413      	add	r3, r2
 810e4fc:	3303      	adds	r3, #3
 810e4fe:	f023 0303 	bic.w	r3, r3, #3
 810e502:	4618      	mov	r0, r3
 810e504:	89f9      	ldrh	r1, [r7, #14]
 810e506:	8b7a      	ldrh	r2, [r7, #26]
 810e508:	2300      	movs	r3, #0
 810e50a:	9301      	str	r3, [sp, #4]
 810e50c:	887b      	ldrh	r3, [r7, #2]
 810e50e:	9300      	str	r3, [sp, #0]
 810e510:	460b      	mov	r3, r1
 810e512:	4601      	mov	r1, r0
 810e514:	6938      	ldr	r0, [r7, #16]
 810e516:	f7ff ff79 	bl	810e40c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 810e51a:	693b      	ldr	r3, [r7, #16]
 810e51c:	685b      	ldr	r3, [r3, #4]
 810e51e:	f003 0303 	and.w	r3, r3, #3
 810e522:	2b00      	cmp	r3, #0
 810e524:	d006      	beq.n	810e534 <pbuf_alloc+0xd4>
 810e526:	4b42      	ldr	r3, [pc, #264]	; (810e630 <pbuf_alloc+0x1d0>)
 810e528:	f44f 7280 	mov.w	r2, #256	; 0x100
 810e52c:	4941      	ldr	r1, [pc, #260]	; (810e634 <pbuf_alloc+0x1d4>)
 810e52e:	4842      	ldr	r0, [pc, #264]	; (810e638 <pbuf_alloc+0x1d8>)
 810e530:	f004 fbbe 	bl	8112cb0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 810e534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810e536:	3303      	adds	r3, #3
 810e538:	f023 0303 	bic.w	r3, r3, #3
 810e53c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 810e540:	d106      	bne.n	810e550 <pbuf_alloc+0xf0>
 810e542:	4b3b      	ldr	r3, [pc, #236]	; (810e630 <pbuf_alloc+0x1d0>)
 810e544:	f44f 7281 	mov.w	r2, #258	; 0x102
 810e548:	493c      	ldr	r1, [pc, #240]	; (810e63c <pbuf_alloc+0x1dc>)
 810e54a:	483b      	ldr	r0, [pc, #236]	; (810e638 <pbuf_alloc+0x1d8>)
 810e54c:	f004 fbb0 	bl	8112cb0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 810e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e552:	2b00      	cmp	r3, #0
 810e554:	d102      	bne.n	810e55c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 810e556:	693b      	ldr	r3, [r7, #16]
 810e558:	627b      	str	r3, [r7, #36]	; 0x24
 810e55a:	e002      	b.n	810e562 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 810e55c:	69fb      	ldr	r3, [r7, #28]
 810e55e:	693a      	ldr	r2, [r7, #16]
 810e560:	601a      	str	r2, [r3, #0]
        }
        last = q;
 810e562:	693b      	ldr	r3, [r7, #16]
 810e564:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 810e566:	8b7a      	ldrh	r2, [r7, #26]
 810e568:	89fb      	ldrh	r3, [r7, #14]
 810e56a:	1ad3      	subs	r3, r2, r3
 810e56c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 810e56e:	2300      	movs	r3, #0
 810e570:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 810e572:	8b7b      	ldrh	r3, [r7, #26]
 810e574:	2b00      	cmp	r3, #0
 810e576:	d1a0      	bne.n	810e4ba <pbuf_alloc+0x5a>
      break;
 810e578:	e055      	b.n	810e626 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 810e57a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810e57c:	3303      	adds	r3, #3
 810e57e:	b29b      	uxth	r3, r3
 810e580:	f023 0303 	bic.w	r3, r3, #3
 810e584:	b29a      	uxth	r2, r3
 810e586:	88bb      	ldrh	r3, [r7, #4]
 810e588:	3303      	adds	r3, #3
 810e58a:	b29b      	uxth	r3, r3
 810e58c:	f023 0303 	bic.w	r3, r3, #3
 810e590:	b29b      	uxth	r3, r3
 810e592:	4413      	add	r3, r2
 810e594:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 810e596:	8b3b      	ldrh	r3, [r7, #24]
 810e598:	3310      	adds	r3, #16
 810e59a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810e59c:	8b3a      	ldrh	r2, [r7, #24]
 810e59e:	88bb      	ldrh	r3, [r7, #4]
 810e5a0:	3303      	adds	r3, #3
 810e5a2:	f023 0303 	bic.w	r3, r3, #3
 810e5a6:	429a      	cmp	r2, r3
 810e5a8:	d306      	bcc.n	810e5b8 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 810e5aa:	8afa      	ldrh	r2, [r7, #22]
 810e5ac:	88bb      	ldrh	r3, [r7, #4]
 810e5ae:	3303      	adds	r3, #3
 810e5b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810e5b4:	429a      	cmp	r2, r3
 810e5b6:	d201      	bcs.n	810e5bc <pbuf_alloc+0x15c>
        return NULL;
 810e5b8:	2300      	movs	r3, #0
 810e5ba:	e035      	b.n	810e628 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 810e5bc:	8afb      	ldrh	r3, [r7, #22]
 810e5be:	4618      	mov	r0, r3
 810e5c0:	f7ff f9ce 	bl	810d960 <mem_malloc>
 810e5c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 810e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e5c8:	2b00      	cmp	r3, #0
 810e5ca:	d101      	bne.n	810e5d0 <pbuf_alloc+0x170>
        return NULL;
 810e5cc:	2300      	movs	r3, #0
 810e5ce:	e02b      	b.n	810e628 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 810e5d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810e5d2:	3310      	adds	r3, #16
 810e5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810e5d6:	4413      	add	r3, r2
 810e5d8:	3303      	adds	r3, #3
 810e5da:	f023 0303 	bic.w	r3, r3, #3
 810e5de:	4618      	mov	r0, r3
 810e5e0:	88b9      	ldrh	r1, [r7, #4]
 810e5e2:	88ba      	ldrh	r2, [r7, #4]
 810e5e4:	2300      	movs	r3, #0
 810e5e6:	9301      	str	r3, [sp, #4]
 810e5e8:	887b      	ldrh	r3, [r7, #2]
 810e5ea:	9300      	str	r3, [sp, #0]
 810e5ec:	460b      	mov	r3, r1
 810e5ee:	4601      	mov	r1, r0
 810e5f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810e5f2:	f7ff ff0b 	bl	810e40c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 810e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e5f8:	685b      	ldr	r3, [r3, #4]
 810e5fa:	f003 0303 	and.w	r3, r3, #3
 810e5fe:	2b00      	cmp	r3, #0
 810e600:	d010      	beq.n	810e624 <pbuf_alloc+0x1c4>
 810e602:	4b0b      	ldr	r3, [pc, #44]	; (810e630 <pbuf_alloc+0x1d0>)
 810e604:	f44f 7291 	mov.w	r2, #290	; 0x122
 810e608:	490d      	ldr	r1, [pc, #52]	; (810e640 <pbuf_alloc+0x1e0>)
 810e60a:	480b      	ldr	r0, [pc, #44]	; (810e638 <pbuf_alloc+0x1d8>)
 810e60c:	f004 fb50 	bl	8112cb0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 810e610:	e008      	b.n	810e624 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 810e612:	4b07      	ldr	r3, [pc, #28]	; (810e630 <pbuf_alloc+0x1d0>)
 810e614:	f240 1227 	movw	r2, #295	; 0x127
 810e618:	490a      	ldr	r1, [pc, #40]	; (810e644 <pbuf_alloc+0x1e4>)
 810e61a:	4807      	ldr	r0, [pc, #28]	; (810e638 <pbuf_alloc+0x1d8>)
 810e61c:	f004 fb48 	bl	8112cb0 <iprintf>
      return NULL;
 810e620:	2300      	movs	r3, #0
 810e622:	e001      	b.n	810e628 <pbuf_alloc+0x1c8>
      break;
 810e624:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 810e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810e628:	4618      	mov	r0, r3
 810e62a:	3728      	adds	r7, #40	; 0x28
 810e62c:	46bd      	mov	sp, r7
 810e62e:	bd80      	pop	{r7, pc}
 810e630:	08115cc0 	.word	0x08115cc0
 810e634:	08115d1c 	.word	0x08115d1c
 810e638:	08115d4c 	.word	0x08115d4c
 810e63c:	08115d74 	.word	0x08115d74
 810e640:	08115da8 	.word	0x08115da8
 810e644:	08115dd4 	.word	0x08115dd4

0810e648 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 810e648:	b580      	push	{r7, lr}
 810e64a:	b086      	sub	sp, #24
 810e64c:	af02      	add	r7, sp, #8
 810e64e:	6078      	str	r0, [r7, #4]
 810e650:	460b      	mov	r3, r1
 810e652:	807b      	strh	r3, [r7, #2]
 810e654:	4613      	mov	r3, r2
 810e656:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 810e658:	883b      	ldrh	r3, [r7, #0]
 810e65a:	2b41      	cmp	r3, #65	; 0x41
 810e65c:	d009      	beq.n	810e672 <pbuf_alloc_reference+0x2a>
 810e65e:	883b      	ldrh	r3, [r7, #0]
 810e660:	2b01      	cmp	r3, #1
 810e662:	d006      	beq.n	810e672 <pbuf_alloc_reference+0x2a>
 810e664:	4b0f      	ldr	r3, [pc, #60]	; (810e6a4 <pbuf_alloc_reference+0x5c>)
 810e666:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 810e66a:	490f      	ldr	r1, [pc, #60]	; (810e6a8 <pbuf_alloc_reference+0x60>)
 810e66c:	480f      	ldr	r0, [pc, #60]	; (810e6ac <pbuf_alloc_reference+0x64>)
 810e66e:	f004 fb1f 	bl	8112cb0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 810e672:	2008      	movs	r0, #8
 810e674:	f7ff fb1c 	bl	810dcb0 <memp_malloc>
 810e678:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 810e67a:	68fb      	ldr	r3, [r7, #12]
 810e67c:	2b00      	cmp	r3, #0
 810e67e:	d101      	bne.n	810e684 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 810e680:	2300      	movs	r3, #0
 810e682:	e00b      	b.n	810e69c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 810e684:	8879      	ldrh	r1, [r7, #2]
 810e686:	887a      	ldrh	r2, [r7, #2]
 810e688:	2300      	movs	r3, #0
 810e68a:	9301      	str	r3, [sp, #4]
 810e68c:	883b      	ldrh	r3, [r7, #0]
 810e68e:	9300      	str	r3, [sp, #0]
 810e690:	460b      	mov	r3, r1
 810e692:	6879      	ldr	r1, [r7, #4]
 810e694:	68f8      	ldr	r0, [r7, #12]
 810e696:	f7ff feb9 	bl	810e40c <pbuf_init_alloced_pbuf>
  return p;
 810e69a:	68fb      	ldr	r3, [r7, #12]
}
 810e69c:	4618      	mov	r0, r3
 810e69e:	3710      	adds	r7, #16
 810e6a0:	46bd      	mov	sp, r7
 810e6a2:	bd80      	pop	{r7, pc}
 810e6a4:	08115cc0 	.word	0x08115cc0
 810e6a8:	08115df0 	.word	0x08115df0
 810e6ac:	08115d4c 	.word	0x08115d4c

0810e6b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 810e6b0:	b580      	push	{r7, lr}
 810e6b2:	b088      	sub	sp, #32
 810e6b4:	af02      	add	r7, sp, #8
 810e6b6:	607b      	str	r3, [r7, #4]
 810e6b8:	4603      	mov	r3, r0
 810e6ba:	73fb      	strb	r3, [r7, #15]
 810e6bc:	460b      	mov	r3, r1
 810e6be:	81bb      	strh	r3, [r7, #12]
 810e6c0:	4613      	mov	r3, r2
 810e6c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 810e6c4:	7bfb      	ldrb	r3, [r7, #15]
 810e6c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 810e6c8:	8a7b      	ldrh	r3, [r7, #18]
 810e6ca:	3303      	adds	r3, #3
 810e6cc:	f023 0203 	bic.w	r2, r3, #3
 810e6d0:	89bb      	ldrh	r3, [r7, #12]
 810e6d2:	441a      	add	r2, r3
 810e6d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810e6d6:	429a      	cmp	r2, r3
 810e6d8:	d901      	bls.n	810e6de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 810e6da:	2300      	movs	r3, #0
 810e6dc:	e018      	b.n	810e710 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 810e6de:	6a3b      	ldr	r3, [r7, #32]
 810e6e0:	2b00      	cmp	r3, #0
 810e6e2:	d007      	beq.n	810e6f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 810e6e4:	8a7b      	ldrh	r3, [r7, #18]
 810e6e6:	3303      	adds	r3, #3
 810e6e8:	f023 0303 	bic.w	r3, r3, #3
 810e6ec:	6a3a      	ldr	r2, [r7, #32]
 810e6ee:	4413      	add	r3, r2
 810e6f0:	617b      	str	r3, [r7, #20]
 810e6f2:	e001      	b.n	810e6f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 810e6f4:	2300      	movs	r3, #0
 810e6f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 810e6f8:	6878      	ldr	r0, [r7, #4]
 810e6fa:	89b9      	ldrh	r1, [r7, #12]
 810e6fc:	89ba      	ldrh	r2, [r7, #12]
 810e6fe:	2302      	movs	r3, #2
 810e700:	9301      	str	r3, [sp, #4]
 810e702:	897b      	ldrh	r3, [r7, #10]
 810e704:	9300      	str	r3, [sp, #0]
 810e706:	460b      	mov	r3, r1
 810e708:	6979      	ldr	r1, [r7, #20]
 810e70a:	f7ff fe7f 	bl	810e40c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 810e70e:	687b      	ldr	r3, [r7, #4]
}
 810e710:	4618      	mov	r0, r3
 810e712:	3718      	adds	r7, #24
 810e714:	46bd      	mov	sp, r7
 810e716:	bd80      	pop	{r7, pc}

0810e718 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 810e718:	b580      	push	{r7, lr}
 810e71a:	b084      	sub	sp, #16
 810e71c:	af00      	add	r7, sp, #0
 810e71e:	6078      	str	r0, [r7, #4]
 810e720:	460b      	mov	r3, r1
 810e722:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 810e724:	687b      	ldr	r3, [r7, #4]
 810e726:	2b00      	cmp	r3, #0
 810e728:	d106      	bne.n	810e738 <pbuf_realloc+0x20>
 810e72a:	4b3a      	ldr	r3, [pc, #232]	; (810e814 <pbuf_realloc+0xfc>)
 810e72c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 810e730:	4939      	ldr	r1, [pc, #228]	; (810e818 <pbuf_realloc+0x100>)
 810e732:	483a      	ldr	r0, [pc, #232]	; (810e81c <pbuf_realloc+0x104>)
 810e734:	f004 fabc 	bl	8112cb0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 810e738:	687b      	ldr	r3, [r7, #4]
 810e73a:	891b      	ldrh	r3, [r3, #8]
 810e73c:	887a      	ldrh	r2, [r7, #2]
 810e73e:	429a      	cmp	r2, r3
 810e740:	d263      	bcs.n	810e80a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 810e742:	687b      	ldr	r3, [r7, #4]
 810e744:	891a      	ldrh	r2, [r3, #8]
 810e746:	887b      	ldrh	r3, [r7, #2]
 810e748:	1ad3      	subs	r3, r2, r3
 810e74a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 810e74c:	887b      	ldrh	r3, [r7, #2]
 810e74e:	817b      	strh	r3, [r7, #10]
  q = p;
 810e750:	687b      	ldr	r3, [r7, #4]
 810e752:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 810e754:	e018      	b.n	810e788 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 810e756:	68fb      	ldr	r3, [r7, #12]
 810e758:	895b      	ldrh	r3, [r3, #10]
 810e75a:	897a      	ldrh	r2, [r7, #10]
 810e75c:	1ad3      	subs	r3, r2, r3
 810e75e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 810e760:	68fb      	ldr	r3, [r7, #12]
 810e762:	891a      	ldrh	r2, [r3, #8]
 810e764:	893b      	ldrh	r3, [r7, #8]
 810e766:	1ad3      	subs	r3, r2, r3
 810e768:	b29a      	uxth	r2, r3
 810e76a:	68fb      	ldr	r3, [r7, #12]
 810e76c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 810e76e:	68fb      	ldr	r3, [r7, #12]
 810e770:	681b      	ldr	r3, [r3, #0]
 810e772:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 810e774:	68fb      	ldr	r3, [r7, #12]
 810e776:	2b00      	cmp	r3, #0
 810e778:	d106      	bne.n	810e788 <pbuf_realloc+0x70>
 810e77a:	4b26      	ldr	r3, [pc, #152]	; (810e814 <pbuf_realloc+0xfc>)
 810e77c:	f240 12af 	movw	r2, #431	; 0x1af
 810e780:	4927      	ldr	r1, [pc, #156]	; (810e820 <pbuf_realloc+0x108>)
 810e782:	4826      	ldr	r0, [pc, #152]	; (810e81c <pbuf_realloc+0x104>)
 810e784:	f004 fa94 	bl	8112cb0 <iprintf>
  while (rem_len > q->len) {
 810e788:	68fb      	ldr	r3, [r7, #12]
 810e78a:	895b      	ldrh	r3, [r3, #10]
 810e78c:	897a      	ldrh	r2, [r7, #10]
 810e78e:	429a      	cmp	r2, r3
 810e790:	d8e1      	bhi.n	810e756 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 810e792:	68fb      	ldr	r3, [r7, #12]
 810e794:	7b1b      	ldrb	r3, [r3, #12]
 810e796:	f003 030f 	and.w	r3, r3, #15
 810e79a:	2b00      	cmp	r3, #0
 810e79c:	d121      	bne.n	810e7e2 <pbuf_realloc+0xca>
 810e79e:	68fb      	ldr	r3, [r7, #12]
 810e7a0:	895b      	ldrh	r3, [r3, #10]
 810e7a2:	897a      	ldrh	r2, [r7, #10]
 810e7a4:	429a      	cmp	r2, r3
 810e7a6:	d01c      	beq.n	810e7e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 810e7a8:	68fb      	ldr	r3, [r7, #12]
 810e7aa:	7b5b      	ldrb	r3, [r3, #13]
 810e7ac:	f003 0302 	and.w	r3, r3, #2
 810e7b0:	2b00      	cmp	r3, #0
 810e7b2:	d116      	bne.n	810e7e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 810e7b4:	68fb      	ldr	r3, [r7, #12]
 810e7b6:	685a      	ldr	r2, [r3, #4]
 810e7b8:	68fb      	ldr	r3, [r7, #12]
 810e7ba:	1ad3      	subs	r3, r2, r3
 810e7bc:	b29a      	uxth	r2, r3
 810e7be:	897b      	ldrh	r3, [r7, #10]
 810e7c0:	4413      	add	r3, r2
 810e7c2:	b29b      	uxth	r3, r3
 810e7c4:	4619      	mov	r1, r3
 810e7c6:	68f8      	ldr	r0, [r7, #12]
 810e7c8:	f7fe ffba 	bl	810d740 <mem_trim>
 810e7cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 810e7ce:	68fb      	ldr	r3, [r7, #12]
 810e7d0:	2b00      	cmp	r3, #0
 810e7d2:	d106      	bne.n	810e7e2 <pbuf_realloc+0xca>
 810e7d4:	4b0f      	ldr	r3, [pc, #60]	; (810e814 <pbuf_realloc+0xfc>)
 810e7d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 810e7da:	4912      	ldr	r1, [pc, #72]	; (810e824 <pbuf_realloc+0x10c>)
 810e7dc:	480f      	ldr	r0, [pc, #60]	; (810e81c <pbuf_realloc+0x104>)
 810e7de:	f004 fa67 	bl	8112cb0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 810e7e2:	68fb      	ldr	r3, [r7, #12]
 810e7e4:	897a      	ldrh	r2, [r7, #10]
 810e7e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 810e7e8:	68fb      	ldr	r3, [r7, #12]
 810e7ea:	895a      	ldrh	r2, [r3, #10]
 810e7ec:	68fb      	ldr	r3, [r7, #12]
 810e7ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 810e7f0:	68fb      	ldr	r3, [r7, #12]
 810e7f2:	681b      	ldr	r3, [r3, #0]
 810e7f4:	2b00      	cmp	r3, #0
 810e7f6:	d004      	beq.n	810e802 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 810e7f8:	68fb      	ldr	r3, [r7, #12]
 810e7fa:	681b      	ldr	r3, [r3, #0]
 810e7fc:	4618      	mov	r0, r3
 810e7fe:	f000 f911 	bl	810ea24 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 810e802:	68fb      	ldr	r3, [r7, #12]
 810e804:	2200      	movs	r2, #0
 810e806:	601a      	str	r2, [r3, #0]
 810e808:	e000      	b.n	810e80c <pbuf_realloc+0xf4>
    return;
 810e80a:	bf00      	nop

}
 810e80c:	3710      	adds	r7, #16
 810e80e:	46bd      	mov	sp, r7
 810e810:	bd80      	pop	{r7, pc}
 810e812:	bf00      	nop
 810e814:	08115cc0 	.word	0x08115cc0
 810e818:	08115e04 	.word	0x08115e04
 810e81c:	08115d4c 	.word	0x08115d4c
 810e820:	08115e1c 	.word	0x08115e1c
 810e824:	08115e34 	.word	0x08115e34

0810e828 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 810e828:	b580      	push	{r7, lr}
 810e82a:	b086      	sub	sp, #24
 810e82c:	af00      	add	r7, sp, #0
 810e82e:	60f8      	str	r0, [r7, #12]
 810e830:	60b9      	str	r1, [r7, #8]
 810e832:	4613      	mov	r3, r2
 810e834:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810e836:	68fb      	ldr	r3, [r7, #12]
 810e838:	2b00      	cmp	r3, #0
 810e83a:	d106      	bne.n	810e84a <pbuf_add_header_impl+0x22>
 810e83c:	4b2b      	ldr	r3, [pc, #172]	; (810e8ec <pbuf_add_header_impl+0xc4>)
 810e83e:	f240 12df 	movw	r2, #479	; 0x1df
 810e842:	492b      	ldr	r1, [pc, #172]	; (810e8f0 <pbuf_add_header_impl+0xc8>)
 810e844:	482b      	ldr	r0, [pc, #172]	; (810e8f4 <pbuf_add_header_impl+0xcc>)
 810e846:	f004 fa33 	bl	8112cb0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 810e84a:	68fb      	ldr	r3, [r7, #12]
 810e84c:	2b00      	cmp	r3, #0
 810e84e:	d003      	beq.n	810e858 <pbuf_add_header_impl+0x30>
 810e850:	68bb      	ldr	r3, [r7, #8]
 810e852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810e856:	d301      	bcc.n	810e85c <pbuf_add_header_impl+0x34>
    return 1;
 810e858:	2301      	movs	r3, #1
 810e85a:	e043      	b.n	810e8e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 810e85c:	68bb      	ldr	r3, [r7, #8]
 810e85e:	2b00      	cmp	r3, #0
 810e860:	d101      	bne.n	810e866 <pbuf_add_header_impl+0x3e>
    return 0;
 810e862:	2300      	movs	r3, #0
 810e864:	e03e      	b.n	810e8e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 810e866:	68bb      	ldr	r3, [r7, #8]
 810e868:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 810e86a:	68fb      	ldr	r3, [r7, #12]
 810e86c:	891a      	ldrh	r2, [r3, #8]
 810e86e:	8a7b      	ldrh	r3, [r7, #18]
 810e870:	4413      	add	r3, r2
 810e872:	b29b      	uxth	r3, r3
 810e874:	8a7a      	ldrh	r2, [r7, #18]
 810e876:	429a      	cmp	r2, r3
 810e878:	d901      	bls.n	810e87e <pbuf_add_header_impl+0x56>
    return 1;
 810e87a:	2301      	movs	r3, #1
 810e87c:	e032      	b.n	810e8e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 810e87e:	68fb      	ldr	r3, [r7, #12]
 810e880:	7b1b      	ldrb	r3, [r3, #12]
 810e882:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 810e884:	8a3b      	ldrh	r3, [r7, #16]
 810e886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e88a:	2b00      	cmp	r3, #0
 810e88c:	d00c      	beq.n	810e8a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 810e88e:	68fb      	ldr	r3, [r7, #12]
 810e890:	685a      	ldr	r2, [r3, #4]
 810e892:	68bb      	ldr	r3, [r7, #8]
 810e894:	425b      	negs	r3, r3
 810e896:	4413      	add	r3, r2
 810e898:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 810e89a:	68fb      	ldr	r3, [r7, #12]
 810e89c:	3310      	adds	r3, #16
 810e89e:	697a      	ldr	r2, [r7, #20]
 810e8a0:	429a      	cmp	r2, r3
 810e8a2:	d20d      	bcs.n	810e8c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 810e8a4:	2301      	movs	r3, #1
 810e8a6:	e01d      	b.n	810e8e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 810e8a8:	79fb      	ldrb	r3, [r7, #7]
 810e8aa:	2b00      	cmp	r3, #0
 810e8ac:	d006      	beq.n	810e8bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 810e8ae:	68fb      	ldr	r3, [r7, #12]
 810e8b0:	685a      	ldr	r2, [r3, #4]
 810e8b2:	68bb      	ldr	r3, [r7, #8]
 810e8b4:	425b      	negs	r3, r3
 810e8b6:	4413      	add	r3, r2
 810e8b8:	617b      	str	r3, [r7, #20]
 810e8ba:	e001      	b.n	810e8c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 810e8bc:	2301      	movs	r3, #1
 810e8be:	e011      	b.n	810e8e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 810e8c0:	68fb      	ldr	r3, [r7, #12]
 810e8c2:	697a      	ldr	r2, [r7, #20]
 810e8c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 810e8c6:	68fb      	ldr	r3, [r7, #12]
 810e8c8:	895a      	ldrh	r2, [r3, #10]
 810e8ca:	8a7b      	ldrh	r3, [r7, #18]
 810e8cc:	4413      	add	r3, r2
 810e8ce:	b29a      	uxth	r2, r3
 810e8d0:	68fb      	ldr	r3, [r7, #12]
 810e8d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 810e8d4:	68fb      	ldr	r3, [r7, #12]
 810e8d6:	891a      	ldrh	r2, [r3, #8]
 810e8d8:	8a7b      	ldrh	r3, [r7, #18]
 810e8da:	4413      	add	r3, r2
 810e8dc:	b29a      	uxth	r2, r3
 810e8de:	68fb      	ldr	r3, [r7, #12]
 810e8e0:	811a      	strh	r2, [r3, #8]


  return 0;
 810e8e2:	2300      	movs	r3, #0
}
 810e8e4:	4618      	mov	r0, r3
 810e8e6:	3718      	adds	r7, #24
 810e8e8:	46bd      	mov	sp, r7
 810e8ea:	bd80      	pop	{r7, pc}
 810e8ec:	08115cc0 	.word	0x08115cc0
 810e8f0:	08115e50 	.word	0x08115e50
 810e8f4:	08115d4c 	.word	0x08115d4c

0810e8f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 810e8f8:	b580      	push	{r7, lr}
 810e8fa:	b082      	sub	sp, #8
 810e8fc:	af00      	add	r7, sp, #0
 810e8fe:	6078      	str	r0, [r7, #4]
 810e900:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 810e902:	2200      	movs	r2, #0
 810e904:	6839      	ldr	r1, [r7, #0]
 810e906:	6878      	ldr	r0, [r7, #4]
 810e908:	f7ff ff8e 	bl	810e828 <pbuf_add_header_impl>
 810e90c:	4603      	mov	r3, r0
}
 810e90e:	4618      	mov	r0, r3
 810e910:	3708      	adds	r7, #8
 810e912:	46bd      	mov	sp, r7
 810e914:	bd80      	pop	{r7, pc}
	...

0810e918 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 810e918:	b580      	push	{r7, lr}
 810e91a:	b084      	sub	sp, #16
 810e91c:	af00      	add	r7, sp, #0
 810e91e:	6078      	str	r0, [r7, #4]
 810e920:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810e922:	687b      	ldr	r3, [r7, #4]
 810e924:	2b00      	cmp	r3, #0
 810e926:	d106      	bne.n	810e936 <pbuf_remove_header+0x1e>
 810e928:	4b20      	ldr	r3, [pc, #128]	; (810e9ac <pbuf_remove_header+0x94>)
 810e92a:	f240 224b 	movw	r2, #587	; 0x24b
 810e92e:	4920      	ldr	r1, [pc, #128]	; (810e9b0 <pbuf_remove_header+0x98>)
 810e930:	4820      	ldr	r0, [pc, #128]	; (810e9b4 <pbuf_remove_header+0x9c>)
 810e932:	f004 f9bd 	bl	8112cb0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 810e936:	687b      	ldr	r3, [r7, #4]
 810e938:	2b00      	cmp	r3, #0
 810e93a:	d003      	beq.n	810e944 <pbuf_remove_header+0x2c>
 810e93c:	683b      	ldr	r3, [r7, #0]
 810e93e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810e942:	d301      	bcc.n	810e948 <pbuf_remove_header+0x30>
    return 1;
 810e944:	2301      	movs	r3, #1
 810e946:	e02c      	b.n	810e9a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 810e948:	683b      	ldr	r3, [r7, #0]
 810e94a:	2b00      	cmp	r3, #0
 810e94c:	d101      	bne.n	810e952 <pbuf_remove_header+0x3a>
    return 0;
 810e94e:	2300      	movs	r3, #0
 810e950:	e027      	b.n	810e9a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 810e952:	683b      	ldr	r3, [r7, #0]
 810e954:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 810e956:	687b      	ldr	r3, [r7, #4]
 810e958:	895b      	ldrh	r3, [r3, #10]
 810e95a:	89fa      	ldrh	r2, [r7, #14]
 810e95c:	429a      	cmp	r2, r3
 810e95e:	d908      	bls.n	810e972 <pbuf_remove_header+0x5a>
 810e960:	4b12      	ldr	r3, [pc, #72]	; (810e9ac <pbuf_remove_header+0x94>)
 810e962:	f240 2255 	movw	r2, #597	; 0x255
 810e966:	4914      	ldr	r1, [pc, #80]	; (810e9b8 <pbuf_remove_header+0xa0>)
 810e968:	4812      	ldr	r0, [pc, #72]	; (810e9b4 <pbuf_remove_header+0x9c>)
 810e96a:	f004 f9a1 	bl	8112cb0 <iprintf>
 810e96e:	2301      	movs	r3, #1
 810e970:	e017      	b.n	810e9a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 810e972:	687b      	ldr	r3, [r7, #4]
 810e974:	685b      	ldr	r3, [r3, #4]
 810e976:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 810e978:	687b      	ldr	r3, [r7, #4]
 810e97a:	685a      	ldr	r2, [r3, #4]
 810e97c:	683b      	ldr	r3, [r7, #0]
 810e97e:	441a      	add	r2, r3
 810e980:	687b      	ldr	r3, [r7, #4]
 810e982:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 810e984:	687b      	ldr	r3, [r7, #4]
 810e986:	895a      	ldrh	r2, [r3, #10]
 810e988:	89fb      	ldrh	r3, [r7, #14]
 810e98a:	1ad3      	subs	r3, r2, r3
 810e98c:	b29a      	uxth	r2, r3
 810e98e:	687b      	ldr	r3, [r7, #4]
 810e990:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 810e992:	687b      	ldr	r3, [r7, #4]
 810e994:	891a      	ldrh	r2, [r3, #8]
 810e996:	89fb      	ldrh	r3, [r7, #14]
 810e998:	1ad3      	subs	r3, r2, r3
 810e99a:	b29a      	uxth	r2, r3
 810e99c:	687b      	ldr	r3, [r7, #4]
 810e99e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 810e9a0:	2300      	movs	r3, #0
}
 810e9a2:	4618      	mov	r0, r3
 810e9a4:	3710      	adds	r7, #16
 810e9a6:	46bd      	mov	sp, r7
 810e9a8:	bd80      	pop	{r7, pc}
 810e9aa:	bf00      	nop
 810e9ac:	08115cc0 	.word	0x08115cc0
 810e9b0:	08115e50 	.word	0x08115e50
 810e9b4:	08115d4c 	.word	0x08115d4c
 810e9b8:	08115e5c 	.word	0x08115e5c

0810e9bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 810e9bc:	b580      	push	{r7, lr}
 810e9be:	b082      	sub	sp, #8
 810e9c0:	af00      	add	r7, sp, #0
 810e9c2:	6078      	str	r0, [r7, #4]
 810e9c4:	460b      	mov	r3, r1
 810e9c6:	807b      	strh	r3, [r7, #2]
 810e9c8:	4613      	mov	r3, r2
 810e9ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 810e9cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810e9d0:	2b00      	cmp	r3, #0
 810e9d2:	da08      	bge.n	810e9e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 810e9d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810e9d8:	425b      	negs	r3, r3
 810e9da:	4619      	mov	r1, r3
 810e9dc:	6878      	ldr	r0, [r7, #4]
 810e9de:	f7ff ff9b 	bl	810e918 <pbuf_remove_header>
 810e9e2:	4603      	mov	r3, r0
 810e9e4:	e007      	b.n	810e9f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 810e9e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810e9ea:	787a      	ldrb	r2, [r7, #1]
 810e9ec:	4619      	mov	r1, r3
 810e9ee:	6878      	ldr	r0, [r7, #4]
 810e9f0:	f7ff ff1a 	bl	810e828 <pbuf_add_header_impl>
 810e9f4:	4603      	mov	r3, r0
  }
}
 810e9f6:	4618      	mov	r0, r3
 810e9f8:	3708      	adds	r7, #8
 810e9fa:	46bd      	mov	sp, r7
 810e9fc:	bd80      	pop	{r7, pc}

0810e9fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 810e9fe:	b580      	push	{r7, lr}
 810ea00:	b082      	sub	sp, #8
 810ea02:	af00      	add	r7, sp, #0
 810ea04:	6078      	str	r0, [r7, #4]
 810ea06:	460b      	mov	r3, r1
 810ea08:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 810ea0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810ea0e:	2201      	movs	r2, #1
 810ea10:	4619      	mov	r1, r3
 810ea12:	6878      	ldr	r0, [r7, #4]
 810ea14:	f7ff ffd2 	bl	810e9bc <pbuf_header_impl>
 810ea18:	4603      	mov	r3, r0
}
 810ea1a:	4618      	mov	r0, r3
 810ea1c:	3708      	adds	r7, #8
 810ea1e:	46bd      	mov	sp, r7
 810ea20:	bd80      	pop	{r7, pc}
	...

0810ea24 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 810ea24:	b580      	push	{r7, lr}
 810ea26:	b088      	sub	sp, #32
 810ea28:	af00      	add	r7, sp, #0
 810ea2a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 810ea2c:	687b      	ldr	r3, [r7, #4]
 810ea2e:	2b00      	cmp	r3, #0
 810ea30:	d10b      	bne.n	810ea4a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 810ea32:	687b      	ldr	r3, [r7, #4]
 810ea34:	2b00      	cmp	r3, #0
 810ea36:	d106      	bne.n	810ea46 <pbuf_free+0x22>
 810ea38:	4b3b      	ldr	r3, [pc, #236]	; (810eb28 <pbuf_free+0x104>)
 810ea3a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 810ea3e:	493b      	ldr	r1, [pc, #236]	; (810eb2c <pbuf_free+0x108>)
 810ea40:	483b      	ldr	r0, [pc, #236]	; (810eb30 <pbuf_free+0x10c>)
 810ea42:	f004 f935 	bl	8112cb0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 810ea46:	2300      	movs	r3, #0
 810ea48:	e069      	b.n	810eb1e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 810ea4a:	2300      	movs	r3, #0
 810ea4c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 810ea4e:	e062      	b.n	810eb16 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 810ea50:	f000 fb80 	bl	810f154 <sys_arch_protect>
 810ea54:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 810ea56:	687b      	ldr	r3, [r7, #4]
 810ea58:	7b9b      	ldrb	r3, [r3, #14]
 810ea5a:	2b00      	cmp	r3, #0
 810ea5c:	d106      	bne.n	810ea6c <pbuf_free+0x48>
 810ea5e:	4b32      	ldr	r3, [pc, #200]	; (810eb28 <pbuf_free+0x104>)
 810ea60:	f240 22f1 	movw	r2, #753	; 0x2f1
 810ea64:	4933      	ldr	r1, [pc, #204]	; (810eb34 <pbuf_free+0x110>)
 810ea66:	4832      	ldr	r0, [pc, #200]	; (810eb30 <pbuf_free+0x10c>)
 810ea68:	f004 f922 	bl	8112cb0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 810ea6c:	687b      	ldr	r3, [r7, #4]
 810ea6e:	7b9b      	ldrb	r3, [r3, #14]
 810ea70:	3b01      	subs	r3, #1
 810ea72:	b2da      	uxtb	r2, r3
 810ea74:	687b      	ldr	r3, [r7, #4]
 810ea76:	739a      	strb	r2, [r3, #14]
 810ea78:	687b      	ldr	r3, [r7, #4]
 810ea7a:	7b9b      	ldrb	r3, [r3, #14]
 810ea7c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 810ea7e:	69b8      	ldr	r0, [r7, #24]
 810ea80:	f000 fb76 	bl	810f170 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 810ea84:	7dfb      	ldrb	r3, [r7, #23]
 810ea86:	2b00      	cmp	r3, #0
 810ea88:	d143      	bne.n	810eb12 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 810ea8a:	687b      	ldr	r3, [r7, #4]
 810ea8c:	681b      	ldr	r3, [r3, #0]
 810ea8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 810ea90:	687b      	ldr	r3, [r7, #4]
 810ea92:	7b1b      	ldrb	r3, [r3, #12]
 810ea94:	f003 030f 	and.w	r3, r3, #15
 810ea98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 810ea9a:	687b      	ldr	r3, [r7, #4]
 810ea9c:	7b5b      	ldrb	r3, [r3, #13]
 810ea9e:	f003 0302 	and.w	r3, r3, #2
 810eaa2:	2b00      	cmp	r3, #0
 810eaa4:	d011      	beq.n	810eaca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 810eaa6:	687b      	ldr	r3, [r7, #4]
 810eaa8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 810eaaa:	68bb      	ldr	r3, [r7, #8]
 810eaac:	691b      	ldr	r3, [r3, #16]
 810eaae:	2b00      	cmp	r3, #0
 810eab0:	d106      	bne.n	810eac0 <pbuf_free+0x9c>
 810eab2:	4b1d      	ldr	r3, [pc, #116]	; (810eb28 <pbuf_free+0x104>)
 810eab4:	f240 22ff 	movw	r2, #767	; 0x2ff
 810eab8:	491f      	ldr	r1, [pc, #124]	; (810eb38 <pbuf_free+0x114>)
 810eaba:	481d      	ldr	r0, [pc, #116]	; (810eb30 <pbuf_free+0x10c>)
 810eabc:	f004 f8f8 	bl	8112cb0 <iprintf>
        pc->custom_free_function(p);
 810eac0:	68bb      	ldr	r3, [r7, #8]
 810eac2:	691b      	ldr	r3, [r3, #16]
 810eac4:	6878      	ldr	r0, [r7, #4]
 810eac6:	4798      	blx	r3
 810eac8:	e01d      	b.n	810eb06 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 810eaca:	7bfb      	ldrb	r3, [r7, #15]
 810eacc:	2b02      	cmp	r3, #2
 810eace:	d104      	bne.n	810eada <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 810ead0:	6879      	ldr	r1, [r7, #4]
 810ead2:	2009      	movs	r0, #9
 810ead4:	f7ff f962 	bl	810dd9c <memp_free>
 810ead8:	e015      	b.n	810eb06 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 810eada:	7bfb      	ldrb	r3, [r7, #15]
 810eadc:	2b01      	cmp	r3, #1
 810eade:	d104      	bne.n	810eaea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 810eae0:	6879      	ldr	r1, [r7, #4]
 810eae2:	2008      	movs	r0, #8
 810eae4:	f7ff f95a 	bl	810dd9c <memp_free>
 810eae8:	e00d      	b.n	810eb06 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 810eaea:	7bfb      	ldrb	r3, [r7, #15]
 810eaec:	2b00      	cmp	r3, #0
 810eaee:	d103      	bne.n	810eaf8 <pbuf_free+0xd4>
          mem_free(p);
 810eaf0:	6878      	ldr	r0, [r7, #4]
 810eaf2:	f7fe fd95 	bl	810d620 <mem_free>
 810eaf6:	e006      	b.n	810eb06 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 810eaf8:	4b0b      	ldr	r3, [pc, #44]	; (810eb28 <pbuf_free+0x104>)
 810eafa:	f240 320f 	movw	r2, #783	; 0x30f
 810eafe:	490f      	ldr	r1, [pc, #60]	; (810eb3c <pbuf_free+0x118>)
 810eb00:	480b      	ldr	r0, [pc, #44]	; (810eb30 <pbuf_free+0x10c>)
 810eb02:	f004 f8d5 	bl	8112cb0 <iprintf>
        }
      }
      count++;
 810eb06:	7ffb      	ldrb	r3, [r7, #31]
 810eb08:	3301      	adds	r3, #1
 810eb0a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 810eb0c:	693b      	ldr	r3, [r7, #16]
 810eb0e:	607b      	str	r3, [r7, #4]
 810eb10:	e001      	b.n	810eb16 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 810eb12:	2300      	movs	r3, #0
 810eb14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810eb16:	687b      	ldr	r3, [r7, #4]
 810eb18:	2b00      	cmp	r3, #0
 810eb1a:	d199      	bne.n	810ea50 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 810eb1c:	7ffb      	ldrb	r3, [r7, #31]
}
 810eb1e:	4618      	mov	r0, r3
 810eb20:	3720      	adds	r7, #32
 810eb22:	46bd      	mov	sp, r7
 810eb24:	bd80      	pop	{r7, pc}
 810eb26:	bf00      	nop
 810eb28:	08115cc0 	.word	0x08115cc0
 810eb2c:	08115e50 	.word	0x08115e50
 810eb30:	08115d4c 	.word	0x08115d4c
 810eb34:	08115e7c 	.word	0x08115e7c
 810eb38:	08115e94 	.word	0x08115e94
 810eb3c:	08115eb8 	.word	0x08115eb8

0810eb40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 810eb40:	b480      	push	{r7}
 810eb42:	b085      	sub	sp, #20
 810eb44:	af00      	add	r7, sp, #0
 810eb46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 810eb48:	2300      	movs	r3, #0
 810eb4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 810eb4c:	e005      	b.n	810eb5a <pbuf_clen+0x1a>
    ++len;
 810eb4e:	89fb      	ldrh	r3, [r7, #14]
 810eb50:	3301      	adds	r3, #1
 810eb52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 810eb54:	687b      	ldr	r3, [r7, #4]
 810eb56:	681b      	ldr	r3, [r3, #0]
 810eb58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810eb5a:	687b      	ldr	r3, [r7, #4]
 810eb5c:	2b00      	cmp	r3, #0
 810eb5e:	d1f6      	bne.n	810eb4e <pbuf_clen+0xe>
  }
  return len;
 810eb60:	89fb      	ldrh	r3, [r7, #14]
}
 810eb62:	4618      	mov	r0, r3
 810eb64:	3714      	adds	r7, #20
 810eb66:	46bd      	mov	sp, r7
 810eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb6c:	4770      	bx	lr
	...

0810eb70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 810eb70:	b580      	push	{r7, lr}
 810eb72:	b084      	sub	sp, #16
 810eb74:	af00      	add	r7, sp, #0
 810eb76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 810eb78:	687b      	ldr	r3, [r7, #4]
 810eb7a:	2b00      	cmp	r3, #0
 810eb7c:	d016      	beq.n	810ebac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 810eb7e:	f000 fae9 	bl	810f154 <sys_arch_protect>
 810eb82:	60f8      	str	r0, [r7, #12]
 810eb84:	687b      	ldr	r3, [r7, #4]
 810eb86:	7b9b      	ldrb	r3, [r3, #14]
 810eb88:	3301      	adds	r3, #1
 810eb8a:	b2da      	uxtb	r2, r3
 810eb8c:	687b      	ldr	r3, [r7, #4]
 810eb8e:	739a      	strb	r2, [r3, #14]
 810eb90:	68f8      	ldr	r0, [r7, #12]
 810eb92:	f000 faed 	bl	810f170 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 810eb96:	687b      	ldr	r3, [r7, #4]
 810eb98:	7b9b      	ldrb	r3, [r3, #14]
 810eb9a:	2b00      	cmp	r3, #0
 810eb9c:	d106      	bne.n	810ebac <pbuf_ref+0x3c>
 810eb9e:	4b05      	ldr	r3, [pc, #20]	; (810ebb4 <pbuf_ref+0x44>)
 810eba0:	f240 3242 	movw	r2, #834	; 0x342
 810eba4:	4904      	ldr	r1, [pc, #16]	; (810ebb8 <pbuf_ref+0x48>)
 810eba6:	4805      	ldr	r0, [pc, #20]	; (810ebbc <pbuf_ref+0x4c>)
 810eba8:	f004 f882 	bl	8112cb0 <iprintf>
  }
}
 810ebac:	bf00      	nop
 810ebae:	3710      	adds	r7, #16
 810ebb0:	46bd      	mov	sp, r7
 810ebb2:	bd80      	pop	{r7, pc}
 810ebb4:	08115cc0 	.word	0x08115cc0
 810ebb8:	08115ecc 	.word	0x08115ecc
 810ebbc:	08115d4c 	.word	0x08115d4c

0810ebc0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 810ebc0:	b580      	push	{r7, lr}
 810ebc2:	b084      	sub	sp, #16
 810ebc4:	af00      	add	r7, sp, #0
 810ebc6:	6078      	str	r0, [r7, #4]
 810ebc8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 810ebca:	687b      	ldr	r3, [r7, #4]
 810ebcc:	2b00      	cmp	r3, #0
 810ebce:	d002      	beq.n	810ebd6 <pbuf_cat+0x16>
 810ebd0:	683b      	ldr	r3, [r7, #0]
 810ebd2:	2b00      	cmp	r3, #0
 810ebd4:	d107      	bne.n	810ebe6 <pbuf_cat+0x26>
 810ebd6:	4b20      	ldr	r3, [pc, #128]	; (810ec58 <pbuf_cat+0x98>)
 810ebd8:	f240 3259 	movw	r2, #857	; 0x359
 810ebdc:	491f      	ldr	r1, [pc, #124]	; (810ec5c <pbuf_cat+0x9c>)
 810ebde:	4820      	ldr	r0, [pc, #128]	; (810ec60 <pbuf_cat+0xa0>)
 810ebe0:	f004 f866 	bl	8112cb0 <iprintf>
 810ebe4:	e034      	b.n	810ec50 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 810ebe6:	687b      	ldr	r3, [r7, #4]
 810ebe8:	60fb      	str	r3, [r7, #12]
 810ebea:	e00a      	b.n	810ec02 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810ebec:	68fb      	ldr	r3, [r7, #12]
 810ebee:	891a      	ldrh	r2, [r3, #8]
 810ebf0:	683b      	ldr	r3, [r7, #0]
 810ebf2:	891b      	ldrh	r3, [r3, #8]
 810ebf4:	4413      	add	r3, r2
 810ebf6:	b29a      	uxth	r2, r3
 810ebf8:	68fb      	ldr	r3, [r7, #12]
 810ebfa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 810ebfc:	68fb      	ldr	r3, [r7, #12]
 810ebfe:	681b      	ldr	r3, [r3, #0]
 810ec00:	60fb      	str	r3, [r7, #12]
 810ec02:	68fb      	ldr	r3, [r7, #12]
 810ec04:	681b      	ldr	r3, [r3, #0]
 810ec06:	2b00      	cmp	r3, #0
 810ec08:	d1f0      	bne.n	810ebec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 810ec0a:	68fb      	ldr	r3, [r7, #12]
 810ec0c:	891a      	ldrh	r2, [r3, #8]
 810ec0e:	68fb      	ldr	r3, [r7, #12]
 810ec10:	895b      	ldrh	r3, [r3, #10]
 810ec12:	429a      	cmp	r2, r3
 810ec14:	d006      	beq.n	810ec24 <pbuf_cat+0x64>
 810ec16:	4b10      	ldr	r3, [pc, #64]	; (810ec58 <pbuf_cat+0x98>)
 810ec18:	f240 3262 	movw	r2, #866	; 0x362
 810ec1c:	4911      	ldr	r1, [pc, #68]	; (810ec64 <pbuf_cat+0xa4>)
 810ec1e:	4810      	ldr	r0, [pc, #64]	; (810ec60 <pbuf_cat+0xa0>)
 810ec20:	f004 f846 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 810ec24:	68fb      	ldr	r3, [r7, #12]
 810ec26:	681b      	ldr	r3, [r3, #0]
 810ec28:	2b00      	cmp	r3, #0
 810ec2a:	d006      	beq.n	810ec3a <pbuf_cat+0x7a>
 810ec2c:	4b0a      	ldr	r3, [pc, #40]	; (810ec58 <pbuf_cat+0x98>)
 810ec2e:	f240 3263 	movw	r2, #867	; 0x363
 810ec32:	490d      	ldr	r1, [pc, #52]	; (810ec68 <pbuf_cat+0xa8>)
 810ec34:	480a      	ldr	r0, [pc, #40]	; (810ec60 <pbuf_cat+0xa0>)
 810ec36:	f004 f83b 	bl	8112cb0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810ec3a:	68fb      	ldr	r3, [r7, #12]
 810ec3c:	891a      	ldrh	r2, [r3, #8]
 810ec3e:	683b      	ldr	r3, [r7, #0]
 810ec40:	891b      	ldrh	r3, [r3, #8]
 810ec42:	4413      	add	r3, r2
 810ec44:	b29a      	uxth	r2, r3
 810ec46:	68fb      	ldr	r3, [r7, #12]
 810ec48:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 810ec4a:	68fb      	ldr	r3, [r7, #12]
 810ec4c:	683a      	ldr	r2, [r7, #0]
 810ec4e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 810ec50:	3710      	adds	r7, #16
 810ec52:	46bd      	mov	sp, r7
 810ec54:	bd80      	pop	{r7, pc}
 810ec56:	bf00      	nop
 810ec58:	08115cc0 	.word	0x08115cc0
 810ec5c:	08115ee0 	.word	0x08115ee0
 810ec60:	08115d4c 	.word	0x08115d4c
 810ec64:	08115f18 	.word	0x08115f18
 810ec68:	08115f48 	.word	0x08115f48

0810ec6c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 810ec6c:	b580      	push	{r7, lr}
 810ec6e:	b082      	sub	sp, #8
 810ec70:	af00      	add	r7, sp, #0
 810ec72:	6078      	str	r0, [r7, #4]
 810ec74:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 810ec76:	6839      	ldr	r1, [r7, #0]
 810ec78:	6878      	ldr	r0, [r7, #4]
 810ec7a:	f7ff ffa1 	bl	810ebc0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 810ec7e:	6838      	ldr	r0, [r7, #0]
 810ec80:	f7ff ff76 	bl	810eb70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 810ec84:	bf00      	nop
 810ec86:	3708      	adds	r7, #8
 810ec88:	46bd      	mov	sp, r7
 810ec8a:	bd80      	pop	{r7, pc}

0810ec8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 810ec8c:	b580      	push	{r7, lr}
 810ec8e:	b086      	sub	sp, #24
 810ec90:	af00      	add	r7, sp, #0
 810ec92:	6078      	str	r0, [r7, #4]
 810ec94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 810ec96:	2300      	movs	r3, #0
 810ec98:	617b      	str	r3, [r7, #20]
 810ec9a:	2300      	movs	r3, #0
 810ec9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 810ec9e:	687b      	ldr	r3, [r7, #4]
 810eca0:	2b00      	cmp	r3, #0
 810eca2:	d008      	beq.n	810ecb6 <pbuf_copy+0x2a>
 810eca4:	683b      	ldr	r3, [r7, #0]
 810eca6:	2b00      	cmp	r3, #0
 810eca8:	d005      	beq.n	810ecb6 <pbuf_copy+0x2a>
 810ecaa:	687b      	ldr	r3, [r7, #4]
 810ecac:	891a      	ldrh	r2, [r3, #8]
 810ecae:	683b      	ldr	r3, [r7, #0]
 810ecb0:	891b      	ldrh	r3, [r3, #8]
 810ecb2:	429a      	cmp	r2, r3
 810ecb4:	d209      	bcs.n	810ecca <pbuf_copy+0x3e>
 810ecb6:	4b57      	ldr	r3, [pc, #348]	; (810ee14 <pbuf_copy+0x188>)
 810ecb8:	f240 32c9 	movw	r2, #969	; 0x3c9
 810ecbc:	4956      	ldr	r1, [pc, #344]	; (810ee18 <pbuf_copy+0x18c>)
 810ecbe:	4857      	ldr	r0, [pc, #348]	; (810ee1c <pbuf_copy+0x190>)
 810ecc0:	f003 fff6 	bl	8112cb0 <iprintf>
 810ecc4:	f06f 030f 	mvn.w	r3, #15
 810ecc8:	e09f      	b.n	810ee0a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 810ecca:	687b      	ldr	r3, [r7, #4]
 810eccc:	895b      	ldrh	r3, [r3, #10]
 810ecce:	461a      	mov	r2, r3
 810ecd0:	697b      	ldr	r3, [r7, #20]
 810ecd2:	1ad2      	subs	r2, r2, r3
 810ecd4:	683b      	ldr	r3, [r7, #0]
 810ecd6:	895b      	ldrh	r3, [r3, #10]
 810ecd8:	4619      	mov	r1, r3
 810ecda:	693b      	ldr	r3, [r7, #16]
 810ecdc:	1acb      	subs	r3, r1, r3
 810ecde:	429a      	cmp	r2, r3
 810ece0:	d306      	bcc.n	810ecf0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 810ece2:	683b      	ldr	r3, [r7, #0]
 810ece4:	895b      	ldrh	r3, [r3, #10]
 810ece6:	461a      	mov	r2, r3
 810ece8:	693b      	ldr	r3, [r7, #16]
 810ecea:	1ad3      	subs	r3, r2, r3
 810ecec:	60fb      	str	r3, [r7, #12]
 810ecee:	e005      	b.n	810ecfc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 810ecf0:	687b      	ldr	r3, [r7, #4]
 810ecf2:	895b      	ldrh	r3, [r3, #10]
 810ecf4:	461a      	mov	r2, r3
 810ecf6:	697b      	ldr	r3, [r7, #20]
 810ecf8:	1ad3      	subs	r3, r2, r3
 810ecfa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 810ecfc:	687b      	ldr	r3, [r7, #4]
 810ecfe:	685a      	ldr	r2, [r3, #4]
 810ed00:	697b      	ldr	r3, [r7, #20]
 810ed02:	18d0      	adds	r0, r2, r3
 810ed04:	683b      	ldr	r3, [r7, #0]
 810ed06:	685a      	ldr	r2, [r3, #4]
 810ed08:	693b      	ldr	r3, [r7, #16]
 810ed0a:	4413      	add	r3, r2
 810ed0c:	68fa      	ldr	r2, [r7, #12]
 810ed0e:	4619      	mov	r1, r3
 810ed10:	f003 faf3 	bl	81122fa <memcpy>
    offset_to += len;
 810ed14:	697a      	ldr	r2, [r7, #20]
 810ed16:	68fb      	ldr	r3, [r7, #12]
 810ed18:	4413      	add	r3, r2
 810ed1a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 810ed1c:	693a      	ldr	r2, [r7, #16]
 810ed1e:	68fb      	ldr	r3, [r7, #12]
 810ed20:	4413      	add	r3, r2
 810ed22:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 810ed24:	687b      	ldr	r3, [r7, #4]
 810ed26:	895b      	ldrh	r3, [r3, #10]
 810ed28:	461a      	mov	r2, r3
 810ed2a:	697b      	ldr	r3, [r7, #20]
 810ed2c:	4293      	cmp	r3, r2
 810ed2e:	d906      	bls.n	810ed3e <pbuf_copy+0xb2>
 810ed30:	4b38      	ldr	r3, [pc, #224]	; (810ee14 <pbuf_copy+0x188>)
 810ed32:	f240 32d9 	movw	r2, #985	; 0x3d9
 810ed36:	493a      	ldr	r1, [pc, #232]	; (810ee20 <pbuf_copy+0x194>)
 810ed38:	4838      	ldr	r0, [pc, #224]	; (810ee1c <pbuf_copy+0x190>)
 810ed3a:	f003 ffb9 	bl	8112cb0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 810ed3e:	683b      	ldr	r3, [r7, #0]
 810ed40:	895b      	ldrh	r3, [r3, #10]
 810ed42:	461a      	mov	r2, r3
 810ed44:	693b      	ldr	r3, [r7, #16]
 810ed46:	4293      	cmp	r3, r2
 810ed48:	d906      	bls.n	810ed58 <pbuf_copy+0xcc>
 810ed4a:	4b32      	ldr	r3, [pc, #200]	; (810ee14 <pbuf_copy+0x188>)
 810ed4c:	f240 32da 	movw	r2, #986	; 0x3da
 810ed50:	4934      	ldr	r1, [pc, #208]	; (810ee24 <pbuf_copy+0x198>)
 810ed52:	4832      	ldr	r0, [pc, #200]	; (810ee1c <pbuf_copy+0x190>)
 810ed54:	f003 ffac 	bl	8112cb0 <iprintf>
    if (offset_from >= p_from->len) {
 810ed58:	683b      	ldr	r3, [r7, #0]
 810ed5a:	895b      	ldrh	r3, [r3, #10]
 810ed5c:	461a      	mov	r2, r3
 810ed5e:	693b      	ldr	r3, [r7, #16]
 810ed60:	4293      	cmp	r3, r2
 810ed62:	d304      	bcc.n	810ed6e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 810ed64:	2300      	movs	r3, #0
 810ed66:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 810ed68:	683b      	ldr	r3, [r7, #0]
 810ed6a:	681b      	ldr	r3, [r3, #0]
 810ed6c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 810ed6e:	687b      	ldr	r3, [r7, #4]
 810ed70:	895b      	ldrh	r3, [r3, #10]
 810ed72:	461a      	mov	r2, r3
 810ed74:	697b      	ldr	r3, [r7, #20]
 810ed76:	4293      	cmp	r3, r2
 810ed78:	d114      	bne.n	810eda4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 810ed7a:	2300      	movs	r3, #0
 810ed7c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 810ed7e:	687b      	ldr	r3, [r7, #4]
 810ed80:	681b      	ldr	r3, [r3, #0]
 810ed82:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 810ed84:	687b      	ldr	r3, [r7, #4]
 810ed86:	2b00      	cmp	r3, #0
 810ed88:	d10c      	bne.n	810eda4 <pbuf_copy+0x118>
 810ed8a:	683b      	ldr	r3, [r7, #0]
 810ed8c:	2b00      	cmp	r3, #0
 810ed8e:	d009      	beq.n	810eda4 <pbuf_copy+0x118>
 810ed90:	4b20      	ldr	r3, [pc, #128]	; (810ee14 <pbuf_copy+0x188>)
 810ed92:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 810ed96:	4924      	ldr	r1, [pc, #144]	; (810ee28 <pbuf_copy+0x19c>)
 810ed98:	4820      	ldr	r0, [pc, #128]	; (810ee1c <pbuf_copy+0x190>)
 810ed9a:	f003 ff89 	bl	8112cb0 <iprintf>
 810ed9e:	f06f 030f 	mvn.w	r3, #15
 810eda2:	e032      	b.n	810ee0a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 810eda4:	683b      	ldr	r3, [r7, #0]
 810eda6:	2b00      	cmp	r3, #0
 810eda8:	d013      	beq.n	810edd2 <pbuf_copy+0x146>
 810edaa:	683b      	ldr	r3, [r7, #0]
 810edac:	895a      	ldrh	r2, [r3, #10]
 810edae:	683b      	ldr	r3, [r7, #0]
 810edb0:	891b      	ldrh	r3, [r3, #8]
 810edb2:	429a      	cmp	r2, r3
 810edb4:	d10d      	bne.n	810edd2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810edb6:	683b      	ldr	r3, [r7, #0]
 810edb8:	681b      	ldr	r3, [r3, #0]
 810edba:	2b00      	cmp	r3, #0
 810edbc:	d009      	beq.n	810edd2 <pbuf_copy+0x146>
 810edbe:	4b15      	ldr	r3, [pc, #84]	; (810ee14 <pbuf_copy+0x188>)
 810edc0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 810edc4:	4919      	ldr	r1, [pc, #100]	; (810ee2c <pbuf_copy+0x1a0>)
 810edc6:	4815      	ldr	r0, [pc, #84]	; (810ee1c <pbuf_copy+0x190>)
 810edc8:	f003 ff72 	bl	8112cb0 <iprintf>
 810edcc:	f06f 0305 	mvn.w	r3, #5
 810edd0:	e01b      	b.n	810ee0a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 810edd2:	687b      	ldr	r3, [r7, #4]
 810edd4:	2b00      	cmp	r3, #0
 810edd6:	d013      	beq.n	810ee00 <pbuf_copy+0x174>
 810edd8:	687b      	ldr	r3, [r7, #4]
 810edda:	895a      	ldrh	r2, [r3, #10]
 810eddc:	687b      	ldr	r3, [r7, #4]
 810edde:	891b      	ldrh	r3, [r3, #8]
 810ede0:	429a      	cmp	r2, r3
 810ede2:	d10d      	bne.n	810ee00 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810ede4:	687b      	ldr	r3, [r7, #4]
 810ede6:	681b      	ldr	r3, [r3, #0]
 810ede8:	2b00      	cmp	r3, #0
 810edea:	d009      	beq.n	810ee00 <pbuf_copy+0x174>
 810edec:	4b09      	ldr	r3, [pc, #36]	; (810ee14 <pbuf_copy+0x188>)
 810edee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 810edf2:	490e      	ldr	r1, [pc, #56]	; (810ee2c <pbuf_copy+0x1a0>)
 810edf4:	4809      	ldr	r0, [pc, #36]	; (810ee1c <pbuf_copy+0x190>)
 810edf6:	f003 ff5b 	bl	8112cb0 <iprintf>
 810edfa:	f06f 0305 	mvn.w	r3, #5
 810edfe:	e004      	b.n	810ee0a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 810ee00:	683b      	ldr	r3, [r7, #0]
 810ee02:	2b00      	cmp	r3, #0
 810ee04:	f47f af61 	bne.w	810ecca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 810ee08:	2300      	movs	r3, #0
}
 810ee0a:	4618      	mov	r0, r3
 810ee0c:	3718      	adds	r7, #24
 810ee0e:	46bd      	mov	sp, r7
 810ee10:	bd80      	pop	{r7, pc}
 810ee12:	bf00      	nop
 810ee14:	08115cc0 	.word	0x08115cc0
 810ee18:	08115f94 	.word	0x08115f94
 810ee1c:	08115d4c 	.word	0x08115d4c
 810ee20:	08115fc4 	.word	0x08115fc4
 810ee24:	08115fdc 	.word	0x08115fdc
 810ee28:	08115ff8 	.word	0x08115ff8
 810ee2c:	08116008 	.word	0x08116008

0810ee30 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 810ee30:	b580      	push	{r7, lr}
 810ee32:	b088      	sub	sp, #32
 810ee34:	af00      	add	r7, sp, #0
 810ee36:	60f8      	str	r0, [r7, #12]
 810ee38:	60b9      	str	r1, [r7, #8]
 810ee3a:	4613      	mov	r3, r2
 810ee3c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 810ee3e:	88fb      	ldrh	r3, [r7, #6]
 810ee40:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 810ee42:	2300      	movs	r3, #0
 810ee44:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 810ee46:	68fb      	ldr	r3, [r7, #12]
 810ee48:	2b00      	cmp	r3, #0
 810ee4a:	d109      	bne.n	810ee60 <pbuf_take+0x30>
 810ee4c:	4b3a      	ldr	r3, [pc, #232]	; (810ef38 <pbuf_take+0x108>)
 810ee4e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 810ee52:	493a      	ldr	r1, [pc, #232]	; (810ef3c <pbuf_take+0x10c>)
 810ee54:	483a      	ldr	r0, [pc, #232]	; (810ef40 <pbuf_take+0x110>)
 810ee56:	f003 ff2b 	bl	8112cb0 <iprintf>
 810ee5a:	f06f 030f 	mvn.w	r3, #15
 810ee5e:	e067      	b.n	810ef30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 810ee60:	68bb      	ldr	r3, [r7, #8]
 810ee62:	2b00      	cmp	r3, #0
 810ee64:	d109      	bne.n	810ee7a <pbuf_take+0x4a>
 810ee66:	4b34      	ldr	r3, [pc, #208]	; (810ef38 <pbuf_take+0x108>)
 810ee68:	f240 42b4 	movw	r2, #1204	; 0x4b4
 810ee6c:	4935      	ldr	r1, [pc, #212]	; (810ef44 <pbuf_take+0x114>)
 810ee6e:	4834      	ldr	r0, [pc, #208]	; (810ef40 <pbuf_take+0x110>)
 810ee70:	f003 ff1e 	bl	8112cb0 <iprintf>
 810ee74:	f06f 030f 	mvn.w	r3, #15
 810ee78:	e05a      	b.n	810ef30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 810ee7a:	68fb      	ldr	r3, [r7, #12]
 810ee7c:	891b      	ldrh	r3, [r3, #8]
 810ee7e:	88fa      	ldrh	r2, [r7, #6]
 810ee80:	429a      	cmp	r2, r3
 810ee82:	d909      	bls.n	810ee98 <pbuf_take+0x68>
 810ee84:	4b2c      	ldr	r3, [pc, #176]	; (810ef38 <pbuf_take+0x108>)
 810ee86:	f240 42b5 	movw	r2, #1205	; 0x4b5
 810ee8a:	492f      	ldr	r1, [pc, #188]	; (810ef48 <pbuf_take+0x118>)
 810ee8c:	482c      	ldr	r0, [pc, #176]	; (810ef40 <pbuf_take+0x110>)
 810ee8e:	f003 ff0f 	bl	8112cb0 <iprintf>
 810ee92:	f04f 33ff 	mov.w	r3, #4294967295
 810ee96:	e04b      	b.n	810ef30 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 810ee98:	68fb      	ldr	r3, [r7, #12]
 810ee9a:	2b00      	cmp	r3, #0
 810ee9c:	d007      	beq.n	810eeae <pbuf_take+0x7e>
 810ee9e:	68bb      	ldr	r3, [r7, #8]
 810eea0:	2b00      	cmp	r3, #0
 810eea2:	d004      	beq.n	810eeae <pbuf_take+0x7e>
 810eea4:	68fb      	ldr	r3, [r7, #12]
 810eea6:	891b      	ldrh	r3, [r3, #8]
 810eea8:	88fa      	ldrh	r2, [r7, #6]
 810eeaa:	429a      	cmp	r2, r3
 810eeac:	d902      	bls.n	810eeb4 <pbuf_take+0x84>
    return ERR_ARG;
 810eeae:	f06f 030f 	mvn.w	r3, #15
 810eeb2:	e03d      	b.n	810ef30 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 810eeb4:	68fb      	ldr	r3, [r7, #12]
 810eeb6:	61fb      	str	r3, [r7, #28]
 810eeb8:	e028      	b.n	810ef0c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 810eeba:	69fb      	ldr	r3, [r7, #28]
 810eebc:	2b00      	cmp	r3, #0
 810eebe:	d106      	bne.n	810eece <pbuf_take+0x9e>
 810eec0:	4b1d      	ldr	r3, [pc, #116]	; (810ef38 <pbuf_take+0x108>)
 810eec2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 810eec6:	4921      	ldr	r1, [pc, #132]	; (810ef4c <pbuf_take+0x11c>)
 810eec8:	481d      	ldr	r0, [pc, #116]	; (810ef40 <pbuf_take+0x110>)
 810eeca:	f003 fef1 	bl	8112cb0 <iprintf>
    buf_copy_len = total_copy_len;
 810eece:	697b      	ldr	r3, [r7, #20]
 810eed0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 810eed2:	69fb      	ldr	r3, [r7, #28]
 810eed4:	895b      	ldrh	r3, [r3, #10]
 810eed6:	461a      	mov	r2, r3
 810eed8:	69bb      	ldr	r3, [r7, #24]
 810eeda:	4293      	cmp	r3, r2
 810eedc:	d902      	bls.n	810eee4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 810eede:	69fb      	ldr	r3, [r7, #28]
 810eee0:	895b      	ldrh	r3, [r3, #10]
 810eee2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 810eee4:	69fb      	ldr	r3, [r7, #28]
 810eee6:	6858      	ldr	r0, [r3, #4]
 810eee8:	68ba      	ldr	r2, [r7, #8]
 810eeea:	693b      	ldr	r3, [r7, #16]
 810eeec:	4413      	add	r3, r2
 810eeee:	69ba      	ldr	r2, [r7, #24]
 810eef0:	4619      	mov	r1, r3
 810eef2:	f003 fa02 	bl	81122fa <memcpy>
    total_copy_len -= buf_copy_len;
 810eef6:	697a      	ldr	r2, [r7, #20]
 810eef8:	69bb      	ldr	r3, [r7, #24]
 810eefa:	1ad3      	subs	r3, r2, r3
 810eefc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 810eefe:	693a      	ldr	r2, [r7, #16]
 810ef00:	69bb      	ldr	r3, [r7, #24]
 810ef02:	4413      	add	r3, r2
 810ef04:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 810ef06:	69fb      	ldr	r3, [r7, #28]
 810ef08:	681b      	ldr	r3, [r3, #0]
 810ef0a:	61fb      	str	r3, [r7, #28]
 810ef0c:	697b      	ldr	r3, [r7, #20]
 810ef0e:	2b00      	cmp	r3, #0
 810ef10:	d1d3      	bne.n	810eeba <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 810ef12:	697b      	ldr	r3, [r7, #20]
 810ef14:	2b00      	cmp	r3, #0
 810ef16:	d103      	bne.n	810ef20 <pbuf_take+0xf0>
 810ef18:	88fb      	ldrh	r3, [r7, #6]
 810ef1a:	693a      	ldr	r2, [r7, #16]
 810ef1c:	429a      	cmp	r2, r3
 810ef1e:	d006      	beq.n	810ef2e <pbuf_take+0xfe>
 810ef20:	4b05      	ldr	r3, [pc, #20]	; (810ef38 <pbuf_take+0x108>)
 810ef22:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 810ef26:	490a      	ldr	r1, [pc, #40]	; (810ef50 <pbuf_take+0x120>)
 810ef28:	4805      	ldr	r0, [pc, #20]	; (810ef40 <pbuf_take+0x110>)
 810ef2a:	f003 fec1 	bl	8112cb0 <iprintf>
  return ERR_OK;
 810ef2e:	2300      	movs	r3, #0
}
 810ef30:	4618      	mov	r0, r3
 810ef32:	3720      	adds	r7, #32
 810ef34:	46bd      	mov	sp, r7
 810ef36:	bd80      	pop	{r7, pc}
 810ef38:	08115cc0 	.word	0x08115cc0
 810ef3c:	081160c4 	.word	0x081160c4
 810ef40:	08115d4c 	.word	0x08115d4c
 810ef44:	081160dc 	.word	0x081160dc
 810ef48:	081160f8 	.word	0x081160f8
 810ef4c:	08116118 	.word	0x08116118
 810ef50:	08116130 	.word	0x08116130

0810ef54 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 810ef54:	b580      	push	{r7, lr}
 810ef56:	b084      	sub	sp, #16
 810ef58:	af00      	add	r7, sp, #0
 810ef5a:	4603      	mov	r3, r0
 810ef5c:	603a      	str	r2, [r7, #0]
 810ef5e:	71fb      	strb	r3, [r7, #7]
 810ef60:	460b      	mov	r3, r1
 810ef62:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 810ef64:	683b      	ldr	r3, [r7, #0]
 810ef66:	8919      	ldrh	r1, [r3, #8]
 810ef68:	88ba      	ldrh	r2, [r7, #4]
 810ef6a:	79fb      	ldrb	r3, [r7, #7]
 810ef6c:	4618      	mov	r0, r3
 810ef6e:	f7ff fa77 	bl	810e460 <pbuf_alloc>
 810ef72:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 810ef74:	68fb      	ldr	r3, [r7, #12]
 810ef76:	2b00      	cmp	r3, #0
 810ef78:	d101      	bne.n	810ef7e <pbuf_clone+0x2a>
    return NULL;
 810ef7a:	2300      	movs	r3, #0
 810ef7c:	e011      	b.n	810efa2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 810ef7e:	6839      	ldr	r1, [r7, #0]
 810ef80:	68f8      	ldr	r0, [r7, #12]
 810ef82:	f7ff fe83 	bl	810ec8c <pbuf_copy>
 810ef86:	4603      	mov	r3, r0
 810ef88:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 810ef8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810ef8e:	2b00      	cmp	r3, #0
 810ef90:	d006      	beq.n	810efa0 <pbuf_clone+0x4c>
 810ef92:	4b06      	ldr	r3, [pc, #24]	; (810efac <pbuf_clone+0x58>)
 810ef94:	f240 5224 	movw	r2, #1316	; 0x524
 810ef98:	4905      	ldr	r1, [pc, #20]	; (810efb0 <pbuf_clone+0x5c>)
 810ef9a:	4806      	ldr	r0, [pc, #24]	; (810efb4 <pbuf_clone+0x60>)
 810ef9c:	f003 fe88 	bl	8112cb0 <iprintf>
  return q;
 810efa0:	68fb      	ldr	r3, [r7, #12]
}
 810efa2:	4618      	mov	r0, r3
 810efa4:	3710      	adds	r7, #16
 810efa6:	46bd      	mov	sp, r7
 810efa8:	bd80      	pop	{r7, pc}
 810efaa:	bf00      	nop
 810efac:	08115cc0 	.word	0x08115cc0
 810efb0:	08116160 	.word	0x08116160
 810efb4:	08115d4c 	.word	0x08115d4c

0810efb8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 810efb8:	b580      	push	{r7, lr}
 810efba:	b086      	sub	sp, #24
 810efbc:	af00      	add	r7, sp, #0
 810efbe:	6078      	str	r0, [r7, #4]
 810efc0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 810efc2:	683b      	ldr	r3, [r7, #0]
 810efc4:	60bb      	str	r3, [r7, #8]
 810efc6:	2304      	movs	r3, #4
 810efc8:	60fb      	str	r3, [r7, #12]
 810efca:	2300      	movs	r3, #0
 810efcc:	613b      	str	r3, [r7, #16]
 810efce:	2300      	movs	r3, #0
 810efd0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 810efd2:	f107 0308 	add.w	r3, r7, #8
 810efd6:	2100      	movs	r1, #0
 810efd8:	4618      	mov	r0, r3
 810efda:	f7f9 f9a7 	bl	810832c <osMessageCreate>
 810efde:	4602      	mov	r2, r0
 810efe0:	687b      	ldr	r3, [r7, #4]
 810efe2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 810efe4:	687b      	ldr	r3, [r7, #4]
 810efe6:	681b      	ldr	r3, [r3, #0]
 810efe8:	2b00      	cmp	r3, #0
 810efea:	d102      	bne.n	810eff2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 810efec:	f04f 33ff 	mov.w	r3, #4294967295
 810eff0:	e000      	b.n	810eff4 <sys_mbox_new+0x3c>

  return ERR_OK;
 810eff2:	2300      	movs	r3, #0
}
 810eff4:	4618      	mov	r0, r3
 810eff6:	3718      	adds	r7, #24
 810eff8:	46bd      	mov	sp, r7
 810effa:	bd80      	pop	{r7, pc}

0810effc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 810effc:	b580      	push	{r7, lr}
 810effe:	b08c      	sub	sp, #48	; 0x30
 810f000:	af00      	add	r7, sp, #0
 810f002:	61f8      	str	r0, [r7, #28]
 810f004:	61b9      	str	r1, [r7, #24]
 810f006:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 810f008:	f7f8 ffcd 	bl	8107fa6 <osKernelSysTick>
 810f00c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 810f00e:	697b      	ldr	r3, [r7, #20]
 810f010:	2b00      	cmp	r3, #0
 810f012:	d017      	beq.n	810f044 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 810f014:	69fb      	ldr	r3, [r7, #28]
 810f016:	6819      	ldr	r1, [r3, #0]
 810f018:	f107 0320 	add.w	r3, r7, #32
 810f01c:	697a      	ldr	r2, [r7, #20]
 810f01e:	4618      	mov	r0, r3
 810f020:	f7f9 f9ac 	bl	810837c <osMessageGet>

    if(event.status == osEventMessage)
 810f024:	6a3b      	ldr	r3, [r7, #32]
 810f026:	2b10      	cmp	r3, #16
 810f028:	d109      	bne.n	810f03e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 810f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f02c:	461a      	mov	r2, r3
 810f02e:	69bb      	ldr	r3, [r7, #24]
 810f030:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 810f032:	f7f8 ffb8 	bl	8107fa6 <osKernelSysTick>
 810f036:	4602      	mov	r2, r0
 810f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f03a:	1ad3      	subs	r3, r2, r3
 810f03c:	e019      	b.n	810f072 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 810f03e:	f04f 33ff 	mov.w	r3, #4294967295
 810f042:	e016      	b.n	810f072 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 810f044:	69fb      	ldr	r3, [r7, #28]
 810f046:	6819      	ldr	r1, [r3, #0]
 810f048:	463b      	mov	r3, r7
 810f04a:	f04f 32ff 	mov.w	r2, #4294967295
 810f04e:	4618      	mov	r0, r3
 810f050:	f7f9 f994 	bl	810837c <osMessageGet>
 810f054:	f107 0320 	add.w	r3, r7, #32
 810f058:	463a      	mov	r2, r7
 810f05a:	ca07      	ldmia	r2, {r0, r1, r2}
 810f05c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 810f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f062:	461a      	mov	r2, r3
 810f064:	69bb      	ldr	r3, [r7, #24]
 810f066:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 810f068:	f7f8 ff9d 	bl	8107fa6 <osKernelSysTick>
 810f06c:	4602      	mov	r2, r0
 810f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f070:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 810f072:	4618      	mov	r0, r3
 810f074:	3730      	adds	r7, #48	; 0x30
 810f076:	46bd      	mov	sp, r7
 810f078:	bd80      	pop	{r7, pc}
	...

0810f07c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 810f07c:	b580      	push	{r7, lr}
 810f07e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 810f080:	4803      	ldr	r0, [pc, #12]	; (810f090 <sys_init+0x14>)
 810f082:	f7f9 f800 	bl	8108086 <osMutexCreate>
 810f086:	4603      	mov	r3, r0
 810f088:	4a02      	ldr	r2, [pc, #8]	; (810f094 <sys_init+0x18>)
 810f08a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 810f08c:	bf00      	nop
 810f08e:	bd80      	pop	{r7, pc}
 810f090:	08116b40 	.word	0x08116b40
 810f094:	100087ac 	.word	0x100087ac

0810f098 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 810f098:	b580      	push	{r7, lr}
 810f09a:	b084      	sub	sp, #16
 810f09c:	af00      	add	r7, sp, #0
 810f09e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 810f0a0:	2300      	movs	r3, #0
 810f0a2:	60bb      	str	r3, [r7, #8]
 810f0a4:	2300      	movs	r3, #0
 810f0a6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 810f0a8:	f107 0308 	add.w	r3, r7, #8
 810f0ac:	4618      	mov	r0, r3
 810f0ae:	f7f8 ffea 	bl	8108086 <osMutexCreate>
 810f0b2:	4602      	mov	r2, r0
 810f0b4:	687b      	ldr	r3, [r7, #4]
 810f0b6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 810f0b8:	687b      	ldr	r3, [r7, #4]
 810f0ba:	681b      	ldr	r3, [r3, #0]
 810f0bc:	2b00      	cmp	r3, #0
 810f0be:	d102      	bne.n	810f0c6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 810f0c0:	f04f 33ff 	mov.w	r3, #4294967295
 810f0c4:	e000      	b.n	810f0c8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 810f0c6:	2300      	movs	r3, #0
}
 810f0c8:	4618      	mov	r0, r3
 810f0ca:	3710      	adds	r7, #16
 810f0cc:	46bd      	mov	sp, r7
 810f0ce:	bd80      	pop	{r7, pc}

0810f0d0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 810f0d0:	b580      	push	{r7, lr}
 810f0d2:	b082      	sub	sp, #8
 810f0d4:	af00      	add	r7, sp, #0
 810f0d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 810f0d8:	687b      	ldr	r3, [r7, #4]
 810f0da:	681b      	ldr	r3, [r3, #0]
 810f0dc:	f04f 31ff 	mov.w	r1, #4294967295
 810f0e0:	4618      	mov	r0, r3
 810f0e2:	f7f8 ffe9 	bl	81080b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 810f0e6:	bf00      	nop
 810f0e8:	3708      	adds	r7, #8
 810f0ea:	46bd      	mov	sp, r7
 810f0ec:	bd80      	pop	{r7, pc}

0810f0ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 810f0ee:	b580      	push	{r7, lr}
 810f0f0:	b082      	sub	sp, #8
 810f0f2:	af00      	add	r7, sp, #0
 810f0f4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 810f0f6:	687b      	ldr	r3, [r7, #4]
 810f0f8:	681b      	ldr	r3, [r3, #0]
 810f0fa:	4618      	mov	r0, r3
 810f0fc:	f7f9 f82a 	bl	8108154 <osMutexRelease>
}
 810f100:	bf00      	nop
 810f102:	3708      	adds	r7, #8
 810f104:	46bd      	mov	sp, r7
 810f106:	bd80      	pop	{r7, pc}

0810f108 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 810f108:	b580      	push	{r7, lr}
 810f10a:	b08c      	sub	sp, #48	; 0x30
 810f10c:	af00      	add	r7, sp, #0
 810f10e:	60f8      	str	r0, [r7, #12]
 810f110:	60b9      	str	r1, [r7, #8]
 810f112:	607a      	str	r2, [r7, #4]
 810f114:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 810f116:	f107 0314 	add.w	r3, r7, #20
 810f11a:	2200      	movs	r2, #0
 810f11c:	601a      	str	r2, [r3, #0]
 810f11e:	605a      	str	r2, [r3, #4]
 810f120:	609a      	str	r2, [r3, #8]
 810f122:	60da      	str	r2, [r3, #12]
 810f124:	611a      	str	r2, [r3, #16]
 810f126:	615a      	str	r2, [r3, #20]
 810f128:	619a      	str	r2, [r3, #24]
 810f12a:	68fb      	ldr	r3, [r7, #12]
 810f12c:	617b      	str	r3, [r7, #20]
 810f12e:	68bb      	ldr	r3, [r7, #8]
 810f130:	61bb      	str	r3, [r7, #24]
 810f132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f134:	b21b      	sxth	r3, r3
 810f136:	83bb      	strh	r3, [r7, #28]
 810f138:	683b      	ldr	r3, [r7, #0]
 810f13a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 810f13c:	f107 0314 	add.w	r3, r7, #20
 810f140:	6879      	ldr	r1, [r7, #4]
 810f142:	4618      	mov	r0, r3
 810f144:	f7f8 ff3f 	bl	8107fc6 <osThreadCreate>
 810f148:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 810f14a:	4618      	mov	r0, r3
 810f14c:	3730      	adds	r7, #48	; 0x30
 810f14e:	46bd      	mov	sp, r7
 810f150:	bd80      	pop	{r7, pc}
	...

0810f154 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 810f154:	b580      	push	{r7, lr}
 810f156:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 810f158:	4b04      	ldr	r3, [pc, #16]	; (810f16c <sys_arch_protect+0x18>)
 810f15a:	681b      	ldr	r3, [r3, #0]
 810f15c:	f04f 31ff 	mov.w	r1, #4294967295
 810f160:	4618      	mov	r0, r3
 810f162:	f7f8 ffa9 	bl	81080b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 810f166:	2301      	movs	r3, #1
}
 810f168:	4618      	mov	r0, r3
 810f16a:	bd80      	pop	{r7, pc}
 810f16c:	100087ac 	.word	0x100087ac

0810f170 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 810f170:	b580      	push	{r7, lr}
 810f172:	b082      	sub	sp, #8
 810f174:	af00      	add	r7, sp, #0
 810f176:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 810f178:	4b04      	ldr	r3, [pc, #16]	; (810f18c <sys_arch_unprotect+0x1c>)
 810f17a:	681b      	ldr	r3, [r3, #0]
 810f17c:	4618      	mov	r0, r3
 810f17e:	f7f8 ffe9 	bl	8108154 <osMutexRelease>
}
 810f182:	bf00      	nop
 810f184:	3708      	adds	r7, #8
 810f186:	46bd      	mov	sp, r7
 810f188:	bd80      	pop	{r7, pc}
 810f18a:	bf00      	nop
 810f18c:	100087ac 	.word	0x100087ac

0810f190 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 810f190:	b580      	push	{r7, lr}
 810f192:	b084      	sub	sp, #16
 810f194:	af00      	add	r7, sp, #0
 810f196:	6078      	str	r0, [r7, #4]
 810f198:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 810f19a:	f000 fa17 	bl	810f5cc <sys_timeouts_sleeptime>
 810f19e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 810f1a0:	68fb      	ldr	r3, [r7, #12]
 810f1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f1a6:	d10b      	bne.n	810f1c0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 810f1a8:	4813      	ldr	r0, [pc, #76]	; (810f1f8 <tcpip_timeouts_mbox_fetch+0x68>)
 810f1aa:	f7ff ffa0 	bl	810f0ee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 810f1ae:	2200      	movs	r2, #0
 810f1b0:	6839      	ldr	r1, [r7, #0]
 810f1b2:	6878      	ldr	r0, [r7, #4]
 810f1b4:	f7ff ff22 	bl	810effc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 810f1b8:	480f      	ldr	r0, [pc, #60]	; (810f1f8 <tcpip_timeouts_mbox_fetch+0x68>)
 810f1ba:	f7ff ff89 	bl	810f0d0 <sys_mutex_lock>
    return;
 810f1be:	e018      	b.n	810f1f2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 810f1c0:	68fb      	ldr	r3, [r7, #12]
 810f1c2:	2b00      	cmp	r3, #0
 810f1c4:	d102      	bne.n	810f1cc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 810f1c6:	f000 f9c7 	bl	810f558 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 810f1ca:	e7e6      	b.n	810f19a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 810f1cc:	480a      	ldr	r0, [pc, #40]	; (810f1f8 <tcpip_timeouts_mbox_fetch+0x68>)
 810f1ce:	f7ff ff8e 	bl	810f0ee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 810f1d2:	68fa      	ldr	r2, [r7, #12]
 810f1d4:	6839      	ldr	r1, [r7, #0]
 810f1d6:	6878      	ldr	r0, [r7, #4]
 810f1d8:	f7ff ff10 	bl	810effc <sys_arch_mbox_fetch>
 810f1dc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 810f1de:	4806      	ldr	r0, [pc, #24]	; (810f1f8 <tcpip_timeouts_mbox_fetch+0x68>)
 810f1e0:	f7ff ff76 	bl	810f0d0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 810f1e4:	68bb      	ldr	r3, [r7, #8]
 810f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f1ea:	d102      	bne.n	810f1f2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 810f1ec:	f000 f9b4 	bl	810f558 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 810f1f0:	e7d3      	b.n	810f19a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 810f1f2:	3710      	adds	r7, #16
 810f1f4:	46bd      	mov	sp, r7
 810f1f6:	bd80      	pop	{r7, pc}
 810f1f8:	100087b0 	.word	0x100087b0

0810f1fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 810f1fc:	b580      	push	{r7, lr}
 810f1fe:	b084      	sub	sp, #16
 810f200:	af00      	add	r7, sp, #0
 810f202:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 810f204:	4810      	ldr	r0, [pc, #64]	; (810f248 <tcpip_thread+0x4c>)
 810f206:	f7ff ff63 	bl	810f0d0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 810f20a:	4b10      	ldr	r3, [pc, #64]	; (810f24c <tcpip_thread+0x50>)
 810f20c:	681b      	ldr	r3, [r3, #0]
 810f20e:	2b00      	cmp	r3, #0
 810f210:	d005      	beq.n	810f21e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 810f212:	4b0e      	ldr	r3, [pc, #56]	; (810f24c <tcpip_thread+0x50>)
 810f214:	681b      	ldr	r3, [r3, #0]
 810f216:	4a0e      	ldr	r2, [pc, #56]	; (810f250 <tcpip_thread+0x54>)
 810f218:	6812      	ldr	r2, [r2, #0]
 810f21a:	4610      	mov	r0, r2
 810f21c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 810f21e:	f107 030c 	add.w	r3, r7, #12
 810f222:	4619      	mov	r1, r3
 810f224:	480b      	ldr	r0, [pc, #44]	; (810f254 <tcpip_thread+0x58>)
 810f226:	f7ff ffb3 	bl	810f190 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 810f22a:	68fb      	ldr	r3, [r7, #12]
 810f22c:	2b00      	cmp	r3, #0
 810f22e:	d106      	bne.n	810f23e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 810f230:	4b09      	ldr	r3, [pc, #36]	; (810f258 <tcpip_thread+0x5c>)
 810f232:	2291      	movs	r2, #145	; 0x91
 810f234:	4909      	ldr	r1, [pc, #36]	; (810f25c <tcpip_thread+0x60>)
 810f236:	480a      	ldr	r0, [pc, #40]	; (810f260 <tcpip_thread+0x64>)
 810f238:	f003 fd3a 	bl	8112cb0 <iprintf>
      continue;
 810f23c:	e003      	b.n	810f246 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 810f23e:	68fb      	ldr	r3, [r7, #12]
 810f240:	4618      	mov	r0, r3
 810f242:	f000 f80f 	bl	810f264 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 810f246:	e7ea      	b.n	810f21e <tcpip_thread+0x22>
 810f248:	100087b0 	.word	0x100087b0
 810f24c:	10005934 	.word	0x10005934
 810f250:	10005938 	.word	0x10005938
 810f254:	1000593c 	.word	0x1000593c
 810f258:	08116174 	.word	0x08116174
 810f25c:	081161d0 	.word	0x081161d0
 810f260:	081161f0 	.word	0x081161f0

0810f264 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 810f264:	b580      	push	{r7, lr}
 810f266:	b082      	sub	sp, #8
 810f268:	af00      	add	r7, sp, #0
 810f26a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 810f26c:	687b      	ldr	r3, [r7, #4]
 810f26e:	781b      	ldrb	r3, [r3, #0]
 810f270:	2b02      	cmp	r3, #2
 810f272:	d026      	beq.n	810f2c2 <tcpip_thread_handle_msg+0x5e>
 810f274:	2b02      	cmp	r3, #2
 810f276:	dc2b      	bgt.n	810f2d0 <tcpip_thread_handle_msg+0x6c>
 810f278:	2b00      	cmp	r3, #0
 810f27a:	d002      	beq.n	810f282 <tcpip_thread_handle_msg+0x1e>
 810f27c:	2b01      	cmp	r3, #1
 810f27e:	d015      	beq.n	810f2ac <tcpip_thread_handle_msg+0x48>
 810f280:	e026      	b.n	810f2d0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 810f282:	687b      	ldr	r3, [r7, #4]
 810f284:	68db      	ldr	r3, [r3, #12]
 810f286:	687a      	ldr	r2, [r7, #4]
 810f288:	6850      	ldr	r0, [r2, #4]
 810f28a:	687a      	ldr	r2, [r7, #4]
 810f28c:	6892      	ldr	r2, [r2, #8]
 810f28e:	4611      	mov	r1, r2
 810f290:	4798      	blx	r3
 810f292:	4603      	mov	r3, r0
 810f294:	2b00      	cmp	r3, #0
 810f296:	d004      	beq.n	810f2a2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 810f298:	687b      	ldr	r3, [r7, #4]
 810f29a:	685b      	ldr	r3, [r3, #4]
 810f29c:	4618      	mov	r0, r3
 810f29e:	f7ff fbc1 	bl	810ea24 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 810f2a2:	6879      	ldr	r1, [r7, #4]
 810f2a4:	2006      	movs	r0, #6
 810f2a6:	f7fe fd79 	bl	810dd9c <memp_free>
      break;
 810f2aa:	e018      	b.n	810f2de <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 810f2ac:	687b      	ldr	r3, [r7, #4]
 810f2ae:	685b      	ldr	r3, [r3, #4]
 810f2b0:	687a      	ldr	r2, [r7, #4]
 810f2b2:	6892      	ldr	r2, [r2, #8]
 810f2b4:	4610      	mov	r0, r2
 810f2b6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 810f2b8:	6879      	ldr	r1, [r7, #4]
 810f2ba:	2005      	movs	r0, #5
 810f2bc:	f7fe fd6e 	bl	810dd9c <memp_free>
      break;
 810f2c0:	e00d      	b.n	810f2de <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 810f2c2:	687b      	ldr	r3, [r7, #4]
 810f2c4:	685b      	ldr	r3, [r3, #4]
 810f2c6:	687a      	ldr	r2, [r7, #4]
 810f2c8:	6892      	ldr	r2, [r2, #8]
 810f2ca:	4610      	mov	r0, r2
 810f2cc:	4798      	blx	r3
      break;
 810f2ce:	e006      	b.n	810f2de <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 810f2d0:	4b05      	ldr	r3, [pc, #20]	; (810f2e8 <tcpip_thread_handle_msg+0x84>)
 810f2d2:	22cf      	movs	r2, #207	; 0xcf
 810f2d4:	4905      	ldr	r1, [pc, #20]	; (810f2ec <tcpip_thread_handle_msg+0x88>)
 810f2d6:	4806      	ldr	r0, [pc, #24]	; (810f2f0 <tcpip_thread_handle_msg+0x8c>)
 810f2d8:	f003 fcea 	bl	8112cb0 <iprintf>
      break;
 810f2dc:	bf00      	nop
  }
}
 810f2de:	bf00      	nop
 810f2e0:	3708      	adds	r7, #8
 810f2e2:	46bd      	mov	sp, r7
 810f2e4:	bd80      	pop	{r7, pc}
 810f2e6:	bf00      	nop
 810f2e8:	08116174 	.word	0x08116174
 810f2ec:	081161d0 	.word	0x081161d0
 810f2f0:	081161f0 	.word	0x081161f0

0810f2f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 810f2f4:	b580      	push	{r7, lr}
 810f2f6:	b084      	sub	sp, #16
 810f2f8:	af02      	add	r7, sp, #8
 810f2fa:	6078      	str	r0, [r7, #4]
 810f2fc:	6039      	str	r1, [r7, #0]
  lwip_init();
 810f2fe:	f7fc ff1d 	bl	810c13c <lwip_init>

  tcpip_init_done = initfunc;
 810f302:	4a17      	ldr	r2, [pc, #92]	; (810f360 <tcpip_init+0x6c>)
 810f304:	687b      	ldr	r3, [r7, #4]
 810f306:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 810f308:	4a16      	ldr	r2, [pc, #88]	; (810f364 <tcpip_init+0x70>)
 810f30a:	683b      	ldr	r3, [r7, #0]
 810f30c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 810f30e:	2106      	movs	r1, #6
 810f310:	4815      	ldr	r0, [pc, #84]	; (810f368 <tcpip_init+0x74>)
 810f312:	f7ff fe51 	bl	810efb8 <sys_mbox_new>
 810f316:	4603      	mov	r3, r0
 810f318:	2b00      	cmp	r3, #0
 810f31a:	d006      	beq.n	810f32a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 810f31c:	4b13      	ldr	r3, [pc, #76]	; (810f36c <tcpip_init+0x78>)
 810f31e:	f240 2261 	movw	r2, #609	; 0x261
 810f322:	4913      	ldr	r1, [pc, #76]	; (810f370 <tcpip_init+0x7c>)
 810f324:	4813      	ldr	r0, [pc, #76]	; (810f374 <tcpip_init+0x80>)
 810f326:	f003 fcc3 	bl	8112cb0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 810f32a:	4813      	ldr	r0, [pc, #76]	; (810f378 <tcpip_init+0x84>)
 810f32c:	f7ff feb4 	bl	810f098 <sys_mutex_new>
 810f330:	4603      	mov	r3, r0
 810f332:	2b00      	cmp	r3, #0
 810f334:	d006      	beq.n	810f344 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 810f336:	4b0d      	ldr	r3, [pc, #52]	; (810f36c <tcpip_init+0x78>)
 810f338:	f240 2265 	movw	r2, #613	; 0x265
 810f33c:	490f      	ldr	r1, [pc, #60]	; (810f37c <tcpip_init+0x88>)
 810f33e:	480d      	ldr	r0, [pc, #52]	; (810f374 <tcpip_init+0x80>)
 810f340:	f003 fcb6 	bl	8112cb0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 810f344:	2300      	movs	r3, #0
 810f346:	9300      	str	r3, [sp, #0]
 810f348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810f34c:	2200      	movs	r2, #0
 810f34e:	490c      	ldr	r1, [pc, #48]	; (810f380 <tcpip_init+0x8c>)
 810f350:	480c      	ldr	r0, [pc, #48]	; (810f384 <tcpip_init+0x90>)
 810f352:	f7ff fed9 	bl	810f108 <sys_thread_new>
}
 810f356:	bf00      	nop
 810f358:	3708      	adds	r7, #8
 810f35a:	46bd      	mov	sp, r7
 810f35c:	bd80      	pop	{r7, pc}
 810f35e:	bf00      	nop
 810f360:	10005934 	.word	0x10005934
 810f364:	10005938 	.word	0x10005938
 810f368:	1000593c 	.word	0x1000593c
 810f36c:	08116174 	.word	0x08116174
 810f370:	08116228 	.word	0x08116228
 810f374:	081161f0 	.word	0x081161f0
 810f378:	100087b0 	.word	0x100087b0
 810f37c:	0811624c 	.word	0x0811624c
 810f380:	0810f1fd 	.word	0x0810f1fd
 810f384:	08116270 	.word	0x08116270

0810f388 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 810f388:	b580      	push	{r7, lr}
 810f38a:	b086      	sub	sp, #24
 810f38c:	af00      	add	r7, sp, #0
 810f38e:	60f8      	str	r0, [r7, #12]
 810f390:	60b9      	str	r1, [r7, #8]
 810f392:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 810f394:	2007      	movs	r0, #7
 810f396:	f7fe fc8b 	bl	810dcb0 <memp_malloc>
 810f39a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 810f39c:	693b      	ldr	r3, [r7, #16]
 810f39e:	2b00      	cmp	r3, #0
 810f3a0:	d109      	bne.n	810f3b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 810f3a2:	693b      	ldr	r3, [r7, #16]
 810f3a4:	2b00      	cmp	r3, #0
 810f3a6:	d151      	bne.n	810f44c <sys_timeout_abs+0xc4>
 810f3a8:	4b2a      	ldr	r3, [pc, #168]	; (810f454 <sys_timeout_abs+0xcc>)
 810f3aa:	22be      	movs	r2, #190	; 0xbe
 810f3ac:	492a      	ldr	r1, [pc, #168]	; (810f458 <sys_timeout_abs+0xd0>)
 810f3ae:	482b      	ldr	r0, [pc, #172]	; (810f45c <sys_timeout_abs+0xd4>)
 810f3b0:	f003 fc7e 	bl	8112cb0 <iprintf>
    return;
 810f3b4:	e04a      	b.n	810f44c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 810f3b6:	693b      	ldr	r3, [r7, #16]
 810f3b8:	2200      	movs	r2, #0
 810f3ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 810f3bc:	693b      	ldr	r3, [r7, #16]
 810f3be:	68ba      	ldr	r2, [r7, #8]
 810f3c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 810f3c2:	693b      	ldr	r3, [r7, #16]
 810f3c4:	687a      	ldr	r2, [r7, #4]
 810f3c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 810f3c8:	693b      	ldr	r3, [r7, #16]
 810f3ca:	68fa      	ldr	r2, [r7, #12]
 810f3cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 810f3ce:	4b24      	ldr	r3, [pc, #144]	; (810f460 <sys_timeout_abs+0xd8>)
 810f3d0:	681b      	ldr	r3, [r3, #0]
 810f3d2:	2b00      	cmp	r3, #0
 810f3d4:	d103      	bne.n	810f3de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 810f3d6:	4a22      	ldr	r2, [pc, #136]	; (810f460 <sys_timeout_abs+0xd8>)
 810f3d8:	693b      	ldr	r3, [r7, #16]
 810f3da:	6013      	str	r3, [r2, #0]
    return;
 810f3dc:	e037      	b.n	810f44e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 810f3de:	693b      	ldr	r3, [r7, #16]
 810f3e0:	685a      	ldr	r2, [r3, #4]
 810f3e2:	4b1f      	ldr	r3, [pc, #124]	; (810f460 <sys_timeout_abs+0xd8>)
 810f3e4:	681b      	ldr	r3, [r3, #0]
 810f3e6:	685b      	ldr	r3, [r3, #4]
 810f3e8:	1ad3      	subs	r3, r2, r3
 810f3ea:	0fdb      	lsrs	r3, r3, #31
 810f3ec:	f003 0301 	and.w	r3, r3, #1
 810f3f0:	b2db      	uxtb	r3, r3
 810f3f2:	2b00      	cmp	r3, #0
 810f3f4:	d007      	beq.n	810f406 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 810f3f6:	4b1a      	ldr	r3, [pc, #104]	; (810f460 <sys_timeout_abs+0xd8>)
 810f3f8:	681a      	ldr	r2, [r3, #0]
 810f3fa:	693b      	ldr	r3, [r7, #16]
 810f3fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 810f3fe:	4a18      	ldr	r2, [pc, #96]	; (810f460 <sys_timeout_abs+0xd8>)
 810f400:	693b      	ldr	r3, [r7, #16]
 810f402:	6013      	str	r3, [r2, #0]
 810f404:	e023      	b.n	810f44e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 810f406:	4b16      	ldr	r3, [pc, #88]	; (810f460 <sys_timeout_abs+0xd8>)
 810f408:	681b      	ldr	r3, [r3, #0]
 810f40a:	617b      	str	r3, [r7, #20]
 810f40c:	e01a      	b.n	810f444 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 810f40e:	697b      	ldr	r3, [r7, #20]
 810f410:	681b      	ldr	r3, [r3, #0]
 810f412:	2b00      	cmp	r3, #0
 810f414:	d00b      	beq.n	810f42e <sys_timeout_abs+0xa6>
 810f416:	693b      	ldr	r3, [r7, #16]
 810f418:	685a      	ldr	r2, [r3, #4]
 810f41a:	697b      	ldr	r3, [r7, #20]
 810f41c:	681b      	ldr	r3, [r3, #0]
 810f41e:	685b      	ldr	r3, [r3, #4]
 810f420:	1ad3      	subs	r3, r2, r3
 810f422:	0fdb      	lsrs	r3, r3, #31
 810f424:	f003 0301 	and.w	r3, r3, #1
 810f428:	b2db      	uxtb	r3, r3
 810f42a:	2b00      	cmp	r3, #0
 810f42c:	d007      	beq.n	810f43e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 810f42e:	697b      	ldr	r3, [r7, #20]
 810f430:	681a      	ldr	r2, [r3, #0]
 810f432:	693b      	ldr	r3, [r7, #16]
 810f434:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 810f436:	697b      	ldr	r3, [r7, #20]
 810f438:	693a      	ldr	r2, [r7, #16]
 810f43a:	601a      	str	r2, [r3, #0]
        break;
 810f43c:	e007      	b.n	810f44e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 810f43e:	697b      	ldr	r3, [r7, #20]
 810f440:	681b      	ldr	r3, [r3, #0]
 810f442:	617b      	str	r3, [r7, #20]
 810f444:	697b      	ldr	r3, [r7, #20]
 810f446:	2b00      	cmp	r3, #0
 810f448:	d1e1      	bne.n	810f40e <sys_timeout_abs+0x86>
 810f44a:	e000      	b.n	810f44e <sys_timeout_abs+0xc6>
    return;
 810f44c:	bf00      	nop
      }
    }
  }
}
 810f44e:	3718      	adds	r7, #24
 810f450:	46bd      	mov	sp, r7
 810f452:	bd80      	pop	{r7, pc}
 810f454:	08116280 	.word	0x08116280
 810f458:	081162e0 	.word	0x081162e0
 810f45c:	08116320 	.word	0x08116320
 810f460:	10005940 	.word	0x10005940

0810f464 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 810f464:	b580      	push	{r7, lr}
 810f466:	b086      	sub	sp, #24
 810f468:	af00      	add	r7, sp, #0
 810f46a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 810f46c:	687b      	ldr	r3, [r7, #4]
 810f46e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 810f470:	697b      	ldr	r3, [r7, #20]
 810f472:	685b      	ldr	r3, [r3, #4]
 810f474:	4798      	blx	r3

  now = sys_now();
 810f476:	f001 f983 	bl	8110780 <sys_now>
 810f47a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 810f47c:	697b      	ldr	r3, [r7, #20]
 810f47e:	681a      	ldr	r2, [r3, #0]
 810f480:	4b0f      	ldr	r3, [pc, #60]	; (810f4c0 <lwip_cyclic_timer+0x5c>)
 810f482:	681b      	ldr	r3, [r3, #0]
 810f484:	4413      	add	r3, r2
 810f486:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 810f488:	68fa      	ldr	r2, [r7, #12]
 810f48a:	693b      	ldr	r3, [r7, #16]
 810f48c:	1ad3      	subs	r3, r2, r3
 810f48e:	0fdb      	lsrs	r3, r3, #31
 810f490:	f003 0301 	and.w	r3, r3, #1
 810f494:	b2db      	uxtb	r3, r3
 810f496:	2b00      	cmp	r3, #0
 810f498:	d009      	beq.n	810f4ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 810f49a:	697b      	ldr	r3, [r7, #20]
 810f49c:	681a      	ldr	r2, [r3, #0]
 810f49e:	693b      	ldr	r3, [r7, #16]
 810f4a0:	4413      	add	r3, r2
 810f4a2:	687a      	ldr	r2, [r7, #4]
 810f4a4:	4907      	ldr	r1, [pc, #28]	; (810f4c4 <lwip_cyclic_timer+0x60>)
 810f4a6:	4618      	mov	r0, r3
 810f4a8:	f7ff ff6e 	bl	810f388 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 810f4ac:	e004      	b.n	810f4b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 810f4ae:	687a      	ldr	r2, [r7, #4]
 810f4b0:	4904      	ldr	r1, [pc, #16]	; (810f4c4 <lwip_cyclic_timer+0x60>)
 810f4b2:	68f8      	ldr	r0, [r7, #12]
 810f4b4:	f7ff ff68 	bl	810f388 <sys_timeout_abs>
}
 810f4b8:	bf00      	nop
 810f4ba:	3718      	adds	r7, #24
 810f4bc:	46bd      	mov	sp, r7
 810f4be:	bd80      	pop	{r7, pc}
 810f4c0:	10005944 	.word	0x10005944
 810f4c4:	0810f465 	.word	0x0810f465

0810f4c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 810f4c8:	b580      	push	{r7, lr}
 810f4ca:	b082      	sub	sp, #8
 810f4cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 810f4ce:	2300      	movs	r3, #0
 810f4d0:	607b      	str	r3, [r7, #4]
 810f4d2:	e00e      	b.n	810f4f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 810f4d4:	4a0b      	ldr	r2, [pc, #44]	; (810f504 <sys_timeouts_init+0x3c>)
 810f4d6:	687b      	ldr	r3, [r7, #4]
 810f4d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 810f4dc:	687b      	ldr	r3, [r7, #4]
 810f4de:	00db      	lsls	r3, r3, #3
 810f4e0:	4a08      	ldr	r2, [pc, #32]	; (810f504 <sys_timeouts_init+0x3c>)
 810f4e2:	4413      	add	r3, r2
 810f4e4:	461a      	mov	r2, r3
 810f4e6:	4908      	ldr	r1, [pc, #32]	; (810f508 <sys_timeouts_init+0x40>)
 810f4e8:	f000 f810 	bl	810f50c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 810f4ec:	687b      	ldr	r3, [r7, #4]
 810f4ee:	3301      	adds	r3, #1
 810f4f0:	607b      	str	r3, [r7, #4]
 810f4f2:	687b      	ldr	r3, [r7, #4]
 810f4f4:	2b01      	cmp	r3, #1
 810f4f6:	d9ed      	bls.n	810f4d4 <sys_timeouts_init+0xc>
  }
}
 810f4f8:	bf00      	nop
 810f4fa:	bf00      	nop
 810f4fc:	3708      	adds	r7, #8
 810f4fe:	46bd      	mov	sp, r7
 810f500:	bd80      	pop	{r7, pc}
 810f502:	bf00      	nop
 810f504:	08116b48 	.word	0x08116b48
 810f508:	0810f465 	.word	0x0810f465

0810f50c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 810f50c:	b580      	push	{r7, lr}
 810f50e:	b086      	sub	sp, #24
 810f510:	af00      	add	r7, sp, #0
 810f512:	60f8      	str	r0, [r7, #12]
 810f514:	60b9      	str	r1, [r7, #8]
 810f516:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 810f518:	68fb      	ldr	r3, [r7, #12]
 810f51a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810f51e:	d306      	bcc.n	810f52e <sys_timeout+0x22>
 810f520:	4b0a      	ldr	r3, [pc, #40]	; (810f54c <sys_timeout+0x40>)
 810f522:	f240 1229 	movw	r2, #297	; 0x129
 810f526:	490a      	ldr	r1, [pc, #40]	; (810f550 <sys_timeout+0x44>)
 810f528:	480a      	ldr	r0, [pc, #40]	; (810f554 <sys_timeout+0x48>)
 810f52a:	f003 fbc1 	bl	8112cb0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 810f52e:	f001 f927 	bl	8110780 <sys_now>
 810f532:	4602      	mov	r2, r0
 810f534:	68fb      	ldr	r3, [r7, #12]
 810f536:	4413      	add	r3, r2
 810f538:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 810f53a:	687a      	ldr	r2, [r7, #4]
 810f53c:	68b9      	ldr	r1, [r7, #8]
 810f53e:	6978      	ldr	r0, [r7, #20]
 810f540:	f7ff ff22 	bl	810f388 <sys_timeout_abs>
#endif
}
 810f544:	bf00      	nop
 810f546:	3718      	adds	r7, #24
 810f548:	46bd      	mov	sp, r7
 810f54a:	bd80      	pop	{r7, pc}
 810f54c:	08116280 	.word	0x08116280
 810f550:	08116348 	.word	0x08116348
 810f554:	08116320 	.word	0x08116320

0810f558 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 810f558:	b580      	push	{r7, lr}
 810f55a:	b084      	sub	sp, #16
 810f55c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 810f55e:	f001 f90f 	bl	8110780 <sys_now>
 810f562:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 810f564:	4b17      	ldr	r3, [pc, #92]	; (810f5c4 <sys_check_timeouts+0x6c>)
 810f566:	681b      	ldr	r3, [r3, #0]
 810f568:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 810f56a:	68bb      	ldr	r3, [r7, #8]
 810f56c:	2b00      	cmp	r3, #0
 810f56e:	d022      	beq.n	810f5b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 810f570:	68bb      	ldr	r3, [r7, #8]
 810f572:	685b      	ldr	r3, [r3, #4]
 810f574:	68fa      	ldr	r2, [r7, #12]
 810f576:	1ad3      	subs	r3, r2, r3
 810f578:	0fdb      	lsrs	r3, r3, #31
 810f57a:	f003 0301 	and.w	r3, r3, #1
 810f57e:	b2db      	uxtb	r3, r3
 810f580:	2b00      	cmp	r3, #0
 810f582:	d11a      	bne.n	810f5ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 810f584:	68bb      	ldr	r3, [r7, #8]
 810f586:	681b      	ldr	r3, [r3, #0]
 810f588:	4a0e      	ldr	r2, [pc, #56]	; (810f5c4 <sys_check_timeouts+0x6c>)
 810f58a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 810f58c:	68bb      	ldr	r3, [r7, #8]
 810f58e:	689b      	ldr	r3, [r3, #8]
 810f590:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 810f592:	68bb      	ldr	r3, [r7, #8]
 810f594:	68db      	ldr	r3, [r3, #12]
 810f596:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 810f598:	68bb      	ldr	r3, [r7, #8]
 810f59a:	685b      	ldr	r3, [r3, #4]
 810f59c:	4a0a      	ldr	r2, [pc, #40]	; (810f5c8 <sys_check_timeouts+0x70>)
 810f59e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 810f5a0:	68b9      	ldr	r1, [r7, #8]
 810f5a2:	2007      	movs	r0, #7
 810f5a4:	f7fe fbfa 	bl	810dd9c <memp_free>
    if (handler != NULL) {
 810f5a8:	687b      	ldr	r3, [r7, #4]
 810f5aa:	2b00      	cmp	r3, #0
 810f5ac:	d0da      	beq.n	810f564 <sys_check_timeouts+0xc>
      handler(arg);
 810f5ae:	687b      	ldr	r3, [r7, #4]
 810f5b0:	6838      	ldr	r0, [r7, #0]
 810f5b2:	4798      	blx	r3
  do {
 810f5b4:	e7d6      	b.n	810f564 <sys_check_timeouts+0xc>
      return;
 810f5b6:	bf00      	nop
 810f5b8:	e000      	b.n	810f5bc <sys_check_timeouts+0x64>
      return;
 810f5ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 810f5bc:	3710      	adds	r7, #16
 810f5be:	46bd      	mov	sp, r7
 810f5c0:	bd80      	pop	{r7, pc}
 810f5c2:	bf00      	nop
 810f5c4:	10005940 	.word	0x10005940
 810f5c8:	10005944 	.word	0x10005944

0810f5cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 810f5cc:	b580      	push	{r7, lr}
 810f5ce:	b082      	sub	sp, #8
 810f5d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 810f5d2:	4b16      	ldr	r3, [pc, #88]	; (810f62c <sys_timeouts_sleeptime+0x60>)
 810f5d4:	681b      	ldr	r3, [r3, #0]
 810f5d6:	2b00      	cmp	r3, #0
 810f5d8:	d102      	bne.n	810f5e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 810f5da:	f04f 33ff 	mov.w	r3, #4294967295
 810f5de:	e020      	b.n	810f622 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 810f5e0:	f001 f8ce 	bl	8110780 <sys_now>
 810f5e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 810f5e6:	4b11      	ldr	r3, [pc, #68]	; (810f62c <sys_timeouts_sleeptime+0x60>)
 810f5e8:	681b      	ldr	r3, [r3, #0]
 810f5ea:	685a      	ldr	r2, [r3, #4]
 810f5ec:	687b      	ldr	r3, [r7, #4]
 810f5ee:	1ad3      	subs	r3, r2, r3
 810f5f0:	0fdb      	lsrs	r3, r3, #31
 810f5f2:	f003 0301 	and.w	r3, r3, #1
 810f5f6:	b2db      	uxtb	r3, r3
 810f5f8:	2b00      	cmp	r3, #0
 810f5fa:	d001      	beq.n	810f600 <sys_timeouts_sleeptime+0x34>
    return 0;
 810f5fc:	2300      	movs	r3, #0
 810f5fe:	e010      	b.n	810f622 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 810f600:	4b0a      	ldr	r3, [pc, #40]	; (810f62c <sys_timeouts_sleeptime+0x60>)
 810f602:	681b      	ldr	r3, [r3, #0]
 810f604:	685a      	ldr	r2, [r3, #4]
 810f606:	687b      	ldr	r3, [r7, #4]
 810f608:	1ad3      	subs	r3, r2, r3
 810f60a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 810f60c:	683b      	ldr	r3, [r7, #0]
 810f60e:	2b00      	cmp	r3, #0
 810f610:	da06      	bge.n	810f620 <sys_timeouts_sleeptime+0x54>
 810f612:	4b07      	ldr	r3, [pc, #28]	; (810f630 <sys_timeouts_sleeptime+0x64>)
 810f614:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 810f618:	4906      	ldr	r1, [pc, #24]	; (810f634 <sys_timeouts_sleeptime+0x68>)
 810f61a:	4807      	ldr	r0, [pc, #28]	; (810f638 <sys_timeouts_sleeptime+0x6c>)
 810f61c:	f003 fb48 	bl	8112cb0 <iprintf>
    return ret;
 810f620:	683b      	ldr	r3, [r7, #0]
  }
}
 810f622:	4618      	mov	r0, r3
 810f624:	3708      	adds	r7, #8
 810f626:	46bd      	mov	sp, r7
 810f628:	bd80      	pop	{r7, pc}
 810f62a:	bf00      	nop
 810f62c:	10005940 	.word	0x10005940
 810f630:	08116280 	.word	0x08116280
 810f634:	08116380 	.word	0x08116380
 810f638:	08116320 	.word	0x08116320

0810f63c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 810f63c:	b580      	push	{r7, lr}
 810f63e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 810f640:	f003 fbc4 	bl	8112dcc <rand>
 810f644:	4603      	mov	r3, r0
 810f646:	b29b      	uxth	r3, r3
 810f648:	f3c3 030d 	ubfx	r3, r3, #0, #14
 810f64c:	b29b      	uxth	r3, r3
 810f64e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 810f652:	b29a      	uxth	r2, r3
 810f654:	4b01      	ldr	r3, [pc, #4]	; (810f65c <udp_init+0x20>)
 810f656:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 810f658:	bf00      	nop
 810f65a:	bd80      	pop	{r7, pc}
 810f65c:	10000014 	.word	0x10000014

0810f660 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 810f660:	b480      	push	{r7}
 810f662:	b083      	sub	sp, #12
 810f664:	af00      	add	r7, sp, #0
  u16_t n = 0;
 810f666:	2300      	movs	r3, #0
 810f668:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 810f66a:	4b17      	ldr	r3, [pc, #92]	; (810f6c8 <udp_new_port+0x68>)
 810f66c:	881b      	ldrh	r3, [r3, #0]
 810f66e:	1c5a      	adds	r2, r3, #1
 810f670:	b291      	uxth	r1, r2
 810f672:	4a15      	ldr	r2, [pc, #84]	; (810f6c8 <udp_new_port+0x68>)
 810f674:	8011      	strh	r1, [r2, #0]
 810f676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810f67a:	4293      	cmp	r3, r2
 810f67c:	d103      	bne.n	810f686 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 810f67e:	4b12      	ldr	r3, [pc, #72]	; (810f6c8 <udp_new_port+0x68>)
 810f680:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 810f684:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 810f686:	4b11      	ldr	r3, [pc, #68]	; (810f6cc <udp_new_port+0x6c>)
 810f688:	681b      	ldr	r3, [r3, #0]
 810f68a:	603b      	str	r3, [r7, #0]
 810f68c:	e011      	b.n	810f6b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 810f68e:	683b      	ldr	r3, [r7, #0]
 810f690:	8a5a      	ldrh	r2, [r3, #18]
 810f692:	4b0d      	ldr	r3, [pc, #52]	; (810f6c8 <udp_new_port+0x68>)
 810f694:	881b      	ldrh	r3, [r3, #0]
 810f696:	429a      	cmp	r2, r3
 810f698:	d108      	bne.n	810f6ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 810f69a:	88fb      	ldrh	r3, [r7, #6]
 810f69c:	3301      	adds	r3, #1
 810f69e:	80fb      	strh	r3, [r7, #6]
 810f6a0:	88fb      	ldrh	r3, [r7, #6]
 810f6a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810f6a6:	d3e0      	bcc.n	810f66a <udp_new_port+0xa>
        return 0;
 810f6a8:	2300      	movs	r3, #0
 810f6aa:	e007      	b.n	810f6bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 810f6ac:	683b      	ldr	r3, [r7, #0]
 810f6ae:	68db      	ldr	r3, [r3, #12]
 810f6b0:	603b      	str	r3, [r7, #0]
 810f6b2:	683b      	ldr	r3, [r7, #0]
 810f6b4:	2b00      	cmp	r3, #0
 810f6b6:	d1ea      	bne.n	810f68e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 810f6b8:	4b03      	ldr	r3, [pc, #12]	; (810f6c8 <udp_new_port+0x68>)
 810f6ba:	881b      	ldrh	r3, [r3, #0]
}
 810f6bc:	4618      	mov	r0, r3
 810f6be:	370c      	adds	r7, #12
 810f6c0:	46bd      	mov	sp, r7
 810f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f6c6:	4770      	bx	lr
 810f6c8:	10000014 	.word	0x10000014
 810f6cc:	100087b4 	.word	0x100087b4

0810f6d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 810f6d0:	b580      	push	{r7, lr}
 810f6d2:	b084      	sub	sp, #16
 810f6d4:	af00      	add	r7, sp, #0
 810f6d6:	60f8      	str	r0, [r7, #12]
 810f6d8:	60b9      	str	r1, [r7, #8]
 810f6da:	4613      	mov	r3, r2
 810f6dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 810f6de:	68fb      	ldr	r3, [r7, #12]
 810f6e0:	2b00      	cmp	r3, #0
 810f6e2:	d105      	bne.n	810f6f0 <udp_input_local_match+0x20>
 810f6e4:	4b27      	ldr	r3, [pc, #156]	; (810f784 <udp_input_local_match+0xb4>)
 810f6e6:	2287      	movs	r2, #135	; 0x87
 810f6e8:	4927      	ldr	r1, [pc, #156]	; (810f788 <udp_input_local_match+0xb8>)
 810f6ea:	4828      	ldr	r0, [pc, #160]	; (810f78c <udp_input_local_match+0xbc>)
 810f6ec:	f003 fae0 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 810f6f0:	68bb      	ldr	r3, [r7, #8]
 810f6f2:	2b00      	cmp	r3, #0
 810f6f4:	d105      	bne.n	810f702 <udp_input_local_match+0x32>
 810f6f6:	4b23      	ldr	r3, [pc, #140]	; (810f784 <udp_input_local_match+0xb4>)
 810f6f8:	2288      	movs	r2, #136	; 0x88
 810f6fa:	4925      	ldr	r1, [pc, #148]	; (810f790 <udp_input_local_match+0xc0>)
 810f6fc:	4823      	ldr	r0, [pc, #140]	; (810f78c <udp_input_local_match+0xbc>)
 810f6fe:	f003 fad7 	bl	8112cb0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 810f702:	68fb      	ldr	r3, [r7, #12]
 810f704:	7a1b      	ldrb	r3, [r3, #8]
 810f706:	2b00      	cmp	r3, #0
 810f708:	d00b      	beq.n	810f722 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 810f70a:	68fb      	ldr	r3, [r7, #12]
 810f70c:	7a1a      	ldrb	r2, [r3, #8]
 810f70e:	4b21      	ldr	r3, [pc, #132]	; (810f794 <udp_input_local_match+0xc4>)
 810f710:	685b      	ldr	r3, [r3, #4]
 810f712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810f716:	3301      	adds	r3, #1
 810f718:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 810f71a:	429a      	cmp	r2, r3
 810f71c:	d001      	beq.n	810f722 <udp_input_local_match+0x52>
    return 0;
 810f71e:	2300      	movs	r3, #0
 810f720:	e02b      	b.n	810f77a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 810f722:	79fb      	ldrb	r3, [r7, #7]
 810f724:	2b00      	cmp	r3, #0
 810f726:	d018      	beq.n	810f75a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 810f728:	68fb      	ldr	r3, [r7, #12]
 810f72a:	2b00      	cmp	r3, #0
 810f72c:	d013      	beq.n	810f756 <udp_input_local_match+0x86>
 810f72e:	68fb      	ldr	r3, [r7, #12]
 810f730:	681b      	ldr	r3, [r3, #0]
 810f732:	2b00      	cmp	r3, #0
 810f734:	d00f      	beq.n	810f756 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 810f736:	4b17      	ldr	r3, [pc, #92]	; (810f794 <udp_input_local_match+0xc4>)
 810f738:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 810f73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f73e:	d00a      	beq.n	810f756 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 810f740:	68fb      	ldr	r3, [r7, #12]
 810f742:	681a      	ldr	r2, [r3, #0]
 810f744:	4b13      	ldr	r3, [pc, #76]	; (810f794 <udp_input_local_match+0xc4>)
 810f746:	695b      	ldr	r3, [r3, #20]
 810f748:	405a      	eors	r2, r3
 810f74a:	68bb      	ldr	r3, [r7, #8]
 810f74c:	3308      	adds	r3, #8
 810f74e:	681b      	ldr	r3, [r3, #0]
 810f750:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 810f752:	2b00      	cmp	r3, #0
 810f754:	d110      	bne.n	810f778 <udp_input_local_match+0xa8>
          return 1;
 810f756:	2301      	movs	r3, #1
 810f758:	e00f      	b.n	810f77a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 810f75a:	68fb      	ldr	r3, [r7, #12]
 810f75c:	2b00      	cmp	r3, #0
 810f75e:	d009      	beq.n	810f774 <udp_input_local_match+0xa4>
 810f760:	68fb      	ldr	r3, [r7, #12]
 810f762:	681b      	ldr	r3, [r3, #0]
 810f764:	2b00      	cmp	r3, #0
 810f766:	d005      	beq.n	810f774 <udp_input_local_match+0xa4>
 810f768:	68fb      	ldr	r3, [r7, #12]
 810f76a:	681a      	ldr	r2, [r3, #0]
 810f76c:	4b09      	ldr	r3, [pc, #36]	; (810f794 <udp_input_local_match+0xc4>)
 810f76e:	695b      	ldr	r3, [r3, #20]
 810f770:	429a      	cmp	r2, r3
 810f772:	d101      	bne.n	810f778 <udp_input_local_match+0xa8>
        return 1;
 810f774:	2301      	movs	r3, #1
 810f776:	e000      	b.n	810f77a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 810f778:	2300      	movs	r3, #0
}
 810f77a:	4618      	mov	r0, r3
 810f77c:	3710      	adds	r7, #16
 810f77e:	46bd      	mov	sp, r7
 810f780:	bd80      	pop	{r7, pc}
 810f782:	bf00      	nop
 810f784:	08116394 	.word	0x08116394
 810f788:	081163ec 	.word	0x081163ec
 810f78c:	08116410 	.word	0x08116410
 810f790:	08116438 	.word	0x08116438
 810f794:	10005c18 	.word	0x10005c18

0810f798 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 810f798:	b590      	push	{r4, r7, lr}
 810f79a:	b08d      	sub	sp, #52	; 0x34
 810f79c:	af02      	add	r7, sp, #8
 810f79e:	6078      	str	r0, [r7, #4]
 810f7a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 810f7a2:	2300      	movs	r3, #0
 810f7a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 810f7a6:	687b      	ldr	r3, [r7, #4]
 810f7a8:	2b00      	cmp	r3, #0
 810f7aa:	d105      	bne.n	810f7b8 <udp_input+0x20>
 810f7ac:	4b7c      	ldr	r3, [pc, #496]	; (810f9a0 <udp_input+0x208>)
 810f7ae:	22cf      	movs	r2, #207	; 0xcf
 810f7b0:	497c      	ldr	r1, [pc, #496]	; (810f9a4 <udp_input+0x20c>)
 810f7b2:	487d      	ldr	r0, [pc, #500]	; (810f9a8 <udp_input+0x210>)
 810f7b4:	f003 fa7c 	bl	8112cb0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 810f7b8:	683b      	ldr	r3, [r7, #0]
 810f7ba:	2b00      	cmp	r3, #0
 810f7bc:	d105      	bne.n	810f7ca <udp_input+0x32>
 810f7be:	4b78      	ldr	r3, [pc, #480]	; (810f9a0 <udp_input+0x208>)
 810f7c0:	22d0      	movs	r2, #208	; 0xd0
 810f7c2:	497a      	ldr	r1, [pc, #488]	; (810f9ac <udp_input+0x214>)
 810f7c4:	4878      	ldr	r0, [pc, #480]	; (810f9a8 <udp_input+0x210>)
 810f7c6:	f003 fa73 	bl	8112cb0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 810f7ca:	687b      	ldr	r3, [r7, #4]
 810f7cc:	895b      	ldrh	r3, [r3, #10]
 810f7ce:	2b07      	cmp	r3, #7
 810f7d0:	d803      	bhi.n	810f7da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 810f7d2:	6878      	ldr	r0, [r7, #4]
 810f7d4:	f7ff f926 	bl	810ea24 <pbuf_free>
    goto end;
 810f7d8:	e0de      	b.n	810f998 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 810f7da:	687b      	ldr	r3, [r7, #4]
 810f7dc:	685b      	ldr	r3, [r3, #4]
 810f7de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 810f7e0:	4b73      	ldr	r3, [pc, #460]	; (810f9b0 <udp_input+0x218>)
 810f7e2:	695b      	ldr	r3, [r3, #20]
 810f7e4:	4a72      	ldr	r2, [pc, #456]	; (810f9b0 <udp_input+0x218>)
 810f7e6:	6812      	ldr	r2, [r2, #0]
 810f7e8:	4611      	mov	r1, r2
 810f7ea:	4618      	mov	r0, r3
 810f7ec:	f7fc ff48 	bl	810c680 <ip4_addr_isbroadcast_u32>
 810f7f0:	4603      	mov	r3, r0
 810f7f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 810f7f4:	697b      	ldr	r3, [r7, #20]
 810f7f6:	881b      	ldrh	r3, [r3, #0]
 810f7f8:	b29b      	uxth	r3, r3
 810f7fa:	4618      	mov	r0, r3
 810f7fc:	f7fb f9f6 	bl	810abec <lwip_htons>
 810f800:	4603      	mov	r3, r0
 810f802:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 810f804:	697b      	ldr	r3, [r7, #20]
 810f806:	885b      	ldrh	r3, [r3, #2]
 810f808:	b29b      	uxth	r3, r3
 810f80a:	4618      	mov	r0, r3
 810f80c:	f7fb f9ee 	bl	810abec <lwip_htons>
 810f810:	4603      	mov	r3, r0
 810f812:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 810f814:	2300      	movs	r3, #0
 810f816:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 810f818:	2300      	movs	r3, #0
 810f81a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 810f81c:	2300      	movs	r3, #0
 810f81e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 810f820:	4b64      	ldr	r3, [pc, #400]	; (810f9b4 <udp_input+0x21c>)
 810f822:	681b      	ldr	r3, [r3, #0]
 810f824:	627b      	str	r3, [r7, #36]	; 0x24
 810f826:	e054      	b.n	810f8d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 810f828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f82a:	8a5b      	ldrh	r3, [r3, #18]
 810f82c:	89fa      	ldrh	r2, [r7, #14]
 810f82e:	429a      	cmp	r2, r3
 810f830:	d14a      	bne.n	810f8c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 810f832:	7cfb      	ldrb	r3, [r7, #19]
 810f834:	461a      	mov	r2, r3
 810f836:	6839      	ldr	r1, [r7, #0]
 810f838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810f83a:	f7ff ff49 	bl	810f6d0 <udp_input_local_match>
 810f83e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 810f840:	2b00      	cmp	r3, #0
 810f842:	d041      	beq.n	810f8c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 810f844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f846:	7c1b      	ldrb	r3, [r3, #16]
 810f848:	f003 0304 	and.w	r3, r3, #4
 810f84c:	2b00      	cmp	r3, #0
 810f84e:	d11d      	bne.n	810f88c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 810f850:	69fb      	ldr	r3, [r7, #28]
 810f852:	2b00      	cmp	r3, #0
 810f854:	d102      	bne.n	810f85c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 810f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f858:	61fb      	str	r3, [r7, #28]
 810f85a:	e017      	b.n	810f88c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 810f85c:	7cfb      	ldrb	r3, [r7, #19]
 810f85e:	2b00      	cmp	r3, #0
 810f860:	d014      	beq.n	810f88c <udp_input+0xf4>
 810f862:	4b53      	ldr	r3, [pc, #332]	; (810f9b0 <udp_input+0x218>)
 810f864:	695b      	ldr	r3, [r3, #20]
 810f866:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f86a:	d10f      	bne.n	810f88c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 810f86c:	69fb      	ldr	r3, [r7, #28]
 810f86e:	681a      	ldr	r2, [r3, #0]
 810f870:	683b      	ldr	r3, [r7, #0]
 810f872:	3304      	adds	r3, #4
 810f874:	681b      	ldr	r3, [r3, #0]
 810f876:	429a      	cmp	r2, r3
 810f878:	d008      	beq.n	810f88c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 810f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f87c:	681a      	ldr	r2, [r3, #0]
 810f87e:	683b      	ldr	r3, [r7, #0]
 810f880:	3304      	adds	r3, #4
 810f882:	681b      	ldr	r3, [r3, #0]
 810f884:	429a      	cmp	r2, r3
 810f886:	d101      	bne.n	810f88c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 810f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f88a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 810f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f88e:	8a9b      	ldrh	r3, [r3, #20]
 810f890:	8a3a      	ldrh	r2, [r7, #16]
 810f892:	429a      	cmp	r2, r3
 810f894:	d118      	bne.n	810f8c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 810f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f898:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 810f89a:	2b00      	cmp	r3, #0
 810f89c:	d005      	beq.n	810f8aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 810f89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8a0:	685a      	ldr	r2, [r3, #4]
 810f8a2:	4b43      	ldr	r3, [pc, #268]	; (810f9b0 <udp_input+0x218>)
 810f8a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 810f8a6:	429a      	cmp	r2, r3
 810f8a8:	d10e      	bne.n	810f8c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 810f8aa:	6a3b      	ldr	r3, [r7, #32]
 810f8ac:	2b00      	cmp	r3, #0
 810f8ae:	d014      	beq.n	810f8da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 810f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8b2:	68da      	ldr	r2, [r3, #12]
 810f8b4:	6a3b      	ldr	r3, [r7, #32]
 810f8b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 810f8b8:	4b3e      	ldr	r3, [pc, #248]	; (810f9b4 <udp_input+0x21c>)
 810f8ba:	681a      	ldr	r2, [r3, #0]
 810f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 810f8c0:	4a3c      	ldr	r2, [pc, #240]	; (810f9b4 <udp_input+0x21c>)
 810f8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 810f8c6:	e008      	b.n	810f8da <udp_input+0x142>
      }
    }

    prev = pcb;
 810f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 810f8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8ce:	68db      	ldr	r3, [r3, #12]
 810f8d0:	627b      	str	r3, [r7, #36]	; 0x24
 810f8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8d4:	2b00      	cmp	r3, #0
 810f8d6:	d1a7      	bne.n	810f828 <udp_input+0x90>
 810f8d8:	e000      	b.n	810f8dc <udp_input+0x144>
        break;
 810f8da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 810f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8de:	2b00      	cmp	r3, #0
 810f8e0:	d101      	bne.n	810f8e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 810f8e2:	69fb      	ldr	r3, [r7, #28]
 810f8e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 810f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f8e8:	2b00      	cmp	r3, #0
 810f8ea:	d002      	beq.n	810f8f2 <udp_input+0x15a>
    for_us = 1;
 810f8ec:	2301      	movs	r3, #1
 810f8ee:	76fb      	strb	r3, [r7, #27]
 810f8f0:	e00a      	b.n	810f908 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 810f8f2:	683b      	ldr	r3, [r7, #0]
 810f8f4:	3304      	adds	r3, #4
 810f8f6:	681a      	ldr	r2, [r3, #0]
 810f8f8:	4b2d      	ldr	r3, [pc, #180]	; (810f9b0 <udp_input+0x218>)
 810f8fa:	695b      	ldr	r3, [r3, #20]
 810f8fc:	429a      	cmp	r2, r3
 810f8fe:	bf0c      	ite	eq
 810f900:	2301      	moveq	r3, #1
 810f902:	2300      	movne	r3, #0
 810f904:	b2db      	uxtb	r3, r3
 810f906:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 810f908:	7efb      	ldrb	r3, [r7, #27]
 810f90a:	2b00      	cmp	r3, #0
 810f90c:	d041      	beq.n	810f992 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 810f90e:	2108      	movs	r1, #8
 810f910:	6878      	ldr	r0, [r7, #4]
 810f912:	f7ff f801 	bl	810e918 <pbuf_remove_header>
 810f916:	4603      	mov	r3, r0
 810f918:	2b00      	cmp	r3, #0
 810f91a:	d00a      	beq.n	810f932 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 810f91c:	4b20      	ldr	r3, [pc, #128]	; (810f9a0 <udp_input+0x208>)
 810f91e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 810f922:	4925      	ldr	r1, [pc, #148]	; (810f9b8 <udp_input+0x220>)
 810f924:	4820      	ldr	r0, [pc, #128]	; (810f9a8 <udp_input+0x210>)
 810f926:	f003 f9c3 	bl	8112cb0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 810f92a:	6878      	ldr	r0, [r7, #4]
 810f92c:	f7ff f87a 	bl	810ea24 <pbuf_free>
      goto end;
 810f930:	e032      	b.n	810f998 <udp_input+0x200>
    }

    if (pcb != NULL) {
 810f932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f934:	2b00      	cmp	r3, #0
 810f936:	d012      	beq.n	810f95e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 810f938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f93a:	699b      	ldr	r3, [r3, #24]
 810f93c:	2b00      	cmp	r3, #0
 810f93e:	d00a      	beq.n	810f956 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 810f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f942:	699c      	ldr	r4, [r3, #24]
 810f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f946:	69d8      	ldr	r0, [r3, #28]
 810f948:	8a3b      	ldrh	r3, [r7, #16]
 810f94a:	9300      	str	r3, [sp, #0]
 810f94c:	4b1b      	ldr	r3, [pc, #108]	; (810f9bc <udp_input+0x224>)
 810f94e:	687a      	ldr	r2, [r7, #4]
 810f950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810f952:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 810f954:	e021      	b.n	810f99a <udp_input+0x202>
        pbuf_free(p);
 810f956:	6878      	ldr	r0, [r7, #4]
 810f958:	f7ff f864 	bl	810ea24 <pbuf_free>
        goto end;
 810f95c:	e01c      	b.n	810f998 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 810f95e:	7cfb      	ldrb	r3, [r7, #19]
 810f960:	2b00      	cmp	r3, #0
 810f962:	d112      	bne.n	810f98a <udp_input+0x1f2>
 810f964:	4b12      	ldr	r3, [pc, #72]	; (810f9b0 <udp_input+0x218>)
 810f966:	695b      	ldr	r3, [r3, #20]
 810f968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 810f96c:	2be0      	cmp	r3, #224	; 0xe0
 810f96e:	d00c      	beq.n	810f98a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 810f970:	4b0f      	ldr	r3, [pc, #60]	; (810f9b0 <udp_input+0x218>)
 810f972:	899b      	ldrh	r3, [r3, #12]
 810f974:	3308      	adds	r3, #8
 810f976:	b29b      	uxth	r3, r3
 810f978:	b21b      	sxth	r3, r3
 810f97a:	4619      	mov	r1, r3
 810f97c:	6878      	ldr	r0, [r7, #4]
 810f97e:	f7ff f83e 	bl	810e9fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 810f982:	2103      	movs	r1, #3
 810f984:	6878      	ldr	r0, [r7, #4]
 810f986:	f7fc fa89 	bl	810be9c <icmp_dest_unreach>
      pbuf_free(p);
 810f98a:	6878      	ldr	r0, [r7, #4]
 810f98c:	f7ff f84a 	bl	810ea24 <pbuf_free>
  return;
 810f990:	e003      	b.n	810f99a <udp_input+0x202>
    pbuf_free(p);
 810f992:	6878      	ldr	r0, [r7, #4]
 810f994:	f7ff f846 	bl	810ea24 <pbuf_free>
  return;
 810f998:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 810f99a:	372c      	adds	r7, #44	; 0x2c
 810f99c:	46bd      	mov	sp, r7
 810f99e:	bd90      	pop	{r4, r7, pc}
 810f9a0:	08116394 	.word	0x08116394
 810f9a4:	08116460 	.word	0x08116460
 810f9a8:	08116410 	.word	0x08116410
 810f9ac:	08116478 	.word	0x08116478
 810f9b0:	10005c18 	.word	0x10005c18
 810f9b4:	100087b4 	.word	0x100087b4
 810f9b8:	08116494 	.word	0x08116494
 810f9bc:	10005c28 	.word	0x10005c28

0810f9c0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 810f9c0:	b580      	push	{r7, lr}
 810f9c2:	b082      	sub	sp, #8
 810f9c4:	af00      	add	r7, sp, #0
 810f9c6:	6078      	str	r0, [r7, #4]
 810f9c8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 810f9ca:	687b      	ldr	r3, [r7, #4]
 810f9cc:	2b00      	cmp	r3, #0
 810f9ce:	d109      	bne.n	810f9e4 <udp_send+0x24>
 810f9d0:	4b11      	ldr	r3, [pc, #68]	; (810fa18 <udp_send+0x58>)
 810f9d2:	f240 12d5 	movw	r2, #469	; 0x1d5
 810f9d6:	4911      	ldr	r1, [pc, #68]	; (810fa1c <udp_send+0x5c>)
 810f9d8:	4811      	ldr	r0, [pc, #68]	; (810fa20 <udp_send+0x60>)
 810f9da:	f003 f969 	bl	8112cb0 <iprintf>
 810f9de:	f06f 030f 	mvn.w	r3, #15
 810f9e2:	e015      	b.n	810fa10 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 810f9e4:	683b      	ldr	r3, [r7, #0]
 810f9e6:	2b00      	cmp	r3, #0
 810f9e8:	d109      	bne.n	810f9fe <udp_send+0x3e>
 810f9ea:	4b0b      	ldr	r3, [pc, #44]	; (810fa18 <udp_send+0x58>)
 810f9ec:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 810f9f0:	490c      	ldr	r1, [pc, #48]	; (810fa24 <udp_send+0x64>)
 810f9f2:	480b      	ldr	r0, [pc, #44]	; (810fa20 <udp_send+0x60>)
 810f9f4:	f003 f95c 	bl	8112cb0 <iprintf>
 810f9f8:	f06f 030f 	mvn.w	r3, #15
 810f9fc:	e008      	b.n	810fa10 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 810f9fe:	687b      	ldr	r3, [r7, #4]
 810fa00:	1d1a      	adds	r2, r3, #4
 810fa02:	687b      	ldr	r3, [r7, #4]
 810fa04:	8a9b      	ldrh	r3, [r3, #20]
 810fa06:	6839      	ldr	r1, [r7, #0]
 810fa08:	6878      	ldr	r0, [r7, #4]
 810fa0a:	f000 f80d 	bl	810fa28 <udp_sendto>
 810fa0e:	4603      	mov	r3, r0
}
 810fa10:	4618      	mov	r0, r3
 810fa12:	3708      	adds	r7, #8
 810fa14:	46bd      	mov	sp, r7
 810fa16:	bd80      	pop	{r7, pc}
 810fa18:	08116394 	.word	0x08116394
 810fa1c:	081164b0 	.word	0x081164b0
 810fa20:	08116410 	.word	0x08116410
 810fa24:	081164c8 	.word	0x081164c8

0810fa28 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 810fa28:	b580      	push	{r7, lr}
 810fa2a:	b088      	sub	sp, #32
 810fa2c:	af02      	add	r7, sp, #8
 810fa2e:	60f8      	str	r0, [r7, #12]
 810fa30:	60b9      	str	r1, [r7, #8]
 810fa32:	607a      	str	r2, [r7, #4]
 810fa34:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 810fa36:	68fb      	ldr	r3, [r7, #12]
 810fa38:	2b00      	cmp	r3, #0
 810fa3a:	d109      	bne.n	810fa50 <udp_sendto+0x28>
 810fa3c:	4b23      	ldr	r3, [pc, #140]	; (810facc <udp_sendto+0xa4>)
 810fa3e:	f44f 7206 	mov.w	r2, #536	; 0x218
 810fa42:	4923      	ldr	r1, [pc, #140]	; (810fad0 <udp_sendto+0xa8>)
 810fa44:	4823      	ldr	r0, [pc, #140]	; (810fad4 <udp_sendto+0xac>)
 810fa46:	f003 f933 	bl	8112cb0 <iprintf>
 810fa4a:	f06f 030f 	mvn.w	r3, #15
 810fa4e:	e038      	b.n	810fac2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 810fa50:	68bb      	ldr	r3, [r7, #8]
 810fa52:	2b00      	cmp	r3, #0
 810fa54:	d109      	bne.n	810fa6a <udp_sendto+0x42>
 810fa56:	4b1d      	ldr	r3, [pc, #116]	; (810facc <udp_sendto+0xa4>)
 810fa58:	f240 2219 	movw	r2, #537	; 0x219
 810fa5c:	491e      	ldr	r1, [pc, #120]	; (810fad8 <udp_sendto+0xb0>)
 810fa5e:	481d      	ldr	r0, [pc, #116]	; (810fad4 <udp_sendto+0xac>)
 810fa60:	f003 f926 	bl	8112cb0 <iprintf>
 810fa64:	f06f 030f 	mvn.w	r3, #15
 810fa68:	e02b      	b.n	810fac2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 810fa6a:	687b      	ldr	r3, [r7, #4]
 810fa6c:	2b00      	cmp	r3, #0
 810fa6e:	d109      	bne.n	810fa84 <udp_sendto+0x5c>
 810fa70:	4b16      	ldr	r3, [pc, #88]	; (810facc <udp_sendto+0xa4>)
 810fa72:	f240 221a 	movw	r2, #538	; 0x21a
 810fa76:	4919      	ldr	r1, [pc, #100]	; (810fadc <udp_sendto+0xb4>)
 810fa78:	4816      	ldr	r0, [pc, #88]	; (810fad4 <udp_sendto+0xac>)
 810fa7a:	f003 f919 	bl	8112cb0 <iprintf>
 810fa7e:	f06f 030f 	mvn.w	r3, #15
 810fa82:	e01e      	b.n	810fac2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 810fa84:	68fb      	ldr	r3, [r7, #12]
 810fa86:	7a1b      	ldrb	r3, [r3, #8]
 810fa88:	2b00      	cmp	r3, #0
 810fa8a:	d006      	beq.n	810fa9a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 810fa8c:	68fb      	ldr	r3, [r7, #12]
 810fa8e:	7a1b      	ldrb	r3, [r3, #8]
 810fa90:	4618      	mov	r0, r3
 810fa92:	f7fe fc95 	bl	810e3c0 <netif_get_by_index>
 810fa96:	6178      	str	r0, [r7, #20]
 810fa98:	e003      	b.n	810faa2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 810fa9a:	6878      	ldr	r0, [r7, #4]
 810fa9c:	f7fc fb64 	bl	810c168 <ip4_route>
 810faa0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 810faa2:	697b      	ldr	r3, [r7, #20]
 810faa4:	2b00      	cmp	r3, #0
 810faa6:	d102      	bne.n	810faae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 810faa8:	f06f 0303 	mvn.w	r3, #3
 810faac:	e009      	b.n	810fac2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 810faae:	887a      	ldrh	r2, [r7, #2]
 810fab0:	697b      	ldr	r3, [r7, #20]
 810fab2:	9300      	str	r3, [sp, #0]
 810fab4:	4613      	mov	r3, r2
 810fab6:	687a      	ldr	r2, [r7, #4]
 810fab8:	68b9      	ldr	r1, [r7, #8]
 810faba:	68f8      	ldr	r0, [r7, #12]
 810fabc:	f000 f810 	bl	810fae0 <udp_sendto_if>
 810fac0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 810fac2:	4618      	mov	r0, r3
 810fac4:	3718      	adds	r7, #24
 810fac6:	46bd      	mov	sp, r7
 810fac8:	bd80      	pop	{r7, pc}
 810faca:	bf00      	nop
 810facc:	08116394 	.word	0x08116394
 810fad0:	081164e0 	.word	0x081164e0
 810fad4:	08116410 	.word	0x08116410
 810fad8:	081164f8 	.word	0x081164f8
 810fadc:	08116514 	.word	0x08116514

0810fae0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 810fae0:	b580      	push	{r7, lr}
 810fae2:	b088      	sub	sp, #32
 810fae4:	af02      	add	r7, sp, #8
 810fae6:	60f8      	str	r0, [r7, #12]
 810fae8:	60b9      	str	r1, [r7, #8]
 810faea:	607a      	str	r2, [r7, #4]
 810faec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 810faee:	68fb      	ldr	r3, [r7, #12]
 810faf0:	2b00      	cmp	r3, #0
 810faf2:	d109      	bne.n	810fb08 <udp_sendto_if+0x28>
 810faf4:	4b2e      	ldr	r3, [pc, #184]	; (810fbb0 <udp_sendto_if+0xd0>)
 810faf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 810fafa:	492e      	ldr	r1, [pc, #184]	; (810fbb4 <udp_sendto_if+0xd4>)
 810fafc:	482e      	ldr	r0, [pc, #184]	; (810fbb8 <udp_sendto_if+0xd8>)
 810fafe:	f003 f8d7 	bl	8112cb0 <iprintf>
 810fb02:	f06f 030f 	mvn.w	r3, #15
 810fb06:	e04f      	b.n	810fba8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 810fb08:	68bb      	ldr	r3, [r7, #8]
 810fb0a:	2b00      	cmp	r3, #0
 810fb0c:	d109      	bne.n	810fb22 <udp_sendto_if+0x42>
 810fb0e:	4b28      	ldr	r3, [pc, #160]	; (810fbb0 <udp_sendto_if+0xd0>)
 810fb10:	f240 2281 	movw	r2, #641	; 0x281
 810fb14:	4929      	ldr	r1, [pc, #164]	; (810fbbc <udp_sendto_if+0xdc>)
 810fb16:	4828      	ldr	r0, [pc, #160]	; (810fbb8 <udp_sendto_if+0xd8>)
 810fb18:	f003 f8ca 	bl	8112cb0 <iprintf>
 810fb1c:	f06f 030f 	mvn.w	r3, #15
 810fb20:	e042      	b.n	810fba8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 810fb22:	687b      	ldr	r3, [r7, #4]
 810fb24:	2b00      	cmp	r3, #0
 810fb26:	d109      	bne.n	810fb3c <udp_sendto_if+0x5c>
 810fb28:	4b21      	ldr	r3, [pc, #132]	; (810fbb0 <udp_sendto_if+0xd0>)
 810fb2a:	f240 2282 	movw	r2, #642	; 0x282
 810fb2e:	4924      	ldr	r1, [pc, #144]	; (810fbc0 <udp_sendto_if+0xe0>)
 810fb30:	4821      	ldr	r0, [pc, #132]	; (810fbb8 <udp_sendto_if+0xd8>)
 810fb32:	f003 f8bd 	bl	8112cb0 <iprintf>
 810fb36:	f06f 030f 	mvn.w	r3, #15
 810fb3a:	e035      	b.n	810fba8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 810fb3c:	6a3b      	ldr	r3, [r7, #32]
 810fb3e:	2b00      	cmp	r3, #0
 810fb40:	d109      	bne.n	810fb56 <udp_sendto_if+0x76>
 810fb42:	4b1b      	ldr	r3, [pc, #108]	; (810fbb0 <udp_sendto_if+0xd0>)
 810fb44:	f240 2283 	movw	r2, #643	; 0x283
 810fb48:	491e      	ldr	r1, [pc, #120]	; (810fbc4 <udp_sendto_if+0xe4>)
 810fb4a:	481b      	ldr	r0, [pc, #108]	; (810fbb8 <udp_sendto_if+0xd8>)
 810fb4c:	f003 f8b0 	bl	8112cb0 <iprintf>
 810fb50:	f06f 030f 	mvn.w	r3, #15
 810fb54:	e028      	b.n	810fba8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 810fb56:	68fb      	ldr	r3, [r7, #12]
 810fb58:	2b00      	cmp	r3, #0
 810fb5a:	d009      	beq.n	810fb70 <udp_sendto_if+0x90>
 810fb5c:	68fb      	ldr	r3, [r7, #12]
 810fb5e:	681b      	ldr	r3, [r3, #0]
 810fb60:	2b00      	cmp	r3, #0
 810fb62:	d005      	beq.n	810fb70 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 810fb64:	68fb      	ldr	r3, [r7, #12]
 810fb66:	681b      	ldr	r3, [r3, #0]
 810fb68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 810fb6c:	2be0      	cmp	r3, #224	; 0xe0
 810fb6e:	d103      	bne.n	810fb78 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 810fb70:	6a3b      	ldr	r3, [r7, #32]
 810fb72:	3304      	adds	r3, #4
 810fb74:	617b      	str	r3, [r7, #20]
 810fb76:	e00b      	b.n	810fb90 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 810fb78:	68fb      	ldr	r3, [r7, #12]
 810fb7a:	681a      	ldr	r2, [r3, #0]
 810fb7c:	6a3b      	ldr	r3, [r7, #32]
 810fb7e:	3304      	adds	r3, #4
 810fb80:	681b      	ldr	r3, [r3, #0]
 810fb82:	429a      	cmp	r2, r3
 810fb84:	d002      	beq.n	810fb8c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 810fb86:	f06f 0303 	mvn.w	r3, #3
 810fb8a:	e00d      	b.n	810fba8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 810fb8c:	68fb      	ldr	r3, [r7, #12]
 810fb8e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 810fb90:	887a      	ldrh	r2, [r7, #2]
 810fb92:	697b      	ldr	r3, [r7, #20]
 810fb94:	9301      	str	r3, [sp, #4]
 810fb96:	6a3b      	ldr	r3, [r7, #32]
 810fb98:	9300      	str	r3, [sp, #0]
 810fb9a:	4613      	mov	r3, r2
 810fb9c:	687a      	ldr	r2, [r7, #4]
 810fb9e:	68b9      	ldr	r1, [r7, #8]
 810fba0:	68f8      	ldr	r0, [r7, #12]
 810fba2:	f000 f811 	bl	810fbc8 <udp_sendto_if_src>
 810fba6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 810fba8:	4618      	mov	r0, r3
 810fbaa:	3718      	adds	r7, #24
 810fbac:	46bd      	mov	sp, r7
 810fbae:	bd80      	pop	{r7, pc}
 810fbb0:	08116394 	.word	0x08116394
 810fbb4:	08116530 	.word	0x08116530
 810fbb8:	08116410 	.word	0x08116410
 810fbbc:	0811654c 	.word	0x0811654c
 810fbc0:	08116568 	.word	0x08116568
 810fbc4:	08116588 	.word	0x08116588

0810fbc8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 810fbc8:	b580      	push	{r7, lr}
 810fbca:	b08c      	sub	sp, #48	; 0x30
 810fbcc:	af04      	add	r7, sp, #16
 810fbce:	60f8      	str	r0, [r7, #12]
 810fbd0:	60b9      	str	r1, [r7, #8]
 810fbd2:	607a      	str	r2, [r7, #4]
 810fbd4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 810fbd6:	68fb      	ldr	r3, [r7, #12]
 810fbd8:	2b00      	cmp	r3, #0
 810fbda:	d109      	bne.n	810fbf0 <udp_sendto_if_src+0x28>
 810fbdc:	4b65      	ldr	r3, [pc, #404]	; (810fd74 <udp_sendto_if_src+0x1ac>)
 810fbde:	f240 22d1 	movw	r2, #721	; 0x2d1
 810fbe2:	4965      	ldr	r1, [pc, #404]	; (810fd78 <udp_sendto_if_src+0x1b0>)
 810fbe4:	4865      	ldr	r0, [pc, #404]	; (810fd7c <udp_sendto_if_src+0x1b4>)
 810fbe6:	f003 f863 	bl	8112cb0 <iprintf>
 810fbea:	f06f 030f 	mvn.w	r3, #15
 810fbee:	e0bc      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 810fbf0:	68bb      	ldr	r3, [r7, #8]
 810fbf2:	2b00      	cmp	r3, #0
 810fbf4:	d109      	bne.n	810fc0a <udp_sendto_if_src+0x42>
 810fbf6:	4b5f      	ldr	r3, [pc, #380]	; (810fd74 <udp_sendto_if_src+0x1ac>)
 810fbf8:	f240 22d2 	movw	r2, #722	; 0x2d2
 810fbfc:	4960      	ldr	r1, [pc, #384]	; (810fd80 <udp_sendto_if_src+0x1b8>)
 810fbfe:	485f      	ldr	r0, [pc, #380]	; (810fd7c <udp_sendto_if_src+0x1b4>)
 810fc00:	f003 f856 	bl	8112cb0 <iprintf>
 810fc04:	f06f 030f 	mvn.w	r3, #15
 810fc08:	e0af      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 810fc0a:	687b      	ldr	r3, [r7, #4]
 810fc0c:	2b00      	cmp	r3, #0
 810fc0e:	d109      	bne.n	810fc24 <udp_sendto_if_src+0x5c>
 810fc10:	4b58      	ldr	r3, [pc, #352]	; (810fd74 <udp_sendto_if_src+0x1ac>)
 810fc12:	f240 22d3 	movw	r2, #723	; 0x2d3
 810fc16:	495b      	ldr	r1, [pc, #364]	; (810fd84 <udp_sendto_if_src+0x1bc>)
 810fc18:	4858      	ldr	r0, [pc, #352]	; (810fd7c <udp_sendto_if_src+0x1b4>)
 810fc1a:	f003 f849 	bl	8112cb0 <iprintf>
 810fc1e:	f06f 030f 	mvn.w	r3, #15
 810fc22:	e0a2      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 810fc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fc26:	2b00      	cmp	r3, #0
 810fc28:	d109      	bne.n	810fc3e <udp_sendto_if_src+0x76>
 810fc2a:	4b52      	ldr	r3, [pc, #328]	; (810fd74 <udp_sendto_if_src+0x1ac>)
 810fc2c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 810fc30:	4955      	ldr	r1, [pc, #340]	; (810fd88 <udp_sendto_if_src+0x1c0>)
 810fc32:	4852      	ldr	r0, [pc, #328]	; (810fd7c <udp_sendto_if_src+0x1b4>)
 810fc34:	f003 f83c 	bl	8112cb0 <iprintf>
 810fc38:	f06f 030f 	mvn.w	r3, #15
 810fc3c:	e095      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 810fc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810fc40:	2b00      	cmp	r3, #0
 810fc42:	d109      	bne.n	810fc58 <udp_sendto_if_src+0x90>
 810fc44:	4b4b      	ldr	r3, [pc, #300]	; (810fd74 <udp_sendto_if_src+0x1ac>)
 810fc46:	f240 22d5 	movw	r2, #725	; 0x2d5
 810fc4a:	4950      	ldr	r1, [pc, #320]	; (810fd8c <udp_sendto_if_src+0x1c4>)
 810fc4c:	484b      	ldr	r0, [pc, #300]	; (810fd7c <udp_sendto_if_src+0x1b4>)
 810fc4e:	f003 f82f 	bl	8112cb0 <iprintf>
 810fc52:	f06f 030f 	mvn.w	r3, #15
 810fc56:	e088      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 810fc58:	68fb      	ldr	r3, [r7, #12]
 810fc5a:	8a5b      	ldrh	r3, [r3, #18]
 810fc5c:	2b00      	cmp	r3, #0
 810fc5e:	d10f      	bne.n	810fc80 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 810fc60:	68f9      	ldr	r1, [r7, #12]
 810fc62:	68fb      	ldr	r3, [r7, #12]
 810fc64:	8a5b      	ldrh	r3, [r3, #18]
 810fc66:	461a      	mov	r2, r3
 810fc68:	68f8      	ldr	r0, [r7, #12]
 810fc6a:	f000 f893 	bl	810fd94 <udp_bind>
 810fc6e:	4603      	mov	r3, r0
 810fc70:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 810fc72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 810fc76:	2b00      	cmp	r3, #0
 810fc78:	d002      	beq.n	810fc80 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 810fc7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 810fc7e:	e074      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 810fc80:	68bb      	ldr	r3, [r7, #8]
 810fc82:	891b      	ldrh	r3, [r3, #8]
 810fc84:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 810fc88:	4293      	cmp	r3, r2
 810fc8a:	d902      	bls.n	810fc92 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 810fc8c:	f04f 33ff 	mov.w	r3, #4294967295
 810fc90:	e06b      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 810fc92:	2108      	movs	r1, #8
 810fc94:	68b8      	ldr	r0, [r7, #8]
 810fc96:	f7fe fe2f 	bl	810e8f8 <pbuf_add_header>
 810fc9a:	4603      	mov	r3, r0
 810fc9c:	2b00      	cmp	r3, #0
 810fc9e:	d015      	beq.n	810fccc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 810fca0:	f44f 7220 	mov.w	r2, #640	; 0x280
 810fca4:	2108      	movs	r1, #8
 810fca6:	2022      	movs	r0, #34	; 0x22
 810fca8:	f7fe fbda 	bl	810e460 <pbuf_alloc>
 810fcac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 810fcae:	69fb      	ldr	r3, [r7, #28]
 810fcb0:	2b00      	cmp	r3, #0
 810fcb2:	d102      	bne.n	810fcba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 810fcb4:	f04f 33ff 	mov.w	r3, #4294967295
 810fcb8:	e057      	b.n	810fd6a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 810fcba:	68bb      	ldr	r3, [r7, #8]
 810fcbc:	891b      	ldrh	r3, [r3, #8]
 810fcbe:	2b00      	cmp	r3, #0
 810fcc0:	d006      	beq.n	810fcd0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 810fcc2:	68b9      	ldr	r1, [r7, #8]
 810fcc4:	69f8      	ldr	r0, [r7, #28]
 810fcc6:	f7fe ffd1 	bl	810ec6c <pbuf_chain>
 810fcca:	e001      	b.n	810fcd0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 810fccc:	68bb      	ldr	r3, [r7, #8]
 810fcce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 810fcd0:	69fb      	ldr	r3, [r7, #28]
 810fcd2:	895b      	ldrh	r3, [r3, #10]
 810fcd4:	2b07      	cmp	r3, #7
 810fcd6:	d806      	bhi.n	810fce6 <udp_sendto_if_src+0x11e>
 810fcd8:	4b26      	ldr	r3, [pc, #152]	; (810fd74 <udp_sendto_if_src+0x1ac>)
 810fcda:	f240 320d 	movw	r2, #781	; 0x30d
 810fcde:	492c      	ldr	r1, [pc, #176]	; (810fd90 <udp_sendto_if_src+0x1c8>)
 810fce0:	4826      	ldr	r0, [pc, #152]	; (810fd7c <udp_sendto_if_src+0x1b4>)
 810fce2:	f002 ffe5 	bl	8112cb0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 810fce6:	69fb      	ldr	r3, [r7, #28]
 810fce8:	685b      	ldr	r3, [r3, #4]
 810fcea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 810fcec:	68fb      	ldr	r3, [r7, #12]
 810fcee:	8a5b      	ldrh	r3, [r3, #18]
 810fcf0:	4618      	mov	r0, r3
 810fcf2:	f7fa ff7b 	bl	810abec <lwip_htons>
 810fcf6:	4603      	mov	r3, r0
 810fcf8:	461a      	mov	r2, r3
 810fcfa:	697b      	ldr	r3, [r7, #20]
 810fcfc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 810fcfe:	887b      	ldrh	r3, [r7, #2]
 810fd00:	4618      	mov	r0, r3
 810fd02:	f7fa ff73 	bl	810abec <lwip_htons>
 810fd06:	4603      	mov	r3, r0
 810fd08:	461a      	mov	r2, r3
 810fd0a:	697b      	ldr	r3, [r7, #20]
 810fd0c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 810fd0e:	697b      	ldr	r3, [r7, #20]
 810fd10:	2200      	movs	r2, #0
 810fd12:	719a      	strb	r2, [r3, #6]
 810fd14:	2200      	movs	r2, #0
 810fd16:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 810fd18:	69fb      	ldr	r3, [r7, #28]
 810fd1a:	891b      	ldrh	r3, [r3, #8]
 810fd1c:	4618      	mov	r0, r3
 810fd1e:	f7fa ff65 	bl	810abec <lwip_htons>
 810fd22:	4603      	mov	r3, r0
 810fd24:	461a      	mov	r2, r3
 810fd26:	697b      	ldr	r3, [r7, #20]
 810fd28:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 810fd2a:	2311      	movs	r3, #17
 810fd2c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 810fd2e:	68fb      	ldr	r3, [r7, #12]
 810fd30:	7adb      	ldrb	r3, [r3, #11]
 810fd32:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 810fd34:	68fb      	ldr	r3, [r7, #12]
 810fd36:	7a9b      	ldrb	r3, [r3, #10]
 810fd38:	7cb9      	ldrb	r1, [r7, #18]
 810fd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810fd3c:	9202      	str	r2, [sp, #8]
 810fd3e:	7cfa      	ldrb	r2, [r7, #19]
 810fd40:	9201      	str	r2, [sp, #4]
 810fd42:	9300      	str	r3, [sp, #0]
 810fd44:	460b      	mov	r3, r1
 810fd46:	687a      	ldr	r2, [r7, #4]
 810fd48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810fd4a:	69f8      	ldr	r0, [r7, #28]
 810fd4c:	f7fc fbea 	bl	810c524 <ip4_output_if_src>
 810fd50:	4603      	mov	r3, r0
 810fd52:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 810fd54:	69fa      	ldr	r2, [r7, #28]
 810fd56:	68bb      	ldr	r3, [r7, #8]
 810fd58:	429a      	cmp	r2, r3
 810fd5a:	d004      	beq.n	810fd66 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 810fd5c:	69f8      	ldr	r0, [r7, #28]
 810fd5e:	f7fe fe61 	bl	810ea24 <pbuf_free>
    q = NULL;
 810fd62:	2300      	movs	r3, #0
 810fd64:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 810fd66:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 810fd6a:	4618      	mov	r0, r3
 810fd6c:	3720      	adds	r7, #32
 810fd6e:	46bd      	mov	sp, r7
 810fd70:	bd80      	pop	{r7, pc}
 810fd72:	bf00      	nop
 810fd74:	08116394 	.word	0x08116394
 810fd78:	081165a8 	.word	0x081165a8
 810fd7c:	08116410 	.word	0x08116410
 810fd80:	081165c8 	.word	0x081165c8
 810fd84:	081165e8 	.word	0x081165e8
 810fd88:	0811660c 	.word	0x0811660c
 810fd8c:	08116630 	.word	0x08116630
 810fd90:	08116654 	.word	0x08116654

0810fd94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 810fd94:	b580      	push	{r7, lr}
 810fd96:	b086      	sub	sp, #24
 810fd98:	af00      	add	r7, sp, #0
 810fd9a:	60f8      	str	r0, [r7, #12]
 810fd9c:	60b9      	str	r1, [r7, #8]
 810fd9e:	4613      	mov	r3, r2
 810fda0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 810fda2:	68bb      	ldr	r3, [r7, #8]
 810fda4:	2b00      	cmp	r3, #0
 810fda6:	d101      	bne.n	810fdac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 810fda8:	4b39      	ldr	r3, [pc, #228]	; (810fe90 <udp_bind+0xfc>)
 810fdaa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 810fdac:	68fb      	ldr	r3, [r7, #12]
 810fdae:	2b00      	cmp	r3, #0
 810fdb0:	d109      	bne.n	810fdc6 <udp_bind+0x32>
 810fdb2:	4b38      	ldr	r3, [pc, #224]	; (810fe94 <udp_bind+0x100>)
 810fdb4:	f240 32b7 	movw	r2, #951	; 0x3b7
 810fdb8:	4937      	ldr	r1, [pc, #220]	; (810fe98 <udp_bind+0x104>)
 810fdba:	4838      	ldr	r0, [pc, #224]	; (810fe9c <udp_bind+0x108>)
 810fdbc:	f002 ff78 	bl	8112cb0 <iprintf>
 810fdc0:	f06f 030f 	mvn.w	r3, #15
 810fdc4:	e060      	b.n	810fe88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 810fdc6:	2300      	movs	r3, #0
 810fdc8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 810fdca:	4b35      	ldr	r3, [pc, #212]	; (810fea0 <udp_bind+0x10c>)
 810fdcc:	681b      	ldr	r3, [r3, #0]
 810fdce:	617b      	str	r3, [r7, #20]
 810fdd0:	e009      	b.n	810fde6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 810fdd2:	68fa      	ldr	r2, [r7, #12]
 810fdd4:	697b      	ldr	r3, [r7, #20]
 810fdd6:	429a      	cmp	r2, r3
 810fdd8:	d102      	bne.n	810fde0 <udp_bind+0x4c>
      rebind = 1;
 810fdda:	2301      	movs	r3, #1
 810fddc:	74fb      	strb	r3, [r7, #19]
      break;
 810fdde:	e005      	b.n	810fdec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 810fde0:	697b      	ldr	r3, [r7, #20]
 810fde2:	68db      	ldr	r3, [r3, #12]
 810fde4:	617b      	str	r3, [r7, #20]
 810fde6:	697b      	ldr	r3, [r7, #20]
 810fde8:	2b00      	cmp	r3, #0
 810fdea:	d1f2      	bne.n	810fdd2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 810fdec:	88fb      	ldrh	r3, [r7, #6]
 810fdee:	2b00      	cmp	r3, #0
 810fdf0:	d109      	bne.n	810fe06 <udp_bind+0x72>
    port = udp_new_port();
 810fdf2:	f7ff fc35 	bl	810f660 <udp_new_port>
 810fdf6:	4603      	mov	r3, r0
 810fdf8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 810fdfa:	88fb      	ldrh	r3, [r7, #6]
 810fdfc:	2b00      	cmp	r3, #0
 810fdfe:	d12c      	bne.n	810fe5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 810fe00:	f06f 0307 	mvn.w	r3, #7
 810fe04:	e040      	b.n	810fe88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 810fe06:	4b26      	ldr	r3, [pc, #152]	; (810fea0 <udp_bind+0x10c>)
 810fe08:	681b      	ldr	r3, [r3, #0]
 810fe0a:	617b      	str	r3, [r7, #20]
 810fe0c:	e022      	b.n	810fe54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 810fe0e:	68fa      	ldr	r2, [r7, #12]
 810fe10:	697b      	ldr	r3, [r7, #20]
 810fe12:	429a      	cmp	r2, r3
 810fe14:	d01b      	beq.n	810fe4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 810fe16:	697b      	ldr	r3, [r7, #20]
 810fe18:	8a5b      	ldrh	r3, [r3, #18]
 810fe1a:	88fa      	ldrh	r2, [r7, #6]
 810fe1c:	429a      	cmp	r2, r3
 810fe1e:	d116      	bne.n	810fe4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 810fe20:	697b      	ldr	r3, [r7, #20]
 810fe22:	681a      	ldr	r2, [r3, #0]
 810fe24:	68bb      	ldr	r3, [r7, #8]
 810fe26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 810fe28:	429a      	cmp	r2, r3
 810fe2a:	d00d      	beq.n	810fe48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 810fe2c:	68bb      	ldr	r3, [r7, #8]
 810fe2e:	2b00      	cmp	r3, #0
 810fe30:	d00a      	beq.n	810fe48 <udp_bind+0xb4>
 810fe32:	68bb      	ldr	r3, [r7, #8]
 810fe34:	681b      	ldr	r3, [r3, #0]
 810fe36:	2b00      	cmp	r3, #0
 810fe38:	d006      	beq.n	810fe48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 810fe3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 810fe3c:	2b00      	cmp	r3, #0
 810fe3e:	d003      	beq.n	810fe48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 810fe40:	697b      	ldr	r3, [r7, #20]
 810fe42:	681b      	ldr	r3, [r3, #0]
 810fe44:	2b00      	cmp	r3, #0
 810fe46:	d102      	bne.n	810fe4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 810fe48:	f06f 0307 	mvn.w	r3, #7
 810fe4c:	e01c      	b.n	810fe88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 810fe4e:	697b      	ldr	r3, [r7, #20]
 810fe50:	68db      	ldr	r3, [r3, #12]
 810fe52:	617b      	str	r3, [r7, #20]
 810fe54:	697b      	ldr	r3, [r7, #20]
 810fe56:	2b00      	cmp	r3, #0
 810fe58:	d1d9      	bne.n	810fe0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 810fe5a:	68bb      	ldr	r3, [r7, #8]
 810fe5c:	2b00      	cmp	r3, #0
 810fe5e:	d002      	beq.n	810fe66 <udp_bind+0xd2>
 810fe60:	68bb      	ldr	r3, [r7, #8]
 810fe62:	681b      	ldr	r3, [r3, #0]
 810fe64:	e000      	b.n	810fe68 <udp_bind+0xd4>
 810fe66:	2300      	movs	r3, #0
 810fe68:	68fa      	ldr	r2, [r7, #12]
 810fe6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 810fe6c:	68fb      	ldr	r3, [r7, #12]
 810fe6e:	88fa      	ldrh	r2, [r7, #6]
 810fe70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 810fe72:	7cfb      	ldrb	r3, [r7, #19]
 810fe74:	2b00      	cmp	r3, #0
 810fe76:	d106      	bne.n	810fe86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 810fe78:	4b09      	ldr	r3, [pc, #36]	; (810fea0 <udp_bind+0x10c>)
 810fe7a:	681a      	ldr	r2, [r3, #0]
 810fe7c:	68fb      	ldr	r3, [r7, #12]
 810fe7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 810fe80:	4a07      	ldr	r2, [pc, #28]	; (810fea0 <udp_bind+0x10c>)
 810fe82:	68fb      	ldr	r3, [r7, #12]
 810fe84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 810fe86:	2300      	movs	r3, #0
}
 810fe88:	4618      	mov	r0, r3
 810fe8a:	3718      	adds	r7, #24
 810fe8c:	46bd      	mov	sp, r7
 810fe8e:	bd80      	pop	{r7, pc}
 810fe90:	08116a9c 	.word	0x08116a9c
 810fe94:	08116394 	.word	0x08116394
 810fe98:	08116684 	.word	0x08116684
 810fe9c:	08116410 	.word	0x08116410
 810fea0:	100087b4 	.word	0x100087b4

0810fea4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 810fea4:	b580      	push	{r7, lr}
 810fea6:	b086      	sub	sp, #24
 810fea8:	af00      	add	r7, sp, #0
 810feaa:	60f8      	str	r0, [r7, #12]
 810feac:	60b9      	str	r1, [r7, #8]
 810feae:	4613      	mov	r3, r2
 810feb0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 810feb2:	68fb      	ldr	r3, [r7, #12]
 810feb4:	2b00      	cmp	r3, #0
 810feb6:	d109      	bne.n	810fecc <udp_connect+0x28>
 810feb8:	4b2c      	ldr	r3, [pc, #176]	; (810ff6c <udp_connect+0xc8>)
 810feba:	f240 4235 	movw	r2, #1077	; 0x435
 810febe:	492c      	ldr	r1, [pc, #176]	; (810ff70 <udp_connect+0xcc>)
 810fec0:	482c      	ldr	r0, [pc, #176]	; (810ff74 <udp_connect+0xd0>)
 810fec2:	f002 fef5 	bl	8112cb0 <iprintf>
 810fec6:	f06f 030f 	mvn.w	r3, #15
 810feca:	e04b      	b.n	810ff64 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 810fecc:	68bb      	ldr	r3, [r7, #8]
 810fece:	2b00      	cmp	r3, #0
 810fed0:	d109      	bne.n	810fee6 <udp_connect+0x42>
 810fed2:	4b26      	ldr	r3, [pc, #152]	; (810ff6c <udp_connect+0xc8>)
 810fed4:	f240 4236 	movw	r2, #1078	; 0x436
 810fed8:	4927      	ldr	r1, [pc, #156]	; (810ff78 <udp_connect+0xd4>)
 810feda:	4826      	ldr	r0, [pc, #152]	; (810ff74 <udp_connect+0xd0>)
 810fedc:	f002 fee8 	bl	8112cb0 <iprintf>
 810fee0:	f06f 030f 	mvn.w	r3, #15
 810fee4:	e03e      	b.n	810ff64 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 810fee6:	68fb      	ldr	r3, [r7, #12]
 810fee8:	8a5b      	ldrh	r3, [r3, #18]
 810feea:	2b00      	cmp	r3, #0
 810feec:	d10f      	bne.n	810ff0e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 810feee:	68f9      	ldr	r1, [r7, #12]
 810fef0:	68fb      	ldr	r3, [r7, #12]
 810fef2:	8a5b      	ldrh	r3, [r3, #18]
 810fef4:	461a      	mov	r2, r3
 810fef6:	68f8      	ldr	r0, [r7, #12]
 810fef8:	f7ff ff4c 	bl	810fd94 <udp_bind>
 810fefc:	4603      	mov	r3, r0
 810fefe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 810ff00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 810ff04:	2b00      	cmp	r3, #0
 810ff06:	d002      	beq.n	810ff0e <udp_connect+0x6a>
      return err;
 810ff08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 810ff0c:	e02a      	b.n	810ff64 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 810ff0e:	68bb      	ldr	r3, [r7, #8]
 810ff10:	2b00      	cmp	r3, #0
 810ff12:	d002      	beq.n	810ff1a <udp_connect+0x76>
 810ff14:	68bb      	ldr	r3, [r7, #8]
 810ff16:	681b      	ldr	r3, [r3, #0]
 810ff18:	e000      	b.n	810ff1c <udp_connect+0x78>
 810ff1a:	2300      	movs	r3, #0
 810ff1c:	68fa      	ldr	r2, [r7, #12]
 810ff1e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 810ff20:	68fb      	ldr	r3, [r7, #12]
 810ff22:	88fa      	ldrh	r2, [r7, #6]
 810ff24:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 810ff26:	68fb      	ldr	r3, [r7, #12]
 810ff28:	7c1b      	ldrb	r3, [r3, #16]
 810ff2a:	f043 0304 	orr.w	r3, r3, #4
 810ff2e:	b2da      	uxtb	r2, r3
 810ff30:	68fb      	ldr	r3, [r7, #12]
 810ff32:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 810ff34:	4b11      	ldr	r3, [pc, #68]	; (810ff7c <udp_connect+0xd8>)
 810ff36:	681b      	ldr	r3, [r3, #0]
 810ff38:	617b      	str	r3, [r7, #20]
 810ff3a:	e008      	b.n	810ff4e <udp_connect+0xaa>
    if (pcb == ipcb) {
 810ff3c:	68fa      	ldr	r2, [r7, #12]
 810ff3e:	697b      	ldr	r3, [r7, #20]
 810ff40:	429a      	cmp	r2, r3
 810ff42:	d101      	bne.n	810ff48 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 810ff44:	2300      	movs	r3, #0
 810ff46:	e00d      	b.n	810ff64 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 810ff48:	697b      	ldr	r3, [r7, #20]
 810ff4a:	68db      	ldr	r3, [r3, #12]
 810ff4c:	617b      	str	r3, [r7, #20]
 810ff4e:	697b      	ldr	r3, [r7, #20]
 810ff50:	2b00      	cmp	r3, #0
 810ff52:	d1f3      	bne.n	810ff3c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 810ff54:	4b09      	ldr	r3, [pc, #36]	; (810ff7c <udp_connect+0xd8>)
 810ff56:	681a      	ldr	r2, [r3, #0]
 810ff58:	68fb      	ldr	r3, [r7, #12]
 810ff5a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 810ff5c:	4a07      	ldr	r2, [pc, #28]	; (810ff7c <udp_connect+0xd8>)
 810ff5e:	68fb      	ldr	r3, [r7, #12]
 810ff60:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 810ff62:	2300      	movs	r3, #0
}
 810ff64:	4618      	mov	r0, r3
 810ff66:	3718      	adds	r7, #24
 810ff68:	46bd      	mov	sp, r7
 810ff6a:	bd80      	pop	{r7, pc}
 810ff6c:	08116394 	.word	0x08116394
 810ff70:	0811669c 	.word	0x0811669c
 810ff74:	08116410 	.word	0x08116410
 810ff78:	081166b8 	.word	0x081166b8
 810ff7c:	100087b4 	.word	0x100087b4

0810ff80 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 810ff80:	b580      	push	{r7, lr}
 810ff82:	b084      	sub	sp, #16
 810ff84:	af00      	add	r7, sp, #0
 810ff86:	60f8      	str	r0, [r7, #12]
 810ff88:	60b9      	str	r1, [r7, #8]
 810ff8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 810ff8c:	68fb      	ldr	r3, [r7, #12]
 810ff8e:	2b00      	cmp	r3, #0
 810ff90:	d107      	bne.n	810ffa2 <udp_recv+0x22>
 810ff92:	4b08      	ldr	r3, [pc, #32]	; (810ffb4 <udp_recv+0x34>)
 810ff94:	f240 428a 	movw	r2, #1162	; 0x48a
 810ff98:	4907      	ldr	r1, [pc, #28]	; (810ffb8 <udp_recv+0x38>)
 810ff9a:	4808      	ldr	r0, [pc, #32]	; (810ffbc <udp_recv+0x3c>)
 810ff9c:	f002 fe88 	bl	8112cb0 <iprintf>
 810ffa0:	e005      	b.n	810ffae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 810ffa2:	68fb      	ldr	r3, [r7, #12]
 810ffa4:	68ba      	ldr	r2, [r7, #8]
 810ffa6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 810ffa8:	68fb      	ldr	r3, [r7, #12]
 810ffaa:	687a      	ldr	r2, [r7, #4]
 810ffac:	61da      	str	r2, [r3, #28]
}
 810ffae:	3710      	adds	r7, #16
 810ffb0:	46bd      	mov	sp, r7
 810ffb2:	bd80      	pop	{r7, pc}
 810ffb4:	08116394 	.word	0x08116394
 810ffb8:	081166f0 	.word	0x081166f0
 810ffbc:	08116410 	.word	0x08116410

0810ffc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 810ffc0:	b580      	push	{r7, lr}
 810ffc2:	b082      	sub	sp, #8
 810ffc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 810ffc6:	2000      	movs	r0, #0
 810ffc8:	f7fd fe72 	bl	810dcb0 <memp_malloc>
 810ffcc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 810ffce:	687b      	ldr	r3, [r7, #4]
 810ffd0:	2b00      	cmp	r3, #0
 810ffd2:	d007      	beq.n	810ffe4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 810ffd4:	2220      	movs	r2, #32
 810ffd6:	2100      	movs	r1, #0
 810ffd8:	6878      	ldr	r0, [r7, #4]
 810ffda:	f002 f99c 	bl	8112316 <memset>
    pcb->ttl = UDP_TTL;
 810ffde:	687b      	ldr	r3, [r7, #4]
 810ffe0:	22ff      	movs	r2, #255	; 0xff
 810ffe2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 810ffe4:	687b      	ldr	r3, [r7, #4]
}
 810ffe6:	4618      	mov	r0, r3
 810ffe8:	3708      	adds	r7, #8
 810ffea:	46bd      	mov	sp, r7
 810ffec:	bd80      	pop	{r7, pc}
	...

0810fff0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 810fff0:	b480      	push	{r7}
 810fff2:	b085      	sub	sp, #20
 810fff4:	af00      	add	r7, sp, #0
 810fff6:	6078      	str	r0, [r7, #4]
 810fff8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 810fffa:	687b      	ldr	r3, [r7, #4]
 810fffc:	2b00      	cmp	r3, #0
 810fffe:	d01e      	beq.n	811003e <udp_netif_ip_addr_changed+0x4e>
 8110000:	687b      	ldr	r3, [r7, #4]
 8110002:	681b      	ldr	r3, [r3, #0]
 8110004:	2b00      	cmp	r3, #0
 8110006:	d01a      	beq.n	811003e <udp_netif_ip_addr_changed+0x4e>
 8110008:	683b      	ldr	r3, [r7, #0]
 811000a:	2b00      	cmp	r3, #0
 811000c:	d017      	beq.n	811003e <udp_netif_ip_addr_changed+0x4e>
 811000e:	683b      	ldr	r3, [r7, #0]
 8110010:	681b      	ldr	r3, [r3, #0]
 8110012:	2b00      	cmp	r3, #0
 8110014:	d013      	beq.n	811003e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8110016:	4b0d      	ldr	r3, [pc, #52]	; (811004c <udp_netif_ip_addr_changed+0x5c>)
 8110018:	681b      	ldr	r3, [r3, #0]
 811001a:	60fb      	str	r3, [r7, #12]
 811001c:	e00c      	b.n	8110038 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 811001e:	68fb      	ldr	r3, [r7, #12]
 8110020:	681a      	ldr	r2, [r3, #0]
 8110022:	687b      	ldr	r3, [r7, #4]
 8110024:	681b      	ldr	r3, [r3, #0]
 8110026:	429a      	cmp	r2, r3
 8110028:	d103      	bne.n	8110032 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 811002a:	683b      	ldr	r3, [r7, #0]
 811002c:	681a      	ldr	r2, [r3, #0]
 811002e:	68fb      	ldr	r3, [r7, #12]
 8110030:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8110032:	68fb      	ldr	r3, [r7, #12]
 8110034:	68db      	ldr	r3, [r3, #12]
 8110036:	60fb      	str	r3, [r7, #12]
 8110038:	68fb      	ldr	r3, [r7, #12]
 811003a:	2b00      	cmp	r3, #0
 811003c:	d1ef      	bne.n	811001e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 811003e:	bf00      	nop
 8110040:	3714      	adds	r7, #20
 8110042:	46bd      	mov	sp, r7
 8110044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110048:	4770      	bx	lr
 811004a:	bf00      	nop
 811004c:	100087b4 	.word	0x100087b4

08110050 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 8110050:	b580      	push	{r7, lr}
 8110052:	b086      	sub	sp, #24
 8110054:	af02      	add	r7, sp, #8
 8110056:	6078      	str	r0, [r7, #4]
  if(!(netif_is_up(netif)))
 8110058:	687b      	ldr	r3, [r7, #4]
 811005a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811005e:	f003 0301 	and.w	r3, r3, #1
 8110062:	2b00      	cmp	r3, #0
 8110064:	d103      	bne.n	811006e <ethernet_link_status_updated+0x1e>
  {
	  printf("ETH Link Down\n");
 8110066:	480d      	ldr	r0, [pc, #52]	; (811009c <ethernet_link_status_updated+0x4c>)
 8110068:	f002 fea8 	bl	8112dbc <puts>
	  int local_IP = netif->ip_addr.addr;
  //if ethernet link is up, turn off red led
	  printf("ETH Link up. IP: %d.%d.%d.%d\n",(local_IP & 0xff), ((local_IP >> 8) & 0xff), ((local_IP >> 16) & 0xff), (local_IP >> 24));

  }
}
 811006c:	e011      	b.n	8110092 <ethernet_link_status_updated+0x42>
	  int local_IP = netif->ip_addr.addr;
 811006e:	687b      	ldr	r3, [r7, #4]
 8110070:	685b      	ldr	r3, [r3, #4]
 8110072:	60fb      	str	r3, [r7, #12]
	  printf("ETH Link up. IP: %d.%d.%d.%d\n",(local_IP & 0xff), ((local_IP >> 8) & 0xff), ((local_IP >> 16) & 0xff), (local_IP >> 24));
 8110074:	68fb      	ldr	r3, [r7, #12]
 8110076:	b2d9      	uxtb	r1, r3
 8110078:	68fb      	ldr	r3, [r7, #12]
 811007a:	121b      	asrs	r3, r3, #8
 811007c:	b2da      	uxtb	r2, r3
 811007e:	68fb      	ldr	r3, [r7, #12]
 8110080:	141b      	asrs	r3, r3, #16
 8110082:	b2d8      	uxtb	r0, r3
 8110084:	68fb      	ldr	r3, [r7, #12]
 8110086:	161b      	asrs	r3, r3, #24
 8110088:	9300      	str	r3, [sp, #0]
 811008a:	4603      	mov	r3, r0
 811008c:	4804      	ldr	r0, [pc, #16]	; (81100a0 <ethernet_link_status_updated+0x50>)
 811008e:	f002 fe0f 	bl	8112cb0 <iprintf>
}
 8110092:	bf00      	nop
 8110094:	3710      	adds	r7, #16
 8110096:	46bd      	mov	sp, r7
 8110098:	bd80      	pop	{r7, pc}
 811009a:	bf00      	nop
 811009c:	08116720 	.word	0x08116720
 81100a0:	08116730 	.word	0x08116730

081100a4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 81100a4:	b580      	push	{r7, lr}
 81100a6:	b08e      	sub	sp, #56	; 0x38
 81100a8:	af00      	add	r7, sp, #0
 81100aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81100ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81100b0:	2200      	movs	r2, #0
 81100b2:	601a      	str	r2, [r3, #0]
 81100b4:	605a      	str	r2, [r3, #4]
 81100b6:	609a      	str	r2, [r3, #8]
 81100b8:	60da      	str	r2, [r3, #12]
 81100ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 81100bc:	687b      	ldr	r3, [r7, #4]
 81100be:	681b      	ldr	r3, [r3, #0]
 81100c0:	4a5d      	ldr	r2, [pc, #372]	; (8110238 <HAL_ETH_MspInit+0x194>)
 81100c2:	4293      	cmp	r3, r2
 81100c4:	f040 80b3 	bne.w	811022e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81100c8:	4b5c      	ldr	r3, [pc, #368]	; (811023c <HAL_ETH_MspInit+0x198>)
 81100ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81100ce:	4a5b      	ldr	r2, [pc, #364]	; (811023c <HAL_ETH_MspInit+0x198>)
 81100d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81100d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81100d8:	4b58      	ldr	r3, [pc, #352]	; (811023c <HAL_ETH_MspInit+0x198>)
 81100da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81100de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81100e2:	623b      	str	r3, [r7, #32]
 81100e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81100e6:	4b55      	ldr	r3, [pc, #340]	; (811023c <HAL_ETH_MspInit+0x198>)
 81100e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81100ec:	4a53      	ldr	r2, [pc, #332]	; (811023c <HAL_ETH_MspInit+0x198>)
 81100ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81100f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81100f6:	4b51      	ldr	r3, [pc, #324]	; (811023c <HAL_ETH_MspInit+0x198>)
 81100f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81100fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8110100:	61fb      	str	r3, [r7, #28]
 8110102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8110104:	4b4d      	ldr	r3, [pc, #308]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 811010a:	4a4c      	ldr	r2, [pc, #304]	; (811023c <HAL_ETH_MspInit+0x198>)
 811010c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8110110:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8110114:	4b49      	ldr	r3, [pc, #292]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 811011a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 811011e:	61bb      	str	r3, [r7, #24]
 8110120:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8110122:	4b46      	ldr	r3, [pc, #280]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110128:	4a44      	ldr	r2, [pc, #272]	; (811023c <HAL_ETH_MspInit+0x198>)
 811012a:	f043 0304 	orr.w	r3, r3, #4
 811012e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8110132:	4b42      	ldr	r3, [pc, #264]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110138:	f003 0304 	and.w	r3, r3, #4
 811013c:	617b      	str	r3, [r7, #20]
 811013e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8110140:	4b3e      	ldr	r3, [pc, #248]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110146:	4a3d      	ldr	r2, [pc, #244]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110148:	f043 0301 	orr.w	r3, r3, #1
 811014c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8110150:	4b3a      	ldr	r3, [pc, #232]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110156:	f003 0301 	and.w	r3, r3, #1
 811015a:	613b      	str	r3, [r7, #16]
 811015c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 811015e:	4b37      	ldr	r3, [pc, #220]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110164:	4a35      	ldr	r2, [pc, #212]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110166:	f043 0302 	orr.w	r3, r3, #2
 811016a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 811016e:	4b33      	ldr	r3, [pc, #204]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110174:	f003 0302 	and.w	r3, r3, #2
 8110178:	60fb      	str	r3, [r7, #12]
 811017a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 811017c:	4b2f      	ldr	r3, [pc, #188]	; (811023c <HAL_ETH_MspInit+0x198>)
 811017e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110182:	4a2e      	ldr	r2, [pc, #184]	; (811023c <HAL_ETH_MspInit+0x198>)
 8110184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8110188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 811018c:	4b2b      	ldr	r3, [pc, #172]	; (811023c <HAL_ETH_MspInit+0x198>)
 811018e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8110196:	60bb      	str	r3, [r7, #8]
 8110198:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 811019a:	2332      	movs	r3, #50	; 0x32
 811019c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 811019e:	2302      	movs	r3, #2
 81101a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81101a2:	2300      	movs	r3, #0
 81101a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81101a6:	2303      	movs	r3, #3
 81101a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81101aa:	230b      	movs	r3, #11
 81101ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81101ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81101b2:	4619      	mov	r1, r3
 81101b4:	4822      	ldr	r0, [pc, #136]	; (8110240 <HAL_ETH_MspInit+0x19c>)
 81101b6:	f7f3 f933 	bl	8103420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 81101ba:	2386      	movs	r3, #134	; 0x86
 81101bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81101be:	2302      	movs	r3, #2
 81101c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81101c2:	2300      	movs	r3, #0
 81101c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81101c6:	2303      	movs	r3, #3
 81101c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81101ca:	230b      	movs	r3, #11
 81101cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81101ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81101d2:	4619      	mov	r1, r3
 81101d4:	481b      	ldr	r0, [pc, #108]	; (8110244 <HAL_ETH_MspInit+0x1a0>)
 81101d6:	f7f3 f923 	bl	8103420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 81101da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81101de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81101e0:	2302      	movs	r3, #2
 81101e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81101e4:	2300      	movs	r3, #0
 81101e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81101e8:	2303      	movs	r3, #3
 81101ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81101ec:	230b      	movs	r3, #11
 81101ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81101f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81101f4:	4619      	mov	r1, r3
 81101f6:	4814      	ldr	r0, [pc, #80]	; (8110248 <HAL_ETH_MspInit+0x1a4>)
 81101f8:	f7f3 f912 	bl	8103420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 81101fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8110200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8110202:	2302      	movs	r3, #2
 8110204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8110206:	2300      	movs	r3, #0
 8110208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 811020a:	2303      	movs	r3, #3
 811020c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 811020e:	230b      	movs	r3, #11
 8110210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8110212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8110216:	4619      	mov	r1, r3
 8110218:	480c      	ldr	r0, [pc, #48]	; (811024c <HAL_ETH_MspInit+0x1a8>)
 811021a:	f7f3 f901 	bl	8103420 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 811021e:	2200      	movs	r2, #0
 8110220:	2105      	movs	r1, #5
 8110222:	203d      	movs	r0, #61	; 0x3d
 8110224:	f7f1 fa00 	bl	8101628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8110228:	203d      	movs	r0, #61	; 0x3d
 811022a:	f7f1 fa17 	bl	810165c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 811022e:	bf00      	nop
 8110230:	3738      	adds	r7, #56	; 0x38
 8110232:	46bd      	mov	sp, r7
 8110234:	bd80      	pop	{r7, pc}
 8110236:	bf00      	nop
 8110238:	40028000 	.word	0x40028000
 811023c:	58024400 	.word	0x58024400
 8110240:	58020800 	.word	0x58020800
 8110244:	58020000 	.word	0x58020000
 8110248:	58020400 	.word	0x58020400
 811024c:	58021800 	.word	0x58021800

08110250 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8110250:	b580      	push	{r7, lr}
 8110252:	b082      	sub	sp, #8
 8110254:	af00      	add	r7, sp, #0
 8110256:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8110258:	4b04      	ldr	r3, [pc, #16]	; (811026c <HAL_ETH_RxCpltCallback+0x1c>)
 811025a:	681b      	ldr	r3, [r3, #0]
 811025c:	4618      	mov	r0, r3
 811025e:	f7f8 f82f 	bl	81082c0 <osSemaphoreRelease>
}
 8110262:	bf00      	nop
 8110264:	3708      	adds	r7, #8
 8110266:	46bd      	mov	sp, r7
 8110268:	bd80      	pop	{r7, pc}
 811026a:	bf00      	nop
 811026c:	10005948 	.word	0x10005948

08110270 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8110270:	b5b0      	push	{r4, r5, r7, lr}
 8110272:	b0ac      	sub	sp, #176	; 0xb0
 8110274:	af00      	add	r7, sp, #0
 8110276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8110278:	2300      	movs	r3, #0
 811027a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 811027e:	2300      	movs	r3, #0
 8110280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8110284:	2300      	movs	r3, #0
 8110286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 811028a:	4b91      	ldr	r3, [pc, #580]	; (81104d0 <low_level_init+0x260>)
 811028c:	4a91      	ldr	r2, [pc, #580]	; (81104d4 <low_level_init+0x264>)
 811028e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8110290:	2300      	movs	r3, #0
 8110292:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8110296:	2380      	movs	r3, #128	; 0x80
 8110298:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 811029c:	23e1      	movs	r3, #225	; 0xe1
 811029e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 81102a2:	2300      	movs	r3, #0
 81102a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 81102a8:	2300      	movs	r3, #0
 81102aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 81102ae:	2300      	movs	r3, #0
 81102b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 81102b4:	4a86      	ldr	r2, [pc, #536]	; (81104d0 <low_level_init+0x260>)
 81102b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81102ba:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81102bc:	4b84      	ldr	r3, [pc, #528]	; (81104d0 <low_level_init+0x260>)
 81102be:	2201      	movs	r2, #1
 81102c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81102c2:	4b83      	ldr	r3, [pc, #524]	; (81104d0 <low_level_init+0x260>)
 81102c4:	4a84      	ldr	r2, [pc, #528]	; (81104d8 <low_level_init+0x268>)
 81102c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81102c8:	4b81      	ldr	r3, [pc, #516]	; (81104d0 <low_level_init+0x260>)
 81102ca:	4a84      	ldr	r2, [pc, #528]	; (81104dc <low_level_init+0x26c>)
 81102cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 81102ce:	4b80      	ldr	r3, [pc, #512]	; (81104d0 <low_level_init+0x260>)
 81102d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 81102d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 81102d6:	487e      	ldr	r0, [pc, #504]	; (81104d0 <low_level_init+0x260>)
 81102d8:	f7f1 f9e2 	bl	81016a0 <HAL_ETH_Init>
 81102dc:	4603      	mov	r3, r0
 81102de:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81102e2:	2234      	movs	r2, #52	; 0x34
 81102e4:	2100      	movs	r1, #0
 81102e6:	487e      	ldr	r0, [pc, #504]	; (81104e0 <low_level_init+0x270>)
 81102e8:	f002 f815 	bl	8112316 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 81102ec:	4b7c      	ldr	r3, [pc, #496]	; (81104e0 <low_level_init+0x270>)
 81102ee:	2221      	movs	r2, #33	; 0x21
 81102f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 81102f2:	4b7b      	ldr	r3, [pc, #492]	; (81104e0 <low_level_init+0x270>)
 81102f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81102f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 81102fa:	4b79      	ldr	r3, [pc, #484]	; (81104e0 <low_level_init+0x270>)
 81102fc:	2200      	movs	r2, #0
 81102fe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8110300:	4878      	ldr	r0, [pc, #480]	; (81104e4 <low_level_init+0x274>)
 8110302:	f7fd fc37 	bl	810db74 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8110306:	687b      	ldr	r3, [r7, #4]
 8110308:	2206      	movs	r2, #6
 811030a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 811030e:	4b70      	ldr	r3, [pc, #448]	; (81104d0 <low_level_init+0x260>)
 8110310:	685b      	ldr	r3, [r3, #4]
 8110312:	781a      	ldrb	r2, [r3, #0]
 8110314:	687b      	ldr	r3, [r7, #4]
 8110316:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 811031a:	4b6d      	ldr	r3, [pc, #436]	; (81104d0 <low_level_init+0x260>)
 811031c:	685b      	ldr	r3, [r3, #4]
 811031e:	785a      	ldrb	r2, [r3, #1]
 8110320:	687b      	ldr	r3, [r7, #4]
 8110322:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8110326:	4b6a      	ldr	r3, [pc, #424]	; (81104d0 <low_level_init+0x260>)
 8110328:	685b      	ldr	r3, [r3, #4]
 811032a:	789a      	ldrb	r2, [r3, #2]
 811032c:	687b      	ldr	r3, [r7, #4]
 811032e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8110332:	4b67      	ldr	r3, [pc, #412]	; (81104d0 <low_level_init+0x260>)
 8110334:	685b      	ldr	r3, [r3, #4]
 8110336:	78da      	ldrb	r2, [r3, #3]
 8110338:	687b      	ldr	r3, [r7, #4]
 811033a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 811033e:	4b64      	ldr	r3, [pc, #400]	; (81104d0 <low_level_init+0x260>)
 8110340:	685b      	ldr	r3, [r3, #4]
 8110342:	791a      	ldrb	r2, [r3, #4]
 8110344:	687b      	ldr	r3, [r7, #4]
 8110346:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 811034a:	4b61      	ldr	r3, [pc, #388]	; (81104d0 <low_level_init+0x260>)
 811034c:	685b      	ldr	r3, [r3, #4]
 811034e:	795a      	ldrb	r2, [r3, #5]
 8110350:	687b      	ldr	r3, [r7, #4]
 8110352:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8110356:	687b      	ldr	r3, [r7, #4]
 8110358:	f240 52dc 	movw	r2, #1500	; 0x5dc
 811035c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 811035e:	687b      	ldr	r3, [r7, #4]
 8110360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8110364:	f043 030a 	orr.w	r3, r3, #10
 8110368:	b2da      	uxtb	r2, r3
 811036a:	687b      	ldr	r3, [r7, #4]
 811036c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8110370:	2300      	movs	r3, #0
 8110372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8110376:	e012      	b.n	811039e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8110378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 811037c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8110380:	fb02 f303 	mul.w	r3, r2, r3
 8110384:	4a58      	ldr	r2, [pc, #352]	; (81104e8 <low_level_init+0x278>)
 8110386:	441a      	add	r2, r3
 8110388:	2300      	movs	r3, #0
 811038a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 811038e:	4850      	ldr	r0, [pc, #320]	; (81104d0 <low_level_init+0x260>)
 8110390:	f7f1 fa60 	bl	8101854 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8110394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8110398:	3301      	adds	r3, #1
 811039a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 811039e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 81103a2:	2b03      	cmp	r3, #3
 81103a4:	d9e8      	bls.n	8110378 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 81103a6:	2300      	movs	r3, #0
 81103a8:	62bb      	str	r3, [r7, #40]	; 0x28
 81103aa:	2300      	movs	r3, #0
 81103ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 81103ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81103b2:	2101      	movs	r1, #1
 81103b4:	4618      	mov	r0, r3
 81103b6:	f7f7 ff03 	bl	81081c0 <osSemaphoreCreate>
 81103ba:	4603      	mov	r3, r0
 81103bc:	4a4b      	ldr	r2, [pc, #300]	; (81104ec <low_level_init+0x27c>)
 81103be:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 81103c0:	4b4b      	ldr	r3, [pc, #300]	; (81104f0 <low_level_init+0x280>)
 81103c2:	f107 040c 	add.w	r4, r7, #12
 81103c6:	461d      	mov	r5, r3
 81103c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81103ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81103cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81103d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 81103d4:	f107 030c 	add.w	r3, r7, #12
 81103d8:	6879      	ldr	r1, [r7, #4]
 81103da:	4618      	mov	r0, r3
 81103dc:	f7f7 fdf3 	bl	8107fc6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 81103e0:	4944      	ldr	r1, [pc, #272]	; (81104f4 <low_level_init+0x284>)
 81103e2:	4845      	ldr	r0, [pc, #276]	; (81104f8 <low_level_init+0x288>)
 81103e4:	f7f0 fe50 	bl	8101088 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 81103e8:	4843      	ldr	r0, [pc, #268]	; (81104f8 <low_level_init+0x288>)
 81103ea:	f7f0 fe7f 	bl	81010ec <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 81103ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 81103f2:	2b00      	cmp	r3, #0
 81103f4:	d165      	bne.n	81104c2 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81103f6:	4840      	ldr	r0, [pc, #256]	; (81104f8 <low_level_init+0x288>)
 81103f8:	f7f0 ff20 	bl	810123c <LAN8742_GetLinkState>
 81103fc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8110400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8110404:	2b01      	cmp	r3, #1
 8110406:	dc06      	bgt.n	8110416 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8110408:	6878      	ldr	r0, [r7, #4]
 811040a:	f7fd ff89 	bl	810e320 <netif_set_link_down>
      netif_set_down(netif);
 811040e:	6878      	ldr	r0, [r7, #4]
 8110410:	f7fd ff20 	bl	810e254 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8110414:	e057      	b.n	81104c6 <low_level_init+0x256>
 8110416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 811041a:	3b02      	subs	r3, #2
 811041c:	2b03      	cmp	r3, #3
 811041e:	d82b      	bhi.n	8110478 <low_level_init+0x208>
 8110420:	a201      	add	r2, pc, #4	; (adr r2, 8110428 <low_level_init+0x1b8>)
 8110422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110426:	bf00      	nop
 8110428:	08110439 	.word	0x08110439
 811042c:	0811044b 	.word	0x0811044b
 8110430:	0811045b 	.word	0x0811045b
 8110434:	0811046b 	.word	0x0811046b
        duplex = ETH_FULLDUPLEX_MODE;
 8110438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 811043c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8110440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8110444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8110448:	e01f      	b.n	811048a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 811044a:	2300      	movs	r3, #0
 811044c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8110450:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8110454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8110458:	e017      	b.n	811048a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 811045a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 811045e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8110462:	2300      	movs	r3, #0
 8110464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8110468:	e00f      	b.n	811048a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 811046a:	2300      	movs	r3, #0
 811046c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8110470:	2300      	movs	r3, #0
 8110472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8110476:	e008      	b.n	811048a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8110478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 811047c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8110480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8110484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8110488:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 811048a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 811048e:	4619      	mov	r1, r3
 8110490:	480f      	ldr	r0, [pc, #60]	; (81104d0 <low_level_init+0x260>)
 8110492:	f7f1 ffc5 	bl	8102420 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8110496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 811049a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 811049c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 81104a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 81104a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 81104a6:	4619      	mov	r1, r3
 81104a8:	4809      	ldr	r0, [pc, #36]	; (81104d0 <low_level_init+0x260>)
 81104aa:	f7f2 f98d 	bl	81027c8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 81104ae:	4808      	ldr	r0, [pc, #32]	; (81104d0 <low_level_init+0x260>)
 81104b0:	f7f1 fa11 	bl	81018d6 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 81104b4:	6878      	ldr	r0, [r7, #4]
 81104b6:	f7fd fe61 	bl	810e17c <netif_set_up>
    netif_set_link_up(netif);
 81104ba:	6878      	ldr	r0, [r7, #4]
 81104bc:	f7fd fefc 	bl	810e2b8 <netif_set_link_up>
}
 81104c0:	e001      	b.n	81104c6 <low_level_init+0x256>
    Error_Handler();
 81104c2:	f001 f96f 	bl	81117a4 <Error_Handler>
}
 81104c6:	bf00      	nop
 81104c8:	37b0      	adds	r7, #176	; 0xb0
 81104ca:	46bd      	mov	sp, r7
 81104cc:	bdb0      	pop	{r4, r5, r7, pc}
 81104ce:	bf00      	nop
 81104d0:	100088a4 	.word	0x100088a4
 81104d4:	40028000 	.word	0x40028000
 81104d8:	1000025c 	.word	0x1000025c
 81104dc:	100001fc 	.word	0x100001fc
 81104e0:	1000892c 	.word	0x1000892c
 81104e4:	08116b58 	.word	0x08116b58
 81104e8:	100002bc 	.word	0x100002bc
 81104ec:	10005948 	.word	0x10005948
 81104f0:	08116758 	.word	0x08116758
 81104f4:	10000018 	.word	0x10000018
 81104f8:	10008884 	.word	0x10008884

081104fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 81104fc:	b580      	push	{r7, lr}
 81104fe:	b092      	sub	sp, #72	; 0x48
 8110500:	af00      	add	r7, sp, #0
 8110502:	6078      	str	r0, [r7, #4]
 8110504:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8110506:	2300      	movs	r3, #0
 8110508:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 811050a:	2300      	movs	r3, #0
 811050c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8110510:	f107 030c 	add.w	r3, r7, #12
 8110514:	2230      	movs	r2, #48	; 0x30
 8110516:	2100      	movs	r1, #0
 8110518:	4618      	mov	r0, r3
 811051a:	f001 fefc 	bl	8112316 <memset>

  for(q = p; q != NULL; q = q->next)
 811051e:	683b      	ldr	r3, [r7, #0]
 8110520:	643b      	str	r3, [r7, #64]	; 0x40
 8110522:	e049      	b.n	81105b8 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8110524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8110526:	2b03      	cmp	r3, #3
 8110528:	d902      	bls.n	8110530 <low_level_output+0x34>
      return ERR_IF;
 811052a:	f06f 030b 	mvn.w	r3, #11
 811052e:	e056      	b.n	81105de <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8110530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8110532:	6859      	ldr	r1, [r3, #4]
 8110534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8110536:	4613      	mov	r3, r2
 8110538:	005b      	lsls	r3, r3, #1
 811053a:	4413      	add	r3, r2
 811053c:	009b      	lsls	r3, r3, #2
 811053e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8110542:	4413      	add	r3, r2
 8110544:	3b3c      	subs	r3, #60	; 0x3c
 8110546:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8110548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 811054a:	895b      	ldrh	r3, [r3, #10]
 811054c:	4619      	mov	r1, r3
 811054e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8110550:	4613      	mov	r3, r2
 8110552:	005b      	lsls	r3, r3, #1
 8110554:	4413      	add	r3, r2
 8110556:	009b      	lsls	r3, r3, #2
 8110558:	f107 0248 	add.w	r2, r7, #72	; 0x48
 811055c:	4413      	add	r3, r2
 811055e:	3b38      	subs	r3, #56	; 0x38
 8110560:	6019      	str	r1, [r3, #0]

    if(i>0)
 8110562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8110564:	2b00      	cmp	r3, #0
 8110566:	d012      	beq.n	811058e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8110568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 811056a:	1e5a      	subs	r2, r3, #1
 811056c:	f107 000c 	add.w	r0, r7, #12
 8110570:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8110572:	460b      	mov	r3, r1
 8110574:	005b      	lsls	r3, r3, #1
 8110576:	440b      	add	r3, r1
 8110578:	009b      	lsls	r3, r3, #2
 811057a:	18c1      	adds	r1, r0, r3
 811057c:	4613      	mov	r3, r2
 811057e:	005b      	lsls	r3, r3, #1
 8110580:	4413      	add	r3, r2
 8110582:	009b      	lsls	r3, r3, #2
 8110584:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8110588:	4413      	add	r3, r2
 811058a:	3b34      	subs	r3, #52	; 0x34
 811058c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 811058e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8110590:	681b      	ldr	r3, [r3, #0]
 8110592:	2b00      	cmp	r3, #0
 8110594:	d10a      	bne.n	81105ac <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8110596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8110598:	4613      	mov	r3, r2
 811059a:	005b      	lsls	r3, r3, #1
 811059c:	4413      	add	r3, r2
 811059e:	009b      	lsls	r3, r3, #2
 81105a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 81105a4:	4413      	add	r3, r2
 81105a6:	3b34      	subs	r3, #52	; 0x34
 81105a8:	2200      	movs	r2, #0
 81105aa:	601a      	str	r2, [r3, #0]
    }

    i++;
 81105ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81105ae:	3301      	adds	r3, #1
 81105b0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 81105b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81105b4:	681b      	ldr	r3, [r3, #0]
 81105b6:	643b      	str	r3, [r7, #64]	; 0x40
 81105b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81105ba:	2b00      	cmp	r3, #0
 81105bc:	d1b2      	bne.n	8110524 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 81105be:	683b      	ldr	r3, [r7, #0]
 81105c0:	891b      	ldrh	r3, [r3, #8]
 81105c2:	461a      	mov	r2, r3
 81105c4:	4b08      	ldr	r3, [pc, #32]	; (81105e8 <low_level_output+0xec>)
 81105c6:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 81105c8:	4a07      	ldr	r2, [pc, #28]	; (81105e8 <low_level_output+0xec>)
 81105ca:	f107 030c 	add.w	r3, r7, #12
 81105ce:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 81105d0:	2214      	movs	r2, #20
 81105d2:	4905      	ldr	r1, [pc, #20]	; (81105e8 <low_level_output+0xec>)
 81105d4:	4805      	ldr	r0, [pc, #20]	; (81105ec <low_level_output+0xf0>)
 81105d6:	f7f1 fa7c 	bl	8101ad2 <HAL_ETH_Transmit>

  return errval;
 81105da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 81105de:	4618      	mov	r0, r3
 81105e0:	3748      	adds	r7, #72	; 0x48
 81105e2:	46bd      	mov	sp, r7
 81105e4:	bd80      	pop	{r7, pc}
 81105e6:	bf00      	nop
 81105e8:	1000892c 	.word	0x1000892c
 81105ec:	100088a4 	.word	0x100088a4

081105f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 81105f0:	b580      	push	{r7, lr}
 81105f2:	b094      	sub	sp, #80	; 0x50
 81105f4:	af02      	add	r7, sp, #8
 81105f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 81105f8:	2300      	movs	r3, #0
 81105fa:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 81105fc:	2300      	movs	r3, #0
 81105fe:	60bb      	str	r3, [r7, #8]
 8110600:	2300      	movs	r3, #0
 8110602:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8110604:	f107 030c 	add.w	r3, r7, #12
 8110608:	2230      	movs	r2, #48	; 0x30
 811060a:	2100      	movs	r1, #0
 811060c:	4618      	mov	r0, r3
 811060e:	f001 fe82 	bl	8112316 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8110612:	2300      	movs	r3, #0
 8110614:	643b      	str	r3, [r7, #64]	; 0x40
 8110616:	e015      	b.n	8110644 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8110618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 811061a:	1c5a      	adds	r2, r3, #1
 811061c:	f107 010c 	add.w	r1, r7, #12
 8110620:	4613      	mov	r3, r2
 8110622:	005b      	lsls	r3, r3, #1
 8110624:	4413      	add	r3, r2
 8110626:	009b      	lsls	r3, r3, #2
 8110628:	4419      	add	r1, r3
 811062a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 811062c:	4613      	mov	r3, r2
 811062e:	005b      	lsls	r3, r3, #1
 8110630:	4413      	add	r3, r2
 8110632:	009b      	lsls	r3, r3, #2
 8110634:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8110638:	4413      	add	r3, r2
 811063a:	3b34      	subs	r3, #52	; 0x34
 811063c:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 811063e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8110640:	3301      	adds	r3, #1
 8110642:	643b      	str	r3, [r7, #64]	; 0x40
 8110644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8110646:	2b02      	cmp	r3, #2
 8110648:	d9e6      	bls.n	8110618 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 811064a:	f107 030c 	add.w	r3, r7, #12
 811064e:	4619      	mov	r1, r3
 8110650:	4815      	ldr	r0, [pc, #84]	; (81106a8 <low_level_input+0xb8>)
 8110652:	f7f1 fbb7 	bl	8101dc4 <HAL_ETH_GetRxDataBuffer>
 8110656:	4603      	mov	r3, r0
 8110658:	2b00      	cmp	r3, #0
 811065a:	d11f      	bne.n	811069c <low_level_input+0xac>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 811065c:	f107 0308 	add.w	r3, r7, #8
 8110660:	4619      	mov	r1, r3
 8110662:	4811      	ldr	r0, [pc, #68]	; (81106a8 <low_level_input+0xb8>)
 8110664:	f7f1 fc4c 	bl	8101f00 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8110668:	480f      	ldr	r0, [pc, #60]	; (81106a8 <low_level_input+0xb8>)
 811066a:	f7f1 fc7c 	bl	8101f66 <HAL_ETH_BuildRxDescriptors>
#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 811066e:	480f      	ldr	r0, [pc, #60]	; (81106ac <low_level_input+0xbc>)
 8110670:	f7fd fafc 	bl	810dc6c <memp_malloc_pool>
 8110674:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 8110676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8110678:	2b00      	cmp	r3, #0
 811067a:	d00f      	beq.n	811069c <low_level_input+0xac>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 811067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 811067e:	4a0c      	ldr	r2, [pc, #48]	; (81106b0 <low_level_input+0xc0>)
 8110680:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8110682:	68bb      	ldr	r3, [r7, #8]
 8110684:	b299      	uxth	r1, r3
 8110686:	68fb      	ldr	r3, [r7, #12]
 8110688:	68ba      	ldr	r2, [r7, #8]
 811068a:	b292      	uxth	r2, r2
 811068c:	9201      	str	r2, [sp, #4]
 811068e:	9300      	str	r3, [sp, #0]
 8110690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8110692:	2241      	movs	r2, #65	; 0x41
 8110694:	2000      	movs	r0, #0
 8110696:	f7fe f80b 	bl	810e6b0 <pbuf_alloced_custom>
 811069a:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 811069c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 811069e:	4618      	mov	r0, r3
 81106a0:	3748      	adds	r7, #72	; 0x48
 81106a2:	46bd      	mov	sp, r7
 81106a4:	bd80      	pop	{r7, pc}
 81106a6:	bf00      	nop
 81106a8:	100088a4 	.word	0x100088a4
 81106ac:	08116b58 	.word	0x08116b58
 81106b0:	08110761 	.word	0x08110761

081106b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 81106b4:	b580      	push	{r7, lr}
 81106b6:	b084      	sub	sp, #16
 81106b8:	af00      	add	r7, sp, #0
 81106ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 81106bc:	687b      	ldr	r3, [r7, #4]
 81106be:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 81106c0:	4b0f      	ldr	r3, [pc, #60]	; (8110700 <ethernetif_input+0x4c>)
 81106c2:	681b      	ldr	r3, [r3, #0]
 81106c4:	f04f 31ff 	mov.w	r1, #4294967295
 81106c8:	4618      	mov	r0, r3
 81106ca:	f7f7 fdab 	bl	8108224 <osSemaphoreWait>
 81106ce:	4603      	mov	r3, r0
 81106d0:	2b00      	cmp	r3, #0
 81106d2:	d1f5      	bne.n	81106c0 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 81106d4:	68f8      	ldr	r0, [r7, #12]
 81106d6:	f7ff ff8b 	bl	81105f0 <low_level_input>
 81106da:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 81106dc:	68bb      	ldr	r3, [r7, #8]
 81106de:	2b00      	cmp	r3, #0
 81106e0:	d00a      	beq.n	81106f8 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 81106e2:	68fb      	ldr	r3, [r7, #12]
 81106e4:	691b      	ldr	r3, [r3, #16]
 81106e6:	68f9      	ldr	r1, [r7, #12]
 81106e8:	68b8      	ldr	r0, [r7, #8]
 81106ea:	4798      	blx	r3
 81106ec:	4603      	mov	r3, r0
 81106ee:	2b00      	cmp	r3, #0
 81106f0:	d002      	beq.n	81106f8 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 81106f2:	68b8      	ldr	r0, [r7, #8]
 81106f4:	f7fe f996 	bl	810ea24 <pbuf_free>
          }
        }
      } while(p!=NULL);
 81106f8:	68bb      	ldr	r3, [r7, #8]
 81106fa:	2b00      	cmp	r3, #0
 81106fc:	d1ea      	bne.n	81106d4 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 81106fe:	e7df      	b.n	81106c0 <ethernetif_input+0xc>
 8110700:	10005948 	.word	0x10005948

08110704 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8110704:	b580      	push	{r7, lr}
 8110706:	b082      	sub	sp, #8
 8110708:	af00      	add	r7, sp, #0
 811070a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 811070c:	687b      	ldr	r3, [r7, #4]
 811070e:	2b00      	cmp	r3, #0
 8110710:	d106      	bne.n	8110720 <ethernetif_init+0x1c>
 8110712:	4b0e      	ldr	r3, [pc, #56]	; (811074c <ethernetif_init+0x48>)
 8110714:	f44f 7212 	mov.w	r2, #584	; 0x248
 8110718:	490d      	ldr	r1, [pc, #52]	; (8110750 <ethernetif_init+0x4c>)
 811071a:	480e      	ldr	r0, [pc, #56]	; (8110754 <ethernetif_init+0x50>)
 811071c:	f002 fac8 	bl	8112cb0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8110720:	687b      	ldr	r3, [r7, #4]
 8110722:	2273      	movs	r2, #115	; 0x73
 8110724:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8110728:	687b      	ldr	r3, [r7, #4]
 811072a:	2274      	movs	r2, #116	; 0x74
 811072c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8110730:	687b      	ldr	r3, [r7, #4]
 8110732:	4a09      	ldr	r2, [pc, #36]	; (8110758 <ethernetif_init+0x54>)
 8110734:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8110736:	687b      	ldr	r3, [r7, #4]
 8110738:	4a08      	ldr	r2, [pc, #32]	; (811075c <ethernetif_init+0x58>)
 811073a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 811073c:	6878      	ldr	r0, [r7, #4]
 811073e:	f7ff fd97 	bl	8110270 <low_level_init>

  return ERR_OK;
 8110742:	2300      	movs	r3, #0
}
 8110744:	4618      	mov	r0, r3
 8110746:	3708      	adds	r7, #8
 8110748:	46bd      	mov	sp, r7
 811074a:	bd80      	pop	{r7, pc}
 811074c:	08116774 	.word	0x08116774
 8110750:	08116788 	.word	0x08116788
 8110754:	08116798 	.word	0x08116798
 8110758:	0810b4b1 	.word	0x0810b4b1
 811075c:	081104fd 	.word	0x081104fd

08110760 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8110760:	b580      	push	{r7, lr}
 8110762:	b084      	sub	sp, #16
 8110764:	af00      	add	r7, sp, #0
 8110766:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8110768:	687b      	ldr	r3, [r7, #4]
 811076a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 811076c:	68f9      	ldr	r1, [r7, #12]
 811076e:	4803      	ldr	r0, [pc, #12]	; (811077c <pbuf_free_custom+0x1c>)
 8110770:	f7fd faf0 	bl	810dd54 <memp_free_pool>
}
 8110774:	bf00      	nop
 8110776:	3710      	adds	r7, #16
 8110778:	46bd      	mov	sp, r7
 811077a:	bd80      	pop	{r7, pc}
 811077c:	08116b58 	.word	0x08116b58

08110780 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8110780:	b580      	push	{r7, lr}
 8110782:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8110784:	f7f0 fe54 	bl	8101430 <HAL_GetTick>
 8110788:	4603      	mov	r3, r0
}
 811078a:	4618      	mov	r0, r3
 811078c:	bd80      	pop	{r7, pc}
	...

08110790 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8110790:	b580      	push	{r7, lr}
 8110792:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8110794:	4802      	ldr	r0, [pc, #8]	; (81107a0 <ETH_PHY_IO_Init+0x10>)
 8110796:	f7f2 f831 	bl	81027fc <HAL_ETH_SetMDIOClockRange>

  return 0;
 811079a:	2300      	movs	r3, #0
}
 811079c:	4618      	mov	r0, r3
 811079e:	bd80      	pop	{r7, pc}
 81107a0:	100088a4 	.word	0x100088a4

081107a4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 81107a4:	b480      	push	{r7}
 81107a6:	af00      	add	r7, sp, #0
  return 0;
 81107a8:	2300      	movs	r3, #0
}
 81107aa:	4618      	mov	r0, r3
 81107ac:	46bd      	mov	sp, r7
 81107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107b2:	4770      	bx	lr

081107b4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 81107b4:	b580      	push	{r7, lr}
 81107b6:	b084      	sub	sp, #16
 81107b8:	af00      	add	r7, sp, #0
 81107ba:	60f8      	str	r0, [r7, #12]
 81107bc:	60b9      	str	r1, [r7, #8]
 81107be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 81107c0:	687b      	ldr	r3, [r7, #4]
 81107c2:	68ba      	ldr	r2, [r7, #8]
 81107c4:	68f9      	ldr	r1, [r7, #12]
 81107c6:	4807      	ldr	r0, [pc, #28]	; (81107e4 <ETH_PHY_IO_ReadReg+0x30>)
 81107c8:	f7f1 fd82 	bl	81022d0 <HAL_ETH_ReadPHYRegister>
 81107cc:	4603      	mov	r3, r0
 81107ce:	2b00      	cmp	r3, #0
 81107d0:	d002      	beq.n	81107d8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 81107d2:	f04f 33ff 	mov.w	r3, #4294967295
 81107d6:	e000      	b.n	81107da <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 81107d8:	2300      	movs	r3, #0
}
 81107da:	4618      	mov	r0, r3
 81107dc:	3710      	adds	r7, #16
 81107de:	46bd      	mov	sp, r7
 81107e0:	bd80      	pop	{r7, pc}
 81107e2:	bf00      	nop
 81107e4:	100088a4 	.word	0x100088a4

081107e8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 81107e8:	b580      	push	{r7, lr}
 81107ea:	b084      	sub	sp, #16
 81107ec:	af00      	add	r7, sp, #0
 81107ee:	60f8      	str	r0, [r7, #12]
 81107f0:	60b9      	str	r1, [r7, #8]
 81107f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 81107f4:	687b      	ldr	r3, [r7, #4]
 81107f6:	68ba      	ldr	r2, [r7, #8]
 81107f8:	68f9      	ldr	r1, [r7, #12]
 81107fa:	4807      	ldr	r0, [pc, #28]	; (8110818 <ETH_PHY_IO_WriteReg+0x30>)
 81107fc:	f7f1 fdbc 	bl	8102378 <HAL_ETH_WritePHYRegister>
 8110800:	4603      	mov	r3, r0
 8110802:	2b00      	cmp	r3, #0
 8110804:	d002      	beq.n	811080c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8110806:	f04f 33ff 	mov.w	r3, #4294967295
 811080a:	e000      	b.n	811080e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 811080c:	2300      	movs	r3, #0
}
 811080e:	4618      	mov	r0, r3
 8110810:	3710      	adds	r7, #16
 8110812:	46bd      	mov	sp, r7
 8110814:	bd80      	pop	{r7, pc}
 8110816:	bf00      	nop
 8110818:	100088a4 	.word	0x100088a4

0811081c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 811081c:	b580      	push	{r7, lr}
 811081e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8110820:	f7f0 fe06 	bl	8101430 <HAL_GetTick>
 8110824:	4603      	mov	r3, r0
}
 8110826:	4618      	mov	r0, r3
 8110828:	bd80      	pop	{r7, pc}
	...

0811082c <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 811082c:	b580      	push	{r7, lr}
 811082e:	b0a0      	sub	sp, #128	; 0x80
 8110830:	af00      	add	r7, sp, #0
 8110832:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8110834:	2300      	movs	r3, #0
 8110836:	67fb      	str	r3, [r7, #124]	; 0x7c
 8110838:	2300      	movs	r3, #0
 811083a:	67bb      	str	r3, [r7, #120]	; 0x78
 811083c:	2300      	movs	r3, #0
 811083e:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8110840:	687b      	ldr	r3, [r7, #4]
 8110842:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8110844:	483a      	ldr	r0, [pc, #232]	; (8110930 <ethernet_link_thread+0x104>)
 8110846:	f7f0 fcf9 	bl	810123c <LAN8742_GetLinkState>
 811084a:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 811084c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 811084e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8110852:	089b      	lsrs	r3, r3, #2
 8110854:	f003 0301 	and.w	r3, r3, #1
 8110858:	b2db      	uxtb	r3, r3
 811085a:	2b00      	cmp	r3, #0
 811085c:	d00c      	beq.n	8110878 <ethernet_link_thread+0x4c>
 811085e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8110860:	2b01      	cmp	r3, #1
 8110862:	dc09      	bgt.n	8110878 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8110864:	4833      	ldr	r0, [pc, #204]	; (8110934 <ethernet_link_thread+0x108>)
 8110866:	f7f1 f8bb 	bl	81019e0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 811086a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 811086c:	f7fd fcf2 	bl	810e254 <netif_set_down>
    netif_set_link_down(netif);
 8110870:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8110872:	f7fd fd55 	bl	810e320 <netif_set_link_down>
 8110876:	e056      	b.n	8110926 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8110878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 811087a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811087e:	f003 0304 	and.w	r3, r3, #4
 8110882:	2b00      	cmp	r3, #0
 8110884:	d14f      	bne.n	8110926 <ethernet_link_thread+0xfa>
 8110886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8110888:	2b01      	cmp	r3, #1
 811088a:	dd4c      	ble.n	8110926 <ethernet_link_thread+0xfa>
 811088c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 811088e:	3b02      	subs	r3, #2
 8110890:	2b03      	cmp	r3, #3
 8110892:	d82b      	bhi.n	81108ec <ethernet_link_thread+0xc0>
 8110894:	a201      	add	r2, pc, #4	; (adr r2, 811089c <ethernet_link_thread+0x70>)
 8110896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811089a:	bf00      	nop
 811089c:	081108ad 	.word	0x081108ad
 81108a0:	081108bf 	.word	0x081108bf
 81108a4:	081108cf 	.word	0x081108cf
 81108a8:	081108df 	.word	0x081108df
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 81108ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81108b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 81108b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81108b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 81108b8:	2301      	movs	r3, #1
 81108ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 81108bc:	e017      	b.n	81108ee <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 81108be:	2300      	movs	r3, #0
 81108c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 81108c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81108c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 81108c8:	2301      	movs	r3, #1
 81108ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 81108cc:	e00f      	b.n	81108ee <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 81108ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81108d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 81108d4:	2300      	movs	r3, #0
 81108d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 81108d8:	2301      	movs	r3, #1
 81108da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 81108dc:	e007      	b.n	81108ee <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 81108de:	2300      	movs	r3, #0
 81108e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 81108e2:	2300      	movs	r3, #0
 81108e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 81108e6:	2301      	movs	r3, #1
 81108e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 81108ea:	e000      	b.n	81108ee <ethernet_link_thread+0xc2>
    default:
      break;
 81108ec:	bf00      	nop
    }

    if(linkchanged)
 81108ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 81108f0:	2b00      	cmp	r3, #0
 81108f2:	d018      	beq.n	8110926 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 81108f4:	f107 0308 	add.w	r3, r7, #8
 81108f8:	4619      	mov	r1, r3
 81108fa:	480e      	ldr	r0, [pc, #56]	; (8110934 <ethernet_link_thread+0x108>)
 81108fc:	f7f1 fd90 	bl	8102420 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8110900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8110902:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8110904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8110906:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8110908:	f107 0308 	add.w	r3, r7, #8
 811090c:	4619      	mov	r1, r3
 811090e:	4809      	ldr	r0, [pc, #36]	; (8110934 <ethernet_link_thread+0x108>)
 8110910:	f7f1 ff5a 	bl	81027c8 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8110914:	4807      	ldr	r0, [pc, #28]	; (8110934 <ethernet_link_thread+0x108>)
 8110916:	f7f0 ffde 	bl	81018d6 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 811091a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 811091c:	f7fd fc2e 	bl	810e17c <netif_set_up>
      netif_set_link_up(netif);
 8110920:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8110922:	f7fd fcc9 	bl	810e2b8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8110926:	2064      	movs	r0, #100	; 0x64
 8110928:	f7f7 fb99 	bl	810805e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 811092c:	e78a      	b.n	8110844 <ethernet_link_thread+0x18>
 811092e:	bf00      	nop
 8110930:	10008884 	.word	0x10008884
 8110934:	100088a4 	.word	0x100088a4

08110938 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8110938:	b480      	push	{r7}
 811093a:	b085      	sub	sp, #20
 811093c:	af00      	add	r7, sp, #0
 811093e:	60f8      	str	r0, [r7, #12]
 8110940:	60b9      	str	r1, [r7, #8]
 8110942:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8110944:	68fb      	ldr	r3, [r7, #12]
 8110946:	4a07      	ldr	r2, [pc, #28]	; (8110964 <vApplicationGetIdleTaskMemory+0x2c>)
 8110948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 811094a:	68bb      	ldr	r3, [r7, #8]
 811094c:	4a06      	ldr	r2, [pc, #24]	; (8110968 <vApplicationGetIdleTaskMemory+0x30>)
 811094e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8110950:	687b      	ldr	r3, [r7, #4]
 8110952:	2280      	movs	r2, #128	; 0x80
 8110954:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8110956:	bf00      	nop
 8110958:	3714      	adds	r7, #20
 811095a:	46bd      	mov	sp, r7
 811095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110960:	4770      	bx	lr
 8110962:	bf00      	nop
 8110964:	10005950 	.word	0x10005950
 8110968:	10005a04 	.word	0x10005a04

0811096c <hx711_lock>:
    delay--;
  }
}
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 811096c:	b580      	push	{r7, lr}
 811096e:	b082      	sub	sp, #8
 8110970:	af00      	add	r7, sp, #0
 8110972:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8110974:	e002      	b.n	811097c <hx711_lock+0x10>
    hx711_delay(1);
 8110976:	2001      	movs	r0, #1
 8110978:	f7f7 fb71 	bl	810805e <osDelay>
  while (hx711->lock)
 811097c:	687b      	ldr	r3, [r7, #4]
 811097e:	7d1b      	ldrb	r3, [r3, #20]
 8110980:	2b00      	cmp	r3, #0
 8110982:	d1f8      	bne.n	8110976 <hx711_lock+0xa>
  hx711->lock = 1;      
 8110984:	687b      	ldr	r3, [r7, #4]
 8110986:	2201      	movs	r2, #1
 8110988:	751a      	strb	r2, [r3, #20]
}
 811098a:	bf00      	nop
 811098c:	3708      	adds	r7, #8
 811098e:	46bd      	mov	sp, r7
 8110990:	bd80      	pop	{r7, pc}

08110992 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8110992:	b480      	push	{r7}
 8110994:	b083      	sub	sp, #12
 8110996:	af00      	add	r7, sp, #0
 8110998:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 811099a:	687b      	ldr	r3, [r7, #4]
 811099c:	2200      	movs	r2, #0
 811099e:	751a      	strb	r2, [r3, #20]
}
 81109a0:	bf00      	nop
 81109a2:	370c      	adds	r7, #12
 81109a4:	46bd      	mov	sp, r7
 81109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81109aa:	4770      	bx	lr

081109ac <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 81109ac:	b580      	push	{r7, lr}
 81109ae:	b08a      	sub	sp, #40	; 0x28
 81109b0:	af00      	add	r7, sp, #0
 81109b2:	60f8      	str	r0, [r7, #12]
 81109b4:	60b9      	str	r1, [r7, #8]
 81109b6:	603b      	str	r3, [r7, #0]
 81109b8:	4613      	mov	r3, r2
 81109ba:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 81109bc:	68f8      	ldr	r0, [r7, #12]
 81109be:	f7ff ffd5 	bl	811096c <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 81109c2:	68fb      	ldr	r3, [r7, #12]
 81109c4:	68ba      	ldr	r2, [r7, #8]
 81109c6:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 81109c8:	68fb      	ldr	r3, [r7, #12]
 81109ca:	88fa      	ldrh	r2, [r7, #6]
 81109cc:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 81109ce:	68fb      	ldr	r3, [r7, #12]
 81109d0:	683a      	ldr	r2, [r7, #0]
 81109d2:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 81109d4:	68fb      	ldr	r3, [r7, #12]
 81109d6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 81109d8:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 81109da:	f107 0314 	add.w	r3, r7, #20
 81109de:	2200      	movs	r2, #0
 81109e0:	601a      	str	r2, [r3, #0]
 81109e2:	605a      	str	r2, [r3, #4]
 81109e4:	609a      	str	r2, [r3, #8]
 81109e6:	60da      	str	r2, [r3, #12]
 81109e8:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 81109ea:	2301      	movs	r3, #1
 81109ec:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 81109ee:	2300      	movs	r3, #0
 81109f0:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 81109f2:	2302      	movs	r3, #2
 81109f4:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 81109f6:	88fb      	ldrh	r3, [r7, #6]
 81109f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 81109fa:	f107 0314 	add.w	r3, r7, #20
 81109fe:	4619      	mov	r1, r3
 8110a00:	68b8      	ldr	r0, [r7, #8]
 8110a02:	f7f2 fd0d 	bl	8103420 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8110a06:	2300      	movs	r3, #0
 8110a08:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8110a0a:	2301      	movs	r3, #1
 8110a0c:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8110a0e:	2302      	movs	r3, #2
 8110a10:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8110a12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8110a14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8110a16:	f107 0314 	add.w	r3, r7, #20
 8110a1a:	4619      	mov	r1, r3
 8110a1c:	6838      	ldr	r0, [r7, #0]
 8110a1e:	f7f2 fcff 	bl	8103420 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8110a22:	68fb      	ldr	r3, [r7, #12]
 8110a24:	6818      	ldr	r0, [r3, #0]
 8110a26:	68fb      	ldr	r3, [r7, #12]
 8110a28:	891b      	ldrh	r3, [r3, #8]
 8110a2a:	2201      	movs	r2, #1
 8110a2c:	4619      	mov	r1, r3
 8110a2e:	f7f2 febf 	bl	81037b0 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8110a32:	200a      	movs	r0, #10
 8110a34:	f7f7 fb13 	bl	810805e <osDelay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8110a38:	68fb      	ldr	r3, [r7, #12]
 8110a3a:	6818      	ldr	r0, [r3, #0]
 8110a3c:	68fb      	ldr	r3, [r7, #12]
 8110a3e:	891b      	ldrh	r3, [r3, #8]
 8110a40:	2200      	movs	r2, #0
 8110a42:	4619      	mov	r1, r3
 8110a44:	f7f2 feb4 	bl	81037b0 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8110a48:	200a      	movs	r0, #10
 8110a4a:	f7f7 fb08 	bl	810805e <osDelay>

  hx711_value(hx711);
 8110a4e:	68f8      	ldr	r0, [r7, #12]
 8110a50:	f000 f807 	bl	8110a62 <hx711_value>

  hx711_unlock(hx711); 
 8110a54:	68f8      	ldr	r0, [r7, #12]
 8110a56:	f7ff ff9c 	bl	8110992 <hx711_unlock>
}
 8110a5a:	bf00      	nop
 8110a5c:	3728      	adds	r7, #40	; 0x28
 8110a5e:	46bd      	mov	sp, r7
 8110a60:	bd80      	pop	{r7, pc}

08110a62 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8110a62:	b580      	push	{r7, lr}
 8110a64:	b086      	sub	sp, #24
 8110a66:	af00      	add	r7, sp, #0
 8110a68:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8110a6a:	2300      	movs	r3, #0
 8110a6c:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8110a6e:	f7f0 fcdf 	bl	8101430 <HAL_GetTick>
 8110a72:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8110a74:	e00b      	b.n	8110a8e <hx711_value+0x2c>
  {
    hx711_delay(1);
 8110a76:	2001      	movs	r0, #1
 8110a78:	f7f7 faf1 	bl	810805e <osDelay>
    if(HAL_GetTick() - startTime > 150)
 8110a7c:	f7f0 fcd8 	bl	8101430 <HAL_GetTick>
 8110a80:	4602      	mov	r2, r0
 8110a82:	68fb      	ldr	r3, [r7, #12]
 8110a84:	1ad3      	subs	r3, r2, r3
 8110a86:	2b96      	cmp	r3, #150	; 0x96
 8110a88:	d901      	bls.n	8110a8e <hx711_value+0x2c>
      return 0;
 8110a8a:	2300      	movs	r3, #0
 8110a8c:	e059      	b.n	8110b42 <hx711_value+0xe0>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8110a8e:	687b      	ldr	r3, [r7, #4]
 8110a90:	685a      	ldr	r2, [r3, #4]
 8110a92:	687b      	ldr	r3, [r7, #4]
 8110a94:	895b      	ldrh	r3, [r3, #10]
 8110a96:	4619      	mov	r1, r3
 8110a98:	4610      	mov	r0, r2
 8110a9a:	f7f2 fe71 	bl	8103780 <HAL_GPIO_ReadPin>
 8110a9e:	4603      	mov	r3, r0
 8110aa0:	2b01      	cmp	r3, #1
 8110aa2:	d0e8      	beq.n	8110a76 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8110aa4:	2300      	movs	r3, #0
 8110aa6:	74fb      	strb	r3, [r7, #19]
 8110aa8:	e02c      	b.n	8110b04 <hx711_value+0xa2>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8110aaa:	687b      	ldr	r3, [r7, #4]
 8110aac:	6818      	ldr	r0, [r3, #0]
 8110aae:	687b      	ldr	r3, [r7, #4]
 8110ab0:	891b      	ldrh	r3, [r3, #8]
 8110ab2:	2201      	movs	r2, #1
 8110ab4:	4619      	mov	r1, r3
 8110ab6:	f7f2 fe7b 	bl	81037b0 <HAL_GPIO_WritePin>
    delay_us(_HX711_DELAY_US_LOOP);
 8110aba:	2004      	movs	r0, #4
 8110abc:	f000 fd0c 	bl	81114d8 <delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8110ac0:	687b      	ldr	r3, [r7, #4]
 8110ac2:	6818      	ldr	r0, [r3, #0]
 8110ac4:	687b      	ldr	r3, [r7, #4]
 8110ac6:	891b      	ldrh	r3, [r3, #8]
 8110ac8:	2200      	movs	r2, #0
 8110aca:	4619      	mov	r1, r3
 8110acc:	f7f2 fe70 	bl	81037b0 <HAL_GPIO_WritePin>
    delay_us(_HX711_DELAY_US_LOOP);
 8110ad0:	2004      	movs	r0, #4
 8110ad2:	f000 fd01 	bl	81114d8 <delay_us>
    data = data << 1;    
 8110ad6:	697b      	ldr	r3, [r7, #20]
 8110ad8:	005b      	lsls	r3, r3, #1
 8110ada:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8110adc:	687b      	ldr	r3, [r7, #4]
 8110ade:	685a      	ldr	r2, [r3, #4]
 8110ae0:	687b      	ldr	r3, [r7, #4]
 8110ae2:	895b      	ldrh	r3, [r3, #10]
 8110ae4:	4619      	mov	r1, r3
 8110ae6:	4610      	mov	r0, r2
 8110ae8:	f7f2 fe4a 	bl	8103780 <HAL_GPIO_ReadPin>
 8110aec:	4603      	mov	r3, r0
 8110aee:	2b01      	cmp	r3, #1
 8110af0:	d102      	bne.n	8110af8 <hx711_value+0x96>
      data ++;
 8110af2:	697b      	ldr	r3, [r7, #20]
 8110af4:	3301      	adds	r3, #1
 8110af6:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8110af8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8110afc:	b2db      	uxtb	r3, r3
 8110afe:	3301      	adds	r3, #1
 8110b00:	b2db      	uxtb	r3, r3
 8110b02:	74fb      	strb	r3, [r7, #19]
 8110b04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8110b08:	2b17      	cmp	r3, #23
 8110b0a:	ddce      	ble.n	8110aaa <hx711_value+0x48>
    //this loop takes almost 200 us
  }
  data = data ^ 0x800000; 
 8110b0c:	697b      	ldr	r3, [r7, #20]
 8110b0e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8110b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8110b14:	687b      	ldr	r3, [r7, #4]
 8110b16:	6818      	ldr	r0, [r3, #0]
 8110b18:	687b      	ldr	r3, [r7, #4]
 8110b1a:	891b      	ldrh	r3, [r3, #8]
 8110b1c:	2201      	movs	r2, #1
 8110b1e:	4619      	mov	r1, r3
 8110b20:	f7f2 fe46 	bl	81037b0 <HAL_GPIO_WritePin>
  delay_us(_HX711_DELAY_US_LOOP);
 8110b24:	2004      	movs	r0, #4
 8110b26:	f000 fcd7 	bl	81114d8 <delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8110b2a:	687b      	ldr	r3, [r7, #4]
 8110b2c:	6818      	ldr	r0, [r3, #0]
 8110b2e:	687b      	ldr	r3, [r7, #4]
 8110b30:	891b      	ldrh	r3, [r3, #8]
 8110b32:	2200      	movs	r2, #0
 8110b34:	4619      	mov	r1, r3
 8110b36:	f7f2 fe3b 	bl	81037b0 <HAL_GPIO_WritePin>
  delay_us(_HX711_DELAY_US_LOOP);
 8110b3a:	2004      	movs	r0, #4
 8110b3c:	f000 fccc 	bl	81114d8 <delay_us>


  return data;    
 8110b40:	697b      	ldr	r3, [r7, #20]
}
 8110b42:	4618      	mov	r0, r3
 8110b44:	3718      	adds	r7, #24
 8110b46:	46bd      	mov	sp, r7
 8110b48:	bd80      	pop	{r7, pc}

08110b4a <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8110b4a:	b5b0      	push	{r4, r5, r7, lr}
 8110b4c:	b086      	sub	sp, #24
 8110b4e:	af00      	add	r7, sp, #0
 8110b50:	6078      	str	r0, [r7, #4]
 8110b52:	460b      	mov	r3, r1
 8110b54:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8110b56:	6878      	ldr	r0, [r7, #4]
 8110b58:	f7ff ff08 	bl	811096c <hx711_lock>
  int64_t  ave = 0;
 8110b5c:	f04f 0200 	mov.w	r2, #0
 8110b60:	f04f 0300 	mov.w	r3, #0
 8110b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8110b68:	2300      	movs	r3, #0
 8110b6a:	81fb      	strh	r3, [r7, #14]
 8110b6c:	e013      	b.n	8110b96 <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 8110b6e:	6878      	ldr	r0, [r7, #4]
 8110b70:	f7ff ff77 	bl	8110a62 <hx711_value>
 8110b74:	4603      	mov	r3, r0
 8110b76:	461a      	mov	r2, r3
 8110b78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8110b7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8110b80:	1884      	adds	r4, r0, r2
 8110b82:	eb41 0503 	adc.w	r5, r1, r3
 8110b86:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 8110b8a:	2005      	movs	r0, #5
 8110b8c:	f7f7 fa67 	bl	810805e <osDelay>
  for(uint16_t i=0 ; i<sample ; i++)
 8110b90:	89fb      	ldrh	r3, [r7, #14]
 8110b92:	3301      	adds	r3, #1
 8110b94:	81fb      	strh	r3, [r7, #14]
 8110b96:	89fa      	ldrh	r2, [r7, #14]
 8110b98:	887b      	ldrh	r3, [r7, #2]
 8110b9a:	429a      	cmp	r2, r3
 8110b9c:	d3e7      	bcc.n	8110b6e <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8110b9e:	887a      	ldrh	r2, [r7, #2]
 8110ba0:	f04f 0300 	mov.w	r3, #0
 8110ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8110ba8:	f7f0 f886 	bl	8100cb8 <__aeabi_ldivmod>
 8110bac:	4602      	mov	r2, r0
 8110bae:	460b      	mov	r3, r1
 8110bb0:	687b      	ldr	r3, [r7, #4]
 8110bb2:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8110bb4:	6878      	ldr	r0, [r7, #4]
 8110bb6:	f7ff feec 	bl	8110992 <hx711_unlock>
}
 8110bba:	bf00      	nop
 8110bbc:	3718      	adds	r7, #24
 8110bbe:	46bd      	mov	sp, r7
 8110bc0:	bdb0      	pop	{r4, r5, r7, pc}

08110bc2 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8110bc2:	b5b0      	push	{r4, r5, r7, lr}
 8110bc4:	b088      	sub	sp, #32
 8110bc6:	af00      	add	r7, sp, #0
 8110bc8:	6078      	str	r0, [r7, #4]
 8110bca:	460b      	mov	r3, r1
 8110bcc:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8110bce:	6878      	ldr	r0, [r7, #4]
 8110bd0:	f7ff fecc 	bl	811096c <hx711_lock>
  int64_t  ave = 0;
 8110bd4:	f04f 0200 	mov.w	r2, #0
 8110bd8:	f04f 0300 	mov.w	r3, #0
 8110bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8110be0:	2300      	movs	r3, #0
 8110be2:	82fb      	strh	r3, [r7, #22]
 8110be4:	e013      	b.n	8110c0e <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8110be6:	6878      	ldr	r0, [r7, #4]
 8110be8:	f7ff ff3b 	bl	8110a62 <hx711_value>
 8110bec:	4603      	mov	r3, r0
 8110bee:	461a      	mov	r2, r3
 8110bf0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8110bf4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8110bf8:	1884      	adds	r4, r0, r2
 8110bfa:	eb41 0503 	adc.w	r5, r1, r3
 8110bfe:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(1);
 8110c02:	2001      	movs	r0, #1
 8110c04:	f7f7 fa2b 	bl	810805e <osDelay>
  for(uint16_t i=0 ; i<sample ; i++)
 8110c08:	8afb      	ldrh	r3, [r7, #22]
 8110c0a:	3301      	adds	r3, #1
 8110c0c:	82fb      	strh	r3, [r7, #22]
 8110c0e:	8afa      	ldrh	r2, [r7, #22]
 8110c10:	887b      	ldrh	r3, [r7, #2]
 8110c12:	429a      	cmp	r2, r3
 8110c14:	d3e7      	bcc.n	8110be6 <hx711_weight+0x24>
  }

  int32_t data = (int32_t)(ave / sample);
 8110c16:	887a      	ldrh	r2, [r7, #2]
 8110c18:	f04f 0300 	mov.w	r3, #0
 8110c1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8110c20:	f7f0 f84a 	bl	8100cb8 <__aeabi_ldivmod>
 8110c24:	4602      	mov	r2, r0
 8110c26:	460b      	mov	r3, r1
 8110c28:	4613      	mov	r3, r2
 8110c2a:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8110c2c:	687b      	ldr	r3, [r7, #4]
 8110c2e:	68db      	ldr	r3, [r3, #12]
 8110c30:	693a      	ldr	r2, [r7, #16]
 8110c32:	1ad3      	subs	r3, r2, r3
 8110c34:	ee07 3a90 	vmov	s15, r3
 8110c38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8110c3c:	687b      	ldr	r3, [r7, #4]
 8110c3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8110c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8110c46:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 8110c4a:	6878      	ldr	r0, [r7, #4]
 8110c4c:	f7ff fea1 	bl	8110992 <hx711_unlock>
  return answer;
 8110c50:	68fb      	ldr	r3, [r7, #12]
 8110c52:	ee07 3a90 	vmov	s15, r3
}
 8110c56:	eeb0 0a67 	vmov.f32	s0, s15
 8110c5a:	3720      	adds	r7, #32
 8110c5c:	46bd      	mov	sp, r7
 8110c5e:	bdb0      	pop	{r4, r5, r7, pc}

08110c60 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8110c60:	b480      	push	{r7}
 8110c62:	b083      	sub	sp, #12
 8110c64:	af00      	add	r7, sp, #0
 8110c66:	6078      	str	r0, [r7, #4]
 8110c68:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8110c6c:	687b      	ldr	r3, [r7, #4]
 8110c6e:	683a      	ldr	r2, [r7, #0]
 8110c70:	611a      	str	r2, [r3, #16]
}
 8110c72:	bf00      	nop
 8110c74:	370c      	adds	r7, #12
 8110c76:	46bd      	mov	sp, r7
 8110c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c7c:	4770      	bx	lr
	...

08110c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8110c80:	b5b0      	push	{r4, r5, r7, lr}
 8110c82:	b0a6      	sub	sp, #152	; 0x98
 8110c84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */

	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8110c86:	4b63      	ldr	r3, [pc, #396]	; (8110e14 <main+0x194>)
 8110c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110c8c:	4a61      	ldr	r2, [pc, #388]	; (8110e14 <main+0x194>)
 8110c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8110c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8110c96:	4b5f      	ldr	r3, [pc, #380]	; (8110e14 <main+0x194>)
 8110c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8110c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8110ca0:	603b      	str	r3, [r7, #0]
 8110ca2:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8110ca4:	2001      	movs	r0, #1
 8110ca6:	f7f2 fdb3 	bl	8103810 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8110caa:	f7f2 ffcf 	bl	8103c4c <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8110cae:	2201      	movs	r2, #1
 8110cb0:	2102      	movs	r1, #2
 8110cb2:	2000      	movs	r0, #0
 8110cb4:	f7f2 ff50 	bl	8103b58 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8110cb8:	4b57      	ldr	r3, [pc, #348]	; (8110e18 <main+0x198>)
 8110cba:	681b      	ldr	r3, [r3, #0]
 8110cbc:	091b      	lsrs	r3, r3, #4
 8110cbe:	f003 030f 	and.w	r3, r3, #15
 8110cc2:	2b07      	cmp	r3, #7
 8110cc4:	d108      	bne.n	8110cd8 <main+0x58>
 8110cc6:	4b55      	ldr	r3, [pc, #340]	; (8110e1c <main+0x19c>)
 8110cc8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8110ccc:	4a53      	ldr	r2, [pc, #332]	; (8110e1c <main+0x19c>)
 8110cce:	f043 0301 	orr.w	r3, r3, #1
 8110cd2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8110cd6:	e007      	b.n	8110ce8 <main+0x68>
 8110cd8:	4b50      	ldr	r3, [pc, #320]	; (8110e1c <main+0x19c>)
 8110cda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8110cde:	4a4f      	ldr	r2, [pc, #316]	; (8110e1c <main+0x19c>)
 8110ce0:	f043 0301 	orr.w	r3, r3, #1
 8110ce4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8110ce8:	f7f0 fb30 	bl	810134c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8110cec:	f000 fab4 	bl	8111258 <MX_GPIO_Init>
  MX_TIM15_Init();
 8110cf0:	f000 f9ee 	bl	81110d0 <MX_TIM15_Init>
  MX_TIM8_Init();
 8110cf4:	f000 f91a 	bl	8110f2c <MX_TIM8_Init>
  MX_TIM16_Init();
 8110cf8:	f000 fa3c 	bl	8111174 <MX_TIM16_Init>
  MX_LPTIM1_Init();
 8110cfc:	f000 f8ae 	bl	8110e5c <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 8110d00:	f000 f8e0 	bl	8110ec4 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */

	MX_USART3_UART_Init(); //init uart3 also on CM4
 8110d04:	f000 fa5c 	bl	81111c0 <MX_USART3_UART_Init>

	RetargetInit(&huart3);
 8110d08:	4845      	ldr	r0, [pc, #276]	; (8110e20 <main+0x1a0>)
 8110d0a:	f000 fd55 	bl	81117b8 <RetargetInit>

	while (HAL_HSEM_IsSemTaken(HSEM_ID_0) == 0) {
 8110d0e:	e002      	b.n	8110d16 <main+0x96>
		HAL_Delay(100);
 8110d10:	2064      	movs	r0, #100	; 0x64
 8110d12:	f7f0 fb99 	bl	8101448 <HAL_Delay>
	while (HAL_HSEM_IsSemTaken(HSEM_ID_0) == 0) {
 8110d16:	2000      	movs	r0, #0
 8110d18:	f7f2 fd64 	bl	81037e4 <HAL_HSEM_IsSemTaken>
 8110d1c:	4603      	mov	r3, r0
 8110d1e:	2b00      	cmp	r3, #0
 8110d20:	d0f6      	beq.n	8110d10 <main+0x90>
	}

	printf("GSCS-002 CM4 Started\n");
 8110d22:	4840      	ldr	r0, [pc, #256]	; (8110e24 <main+0x1a4>)
 8110d24:	f002 f84a 	bl	8112dbc <puts>

	// Calibrate The ADC On Power-Up For Better Accuracy
	printf("GSCS-002 CM4 - Starting ADC1 calibration\n");
 8110d28:	483f      	ldr	r0, [pc, #252]	; (8110e28 <main+0x1a8>)
 8110d2a:	f002 f847 	bl	8112dbc <puts>
//
//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
//	ADC_SINGLE_ENDED);

	printf("GSCS-002 CM4 - ADC1 calibration done\n");
 8110d2e:	483f      	ldr	r0, [pc, #252]	; (8110e2c <main+0x1ac>)
 8110d30:	f002 f844 	bl	8112dbc <puts>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of InitSemaphore */
  osSemaphoreDef(InitSemaphore);
 8110d34:	2300      	movs	r3, #0
 8110d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8110d3a:	2300      	movs	r3, #0
 8110d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  InitSemaphoreHandle = osSemaphoreCreate(osSemaphore(InitSemaphore), 1);
 8110d40:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8110d44:	2101      	movs	r1, #1
 8110d46:	4618      	mov	r0, r3
 8110d48:	f7f7 fa3a 	bl	81081c0 <osSemaphoreCreate>
 8110d4c:	4603      	mov	r3, r0
 8110d4e:	4a38      	ldr	r2, [pc, #224]	; (8110e30 <main+0x1b0>)
 8110d50:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8110d52:	4b38      	ldr	r3, [pc, #224]	; (8110e34 <main+0x1b4>)
 8110d54:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8110d58:	461d      	mov	r5, r3
 8110d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8110d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8110d5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8110d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8110d66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8110d6a:	2100      	movs	r1, #0
 8110d6c:	4618      	mov	r0, r3
 8110d6e:	f7f7 f92a 	bl	8107fc6 <osThreadCreate>
 8110d72:	4603      	mov	r3, r0
 8110d74:	4a30      	ldr	r2, [pc, #192]	; (8110e38 <main+0x1b8>)
 8110d76:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sens_Acq_Task */
  osThreadDef(Sens_Acq_Task, StartSens_Acq_Task, osPriorityIdle, 0, 1024);
 8110d78:	4b30      	ldr	r3, [pc, #192]	; (8110e3c <main+0x1bc>)
 8110d7a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8110d7e:	461d      	mov	r5, r3
 8110d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8110d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8110d84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8110d88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sens_Acq_TaskHandle = osThreadCreate(osThread(Sens_Acq_Task), NULL);
 8110d8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8110d90:	2100      	movs	r1, #0
 8110d92:	4618      	mov	r0, r3
 8110d94:	f7f7 f917 	bl	8107fc6 <osThreadCreate>
 8110d98:	4603      	mov	r3, r0
 8110d9a:	4a29      	ldr	r2, [pc, #164]	; (8110e40 <main+0x1c0>)
 8110d9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommandRX_Task */
  osThreadDef(CommandRX_Task, Start_CommandRX_Task, osPriorityIdle, 0, 256);
 8110d9e:	4b29      	ldr	r3, [pc, #164]	; (8110e44 <main+0x1c4>)
 8110da0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8110da4:	461d      	mov	r5, r3
 8110da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8110da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8110daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8110dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommandRX_TaskHandle = osThreadCreate(osThread(CommandRX_Task), NULL);
 8110db2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8110db6:	2100      	movs	r1, #0
 8110db8:	4618      	mov	r0, r3
 8110dba:	f7f7 f904 	bl	8107fc6 <osThreadCreate>
 8110dbe:	4603      	mov	r3, r0
 8110dc0:	4a21      	ldr	r2, [pc, #132]	; (8110e48 <main+0x1c8>)
 8110dc2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TelemetryTX_Tas */
  osThreadDef(TelemetryTX_Tas, Start_TelemetryTX_Task, osPriorityIdle, 0, 512);
 8110dc4:	4b21      	ldr	r3, [pc, #132]	; (8110e4c <main+0x1cc>)
 8110dc6:	f107 0420 	add.w	r4, r7, #32
 8110dca:	461d      	mov	r5, r3
 8110dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8110dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8110dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8110dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TelemetryTX_TasHandle = osThreadCreate(osThread(TelemetryTX_Tas), NULL);
 8110dd8:	f107 0320 	add.w	r3, r7, #32
 8110ddc:	2100      	movs	r1, #0
 8110dde:	4618      	mov	r0, r3
 8110de0:	f7f7 f8f1 	bl	8107fc6 <osThreadCreate>
 8110de4:	4603      	mov	r3, r0
 8110de6:	4a1a      	ldr	r2, [pc, #104]	; (8110e50 <main+0x1d0>)
 8110de8:	6013      	str	r3, [r2, #0]

  /* definition and creation of ActuatorsContro */
  osThreadDef(ActuatorsContro, Start_ActuatorsControl_Task, osPriorityIdle, 0, 128);
 8110dea:	4b1a      	ldr	r3, [pc, #104]	; (8110e54 <main+0x1d4>)
 8110dec:	1d3c      	adds	r4, r7, #4
 8110dee:	461d      	mov	r5, r3
 8110df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8110df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8110df4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8110df8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ActuatorsControHandle = osThreadCreate(osThread(ActuatorsContro), NULL);
 8110dfc:	1d3b      	adds	r3, r7, #4
 8110dfe:	2100      	movs	r1, #0
 8110e00:	4618      	mov	r0, r3
 8110e02:	f7f7 f8e0 	bl	8107fc6 <osThreadCreate>
 8110e06:	4603      	mov	r3, r0
 8110e08:	4a13      	ldr	r2, [pc, #76]	; (8110e58 <main+0x1d8>)
 8110e0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8110e0c:	f7f7 f8c4 	bl	8107f98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8110e10:	e7fe      	b.n	8110e10 <main+0x190>
 8110e12:	bf00      	nop
 8110e14:	58024400 	.word	0x58024400
 8110e18:	e000ed00 	.word	0xe000ed00
 8110e1c:	58026400 	.word	0x58026400
 8110e20:	10008a1c 	.word	0x10008a1c
 8110e24:	08116814 	.word	0x08116814
 8110e28:	0811682c 	.word	0x0811682c
 8110e2c:	08116858 	.word	0x08116858
 8110e30:	10008af8 	.word	0x10008af8
 8110e34:	08116880 	.word	0x08116880
 8110e38:	100089cc 	.word	0x100089cc
 8110e3c:	0811689c 	.word	0x0811689c
 8110e40:	100089c4 	.word	0x100089c4
 8110e44:	081168b8 	.word	0x081168b8
 8110e48:	100089c8 	.word	0x100089c8
 8110e4c:	081168d4 	.word	0x081168d4
 8110e50:	10008bfc 	.word	0x10008bfc
 8110e54:	081168f0 	.word	0x081168f0
 8110e58:	10008b84 	.word	0x10008b84

08110e5c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8110e5c:	b580      	push	{r7, lr}
 8110e5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8110e60:	4b16      	ldr	r3, [pc, #88]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e62:	4a17      	ldr	r2, [pc, #92]	; (8110ec0 <MX_LPTIM1_Init+0x64>)
 8110e64:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8110e66:	4b15      	ldr	r3, [pc, #84]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e68:	2200      	movs	r2, #0
 8110e6a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8110e6c:	4b13      	ldr	r3, [pc, #76]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e6e:	2200      	movs	r2, #0
 8110e70:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8110e72:	4b12      	ldr	r3, [pc, #72]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e74:	2200      	movs	r2, #0
 8110e76:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8110e78:	4b10      	ldr	r3, [pc, #64]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e7a:	2200      	movs	r2, #0
 8110e7c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8110e7e:	4b0f      	ldr	r3, [pc, #60]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8110e84:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8110e86:	4b0d      	ldr	r3, [pc, #52]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e88:	2200      	movs	r2, #0
 8110e8a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8110e8c:	4b0b      	ldr	r3, [pc, #44]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e8e:	2200      	movs	r2, #0
 8110e90:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8110e92:	4b0a      	ldr	r3, [pc, #40]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8110e98:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8110e9a:	4b08      	ldr	r3, [pc, #32]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110e9c:	2200      	movs	r2, #0
 8110e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8110ea0:	4b06      	ldr	r3, [pc, #24]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110ea2:	2200      	movs	r2, #0
 8110ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8110ea6:	4805      	ldr	r0, [pc, #20]	; (8110ebc <MX_LPTIM1_Init+0x60>)
 8110ea8:	f7f2 fcc4 	bl	8103834 <HAL_LPTIM_Init>
 8110eac:	4603      	mov	r3, r0
 8110eae:	2b00      	cmp	r3, #0
 8110eb0:	d001      	beq.n	8110eb6 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8110eb2:	f000 fc77 	bl	81117a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8110eb6:	bf00      	nop
 8110eb8:	bd80      	pop	{r7, pc}
 8110eba:	bf00      	nop
 8110ebc:	10008b4c 	.word	0x10008b4c
 8110ec0:	40002400 	.word	0x40002400

08110ec4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8110ec4:	b580      	push	{r7, lr}
 8110ec6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8110ec8:	4b16      	ldr	r3, [pc, #88]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110eca:	4a17      	ldr	r2, [pc, #92]	; (8110f28 <MX_LPTIM2_Init+0x64>)
 8110ecc:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8110ece:	4b15      	ldr	r3, [pc, #84]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110ed0:	2200      	movs	r2, #0
 8110ed2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8110ed4:	4b13      	ldr	r3, [pc, #76]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110ed6:	2200      	movs	r2, #0
 8110ed8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8110eda:	4b12      	ldr	r3, [pc, #72]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110edc:	2200      	movs	r2, #0
 8110ede:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8110ee0:	4b10      	ldr	r3, [pc, #64]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110ee2:	2200      	movs	r2, #0
 8110ee4:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8110ee6:	4b0f      	ldr	r3, [pc, #60]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8110eec:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8110eee:	4b0d      	ldr	r3, [pc, #52]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110ef0:	2200      	movs	r2, #0
 8110ef2:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8110ef4:	4b0b      	ldr	r3, [pc, #44]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110ef6:	2200      	movs	r2, #0
 8110ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8110efa:	4b0a      	ldr	r3, [pc, #40]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110efc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8110f00:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8110f02:	4b08      	ldr	r3, [pc, #32]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110f04:	2200      	movs	r2, #0
 8110f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8110f08:	4b06      	ldr	r3, [pc, #24]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110f0a:	2200      	movs	r2, #0
 8110f0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8110f0e:	4805      	ldr	r0, [pc, #20]	; (8110f24 <MX_LPTIM2_Init+0x60>)
 8110f10:	f7f2 fc90 	bl	8103834 <HAL_LPTIM_Init>
 8110f14:	4603      	mov	r3, r0
 8110f16:	2b00      	cmp	r3, #0
 8110f18:	d001      	beq.n	8110f1e <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8110f1a:	f000 fc43 	bl	81117a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8110f1e:	bf00      	nop
 8110f20:	bd80      	pop	{r7, pc}
 8110f22:	bf00      	nop
 8110f24:	10008b14 	.word	0x10008b14
 8110f28:	58002400 	.word	0x58002400

08110f2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8110f2c:	b580      	push	{r7, lr}
 8110f2e:	b09a      	sub	sp, #104	; 0x68
 8110f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8110f32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8110f36:	2200      	movs	r2, #0
 8110f38:	601a      	str	r2, [r3, #0]
 8110f3a:	605a      	str	r2, [r3, #4]
 8110f3c:	609a      	str	r2, [r3, #8]
 8110f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8110f40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8110f44:	2200      	movs	r2, #0
 8110f46:	601a      	str	r2, [r3, #0]
 8110f48:	605a      	str	r2, [r3, #4]
 8110f4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8110f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8110f50:	2200      	movs	r2, #0
 8110f52:	601a      	str	r2, [r3, #0]
 8110f54:	605a      	str	r2, [r3, #4]
 8110f56:	609a      	str	r2, [r3, #8]
 8110f58:	60da      	str	r2, [r3, #12]
 8110f5a:	611a      	str	r2, [r3, #16]
 8110f5c:	615a      	str	r2, [r3, #20]
 8110f5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8110f60:	1d3b      	adds	r3, r7, #4
 8110f62:	222c      	movs	r2, #44	; 0x2c
 8110f64:	2100      	movs	r1, #0
 8110f66:	4618      	mov	r0, r3
 8110f68:	f001 f9d5 	bl	8112316 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8110f6c:	4b56      	ldr	r3, [pc, #344]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f6e:	4a57      	ldr	r2, [pc, #348]	; (81110cc <MX_TIM8_Init+0x1a0>)
 8110f70:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 200;
 8110f72:	4b55      	ldr	r3, [pc, #340]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f74:	22c8      	movs	r2, #200	; 0xc8
 8110f76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8110f78:	4b53      	ldr	r3, [pc, #332]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f7a:	2200      	movs	r2, #0
 8110f7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8110f7e:	4b52      	ldr	r3, [pc, #328]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8110f84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8110f86:	4b50      	ldr	r3, [pc, #320]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f88:	2200      	movs	r2, #0
 8110f8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8110f8c:	4b4e      	ldr	r3, [pc, #312]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f8e:	2200      	movs	r2, #0
 8110f90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8110f92:	4b4d      	ldr	r3, [pc, #308]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f94:	2200      	movs	r2, #0
 8110f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8110f98:	484b      	ldr	r0, [pc, #300]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110f9a:	f7f4 fbe1 	bl	8105760 <HAL_TIM_Base_Init>
 8110f9e:	4603      	mov	r3, r0
 8110fa0:	2b00      	cmp	r3, #0
 8110fa2:	d001      	beq.n	8110fa8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8110fa4:	f000 fbfe 	bl	81117a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8110fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110fac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8110fae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8110fb2:	4619      	mov	r1, r3
 8110fb4:	4844      	ldr	r0, [pc, #272]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110fb6:	f7f4 ffa7 	bl	8105f08 <HAL_TIM_ConfigClockSource>
 8110fba:	4603      	mov	r3, r0
 8110fbc:	2b00      	cmp	r3, #0
 8110fbe:	d001      	beq.n	8110fc4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8110fc0:	f000 fbf0 	bl	81117a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8110fc4:	4840      	ldr	r0, [pc, #256]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110fc6:	f7f4 fd0b 	bl	81059e0 <HAL_TIM_PWM_Init>
 8110fca:	4603      	mov	r3, r0
 8110fcc:	2b00      	cmp	r3, #0
 8110fce:	d001      	beq.n	8110fd4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8110fd0:	f000 fbe8 	bl	81117a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8110fd4:	2300      	movs	r3, #0
 8110fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8110fd8:	2300      	movs	r3, #0
 8110fda:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8110fdc:	2300      	movs	r3, #0
 8110fde:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8110fe0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8110fe4:	4619      	mov	r1, r3
 8110fe6:	4838      	ldr	r0, [pc, #224]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8110fe8:	f7f5 fcb0 	bl	810694c <HAL_TIMEx_MasterConfigSynchronization>
 8110fec:	4603      	mov	r3, r0
 8110fee:	2b00      	cmp	r3, #0
 8110ff0:	d001      	beq.n	8110ff6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8110ff2:	f000 fbd7 	bl	81117a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8110ff6:	2360      	movs	r3, #96	; 0x60
 8110ff8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8110ffa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8110ffe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8111000:	2300      	movs	r3, #0
 8111002:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8111004:	2300      	movs	r3, #0
 8111006:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8111008:	2300      	movs	r3, #0
 811100a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 811100c:	2300      	movs	r3, #0
 811100e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8111010:	2300      	movs	r3, #0
 8111012:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8111014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8111018:	2200      	movs	r2, #0
 811101a:	4619      	mov	r1, r3
 811101c:	482a      	ldr	r0, [pc, #168]	; (81110c8 <MX_TIM8_Init+0x19c>)
 811101e:	f7f4 fe5f 	bl	8105ce0 <HAL_TIM_PWM_ConfigChannel>
 8111022:	4603      	mov	r3, r0
 8111024:	2b00      	cmp	r3, #0
 8111026:	d001      	beq.n	811102c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8111028:	f000 fbbc 	bl	81117a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 811102c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8111030:	2204      	movs	r2, #4
 8111032:	4619      	mov	r1, r3
 8111034:	4824      	ldr	r0, [pc, #144]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8111036:	f7f4 fe53 	bl	8105ce0 <HAL_TIM_PWM_ConfigChannel>
 811103a:	4603      	mov	r3, r0
 811103c:	2b00      	cmp	r3, #0
 811103e:	d001      	beq.n	8111044 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8111040:	f000 fbb0 	bl	81117a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8111044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8111048:	2208      	movs	r2, #8
 811104a:	4619      	mov	r1, r3
 811104c:	481e      	ldr	r0, [pc, #120]	; (81110c8 <MX_TIM8_Init+0x19c>)
 811104e:	f7f4 fe47 	bl	8105ce0 <HAL_TIM_PWM_ConfigChannel>
 8111052:	4603      	mov	r3, r0
 8111054:	2b00      	cmp	r3, #0
 8111056:	d001      	beq.n	811105c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8111058:	f000 fba4 	bl	81117a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 811105c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8111060:	220c      	movs	r2, #12
 8111062:	4619      	mov	r1, r3
 8111064:	4818      	ldr	r0, [pc, #96]	; (81110c8 <MX_TIM8_Init+0x19c>)
 8111066:	f7f4 fe3b 	bl	8105ce0 <HAL_TIM_PWM_ConfigChannel>
 811106a:	4603      	mov	r3, r0
 811106c:	2b00      	cmp	r3, #0
 811106e:	d001      	beq.n	8111074 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8111070:	f000 fb98 	bl	81117a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8111074:	2300      	movs	r3, #0
 8111076:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8111078:	2300      	movs	r3, #0
 811107a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 811107c:	2300      	movs	r3, #0
 811107e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8111080:	2300      	movs	r3, #0
 8111082:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8111084:	2300      	movs	r3, #0
 8111086:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8111088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 811108c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 811108e:	2300      	movs	r3, #0
 8111090:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8111092:	2300      	movs	r3, #0
 8111094:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8111096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 811109a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 811109c:	2300      	movs	r3, #0
 811109e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81110a0:	2300      	movs	r3, #0
 81110a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 81110a4:	1d3b      	adds	r3, r7, #4
 81110a6:	4619      	mov	r1, r3
 81110a8:	4807      	ldr	r0, [pc, #28]	; (81110c8 <MX_TIM8_Init+0x19c>)
 81110aa:	f7f5 fcdd 	bl	8106a68 <HAL_TIMEx_ConfigBreakDeadTime>
 81110ae:	4603      	mov	r3, r0
 81110b0:	2b00      	cmp	r3, #0
 81110b2:	d001      	beq.n	81110b8 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 81110b4:	f000 fb76 	bl	81117a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 81110b8:	4803      	ldr	r0, [pc, #12]	; (81110c8 <MX_TIM8_Init+0x19c>)
 81110ba:	f000 fe63 	bl	8111d84 <HAL_TIM_MspPostInit>

}
 81110be:	bf00      	nop
 81110c0:	3768      	adds	r7, #104	; 0x68
 81110c2:	46bd      	mov	sp, r7
 81110c4:	bd80      	pop	{r7, pc}
 81110c6:	bf00      	nop
 81110c8:	100089d0 	.word	0x100089d0
 81110cc:	40010400 	.word	0x40010400

081110d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 81110d0:	b580      	push	{r7, lr}
 81110d2:	b088      	sub	sp, #32
 81110d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81110d6:	f107 0310 	add.w	r3, r7, #16
 81110da:	2200      	movs	r2, #0
 81110dc:	601a      	str	r2, [r3, #0]
 81110de:	605a      	str	r2, [r3, #4]
 81110e0:	609a      	str	r2, [r3, #8]
 81110e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81110e4:	1d3b      	adds	r3, r7, #4
 81110e6:	2200      	movs	r2, #0
 81110e8:	601a      	str	r2, [r3, #0]
 81110ea:	605a      	str	r2, [r3, #4]
 81110ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 81110ee:	4b1f      	ldr	r3, [pc, #124]	; (811116c <MX_TIM15_Init+0x9c>)
 81110f0:	4a1f      	ldr	r2, [pc, #124]	; (8111170 <MX_TIM15_Init+0xa0>)
 81110f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 200 - 1;
 81110f4:	4b1d      	ldr	r3, [pc, #116]	; (811116c <MX_TIM15_Init+0x9c>)
 81110f6:	22c7      	movs	r2, #199	; 0xc7
 81110f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 81110fa:	4b1c      	ldr	r3, [pc, #112]	; (811116c <MX_TIM15_Init+0x9c>)
 81110fc:	2200      	movs	r2, #0
 81110fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535 - 1;
 8111100:	4b1a      	ldr	r3, [pc, #104]	; (811116c <MX_TIM15_Init+0x9c>)
 8111102:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8111106:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8111108:	4b18      	ldr	r3, [pc, #96]	; (811116c <MX_TIM15_Init+0x9c>)
 811110a:	2200      	movs	r2, #0
 811110c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 811110e:	4b17      	ldr	r3, [pc, #92]	; (811116c <MX_TIM15_Init+0x9c>)
 8111110:	2200      	movs	r2, #0
 8111112:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8111114:	4b15      	ldr	r3, [pc, #84]	; (811116c <MX_TIM15_Init+0x9c>)
 8111116:	2200      	movs	r2, #0
 8111118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 811111a:	4814      	ldr	r0, [pc, #80]	; (811116c <MX_TIM15_Init+0x9c>)
 811111c:	f7f4 fb20 	bl	8105760 <HAL_TIM_Base_Init>
 8111120:	4603      	mov	r3, r0
 8111122:	2b00      	cmp	r3, #0
 8111124:	d001      	beq.n	811112a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8111126:	f000 fb3d 	bl	81117a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 811112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811112e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8111130:	f107 0310 	add.w	r3, r7, #16
 8111134:	4619      	mov	r1, r3
 8111136:	480d      	ldr	r0, [pc, #52]	; (811116c <MX_TIM15_Init+0x9c>)
 8111138:	f7f4 fee6 	bl	8105f08 <HAL_TIM_ConfigClockSource>
 811113c:	4603      	mov	r3, r0
 811113e:	2b00      	cmp	r3, #0
 8111140:	d001      	beq.n	8111146 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8111142:	f000 fb2f 	bl	81117a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8111146:	2300      	movs	r3, #0
 8111148:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 811114a:	2300      	movs	r3, #0
 811114c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 811114e:	1d3b      	adds	r3, r7, #4
 8111150:	4619      	mov	r1, r3
 8111152:	4806      	ldr	r0, [pc, #24]	; (811116c <MX_TIM15_Init+0x9c>)
 8111154:	f7f5 fbfa 	bl	810694c <HAL_TIMEx_MasterConfigSynchronization>
 8111158:	4603      	mov	r3, r0
 811115a:	2b00      	cmp	r3, #0
 811115c:	d001      	beq.n	8111162 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 811115e:	f000 fb21 	bl	81117a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8111162:	bf00      	nop
 8111164:	3720      	adds	r7, #32
 8111166:	46bd      	mov	sp, r7
 8111168:	bd80      	pop	{r7, pc}
 811116a:	bf00      	nop
 811116c:	10008aac 	.word	0x10008aac
 8111170:	40014000 	.word	0x40014000

08111174 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8111174:	b580      	push	{r7, lr}
 8111176:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8111178:	4b0f      	ldr	r3, [pc, #60]	; (81111b8 <MX_TIM16_Init+0x44>)
 811117a:	4a10      	ldr	r2, [pc, #64]	; (81111bc <MX_TIM16_Init+0x48>)
 811117c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 200 - 1;
 811117e:	4b0e      	ldr	r3, [pc, #56]	; (81111b8 <MX_TIM16_Init+0x44>)
 8111180:	22c7      	movs	r2, #199	; 0xc7
 8111182:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8111184:	4b0c      	ldr	r3, [pc, #48]	; (81111b8 <MX_TIM16_Init+0x44>)
 8111186:	2200      	movs	r2, #0
 8111188:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535 - 1;
 811118a:	4b0b      	ldr	r3, [pc, #44]	; (81111b8 <MX_TIM16_Init+0x44>)
 811118c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8111190:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8111192:	4b09      	ldr	r3, [pc, #36]	; (81111b8 <MX_TIM16_Init+0x44>)
 8111194:	2200      	movs	r2, #0
 8111196:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8111198:	4b07      	ldr	r3, [pc, #28]	; (81111b8 <MX_TIM16_Init+0x44>)
 811119a:	2200      	movs	r2, #0
 811119c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 811119e:	4b06      	ldr	r3, [pc, #24]	; (81111b8 <MX_TIM16_Init+0x44>)
 81111a0:	2200      	movs	r2, #0
 81111a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 81111a4:	4804      	ldr	r0, [pc, #16]	; (81111b8 <MX_TIM16_Init+0x44>)
 81111a6:	f7f4 fadb 	bl	8105760 <HAL_TIM_Base_Init>
 81111aa:	4603      	mov	r3, r0
 81111ac:	2b00      	cmp	r3, #0
 81111ae:	d001      	beq.n	81111b4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 81111b0:	f000 faf8 	bl	81117a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 81111b4:	bf00      	nop
 81111b6:	bd80      	pop	{r7, pc}
 81111b8:	10008bb0 	.word	0x10008bb0
 81111bc:	40014400 	.word	0x40014400

081111c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 81111c0:	b580      	push	{r7, lr}
 81111c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81111c4:	4b22      	ldr	r3, [pc, #136]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111c6:	4a23      	ldr	r2, [pc, #140]	; (8111254 <MX_USART3_UART_Init+0x94>)
 81111c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81111ca:	4b21      	ldr	r3, [pc, #132]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81111d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81111d2:	4b1f      	ldr	r3, [pc, #124]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111d4:	2200      	movs	r2, #0
 81111d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81111d8:	4b1d      	ldr	r3, [pc, #116]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111da:	2200      	movs	r2, #0
 81111dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81111de:	4b1c      	ldr	r3, [pc, #112]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111e0:	2200      	movs	r2, #0
 81111e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81111e4:	4b1a      	ldr	r3, [pc, #104]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111e6:	220c      	movs	r2, #12
 81111e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81111ea:	4b19      	ldr	r3, [pc, #100]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111ec:	2200      	movs	r2, #0
 81111ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81111f0:	4b17      	ldr	r3, [pc, #92]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111f2:	2200      	movs	r2, #0
 81111f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81111f6:	4b16      	ldr	r3, [pc, #88]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111f8:	2200      	movs	r2, #0
 81111fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81111fc:	4b14      	ldr	r3, [pc, #80]	; (8111250 <MX_USART3_UART_Init+0x90>)
 81111fe:	2200      	movs	r2, #0
 8111200:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8111202:	4b13      	ldr	r3, [pc, #76]	; (8111250 <MX_USART3_UART_Init+0x90>)
 8111204:	2200      	movs	r2, #0
 8111206:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8111208:	4811      	ldr	r0, [pc, #68]	; (8111250 <MX_USART3_UART_Init+0x90>)
 811120a:	f7f5 fcc9 	bl	8106ba0 <HAL_UART_Init>
 811120e:	4603      	mov	r3, r0
 8111210:	2b00      	cmp	r3, #0
 8111212:	d001      	beq.n	8111218 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8111214:	f000 fac6 	bl	81117a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8111218:	2100      	movs	r1, #0
 811121a:	480d      	ldr	r0, [pc, #52]	; (8111250 <MX_USART3_UART_Init+0x90>)
 811121c:	f7f6 fdc8 	bl	8107db0 <HAL_UARTEx_SetTxFifoThreshold>
 8111220:	4603      	mov	r3, r0
 8111222:	2b00      	cmp	r3, #0
 8111224:	d001      	beq.n	811122a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8111226:	f000 fabd 	bl	81117a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 811122a:	2100      	movs	r1, #0
 811122c:	4808      	ldr	r0, [pc, #32]	; (8111250 <MX_USART3_UART_Init+0x90>)
 811122e:	f7f6 fdfd 	bl	8107e2c <HAL_UARTEx_SetRxFifoThreshold>
 8111232:	4603      	mov	r3, r0
 8111234:	2b00      	cmp	r3, #0
 8111236:	d001      	beq.n	811123c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8111238:	f000 fab4 	bl	81117a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 811123c:	4804      	ldr	r0, [pc, #16]	; (8111250 <MX_USART3_UART_Init+0x90>)
 811123e:	f7f6 fd7e 	bl	8107d3e <HAL_UARTEx_DisableFifoMode>
 8111242:	4603      	mov	r3, r0
 8111244:	2b00      	cmp	r3, #0
 8111246:	d001      	beq.n	811124c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8111248:	f000 faac 	bl	81117a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 811124c:	bf00      	nop
 811124e:	bd80      	pop	{r7, pc}
 8111250:	10008a1c 	.word	0x10008a1c
 8111254:	40004800 	.word	0x40004800

08111258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8111258:	b580      	push	{r7, lr}
 811125a:	b08c      	sub	sp, #48	; 0x30
 811125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 811125e:	f107 031c 	add.w	r3, r7, #28
 8111262:	2200      	movs	r2, #0
 8111264:	601a      	str	r2, [r3, #0]
 8111266:	605a      	str	r2, [r3, #4]
 8111268:	609a      	str	r2, [r3, #8]
 811126a:	60da      	str	r2, [r3, #12]
 811126c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 811126e:	4b6b      	ldr	r3, [pc, #428]	; (811141c <MX_GPIO_Init+0x1c4>)
 8111270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111274:	4a69      	ldr	r2, [pc, #420]	; (811141c <MX_GPIO_Init+0x1c4>)
 8111276:	f043 0320 	orr.w	r3, r3, #32
 811127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 811127e:	4b67      	ldr	r3, [pc, #412]	; (811141c <MX_GPIO_Init+0x1c4>)
 8111280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111284:	f003 0320 	and.w	r3, r3, #32
 8111288:	61bb      	str	r3, [r7, #24]
 811128a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 811128c:	4b63      	ldr	r3, [pc, #396]	; (811141c <MX_GPIO_Init+0x1c4>)
 811128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111292:	4a62      	ldr	r2, [pc, #392]	; (811141c <MX_GPIO_Init+0x1c4>)
 8111294:	f043 0304 	orr.w	r3, r3, #4
 8111298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 811129c:	4b5f      	ldr	r3, [pc, #380]	; (811141c <MX_GPIO_Init+0x1c4>)
 811129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81112a2:	f003 0304 	and.w	r3, r3, #4
 81112a6:	617b      	str	r3, [r7, #20]
 81112a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81112aa:	4b5c      	ldr	r3, [pc, #368]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81112b0:	4a5a      	ldr	r2, [pc, #360]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112b2:	f043 0301 	orr.w	r3, r3, #1
 81112b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81112ba:	4b58      	ldr	r3, [pc, #352]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81112c0:	f003 0301 	and.w	r3, r3, #1
 81112c4:	613b      	str	r3, [r7, #16]
 81112c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81112c8:	4b54      	ldr	r3, [pc, #336]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81112ce:	4a53      	ldr	r2, [pc, #332]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112d0:	f043 0302 	orr.w	r3, r3, #2
 81112d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81112d8:	4b50      	ldr	r3, [pc, #320]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81112de:	f003 0302 	and.w	r3, r3, #2
 81112e2:	60fb      	str	r3, [r7, #12]
 81112e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81112e6:	4b4d      	ldr	r3, [pc, #308]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81112ec:	4a4b      	ldr	r2, [pc, #300]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112ee:	f043 0308 	orr.w	r3, r3, #8
 81112f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81112f6:	4b49      	ldr	r3, [pc, #292]	; (811141c <MX_GPIO_Init+0x1c4>)
 81112f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81112fc:	f003 0308 	and.w	r3, r3, #8
 8111300:	60bb      	str	r3, [r7, #8]
 8111302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8111304:	4b45      	ldr	r3, [pc, #276]	; (811141c <MX_GPIO_Init+0x1c4>)
 8111306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811130a:	4a44      	ldr	r2, [pc, #272]	; (811141c <MX_GPIO_Init+0x1c4>)
 811130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8111310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8111314:	4b41      	ldr	r3, [pc, #260]	; (811141c <MX_GPIO_Init+0x1c4>)
 8111316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 811131e:	607b      	str	r3, [r7, #4]
 8111320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LC4_CK_Pin|LD3_Pin, GPIO_PIN_RESET);
 8111322:	2200      	movs	r2, #0
 8111324:	f245 0101 	movw	r1, #20481	; 0x5001
 8111328:	483d      	ldr	r0, [pc, #244]	; (8111420 <MX_GPIO_Init+0x1c8>)
 811132a:	f7f2 fa41 	bl	81037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LC3_CK_GPIO_Port, LC3_CK_Pin, GPIO_PIN_RESET);
 811132e:	2200      	movs	r2, #0
 8111330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8111334:	483b      	ldr	r0, [pc, #236]	; (8111424 <MX_GPIO_Init+0x1cc>)
 8111336:	f7f2 fa3b 	bl	81037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LC1_CK_GPIO_Port, LC1_CK_Pin, GPIO_PIN_RESET);
 811133a:	2200      	movs	r2, #0
 811133c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8111340:	4839      	ldr	r0, [pc, #228]	; (8111428 <MX_GPIO_Init+0x1d0>)
 8111342:	f7f2 fa35 	bl	81037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IGN_OUT_Pin|LOW_SIDE_SW_3_Pin|LC2_CK_Pin, GPIO_PIN_RESET);
 8111346:	2200      	movs	r2, #0
 8111348:	2107      	movs	r1, #7
 811134a:	4838      	ldr	r0, [pc, #224]	; (811142c <MX_GPIO_Init+0x1d4>)
 811134c:	f7f2 fa30 	bl	81037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LC2_DIN_Pin */
  GPIO_InitStruct.Pin = LC2_DIN_Pin;
 8111350:	2380      	movs	r3, #128	; 0x80
 8111352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8111354:	2300      	movs	r3, #0
 8111356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8111358:	2300      	movs	r3, #0
 811135a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LC2_DIN_GPIO_Port, &GPIO_InitStruct);
 811135c:	f107 031c 	add.w	r3, r7, #28
 8111360:	4619      	mov	r1, r3
 8111362:	4833      	ldr	r0, [pc, #204]	; (8111430 <MX_GPIO_Init+0x1d8>)
 8111364:	f7f2 f85c 	bl	8103420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LC4_CK_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LC4_CK_Pin|LD3_Pin;
 8111368:	f245 0301 	movw	r3, #20481	; 0x5001
 811136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 811136e:	2301      	movs	r3, #1
 8111370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8111372:	2300      	movs	r3, #0
 8111374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8111376:	2300      	movs	r3, #0
 8111378:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 811137a:	f107 031c 	add.w	r3, r7, #28
 811137e:	4619      	mov	r1, r3
 8111380:	4827      	ldr	r0, [pc, #156]	; (8111420 <MX_GPIO_Init+0x1c8>)
 8111382:	f7f2 f84d 	bl	8103420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LC4_DIN_Pin LC3_DIN_Pin */
  GPIO_InitStruct.Pin = LC4_DIN_Pin|LC3_DIN_Pin;
 8111386:	f44f 6310 	mov.w	r3, #2304	; 0x900
 811138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 811138c:	2300      	movs	r3, #0
 811138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8111390:	2300      	movs	r3, #0
 8111392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8111394:	f107 031c 	add.w	r3, r7, #28
 8111398:	4619      	mov	r1, r3
 811139a:	4821      	ldr	r0, [pc, #132]	; (8111420 <MX_GPIO_Init+0x1c8>)
 811139c:	f7f2 f840 	bl	8103420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LC3_CK_Pin */
  GPIO_InitStruct.Pin = LC3_CK_Pin;
 81113a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81113a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81113a6:	2301      	movs	r3, #1
 81113a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81113aa:	2300      	movs	r3, #0
 81113ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81113ae:	2300      	movs	r3, #0
 81113b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LC3_CK_GPIO_Port, &GPIO_InitStruct);
 81113b2:	f107 031c 	add.w	r3, r7, #28
 81113b6:	4619      	mov	r1, r3
 81113b8:	481a      	ldr	r0, [pc, #104]	; (8111424 <MX_GPIO_Init+0x1cc>)
 81113ba:	f7f2 f831 	bl	8103420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LC1_CK_Pin */
  GPIO_InitStruct.Pin = LC1_CK_Pin;
 81113be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81113c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81113c4:	2301      	movs	r3, #1
 81113c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81113c8:	2300      	movs	r3, #0
 81113ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81113cc:	2300      	movs	r3, #0
 81113ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LC1_CK_GPIO_Port, &GPIO_InitStruct);
 81113d0:	f107 031c 	add.w	r3, r7, #28
 81113d4:	4619      	mov	r1, r3
 81113d6:	4814      	ldr	r0, [pc, #80]	; (8111428 <MX_GPIO_Init+0x1d0>)
 81113d8:	f7f2 f822 	bl	8103420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LC1_DIN_Pin */
  GPIO_InitStruct.Pin = LC1_DIN_Pin;
 81113dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81113e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81113e2:	2300      	movs	r3, #0
 81113e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81113e6:	2300      	movs	r3, #0
 81113e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LC1_DIN_GPIO_Port, &GPIO_InitStruct);
 81113ea:	f107 031c 	add.w	r3, r7, #28
 81113ee:	4619      	mov	r1, r3
 81113f0:	480d      	ldr	r0, [pc, #52]	; (8111428 <MX_GPIO_Init+0x1d0>)
 81113f2:	f7f2 f815 	bl	8103420 <HAL_GPIO_Init>

  /*Configure GPIO pins : IGN_OUT_Pin LOW_SIDE_SW_3_Pin LC2_CK_Pin */
  GPIO_InitStruct.Pin = IGN_OUT_Pin|LOW_SIDE_SW_3_Pin|LC2_CK_Pin;
 81113f6:	2307      	movs	r3, #7
 81113f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81113fa:	2301      	movs	r3, #1
 81113fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81113fe:	2300      	movs	r3, #0
 8111400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8111402:	2300      	movs	r3, #0
 8111404:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8111406:	f107 031c 	add.w	r3, r7, #28
 811140a:	4619      	mov	r1, r3
 811140c:	4807      	ldr	r0, [pc, #28]	; (811142c <MX_GPIO_Init+0x1d4>)
 811140e:	f7f2 f807 	bl	8103420 <HAL_GPIO_Init>

}
 8111412:	bf00      	nop
 8111414:	3730      	adds	r7, #48	; 0x30
 8111416:	46bd      	mov	sp, r7
 8111418:	bd80      	pop	{r7, pc}
 811141a:	bf00      	nop
 811141c:	58024400 	.word	0x58024400
 8111420:	58020400 	.word	0x58020400
 8111424:	58020000 	.word	0x58020000
 8111428:	58020800 	.word	0x58020800
 811142c:	58020c00 	.word	0x58020c00
 8111430:	58021400 	.word	0x58021400

08111434 <Netif_Config>:

/* USER CODE BEGIN 4 */
void Netif_Config(void) {
 8111434:	b5b0      	push	{r4, r5, r7, lr}
 8111436:	b08c      	sub	sp, #48	; 0x30
 8111438:	af04      	add	r7, sp, #16

	/* Create tcp_ip stack thread */
	tcpip_init(NULL, NULL);
 811143a:	2100      	movs	r1, #0
 811143c:	2000      	movs	r0, #0
 811143e:	f7fd ff59 	bl	810f2f4 <tcpip_init>

	IP_ADDR4(&ipaddr, 192, 168, 1, 104); //GNC Board IP
 8111442:	4b1a      	ldr	r3, [pc, #104]	; (81114ac <Netif_Config+0x78>)
 8111444:	4a1a      	ldr	r2, [pc, #104]	; (81114b0 <Netif_Config+0x7c>)
 8111446:	601a      	str	r2, [r3, #0]
	IP_ADDR4(&netmask, 255, 255, 255, 0);
 8111448:	4b1a      	ldr	r3, [pc, #104]	; (81114b4 <Netif_Config+0x80>)
 811144a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 811144e:	601a      	str	r2, [r3, #0]
	IP_ADDR4(&gw, 192, 168, 1, 1);
 8111450:	4b19      	ldr	r3, [pc, #100]	; (81114b8 <Netif_Config+0x84>)
 8111452:	4a1a      	ldr	r2, [pc, #104]	; (81114bc <Netif_Config+0x88>)
 8111454:	601a      	str	r2, [r3, #0]
	/* add the network interface */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 8111456:	4b1a      	ldr	r3, [pc, #104]	; (81114c0 <Netif_Config+0x8c>)
 8111458:	9302      	str	r3, [sp, #8]
 811145a:	4b1a      	ldr	r3, [pc, #104]	; (81114c4 <Netif_Config+0x90>)
 811145c:	9301      	str	r3, [sp, #4]
 811145e:	2300      	movs	r3, #0
 8111460:	9300      	str	r3, [sp, #0]
 8111462:	4b15      	ldr	r3, [pc, #84]	; (81114b8 <Netif_Config+0x84>)
 8111464:	4a13      	ldr	r2, [pc, #76]	; (81114b4 <Netif_Config+0x80>)
 8111466:	4911      	ldr	r1, [pc, #68]	; (81114ac <Netif_Config+0x78>)
 8111468:	4817      	ldr	r0, [pc, #92]	; (81114c8 <Netif_Config+0x94>)
 811146a:	f7fc fcc9 	bl	810de00 <netif_add>
			&ethernet_input);

	/*  Registers the default network interface. */
	netif_set_default(&gnetif);
 811146e:	4816      	ldr	r0, [pc, #88]	; (81114c8 <Netif_Config+0x94>)
 8111470:	f7fc fe74 	bl	810e15c <netif_set_default>

	printf("GSCS-002 CM4 - Network Interface Configured\n");
 8111474:	4815      	ldr	r0, [pc, #84]	; (81114cc <Netif_Config+0x98>)
 8111476:	f001 fca1 	bl	8112dbc <puts>

	ethernet_link_status_updated(&gnetif);
 811147a:	4813      	ldr	r0, [pc, #76]	; (81114c8 <Netif_Config+0x94>)
 811147c:	f7fe fde8 	bl	8110050 <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8111480:	4913      	ldr	r1, [pc, #76]	; (81114d0 <Netif_Config+0x9c>)
 8111482:	4811      	ldr	r0, [pc, #68]	; (81114c8 <Netif_Config+0x94>)
 8111484:	f7fc ff7c 	bl	810e380 <netif_set_link_callback>

	osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0,
 8111488:	4b12      	ldr	r3, [pc, #72]	; (81114d4 <Netif_Config+0xa0>)
 811148a:	1d3c      	adds	r4, r7, #4
 811148c:	461d      	mov	r5, r3
 811148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8111490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8111492:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8111496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE *2);
	osThreadCreate(osThread(EthLink), &gnetif);
 811149a:	1d3b      	adds	r3, r7, #4
 811149c:	490a      	ldr	r1, [pc, #40]	; (81114c8 <Netif_Config+0x94>)
 811149e:	4618      	mov	r0, r3
 81114a0:	f7f6 fd91 	bl	8107fc6 <osThreadCreate>
#endif

}
 81114a4:	bf00      	nop
 81114a6:	3720      	adds	r7, #32
 81114a8:	46bd      	mov	sp, r7
 81114aa:	bdb0      	pop	{r4, r5, r7, pc}
 81114ac:	10008998 	.word	0x10008998
 81114b0:	6801a8c0 	.word	0x6801a8c0
 81114b4:	100089a4 	.word	0x100089a4
 81114b8:	100089a8 	.word	0x100089a8
 81114bc:	0101a8c0 	.word	0x0101a8c0
 81114c0:	0810bab1 	.word	0x0810bab1
 81114c4:	08110705 	.word	0x08110705
 81114c8:	10008964 	.word	0x10008964
 81114cc:	0811690c 	.word	0x0811690c
 81114d0:	08110051 	.word	0x08110051
 81114d4:	08116938 	.word	0x08116938

081114d8 <delay_us>:

// UDP functions over lwIP


void delay_us(uint16_t us) {
 81114d8:	b480      	push	{r7}
 81114da:	b083      	sub	sp, #12
 81114dc:	af00      	add	r7, sp, #0
 81114de:	4603      	mov	r3, r0
 81114e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim15, 0);  // set the counter value a 0
 81114e2:	4b09      	ldr	r3, [pc, #36]	; (8111508 <delay_us+0x30>)
 81114e4:	681b      	ldr	r3, [r3, #0]
 81114e6:	2200      	movs	r2, #0
 81114e8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim15) < us)
 81114ea:	bf00      	nop
 81114ec:	4b06      	ldr	r3, [pc, #24]	; (8111508 <delay_us+0x30>)
 81114ee:	681b      	ldr	r3, [r3, #0]
 81114f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81114f2:	88fb      	ldrh	r3, [r7, #6]
 81114f4:	429a      	cmp	r2, r3
 81114f6:	d3f9      	bcc.n	81114ec <delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 81114f8:	bf00      	nop
 81114fa:	bf00      	nop
 81114fc:	370c      	adds	r7, #12
 81114fe:	46bd      	mov	sp, r7
 8111500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111504:	4770      	bx	lr
 8111506:	bf00      	nop
 8111508:	10008aac 	.word	0x10008aac

0811150c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 811150c:	b480      	push	{r7}
 811150e:	b083      	sub	sp, #12
 8111510:	af00      	add	r7, sp, #0
 8111512:	6078      	str	r0, [r7, #4]

}
 8111514:	bf00      	nop
 8111516:	370c      	adds	r7, #12
 8111518:	46bd      	mov	sp, r7
 811151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811151e:	4770      	bx	lr

08111520 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8111520:	b580      	push	{r7, lr}
 8111522:	b082      	sub	sp, #8
 8111524:	af00      	add	r7, sp, #0
 8111526:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  //MX_LWIP_Init();
  /* USER CODE BEGIN 5 */
	printf("\nGSCS_002 CM4 - Main Task Started\n");
 8111528:	4805      	ldr	r0, [pc, #20]	; (8111540 <StartDefaultTask+0x20>)
 811152a:	f001 fc47 	bl	8112dbc <puts>

	/* Infinite loop */

	Netif_Config();
 811152e:	f7ff ff81 	bl	8111434 <Netif_Config>

	udpClient_connect();
 8111532:	f000 fa69 	bl	8111a08 <udpClient_connect>

	//other tASK SHOULD WAIT THIS POINT, relase the semaphore

	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8111536:	2064      	movs	r0, #100	; 0x64
 8111538:	f7f6 fd91 	bl	810805e <osDelay>
 811153c:	e7fb      	b.n	8111536 <StartDefaultTask+0x16>
 811153e:	bf00      	nop
 8111540:	08116954 	.word	0x08116954

08111544 <StartSens_Acq_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSens_Acq_Task */
void StartSens_Acq_Task(void const * argument)
{
 8111544:	b580      	push	{r7, lr}
 8111546:	b084      	sub	sp, #16
 8111548:	af02      	add	r7, sp, #8
 811154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSens_Acq_Task */

	osDelay(500); //Thermocouple Power-up Time 200 ms, HX711 400 ms
 811154c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8111550:	f7f6 fd85 	bl	810805e <osDelay>

	printf("\nDAQ Task Started\n");
 8111554:	4843      	ldr	r0, [pc, #268]	; (8111664 <StartSens_Acq_Task+0x120>)
 8111556:	f001 fc31 	bl	8112dbc <puts>

	HAL_TIM_Base_Start(&htim15); //timer used for us delay
 811155a:	4843      	ldr	r0, [pc, #268]	; (8111668 <StartSens_Acq_Task+0x124>)
 811155c:	f7f4 f958 	bl	8105810 <HAL_TIM_Base_Start>
	//printf("GSCS-002 CM4 - TIM15 started\n");


	hx711_init(&LOAD_CELL1, LC1_CK_GPIO_Port, LC1_CK_Pin, LC1_DIN_GPIO_Port, LC1_DIN_Pin);
 8111560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8111564:	9300      	str	r3, [sp, #0]
 8111566:	4b41      	ldr	r3, [pc, #260]	; (811166c <StartSens_Acq_Task+0x128>)
 8111568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 811156c:	493f      	ldr	r1, [pc, #252]	; (811166c <StartSens_Acq_Task+0x128>)
 811156e:	4840      	ldr	r0, [pc, #256]	; (8111670 <StartSens_Acq_Task+0x12c>)
 8111570:	f7ff fa1c 	bl	81109ac <hx711_init>
	hx711_init(&LOAD_CELL2, LC2_CK_GPIO_Port, LC2_CK_Pin, LC2_DIN_GPIO_Port, LC2_DIN_Pin);
 8111574:	2380      	movs	r3, #128	; 0x80
 8111576:	9300      	str	r3, [sp, #0]
 8111578:	4b3e      	ldr	r3, [pc, #248]	; (8111674 <StartSens_Acq_Task+0x130>)
 811157a:	2204      	movs	r2, #4
 811157c:	493e      	ldr	r1, [pc, #248]	; (8111678 <StartSens_Acq_Task+0x134>)
 811157e:	483f      	ldr	r0, [pc, #252]	; (811167c <StartSens_Acq_Task+0x138>)
 8111580:	f7ff fa14 	bl	81109ac <hx711_init>
	hx711_init(&LOAD_CELL3, LC3_CK_GPIO_Port, LC3_CK_Pin, LC3_DIN_GPIO_Port, LC3_DIN_Pin);
 8111584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111588:	9300      	str	r3, [sp, #0]
 811158a:	4b3d      	ldr	r3, [pc, #244]	; (8111680 <StartSens_Acq_Task+0x13c>)
 811158c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8111590:	493c      	ldr	r1, [pc, #240]	; (8111684 <StartSens_Acq_Task+0x140>)
 8111592:	483d      	ldr	r0, [pc, #244]	; (8111688 <StartSens_Acq_Task+0x144>)
 8111594:	f7ff fa0a 	bl	81109ac <hx711_init>
	hx711_init(&LOAD_CELL4, LC4_CK_GPIO_Port, LC4_CK_Pin, LC4_DIN_GPIO_Port, LC4_DIN_Pin);
 8111598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 811159c:	9300      	str	r3, [sp, #0]
 811159e:	4b38      	ldr	r3, [pc, #224]	; (8111680 <StartSens_Acq_Task+0x13c>)
 81115a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 81115a4:	4936      	ldr	r1, [pc, #216]	; (8111680 <StartSens_Acq_Task+0x13c>)
 81115a6:	4839      	ldr	r0, [pc, #228]	; (811168c <StartSens_Acq_Task+0x148>)
 81115a8:	f7ff fa00 	bl	81109ac <hx711_init>


	hx711_coef_set(&LOAD_CELL1, -15.0026); // set calibration coefficent
 81115ac:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8111690 <StartSens_Acq_Task+0x14c>
 81115b0:	482f      	ldr	r0, [pc, #188]	; (8111670 <StartSens_Acq_Task+0x12c>)
 81115b2:	f7ff fb55 	bl	8110c60 <hx711_coef_set>
	hx711_coef_set(&LOAD_CELL2, -15.0026); // set calibration coefficent
 81115b6:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8111690 <StartSens_Acq_Task+0x14c>
 81115ba:	4830      	ldr	r0, [pc, #192]	; (811167c <StartSens_Acq_Task+0x138>)
 81115bc:	f7ff fb50 	bl	8110c60 <hx711_coef_set>
	hx711_coef_set(&LOAD_CELL3, -15.0026); // set calibration coefficent
 81115c0:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8111690 <StartSens_Acq_Task+0x14c>
 81115c4:	4830      	ldr	r0, [pc, #192]	; (8111688 <StartSens_Acq_Task+0x144>)
 81115c6:	f7ff fb4b 	bl	8110c60 <hx711_coef_set>
	hx711_coef_set(&LOAD_CELL4, -15.0026); // set calibration coefficent
 81115ca:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8111690 <StartSens_Acq_Task+0x14c>
 81115ce:	482f      	ldr	r0, [pc, #188]	; (811168c <StartSens_Acq_Task+0x148>)
 81115d0:	f7ff fb46 	bl	8110c60 <hx711_coef_set>

	hx711_tare(&LOAD_CELL1, 10); //read offset
 81115d4:	210a      	movs	r1, #10
 81115d6:	4826      	ldr	r0, [pc, #152]	; (8111670 <StartSens_Acq_Task+0x12c>)
 81115d8:	f7ff fab7 	bl	8110b4a <hx711_tare>
	hx711_tare(&LOAD_CELL2, 10); //read offset
 81115dc:	210a      	movs	r1, #10
 81115de:	4827      	ldr	r0, [pc, #156]	; (811167c <StartSens_Acq_Task+0x138>)
 81115e0:	f7ff fab3 	bl	8110b4a <hx711_tare>
	hx711_tare(&LOAD_CELL3, 10); //read offset
 81115e4:	210a      	movs	r1, #10
 81115e6:	4828      	ldr	r0, [pc, #160]	; (8111688 <StartSens_Acq_Task+0x144>)
 81115e8:	f7ff faaf 	bl	8110b4a <hx711_tare>
	hx711_tare(&LOAD_CELL4, 10); //read offset
 81115ec:	210a      	movs	r1, #10
 81115ee:	4827      	ldr	r0, [pc, #156]	; (811168c <StartSens_Acq_Task+0x148>)
 81115f0:	f7ff faab 	bl	8110b4a <hx711_tare>

	printf("GSCS-002 CM4 - HX711 Initialized\n");
 81115f4:	4827      	ldr	r0, [pc, #156]	; (8111694 <StartSens_Acq_Task+0x150>)
 81115f6:	f001 fbe1 	bl	8112dbc <puts>
	// Start ADC Conversion

	/* Infinite loop */
	for (;;) {

		osDelay(100);
 81115fa:	2064      	movs	r0, #100	; 0x64
 81115fc:	f7f6 fd2f 	bl	810805e <osDelay>

		thrust[0] = hx711_weight(&LOAD_CELL1,1);
 8111600:	2101      	movs	r1, #1
 8111602:	481b      	ldr	r0, [pc, #108]	; (8111670 <StartSens_Acq_Task+0x12c>)
 8111604:	f7ff fadd 	bl	8110bc2 <hx711_weight>
 8111608:	eef0 7a40 	vmov.f32	s15, s0
 811160c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8111610:	ee17 2a90 	vmov	r2, s15
 8111614:	4b20      	ldr	r3, [pc, #128]	; (8111698 <StartSens_Acq_Task+0x154>)
 8111616:	601a      	str	r2, [r3, #0]
		thrust[1] = hx711_weight(&LOAD_CELL2,1);
 8111618:	2101      	movs	r1, #1
 811161a:	4818      	ldr	r0, [pc, #96]	; (811167c <StartSens_Acq_Task+0x138>)
 811161c:	f7ff fad1 	bl	8110bc2 <hx711_weight>
 8111620:	eef0 7a40 	vmov.f32	s15, s0
 8111624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8111628:	ee17 2a90 	vmov	r2, s15
 811162c:	4b1a      	ldr	r3, [pc, #104]	; (8111698 <StartSens_Acq_Task+0x154>)
 811162e:	605a      	str	r2, [r3, #4]
		thrust[2] = hx711_weight(&LOAD_CELL3,1);
 8111630:	2101      	movs	r1, #1
 8111632:	4815      	ldr	r0, [pc, #84]	; (8111688 <StartSens_Acq_Task+0x144>)
 8111634:	f7ff fac5 	bl	8110bc2 <hx711_weight>
 8111638:	eef0 7a40 	vmov.f32	s15, s0
 811163c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8111640:	ee17 2a90 	vmov	r2, s15
 8111644:	4b14      	ldr	r3, [pc, #80]	; (8111698 <StartSens_Acq_Task+0x154>)
 8111646:	609a      	str	r2, [r3, #8]
		thrust[3] = hx711_weight(&LOAD_CELL4,1);
 8111648:	2101      	movs	r1, #1
 811164a:	4810      	ldr	r0, [pc, #64]	; (811168c <StartSens_Acq_Task+0x148>)
 811164c:	f7ff fab9 	bl	8110bc2 <hx711_weight>
 8111650:	eef0 7a40 	vmov.f32	s15, s0
 8111654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8111658:	ee17 2a90 	vmov	r2, s15
 811165c:	4b0e      	ldr	r3, [pc, #56]	; (8111698 <StartSens_Acq_Task+0x154>)
 811165e:	60da      	str	r2, [r3, #12]
		osDelay(100);
 8111660:	e7cb      	b.n	81115fa <StartSens_Acq_Task+0xb6>
 8111662:	bf00      	nop
 8111664:	08116978 	.word	0x08116978
 8111668:	10008aac 	.word	0x10008aac
 811166c:	58020800 	.word	0x58020800
 8111670:	100089ac 	.word	0x100089ac
 8111674:	58021400 	.word	0x58021400
 8111678:	58020c00 	.word	0x58020c00
 811167c:	10008b88 	.word	0x10008b88
 8111680:	58020400 	.word	0x58020400
 8111684:	58020000 	.word	0x58020000
 8111688:	10008c00 	.word	0x10008c00
 811168c:	10008afc 	.word	0x10008afc
 8111690:	c1700aa6 	.word	0xc1700aa6
 8111694:	0811698c 	.word	0x0811698c
 8111698:	10008ba0 	.word	0x10008ba0

0811169c <Start_CommandRX_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CommandRX_Task */
void Start_CommandRX_Task(void const * argument)
{
 811169c:	b580      	push	{r7, lr}
 811169e:	b082      	sub	sp, #8
 81116a0:	af00      	add	r7, sp, #0
 81116a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CommandRX_Task */


	//Before entering the loop the ground station must be initialized and sent a udp initialization command
	/* Infinite loop */
	osDelay(500);
 81116a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81116a8:	f7f6 fcd9 	bl	810805e <osDelay>
	printf("TC Task Started\n");
 81116ac:	4803      	ldr	r0, [pc, #12]	; (81116bc <Start_CommandRX_Task+0x20>)
 81116ae:	f001 fb85 	bl	8112dbc <puts>

	for (;;) {
		osDelay(100);
 81116b2:	2064      	movs	r0, #100	; 0x64
 81116b4:	f7f6 fcd3 	bl	810805e <osDelay>
 81116b8:	e7fb      	b.n	81116b2 <Start_CommandRX_Task+0x16>
 81116ba:	bf00      	nop
 81116bc:	081169b0 	.word	0x081169b0

081116c0 <Start_TelemetryTX_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_TelemetryTX_Task */
void Start_TelemetryTX_Task(void const * argument)
{
 81116c0:	b5b0      	push	{r4, r5, r7, lr}
 81116c2:	b098      	sub	sp, #96	; 0x60
 81116c4:	af04      	add	r7, sp, #16
 81116c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_TelemetryTX_Task */
	/* Infinite loop */
	printf("TM Task Started\n");
 81116c8:	4823      	ldr	r0, [pc, #140]	; (8111758 <Start_TelemetryTX_Task+0x98>)
 81116ca:	f001 fb77 	bl	8112dbc <puts>

	primaryHdr TM_hdr;
	space_packet TM_pkt;

	//define SPP Packet Header structure
	TM_hdr.APID = 5; //application id
 81116ce:	2305      	movs	r3, #5
 81116d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	TM_hdr.pkt_ver = 0;
 81116d2:	2300      	movs	r3, #0
 81116d4:	633b      	str	r3, [r7, #48]	; 0x30
	TM_hdr.secHdrFlag = 0;
 81116d6:	2300      	movs	r3, #0
 81116d8:	63bb      	str	r3, [r7, #56]	; 0x38
	TM_hdr.type = 0;
 81116da:	2300      	movs	r3, #0
 81116dc:	637b      	str	r3, [r7, #52]	; 0x34
	TM_hdr.data_len = SPP_BYTE_DATA; //bytes in sec. header + data minus one (0 + 6) - 1
 81116de:	2304      	movs	r3, #4
 81116e0:	64bb      	str	r3, [r7, #72]	; 0x48
	TM_hdr.seqFlag = 3;
 81116e2:	2303      	movs	r3, #3
 81116e4:	643b      	str	r3, [r7, #64]	; 0x40

    //put the header into the packet
	TM_pkt.pHdr = TM_hdr;
 81116e6:	f107 0410 	add.w	r4, r7, #16
 81116ea:	f107 0530 	add.w	r5, r7, #48	; 0x30
 81116ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81116f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81116f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81116f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	unsigned int ccsds_counter = 0;
 81116fa:	2300      	movs	r3, #0
 81116fc:	64fb      	str	r3, [r7, #76]	; 0x4c

	myfloat SPP_Thrust;


	for (;;) {
		osDelay(100); // 1 kHz UDP Telemetry
 81116fe:	2064      	movs	r0, #100	; 0x64
 8111700:	f7f6 fcad 	bl	810805e <osDelay>

		 TM_pkt.data[0] = thrust[0] >> 24;
 8111704:	4b15      	ldr	r3, [pc, #84]	; (811175c <Start_TelemetryTX_Task+0x9c>)
 8111706:	681b      	ldr	r3, [r3, #0]
 8111708:	161b      	asrs	r3, r3, #24
 811170a:	b2db      	uxtb	r3, r3
 811170c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		 TM_pkt.data[1] = thrust[0] >> 16;
 8111710:	4b12      	ldr	r3, [pc, #72]	; (811175c <Start_TelemetryTX_Task+0x9c>)
 8111712:	681b      	ldr	r3, [r3, #0]
 8111714:	141b      	asrs	r3, r3, #16
 8111716:	b2db      	uxtb	r3, r3
 8111718:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		 TM_pkt.data[2] = thrust[0] >> 8;
 811171c:	4b0f      	ldr	r3, [pc, #60]	; (811175c <Start_TelemetryTX_Task+0x9c>)
 811171e:	681b      	ldr	r3, [r3, #0]
 8111720:	121b      	asrs	r3, r3, #8
 8111722:	b2db      	uxtb	r3, r3
 8111724:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		 TM_pkt.data[3] = thrust[0];
 8111728:	4b0c      	ldr	r3, [pc, #48]	; (811175c <Start_TelemetryTX_Task+0x9c>)
 811172a:	681b      	ldr	r3, [r3, #0]
 811172c:	b2db      	uxtb	r3, r3
 811172e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		 TM_pkt.pHdr.seqCount = ccsds_counter;
 8111732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8111734:	627b      	str	r3, [r7, #36]	; 0x24

		 pack_SPP_TM(TM_pkt);
 8111736:	466c      	mov	r4, sp
 8111738:	f107 0320 	add.w	r3, r7, #32
 811173c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 811173e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8111742:	f107 0310 	add.w	r3, r7, #16
 8111746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8111748:	f000 f996 	bl	8111a78 <pack_SPP_TM>

		 udpClient_send_spp();
 811174c:	f000 f928 	bl	81119a0 <udpClient_send_spp>

		 ccsds_counter++;
 8111750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8111752:	3301      	adds	r3, #1
 8111754:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (;;) {
 8111756:	e7d2      	b.n	81116fe <Start_TelemetryTX_Task+0x3e>
 8111758:	081169c0 	.word	0x081169c0
 811175c:	10008ba0 	.word	0x10008ba0

08111760 <Start_ActuatorsControl_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_ActuatorsControl_Task */
void Start_ActuatorsControl_Task(void const * argument)
{
 8111760:	b580      	push	{r7, lr}
 8111762:	b082      	sub	sp, #8
 8111764:	af00      	add	r7, sp, #0
 8111766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ActuatorsControl_Task */

	osDelay(1000);
 8111768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 811176c:	f7f6 fc77 	bl	810805e <osDelay>

	printf("Actuator Control Task Started\n");
 8111770:	4803      	ldr	r0, [pc, #12]	; (8111780 <Start_ActuatorsControl_Task+0x20>)
 8111772:	f001 fb23 	bl	8112dbc <puts>

	for (;;) {

		osDelay(100);
 8111776:	2064      	movs	r0, #100	; 0x64
 8111778:	f7f6 fc71 	bl	810805e <osDelay>
 811177c:	e7fb      	b.n	8111776 <Start_ActuatorsControl_Task+0x16>
 811177e:	bf00      	nop
 8111780:	081169d0 	.word	0x081169d0

08111784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8111784:	b580      	push	{r7, lr}
 8111786:	b082      	sub	sp, #8
 8111788:	af00      	add	r7, sp, #0
 811178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 811178c:	687b      	ldr	r3, [r7, #4]
 811178e:	681b      	ldr	r3, [r3, #0]
 8111790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8111794:	d101      	bne.n	811179a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8111796:	f7ef fe37 	bl	8101408 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 811179a:	bf00      	nop
 811179c:	3708      	adds	r7, #8
 811179e:	46bd      	mov	sp, r7
 81117a0:	bd80      	pop	{r7, pc}
	...

081117a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81117a4:	b580      	push	{r7, lr}
 81117a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error handler called\n");
 81117a8:	4802      	ldr	r0, [pc, #8]	; (81117b4 <Error_Handler+0x10>)
 81117aa:	f001 fb07 	bl	8112dbc <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 81117ae:	b672      	cpsid	i
}
 81117b0:	bf00      	nop
	__disable_irq();
	while (1) {
 81117b2:	e7fe      	b.n	81117b2 <Error_Handler+0xe>
 81117b4:	081169f0 	.word	0x081169f0

081117b8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 81117b8:	b580      	push	{r7, lr}
 81117ba:	b082      	sub	sp, #8
 81117bc:	af00      	add	r7, sp, #0
 81117be:	6078      	str	r0, [r7, #4]
	gHuart = huart;
 81117c0:	4a07      	ldr	r2, [pc, #28]	; (81117e0 <RetargetInit+0x28>)
 81117c2:	687b      	ldr	r3, [r7, #4]
 81117c4:	6013      	str	r3, [r2, #0]

	/* Disable I/O buffering for STDOUT stream, so that
	 * chars are sent out as soon as they are printed. */
	setvbuf(stdout, NULL, _IONBF, 0);
 81117c6:	4b07      	ldr	r3, [pc, #28]	; (81117e4 <RetargetInit+0x2c>)
 81117c8:	681b      	ldr	r3, [r3, #0]
 81117ca:	6898      	ldr	r0, [r3, #8]
 81117cc:	2300      	movs	r3, #0
 81117ce:	2202      	movs	r2, #2
 81117d0:	2100      	movs	r1, #0
 81117d2:	f001 fbb5 	bl	8112f40 <setvbuf>
}
 81117d6:	bf00      	nop
 81117d8:	3708      	adds	r7, #8
 81117da:	46bd      	mov	sp, r7
 81117dc:	bd80      	pop	{r7, pc}
 81117de:	bf00      	nop
 81117e0:	10008c18 	.word	0x10008c18
 81117e4:	1000002c 	.word	0x1000002c

081117e8 <_isatty>:

int _isatty(int fd) {
 81117e8:	b480      	push	{r7}
 81117ea:	b083      	sub	sp, #12
 81117ec:	af00      	add	r7, sp, #0
 81117ee:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 81117f0:	687b      	ldr	r3, [r7, #4]
 81117f2:	2b00      	cmp	r3, #0
 81117f4:	db04      	blt.n	8111800 <_isatty+0x18>
 81117f6:	687b      	ldr	r3, [r7, #4]
 81117f8:	2b02      	cmp	r3, #2
 81117fa:	dc01      	bgt.n	8111800 <_isatty+0x18>
		return 1;
 81117fc:	2301      	movs	r3, #1
 81117fe:	e003      	b.n	8111808 <_isatty+0x20>

	errno = EBADF;
 8111800:	4b04      	ldr	r3, [pc, #16]	; (8111814 <_isatty+0x2c>)
 8111802:	2209      	movs	r2, #9
 8111804:	601a      	str	r2, [r3, #0]
	return 0;
 8111806:	2300      	movs	r3, #0
}
 8111808:	4618      	mov	r0, r3
 811180a:	370c      	adds	r7, #12
 811180c:	46bd      	mov	sp, r7
 811180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111812:	4770      	bx	lr
 8111814:	100087a8 	.word	0x100087a8

08111818 <_write>:

int _write(int fd, char *ptr, int len) {
 8111818:	b580      	push	{r7, lr}
 811181a:	b086      	sub	sp, #24
 811181c:	af00      	add	r7, sp, #0
 811181e:	60f8      	str	r0, [r7, #12]
 8111820:	60b9      	str	r1, [r7, #8]
 8111822:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8111824:	68fb      	ldr	r3, [r7, #12]
 8111826:	2b01      	cmp	r3, #1
 8111828:	d002      	beq.n	8111830 <_write+0x18>
 811182a:	68fb      	ldr	r3, [r7, #12]
 811182c:	2b02      	cmp	r3, #2
 811182e:	d111      	bne.n	8111854 <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8111830:	4b0d      	ldr	r3, [pc, #52]	; (8111868 <_write+0x50>)
 8111832:	6818      	ldr	r0, [r3, #0]
 8111834:	687b      	ldr	r3, [r7, #4]
 8111836:	b29a      	uxth	r2, r3
 8111838:	f04f 33ff 	mov.w	r3, #4294967295
 811183c:	68b9      	ldr	r1, [r7, #8]
 811183e:	f7f5 f9ff 	bl	8106c40 <HAL_UART_Transmit>
 8111842:	4603      	mov	r3, r0
 8111844:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8111846:	7dfb      	ldrb	r3, [r7, #23]
 8111848:	2b00      	cmp	r3, #0
 811184a:	d101      	bne.n	8111850 <_write+0x38>
			return len;
 811184c:	687b      	ldr	r3, [r7, #4]
 811184e:	e006      	b.n	811185e <_write+0x46>
		else
			return EIO;
 8111850:	2305      	movs	r3, #5
 8111852:	e004      	b.n	811185e <_write+0x46>
	}
	errno = EBADF;
 8111854:	4b05      	ldr	r3, [pc, #20]	; (811186c <_write+0x54>)
 8111856:	2209      	movs	r2, #9
 8111858:	601a      	str	r2, [r3, #0]
	return -1;
 811185a:	f04f 33ff 	mov.w	r3, #4294967295
}
 811185e:	4618      	mov	r0, r3
 8111860:	3718      	adds	r7, #24
 8111862:	46bd      	mov	sp, r7
 8111864:	bd80      	pop	{r7, pc}
 8111866:	bf00      	nop
 8111868:	10008c18 	.word	0x10008c18
 811186c:	100087a8 	.word	0x100087a8

08111870 <_close>:

int _close(int fd) {
 8111870:	b480      	push	{r7}
 8111872:	b083      	sub	sp, #12
 8111874:	af00      	add	r7, sp, #0
 8111876:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8111878:	687b      	ldr	r3, [r7, #4]
 811187a:	2b00      	cmp	r3, #0
 811187c:	db04      	blt.n	8111888 <_close+0x18>
 811187e:	687b      	ldr	r3, [r7, #4]
 8111880:	2b02      	cmp	r3, #2
 8111882:	dc01      	bgt.n	8111888 <_close+0x18>
		return 0;
 8111884:	2300      	movs	r3, #0
 8111886:	e004      	b.n	8111892 <_close+0x22>

	errno = EBADF;
 8111888:	4b05      	ldr	r3, [pc, #20]	; (81118a0 <_close+0x30>)
 811188a:	2209      	movs	r2, #9
 811188c:	601a      	str	r2, [r3, #0]
	return -1;
 811188e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8111892:	4618      	mov	r0, r3
 8111894:	370c      	adds	r7, #12
 8111896:	46bd      	mov	sp, r7
 8111898:	f85d 7b04 	ldr.w	r7, [sp], #4
 811189c:	4770      	bx	lr
 811189e:	bf00      	nop
 81118a0:	100087a8 	.word	0x100087a8

081118a4 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 81118a4:	b480      	push	{r7}
 81118a6:	b085      	sub	sp, #20
 81118a8:	af00      	add	r7, sp, #0
 81118aa:	60f8      	str	r0, [r7, #12]
 81118ac:	60b9      	str	r1, [r7, #8]
 81118ae:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 81118b0:	4b05      	ldr	r3, [pc, #20]	; (81118c8 <_lseek+0x24>)
 81118b2:	2209      	movs	r2, #9
 81118b4:	601a      	str	r2, [r3, #0]
	return -1;
 81118b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 81118ba:	4618      	mov	r0, r3
 81118bc:	3714      	adds	r7, #20
 81118be:	46bd      	mov	sp, r7
 81118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81118c4:	4770      	bx	lr
 81118c6:	bf00      	nop
 81118c8:	100087a8 	.word	0x100087a8

081118cc <_read>:

int _read(int fd, char *ptr, int len) {
 81118cc:	b580      	push	{r7, lr}
 81118ce:	b086      	sub	sp, #24
 81118d0:	af00      	add	r7, sp, #0
 81118d2:	60f8      	str	r0, [r7, #12]
 81118d4:	60b9      	str	r1, [r7, #8]
 81118d6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 81118d8:	68fb      	ldr	r3, [r7, #12]
 81118da:	2b00      	cmp	r3, #0
 81118dc:	d110      	bne.n	8111900 <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 81118de:	4b0d      	ldr	r3, [pc, #52]	; (8111914 <_read+0x48>)
 81118e0:	6818      	ldr	r0, [r3, #0]
 81118e2:	f04f 33ff 	mov.w	r3, #4294967295
 81118e6:	2201      	movs	r2, #1
 81118e8:	68b9      	ldr	r1, [r7, #8]
 81118ea:	f7f5 fa3f 	bl	8106d6c <HAL_UART_Receive>
 81118ee:	4603      	mov	r3, r0
 81118f0:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 81118f2:	7dfb      	ldrb	r3, [r7, #23]
 81118f4:	2b00      	cmp	r3, #0
 81118f6:	d101      	bne.n	81118fc <_read+0x30>
			return 1;
 81118f8:	2301      	movs	r3, #1
 81118fa:	e006      	b.n	811190a <_read+0x3e>
		else
			return EIO;
 81118fc:	2305      	movs	r3, #5
 81118fe:	e004      	b.n	811190a <_read+0x3e>
	}
	errno = EBADF;
 8111900:	4b05      	ldr	r3, [pc, #20]	; (8111918 <_read+0x4c>)
 8111902:	2209      	movs	r2, #9
 8111904:	601a      	str	r2, [r3, #0]
	return -1;
 8111906:	f04f 33ff 	mov.w	r3, #4294967295
}
 811190a:	4618      	mov	r0, r3
 811190c:	3718      	adds	r7, #24
 811190e:	46bd      	mov	sp, r7
 8111910:	bd80      	pop	{r7, pc}
 8111912:	bf00      	nop
 8111914:	10008c18 	.word	0x10008c18
 8111918:	100087a8 	.word	0x100087a8

0811191c <_fstat>:

int _fstat(int fd, struct stat *st) {
 811191c:	b480      	push	{r7}
 811191e:	b083      	sub	sp, #12
 8111920:	af00      	add	r7, sp, #0
 8111922:	6078      	str	r0, [r7, #4]
 8111924:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8111926:	687b      	ldr	r3, [r7, #4]
 8111928:	2b00      	cmp	r3, #0
 811192a:	db08      	blt.n	811193e <_fstat+0x22>
 811192c:	687b      	ldr	r3, [r7, #4]
 811192e:	2b02      	cmp	r3, #2
 8111930:	dc05      	bgt.n	811193e <_fstat+0x22>
		st->st_mode = S_IFCHR;
 8111932:	683b      	ldr	r3, [r7, #0]
 8111934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8111938:	605a      	str	r2, [r3, #4]
		return 0;
 811193a:	2300      	movs	r3, #0
 811193c:	e003      	b.n	8111946 <_fstat+0x2a>
	}

	errno = EBADF;
 811193e:	4b05      	ldr	r3, [pc, #20]	; (8111954 <_fstat+0x38>)
 8111940:	2209      	movs	r2, #9
 8111942:	601a      	str	r2, [r3, #0]
	return 0;
 8111944:	2300      	movs	r3, #0
}
 8111946:	4618      	mov	r0, r3
 8111948:	370c      	adds	r7, #12
 811194a:	46bd      	mov	sp, r7
 811194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111950:	4770      	bx	lr
 8111952:	bf00      	nop
 8111954:	100087a8 	.word	0x100087a8

08111958 <udp_receive_callback>:
uint8_t GATEWAY_ADDRESS[4];

ip_addr_t SERVER_ipaddr;

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8111958:	b580      	push	{r7, lr}
 811195a:	b086      	sub	sp, #24
 811195c:	af00      	add	r7, sp, #0
 811195e:	60f8      	str	r0, [r7, #12]
 8111960:	60b9      	str	r1, [r7, #8]
 8111962:	607a      	str	r2, [r7, #4]
 8111964:	603b      	str	r3, [r7, #0]

	//Verify the data dimension
	int RX_COMMAND_LENGHT = (int) p->len;
 8111966:	687b      	ldr	r3, [r7, #4]
 8111968:	895b      	ldrh	r3, [r3, #10]
 811196a:	617b      	str	r3, [r7, #20]

	if (RX_COMMAND_LENGHT == 8)
 811196c:	697b      	ldr	r3, [r7, #20]
 811196e:	2b08      	cmp	r3, #8
 8111970:	d107      	bne.n	8111982 <udp_receive_callback+0x2a>
		/* Copy the data from the pbuf */
		strncpy(UDP_RX_BUFFER, (char*) p->payload, 8);
 8111972:	687b      	ldr	r3, [r7, #4]
 8111974:	685b      	ldr	r3, [r3, #4]
 8111976:	2208      	movs	r2, #8
 8111978:	4619      	mov	r1, r3
 811197a:	4807      	ldr	r0, [pc, #28]	; (8111998 <udp_receive_callback+0x40>)
 811197c:	f001 fbe9 	bl	8113152 <strncpy>
 8111980:	e003      	b.n	811198a <udp_receive_callback+0x32>

	else {
		printf("Command Lenght Error : %d \n", RX_COMMAND_LENGHT);
 8111982:	6979      	ldr	r1, [r7, #20]
 8111984:	4805      	ldr	r0, [pc, #20]	; (811199c <udp_receive_callback+0x44>)
 8111986:	f001 f993 	bl	8112cb0 <iprintf>
	}
	/* Free receive pbuf */

	pbuf_free(p);
 811198a:	6878      	ldr	r0, [r7, #4]
 811198c:	f7fd f84a 	bl	810ea24 <pbuf_free>
}
 8111990:	bf00      	nop
 8111992:	3718      	adds	r7, #24
 8111994:	46bd      	mov	sp, r7
 8111996:	bd80      	pop	{r7, pc}
 8111998:	10008c54 	.word	0x10008c54
 811199c:	08116a08 	.word	0x08116a08

081119a0 <udpClient_send_spp>:

void udpClient_send_spp() {
 81119a0:	b580      	push	{r7, lr}
 81119a2:	b082      	sub	sp, #8
 81119a4:	af00      	add	r7, sp, #0

	struct pbuf *txBuf;

	/* allocate pbuf from pool*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT, SPP_TM_len, PBUF_RAM);
 81119a6:	4b14      	ldr	r3, [pc, #80]	; (81119f8 <udpClient_send_spp+0x58>)
 81119a8:	781b      	ldrb	r3, [r3, #0]
 81119aa:	b29b      	uxth	r3, r3
 81119ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 81119b0:	4619      	mov	r1, r3
 81119b2:	2036      	movs	r0, #54	; 0x36
 81119b4:	f7fc fd54 	bl	810e460 <pbuf_alloc>
 81119b8:	6078      	str	r0, [r7, #4]

	if (txBuf != NULL) {
 81119ba:	687b      	ldr	r3, [r7, #4]
 81119bc:	2b00      	cmp	r3, #0
 81119be:	d016      	beq.n	81119ee <udpClient_send_spp+0x4e>
		/* copy data to pbuf */
		pbuf_take(txBuf, &UDP_TX_BUFFER, SPP_TM_len);
 81119c0:	4b0d      	ldr	r3, [pc, #52]	; (81119f8 <udpClient_send_spp+0x58>)
 81119c2:	781b      	ldrb	r3, [r3, #0]
 81119c4:	b29b      	uxth	r3, r3
 81119c6:	461a      	mov	r2, r3
 81119c8:	490c      	ldr	r1, [pc, #48]	; (81119fc <udpClient_send_spp+0x5c>)
 81119ca:	6878      	ldr	r0, [r7, #4]
 81119cc:	f7fd fa30 	bl	810ee30 <pbuf_take>

		/* send udp data */
		if ((udp_send(upcb, txBuf)) == ERR_OK) {
 81119d0:	4b0b      	ldr	r3, [pc, #44]	; (8111a00 <udpClient_send_spp+0x60>)
 81119d2:	681b      	ldr	r3, [r3, #0]
 81119d4:	6879      	ldr	r1, [r7, #4]
 81119d6:	4618      	mov	r0, r3
 81119d8:	f7fd fff2 	bl	810f9c0 <udp_send>
 81119dc:	4603      	mov	r3, r0
 81119de:	2b00      	cmp	r3, #0
 81119e0:	d002      	beq.n	81119e8 <udpClient_send_spp+0x48>
		} else
			printf("Error Sending UDP Packet\n");
 81119e2:	4808      	ldr	r0, [pc, #32]	; (8111a04 <udpClient_send_spp+0x64>)
 81119e4:	f001 f9ea 	bl	8112dbc <puts>

		/* free pbuf */
		pbuf_free(txBuf);
 81119e8:	6878      	ldr	r0, [r7, #4]
 81119ea:	f7fd f81b 	bl	810ea24 <pbuf_free>
	}
}
 81119ee:	bf00      	nop
 81119f0:	3708      	adds	r7, #8
 81119f2:	46bd      	mov	sp, r7
 81119f4:	bd80      	pop	{r7, pc}
 81119f6:	bf00      	nop
 81119f8:	10005c04 	.word	0x10005c04
 81119fc:	10008c20 	.word	0x10008c20
 8111a00:	10008c1c 	.word	0x10008c1c
 8111a04:	08116a24 	.word	0x08116a24

08111a08 <udpClient_connect>:

void udpClient_connect(void) {
 8111a08:	b580      	push	{r7, lr}
 8111a0a:	af00      	add	r7, sp, #0

	//SERVER STATIC IP
	IP_ADDR4(&SERVER_ipaddr, 192, 168, 1, 100);
 8111a0c:	4b14      	ldr	r3, [pc, #80]	; (8111a60 <udpClient_connect+0x58>)
 8111a0e:	4a15      	ldr	r2, [pc, #84]	; (8111a64 <udpClient_connect+0x5c>)
 8111a10:	601a      	str	r2, [r3, #0]
	//IP_ADDR4(&SERVER_ipaddr, 192, 168, 1, 103);

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8111a12:	f7fe fad5 	bl	810ffc0 <udp_new>
 8111a16:	4603      	mov	r3, r0
 8111a18:	4a13      	ldr	r2, [pc, #76]	; (8111a68 <udpClient_connect+0x60>)
 8111a1a:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */

	if (udp_bind(upcb, &ipaddr, 50000) == ERR_USE)
 8111a1c:	4b12      	ldr	r3, [pc, #72]	; (8111a68 <udpClient_connect+0x60>)
 8111a1e:	681b      	ldr	r3, [r3, #0]
 8111a20:	f24c 3250 	movw	r2, #50000	; 0xc350
 8111a24:	4911      	ldr	r1, [pc, #68]	; (8111a6c <udpClient_connect+0x64>)
 8111a26:	4618      	mov	r0, r3
 8111a28:	f7fe f9b4 	bl	810fd94 <udp_bind>
 8111a2c:	4603      	mov	r3, r0
 8111a2e:	f113 0f08 	cmn.w	r3, #8
 8111a32:	d103      	bne.n	8111a3c <udpClient_connect+0x34>
		printf("Error binding UDP1\n");
 8111a34:	480e      	ldr	r0, [pc, #56]	; (8111a70 <udpClient_connect+0x68>)
 8111a36:	f001 f9c1 	bl	8112dbc <puts>
 8111a3a:	e007      	b.n	8111a4c <udpClient_connect+0x44>
	else
		//printf("UDP module bind on Port 50000 for Telemetry TX\n");

	/* configure destination IP address and port for telemetry server */
	udp_connect(upcb, &SERVER_ipaddr, 10015);
 8111a3c:	4b0a      	ldr	r3, [pc, #40]	; (8111a68 <udpClient_connect+0x60>)
 8111a3e:	681b      	ldr	r3, [r3, #0]
 8111a40:	f242 721f 	movw	r2, #10015	; 0x271f
 8111a44:	4906      	ldr	r1, [pc, #24]	; (8111a60 <udpClient_connect+0x58>)
 8111a46:	4618      	mov	r0, r3
 8111a48:	f7fe fa2c 	bl	810fea4 <udp_connect>

	//register udp receiver callback on upcb2
	udp_recv(upcb, udp_receive_callback, NULL);
 8111a4c:	4b06      	ldr	r3, [pc, #24]	; (8111a68 <udpClient_connect+0x60>)
 8111a4e:	681b      	ldr	r3, [r3, #0]
 8111a50:	2200      	movs	r2, #0
 8111a52:	4908      	ldr	r1, [pc, #32]	; (8111a74 <udpClient_connect+0x6c>)
 8111a54:	4618      	mov	r0, r3
 8111a56:	f7fe fa93 	bl	810ff80 <udp_recv>

}
 8111a5a:	bf00      	nop
 8111a5c:	bd80      	pop	{r7, pc}
 8111a5e:	bf00      	nop
 8111a60:	10008c88 	.word	0x10008c88
 8111a64:	6401a8c0 	.word	0x6401a8c0
 8111a68:	10008c1c 	.word	0x10008c1c
 8111a6c:	10008998 	.word	0x10008998
 8111a70:	08116a40 	.word	0x08116a40
 8111a74:	08111959 	.word	0x08111959

08111a78 <pack_SPP_TM>:

	else {}

}

void pack_SPP_TM(space_packet tm_pkt) {
 8111a78:	b084      	sub	sp, #16
 8111a7a:	b480      	push	{r7}
 8111a7c:	b083      	sub	sp, #12
 8111a7e:	af00      	add	r7, sp, #0
 8111a80:	f107 0c10 	add.w	ip, r7, #16
 8111a84:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//take data from space packet struct and put it in an ordered char buffer
	 //    TM_PKT --> UDP_TX_BUFFER
	 //calculate packet lenght from datalenght -> SPP_TM_len
	 SPP_TM_len = tm_pkt.pHdr.data_len + 6;// total lenght is size of data + size of primary hdr
 8111a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111a8a:	b2db      	uxtb	r3, r3
 8111a8c:	3306      	adds	r3, #6
 8111a8e:	b2da      	uxtb	r2, r3
 8111a90:	4b1b      	ldr	r3, [pc, #108]	; (8111b00 <pack_SPP_TM+0x88>)
 8111a92:	701a      	strb	r2, [r3, #0]

	 //copy pkt hdr into udp tx buffer
	 UDP_TX_BUFFER[0] = 0;
 8111a94:	4b1b      	ldr	r3, [pc, #108]	; (8111b04 <pack_SPP_TM+0x8c>)
 8111a96:	2200      	movs	r2, #0
 8111a98:	701a      	strb	r2, [r3, #0]
	 UDP_TX_BUFFER[1] = 5;
 8111a9a:	4b1a      	ldr	r3, [pc, #104]	; (8111b04 <pack_SPP_TM+0x8c>)
 8111a9c:	2205      	movs	r2, #5
 8111a9e:	705a      	strb	r2, [r3, #1]
	 UDP_TX_BUFFER[2] = (3 << 6 | (tm_pkt.pHdr.seqCount >> 4));
 8111aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8111aa2:	091b      	lsrs	r3, r3, #4
 8111aa4:	b2db      	uxtb	r3, r3
 8111aa6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8111aaa:	b2da      	uxtb	r2, r3
 8111aac:	4b15      	ldr	r3, [pc, #84]	; (8111b04 <pack_SPP_TM+0x8c>)
 8111aae:	709a      	strb	r2, [r3, #2]
	 UDP_TX_BUFFER[3] =  (tm_pkt.pHdr.seqCount) << 8;
 8111ab0:	4b14      	ldr	r3, [pc, #80]	; (8111b04 <pack_SPP_TM+0x8c>)
 8111ab2:	2200      	movs	r2, #0
 8111ab4:	70da      	strb	r2, [r3, #3]
	 UDP_TX_BUFFER[4] = 0;
 8111ab6:	4b13      	ldr	r3, [pc, #76]	; (8111b04 <pack_SPP_TM+0x8c>)
 8111ab8:	2200      	movs	r2, #0
 8111aba:	711a      	strb	r2, [r3, #4]
	 UDP_TX_BUFFER[5] = tm_pkt.pHdr.data_len;
 8111abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111abe:	b2da      	uxtb	r2, r3
 8111ac0:	4b10      	ldr	r3, [pc, #64]	; (8111b04 <pack_SPP_TM+0x8c>)
 8111ac2:	715a      	strb	r2, [r3, #5]

	 for(int j = 6; j < tm_pkt.pHdr.data_len + 6; j++) {
 8111ac4:	2306      	movs	r3, #6
 8111ac6:	607b      	str	r3, [r7, #4]
 8111ac8:	e00d      	b.n	8111ae6 <pack_SPP_TM+0x6e>
		 UDP_TX_BUFFER[j] = tm_pkt.data[j - 6];
 8111aca:	687b      	ldr	r3, [r7, #4]
 8111acc:	3b06      	subs	r3, #6
 8111ace:	f107 0210 	add.w	r2, r7, #16
 8111ad2:	4413      	add	r3, r2
 8111ad4:	7f19      	ldrb	r1, [r3, #28]
 8111ad6:	4a0b      	ldr	r2, [pc, #44]	; (8111b04 <pack_SPP_TM+0x8c>)
 8111ad8:	687b      	ldr	r3, [r7, #4]
 8111ada:	4413      	add	r3, r2
 8111adc:	460a      	mov	r2, r1
 8111ade:	701a      	strb	r2, [r3, #0]
	 for(int j = 6; j < tm_pkt.pHdr.data_len + 6; j++) {
 8111ae0:	687b      	ldr	r3, [r7, #4]
 8111ae2:	3301      	adds	r3, #1
 8111ae4:	607b      	str	r3, [r7, #4]
 8111ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111ae8:	1d9a      	adds	r2, r3, #6
 8111aea:	687b      	ldr	r3, [r7, #4]
 8111aec:	429a      	cmp	r2, r3
 8111aee:	d8ec      	bhi.n	8111aca <pack_SPP_TM+0x52>
	 }
}
 8111af0:	bf00      	nop
 8111af2:	bf00      	nop
 8111af4:	370c      	adds	r7, #12
 8111af6:	46bd      	mov	sp, r7
 8111af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111afc:	b004      	add	sp, #16
 8111afe:	4770      	bx	lr
 8111b00:	10005c04 	.word	0x10005c04
 8111b04:	10008c20 	.word	0x10008c20

08111b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8111b08:	b580      	push	{r7, lr}
 8111b0a:	b082      	sub	sp, #8
 8111b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8111b0e:	4b0c      	ldr	r3, [pc, #48]	; (8111b40 <HAL_MspInit+0x38>)
 8111b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8111b14:	4a0a      	ldr	r2, [pc, #40]	; (8111b40 <HAL_MspInit+0x38>)
 8111b16:	f043 0302 	orr.w	r3, r3, #2
 8111b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8111b1e:	4b08      	ldr	r3, [pc, #32]	; (8111b40 <HAL_MspInit+0x38>)
 8111b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8111b24:	f003 0302 	and.w	r3, r3, #2
 8111b28:	607b      	str	r3, [r7, #4]
 8111b2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8111b2c:	2200      	movs	r2, #0
 8111b2e:	210f      	movs	r1, #15
 8111b30:	f06f 0001 	mvn.w	r0, #1
 8111b34:	f7ef fd78 	bl	8101628 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8111b38:	bf00      	nop
 8111b3a:	3708      	adds	r7, #8
 8111b3c:	46bd      	mov	sp, r7
 8111b3e:	bd80      	pop	{r7, pc}
 8111b40:	58024400 	.word	0x58024400

08111b44 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8111b44:	b580      	push	{r7, lr}
 8111b46:	b0ba      	sub	sp, #232	; 0xe8
 8111b48:	af00      	add	r7, sp, #0
 8111b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8111b4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8111b50:	2200      	movs	r2, #0
 8111b52:	601a      	str	r2, [r3, #0]
 8111b54:	605a      	str	r2, [r3, #4]
 8111b56:	609a      	str	r2, [r3, #8]
 8111b58:	60da      	str	r2, [r3, #12]
 8111b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8111b5c:	f107 0318 	add.w	r3, r7, #24
 8111b60:	22bc      	movs	r2, #188	; 0xbc
 8111b62:	2100      	movs	r1, #0
 8111b64:	4618      	mov	r0, r3
 8111b66:	f000 fbd6 	bl	8112316 <memset>
  if(hlptim->Instance==LPTIM1)
 8111b6a:	687b      	ldr	r3, [r7, #4]
 8111b6c:	681b      	ldr	r3, [r3, #0]
 8111b6e:	4a51      	ldr	r2, [pc, #324]	; (8111cb4 <HAL_LPTIM_MspInit+0x170>)
 8111b70:	4293      	cmp	r3, r2
 8111b72:	d14b      	bne.n	8111c0c <HAL_LPTIM_MspInit+0xc8>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8111b74:	2320      	movs	r3, #32
 8111b76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8111b78:	2300      	movs	r3, #0
 8111b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8111b7e:	f107 0318 	add.w	r3, r7, #24
 8111b82:	4618      	mov	r0, r3
 8111b84:	f7f2 fa8a 	bl	810409c <HAL_RCCEx_PeriphCLKConfig>
 8111b88:	4603      	mov	r3, r0
 8111b8a:	2b00      	cmp	r3, #0
 8111b8c:	d001      	beq.n	8111b92 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8111b8e:	f7ff fe09 	bl	81117a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8111b92:	4b49      	ldr	r3, [pc, #292]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8111b98:	4a47      	ldr	r2, [pc, #284]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8111b9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8111ba2:	4b45      	ldr	r3, [pc, #276]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8111ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8111bac:	617b      	str	r3, [r7, #20]
 8111bae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8111bb0:	4b41      	ldr	r3, [pc, #260]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111bb6:	4a40      	ldr	r2, [pc, #256]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111bb8:	f043 0308 	orr.w	r3, r3, #8
 8111bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8111bc0:	4b3d      	ldr	r3, [pc, #244]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111bc6:	f003 0308 	and.w	r3, r3, #8
 8111bca:	613b      	str	r3, [r7, #16]
 8111bcc:	693b      	ldr	r3, [r7, #16]
    /**LPTIM1 GPIO Configuration
    PD12     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8111bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8111bd6:	2302      	movs	r3, #2
 8111bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8111bdc:	2300      	movs	r3, #0
 8111bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8111be2:	2300      	movs	r3, #0
 8111be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8111be8:	2301      	movs	r3, #1
 8111bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8111bee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8111bf2:	4619      	mov	r1, r3
 8111bf4:	4831      	ldr	r0, [pc, #196]	; (8111cbc <HAL_LPTIM_MspInit+0x178>)
 8111bf6:	f7f1 fc13 	bl	8103420 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 8111bfa:	2200      	movs	r2, #0
 8111bfc:	2105      	movs	r1, #5
 8111bfe:	205d      	movs	r0, #93	; 0x5d
 8111c00:	f7ef fd12 	bl	8101628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8111c04:	205d      	movs	r0, #93	; 0x5d
 8111c06:	f7ef fd29 	bl	810165c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8111c0a:	e04f      	b.n	8111cac <HAL_LPTIM_MspInit+0x168>
  else if(hlptim->Instance==LPTIM2)
 8111c0c:	687b      	ldr	r3, [r7, #4]
 8111c0e:	681b      	ldr	r3, [r3, #0]
 8111c10:	4a2b      	ldr	r2, [pc, #172]	; (8111cc0 <HAL_LPTIM_MspInit+0x17c>)
 8111c12:	4293      	cmp	r3, r2
 8111c14:	d14a      	bne.n	8111cac <HAL_LPTIM_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8111c16:	2340      	movs	r3, #64	; 0x40
 8111c18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8111c1a:	2300      	movs	r3, #0
 8111c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8111c20:	f107 0318 	add.w	r3, r7, #24
 8111c24:	4618      	mov	r0, r3
 8111c26:	f7f2 fa39 	bl	810409c <HAL_RCCEx_PeriphCLKConfig>
 8111c2a:	4603      	mov	r3, r0
 8111c2c:	2b00      	cmp	r3, #0
 8111c2e:	d001      	beq.n	8111c34 <HAL_LPTIM_MspInit+0xf0>
      Error_Handler();
 8111c30:	f7ff fdb8 	bl	81117a4 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8111c34:	4b20      	ldr	r3, [pc, #128]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8111c3a:	4a1f      	ldr	r2, [pc, #124]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8111c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8111c44:	4b1c      	ldr	r3, [pc, #112]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8111c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8111c4e:	60fb      	str	r3, [r7, #12]
 8111c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8111c52:	4b19      	ldr	r3, [pc, #100]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111c58:	4a17      	ldr	r2, [pc, #92]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111c5a:	f043 0302 	orr.w	r3, r3, #2
 8111c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8111c62:	4b15      	ldr	r3, [pc, #84]	; (8111cb8 <HAL_LPTIM_MspInit+0x174>)
 8111c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111c68:	f003 0302 	and.w	r3, r3, #2
 8111c6c:	60bb      	str	r3, [r7, #8]
 8111c6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8111c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8111c74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8111c78:	2302      	movs	r3, #2
 8111c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8111c7e:	2300      	movs	r3, #0
 8111c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8111c84:	2300      	movs	r3, #0
 8111c86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8111c8a:	2303      	movs	r3, #3
 8111c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8111c90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8111c94:	4619      	mov	r1, r3
 8111c96:	480b      	ldr	r0, [pc, #44]	; (8111cc4 <HAL_LPTIM_MspInit+0x180>)
 8111c98:	f7f1 fbc2 	bl	8103420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 5, 0);
 8111c9c:	2200      	movs	r2, #0
 8111c9e:	2105      	movs	r1, #5
 8111ca0:	208a      	movs	r0, #138	; 0x8a
 8111ca2:	f7ef fcc1 	bl	8101628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8111ca6:	208a      	movs	r0, #138	; 0x8a
 8111ca8:	f7ef fcd8 	bl	810165c <HAL_NVIC_EnableIRQ>
}
 8111cac:	bf00      	nop
 8111cae:	37e8      	adds	r7, #232	; 0xe8
 8111cb0:	46bd      	mov	sp, r7
 8111cb2:	bd80      	pop	{r7, pc}
 8111cb4:	40002400 	.word	0x40002400
 8111cb8:	58024400 	.word	0x58024400
 8111cbc:	58020c00 	.word	0x58020c00
 8111cc0:	58002400 	.word	0x58002400
 8111cc4:	58020400 	.word	0x58020400

08111cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8111cc8:	b580      	push	{r7, lr}
 8111cca:	b086      	sub	sp, #24
 8111ccc:	af00      	add	r7, sp, #0
 8111cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8111cd0:	687b      	ldr	r3, [r7, #4]
 8111cd2:	681b      	ldr	r3, [r3, #0]
 8111cd4:	4a27      	ldr	r2, [pc, #156]	; (8111d74 <HAL_TIM_Base_MspInit+0xac>)
 8111cd6:	4293      	cmp	r3, r2
 8111cd8:	d117      	bne.n	8111d0a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8111cda:	4b27      	ldr	r3, [pc, #156]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8111ce0:	4a25      	ldr	r2, [pc, #148]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111ce2:	f043 0302 	orr.w	r3, r3, #2
 8111ce6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8111cea:	4b23      	ldr	r3, [pc, #140]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8111cf0:	f003 0302 	and.w	r3, r3, #2
 8111cf4:	617b      	str	r3, [r7, #20]
 8111cf6:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8111cf8:	2200      	movs	r2, #0
 8111cfa:	2105      	movs	r1, #5
 8111cfc:	202c      	movs	r0, #44	; 0x2c
 8111cfe:	f7ef fc93 	bl	8101628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8111d02:	202c      	movs	r0, #44	; 0x2c
 8111d04:	f7ef fcaa 	bl	810165c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8111d08:	e030      	b.n	8111d6c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM15)
 8111d0a:	687b      	ldr	r3, [r7, #4]
 8111d0c:	681b      	ldr	r3, [r3, #0]
 8111d0e:	4a1b      	ldr	r2, [pc, #108]	; (8111d7c <HAL_TIM_Base_MspInit+0xb4>)
 8111d10:	4293      	cmp	r3, r2
 8111d12:	d10f      	bne.n	8111d34 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8111d14:	4b18      	ldr	r3, [pc, #96]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8111d1a:	4a17      	ldr	r2, [pc, #92]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8111d20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8111d24:	4b14      	ldr	r3, [pc, #80]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8111d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8111d2e:	613b      	str	r3, [r7, #16]
 8111d30:	693b      	ldr	r3, [r7, #16]
}
 8111d32:	e01b      	b.n	8111d6c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8111d34:	687b      	ldr	r3, [r7, #4]
 8111d36:	681b      	ldr	r3, [r3, #0]
 8111d38:	4a11      	ldr	r2, [pc, #68]	; (8111d80 <HAL_TIM_Base_MspInit+0xb8>)
 8111d3a:	4293      	cmp	r3, r2
 8111d3c:	d116      	bne.n	8111d6c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8111d3e:	4b0e      	ldr	r3, [pc, #56]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8111d44:	4a0c      	ldr	r2, [pc, #48]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8111d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8111d4e:	4b0a      	ldr	r3, [pc, #40]	; (8111d78 <HAL_TIM_Base_MspInit+0xb0>)
 8111d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8111d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8111d58:	60fb      	str	r3, [r7, #12]
 8111d5a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 8111d5c:	2200      	movs	r2, #0
 8111d5e:	2105      	movs	r1, #5
 8111d60:	2075      	movs	r0, #117	; 0x75
 8111d62:	f7ef fc61 	bl	8101628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8111d66:	2075      	movs	r0, #117	; 0x75
 8111d68:	f7ef fc78 	bl	810165c <HAL_NVIC_EnableIRQ>
}
 8111d6c:	bf00      	nop
 8111d6e:	3718      	adds	r7, #24
 8111d70:	46bd      	mov	sp, r7
 8111d72:	bd80      	pop	{r7, pc}
 8111d74:	40010400 	.word	0x40010400
 8111d78:	58024400 	.word	0x58024400
 8111d7c:	40014000 	.word	0x40014000
 8111d80:	40014400 	.word	0x40014400

08111d84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8111d84:	b580      	push	{r7, lr}
 8111d86:	b088      	sub	sp, #32
 8111d88:	af00      	add	r7, sp, #0
 8111d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8111d8c:	f107 030c 	add.w	r3, r7, #12
 8111d90:	2200      	movs	r2, #0
 8111d92:	601a      	str	r2, [r3, #0]
 8111d94:	605a      	str	r2, [r3, #4]
 8111d96:	609a      	str	r2, [r3, #8]
 8111d98:	60da      	str	r2, [r3, #12]
 8111d9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8111d9c:	687b      	ldr	r3, [r7, #4]
 8111d9e:	681b      	ldr	r3, [r3, #0]
 8111da0:	4a13      	ldr	r2, [pc, #76]	; (8111df0 <HAL_TIM_MspPostInit+0x6c>)
 8111da2:	4293      	cmp	r3, r2
 8111da4:	d11f      	bne.n	8111de6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8111da6:	4b13      	ldr	r3, [pc, #76]	; (8111df4 <HAL_TIM_MspPostInit+0x70>)
 8111da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111dac:	4a11      	ldr	r2, [pc, #68]	; (8111df4 <HAL_TIM_MspPostInit+0x70>)
 8111dae:	f043 0304 	orr.w	r3, r3, #4
 8111db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8111db6:	4b0f      	ldr	r3, [pc, #60]	; (8111df4 <HAL_TIM_MspPostInit+0x70>)
 8111db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8111dbc:	f003 0304 	and.w	r3, r3, #4
 8111dc0:	60bb      	str	r3, [r7, #8]
 8111dc2:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8111dc4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8111dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8111dca:	2302      	movs	r3, #2
 8111dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8111dce:	2300      	movs	r3, #0
 8111dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8111dd2:	2300      	movs	r3, #0
 8111dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8111dd6:	2303      	movs	r3, #3
 8111dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8111dda:	f107 030c 	add.w	r3, r7, #12
 8111dde:	4619      	mov	r1, r3
 8111de0:	4805      	ldr	r0, [pc, #20]	; (8111df8 <HAL_TIM_MspPostInit+0x74>)
 8111de2:	f7f1 fb1d 	bl	8103420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8111de6:	bf00      	nop
 8111de8:	3720      	adds	r7, #32
 8111dea:	46bd      	mov	sp, r7
 8111dec:	bd80      	pop	{r7, pc}
 8111dee:	bf00      	nop
 8111df0:	40010400 	.word	0x40010400
 8111df4:	58024400 	.word	0x58024400
 8111df8:	58020800 	.word	0x58020800

08111dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8111dfc:	b580      	push	{r7, lr}
 8111dfe:	b0b2      	sub	sp, #200	; 0xc8
 8111e00:	af00      	add	r7, sp, #0
 8111e02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8111e04:	f107 030c 	add.w	r3, r7, #12
 8111e08:	22bc      	movs	r2, #188	; 0xbc
 8111e0a:	2100      	movs	r1, #0
 8111e0c:	4618      	mov	r0, r3
 8111e0e:	f000 fa82 	bl	8112316 <memset>
  if(huart->Instance==USART3)
 8111e12:	687b      	ldr	r3, [r7, #4]
 8111e14:	681b      	ldr	r3, [r3, #0]
 8111e16:	4a12      	ldr	r2, [pc, #72]	; (8111e60 <HAL_UART_MspInit+0x64>)
 8111e18:	4293      	cmp	r3, r2
 8111e1a:	d11d      	bne.n	8111e58 <HAL_UART_MspInit+0x5c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8111e1c:	2302      	movs	r3, #2
 8111e1e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8111e20:	2300      	movs	r3, #0
 8111e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8111e26:	f107 030c 	add.w	r3, r7, #12
 8111e2a:	4618      	mov	r0, r3
 8111e2c:	f7f2 f936 	bl	810409c <HAL_RCCEx_PeriphCLKConfig>
 8111e30:	4603      	mov	r3, r0
 8111e32:	2b00      	cmp	r3, #0
 8111e34:	d001      	beq.n	8111e3a <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 8111e36:	f7ff fcb5 	bl	81117a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8111e3a:	4b0a      	ldr	r3, [pc, #40]	; (8111e64 <HAL_UART_MspInit+0x68>)
 8111e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8111e40:	4a08      	ldr	r2, [pc, #32]	; (8111e64 <HAL_UART_MspInit+0x68>)
 8111e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8111e46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8111e4a:	4b06      	ldr	r3, [pc, #24]	; (8111e64 <HAL_UART_MspInit+0x68>)
 8111e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8111e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8111e54:	60bb      	str	r3, [r7, #8]
 8111e56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8111e58:	bf00      	nop
 8111e5a:	37c8      	adds	r7, #200	; 0xc8
 8111e5c:	46bd      	mov	sp, r7
 8111e5e:	bd80      	pop	{r7, pc}
 8111e60:	40004800 	.word	0x40004800
 8111e64:	58024400 	.word	0x58024400

08111e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8111e68:	b580      	push	{r7, lr}
 8111e6a:	b090      	sub	sp, #64	; 0x40
 8111e6c:	af00      	add	r7, sp, #0
 8111e6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8111e70:	687b      	ldr	r3, [r7, #4]
 8111e72:	2b0f      	cmp	r3, #15
 8111e74:	d827      	bhi.n	8111ec6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8111e76:	2200      	movs	r2, #0
 8111e78:	6879      	ldr	r1, [r7, #4]
 8111e7a:	201c      	movs	r0, #28
 8111e7c:	f7ef fbd4 	bl	8101628 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8111e80:	201c      	movs	r0, #28
 8111e82:	f7ef fbeb 	bl	810165c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8111e86:	4a29      	ldr	r2, [pc, #164]	; (8111f2c <HAL_InitTick+0xc4>)
 8111e88:	687b      	ldr	r3, [r7, #4]
 8111e8a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8111e8c:	4b28      	ldr	r3, [pc, #160]	; (8111f30 <HAL_InitTick+0xc8>)
 8111e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8111e92:	4a27      	ldr	r2, [pc, #156]	; (8111f30 <HAL_InitTick+0xc8>)
 8111e94:	f043 0301 	orr.w	r3, r3, #1
 8111e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8111e9c:	4b24      	ldr	r3, [pc, #144]	; (8111f30 <HAL_InitTick+0xc8>)
 8111e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8111ea2:	f003 0301 	and.w	r3, r3, #1
 8111ea6:	60fb      	str	r3, [r7, #12]
 8111ea8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8111eaa:	f107 0210 	add.w	r2, r7, #16
 8111eae:	f107 0314 	add.w	r3, r7, #20
 8111eb2:	4611      	mov	r1, r2
 8111eb4:	4618      	mov	r0, r3
 8111eb6:	f7f2 f8af 	bl	8104018 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8111eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8111ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8111ec0:	2b00      	cmp	r3, #0
 8111ec2:	d106      	bne.n	8111ed2 <HAL_InitTick+0x6a>
 8111ec4:	e001      	b.n	8111eca <HAL_InitTick+0x62>
    return HAL_ERROR;
 8111ec6:	2301      	movs	r3, #1
 8111ec8:	e02c      	b.n	8111f24 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8111eca:	f7f2 f879 	bl	8103fc0 <HAL_RCC_GetPCLK1Freq>
 8111ece:	63f8      	str	r0, [r7, #60]	; 0x3c
 8111ed0:	e004      	b.n	8111edc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8111ed2:	f7f2 f875 	bl	8103fc0 <HAL_RCC_GetPCLK1Freq>
 8111ed6:	4603      	mov	r3, r0
 8111ed8:	005b      	lsls	r3, r3, #1
 8111eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8111edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8111ede:	4a15      	ldr	r2, [pc, #84]	; (8111f34 <HAL_InitTick+0xcc>)
 8111ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8111ee4:	0c9b      	lsrs	r3, r3, #18
 8111ee6:	3b01      	subs	r3, #1
 8111ee8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8111eea:	4b13      	ldr	r3, [pc, #76]	; (8111f38 <HAL_InitTick+0xd0>)
 8111eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8111ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8111ef2:	4b11      	ldr	r3, [pc, #68]	; (8111f38 <HAL_InitTick+0xd0>)
 8111ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8111ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8111efa:	4a0f      	ldr	r2, [pc, #60]	; (8111f38 <HAL_InitTick+0xd0>)
 8111efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8111efe:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8111f00:	4b0d      	ldr	r3, [pc, #52]	; (8111f38 <HAL_InitTick+0xd0>)
 8111f02:	2200      	movs	r2, #0
 8111f04:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8111f06:	4b0c      	ldr	r3, [pc, #48]	; (8111f38 <HAL_InitTick+0xd0>)
 8111f08:	2200      	movs	r2, #0
 8111f0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8111f0c:	480a      	ldr	r0, [pc, #40]	; (8111f38 <HAL_InitTick+0xd0>)
 8111f0e:	f7f3 fc27 	bl	8105760 <HAL_TIM_Base_Init>
 8111f12:	4603      	mov	r3, r0
 8111f14:	2b00      	cmp	r3, #0
 8111f16:	d104      	bne.n	8111f22 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8111f18:	4807      	ldr	r0, [pc, #28]	; (8111f38 <HAL_InitTick+0xd0>)
 8111f1a:	f7f3 fce9 	bl	81058f0 <HAL_TIM_Base_Start_IT>
 8111f1e:	4603      	mov	r3, r0
 8111f20:	e000      	b.n	8111f24 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8111f22:	2301      	movs	r3, #1
}
 8111f24:	4618      	mov	r0, r3
 8111f26:	3740      	adds	r7, #64	; 0x40
 8111f28:	46bd      	mov	sp, r7
 8111f2a:	bd80      	pop	{r7, pc}
 8111f2c:	10000008 	.word	0x10000008
 8111f30:	58024400 	.word	0x58024400
 8111f34:	431bde83 	.word	0x431bde83
 8111f38:	10008c90 	.word	0x10008c90

08111f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8111f3c:	b480      	push	{r7}
 8111f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8111f40:	e7fe      	b.n	8111f40 <NMI_Handler+0x4>

08111f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8111f42:	b480      	push	{r7}
 8111f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8111f46:	e7fe      	b.n	8111f46 <HardFault_Handler+0x4>

08111f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8111f48:	b480      	push	{r7}
 8111f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8111f4c:	e7fe      	b.n	8111f4c <MemManage_Handler+0x4>

08111f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8111f4e:	b480      	push	{r7}
 8111f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8111f52:	e7fe      	b.n	8111f52 <BusFault_Handler+0x4>

08111f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8111f54:	b480      	push	{r7}
 8111f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8111f58:	e7fe      	b.n	8111f58 <UsageFault_Handler+0x4>

08111f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8111f5a:	b480      	push	{r7}
 8111f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8111f5e:	bf00      	nop
 8111f60:	46bd      	mov	sp, r7
 8111f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111f66:	4770      	bx	lr

08111f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8111f68:	b580      	push	{r7, lr}
 8111f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8111f6c:	4802      	ldr	r0, [pc, #8]	; (8111f78 <TIM2_IRQHandler+0x10>)
 8111f6e:	f7f3 fd98 	bl	8105aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8111f72:	bf00      	nop
 8111f74:	bd80      	pop	{r7, pc}
 8111f76:	bf00      	nop
 8111f78:	10008c90 	.word	0x10008c90

08111f7c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8111f7c:	b580      	push	{r7, lr}
 8111f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8111f80:	4802      	ldr	r0, [pc, #8]	; (8111f8c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8111f82:	f7f3 fd8e 	bl	8105aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8111f86:	bf00      	nop
 8111f88:	bd80      	pop	{r7, pc}
 8111f8a:	bf00      	nop
 8111f8c:	100089d0 	.word	0x100089d0

08111f90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8111f90:	b580      	push	{r7, lr}
 8111f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8111f94:	4802      	ldr	r0, [pc, #8]	; (8111fa0 <ETH_IRQHandler+0x10>)
 8111f96:	f7f0 f85d 	bl	8102054 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8111f9a:	bf00      	nop
 8111f9c:	bd80      	pop	{r7, pc}
 8111f9e:	bf00      	nop
 8111fa0:	100088a4 	.word	0x100088a4

08111fa4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8111fa4:	b580      	push	{r7, lr}
 8111fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8111fa8:	4802      	ldr	r0, [pc, #8]	; (8111fb4 <LPTIM1_IRQHandler+0x10>)
 8111faa:	f7f1 fcf3 	bl	8103994 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8111fae:	bf00      	nop
 8111fb0:	bd80      	pop	{r7, pc}
 8111fb2:	bf00      	nop
 8111fb4:	10008b4c 	.word	0x10008b4c

08111fb8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8111fb8:	b580      	push	{r7, lr}
 8111fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8111fbc:	4802      	ldr	r0, [pc, #8]	; (8111fc8 <TIM16_IRQHandler+0x10>)
 8111fbe:	f7f3 fd70 	bl	8105aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8111fc2:	bf00      	nop
 8111fc4:	bd80      	pop	{r7, pc}
 8111fc6:	bf00      	nop
 8111fc8:	10008bb0 	.word	0x10008bb0

08111fcc <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8111fcc:	b580      	push	{r7, lr}
 8111fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8111fd0:	4802      	ldr	r0, [pc, #8]	; (8111fdc <LPTIM2_IRQHandler+0x10>)
 8111fd2:	f7f1 fcdf 	bl	8103994 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8111fd6:	bf00      	nop
 8111fd8:	bd80      	pop	{r7, pc}
 8111fda:	bf00      	nop
 8111fdc:	10008b14 	.word	0x10008b14

08111fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8111fe0:	b480      	push	{r7}
 8111fe2:	b087      	sub	sp, #28
 8111fe4:	af00      	add	r7, sp, #0
 8111fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8111fe8:	4a14      	ldr	r2, [pc, #80]	; (811203c <_sbrk+0x5c>)
 8111fea:	4b15      	ldr	r3, [pc, #84]	; (8112040 <_sbrk+0x60>)
 8111fec:	1ad3      	subs	r3, r2, r3
 8111fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8111ff0:	697b      	ldr	r3, [r7, #20]
 8111ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8111ff4:	4b13      	ldr	r3, [pc, #76]	; (8112044 <_sbrk+0x64>)
 8111ff6:	681b      	ldr	r3, [r3, #0]
 8111ff8:	2b00      	cmp	r3, #0
 8111ffa:	d102      	bne.n	8112002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8111ffc:	4b11      	ldr	r3, [pc, #68]	; (8112044 <_sbrk+0x64>)
 8111ffe:	4a12      	ldr	r2, [pc, #72]	; (8112048 <_sbrk+0x68>)
 8112000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8112002:	4b10      	ldr	r3, [pc, #64]	; (8112044 <_sbrk+0x64>)
 8112004:	681a      	ldr	r2, [r3, #0]
 8112006:	687b      	ldr	r3, [r7, #4]
 8112008:	4413      	add	r3, r2
 811200a:	693a      	ldr	r2, [r7, #16]
 811200c:	429a      	cmp	r2, r3
 811200e:	d205      	bcs.n	811201c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8112010:	4b0e      	ldr	r3, [pc, #56]	; (811204c <_sbrk+0x6c>)
 8112012:	220c      	movs	r2, #12
 8112014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8112016:	f04f 33ff 	mov.w	r3, #4294967295
 811201a:	e009      	b.n	8112030 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 811201c:	4b09      	ldr	r3, [pc, #36]	; (8112044 <_sbrk+0x64>)
 811201e:	681b      	ldr	r3, [r3, #0]
 8112020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8112022:	4b08      	ldr	r3, [pc, #32]	; (8112044 <_sbrk+0x64>)
 8112024:	681a      	ldr	r2, [r3, #0]
 8112026:	687b      	ldr	r3, [r7, #4]
 8112028:	4413      	add	r3, r2
 811202a:	4a06      	ldr	r2, [pc, #24]	; (8112044 <_sbrk+0x64>)
 811202c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 811202e:	68fb      	ldr	r3, [r7, #12]
}
 8112030:	4618      	mov	r0, r3
 8112032:	371c      	adds	r7, #28
 8112034:	46bd      	mov	sp, r7
 8112036:	f85d 7b04 	ldr.w	r7, [sp], #4
 811203a:	4770      	bx	lr
 811203c:	10048000 	.word	0x10048000
 8112040:	00002000 	.word	0x00002000
 8112044:	10005c08 	.word	0x10005c08
 8112048:	10008ce8 	.word	0x10008ce8
 811204c:	100087a8 	.word	0x100087a8

08112050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8112050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8112088 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8112054:	f7ee fffc 	bl	8101050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8112058:	480c      	ldr	r0, [pc, #48]	; (811208c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 811205a:	490d      	ldr	r1, [pc, #52]	; (8112090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 811205c:	4a0d      	ldr	r2, [pc, #52]	; (8112094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 811205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8112060:	e002      	b.n	8112068 <LoopCopyDataInit>

08112062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8112062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8112064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8112066:	3304      	adds	r3, #4

08112068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8112068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 811206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 811206c:	d3f9      	bcc.n	8112062 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 811206e:	4a0a      	ldr	r2, [pc, #40]	; (8112098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8112070:	4c0a      	ldr	r4, [pc, #40]	; (811209c <LoopFillZerobss+0x22>)
  movs r3, #0
 8112072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8112074:	e001      	b.n	811207a <LoopFillZerobss>

08112076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8112076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8112078:	3204      	adds	r2, #4

0811207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 811207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 811207c:	d3fb      	bcc.n	8112076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 811207e:	f000 f907 	bl	8112290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8112082:	f7fe fdfd 	bl	8110c80 <main>
  bx  lr
 8112086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8112088:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 811208c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8112090:	100001fc 	.word	0x100001fc
  ldr r2, =_sidata
 8112094:	08116fb8 	.word	0x08116fb8
  ldr r2, =_sbss
 8112098:	10001a8c 	.word	0x10001a8c
  ldr r4, =_ebss
 811209c:	10008ce8 	.word	0x10008ce8

081120a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81120a0:	e7fe      	b.n	81120a0 <ADC3_IRQHandler>
	...

081120a4 <std>:
 81120a4:	2300      	movs	r3, #0
 81120a6:	b510      	push	{r4, lr}
 81120a8:	4604      	mov	r4, r0
 81120aa:	e9c0 3300 	strd	r3, r3, [r0]
 81120ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81120b2:	6083      	str	r3, [r0, #8]
 81120b4:	8181      	strh	r1, [r0, #12]
 81120b6:	6643      	str	r3, [r0, #100]	; 0x64
 81120b8:	81c2      	strh	r2, [r0, #14]
 81120ba:	6183      	str	r3, [r0, #24]
 81120bc:	4619      	mov	r1, r3
 81120be:	2208      	movs	r2, #8
 81120c0:	305c      	adds	r0, #92	; 0x5c
 81120c2:	f000 f928 	bl	8112316 <memset>
 81120c6:	4b05      	ldr	r3, [pc, #20]	; (81120dc <std+0x38>)
 81120c8:	6263      	str	r3, [r4, #36]	; 0x24
 81120ca:	4b05      	ldr	r3, [pc, #20]	; (81120e0 <std+0x3c>)
 81120cc:	62a3      	str	r3, [r4, #40]	; 0x28
 81120ce:	4b05      	ldr	r3, [pc, #20]	; (81120e4 <std+0x40>)
 81120d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 81120d2:	4b05      	ldr	r3, [pc, #20]	; (81120e8 <std+0x44>)
 81120d4:	6224      	str	r4, [r4, #32]
 81120d6:	6323      	str	r3, [r4, #48]	; 0x30
 81120d8:	bd10      	pop	{r4, pc}
 81120da:	bf00      	nop
 81120dc:	081130cd 	.word	0x081130cd
 81120e0:	081130ef 	.word	0x081130ef
 81120e4:	08113127 	.word	0x08113127
 81120e8:	0811314b 	.word	0x0811314b

081120ec <_cleanup_r>:
 81120ec:	4901      	ldr	r1, [pc, #4]	; (81120f4 <_cleanup_r+0x8>)
 81120ee:	f000 b8af 	b.w	8112250 <_fwalk_reent>
 81120f2:	bf00      	nop
 81120f4:	08114175 	.word	0x08114175

081120f8 <__sfmoreglue>:
 81120f8:	b570      	push	{r4, r5, r6, lr}
 81120fa:	1e4a      	subs	r2, r1, #1
 81120fc:	2568      	movs	r5, #104	; 0x68
 81120fe:	4355      	muls	r5, r2
 8112100:	460e      	mov	r6, r1
 8112102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8112106:	f000 f90f 	bl	8112328 <_malloc_r>
 811210a:	4604      	mov	r4, r0
 811210c:	b140      	cbz	r0, 8112120 <__sfmoreglue+0x28>
 811210e:	2100      	movs	r1, #0
 8112110:	e9c0 1600 	strd	r1, r6, [r0]
 8112114:	300c      	adds	r0, #12
 8112116:	60a0      	str	r0, [r4, #8]
 8112118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 811211c:	f000 f8fb 	bl	8112316 <memset>
 8112120:	4620      	mov	r0, r4
 8112122:	bd70      	pop	{r4, r5, r6, pc}

08112124 <__sfp_lock_acquire>:
 8112124:	4801      	ldr	r0, [pc, #4]	; (811212c <__sfp_lock_acquire+0x8>)
 8112126:	f000 b8d8 	b.w	81122da <__retarget_lock_acquire_recursive>
 811212a:	bf00      	nop
 811212c:	10008ce4 	.word	0x10008ce4

08112130 <__sfp_lock_release>:
 8112130:	4801      	ldr	r0, [pc, #4]	; (8112138 <__sfp_lock_release+0x8>)
 8112132:	f000 b8d3 	b.w	81122dc <__retarget_lock_release_recursive>
 8112136:	bf00      	nop
 8112138:	10008ce4 	.word	0x10008ce4

0811213c <__sinit_lock_acquire>:
 811213c:	4801      	ldr	r0, [pc, #4]	; (8112144 <__sinit_lock_acquire+0x8>)
 811213e:	f000 b8cc 	b.w	81122da <__retarget_lock_acquire_recursive>
 8112142:	bf00      	nop
 8112144:	10008cdf 	.word	0x10008cdf

08112148 <__sinit_lock_release>:
 8112148:	4801      	ldr	r0, [pc, #4]	; (8112150 <__sinit_lock_release+0x8>)
 811214a:	f000 b8c7 	b.w	81122dc <__retarget_lock_release_recursive>
 811214e:	bf00      	nop
 8112150:	10008cdf 	.word	0x10008cdf

08112154 <__sinit>:
 8112154:	b510      	push	{r4, lr}
 8112156:	4604      	mov	r4, r0
 8112158:	f7ff fff0 	bl	811213c <__sinit_lock_acquire>
 811215c:	69a3      	ldr	r3, [r4, #24]
 811215e:	b11b      	cbz	r3, 8112168 <__sinit+0x14>
 8112160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112164:	f7ff bff0 	b.w	8112148 <__sinit_lock_release>
 8112168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 811216c:	6523      	str	r3, [r4, #80]	; 0x50
 811216e:	4b13      	ldr	r3, [pc, #76]	; (81121bc <__sinit+0x68>)
 8112170:	4a13      	ldr	r2, [pc, #76]	; (81121c0 <__sinit+0x6c>)
 8112172:	681b      	ldr	r3, [r3, #0]
 8112174:	62a2      	str	r2, [r4, #40]	; 0x28
 8112176:	42a3      	cmp	r3, r4
 8112178:	bf04      	itt	eq
 811217a:	2301      	moveq	r3, #1
 811217c:	61a3      	streq	r3, [r4, #24]
 811217e:	4620      	mov	r0, r4
 8112180:	f000 f820 	bl	81121c4 <__sfp>
 8112184:	6060      	str	r0, [r4, #4]
 8112186:	4620      	mov	r0, r4
 8112188:	f000 f81c 	bl	81121c4 <__sfp>
 811218c:	60a0      	str	r0, [r4, #8]
 811218e:	4620      	mov	r0, r4
 8112190:	f000 f818 	bl	81121c4 <__sfp>
 8112194:	2200      	movs	r2, #0
 8112196:	60e0      	str	r0, [r4, #12]
 8112198:	2104      	movs	r1, #4
 811219a:	6860      	ldr	r0, [r4, #4]
 811219c:	f7ff ff82 	bl	81120a4 <std>
 81121a0:	68a0      	ldr	r0, [r4, #8]
 81121a2:	2201      	movs	r2, #1
 81121a4:	2109      	movs	r1, #9
 81121a6:	f7ff ff7d 	bl	81120a4 <std>
 81121aa:	68e0      	ldr	r0, [r4, #12]
 81121ac:	2202      	movs	r2, #2
 81121ae:	2112      	movs	r1, #18
 81121b0:	f7ff ff78 	bl	81120a4 <std>
 81121b4:	2301      	movs	r3, #1
 81121b6:	61a3      	str	r3, [r4, #24]
 81121b8:	e7d2      	b.n	8112160 <__sinit+0xc>
 81121ba:	bf00      	nop
 81121bc:	08116cc8 	.word	0x08116cc8
 81121c0:	081120ed 	.word	0x081120ed

081121c4 <__sfp>:
 81121c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81121c6:	4607      	mov	r7, r0
 81121c8:	f7ff ffac 	bl	8112124 <__sfp_lock_acquire>
 81121cc:	4b1e      	ldr	r3, [pc, #120]	; (8112248 <__sfp+0x84>)
 81121ce:	681e      	ldr	r6, [r3, #0]
 81121d0:	69b3      	ldr	r3, [r6, #24]
 81121d2:	b913      	cbnz	r3, 81121da <__sfp+0x16>
 81121d4:	4630      	mov	r0, r6
 81121d6:	f7ff ffbd 	bl	8112154 <__sinit>
 81121da:	3648      	adds	r6, #72	; 0x48
 81121dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 81121e0:	3b01      	subs	r3, #1
 81121e2:	d503      	bpl.n	81121ec <__sfp+0x28>
 81121e4:	6833      	ldr	r3, [r6, #0]
 81121e6:	b30b      	cbz	r3, 811222c <__sfp+0x68>
 81121e8:	6836      	ldr	r6, [r6, #0]
 81121ea:	e7f7      	b.n	81121dc <__sfp+0x18>
 81121ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 81121f0:	b9d5      	cbnz	r5, 8112228 <__sfp+0x64>
 81121f2:	4b16      	ldr	r3, [pc, #88]	; (811224c <__sfp+0x88>)
 81121f4:	60e3      	str	r3, [r4, #12]
 81121f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 81121fa:	6665      	str	r5, [r4, #100]	; 0x64
 81121fc:	f000 f86c 	bl	81122d8 <__retarget_lock_init_recursive>
 8112200:	f7ff ff96 	bl	8112130 <__sfp_lock_release>
 8112204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8112208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 811220c:	6025      	str	r5, [r4, #0]
 811220e:	61a5      	str	r5, [r4, #24]
 8112210:	2208      	movs	r2, #8
 8112212:	4629      	mov	r1, r5
 8112214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8112218:	f000 f87d 	bl	8112316 <memset>
 811221c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8112220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8112224:	4620      	mov	r0, r4
 8112226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8112228:	3468      	adds	r4, #104	; 0x68
 811222a:	e7d9      	b.n	81121e0 <__sfp+0x1c>
 811222c:	2104      	movs	r1, #4
 811222e:	4638      	mov	r0, r7
 8112230:	f7ff ff62 	bl	81120f8 <__sfmoreglue>
 8112234:	4604      	mov	r4, r0
 8112236:	6030      	str	r0, [r6, #0]
 8112238:	2800      	cmp	r0, #0
 811223a:	d1d5      	bne.n	81121e8 <__sfp+0x24>
 811223c:	f7ff ff78 	bl	8112130 <__sfp_lock_release>
 8112240:	230c      	movs	r3, #12
 8112242:	603b      	str	r3, [r7, #0]
 8112244:	e7ee      	b.n	8112224 <__sfp+0x60>
 8112246:	bf00      	nop
 8112248:	08116cc8 	.word	0x08116cc8
 811224c:	ffff0001 	.word	0xffff0001

08112250 <_fwalk_reent>:
 8112250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8112254:	4606      	mov	r6, r0
 8112256:	4688      	mov	r8, r1
 8112258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 811225c:	2700      	movs	r7, #0
 811225e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8112262:	f1b9 0901 	subs.w	r9, r9, #1
 8112266:	d505      	bpl.n	8112274 <_fwalk_reent+0x24>
 8112268:	6824      	ldr	r4, [r4, #0]
 811226a:	2c00      	cmp	r4, #0
 811226c:	d1f7      	bne.n	811225e <_fwalk_reent+0xe>
 811226e:	4638      	mov	r0, r7
 8112270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8112274:	89ab      	ldrh	r3, [r5, #12]
 8112276:	2b01      	cmp	r3, #1
 8112278:	d907      	bls.n	811228a <_fwalk_reent+0x3a>
 811227a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811227e:	3301      	adds	r3, #1
 8112280:	d003      	beq.n	811228a <_fwalk_reent+0x3a>
 8112282:	4629      	mov	r1, r5
 8112284:	4630      	mov	r0, r6
 8112286:	47c0      	blx	r8
 8112288:	4307      	orrs	r7, r0
 811228a:	3568      	adds	r5, #104	; 0x68
 811228c:	e7e9      	b.n	8112262 <_fwalk_reent+0x12>
	...

08112290 <__libc_init_array>:
 8112290:	b570      	push	{r4, r5, r6, lr}
 8112292:	4d0d      	ldr	r5, [pc, #52]	; (81122c8 <__libc_init_array+0x38>)
 8112294:	4c0d      	ldr	r4, [pc, #52]	; (81122cc <__libc_init_array+0x3c>)
 8112296:	1b64      	subs	r4, r4, r5
 8112298:	10a4      	asrs	r4, r4, #2
 811229a:	2600      	movs	r6, #0
 811229c:	42a6      	cmp	r6, r4
 811229e:	d109      	bne.n	81122b4 <__libc_init_array+0x24>
 81122a0:	4d0b      	ldr	r5, [pc, #44]	; (81122d0 <__libc_init_array+0x40>)
 81122a2:	4c0c      	ldr	r4, [pc, #48]	; (81122d4 <__libc_init_array+0x44>)
 81122a4:	f002 fe2c 	bl	8114f00 <_init>
 81122a8:	1b64      	subs	r4, r4, r5
 81122aa:	10a4      	asrs	r4, r4, #2
 81122ac:	2600      	movs	r6, #0
 81122ae:	42a6      	cmp	r6, r4
 81122b0:	d105      	bne.n	81122be <__libc_init_array+0x2e>
 81122b2:	bd70      	pop	{r4, r5, r6, pc}
 81122b4:	f855 3b04 	ldr.w	r3, [r5], #4
 81122b8:	4798      	blx	r3
 81122ba:	3601      	adds	r6, #1
 81122bc:	e7ee      	b.n	811229c <__libc_init_array+0xc>
 81122be:	f855 3b04 	ldr.w	r3, [r5], #4
 81122c2:	4798      	blx	r3
 81122c4:	3601      	adds	r6, #1
 81122c6:	e7f2      	b.n	81122ae <__libc_init_array+0x1e>
 81122c8:	08116fb0 	.word	0x08116fb0
 81122cc:	08116fb0 	.word	0x08116fb0
 81122d0:	08116fb0 	.word	0x08116fb0
 81122d4:	08116fb4 	.word	0x08116fb4

081122d8 <__retarget_lock_init_recursive>:
 81122d8:	4770      	bx	lr

081122da <__retarget_lock_acquire_recursive>:
 81122da:	4770      	bx	lr

081122dc <__retarget_lock_release_recursive>:
 81122dc:	4770      	bx	lr

081122de <memcmp>:
 81122de:	b530      	push	{r4, r5, lr}
 81122e0:	3901      	subs	r1, #1
 81122e2:	2400      	movs	r4, #0
 81122e4:	42a2      	cmp	r2, r4
 81122e6:	d101      	bne.n	81122ec <memcmp+0xe>
 81122e8:	2000      	movs	r0, #0
 81122ea:	e005      	b.n	81122f8 <memcmp+0x1a>
 81122ec:	5d03      	ldrb	r3, [r0, r4]
 81122ee:	3401      	adds	r4, #1
 81122f0:	5d0d      	ldrb	r5, [r1, r4]
 81122f2:	42ab      	cmp	r3, r5
 81122f4:	d0f6      	beq.n	81122e4 <memcmp+0x6>
 81122f6:	1b58      	subs	r0, r3, r5
 81122f8:	bd30      	pop	{r4, r5, pc}

081122fa <memcpy>:
 81122fa:	440a      	add	r2, r1
 81122fc:	4291      	cmp	r1, r2
 81122fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8112302:	d100      	bne.n	8112306 <memcpy+0xc>
 8112304:	4770      	bx	lr
 8112306:	b510      	push	{r4, lr}
 8112308:	f811 4b01 	ldrb.w	r4, [r1], #1
 811230c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8112310:	4291      	cmp	r1, r2
 8112312:	d1f9      	bne.n	8112308 <memcpy+0xe>
 8112314:	bd10      	pop	{r4, pc}

08112316 <memset>:
 8112316:	4402      	add	r2, r0
 8112318:	4603      	mov	r3, r0
 811231a:	4293      	cmp	r3, r2
 811231c:	d100      	bne.n	8112320 <memset+0xa>
 811231e:	4770      	bx	lr
 8112320:	f803 1b01 	strb.w	r1, [r3], #1
 8112324:	e7f9      	b.n	811231a <memset+0x4>
	...

08112328 <_malloc_r>:
 8112328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811232a:	1ccd      	adds	r5, r1, #3
 811232c:	f025 0503 	bic.w	r5, r5, #3
 8112330:	3508      	adds	r5, #8
 8112332:	2d0c      	cmp	r5, #12
 8112334:	bf38      	it	cc
 8112336:	250c      	movcc	r5, #12
 8112338:	2d00      	cmp	r5, #0
 811233a:	4606      	mov	r6, r0
 811233c:	db01      	blt.n	8112342 <_malloc_r+0x1a>
 811233e:	42a9      	cmp	r1, r5
 8112340:	d903      	bls.n	811234a <_malloc_r+0x22>
 8112342:	230c      	movs	r3, #12
 8112344:	6033      	str	r3, [r6, #0]
 8112346:	2000      	movs	r0, #0
 8112348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811234a:	f001 ffe3 	bl	8114314 <__malloc_lock>
 811234e:	4921      	ldr	r1, [pc, #132]	; (81123d4 <_malloc_r+0xac>)
 8112350:	680a      	ldr	r2, [r1, #0]
 8112352:	4614      	mov	r4, r2
 8112354:	b99c      	cbnz	r4, 811237e <_malloc_r+0x56>
 8112356:	4f20      	ldr	r7, [pc, #128]	; (81123d8 <_malloc_r+0xb0>)
 8112358:	683b      	ldr	r3, [r7, #0]
 811235a:	b923      	cbnz	r3, 8112366 <_malloc_r+0x3e>
 811235c:	4621      	mov	r1, r4
 811235e:	4630      	mov	r0, r6
 8112360:	f000 fdde 	bl	8112f20 <_sbrk_r>
 8112364:	6038      	str	r0, [r7, #0]
 8112366:	4629      	mov	r1, r5
 8112368:	4630      	mov	r0, r6
 811236a:	f000 fdd9 	bl	8112f20 <_sbrk_r>
 811236e:	1c43      	adds	r3, r0, #1
 8112370:	d123      	bne.n	81123ba <_malloc_r+0x92>
 8112372:	230c      	movs	r3, #12
 8112374:	6033      	str	r3, [r6, #0]
 8112376:	4630      	mov	r0, r6
 8112378:	f001 ffd2 	bl	8114320 <__malloc_unlock>
 811237c:	e7e3      	b.n	8112346 <_malloc_r+0x1e>
 811237e:	6823      	ldr	r3, [r4, #0]
 8112380:	1b5b      	subs	r3, r3, r5
 8112382:	d417      	bmi.n	81123b4 <_malloc_r+0x8c>
 8112384:	2b0b      	cmp	r3, #11
 8112386:	d903      	bls.n	8112390 <_malloc_r+0x68>
 8112388:	6023      	str	r3, [r4, #0]
 811238a:	441c      	add	r4, r3
 811238c:	6025      	str	r5, [r4, #0]
 811238e:	e004      	b.n	811239a <_malloc_r+0x72>
 8112390:	6863      	ldr	r3, [r4, #4]
 8112392:	42a2      	cmp	r2, r4
 8112394:	bf0c      	ite	eq
 8112396:	600b      	streq	r3, [r1, #0]
 8112398:	6053      	strne	r3, [r2, #4]
 811239a:	4630      	mov	r0, r6
 811239c:	f001 ffc0 	bl	8114320 <__malloc_unlock>
 81123a0:	f104 000b 	add.w	r0, r4, #11
 81123a4:	1d23      	adds	r3, r4, #4
 81123a6:	f020 0007 	bic.w	r0, r0, #7
 81123aa:	1ac2      	subs	r2, r0, r3
 81123ac:	d0cc      	beq.n	8112348 <_malloc_r+0x20>
 81123ae:	1a1b      	subs	r3, r3, r0
 81123b0:	50a3      	str	r3, [r4, r2]
 81123b2:	e7c9      	b.n	8112348 <_malloc_r+0x20>
 81123b4:	4622      	mov	r2, r4
 81123b6:	6864      	ldr	r4, [r4, #4]
 81123b8:	e7cc      	b.n	8112354 <_malloc_r+0x2c>
 81123ba:	1cc4      	adds	r4, r0, #3
 81123bc:	f024 0403 	bic.w	r4, r4, #3
 81123c0:	42a0      	cmp	r0, r4
 81123c2:	d0e3      	beq.n	811238c <_malloc_r+0x64>
 81123c4:	1a21      	subs	r1, r4, r0
 81123c6:	4630      	mov	r0, r6
 81123c8:	f000 fdaa 	bl	8112f20 <_sbrk_r>
 81123cc:	3001      	adds	r0, #1
 81123ce:	d1dd      	bne.n	811238c <_malloc_r+0x64>
 81123d0:	e7cf      	b.n	8112372 <_malloc_r+0x4a>
 81123d2:	bf00      	nop
 81123d4:	10005c0c 	.word	0x10005c0c
 81123d8:	10005c10 	.word	0x10005c10

081123dc <__cvt>:
 81123dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81123e0:	ec55 4b10 	vmov	r4, r5, d0
 81123e4:	2d00      	cmp	r5, #0
 81123e6:	460e      	mov	r6, r1
 81123e8:	4619      	mov	r1, r3
 81123ea:	462b      	mov	r3, r5
 81123ec:	bfbb      	ittet	lt
 81123ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81123f2:	461d      	movlt	r5, r3
 81123f4:	2300      	movge	r3, #0
 81123f6:	232d      	movlt	r3, #45	; 0x2d
 81123f8:	700b      	strb	r3, [r1, #0]
 81123fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81123fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8112400:	4691      	mov	r9, r2
 8112402:	f023 0820 	bic.w	r8, r3, #32
 8112406:	bfbc      	itt	lt
 8112408:	4622      	movlt	r2, r4
 811240a:	4614      	movlt	r4, r2
 811240c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8112410:	d005      	beq.n	811241e <__cvt+0x42>
 8112412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8112416:	d100      	bne.n	811241a <__cvt+0x3e>
 8112418:	3601      	adds	r6, #1
 811241a:	2102      	movs	r1, #2
 811241c:	e000      	b.n	8112420 <__cvt+0x44>
 811241e:	2103      	movs	r1, #3
 8112420:	ab03      	add	r3, sp, #12
 8112422:	9301      	str	r3, [sp, #4]
 8112424:	ab02      	add	r3, sp, #8
 8112426:	9300      	str	r3, [sp, #0]
 8112428:	ec45 4b10 	vmov	d0, r4, r5
 811242c:	4653      	mov	r3, sl
 811242e:	4632      	mov	r2, r6
 8112430:	f001 f82e 	bl	8113490 <_dtoa_r>
 8112434:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8112438:	4607      	mov	r7, r0
 811243a:	d102      	bne.n	8112442 <__cvt+0x66>
 811243c:	f019 0f01 	tst.w	r9, #1
 8112440:	d022      	beq.n	8112488 <__cvt+0xac>
 8112442:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8112446:	eb07 0906 	add.w	r9, r7, r6
 811244a:	d110      	bne.n	811246e <__cvt+0x92>
 811244c:	783b      	ldrb	r3, [r7, #0]
 811244e:	2b30      	cmp	r3, #48	; 0x30
 8112450:	d10a      	bne.n	8112468 <__cvt+0x8c>
 8112452:	2200      	movs	r2, #0
 8112454:	2300      	movs	r3, #0
 8112456:	4620      	mov	r0, r4
 8112458:	4629      	mov	r1, r5
 811245a:	f7ee fbbd 	bl	8100bd8 <__aeabi_dcmpeq>
 811245e:	b918      	cbnz	r0, 8112468 <__cvt+0x8c>
 8112460:	f1c6 0601 	rsb	r6, r6, #1
 8112464:	f8ca 6000 	str.w	r6, [sl]
 8112468:	f8da 3000 	ldr.w	r3, [sl]
 811246c:	4499      	add	r9, r3
 811246e:	2200      	movs	r2, #0
 8112470:	2300      	movs	r3, #0
 8112472:	4620      	mov	r0, r4
 8112474:	4629      	mov	r1, r5
 8112476:	f7ee fbaf 	bl	8100bd8 <__aeabi_dcmpeq>
 811247a:	b108      	cbz	r0, 8112480 <__cvt+0xa4>
 811247c:	f8cd 900c 	str.w	r9, [sp, #12]
 8112480:	2230      	movs	r2, #48	; 0x30
 8112482:	9b03      	ldr	r3, [sp, #12]
 8112484:	454b      	cmp	r3, r9
 8112486:	d307      	bcc.n	8112498 <__cvt+0xbc>
 8112488:	9b03      	ldr	r3, [sp, #12]
 811248a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 811248c:	1bdb      	subs	r3, r3, r7
 811248e:	4638      	mov	r0, r7
 8112490:	6013      	str	r3, [r2, #0]
 8112492:	b004      	add	sp, #16
 8112494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112498:	1c59      	adds	r1, r3, #1
 811249a:	9103      	str	r1, [sp, #12]
 811249c:	701a      	strb	r2, [r3, #0]
 811249e:	e7f0      	b.n	8112482 <__cvt+0xa6>

081124a0 <__exponent>:
 81124a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81124a2:	4603      	mov	r3, r0
 81124a4:	2900      	cmp	r1, #0
 81124a6:	bfb8      	it	lt
 81124a8:	4249      	neglt	r1, r1
 81124aa:	f803 2b02 	strb.w	r2, [r3], #2
 81124ae:	bfb4      	ite	lt
 81124b0:	222d      	movlt	r2, #45	; 0x2d
 81124b2:	222b      	movge	r2, #43	; 0x2b
 81124b4:	2909      	cmp	r1, #9
 81124b6:	7042      	strb	r2, [r0, #1]
 81124b8:	dd2a      	ble.n	8112510 <__exponent+0x70>
 81124ba:	f10d 0407 	add.w	r4, sp, #7
 81124be:	46a4      	mov	ip, r4
 81124c0:	270a      	movs	r7, #10
 81124c2:	46a6      	mov	lr, r4
 81124c4:	460a      	mov	r2, r1
 81124c6:	fb91 f6f7 	sdiv	r6, r1, r7
 81124ca:	fb07 1516 	mls	r5, r7, r6, r1
 81124ce:	3530      	adds	r5, #48	; 0x30
 81124d0:	2a63      	cmp	r2, #99	; 0x63
 81124d2:	f104 34ff 	add.w	r4, r4, #4294967295
 81124d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 81124da:	4631      	mov	r1, r6
 81124dc:	dcf1      	bgt.n	81124c2 <__exponent+0x22>
 81124de:	3130      	adds	r1, #48	; 0x30
 81124e0:	f1ae 0502 	sub.w	r5, lr, #2
 81124e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 81124e8:	1c44      	adds	r4, r0, #1
 81124ea:	4629      	mov	r1, r5
 81124ec:	4561      	cmp	r1, ip
 81124ee:	d30a      	bcc.n	8112506 <__exponent+0x66>
 81124f0:	f10d 0209 	add.w	r2, sp, #9
 81124f4:	eba2 020e 	sub.w	r2, r2, lr
 81124f8:	4565      	cmp	r5, ip
 81124fa:	bf88      	it	hi
 81124fc:	2200      	movhi	r2, #0
 81124fe:	4413      	add	r3, r2
 8112500:	1a18      	subs	r0, r3, r0
 8112502:	b003      	add	sp, #12
 8112504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8112506:	f811 2b01 	ldrb.w	r2, [r1], #1
 811250a:	f804 2f01 	strb.w	r2, [r4, #1]!
 811250e:	e7ed      	b.n	81124ec <__exponent+0x4c>
 8112510:	2330      	movs	r3, #48	; 0x30
 8112512:	3130      	adds	r1, #48	; 0x30
 8112514:	7083      	strb	r3, [r0, #2]
 8112516:	70c1      	strb	r1, [r0, #3]
 8112518:	1d03      	adds	r3, r0, #4
 811251a:	e7f1      	b.n	8112500 <__exponent+0x60>

0811251c <_printf_float>:
 811251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112520:	ed2d 8b02 	vpush	{d8}
 8112524:	b08d      	sub	sp, #52	; 0x34
 8112526:	460c      	mov	r4, r1
 8112528:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 811252c:	4616      	mov	r6, r2
 811252e:	461f      	mov	r7, r3
 8112530:	4605      	mov	r5, r0
 8112532:	f001 fe6d 	bl	8114210 <_localeconv_r>
 8112536:	f8d0 a000 	ldr.w	sl, [r0]
 811253a:	4650      	mov	r0, sl
 811253c:	f7ed fed0 	bl	81002e0 <strlen>
 8112540:	2300      	movs	r3, #0
 8112542:	930a      	str	r3, [sp, #40]	; 0x28
 8112544:	6823      	ldr	r3, [r4, #0]
 8112546:	9305      	str	r3, [sp, #20]
 8112548:	f8d8 3000 	ldr.w	r3, [r8]
 811254c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8112550:	3307      	adds	r3, #7
 8112552:	f023 0307 	bic.w	r3, r3, #7
 8112556:	f103 0208 	add.w	r2, r3, #8
 811255a:	f8c8 2000 	str.w	r2, [r8]
 811255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112562:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8112566:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 811256a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 811256e:	9307      	str	r3, [sp, #28]
 8112570:	f8cd 8018 	str.w	r8, [sp, #24]
 8112574:	ee08 0a10 	vmov	s16, r0
 8112578:	4b9f      	ldr	r3, [pc, #636]	; (81127f8 <_printf_float+0x2dc>)
 811257a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 811257e:	f04f 32ff 	mov.w	r2, #4294967295
 8112582:	f7ee fb5b 	bl	8100c3c <__aeabi_dcmpun>
 8112586:	bb88      	cbnz	r0, 81125ec <_printf_float+0xd0>
 8112588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 811258c:	4b9a      	ldr	r3, [pc, #616]	; (81127f8 <_printf_float+0x2dc>)
 811258e:	f04f 32ff 	mov.w	r2, #4294967295
 8112592:	f7ee fb35 	bl	8100c00 <__aeabi_dcmple>
 8112596:	bb48      	cbnz	r0, 81125ec <_printf_float+0xd0>
 8112598:	2200      	movs	r2, #0
 811259a:	2300      	movs	r3, #0
 811259c:	4640      	mov	r0, r8
 811259e:	4649      	mov	r1, r9
 81125a0:	f7ee fb24 	bl	8100bec <__aeabi_dcmplt>
 81125a4:	b110      	cbz	r0, 81125ac <_printf_float+0x90>
 81125a6:	232d      	movs	r3, #45	; 0x2d
 81125a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81125ac:	4b93      	ldr	r3, [pc, #588]	; (81127fc <_printf_float+0x2e0>)
 81125ae:	4894      	ldr	r0, [pc, #592]	; (8112800 <_printf_float+0x2e4>)
 81125b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81125b4:	bf94      	ite	ls
 81125b6:	4698      	movls	r8, r3
 81125b8:	4680      	movhi	r8, r0
 81125ba:	2303      	movs	r3, #3
 81125bc:	6123      	str	r3, [r4, #16]
 81125be:	9b05      	ldr	r3, [sp, #20]
 81125c0:	f023 0204 	bic.w	r2, r3, #4
 81125c4:	6022      	str	r2, [r4, #0]
 81125c6:	f04f 0900 	mov.w	r9, #0
 81125ca:	9700      	str	r7, [sp, #0]
 81125cc:	4633      	mov	r3, r6
 81125ce:	aa0b      	add	r2, sp, #44	; 0x2c
 81125d0:	4621      	mov	r1, r4
 81125d2:	4628      	mov	r0, r5
 81125d4:	f000 f9d8 	bl	8112988 <_printf_common>
 81125d8:	3001      	adds	r0, #1
 81125da:	f040 8090 	bne.w	81126fe <_printf_float+0x1e2>
 81125de:	f04f 30ff 	mov.w	r0, #4294967295
 81125e2:	b00d      	add	sp, #52	; 0x34
 81125e4:	ecbd 8b02 	vpop	{d8}
 81125e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81125ec:	4642      	mov	r2, r8
 81125ee:	464b      	mov	r3, r9
 81125f0:	4640      	mov	r0, r8
 81125f2:	4649      	mov	r1, r9
 81125f4:	f7ee fb22 	bl	8100c3c <__aeabi_dcmpun>
 81125f8:	b140      	cbz	r0, 811260c <_printf_float+0xf0>
 81125fa:	464b      	mov	r3, r9
 81125fc:	2b00      	cmp	r3, #0
 81125fe:	bfbc      	itt	lt
 8112600:	232d      	movlt	r3, #45	; 0x2d
 8112602:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8112606:	487f      	ldr	r0, [pc, #508]	; (8112804 <_printf_float+0x2e8>)
 8112608:	4b7f      	ldr	r3, [pc, #508]	; (8112808 <_printf_float+0x2ec>)
 811260a:	e7d1      	b.n	81125b0 <_printf_float+0x94>
 811260c:	6863      	ldr	r3, [r4, #4]
 811260e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8112612:	9206      	str	r2, [sp, #24]
 8112614:	1c5a      	adds	r2, r3, #1
 8112616:	d13f      	bne.n	8112698 <_printf_float+0x17c>
 8112618:	2306      	movs	r3, #6
 811261a:	6063      	str	r3, [r4, #4]
 811261c:	9b05      	ldr	r3, [sp, #20]
 811261e:	6861      	ldr	r1, [r4, #4]
 8112620:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8112624:	2300      	movs	r3, #0
 8112626:	9303      	str	r3, [sp, #12]
 8112628:	ab0a      	add	r3, sp, #40	; 0x28
 811262a:	e9cd b301 	strd	fp, r3, [sp, #4]
 811262e:	ab09      	add	r3, sp, #36	; 0x24
 8112630:	ec49 8b10 	vmov	d0, r8, r9
 8112634:	9300      	str	r3, [sp, #0]
 8112636:	6022      	str	r2, [r4, #0]
 8112638:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 811263c:	4628      	mov	r0, r5
 811263e:	f7ff fecd 	bl	81123dc <__cvt>
 8112642:	9b06      	ldr	r3, [sp, #24]
 8112644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8112646:	2b47      	cmp	r3, #71	; 0x47
 8112648:	4680      	mov	r8, r0
 811264a:	d108      	bne.n	811265e <_printf_float+0x142>
 811264c:	1cc8      	adds	r0, r1, #3
 811264e:	db02      	blt.n	8112656 <_printf_float+0x13a>
 8112650:	6863      	ldr	r3, [r4, #4]
 8112652:	4299      	cmp	r1, r3
 8112654:	dd41      	ble.n	81126da <_printf_float+0x1be>
 8112656:	f1ab 0b02 	sub.w	fp, fp, #2
 811265a:	fa5f fb8b 	uxtb.w	fp, fp
 811265e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8112662:	d820      	bhi.n	81126a6 <_printf_float+0x18a>
 8112664:	3901      	subs	r1, #1
 8112666:	465a      	mov	r2, fp
 8112668:	f104 0050 	add.w	r0, r4, #80	; 0x50
 811266c:	9109      	str	r1, [sp, #36]	; 0x24
 811266e:	f7ff ff17 	bl	81124a0 <__exponent>
 8112672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8112674:	1813      	adds	r3, r2, r0
 8112676:	2a01      	cmp	r2, #1
 8112678:	4681      	mov	r9, r0
 811267a:	6123      	str	r3, [r4, #16]
 811267c:	dc02      	bgt.n	8112684 <_printf_float+0x168>
 811267e:	6822      	ldr	r2, [r4, #0]
 8112680:	07d2      	lsls	r2, r2, #31
 8112682:	d501      	bpl.n	8112688 <_printf_float+0x16c>
 8112684:	3301      	adds	r3, #1
 8112686:	6123      	str	r3, [r4, #16]
 8112688:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 811268c:	2b00      	cmp	r3, #0
 811268e:	d09c      	beq.n	81125ca <_printf_float+0xae>
 8112690:	232d      	movs	r3, #45	; 0x2d
 8112692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8112696:	e798      	b.n	81125ca <_printf_float+0xae>
 8112698:	9a06      	ldr	r2, [sp, #24]
 811269a:	2a47      	cmp	r2, #71	; 0x47
 811269c:	d1be      	bne.n	811261c <_printf_float+0x100>
 811269e:	2b00      	cmp	r3, #0
 81126a0:	d1bc      	bne.n	811261c <_printf_float+0x100>
 81126a2:	2301      	movs	r3, #1
 81126a4:	e7b9      	b.n	811261a <_printf_float+0xfe>
 81126a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81126aa:	d118      	bne.n	81126de <_printf_float+0x1c2>
 81126ac:	2900      	cmp	r1, #0
 81126ae:	6863      	ldr	r3, [r4, #4]
 81126b0:	dd0b      	ble.n	81126ca <_printf_float+0x1ae>
 81126b2:	6121      	str	r1, [r4, #16]
 81126b4:	b913      	cbnz	r3, 81126bc <_printf_float+0x1a0>
 81126b6:	6822      	ldr	r2, [r4, #0]
 81126b8:	07d0      	lsls	r0, r2, #31
 81126ba:	d502      	bpl.n	81126c2 <_printf_float+0x1a6>
 81126bc:	3301      	adds	r3, #1
 81126be:	440b      	add	r3, r1
 81126c0:	6123      	str	r3, [r4, #16]
 81126c2:	65a1      	str	r1, [r4, #88]	; 0x58
 81126c4:	f04f 0900 	mov.w	r9, #0
 81126c8:	e7de      	b.n	8112688 <_printf_float+0x16c>
 81126ca:	b913      	cbnz	r3, 81126d2 <_printf_float+0x1b6>
 81126cc:	6822      	ldr	r2, [r4, #0]
 81126ce:	07d2      	lsls	r2, r2, #31
 81126d0:	d501      	bpl.n	81126d6 <_printf_float+0x1ba>
 81126d2:	3302      	adds	r3, #2
 81126d4:	e7f4      	b.n	81126c0 <_printf_float+0x1a4>
 81126d6:	2301      	movs	r3, #1
 81126d8:	e7f2      	b.n	81126c0 <_printf_float+0x1a4>
 81126da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81126de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81126e0:	4299      	cmp	r1, r3
 81126e2:	db05      	blt.n	81126f0 <_printf_float+0x1d4>
 81126e4:	6823      	ldr	r3, [r4, #0]
 81126e6:	6121      	str	r1, [r4, #16]
 81126e8:	07d8      	lsls	r0, r3, #31
 81126ea:	d5ea      	bpl.n	81126c2 <_printf_float+0x1a6>
 81126ec:	1c4b      	adds	r3, r1, #1
 81126ee:	e7e7      	b.n	81126c0 <_printf_float+0x1a4>
 81126f0:	2900      	cmp	r1, #0
 81126f2:	bfd4      	ite	le
 81126f4:	f1c1 0202 	rsble	r2, r1, #2
 81126f8:	2201      	movgt	r2, #1
 81126fa:	4413      	add	r3, r2
 81126fc:	e7e0      	b.n	81126c0 <_printf_float+0x1a4>
 81126fe:	6823      	ldr	r3, [r4, #0]
 8112700:	055a      	lsls	r2, r3, #21
 8112702:	d407      	bmi.n	8112714 <_printf_float+0x1f8>
 8112704:	6923      	ldr	r3, [r4, #16]
 8112706:	4642      	mov	r2, r8
 8112708:	4631      	mov	r1, r6
 811270a:	4628      	mov	r0, r5
 811270c:	47b8      	blx	r7
 811270e:	3001      	adds	r0, #1
 8112710:	d12c      	bne.n	811276c <_printf_float+0x250>
 8112712:	e764      	b.n	81125de <_printf_float+0xc2>
 8112714:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8112718:	f240 80e0 	bls.w	81128dc <_printf_float+0x3c0>
 811271c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8112720:	2200      	movs	r2, #0
 8112722:	2300      	movs	r3, #0
 8112724:	f7ee fa58 	bl	8100bd8 <__aeabi_dcmpeq>
 8112728:	2800      	cmp	r0, #0
 811272a:	d034      	beq.n	8112796 <_printf_float+0x27a>
 811272c:	4a37      	ldr	r2, [pc, #220]	; (811280c <_printf_float+0x2f0>)
 811272e:	2301      	movs	r3, #1
 8112730:	4631      	mov	r1, r6
 8112732:	4628      	mov	r0, r5
 8112734:	47b8      	blx	r7
 8112736:	3001      	adds	r0, #1
 8112738:	f43f af51 	beq.w	81125de <_printf_float+0xc2>
 811273c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8112740:	429a      	cmp	r2, r3
 8112742:	db02      	blt.n	811274a <_printf_float+0x22e>
 8112744:	6823      	ldr	r3, [r4, #0]
 8112746:	07d8      	lsls	r0, r3, #31
 8112748:	d510      	bpl.n	811276c <_printf_float+0x250>
 811274a:	ee18 3a10 	vmov	r3, s16
 811274e:	4652      	mov	r2, sl
 8112750:	4631      	mov	r1, r6
 8112752:	4628      	mov	r0, r5
 8112754:	47b8      	blx	r7
 8112756:	3001      	adds	r0, #1
 8112758:	f43f af41 	beq.w	81125de <_printf_float+0xc2>
 811275c:	f04f 0800 	mov.w	r8, #0
 8112760:	f104 091a 	add.w	r9, r4, #26
 8112764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8112766:	3b01      	subs	r3, #1
 8112768:	4543      	cmp	r3, r8
 811276a:	dc09      	bgt.n	8112780 <_printf_float+0x264>
 811276c:	6823      	ldr	r3, [r4, #0]
 811276e:	079b      	lsls	r3, r3, #30
 8112770:	f100 8105 	bmi.w	811297e <_printf_float+0x462>
 8112774:	68e0      	ldr	r0, [r4, #12]
 8112776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8112778:	4298      	cmp	r0, r3
 811277a:	bfb8      	it	lt
 811277c:	4618      	movlt	r0, r3
 811277e:	e730      	b.n	81125e2 <_printf_float+0xc6>
 8112780:	2301      	movs	r3, #1
 8112782:	464a      	mov	r2, r9
 8112784:	4631      	mov	r1, r6
 8112786:	4628      	mov	r0, r5
 8112788:	47b8      	blx	r7
 811278a:	3001      	adds	r0, #1
 811278c:	f43f af27 	beq.w	81125de <_printf_float+0xc2>
 8112790:	f108 0801 	add.w	r8, r8, #1
 8112794:	e7e6      	b.n	8112764 <_printf_float+0x248>
 8112796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8112798:	2b00      	cmp	r3, #0
 811279a:	dc39      	bgt.n	8112810 <_printf_float+0x2f4>
 811279c:	4a1b      	ldr	r2, [pc, #108]	; (811280c <_printf_float+0x2f0>)
 811279e:	2301      	movs	r3, #1
 81127a0:	4631      	mov	r1, r6
 81127a2:	4628      	mov	r0, r5
 81127a4:	47b8      	blx	r7
 81127a6:	3001      	adds	r0, #1
 81127a8:	f43f af19 	beq.w	81125de <_printf_float+0xc2>
 81127ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81127b0:	4313      	orrs	r3, r2
 81127b2:	d102      	bne.n	81127ba <_printf_float+0x29e>
 81127b4:	6823      	ldr	r3, [r4, #0]
 81127b6:	07d9      	lsls	r1, r3, #31
 81127b8:	d5d8      	bpl.n	811276c <_printf_float+0x250>
 81127ba:	ee18 3a10 	vmov	r3, s16
 81127be:	4652      	mov	r2, sl
 81127c0:	4631      	mov	r1, r6
 81127c2:	4628      	mov	r0, r5
 81127c4:	47b8      	blx	r7
 81127c6:	3001      	adds	r0, #1
 81127c8:	f43f af09 	beq.w	81125de <_printf_float+0xc2>
 81127cc:	f04f 0900 	mov.w	r9, #0
 81127d0:	f104 0a1a 	add.w	sl, r4, #26
 81127d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81127d6:	425b      	negs	r3, r3
 81127d8:	454b      	cmp	r3, r9
 81127da:	dc01      	bgt.n	81127e0 <_printf_float+0x2c4>
 81127dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81127de:	e792      	b.n	8112706 <_printf_float+0x1ea>
 81127e0:	2301      	movs	r3, #1
 81127e2:	4652      	mov	r2, sl
 81127e4:	4631      	mov	r1, r6
 81127e6:	4628      	mov	r0, r5
 81127e8:	47b8      	blx	r7
 81127ea:	3001      	adds	r0, #1
 81127ec:	f43f aef7 	beq.w	81125de <_printf_float+0xc2>
 81127f0:	f109 0901 	add.w	r9, r9, #1
 81127f4:	e7ee      	b.n	81127d4 <_printf_float+0x2b8>
 81127f6:	bf00      	nop
 81127f8:	7fefffff 	.word	0x7fefffff
 81127fc:	08116ccc 	.word	0x08116ccc
 8112800:	08116cd0 	.word	0x08116cd0
 8112804:	08116cd8 	.word	0x08116cd8
 8112808:	08116cd4 	.word	0x08116cd4
 811280c:	08116cdc 	.word	0x08116cdc
 8112810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8112812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8112814:	429a      	cmp	r2, r3
 8112816:	bfa8      	it	ge
 8112818:	461a      	movge	r2, r3
 811281a:	2a00      	cmp	r2, #0
 811281c:	4691      	mov	r9, r2
 811281e:	dc37      	bgt.n	8112890 <_printf_float+0x374>
 8112820:	f04f 0b00 	mov.w	fp, #0
 8112824:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8112828:	f104 021a 	add.w	r2, r4, #26
 811282c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 811282e:	9305      	str	r3, [sp, #20]
 8112830:	eba3 0309 	sub.w	r3, r3, r9
 8112834:	455b      	cmp	r3, fp
 8112836:	dc33      	bgt.n	81128a0 <_printf_float+0x384>
 8112838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 811283c:	429a      	cmp	r2, r3
 811283e:	db3b      	blt.n	81128b8 <_printf_float+0x39c>
 8112840:	6823      	ldr	r3, [r4, #0]
 8112842:	07da      	lsls	r2, r3, #31
 8112844:	d438      	bmi.n	81128b8 <_printf_float+0x39c>
 8112846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8112848:	9b05      	ldr	r3, [sp, #20]
 811284a:	9909      	ldr	r1, [sp, #36]	; 0x24
 811284c:	1ad3      	subs	r3, r2, r3
 811284e:	eba2 0901 	sub.w	r9, r2, r1
 8112852:	4599      	cmp	r9, r3
 8112854:	bfa8      	it	ge
 8112856:	4699      	movge	r9, r3
 8112858:	f1b9 0f00 	cmp.w	r9, #0
 811285c:	dc35      	bgt.n	81128ca <_printf_float+0x3ae>
 811285e:	f04f 0800 	mov.w	r8, #0
 8112862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8112866:	f104 0a1a 	add.w	sl, r4, #26
 811286a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 811286e:	1a9b      	subs	r3, r3, r2
 8112870:	eba3 0309 	sub.w	r3, r3, r9
 8112874:	4543      	cmp	r3, r8
 8112876:	f77f af79 	ble.w	811276c <_printf_float+0x250>
 811287a:	2301      	movs	r3, #1
 811287c:	4652      	mov	r2, sl
 811287e:	4631      	mov	r1, r6
 8112880:	4628      	mov	r0, r5
 8112882:	47b8      	blx	r7
 8112884:	3001      	adds	r0, #1
 8112886:	f43f aeaa 	beq.w	81125de <_printf_float+0xc2>
 811288a:	f108 0801 	add.w	r8, r8, #1
 811288e:	e7ec      	b.n	811286a <_printf_float+0x34e>
 8112890:	4613      	mov	r3, r2
 8112892:	4631      	mov	r1, r6
 8112894:	4642      	mov	r2, r8
 8112896:	4628      	mov	r0, r5
 8112898:	47b8      	blx	r7
 811289a:	3001      	adds	r0, #1
 811289c:	d1c0      	bne.n	8112820 <_printf_float+0x304>
 811289e:	e69e      	b.n	81125de <_printf_float+0xc2>
 81128a0:	2301      	movs	r3, #1
 81128a2:	4631      	mov	r1, r6
 81128a4:	4628      	mov	r0, r5
 81128a6:	9205      	str	r2, [sp, #20]
 81128a8:	47b8      	blx	r7
 81128aa:	3001      	adds	r0, #1
 81128ac:	f43f ae97 	beq.w	81125de <_printf_float+0xc2>
 81128b0:	9a05      	ldr	r2, [sp, #20]
 81128b2:	f10b 0b01 	add.w	fp, fp, #1
 81128b6:	e7b9      	b.n	811282c <_printf_float+0x310>
 81128b8:	ee18 3a10 	vmov	r3, s16
 81128bc:	4652      	mov	r2, sl
 81128be:	4631      	mov	r1, r6
 81128c0:	4628      	mov	r0, r5
 81128c2:	47b8      	blx	r7
 81128c4:	3001      	adds	r0, #1
 81128c6:	d1be      	bne.n	8112846 <_printf_float+0x32a>
 81128c8:	e689      	b.n	81125de <_printf_float+0xc2>
 81128ca:	9a05      	ldr	r2, [sp, #20]
 81128cc:	464b      	mov	r3, r9
 81128ce:	4442      	add	r2, r8
 81128d0:	4631      	mov	r1, r6
 81128d2:	4628      	mov	r0, r5
 81128d4:	47b8      	blx	r7
 81128d6:	3001      	adds	r0, #1
 81128d8:	d1c1      	bne.n	811285e <_printf_float+0x342>
 81128da:	e680      	b.n	81125de <_printf_float+0xc2>
 81128dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81128de:	2a01      	cmp	r2, #1
 81128e0:	dc01      	bgt.n	81128e6 <_printf_float+0x3ca>
 81128e2:	07db      	lsls	r3, r3, #31
 81128e4:	d538      	bpl.n	8112958 <_printf_float+0x43c>
 81128e6:	2301      	movs	r3, #1
 81128e8:	4642      	mov	r2, r8
 81128ea:	4631      	mov	r1, r6
 81128ec:	4628      	mov	r0, r5
 81128ee:	47b8      	blx	r7
 81128f0:	3001      	adds	r0, #1
 81128f2:	f43f ae74 	beq.w	81125de <_printf_float+0xc2>
 81128f6:	ee18 3a10 	vmov	r3, s16
 81128fa:	4652      	mov	r2, sl
 81128fc:	4631      	mov	r1, r6
 81128fe:	4628      	mov	r0, r5
 8112900:	47b8      	blx	r7
 8112902:	3001      	adds	r0, #1
 8112904:	f43f ae6b 	beq.w	81125de <_printf_float+0xc2>
 8112908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 811290c:	2200      	movs	r2, #0
 811290e:	2300      	movs	r3, #0
 8112910:	f7ee f962 	bl	8100bd8 <__aeabi_dcmpeq>
 8112914:	b9d8      	cbnz	r0, 811294e <_printf_float+0x432>
 8112916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8112918:	f108 0201 	add.w	r2, r8, #1
 811291c:	3b01      	subs	r3, #1
 811291e:	4631      	mov	r1, r6
 8112920:	4628      	mov	r0, r5
 8112922:	47b8      	blx	r7
 8112924:	3001      	adds	r0, #1
 8112926:	d10e      	bne.n	8112946 <_printf_float+0x42a>
 8112928:	e659      	b.n	81125de <_printf_float+0xc2>
 811292a:	2301      	movs	r3, #1
 811292c:	4652      	mov	r2, sl
 811292e:	4631      	mov	r1, r6
 8112930:	4628      	mov	r0, r5
 8112932:	47b8      	blx	r7
 8112934:	3001      	adds	r0, #1
 8112936:	f43f ae52 	beq.w	81125de <_printf_float+0xc2>
 811293a:	f108 0801 	add.w	r8, r8, #1
 811293e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8112940:	3b01      	subs	r3, #1
 8112942:	4543      	cmp	r3, r8
 8112944:	dcf1      	bgt.n	811292a <_printf_float+0x40e>
 8112946:	464b      	mov	r3, r9
 8112948:	f104 0250 	add.w	r2, r4, #80	; 0x50
 811294c:	e6dc      	b.n	8112708 <_printf_float+0x1ec>
 811294e:	f04f 0800 	mov.w	r8, #0
 8112952:	f104 0a1a 	add.w	sl, r4, #26
 8112956:	e7f2      	b.n	811293e <_printf_float+0x422>
 8112958:	2301      	movs	r3, #1
 811295a:	4642      	mov	r2, r8
 811295c:	e7df      	b.n	811291e <_printf_float+0x402>
 811295e:	2301      	movs	r3, #1
 8112960:	464a      	mov	r2, r9
 8112962:	4631      	mov	r1, r6
 8112964:	4628      	mov	r0, r5
 8112966:	47b8      	blx	r7
 8112968:	3001      	adds	r0, #1
 811296a:	f43f ae38 	beq.w	81125de <_printf_float+0xc2>
 811296e:	f108 0801 	add.w	r8, r8, #1
 8112972:	68e3      	ldr	r3, [r4, #12]
 8112974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8112976:	1a5b      	subs	r3, r3, r1
 8112978:	4543      	cmp	r3, r8
 811297a:	dcf0      	bgt.n	811295e <_printf_float+0x442>
 811297c:	e6fa      	b.n	8112774 <_printf_float+0x258>
 811297e:	f04f 0800 	mov.w	r8, #0
 8112982:	f104 0919 	add.w	r9, r4, #25
 8112986:	e7f4      	b.n	8112972 <_printf_float+0x456>

08112988 <_printf_common>:
 8112988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811298c:	4616      	mov	r6, r2
 811298e:	4699      	mov	r9, r3
 8112990:	688a      	ldr	r2, [r1, #8]
 8112992:	690b      	ldr	r3, [r1, #16]
 8112994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8112998:	4293      	cmp	r3, r2
 811299a:	bfb8      	it	lt
 811299c:	4613      	movlt	r3, r2
 811299e:	6033      	str	r3, [r6, #0]
 81129a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81129a4:	4607      	mov	r7, r0
 81129a6:	460c      	mov	r4, r1
 81129a8:	b10a      	cbz	r2, 81129ae <_printf_common+0x26>
 81129aa:	3301      	adds	r3, #1
 81129ac:	6033      	str	r3, [r6, #0]
 81129ae:	6823      	ldr	r3, [r4, #0]
 81129b0:	0699      	lsls	r1, r3, #26
 81129b2:	bf42      	ittt	mi
 81129b4:	6833      	ldrmi	r3, [r6, #0]
 81129b6:	3302      	addmi	r3, #2
 81129b8:	6033      	strmi	r3, [r6, #0]
 81129ba:	6825      	ldr	r5, [r4, #0]
 81129bc:	f015 0506 	ands.w	r5, r5, #6
 81129c0:	d106      	bne.n	81129d0 <_printf_common+0x48>
 81129c2:	f104 0a19 	add.w	sl, r4, #25
 81129c6:	68e3      	ldr	r3, [r4, #12]
 81129c8:	6832      	ldr	r2, [r6, #0]
 81129ca:	1a9b      	subs	r3, r3, r2
 81129cc:	42ab      	cmp	r3, r5
 81129ce:	dc26      	bgt.n	8112a1e <_printf_common+0x96>
 81129d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81129d4:	1e13      	subs	r3, r2, #0
 81129d6:	6822      	ldr	r2, [r4, #0]
 81129d8:	bf18      	it	ne
 81129da:	2301      	movne	r3, #1
 81129dc:	0692      	lsls	r2, r2, #26
 81129de:	d42b      	bmi.n	8112a38 <_printf_common+0xb0>
 81129e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81129e4:	4649      	mov	r1, r9
 81129e6:	4638      	mov	r0, r7
 81129e8:	47c0      	blx	r8
 81129ea:	3001      	adds	r0, #1
 81129ec:	d01e      	beq.n	8112a2c <_printf_common+0xa4>
 81129ee:	6823      	ldr	r3, [r4, #0]
 81129f0:	68e5      	ldr	r5, [r4, #12]
 81129f2:	6832      	ldr	r2, [r6, #0]
 81129f4:	f003 0306 	and.w	r3, r3, #6
 81129f8:	2b04      	cmp	r3, #4
 81129fa:	bf08      	it	eq
 81129fc:	1aad      	subeq	r5, r5, r2
 81129fe:	68a3      	ldr	r3, [r4, #8]
 8112a00:	6922      	ldr	r2, [r4, #16]
 8112a02:	bf0c      	ite	eq
 8112a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8112a08:	2500      	movne	r5, #0
 8112a0a:	4293      	cmp	r3, r2
 8112a0c:	bfc4      	itt	gt
 8112a0e:	1a9b      	subgt	r3, r3, r2
 8112a10:	18ed      	addgt	r5, r5, r3
 8112a12:	2600      	movs	r6, #0
 8112a14:	341a      	adds	r4, #26
 8112a16:	42b5      	cmp	r5, r6
 8112a18:	d11a      	bne.n	8112a50 <_printf_common+0xc8>
 8112a1a:	2000      	movs	r0, #0
 8112a1c:	e008      	b.n	8112a30 <_printf_common+0xa8>
 8112a1e:	2301      	movs	r3, #1
 8112a20:	4652      	mov	r2, sl
 8112a22:	4649      	mov	r1, r9
 8112a24:	4638      	mov	r0, r7
 8112a26:	47c0      	blx	r8
 8112a28:	3001      	adds	r0, #1
 8112a2a:	d103      	bne.n	8112a34 <_printf_common+0xac>
 8112a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8112a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112a34:	3501      	adds	r5, #1
 8112a36:	e7c6      	b.n	81129c6 <_printf_common+0x3e>
 8112a38:	18e1      	adds	r1, r4, r3
 8112a3a:	1c5a      	adds	r2, r3, #1
 8112a3c:	2030      	movs	r0, #48	; 0x30
 8112a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8112a42:	4422      	add	r2, r4
 8112a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8112a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8112a4c:	3302      	adds	r3, #2
 8112a4e:	e7c7      	b.n	81129e0 <_printf_common+0x58>
 8112a50:	2301      	movs	r3, #1
 8112a52:	4622      	mov	r2, r4
 8112a54:	4649      	mov	r1, r9
 8112a56:	4638      	mov	r0, r7
 8112a58:	47c0      	blx	r8
 8112a5a:	3001      	adds	r0, #1
 8112a5c:	d0e6      	beq.n	8112a2c <_printf_common+0xa4>
 8112a5e:	3601      	adds	r6, #1
 8112a60:	e7d9      	b.n	8112a16 <_printf_common+0x8e>
	...

08112a64 <_printf_i>:
 8112a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8112a68:	460c      	mov	r4, r1
 8112a6a:	4691      	mov	r9, r2
 8112a6c:	7e27      	ldrb	r7, [r4, #24]
 8112a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8112a70:	2f78      	cmp	r7, #120	; 0x78
 8112a72:	4680      	mov	r8, r0
 8112a74:	469a      	mov	sl, r3
 8112a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8112a7a:	d807      	bhi.n	8112a8c <_printf_i+0x28>
 8112a7c:	2f62      	cmp	r7, #98	; 0x62
 8112a7e:	d80a      	bhi.n	8112a96 <_printf_i+0x32>
 8112a80:	2f00      	cmp	r7, #0
 8112a82:	f000 80d8 	beq.w	8112c36 <_printf_i+0x1d2>
 8112a86:	2f58      	cmp	r7, #88	; 0x58
 8112a88:	f000 80a3 	beq.w	8112bd2 <_printf_i+0x16e>
 8112a8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8112a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8112a94:	e03a      	b.n	8112b0c <_printf_i+0xa8>
 8112a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8112a9a:	2b15      	cmp	r3, #21
 8112a9c:	d8f6      	bhi.n	8112a8c <_printf_i+0x28>
 8112a9e:	a001      	add	r0, pc, #4	; (adr r0, 8112aa4 <_printf_i+0x40>)
 8112aa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8112aa4:	08112afd 	.word	0x08112afd
 8112aa8:	08112b11 	.word	0x08112b11
 8112aac:	08112a8d 	.word	0x08112a8d
 8112ab0:	08112a8d 	.word	0x08112a8d
 8112ab4:	08112a8d 	.word	0x08112a8d
 8112ab8:	08112a8d 	.word	0x08112a8d
 8112abc:	08112b11 	.word	0x08112b11
 8112ac0:	08112a8d 	.word	0x08112a8d
 8112ac4:	08112a8d 	.word	0x08112a8d
 8112ac8:	08112a8d 	.word	0x08112a8d
 8112acc:	08112a8d 	.word	0x08112a8d
 8112ad0:	08112c1d 	.word	0x08112c1d
 8112ad4:	08112b41 	.word	0x08112b41
 8112ad8:	08112bff 	.word	0x08112bff
 8112adc:	08112a8d 	.word	0x08112a8d
 8112ae0:	08112a8d 	.word	0x08112a8d
 8112ae4:	08112c3f 	.word	0x08112c3f
 8112ae8:	08112a8d 	.word	0x08112a8d
 8112aec:	08112b41 	.word	0x08112b41
 8112af0:	08112a8d 	.word	0x08112a8d
 8112af4:	08112a8d 	.word	0x08112a8d
 8112af8:	08112c07 	.word	0x08112c07
 8112afc:	680b      	ldr	r3, [r1, #0]
 8112afe:	1d1a      	adds	r2, r3, #4
 8112b00:	681b      	ldr	r3, [r3, #0]
 8112b02:	600a      	str	r2, [r1, #0]
 8112b04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8112b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8112b0c:	2301      	movs	r3, #1
 8112b0e:	e0a3      	b.n	8112c58 <_printf_i+0x1f4>
 8112b10:	6825      	ldr	r5, [r4, #0]
 8112b12:	6808      	ldr	r0, [r1, #0]
 8112b14:	062e      	lsls	r6, r5, #24
 8112b16:	f100 0304 	add.w	r3, r0, #4
 8112b1a:	d50a      	bpl.n	8112b32 <_printf_i+0xce>
 8112b1c:	6805      	ldr	r5, [r0, #0]
 8112b1e:	600b      	str	r3, [r1, #0]
 8112b20:	2d00      	cmp	r5, #0
 8112b22:	da03      	bge.n	8112b2c <_printf_i+0xc8>
 8112b24:	232d      	movs	r3, #45	; 0x2d
 8112b26:	426d      	negs	r5, r5
 8112b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8112b2c:	485e      	ldr	r0, [pc, #376]	; (8112ca8 <_printf_i+0x244>)
 8112b2e:	230a      	movs	r3, #10
 8112b30:	e019      	b.n	8112b66 <_printf_i+0x102>
 8112b32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8112b36:	6805      	ldr	r5, [r0, #0]
 8112b38:	600b      	str	r3, [r1, #0]
 8112b3a:	bf18      	it	ne
 8112b3c:	b22d      	sxthne	r5, r5
 8112b3e:	e7ef      	b.n	8112b20 <_printf_i+0xbc>
 8112b40:	680b      	ldr	r3, [r1, #0]
 8112b42:	6825      	ldr	r5, [r4, #0]
 8112b44:	1d18      	adds	r0, r3, #4
 8112b46:	6008      	str	r0, [r1, #0]
 8112b48:	0628      	lsls	r0, r5, #24
 8112b4a:	d501      	bpl.n	8112b50 <_printf_i+0xec>
 8112b4c:	681d      	ldr	r5, [r3, #0]
 8112b4e:	e002      	b.n	8112b56 <_printf_i+0xf2>
 8112b50:	0669      	lsls	r1, r5, #25
 8112b52:	d5fb      	bpl.n	8112b4c <_printf_i+0xe8>
 8112b54:	881d      	ldrh	r5, [r3, #0]
 8112b56:	4854      	ldr	r0, [pc, #336]	; (8112ca8 <_printf_i+0x244>)
 8112b58:	2f6f      	cmp	r7, #111	; 0x6f
 8112b5a:	bf0c      	ite	eq
 8112b5c:	2308      	moveq	r3, #8
 8112b5e:	230a      	movne	r3, #10
 8112b60:	2100      	movs	r1, #0
 8112b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8112b66:	6866      	ldr	r6, [r4, #4]
 8112b68:	60a6      	str	r6, [r4, #8]
 8112b6a:	2e00      	cmp	r6, #0
 8112b6c:	bfa2      	ittt	ge
 8112b6e:	6821      	ldrge	r1, [r4, #0]
 8112b70:	f021 0104 	bicge.w	r1, r1, #4
 8112b74:	6021      	strge	r1, [r4, #0]
 8112b76:	b90d      	cbnz	r5, 8112b7c <_printf_i+0x118>
 8112b78:	2e00      	cmp	r6, #0
 8112b7a:	d04d      	beq.n	8112c18 <_printf_i+0x1b4>
 8112b7c:	4616      	mov	r6, r2
 8112b7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8112b82:	fb03 5711 	mls	r7, r3, r1, r5
 8112b86:	5dc7      	ldrb	r7, [r0, r7]
 8112b88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8112b8c:	462f      	mov	r7, r5
 8112b8e:	42bb      	cmp	r3, r7
 8112b90:	460d      	mov	r5, r1
 8112b92:	d9f4      	bls.n	8112b7e <_printf_i+0x11a>
 8112b94:	2b08      	cmp	r3, #8
 8112b96:	d10b      	bne.n	8112bb0 <_printf_i+0x14c>
 8112b98:	6823      	ldr	r3, [r4, #0]
 8112b9a:	07df      	lsls	r7, r3, #31
 8112b9c:	d508      	bpl.n	8112bb0 <_printf_i+0x14c>
 8112b9e:	6923      	ldr	r3, [r4, #16]
 8112ba0:	6861      	ldr	r1, [r4, #4]
 8112ba2:	4299      	cmp	r1, r3
 8112ba4:	bfde      	ittt	le
 8112ba6:	2330      	movle	r3, #48	; 0x30
 8112ba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8112bac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8112bb0:	1b92      	subs	r2, r2, r6
 8112bb2:	6122      	str	r2, [r4, #16]
 8112bb4:	f8cd a000 	str.w	sl, [sp]
 8112bb8:	464b      	mov	r3, r9
 8112bba:	aa03      	add	r2, sp, #12
 8112bbc:	4621      	mov	r1, r4
 8112bbe:	4640      	mov	r0, r8
 8112bc0:	f7ff fee2 	bl	8112988 <_printf_common>
 8112bc4:	3001      	adds	r0, #1
 8112bc6:	d14c      	bne.n	8112c62 <_printf_i+0x1fe>
 8112bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8112bcc:	b004      	add	sp, #16
 8112bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112bd2:	4835      	ldr	r0, [pc, #212]	; (8112ca8 <_printf_i+0x244>)
 8112bd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8112bd8:	6823      	ldr	r3, [r4, #0]
 8112bda:	680e      	ldr	r6, [r1, #0]
 8112bdc:	061f      	lsls	r7, r3, #24
 8112bde:	f856 5b04 	ldr.w	r5, [r6], #4
 8112be2:	600e      	str	r6, [r1, #0]
 8112be4:	d514      	bpl.n	8112c10 <_printf_i+0x1ac>
 8112be6:	07d9      	lsls	r1, r3, #31
 8112be8:	bf44      	itt	mi
 8112bea:	f043 0320 	orrmi.w	r3, r3, #32
 8112bee:	6023      	strmi	r3, [r4, #0]
 8112bf0:	b91d      	cbnz	r5, 8112bfa <_printf_i+0x196>
 8112bf2:	6823      	ldr	r3, [r4, #0]
 8112bf4:	f023 0320 	bic.w	r3, r3, #32
 8112bf8:	6023      	str	r3, [r4, #0]
 8112bfa:	2310      	movs	r3, #16
 8112bfc:	e7b0      	b.n	8112b60 <_printf_i+0xfc>
 8112bfe:	6823      	ldr	r3, [r4, #0]
 8112c00:	f043 0320 	orr.w	r3, r3, #32
 8112c04:	6023      	str	r3, [r4, #0]
 8112c06:	2378      	movs	r3, #120	; 0x78
 8112c08:	4828      	ldr	r0, [pc, #160]	; (8112cac <_printf_i+0x248>)
 8112c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8112c0e:	e7e3      	b.n	8112bd8 <_printf_i+0x174>
 8112c10:	065e      	lsls	r6, r3, #25
 8112c12:	bf48      	it	mi
 8112c14:	b2ad      	uxthmi	r5, r5
 8112c16:	e7e6      	b.n	8112be6 <_printf_i+0x182>
 8112c18:	4616      	mov	r6, r2
 8112c1a:	e7bb      	b.n	8112b94 <_printf_i+0x130>
 8112c1c:	680b      	ldr	r3, [r1, #0]
 8112c1e:	6826      	ldr	r6, [r4, #0]
 8112c20:	6960      	ldr	r0, [r4, #20]
 8112c22:	1d1d      	adds	r5, r3, #4
 8112c24:	600d      	str	r5, [r1, #0]
 8112c26:	0635      	lsls	r5, r6, #24
 8112c28:	681b      	ldr	r3, [r3, #0]
 8112c2a:	d501      	bpl.n	8112c30 <_printf_i+0x1cc>
 8112c2c:	6018      	str	r0, [r3, #0]
 8112c2e:	e002      	b.n	8112c36 <_printf_i+0x1d2>
 8112c30:	0671      	lsls	r1, r6, #25
 8112c32:	d5fb      	bpl.n	8112c2c <_printf_i+0x1c8>
 8112c34:	8018      	strh	r0, [r3, #0]
 8112c36:	2300      	movs	r3, #0
 8112c38:	6123      	str	r3, [r4, #16]
 8112c3a:	4616      	mov	r6, r2
 8112c3c:	e7ba      	b.n	8112bb4 <_printf_i+0x150>
 8112c3e:	680b      	ldr	r3, [r1, #0]
 8112c40:	1d1a      	adds	r2, r3, #4
 8112c42:	600a      	str	r2, [r1, #0]
 8112c44:	681e      	ldr	r6, [r3, #0]
 8112c46:	6862      	ldr	r2, [r4, #4]
 8112c48:	2100      	movs	r1, #0
 8112c4a:	4630      	mov	r0, r6
 8112c4c:	f7ed fb50 	bl	81002f0 <memchr>
 8112c50:	b108      	cbz	r0, 8112c56 <_printf_i+0x1f2>
 8112c52:	1b80      	subs	r0, r0, r6
 8112c54:	6060      	str	r0, [r4, #4]
 8112c56:	6863      	ldr	r3, [r4, #4]
 8112c58:	6123      	str	r3, [r4, #16]
 8112c5a:	2300      	movs	r3, #0
 8112c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8112c60:	e7a8      	b.n	8112bb4 <_printf_i+0x150>
 8112c62:	6923      	ldr	r3, [r4, #16]
 8112c64:	4632      	mov	r2, r6
 8112c66:	4649      	mov	r1, r9
 8112c68:	4640      	mov	r0, r8
 8112c6a:	47d0      	blx	sl
 8112c6c:	3001      	adds	r0, #1
 8112c6e:	d0ab      	beq.n	8112bc8 <_printf_i+0x164>
 8112c70:	6823      	ldr	r3, [r4, #0]
 8112c72:	079b      	lsls	r3, r3, #30
 8112c74:	d413      	bmi.n	8112c9e <_printf_i+0x23a>
 8112c76:	68e0      	ldr	r0, [r4, #12]
 8112c78:	9b03      	ldr	r3, [sp, #12]
 8112c7a:	4298      	cmp	r0, r3
 8112c7c:	bfb8      	it	lt
 8112c7e:	4618      	movlt	r0, r3
 8112c80:	e7a4      	b.n	8112bcc <_printf_i+0x168>
 8112c82:	2301      	movs	r3, #1
 8112c84:	4632      	mov	r2, r6
 8112c86:	4649      	mov	r1, r9
 8112c88:	4640      	mov	r0, r8
 8112c8a:	47d0      	blx	sl
 8112c8c:	3001      	adds	r0, #1
 8112c8e:	d09b      	beq.n	8112bc8 <_printf_i+0x164>
 8112c90:	3501      	adds	r5, #1
 8112c92:	68e3      	ldr	r3, [r4, #12]
 8112c94:	9903      	ldr	r1, [sp, #12]
 8112c96:	1a5b      	subs	r3, r3, r1
 8112c98:	42ab      	cmp	r3, r5
 8112c9a:	dcf2      	bgt.n	8112c82 <_printf_i+0x21e>
 8112c9c:	e7eb      	b.n	8112c76 <_printf_i+0x212>
 8112c9e:	2500      	movs	r5, #0
 8112ca0:	f104 0619 	add.w	r6, r4, #25
 8112ca4:	e7f5      	b.n	8112c92 <_printf_i+0x22e>
 8112ca6:	bf00      	nop
 8112ca8:	08116cde 	.word	0x08116cde
 8112cac:	08116cef 	.word	0x08116cef

08112cb0 <iprintf>:
 8112cb0:	b40f      	push	{r0, r1, r2, r3}
 8112cb2:	4b0a      	ldr	r3, [pc, #40]	; (8112cdc <iprintf+0x2c>)
 8112cb4:	b513      	push	{r0, r1, r4, lr}
 8112cb6:	681c      	ldr	r4, [r3, #0]
 8112cb8:	b124      	cbz	r4, 8112cc4 <iprintf+0x14>
 8112cba:	69a3      	ldr	r3, [r4, #24]
 8112cbc:	b913      	cbnz	r3, 8112cc4 <iprintf+0x14>
 8112cbe:	4620      	mov	r0, r4
 8112cc0:	f7ff fa48 	bl	8112154 <__sinit>
 8112cc4:	ab05      	add	r3, sp, #20
 8112cc6:	9a04      	ldr	r2, [sp, #16]
 8112cc8:	68a1      	ldr	r1, [r4, #8]
 8112cca:	9301      	str	r3, [sp, #4]
 8112ccc:	4620      	mov	r0, r4
 8112cce:	f001 ff35 	bl	8114b3c <_vfiprintf_r>
 8112cd2:	b002      	add	sp, #8
 8112cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112cd8:	b004      	add	sp, #16
 8112cda:	4770      	bx	lr
 8112cdc:	1000002c 	.word	0x1000002c

08112ce0 <_puts_r>:
 8112ce0:	b570      	push	{r4, r5, r6, lr}
 8112ce2:	460e      	mov	r6, r1
 8112ce4:	4605      	mov	r5, r0
 8112ce6:	b118      	cbz	r0, 8112cf0 <_puts_r+0x10>
 8112ce8:	6983      	ldr	r3, [r0, #24]
 8112cea:	b90b      	cbnz	r3, 8112cf0 <_puts_r+0x10>
 8112cec:	f7ff fa32 	bl	8112154 <__sinit>
 8112cf0:	69ab      	ldr	r3, [r5, #24]
 8112cf2:	68ac      	ldr	r4, [r5, #8]
 8112cf4:	b913      	cbnz	r3, 8112cfc <_puts_r+0x1c>
 8112cf6:	4628      	mov	r0, r5
 8112cf8:	f7ff fa2c 	bl	8112154 <__sinit>
 8112cfc:	4b2c      	ldr	r3, [pc, #176]	; (8112db0 <_puts_r+0xd0>)
 8112cfe:	429c      	cmp	r4, r3
 8112d00:	d120      	bne.n	8112d44 <_puts_r+0x64>
 8112d02:	686c      	ldr	r4, [r5, #4]
 8112d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8112d06:	07db      	lsls	r3, r3, #31
 8112d08:	d405      	bmi.n	8112d16 <_puts_r+0x36>
 8112d0a:	89a3      	ldrh	r3, [r4, #12]
 8112d0c:	0598      	lsls	r0, r3, #22
 8112d0e:	d402      	bmi.n	8112d16 <_puts_r+0x36>
 8112d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8112d12:	f7ff fae2 	bl	81122da <__retarget_lock_acquire_recursive>
 8112d16:	89a3      	ldrh	r3, [r4, #12]
 8112d18:	0719      	lsls	r1, r3, #28
 8112d1a:	d51d      	bpl.n	8112d58 <_puts_r+0x78>
 8112d1c:	6923      	ldr	r3, [r4, #16]
 8112d1e:	b1db      	cbz	r3, 8112d58 <_puts_r+0x78>
 8112d20:	3e01      	subs	r6, #1
 8112d22:	68a3      	ldr	r3, [r4, #8]
 8112d24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8112d28:	3b01      	subs	r3, #1
 8112d2a:	60a3      	str	r3, [r4, #8]
 8112d2c:	bb39      	cbnz	r1, 8112d7e <_puts_r+0x9e>
 8112d2e:	2b00      	cmp	r3, #0
 8112d30:	da38      	bge.n	8112da4 <_puts_r+0xc4>
 8112d32:	4622      	mov	r2, r4
 8112d34:	210a      	movs	r1, #10
 8112d36:	4628      	mov	r0, r5
 8112d38:	f000 fa1e 	bl	8113178 <__swbuf_r>
 8112d3c:	3001      	adds	r0, #1
 8112d3e:	d011      	beq.n	8112d64 <_puts_r+0x84>
 8112d40:	250a      	movs	r5, #10
 8112d42:	e011      	b.n	8112d68 <_puts_r+0x88>
 8112d44:	4b1b      	ldr	r3, [pc, #108]	; (8112db4 <_puts_r+0xd4>)
 8112d46:	429c      	cmp	r4, r3
 8112d48:	d101      	bne.n	8112d4e <_puts_r+0x6e>
 8112d4a:	68ac      	ldr	r4, [r5, #8]
 8112d4c:	e7da      	b.n	8112d04 <_puts_r+0x24>
 8112d4e:	4b1a      	ldr	r3, [pc, #104]	; (8112db8 <_puts_r+0xd8>)
 8112d50:	429c      	cmp	r4, r3
 8112d52:	bf08      	it	eq
 8112d54:	68ec      	ldreq	r4, [r5, #12]
 8112d56:	e7d5      	b.n	8112d04 <_puts_r+0x24>
 8112d58:	4621      	mov	r1, r4
 8112d5a:	4628      	mov	r0, r5
 8112d5c:	f000 fa70 	bl	8113240 <__swsetup_r>
 8112d60:	2800      	cmp	r0, #0
 8112d62:	d0dd      	beq.n	8112d20 <_puts_r+0x40>
 8112d64:	f04f 35ff 	mov.w	r5, #4294967295
 8112d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8112d6a:	07da      	lsls	r2, r3, #31
 8112d6c:	d405      	bmi.n	8112d7a <_puts_r+0x9a>
 8112d6e:	89a3      	ldrh	r3, [r4, #12]
 8112d70:	059b      	lsls	r3, r3, #22
 8112d72:	d402      	bmi.n	8112d7a <_puts_r+0x9a>
 8112d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8112d76:	f7ff fab1 	bl	81122dc <__retarget_lock_release_recursive>
 8112d7a:	4628      	mov	r0, r5
 8112d7c:	bd70      	pop	{r4, r5, r6, pc}
 8112d7e:	2b00      	cmp	r3, #0
 8112d80:	da04      	bge.n	8112d8c <_puts_r+0xac>
 8112d82:	69a2      	ldr	r2, [r4, #24]
 8112d84:	429a      	cmp	r2, r3
 8112d86:	dc06      	bgt.n	8112d96 <_puts_r+0xb6>
 8112d88:	290a      	cmp	r1, #10
 8112d8a:	d004      	beq.n	8112d96 <_puts_r+0xb6>
 8112d8c:	6823      	ldr	r3, [r4, #0]
 8112d8e:	1c5a      	adds	r2, r3, #1
 8112d90:	6022      	str	r2, [r4, #0]
 8112d92:	7019      	strb	r1, [r3, #0]
 8112d94:	e7c5      	b.n	8112d22 <_puts_r+0x42>
 8112d96:	4622      	mov	r2, r4
 8112d98:	4628      	mov	r0, r5
 8112d9a:	f000 f9ed 	bl	8113178 <__swbuf_r>
 8112d9e:	3001      	adds	r0, #1
 8112da0:	d1bf      	bne.n	8112d22 <_puts_r+0x42>
 8112da2:	e7df      	b.n	8112d64 <_puts_r+0x84>
 8112da4:	6823      	ldr	r3, [r4, #0]
 8112da6:	250a      	movs	r5, #10
 8112da8:	1c5a      	adds	r2, r3, #1
 8112daa:	6022      	str	r2, [r4, #0]
 8112dac:	701d      	strb	r5, [r3, #0]
 8112dae:	e7db      	b.n	8112d68 <_puts_r+0x88>
 8112db0:	08116c88 	.word	0x08116c88
 8112db4:	08116ca8 	.word	0x08116ca8
 8112db8:	08116c68 	.word	0x08116c68

08112dbc <puts>:
 8112dbc:	4b02      	ldr	r3, [pc, #8]	; (8112dc8 <puts+0xc>)
 8112dbe:	4601      	mov	r1, r0
 8112dc0:	6818      	ldr	r0, [r3, #0]
 8112dc2:	f7ff bf8d 	b.w	8112ce0 <_puts_r>
 8112dc6:	bf00      	nop
 8112dc8:	1000002c 	.word	0x1000002c

08112dcc <rand>:
 8112dcc:	4b17      	ldr	r3, [pc, #92]	; (8112e2c <rand+0x60>)
 8112dce:	b510      	push	{r4, lr}
 8112dd0:	681c      	ldr	r4, [r3, #0]
 8112dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8112dd4:	b9b3      	cbnz	r3, 8112e04 <rand+0x38>
 8112dd6:	2018      	movs	r0, #24
 8112dd8:	f001 fa94 	bl	8114304 <malloc>
 8112ddc:	63a0      	str	r0, [r4, #56]	; 0x38
 8112dde:	b928      	cbnz	r0, 8112dec <rand+0x20>
 8112de0:	4602      	mov	r2, r0
 8112de2:	4b13      	ldr	r3, [pc, #76]	; (8112e30 <rand+0x64>)
 8112de4:	4813      	ldr	r0, [pc, #76]	; (8112e34 <rand+0x68>)
 8112de6:	214e      	movs	r1, #78	; 0x4e
 8112de8:	f000 fa98 	bl	811331c <__assert_func>
 8112dec:	4a12      	ldr	r2, [pc, #72]	; (8112e38 <rand+0x6c>)
 8112dee:	4b13      	ldr	r3, [pc, #76]	; (8112e3c <rand+0x70>)
 8112df0:	e9c0 2300 	strd	r2, r3, [r0]
 8112df4:	4b12      	ldr	r3, [pc, #72]	; (8112e40 <rand+0x74>)
 8112df6:	6083      	str	r3, [r0, #8]
 8112df8:	230b      	movs	r3, #11
 8112dfa:	8183      	strh	r3, [r0, #12]
 8112dfc:	2201      	movs	r2, #1
 8112dfe:	2300      	movs	r3, #0
 8112e00:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8112e04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8112e06:	480f      	ldr	r0, [pc, #60]	; (8112e44 <rand+0x78>)
 8112e08:	690a      	ldr	r2, [r1, #16]
 8112e0a:	694b      	ldr	r3, [r1, #20]
 8112e0c:	4c0e      	ldr	r4, [pc, #56]	; (8112e48 <rand+0x7c>)
 8112e0e:	4350      	muls	r0, r2
 8112e10:	fb04 0003 	mla	r0, r4, r3, r0
 8112e14:	fba2 3404 	umull	r3, r4, r2, r4
 8112e18:	1c5a      	adds	r2, r3, #1
 8112e1a:	4404      	add	r4, r0
 8112e1c:	f144 0000 	adc.w	r0, r4, #0
 8112e20:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8112e24:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8112e28:	bd10      	pop	{r4, pc}
 8112e2a:	bf00      	nop
 8112e2c:	1000002c 	.word	0x1000002c
 8112e30:	08116d00 	.word	0x08116d00
 8112e34:	08116d17 	.word	0x08116d17
 8112e38:	abcd330e 	.word	0xabcd330e
 8112e3c:	e66d1234 	.word	0xe66d1234
 8112e40:	0005deec 	.word	0x0005deec
 8112e44:	5851f42d 	.word	0x5851f42d
 8112e48:	4c957f2d 	.word	0x4c957f2d

08112e4c <cleanup_glue>:
 8112e4c:	b538      	push	{r3, r4, r5, lr}
 8112e4e:	460c      	mov	r4, r1
 8112e50:	6809      	ldr	r1, [r1, #0]
 8112e52:	4605      	mov	r5, r0
 8112e54:	b109      	cbz	r1, 8112e5a <cleanup_glue+0xe>
 8112e56:	f7ff fff9 	bl	8112e4c <cleanup_glue>
 8112e5a:	4621      	mov	r1, r4
 8112e5c:	4628      	mov	r0, r5
 8112e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8112e62:	f001 bdf1 	b.w	8114a48 <_free_r>
	...

08112e68 <_reclaim_reent>:
 8112e68:	4b2c      	ldr	r3, [pc, #176]	; (8112f1c <_reclaim_reent+0xb4>)
 8112e6a:	681b      	ldr	r3, [r3, #0]
 8112e6c:	4283      	cmp	r3, r0
 8112e6e:	b570      	push	{r4, r5, r6, lr}
 8112e70:	4604      	mov	r4, r0
 8112e72:	d051      	beq.n	8112f18 <_reclaim_reent+0xb0>
 8112e74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8112e76:	b143      	cbz	r3, 8112e8a <_reclaim_reent+0x22>
 8112e78:	68db      	ldr	r3, [r3, #12]
 8112e7a:	2b00      	cmp	r3, #0
 8112e7c:	d14a      	bne.n	8112f14 <_reclaim_reent+0xac>
 8112e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112e80:	6819      	ldr	r1, [r3, #0]
 8112e82:	b111      	cbz	r1, 8112e8a <_reclaim_reent+0x22>
 8112e84:	4620      	mov	r0, r4
 8112e86:	f001 fddf 	bl	8114a48 <_free_r>
 8112e8a:	6961      	ldr	r1, [r4, #20]
 8112e8c:	b111      	cbz	r1, 8112e94 <_reclaim_reent+0x2c>
 8112e8e:	4620      	mov	r0, r4
 8112e90:	f001 fdda 	bl	8114a48 <_free_r>
 8112e94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8112e96:	b111      	cbz	r1, 8112e9e <_reclaim_reent+0x36>
 8112e98:	4620      	mov	r0, r4
 8112e9a:	f001 fdd5 	bl	8114a48 <_free_r>
 8112e9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8112ea0:	b111      	cbz	r1, 8112ea8 <_reclaim_reent+0x40>
 8112ea2:	4620      	mov	r0, r4
 8112ea4:	f001 fdd0 	bl	8114a48 <_free_r>
 8112ea8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8112eaa:	b111      	cbz	r1, 8112eb2 <_reclaim_reent+0x4a>
 8112eac:	4620      	mov	r0, r4
 8112eae:	f001 fdcb 	bl	8114a48 <_free_r>
 8112eb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8112eb4:	b111      	cbz	r1, 8112ebc <_reclaim_reent+0x54>
 8112eb6:	4620      	mov	r0, r4
 8112eb8:	f001 fdc6 	bl	8114a48 <_free_r>
 8112ebc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8112ebe:	b111      	cbz	r1, 8112ec6 <_reclaim_reent+0x5e>
 8112ec0:	4620      	mov	r0, r4
 8112ec2:	f001 fdc1 	bl	8114a48 <_free_r>
 8112ec6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8112ec8:	b111      	cbz	r1, 8112ed0 <_reclaim_reent+0x68>
 8112eca:	4620      	mov	r0, r4
 8112ecc:	f001 fdbc 	bl	8114a48 <_free_r>
 8112ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8112ed2:	b111      	cbz	r1, 8112eda <_reclaim_reent+0x72>
 8112ed4:	4620      	mov	r0, r4
 8112ed6:	f001 fdb7 	bl	8114a48 <_free_r>
 8112eda:	69a3      	ldr	r3, [r4, #24]
 8112edc:	b1e3      	cbz	r3, 8112f18 <_reclaim_reent+0xb0>
 8112ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8112ee0:	4620      	mov	r0, r4
 8112ee2:	4798      	blx	r3
 8112ee4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8112ee6:	b1b9      	cbz	r1, 8112f18 <_reclaim_reent+0xb0>
 8112ee8:	4620      	mov	r0, r4
 8112eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8112eee:	f7ff bfad 	b.w	8112e4c <cleanup_glue>
 8112ef2:	5949      	ldr	r1, [r1, r5]
 8112ef4:	b941      	cbnz	r1, 8112f08 <_reclaim_reent+0xa0>
 8112ef6:	3504      	adds	r5, #4
 8112ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8112efa:	2d80      	cmp	r5, #128	; 0x80
 8112efc:	68d9      	ldr	r1, [r3, #12]
 8112efe:	d1f8      	bne.n	8112ef2 <_reclaim_reent+0x8a>
 8112f00:	4620      	mov	r0, r4
 8112f02:	f001 fda1 	bl	8114a48 <_free_r>
 8112f06:	e7ba      	b.n	8112e7e <_reclaim_reent+0x16>
 8112f08:	680e      	ldr	r6, [r1, #0]
 8112f0a:	4620      	mov	r0, r4
 8112f0c:	f001 fd9c 	bl	8114a48 <_free_r>
 8112f10:	4631      	mov	r1, r6
 8112f12:	e7ef      	b.n	8112ef4 <_reclaim_reent+0x8c>
 8112f14:	2500      	movs	r5, #0
 8112f16:	e7ef      	b.n	8112ef8 <_reclaim_reent+0x90>
 8112f18:	bd70      	pop	{r4, r5, r6, pc}
 8112f1a:	bf00      	nop
 8112f1c:	1000002c 	.word	0x1000002c

08112f20 <_sbrk_r>:
 8112f20:	b538      	push	{r3, r4, r5, lr}
 8112f22:	4d06      	ldr	r5, [pc, #24]	; (8112f3c <_sbrk_r+0x1c>)
 8112f24:	2300      	movs	r3, #0
 8112f26:	4604      	mov	r4, r0
 8112f28:	4608      	mov	r0, r1
 8112f2a:	602b      	str	r3, [r5, #0]
 8112f2c:	f7ff f858 	bl	8111fe0 <_sbrk>
 8112f30:	1c43      	adds	r3, r0, #1
 8112f32:	d102      	bne.n	8112f3a <_sbrk_r+0x1a>
 8112f34:	682b      	ldr	r3, [r5, #0]
 8112f36:	b103      	cbz	r3, 8112f3a <_sbrk_r+0x1a>
 8112f38:	6023      	str	r3, [r4, #0]
 8112f3a:	bd38      	pop	{r3, r4, r5, pc}
 8112f3c:	100087a8 	.word	0x100087a8

08112f40 <setvbuf>:
 8112f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8112f44:	461d      	mov	r5, r3
 8112f46:	4b5d      	ldr	r3, [pc, #372]	; (81130bc <setvbuf+0x17c>)
 8112f48:	681f      	ldr	r7, [r3, #0]
 8112f4a:	4604      	mov	r4, r0
 8112f4c:	460e      	mov	r6, r1
 8112f4e:	4690      	mov	r8, r2
 8112f50:	b127      	cbz	r7, 8112f5c <setvbuf+0x1c>
 8112f52:	69bb      	ldr	r3, [r7, #24]
 8112f54:	b913      	cbnz	r3, 8112f5c <setvbuf+0x1c>
 8112f56:	4638      	mov	r0, r7
 8112f58:	f7ff f8fc 	bl	8112154 <__sinit>
 8112f5c:	4b58      	ldr	r3, [pc, #352]	; (81130c0 <setvbuf+0x180>)
 8112f5e:	429c      	cmp	r4, r3
 8112f60:	d167      	bne.n	8113032 <setvbuf+0xf2>
 8112f62:	687c      	ldr	r4, [r7, #4]
 8112f64:	f1b8 0f02 	cmp.w	r8, #2
 8112f68:	d006      	beq.n	8112f78 <setvbuf+0x38>
 8112f6a:	f1b8 0f01 	cmp.w	r8, #1
 8112f6e:	f200 809f 	bhi.w	81130b0 <setvbuf+0x170>
 8112f72:	2d00      	cmp	r5, #0
 8112f74:	f2c0 809c 	blt.w	81130b0 <setvbuf+0x170>
 8112f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8112f7a:	07db      	lsls	r3, r3, #31
 8112f7c:	d405      	bmi.n	8112f8a <setvbuf+0x4a>
 8112f7e:	89a3      	ldrh	r3, [r4, #12]
 8112f80:	0598      	lsls	r0, r3, #22
 8112f82:	d402      	bmi.n	8112f8a <setvbuf+0x4a>
 8112f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8112f86:	f7ff f9a8 	bl	81122da <__retarget_lock_acquire_recursive>
 8112f8a:	4621      	mov	r1, r4
 8112f8c:	4638      	mov	r0, r7
 8112f8e:	f001 f8f1 	bl	8114174 <_fflush_r>
 8112f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8112f94:	b141      	cbz	r1, 8112fa8 <setvbuf+0x68>
 8112f96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8112f9a:	4299      	cmp	r1, r3
 8112f9c:	d002      	beq.n	8112fa4 <setvbuf+0x64>
 8112f9e:	4638      	mov	r0, r7
 8112fa0:	f001 fd52 	bl	8114a48 <_free_r>
 8112fa4:	2300      	movs	r3, #0
 8112fa6:	6363      	str	r3, [r4, #52]	; 0x34
 8112fa8:	2300      	movs	r3, #0
 8112faa:	61a3      	str	r3, [r4, #24]
 8112fac:	6063      	str	r3, [r4, #4]
 8112fae:	89a3      	ldrh	r3, [r4, #12]
 8112fb0:	0619      	lsls	r1, r3, #24
 8112fb2:	d503      	bpl.n	8112fbc <setvbuf+0x7c>
 8112fb4:	6921      	ldr	r1, [r4, #16]
 8112fb6:	4638      	mov	r0, r7
 8112fb8:	f001 fd46 	bl	8114a48 <_free_r>
 8112fbc:	89a3      	ldrh	r3, [r4, #12]
 8112fbe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8112fc2:	f023 0303 	bic.w	r3, r3, #3
 8112fc6:	f1b8 0f02 	cmp.w	r8, #2
 8112fca:	81a3      	strh	r3, [r4, #12]
 8112fcc:	d06c      	beq.n	81130a8 <setvbuf+0x168>
 8112fce:	ab01      	add	r3, sp, #4
 8112fd0:	466a      	mov	r2, sp
 8112fd2:	4621      	mov	r1, r4
 8112fd4:	4638      	mov	r0, r7
 8112fd6:	f001 f931 	bl	811423c <__swhatbuf_r>
 8112fda:	89a3      	ldrh	r3, [r4, #12]
 8112fdc:	4318      	orrs	r0, r3
 8112fde:	81a0      	strh	r0, [r4, #12]
 8112fe0:	2d00      	cmp	r5, #0
 8112fe2:	d130      	bne.n	8113046 <setvbuf+0x106>
 8112fe4:	9d00      	ldr	r5, [sp, #0]
 8112fe6:	4628      	mov	r0, r5
 8112fe8:	f001 f98c 	bl	8114304 <malloc>
 8112fec:	4606      	mov	r6, r0
 8112fee:	2800      	cmp	r0, #0
 8112ff0:	d155      	bne.n	811309e <setvbuf+0x15e>
 8112ff2:	f8dd 9000 	ldr.w	r9, [sp]
 8112ff6:	45a9      	cmp	r9, r5
 8112ff8:	d14a      	bne.n	8113090 <setvbuf+0x150>
 8112ffa:	f04f 35ff 	mov.w	r5, #4294967295
 8112ffe:	2200      	movs	r2, #0
 8113000:	60a2      	str	r2, [r4, #8]
 8113002:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8113006:	6022      	str	r2, [r4, #0]
 8113008:	6122      	str	r2, [r4, #16]
 811300a:	2201      	movs	r2, #1
 811300c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8113010:	6162      	str	r2, [r4, #20]
 8113012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8113014:	f043 0302 	orr.w	r3, r3, #2
 8113018:	07d2      	lsls	r2, r2, #31
 811301a:	81a3      	strh	r3, [r4, #12]
 811301c:	d405      	bmi.n	811302a <setvbuf+0xea>
 811301e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8113022:	d102      	bne.n	811302a <setvbuf+0xea>
 8113024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8113026:	f7ff f959 	bl	81122dc <__retarget_lock_release_recursive>
 811302a:	4628      	mov	r0, r5
 811302c:	b003      	add	sp, #12
 811302e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8113032:	4b24      	ldr	r3, [pc, #144]	; (81130c4 <setvbuf+0x184>)
 8113034:	429c      	cmp	r4, r3
 8113036:	d101      	bne.n	811303c <setvbuf+0xfc>
 8113038:	68bc      	ldr	r4, [r7, #8]
 811303a:	e793      	b.n	8112f64 <setvbuf+0x24>
 811303c:	4b22      	ldr	r3, [pc, #136]	; (81130c8 <setvbuf+0x188>)
 811303e:	429c      	cmp	r4, r3
 8113040:	bf08      	it	eq
 8113042:	68fc      	ldreq	r4, [r7, #12]
 8113044:	e78e      	b.n	8112f64 <setvbuf+0x24>
 8113046:	2e00      	cmp	r6, #0
 8113048:	d0cd      	beq.n	8112fe6 <setvbuf+0xa6>
 811304a:	69bb      	ldr	r3, [r7, #24]
 811304c:	b913      	cbnz	r3, 8113054 <setvbuf+0x114>
 811304e:	4638      	mov	r0, r7
 8113050:	f7ff f880 	bl	8112154 <__sinit>
 8113054:	f1b8 0f01 	cmp.w	r8, #1
 8113058:	bf08      	it	eq
 811305a:	89a3      	ldrheq	r3, [r4, #12]
 811305c:	6026      	str	r6, [r4, #0]
 811305e:	bf04      	itt	eq
 8113060:	f043 0301 	orreq.w	r3, r3, #1
 8113064:	81a3      	strheq	r3, [r4, #12]
 8113066:	89a2      	ldrh	r2, [r4, #12]
 8113068:	f012 0308 	ands.w	r3, r2, #8
 811306c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8113070:	d01c      	beq.n	81130ac <setvbuf+0x16c>
 8113072:	07d3      	lsls	r3, r2, #31
 8113074:	bf41      	itttt	mi
 8113076:	2300      	movmi	r3, #0
 8113078:	426d      	negmi	r5, r5
 811307a:	60a3      	strmi	r3, [r4, #8]
 811307c:	61a5      	strmi	r5, [r4, #24]
 811307e:	bf58      	it	pl
 8113080:	60a5      	strpl	r5, [r4, #8]
 8113082:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8113084:	f015 0501 	ands.w	r5, r5, #1
 8113088:	d115      	bne.n	81130b6 <setvbuf+0x176>
 811308a:	f412 7f00 	tst.w	r2, #512	; 0x200
 811308e:	e7c8      	b.n	8113022 <setvbuf+0xe2>
 8113090:	4648      	mov	r0, r9
 8113092:	f001 f937 	bl	8114304 <malloc>
 8113096:	4606      	mov	r6, r0
 8113098:	2800      	cmp	r0, #0
 811309a:	d0ae      	beq.n	8112ffa <setvbuf+0xba>
 811309c:	464d      	mov	r5, r9
 811309e:	89a3      	ldrh	r3, [r4, #12]
 81130a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81130a4:	81a3      	strh	r3, [r4, #12]
 81130a6:	e7d0      	b.n	811304a <setvbuf+0x10a>
 81130a8:	2500      	movs	r5, #0
 81130aa:	e7a8      	b.n	8112ffe <setvbuf+0xbe>
 81130ac:	60a3      	str	r3, [r4, #8]
 81130ae:	e7e8      	b.n	8113082 <setvbuf+0x142>
 81130b0:	f04f 35ff 	mov.w	r5, #4294967295
 81130b4:	e7b9      	b.n	811302a <setvbuf+0xea>
 81130b6:	2500      	movs	r5, #0
 81130b8:	e7b7      	b.n	811302a <setvbuf+0xea>
 81130ba:	bf00      	nop
 81130bc:	1000002c 	.word	0x1000002c
 81130c0:	08116c88 	.word	0x08116c88
 81130c4:	08116ca8 	.word	0x08116ca8
 81130c8:	08116c68 	.word	0x08116c68

081130cc <__sread>:
 81130cc:	b510      	push	{r4, lr}
 81130ce:	460c      	mov	r4, r1
 81130d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81130d4:	f001 fe62 	bl	8114d9c <_read_r>
 81130d8:	2800      	cmp	r0, #0
 81130da:	bfab      	itete	ge
 81130dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81130de:	89a3      	ldrhlt	r3, [r4, #12]
 81130e0:	181b      	addge	r3, r3, r0
 81130e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81130e6:	bfac      	ite	ge
 81130e8:	6563      	strge	r3, [r4, #84]	; 0x54
 81130ea:	81a3      	strhlt	r3, [r4, #12]
 81130ec:	bd10      	pop	{r4, pc}

081130ee <__swrite>:
 81130ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81130f2:	461f      	mov	r7, r3
 81130f4:	898b      	ldrh	r3, [r1, #12]
 81130f6:	05db      	lsls	r3, r3, #23
 81130f8:	4605      	mov	r5, r0
 81130fa:	460c      	mov	r4, r1
 81130fc:	4616      	mov	r6, r2
 81130fe:	d505      	bpl.n	811310c <__swrite+0x1e>
 8113100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113104:	2302      	movs	r3, #2
 8113106:	2200      	movs	r2, #0
 8113108:	f001 f886 	bl	8114218 <_lseek_r>
 811310c:	89a3      	ldrh	r3, [r4, #12]
 811310e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8113116:	81a3      	strh	r3, [r4, #12]
 8113118:	4632      	mov	r2, r6
 811311a:	463b      	mov	r3, r7
 811311c:	4628      	mov	r0, r5
 811311e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8113122:	f000 b87b 	b.w	811321c <_write_r>

08113126 <__sseek>:
 8113126:	b510      	push	{r4, lr}
 8113128:	460c      	mov	r4, r1
 811312a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811312e:	f001 f873 	bl	8114218 <_lseek_r>
 8113132:	1c43      	adds	r3, r0, #1
 8113134:	89a3      	ldrh	r3, [r4, #12]
 8113136:	bf15      	itete	ne
 8113138:	6560      	strne	r0, [r4, #84]	; 0x54
 811313a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 811313e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8113142:	81a3      	strheq	r3, [r4, #12]
 8113144:	bf18      	it	ne
 8113146:	81a3      	strhne	r3, [r4, #12]
 8113148:	bd10      	pop	{r4, pc}

0811314a <__sclose>:
 811314a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811314e:	f000 b903 	b.w	8113358 <_close_r>

08113152 <strncpy>:
 8113152:	b510      	push	{r4, lr}
 8113154:	3901      	subs	r1, #1
 8113156:	4603      	mov	r3, r0
 8113158:	b132      	cbz	r2, 8113168 <strncpy+0x16>
 811315a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811315e:	f803 4b01 	strb.w	r4, [r3], #1
 8113162:	3a01      	subs	r2, #1
 8113164:	2c00      	cmp	r4, #0
 8113166:	d1f7      	bne.n	8113158 <strncpy+0x6>
 8113168:	441a      	add	r2, r3
 811316a:	2100      	movs	r1, #0
 811316c:	4293      	cmp	r3, r2
 811316e:	d100      	bne.n	8113172 <strncpy+0x20>
 8113170:	bd10      	pop	{r4, pc}
 8113172:	f803 1b01 	strb.w	r1, [r3], #1
 8113176:	e7f9      	b.n	811316c <strncpy+0x1a>

08113178 <__swbuf_r>:
 8113178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811317a:	460e      	mov	r6, r1
 811317c:	4614      	mov	r4, r2
 811317e:	4605      	mov	r5, r0
 8113180:	b118      	cbz	r0, 811318a <__swbuf_r+0x12>
 8113182:	6983      	ldr	r3, [r0, #24]
 8113184:	b90b      	cbnz	r3, 811318a <__swbuf_r+0x12>
 8113186:	f7fe ffe5 	bl	8112154 <__sinit>
 811318a:	4b21      	ldr	r3, [pc, #132]	; (8113210 <__swbuf_r+0x98>)
 811318c:	429c      	cmp	r4, r3
 811318e:	d12b      	bne.n	81131e8 <__swbuf_r+0x70>
 8113190:	686c      	ldr	r4, [r5, #4]
 8113192:	69a3      	ldr	r3, [r4, #24]
 8113194:	60a3      	str	r3, [r4, #8]
 8113196:	89a3      	ldrh	r3, [r4, #12]
 8113198:	071a      	lsls	r2, r3, #28
 811319a:	d52f      	bpl.n	81131fc <__swbuf_r+0x84>
 811319c:	6923      	ldr	r3, [r4, #16]
 811319e:	b36b      	cbz	r3, 81131fc <__swbuf_r+0x84>
 81131a0:	6923      	ldr	r3, [r4, #16]
 81131a2:	6820      	ldr	r0, [r4, #0]
 81131a4:	1ac0      	subs	r0, r0, r3
 81131a6:	6963      	ldr	r3, [r4, #20]
 81131a8:	b2f6      	uxtb	r6, r6
 81131aa:	4283      	cmp	r3, r0
 81131ac:	4637      	mov	r7, r6
 81131ae:	dc04      	bgt.n	81131ba <__swbuf_r+0x42>
 81131b0:	4621      	mov	r1, r4
 81131b2:	4628      	mov	r0, r5
 81131b4:	f000 ffde 	bl	8114174 <_fflush_r>
 81131b8:	bb30      	cbnz	r0, 8113208 <__swbuf_r+0x90>
 81131ba:	68a3      	ldr	r3, [r4, #8]
 81131bc:	3b01      	subs	r3, #1
 81131be:	60a3      	str	r3, [r4, #8]
 81131c0:	6823      	ldr	r3, [r4, #0]
 81131c2:	1c5a      	adds	r2, r3, #1
 81131c4:	6022      	str	r2, [r4, #0]
 81131c6:	701e      	strb	r6, [r3, #0]
 81131c8:	6963      	ldr	r3, [r4, #20]
 81131ca:	3001      	adds	r0, #1
 81131cc:	4283      	cmp	r3, r0
 81131ce:	d004      	beq.n	81131da <__swbuf_r+0x62>
 81131d0:	89a3      	ldrh	r3, [r4, #12]
 81131d2:	07db      	lsls	r3, r3, #31
 81131d4:	d506      	bpl.n	81131e4 <__swbuf_r+0x6c>
 81131d6:	2e0a      	cmp	r6, #10
 81131d8:	d104      	bne.n	81131e4 <__swbuf_r+0x6c>
 81131da:	4621      	mov	r1, r4
 81131dc:	4628      	mov	r0, r5
 81131de:	f000 ffc9 	bl	8114174 <_fflush_r>
 81131e2:	b988      	cbnz	r0, 8113208 <__swbuf_r+0x90>
 81131e4:	4638      	mov	r0, r7
 81131e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81131e8:	4b0a      	ldr	r3, [pc, #40]	; (8113214 <__swbuf_r+0x9c>)
 81131ea:	429c      	cmp	r4, r3
 81131ec:	d101      	bne.n	81131f2 <__swbuf_r+0x7a>
 81131ee:	68ac      	ldr	r4, [r5, #8]
 81131f0:	e7cf      	b.n	8113192 <__swbuf_r+0x1a>
 81131f2:	4b09      	ldr	r3, [pc, #36]	; (8113218 <__swbuf_r+0xa0>)
 81131f4:	429c      	cmp	r4, r3
 81131f6:	bf08      	it	eq
 81131f8:	68ec      	ldreq	r4, [r5, #12]
 81131fa:	e7ca      	b.n	8113192 <__swbuf_r+0x1a>
 81131fc:	4621      	mov	r1, r4
 81131fe:	4628      	mov	r0, r5
 8113200:	f000 f81e 	bl	8113240 <__swsetup_r>
 8113204:	2800      	cmp	r0, #0
 8113206:	d0cb      	beq.n	81131a0 <__swbuf_r+0x28>
 8113208:	f04f 37ff 	mov.w	r7, #4294967295
 811320c:	e7ea      	b.n	81131e4 <__swbuf_r+0x6c>
 811320e:	bf00      	nop
 8113210:	08116c88 	.word	0x08116c88
 8113214:	08116ca8 	.word	0x08116ca8
 8113218:	08116c68 	.word	0x08116c68

0811321c <_write_r>:
 811321c:	b538      	push	{r3, r4, r5, lr}
 811321e:	4d07      	ldr	r5, [pc, #28]	; (811323c <_write_r+0x20>)
 8113220:	4604      	mov	r4, r0
 8113222:	4608      	mov	r0, r1
 8113224:	4611      	mov	r1, r2
 8113226:	2200      	movs	r2, #0
 8113228:	602a      	str	r2, [r5, #0]
 811322a:	461a      	mov	r2, r3
 811322c:	f7fe faf4 	bl	8111818 <_write>
 8113230:	1c43      	adds	r3, r0, #1
 8113232:	d102      	bne.n	811323a <_write_r+0x1e>
 8113234:	682b      	ldr	r3, [r5, #0]
 8113236:	b103      	cbz	r3, 811323a <_write_r+0x1e>
 8113238:	6023      	str	r3, [r4, #0]
 811323a:	bd38      	pop	{r3, r4, r5, pc}
 811323c:	100087a8 	.word	0x100087a8

08113240 <__swsetup_r>:
 8113240:	4b32      	ldr	r3, [pc, #200]	; (811330c <__swsetup_r+0xcc>)
 8113242:	b570      	push	{r4, r5, r6, lr}
 8113244:	681d      	ldr	r5, [r3, #0]
 8113246:	4606      	mov	r6, r0
 8113248:	460c      	mov	r4, r1
 811324a:	b125      	cbz	r5, 8113256 <__swsetup_r+0x16>
 811324c:	69ab      	ldr	r3, [r5, #24]
 811324e:	b913      	cbnz	r3, 8113256 <__swsetup_r+0x16>
 8113250:	4628      	mov	r0, r5
 8113252:	f7fe ff7f 	bl	8112154 <__sinit>
 8113256:	4b2e      	ldr	r3, [pc, #184]	; (8113310 <__swsetup_r+0xd0>)
 8113258:	429c      	cmp	r4, r3
 811325a:	d10f      	bne.n	811327c <__swsetup_r+0x3c>
 811325c:	686c      	ldr	r4, [r5, #4]
 811325e:	89a3      	ldrh	r3, [r4, #12]
 8113260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8113264:	0719      	lsls	r1, r3, #28
 8113266:	d42c      	bmi.n	81132c2 <__swsetup_r+0x82>
 8113268:	06dd      	lsls	r5, r3, #27
 811326a:	d411      	bmi.n	8113290 <__swsetup_r+0x50>
 811326c:	2309      	movs	r3, #9
 811326e:	6033      	str	r3, [r6, #0]
 8113270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8113274:	81a3      	strh	r3, [r4, #12]
 8113276:	f04f 30ff 	mov.w	r0, #4294967295
 811327a:	e03e      	b.n	81132fa <__swsetup_r+0xba>
 811327c:	4b25      	ldr	r3, [pc, #148]	; (8113314 <__swsetup_r+0xd4>)
 811327e:	429c      	cmp	r4, r3
 8113280:	d101      	bne.n	8113286 <__swsetup_r+0x46>
 8113282:	68ac      	ldr	r4, [r5, #8]
 8113284:	e7eb      	b.n	811325e <__swsetup_r+0x1e>
 8113286:	4b24      	ldr	r3, [pc, #144]	; (8113318 <__swsetup_r+0xd8>)
 8113288:	429c      	cmp	r4, r3
 811328a:	bf08      	it	eq
 811328c:	68ec      	ldreq	r4, [r5, #12]
 811328e:	e7e6      	b.n	811325e <__swsetup_r+0x1e>
 8113290:	0758      	lsls	r0, r3, #29
 8113292:	d512      	bpl.n	81132ba <__swsetup_r+0x7a>
 8113294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8113296:	b141      	cbz	r1, 81132aa <__swsetup_r+0x6a>
 8113298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811329c:	4299      	cmp	r1, r3
 811329e:	d002      	beq.n	81132a6 <__swsetup_r+0x66>
 81132a0:	4630      	mov	r0, r6
 81132a2:	f001 fbd1 	bl	8114a48 <_free_r>
 81132a6:	2300      	movs	r3, #0
 81132a8:	6363      	str	r3, [r4, #52]	; 0x34
 81132aa:	89a3      	ldrh	r3, [r4, #12]
 81132ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81132b0:	81a3      	strh	r3, [r4, #12]
 81132b2:	2300      	movs	r3, #0
 81132b4:	6063      	str	r3, [r4, #4]
 81132b6:	6923      	ldr	r3, [r4, #16]
 81132b8:	6023      	str	r3, [r4, #0]
 81132ba:	89a3      	ldrh	r3, [r4, #12]
 81132bc:	f043 0308 	orr.w	r3, r3, #8
 81132c0:	81a3      	strh	r3, [r4, #12]
 81132c2:	6923      	ldr	r3, [r4, #16]
 81132c4:	b94b      	cbnz	r3, 81132da <__swsetup_r+0x9a>
 81132c6:	89a3      	ldrh	r3, [r4, #12]
 81132c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81132cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81132d0:	d003      	beq.n	81132da <__swsetup_r+0x9a>
 81132d2:	4621      	mov	r1, r4
 81132d4:	4630      	mov	r0, r6
 81132d6:	f000 ffd5 	bl	8114284 <__smakebuf_r>
 81132da:	89a0      	ldrh	r0, [r4, #12]
 81132dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81132e0:	f010 0301 	ands.w	r3, r0, #1
 81132e4:	d00a      	beq.n	81132fc <__swsetup_r+0xbc>
 81132e6:	2300      	movs	r3, #0
 81132e8:	60a3      	str	r3, [r4, #8]
 81132ea:	6963      	ldr	r3, [r4, #20]
 81132ec:	425b      	negs	r3, r3
 81132ee:	61a3      	str	r3, [r4, #24]
 81132f0:	6923      	ldr	r3, [r4, #16]
 81132f2:	b943      	cbnz	r3, 8113306 <__swsetup_r+0xc6>
 81132f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81132f8:	d1ba      	bne.n	8113270 <__swsetup_r+0x30>
 81132fa:	bd70      	pop	{r4, r5, r6, pc}
 81132fc:	0781      	lsls	r1, r0, #30
 81132fe:	bf58      	it	pl
 8113300:	6963      	ldrpl	r3, [r4, #20]
 8113302:	60a3      	str	r3, [r4, #8]
 8113304:	e7f4      	b.n	81132f0 <__swsetup_r+0xb0>
 8113306:	2000      	movs	r0, #0
 8113308:	e7f7      	b.n	81132fa <__swsetup_r+0xba>
 811330a:	bf00      	nop
 811330c:	1000002c 	.word	0x1000002c
 8113310:	08116c88 	.word	0x08116c88
 8113314:	08116ca8 	.word	0x08116ca8
 8113318:	08116c68 	.word	0x08116c68

0811331c <__assert_func>:
 811331c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811331e:	4614      	mov	r4, r2
 8113320:	461a      	mov	r2, r3
 8113322:	4b09      	ldr	r3, [pc, #36]	; (8113348 <__assert_func+0x2c>)
 8113324:	681b      	ldr	r3, [r3, #0]
 8113326:	4605      	mov	r5, r0
 8113328:	68d8      	ldr	r0, [r3, #12]
 811332a:	b14c      	cbz	r4, 8113340 <__assert_func+0x24>
 811332c:	4b07      	ldr	r3, [pc, #28]	; (811334c <__assert_func+0x30>)
 811332e:	9100      	str	r1, [sp, #0]
 8113330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8113334:	4906      	ldr	r1, [pc, #24]	; (8113350 <__assert_func+0x34>)
 8113336:	462b      	mov	r3, r5
 8113338:	f000 ff58 	bl	81141ec <fiprintf>
 811333c:	f001 fd40 	bl	8114dc0 <abort>
 8113340:	4b04      	ldr	r3, [pc, #16]	; (8113354 <__assert_func+0x38>)
 8113342:	461c      	mov	r4, r3
 8113344:	e7f3      	b.n	811332e <__assert_func+0x12>
 8113346:	bf00      	nop
 8113348:	1000002c 	.word	0x1000002c
 811334c:	08116d76 	.word	0x08116d76
 8113350:	08116d83 	.word	0x08116d83
 8113354:	08116db1 	.word	0x08116db1

08113358 <_close_r>:
 8113358:	b538      	push	{r3, r4, r5, lr}
 811335a:	4d06      	ldr	r5, [pc, #24]	; (8113374 <_close_r+0x1c>)
 811335c:	2300      	movs	r3, #0
 811335e:	4604      	mov	r4, r0
 8113360:	4608      	mov	r0, r1
 8113362:	602b      	str	r3, [r5, #0]
 8113364:	f7fe fa84 	bl	8111870 <_close>
 8113368:	1c43      	adds	r3, r0, #1
 811336a:	d102      	bne.n	8113372 <_close_r+0x1a>
 811336c:	682b      	ldr	r3, [r5, #0]
 811336e:	b103      	cbz	r3, 8113372 <_close_r+0x1a>
 8113370:	6023      	str	r3, [r4, #0]
 8113372:	bd38      	pop	{r3, r4, r5, pc}
 8113374:	100087a8 	.word	0x100087a8

08113378 <quorem>:
 8113378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811337c:	6903      	ldr	r3, [r0, #16]
 811337e:	690c      	ldr	r4, [r1, #16]
 8113380:	42a3      	cmp	r3, r4
 8113382:	4607      	mov	r7, r0
 8113384:	f2c0 8081 	blt.w	811348a <quorem+0x112>
 8113388:	3c01      	subs	r4, #1
 811338a:	f101 0814 	add.w	r8, r1, #20
 811338e:	f100 0514 	add.w	r5, r0, #20
 8113392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8113396:	9301      	str	r3, [sp, #4]
 8113398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 811339c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81133a0:	3301      	adds	r3, #1
 81133a2:	429a      	cmp	r2, r3
 81133a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81133a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81133ac:	fbb2 f6f3 	udiv	r6, r2, r3
 81133b0:	d331      	bcc.n	8113416 <quorem+0x9e>
 81133b2:	f04f 0e00 	mov.w	lr, #0
 81133b6:	4640      	mov	r0, r8
 81133b8:	46ac      	mov	ip, r5
 81133ba:	46f2      	mov	sl, lr
 81133bc:	f850 2b04 	ldr.w	r2, [r0], #4
 81133c0:	b293      	uxth	r3, r2
 81133c2:	fb06 e303 	mla	r3, r6, r3, lr
 81133c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81133ca:	b29b      	uxth	r3, r3
 81133cc:	ebaa 0303 	sub.w	r3, sl, r3
 81133d0:	0c12      	lsrs	r2, r2, #16
 81133d2:	f8dc a000 	ldr.w	sl, [ip]
 81133d6:	fb06 e202 	mla	r2, r6, r2, lr
 81133da:	fa13 f38a 	uxtah	r3, r3, sl
 81133de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81133e2:	fa1f fa82 	uxth.w	sl, r2
 81133e6:	f8dc 2000 	ldr.w	r2, [ip]
 81133ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81133ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81133f2:	b29b      	uxth	r3, r3
 81133f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81133f8:	4581      	cmp	r9, r0
 81133fa:	f84c 3b04 	str.w	r3, [ip], #4
 81133fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8113402:	d2db      	bcs.n	81133bc <quorem+0x44>
 8113404:	f855 300b 	ldr.w	r3, [r5, fp]
 8113408:	b92b      	cbnz	r3, 8113416 <quorem+0x9e>
 811340a:	9b01      	ldr	r3, [sp, #4]
 811340c:	3b04      	subs	r3, #4
 811340e:	429d      	cmp	r5, r3
 8113410:	461a      	mov	r2, r3
 8113412:	d32e      	bcc.n	8113472 <quorem+0xfa>
 8113414:	613c      	str	r4, [r7, #16]
 8113416:	4638      	mov	r0, r7
 8113418:	f001 fa06 	bl	8114828 <__mcmp>
 811341c:	2800      	cmp	r0, #0
 811341e:	db24      	blt.n	811346a <quorem+0xf2>
 8113420:	3601      	adds	r6, #1
 8113422:	4628      	mov	r0, r5
 8113424:	f04f 0c00 	mov.w	ip, #0
 8113428:	f858 2b04 	ldr.w	r2, [r8], #4
 811342c:	f8d0 e000 	ldr.w	lr, [r0]
 8113430:	b293      	uxth	r3, r2
 8113432:	ebac 0303 	sub.w	r3, ip, r3
 8113436:	0c12      	lsrs	r2, r2, #16
 8113438:	fa13 f38e 	uxtah	r3, r3, lr
 811343c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8113440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8113444:	b29b      	uxth	r3, r3
 8113446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811344a:	45c1      	cmp	r9, r8
 811344c:	f840 3b04 	str.w	r3, [r0], #4
 8113450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8113454:	d2e8      	bcs.n	8113428 <quorem+0xb0>
 8113456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 811345a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811345e:	b922      	cbnz	r2, 811346a <quorem+0xf2>
 8113460:	3b04      	subs	r3, #4
 8113462:	429d      	cmp	r5, r3
 8113464:	461a      	mov	r2, r3
 8113466:	d30a      	bcc.n	811347e <quorem+0x106>
 8113468:	613c      	str	r4, [r7, #16]
 811346a:	4630      	mov	r0, r6
 811346c:	b003      	add	sp, #12
 811346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113472:	6812      	ldr	r2, [r2, #0]
 8113474:	3b04      	subs	r3, #4
 8113476:	2a00      	cmp	r2, #0
 8113478:	d1cc      	bne.n	8113414 <quorem+0x9c>
 811347a:	3c01      	subs	r4, #1
 811347c:	e7c7      	b.n	811340e <quorem+0x96>
 811347e:	6812      	ldr	r2, [r2, #0]
 8113480:	3b04      	subs	r3, #4
 8113482:	2a00      	cmp	r2, #0
 8113484:	d1f0      	bne.n	8113468 <quorem+0xf0>
 8113486:	3c01      	subs	r4, #1
 8113488:	e7eb      	b.n	8113462 <quorem+0xea>
 811348a:	2000      	movs	r0, #0
 811348c:	e7ee      	b.n	811346c <quorem+0xf4>
	...

08113490 <_dtoa_r>:
 8113490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113494:	ed2d 8b02 	vpush	{d8}
 8113498:	ec57 6b10 	vmov	r6, r7, d0
 811349c:	b095      	sub	sp, #84	; 0x54
 811349e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81134a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81134a4:	9105      	str	r1, [sp, #20]
 81134a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 81134aa:	4604      	mov	r4, r0
 81134ac:	9209      	str	r2, [sp, #36]	; 0x24
 81134ae:	930f      	str	r3, [sp, #60]	; 0x3c
 81134b0:	b975      	cbnz	r5, 81134d0 <_dtoa_r+0x40>
 81134b2:	2010      	movs	r0, #16
 81134b4:	f000 ff26 	bl	8114304 <malloc>
 81134b8:	4602      	mov	r2, r0
 81134ba:	6260      	str	r0, [r4, #36]	; 0x24
 81134bc:	b920      	cbnz	r0, 81134c8 <_dtoa_r+0x38>
 81134be:	4bb2      	ldr	r3, [pc, #712]	; (8113788 <_dtoa_r+0x2f8>)
 81134c0:	21ea      	movs	r1, #234	; 0xea
 81134c2:	48b2      	ldr	r0, [pc, #712]	; (811378c <_dtoa_r+0x2fc>)
 81134c4:	f7ff ff2a 	bl	811331c <__assert_func>
 81134c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81134cc:	6005      	str	r5, [r0, #0]
 81134ce:	60c5      	str	r5, [r0, #12]
 81134d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81134d2:	6819      	ldr	r1, [r3, #0]
 81134d4:	b151      	cbz	r1, 81134ec <_dtoa_r+0x5c>
 81134d6:	685a      	ldr	r2, [r3, #4]
 81134d8:	604a      	str	r2, [r1, #4]
 81134da:	2301      	movs	r3, #1
 81134dc:	4093      	lsls	r3, r2
 81134de:	608b      	str	r3, [r1, #8]
 81134e0:	4620      	mov	r0, r4
 81134e2:	f000 ff63 	bl	81143ac <_Bfree>
 81134e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81134e8:	2200      	movs	r2, #0
 81134ea:	601a      	str	r2, [r3, #0]
 81134ec:	1e3b      	subs	r3, r7, #0
 81134ee:	bfb9      	ittee	lt
 81134f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81134f4:	9303      	strlt	r3, [sp, #12]
 81134f6:	2300      	movge	r3, #0
 81134f8:	f8c8 3000 	strge.w	r3, [r8]
 81134fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8113500:	4ba3      	ldr	r3, [pc, #652]	; (8113790 <_dtoa_r+0x300>)
 8113502:	bfbc      	itt	lt
 8113504:	2201      	movlt	r2, #1
 8113506:	f8c8 2000 	strlt.w	r2, [r8]
 811350a:	ea33 0309 	bics.w	r3, r3, r9
 811350e:	d11b      	bne.n	8113548 <_dtoa_r+0xb8>
 8113510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8113512:	f242 730f 	movw	r3, #9999	; 0x270f
 8113516:	6013      	str	r3, [r2, #0]
 8113518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 811351c:	4333      	orrs	r3, r6
 811351e:	f000 857a 	beq.w	8114016 <_dtoa_r+0xb86>
 8113522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8113524:	b963      	cbnz	r3, 8113540 <_dtoa_r+0xb0>
 8113526:	4b9b      	ldr	r3, [pc, #620]	; (8113794 <_dtoa_r+0x304>)
 8113528:	e024      	b.n	8113574 <_dtoa_r+0xe4>
 811352a:	4b9b      	ldr	r3, [pc, #620]	; (8113798 <_dtoa_r+0x308>)
 811352c:	9300      	str	r3, [sp, #0]
 811352e:	3308      	adds	r3, #8
 8113530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8113532:	6013      	str	r3, [r2, #0]
 8113534:	9800      	ldr	r0, [sp, #0]
 8113536:	b015      	add	sp, #84	; 0x54
 8113538:	ecbd 8b02 	vpop	{d8}
 811353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113540:	4b94      	ldr	r3, [pc, #592]	; (8113794 <_dtoa_r+0x304>)
 8113542:	9300      	str	r3, [sp, #0]
 8113544:	3303      	adds	r3, #3
 8113546:	e7f3      	b.n	8113530 <_dtoa_r+0xa0>
 8113548:	ed9d 7b02 	vldr	d7, [sp, #8]
 811354c:	2200      	movs	r2, #0
 811354e:	ec51 0b17 	vmov	r0, r1, d7
 8113552:	2300      	movs	r3, #0
 8113554:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8113558:	f7ed fb3e 	bl	8100bd8 <__aeabi_dcmpeq>
 811355c:	4680      	mov	r8, r0
 811355e:	b158      	cbz	r0, 8113578 <_dtoa_r+0xe8>
 8113560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8113562:	2301      	movs	r3, #1
 8113564:	6013      	str	r3, [r2, #0]
 8113566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8113568:	2b00      	cmp	r3, #0
 811356a:	f000 8551 	beq.w	8114010 <_dtoa_r+0xb80>
 811356e:	488b      	ldr	r0, [pc, #556]	; (811379c <_dtoa_r+0x30c>)
 8113570:	6018      	str	r0, [r3, #0]
 8113572:	1e43      	subs	r3, r0, #1
 8113574:	9300      	str	r3, [sp, #0]
 8113576:	e7dd      	b.n	8113534 <_dtoa_r+0xa4>
 8113578:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 811357c:	aa12      	add	r2, sp, #72	; 0x48
 811357e:	a913      	add	r1, sp, #76	; 0x4c
 8113580:	4620      	mov	r0, r4
 8113582:	f001 f9f5 	bl	8114970 <__d2b>
 8113586:	f3c9 550a 	ubfx	r5, r9, #20, #11
 811358a:	4683      	mov	fp, r0
 811358c:	2d00      	cmp	r5, #0
 811358e:	d07c      	beq.n	811368a <_dtoa_r+0x1fa>
 8113590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8113592:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8113596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 811359a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 811359e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81135a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81135a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81135aa:	4b7d      	ldr	r3, [pc, #500]	; (81137a0 <_dtoa_r+0x310>)
 81135ac:	2200      	movs	r2, #0
 81135ae:	4630      	mov	r0, r6
 81135b0:	4639      	mov	r1, r7
 81135b2:	f7ec fef1 	bl	8100398 <__aeabi_dsub>
 81135b6:	a36e      	add	r3, pc, #440	; (adr r3, 8113770 <_dtoa_r+0x2e0>)
 81135b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81135bc:	f7ed f8a4 	bl	8100708 <__aeabi_dmul>
 81135c0:	a36d      	add	r3, pc, #436	; (adr r3, 8113778 <_dtoa_r+0x2e8>)
 81135c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81135c6:	f7ec fee9 	bl	810039c <__adddf3>
 81135ca:	4606      	mov	r6, r0
 81135cc:	4628      	mov	r0, r5
 81135ce:	460f      	mov	r7, r1
 81135d0:	f7ed f830 	bl	8100634 <__aeabi_i2d>
 81135d4:	a36a      	add	r3, pc, #424	; (adr r3, 8113780 <_dtoa_r+0x2f0>)
 81135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81135da:	f7ed f895 	bl	8100708 <__aeabi_dmul>
 81135de:	4602      	mov	r2, r0
 81135e0:	460b      	mov	r3, r1
 81135e2:	4630      	mov	r0, r6
 81135e4:	4639      	mov	r1, r7
 81135e6:	f7ec fed9 	bl	810039c <__adddf3>
 81135ea:	4606      	mov	r6, r0
 81135ec:	460f      	mov	r7, r1
 81135ee:	f7ed fb3b 	bl	8100c68 <__aeabi_d2iz>
 81135f2:	2200      	movs	r2, #0
 81135f4:	4682      	mov	sl, r0
 81135f6:	2300      	movs	r3, #0
 81135f8:	4630      	mov	r0, r6
 81135fa:	4639      	mov	r1, r7
 81135fc:	f7ed faf6 	bl	8100bec <__aeabi_dcmplt>
 8113600:	b148      	cbz	r0, 8113616 <_dtoa_r+0x186>
 8113602:	4650      	mov	r0, sl
 8113604:	f7ed f816 	bl	8100634 <__aeabi_i2d>
 8113608:	4632      	mov	r2, r6
 811360a:	463b      	mov	r3, r7
 811360c:	f7ed fae4 	bl	8100bd8 <__aeabi_dcmpeq>
 8113610:	b908      	cbnz	r0, 8113616 <_dtoa_r+0x186>
 8113612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8113616:	f1ba 0f16 	cmp.w	sl, #22
 811361a:	d854      	bhi.n	81136c6 <_dtoa_r+0x236>
 811361c:	4b61      	ldr	r3, [pc, #388]	; (81137a4 <_dtoa_r+0x314>)
 811361e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8113622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 811362a:	f7ed fadf 	bl	8100bec <__aeabi_dcmplt>
 811362e:	2800      	cmp	r0, #0
 8113630:	d04b      	beq.n	81136ca <_dtoa_r+0x23a>
 8113632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8113636:	2300      	movs	r3, #0
 8113638:	930e      	str	r3, [sp, #56]	; 0x38
 811363a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 811363c:	1b5d      	subs	r5, r3, r5
 811363e:	1e6b      	subs	r3, r5, #1
 8113640:	9304      	str	r3, [sp, #16]
 8113642:	bf43      	ittte	mi
 8113644:	2300      	movmi	r3, #0
 8113646:	f1c5 0801 	rsbmi	r8, r5, #1
 811364a:	9304      	strmi	r3, [sp, #16]
 811364c:	f04f 0800 	movpl.w	r8, #0
 8113650:	f1ba 0f00 	cmp.w	sl, #0
 8113654:	db3b      	blt.n	81136ce <_dtoa_r+0x23e>
 8113656:	9b04      	ldr	r3, [sp, #16]
 8113658:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 811365c:	4453      	add	r3, sl
 811365e:	9304      	str	r3, [sp, #16]
 8113660:	2300      	movs	r3, #0
 8113662:	9306      	str	r3, [sp, #24]
 8113664:	9b05      	ldr	r3, [sp, #20]
 8113666:	2b09      	cmp	r3, #9
 8113668:	d869      	bhi.n	811373e <_dtoa_r+0x2ae>
 811366a:	2b05      	cmp	r3, #5
 811366c:	bfc4      	itt	gt
 811366e:	3b04      	subgt	r3, #4
 8113670:	9305      	strgt	r3, [sp, #20]
 8113672:	9b05      	ldr	r3, [sp, #20]
 8113674:	f1a3 0302 	sub.w	r3, r3, #2
 8113678:	bfcc      	ite	gt
 811367a:	2500      	movgt	r5, #0
 811367c:	2501      	movle	r5, #1
 811367e:	2b03      	cmp	r3, #3
 8113680:	d869      	bhi.n	8113756 <_dtoa_r+0x2c6>
 8113682:	e8df f003 	tbb	[pc, r3]
 8113686:	4e2c      	.short	0x4e2c
 8113688:	5a4c      	.short	0x5a4c
 811368a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 811368e:	441d      	add	r5, r3
 8113690:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8113694:	2b20      	cmp	r3, #32
 8113696:	bfc1      	itttt	gt
 8113698:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 811369c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81136a0:	fa09 f303 	lslgt.w	r3, r9, r3
 81136a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 81136a8:	bfda      	itte	le
 81136aa:	f1c3 0320 	rsble	r3, r3, #32
 81136ae:	fa06 f003 	lslle.w	r0, r6, r3
 81136b2:	4318      	orrgt	r0, r3
 81136b4:	f7ec ffae 	bl	8100614 <__aeabi_ui2d>
 81136b8:	2301      	movs	r3, #1
 81136ba:	4606      	mov	r6, r0
 81136bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81136c0:	3d01      	subs	r5, #1
 81136c2:	9310      	str	r3, [sp, #64]	; 0x40
 81136c4:	e771      	b.n	81135aa <_dtoa_r+0x11a>
 81136c6:	2301      	movs	r3, #1
 81136c8:	e7b6      	b.n	8113638 <_dtoa_r+0x1a8>
 81136ca:	900e      	str	r0, [sp, #56]	; 0x38
 81136cc:	e7b5      	b.n	811363a <_dtoa_r+0x1aa>
 81136ce:	f1ca 0300 	rsb	r3, sl, #0
 81136d2:	9306      	str	r3, [sp, #24]
 81136d4:	2300      	movs	r3, #0
 81136d6:	eba8 080a 	sub.w	r8, r8, sl
 81136da:	930d      	str	r3, [sp, #52]	; 0x34
 81136dc:	e7c2      	b.n	8113664 <_dtoa_r+0x1d4>
 81136de:	2300      	movs	r3, #0
 81136e0:	9308      	str	r3, [sp, #32]
 81136e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81136e4:	2b00      	cmp	r3, #0
 81136e6:	dc39      	bgt.n	811375c <_dtoa_r+0x2cc>
 81136e8:	f04f 0901 	mov.w	r9, #1
 81136ec:	f8cd 9004 	str.w	r9, [sp, #4]
 81136f0:	464b      	mov	r3, r9
 81136f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 81136f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 81136f8:	2200      	movs	r2, #0
 81136fa:	6042      	str	r2, [r0, #4]
 81136fc:	2204      	movs	r2, #4
 81136fe:	f102 0614 	add.w	r6, r2, #20
 8113702:	429e      	cmp	r6, r3
 8113704:	6841      	ldr	r1, [r0, #4]
 8113706:	d92f      	bls.n	8113768 <_dtoa_r+0x2d8>
 8113708:	4620      	mov	r0, r4
 811370a:	f000 fe0f 	bl	811432c <_Balloc>
 811370e:	9000      	str	r0, [sp, #0]
 8113710:	2800      	cmp	r0, #0
 8113712:	d14b      	bne.n	81137ac <_dtoa_r+0x31c>
 8113714:	4b24      	ldr	r3, [pc, #144]	; (81137a8 <_dtoa_r+0x318>)
 8113716:	4602      	mov	r2, r0
 8113718:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 811371c:	e6d1      	b.n	81134c2 <_dtoa_r+0x32>
 811371e:	2301      	movs	r3, #1
 8113720:	e7de      	b.n	81136e0 <_dtoa_r+0x250>
 8113722:	2300      	movs	r3, #0
 8113724:	9308      	str	r3, [sp, #32]
 8113726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8113728:	eb0a 0903 	add.w	r9, sl, r3
 811372c:	f109 0301 	add.w	r3, r9, #1
 8113730:	2b01      	cmp	r3, #1
 8113732:	9301      	str	r3, [sp, #4]
 8113734:	bfb8      	it	lt
 8113736:	2301      	movlt	r3, #1
 8113738:	e7dd      	b.n	81136f6 <_dtoa_r+0x266>
 811373a:	2301      	movs	r3, #1
 811373c:	e7f2      	b.n	8113724 <_dtoa_r+0x294>
 811373e:	2501      	movs	r5, #1
 8113740:	2300      	movs	r3, #0
 8113742:	9305      	str	r3, [sp, #20]
 8113744:	9508      	str	r5, [sp, #32]
 8113746:	f04f 39ff 	mov.w	r9, #4294967295
 811374a:	2200      	movs	r2, #0
 811374c:	f8cd 9004 	str.w	r9, [sp, #4]
 8113750:	2312      	movs	r3, #18
 8113752:	9209      	str	r2, [sp, #36]	; 0x24
 8113754:	e7cf      	b.n	81136f6 <_dtoa_r+0x266>
 8113756:	2301      	movs	r3, #1
 8113758:	9308      	str	r3, [sp, #32]
 811375a:	e7f4      	b.n	8113746 <_dtoa_r+0x2b6>
 811375c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8113760:	f8cd 9004 	str.w	r9, [sp, #4]
 8113764:	464b      	mov	r3, r9
 8113766:	e7c6      	b.n	81136f6 <_dtoa_r+0x266>
 8113768:	3101      	adds	r1, #1
 811376a:	6041      	str	r1, [r0, #4]
 811376c:	0052      	lsls	r2, r2, #1
 811376e:	e7c6      	b.n	81136fe <_dtoa_r+0x26e>
 8113770:	636f4361 	.word	0x636f4361
 8113774:	3fd287a7 	.word	0x3fd287a7
 8113778:	8b60c8b3 	.word	0x8b60c8b3
 811377c:	3fc68a28 	.word	0x3fc68a28
 8113780:	509f79fb 	.word	0x509f79fb
 8113784:	3fd34413 	.word	0x3fd34413
 8113788:	08116d00 	.word	0x08116d00
 811378c:	08116dbf 	.word	0x08116dbf
 8113790:	7ff00000 	.word	0x7ff00000
 8113794:	08116dbb 	.word	0x08116dbb
 8113798:	08116db2 	.word	0x08116db2
 811379c:	08116cdd 	.word	0x08116cdd
 81137a0:	3ff80000 	.word	0x3ff80000
 81137a4:	08116eb8 	.word	0x08116eb8
 81137a8:	08116e1e 	.word	0x08116e1e
 81137ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81137ae:	9a00      	ldr	r2, [sp, #0]
 81137b0:	601a      	str	r2, [r3, #0]
 81137b2:	9b01      	ldr	r3, [sp, #4]
 81137b4:	2b0e      	cmp	r3, #14
 81137b6:	f200 80ad 	bhi.w	8113914 <_dtoa_r+0x484>
 81137ba:	2d00      	cmp	r5, #0
 81137bc:	f000 80aa 	beq.w	8113914 <_dtoa_r+0x484>
 81137c0:	f1ba 0f00 	cmp.w	sl, #0
 81137c4:	dd36      	ble.n	8113834 <_dtoa_r+0x3a4>
 81137c6:	4ac3      	ldr	r2, [pc, #780]	; (8113ad4 <_dtoa_r+0x644>)
 81137c8:	f00a 030f 	and.w	r3, sl, #15
 81137cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81137d0:	ed93 7b00 	vldr	d7, [r3]
 81137d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81137d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 81137dc:	eeb0 8a47 	vmov.f32	s16, s14
 81137e0:	eef0 8a67 	vmov.f32	s17, s15
 81137e4:	d016      	beq.n	8113814 <_dtoa_r+0x384>
 81137e6:	4bbc      	ldr	r3, [pc, #752]	; (8113ad8 <_dtoa_r+0x648>)
 81137e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81137ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81137f0:	f7ed f8b4 	bl	810095c <__aeabi_ddiv>
 81137f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81137f8:	f007 070f 	and.w	r7, r7, #15
 81137fc:	2503      	movs	r5, #3
 81137fe:	4eb6      	ldr	r6, [pc, #728]	; (8113ad8 <_dtoa_r+0x648>)
 8113800:	b957      	cbnz	r7, 8113818 <_dtoa_r+0x388>
 8113802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8113806:	ec53 2b18 	vmov	r2, r3, d8
 811380a:	f7ed f8a7 	bl	810095c <__aeabi_ddiv>
 811380e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8113812:	e029      	b.n	8113868 <_dtoa_r+0x3d8>
 8113814:	2502      	movs	r5, #2
 8113816:	e7f2      	b.n	81137fe <_dtoa_r+0x36e>
 8113818:	07f9      	lsls	r1, r7, #31
 811381a:	d508      	bpl.n	811382e <_dtoa_r+0x39e>
 811381c:	ec51 0b18 	vmov	r0, r1, d8
 8113820:	e9d6 2300 	ldrd	r2, r3, [r6]
 8113824:	f7ec ff70 	bl	8100708 <__aeabi_dmul>
 8113828:	ec41 0b18 	vmov	d8, r0, r1
 811382c:	3501      	adds	r5, #1
 811382e:	107f      	asrs	r7, r7, #1
 8113830:	3608      	adds	r6, #8
 8113832:	e7e5      	b.n	8113800 <_dtoa_r+0x370>
 8113834:	f000 80a6 	beq.w	8113984 <_dtoa_r+0x4f4>
 8113838:	f1ca 0600 	rsb	r6, sl, #0
 811383c:	4ba5      	ldr	r3, [pc, #660]	; (8113ad4 <_dtoa_r+0x644>)
 811383e:	4fa6      	ldr	r7, [pc, #664]	; (8113ad8 <_dtoa_r+0x648>)
 8113840:	f006 020f 	and.w	r2, r6, #15
 8113844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8113848:	e9d3 2300 	ldrd	r2, r3, [r3]
 811384c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8113850:	f7ec ff5a 	bl	8100708 <__aeabi_dmul>
 8113854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8113858:	1136      	asrs	r6, r6, #4
 811385a:	2300      	movs	r3, #0
 811385c:	2502      	movs	r5, #2
 811385e:	2e00      	cmp	r6, #0
 8113860:	f040 8085 	bne.w	811396e <_dtoa_r+0x4de>
 8113864:	2b00      	cmp	r3, #0
 8113866:	d1d2      	bne.n	811380e <_dtoa_r+0x37e>
 8113868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 811386a:	2b00      	cmp	r3, #0
 811386c:	f000 808c 	beq.w	8113988 <_dtoa_r+0x4f8>
 8113870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8113874:	4b99      	ldr	r3, [pc, #612]	; (8113adc <_dtoa_r+0x64c>)
 8113876:	2200      	movs	r2, #0
 8113878:	4630      	mov	r0, r6
 811387a:	4639      	mov	r1, r7
 811387c:	f7ed f9b6 	bl	8100bec <__aeabi_dcmplt>
 8113880:	2800      	cmp	r0, #0
 8113882:	f000 8081 	beq.w	8113988 <_dtoa_r+0x4f8>
 8113886:	9b01      	ldr	r3, [sp, #4]
 8113888:	2b00      	cmp	r3, #0
 811388a:	d07d      	beq.n	8113988 <_dtoa_r+0x4f8>
 811388c:	f1b9 0f00 	cmp.w	r9, #0
 8113890:	dd3c      	ble.n	811390c <_dtoa_r+0x47c>
 8113892:	f10a 33ff 	add.w	r3, sl, #4294967295
 8113896:	9307      	str	r3, [sp, #28]
 8113898:	2200      	movs	r2, #0
 811389a:	4b91      	ldr	r3, [pc, #580]	; (8113ae0 <_dtoa_r+0x650>)
 811389c:	4630      	mov	r0, r6
 811389e:	4639      	mov	r1, r7
 81138a0:	f7ec ff32 	bl	8100708 <__aeabi_dmul>
 81138a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81138a8:	3501      	adds	r5, #1
 81138aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 81138ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81138b2:	4628      	mov	r0, r5
 81138b4:	f7ec febe 	bl	8100634 <__aeabi_i2d>
 81138b8:	4632      	mov	r2, r6
 81138ba:	463b      	mov	r3, r7
 81138bc:	f7ec ff24 	bl	8100708 <__aeabi_dmul>
 81138c0:	4b88      	ldr	r3, [pc, #544]	; (8113ae4 <_dtoa_r+0x654>)
 81138c2:	2200      	movs	r2, #0
 81138c4:	f7ec fd6a 	bl	810039c <__adddf3>
 81138c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 81138cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81138d0:	9303      	str	r3, [sp, #12]
 81138d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81138d4:	2b00      	cmp	r3, #0
 81138d6:	d15c      	bne.n	8113992 <_dtoa_r+0x502>
 81138d8:	4b83      	ldr	r3, [pc, #524]	; (8113ae8 <_dtoa_r+0x658>)
 81138da:	2200      	movs	r2, #0
 81138dc:	4630      	mov	r0, r6
 81138de:	4639      	mov	r1, r7
 81138e0:	f7ec fd5a 	bl	8100398 <__aeabi_dsub>
 81138e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81138e8:	4606      	mov	r6, r0
 81138ea:	460f      	mov	r7, r1
 81138ec:	f7ed f99c 	bl	8100c28 <__aeabi_dcmpgt>
 81138f0:	2800      	cmp	r0, #0
 81138f2:	f040 8296 	bne.w	8113e22 <_dtoa_r+0x992>
 81138f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 81138fa:	4630      	mov	r0, r6
 81138fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8113900:	4639      	mov	r1, r7
 8113902:	f7ed f973 	bl	8100bec <__aeabi_dcmplt>
 8113906:	2800      	cmp	r0, #0
 8113908:	f040 8288 	bne.w	8113e1c <_dtoa_r+0x98c>
 811390c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8113910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8113914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8113916:	2b00      	cmp	r3, #0
 8113918:	f2c0 8158 	blt.w	8113bcc <_dtoa_r+0x73c>
 811391c:	f1ba 0f0e 	cmp.w	sl, #14
 8113920:	f300 8154 	bgt.w	8113bcc <_dtoa_r+0x73c>
 8113924:	4b6b      	ldr	r3, [pc, #428]	; (8113ad4 <_dtoa_r+0x644>)
 8113926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 811392a:	e9d3 8900 	ldrd	r8, r9, [r3]
 811392e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8113930:	2b00      	cmp	r3, #0
 8113932:	f280 80e3 	bge.w	8113afc <_dtoa_r+0x66c>
 8113936:	9b01      	ldr	r3, [sp, #4]
 8113938:	2b00      	cmp	r3, #0
 811393a:	f300 80df 	bgt.w	8113afc <_dtoa_r+0x66c>
 811393e:	f040 826d 	bne.w	8113e1c <_dtoa_r+0x98c>
 8113942:	4b69      	ldr	r3, [pc, #420]	; (8113ae8 <_dtoa_r+0x658>)
 8113944:	2200      	movs	r2, #0
 8113946:	4640      	mov	r0, r8
 8113948:	4649      	mov	r1, r9
 811394a:	f7ec fedd 	bl	8100708 <__aeabi_dmul>
 811394e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8113952:	f7ed f95f 	bl	8100c14 <__aeabi_dcmpge>
 8113956:	9e01      	ldr	r6, [sp, #4]
 8113958:	4637      	mov	r7, r6
 811395a:	2800      	cmp	r0, #0
 811395c:	f040 8243 	bne.w	8113de6 <_dtoa_r+0x956>
 8113960:	9d00      	ldr	r5, [sp, #0]
 8113962:	2331      	movs	r3, #49	; 0x31
 8113964:	f805 3b01 	strb.w	r3, [r5], #1
 8113968:	f10a 0a01 	add.w	sl, sl, #1
 811396c:	e23f      	b.n	8113dee <_dtoa_r+0x95e>
 811396e:	07f2      	lsls	r2, r6, #31
 8113970:	d505      	bpl.n	811397e <_dtoa_r+0x4ee>
 8113972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8113976:	f7ec fec7 	bl	8100708 <__aeabi_dmul>
 811397a:	3501      	adds	r5, #1
 811397c:	2301      	movs	r3, #1
 811397e:	1076      	asrs	r6, r6, #1
 8113980:	3708      	adds	r7, #8
 8113982:	e76c      	b.n	811385e <_dtoa_r+0x3ce>
 8113984:	2502      	movs	r5, #2
 8113986:	e76f      	b.n	8113868 <_dtoa_r+0x3d8>
 8113988:	9b01      	ldr	r3, [sp, #4]
 811398a:	f8cd a01c 	str.w	sl, [sp, #28]
 811398e:	930c      	str	r3, [sp, #48]	; 0x30
 8113990:	e78d      	b.n	81138ae <_dtoa_r+0x41e>
 8113992:	9900      	ldr	r1, [sp, #0]
 8113994:	980c      	ldr	r0, [sp, #48]	; 0x30
 8113996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8113998:	4b4e      	ldr	r3, [pc, #312]	; (8113ad4 <_dtoa_r+0x644>)
 811399a:	ed9d 7b02 	vldr	d7, [sp, #8]
 811399e:	4401      	add	r1, r0
 81139a0:	9102      	str	r1, [sp, #8]
 81139a2:	9908      	ldr	r1, [sp, #32]
 81139a4:	eeb0 8a47 	vmov.f32	s16, s14
 81139a8:	eef0 8a67 	vmov.f32	s17, s15
 81139ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81139b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81139b4:	2900      	cmp	r1, #0
 81139b6:	d045      	beq.n	8113a44 <_dtoa_r+0x5b4>
 81139b8:	494c      	ldr	r1, [pc, #304]	; (8113aec <_dtoa_r+0x65c>)
 81139ba:	2000      	movs	r0, #0
 81139bc:	f7ec ffce 	bl	810095c <__aeabi_ddiv>
 81139c0:	ec53 2b18 	vmov	r2, r3, d8
 81139c4:	f7ec fce8 	bl	8100398 <__aeabi_dsub>
 81139c8:	9d00      	ldr	r5, [sp, #0]
 81139ca:	ec41 0b18 	vmov	d8, r0, r1
 81139ce:	4639      	mov	r1, r7
 81139d0:	4630      	mov	r0, r6
 81139d2:	f7ed f949 	bl	8100c68 <__aeabi_d2iz>
 81139d6:	900c      	str	r0, [sp, #48]	; 0x30
 81139d8:	f7ec fe2c 	bl	8100634 <__aeabi_i2d>
 81139dc:	4602      	mov	r2, r0
 81139de:	460b      	mov	r3, r1
 81139e0:	4630      	mov	r0, r6
 81139e2:	4639      	mov	r1, r7
 81139e4:	f7ec fcd8 	bl	8100398 <__aeabi_dsub>
 81139e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81139ea:	3330      	adds	r3, #48	; 0x30
 81139ec:	f805 3b01 	strb.w	r3, [r5], #1
 81139f0:	ec53 2b18 	vmov	r2, r3, d8
 81139f4:	4606      	mov	r6, r0
 81139f6:	460f      	mov	r7, r1
 81139f8:	f7ed f8f8 	bl	8100bec <__aeabi_dcmplt>
 81139fc:	2800      	cmp	r0, #0
 81139fe:	d165      	bne.n	8113acc <_dtoa_r+0x63c>
 8113a00:	4632      	mov	r2, r6
 8113a02:	463b      	mov	r3, r7
 8113a04:	4935      	ldr	r1, [pc, #212]	; (8113adc <_dtoa_r+0x64c>)
 8113a06:	2000      	movs	r0, #0
 8113a08:	f7ec fcc6 	bl	8100398 <__aeabi_dsub>
 8113a0c:	ec53 2b18 	vmov	r2, r3, d8
 8113a10:	f7ed f8ec 	bl	8100bec <__aeabi_dcmplt>
 8113a14:	2800      	cmp	r0, #0
 8113a16:	f040 80b9 	bne.w	8113b8c <_dtoa_r+0x6fc>
 8113a1a:	9b02      	ldr	r3, [sp, #8]
 8113a1c:	429d      	cmp	r5, r3
 8113a1e:	f43f af75 	beq.w	811390c <_dtoa_r+0x47c>
 8113a22:	4b2f      	ldr	r3, [pc, #188]	; (8113ae0 <_dtoa_r+0x650>)
 8113a24:	ec51 0b18 	vmov	r0, r1, d8
 8113a28:	2200      	movs	r2, #0
 8113a2a:	f7ec fe6d 	bl	8100708 <__aeabi_dmul>
 8113a2e:	4b2c      	ldr	r3, [pc, #176]	; (8113ae0 <_dtoa_r+0x650>)
 8113a30:	ec41 0b18 	vmov	d8, r0, r1
 8113a34:	2200      	movs	r2, #0
 8113a36:	4630      	mov	r0, r6
 8113a38:	4639      	mov	r1, r7
 8113a3a:	f7ec fe65 	bl	8100708 <__aeabi_dmul>
 8113a3e:	4606      	mov	r6, r0
 8113a40:	460f      	mov	r7, r1
 8113a42:	e7c4      	b.n	81139ce <_dtoa_r+0x53e>
 8113a44:	ec51 0b17 	vmov	r0, r1, d7
 8113a48:	f7ec fe5e 	bl	8100708 <__aeabi_dmul>
 8113a4c:	9b02      	ldr	r3, [sp, #8]
 8113a4e:	9d00      	ldr	r5, [sp, #0]
 8113a50:	930c      	str	r3, [sp, #48]	; 0x30
 8113a52:	ec41 0b18 	vmov	d8, r0, r1
 8113a56:	4639      	mov	r1, r7
 8113a58:	4630      	mov	r0, r6
 8113a5a:	f7ed f905 	bl	8100c68 <__aeabi_d2iz>
 8113a5e:	9011      	str	r0, [sp, #68]	; 0x44
 8113a60:	f7ec fde8 	bl	8100634 <__aeabi_i2d>
 8113a64:	4602      	mov	r2, r0
 8113a66:	460b      	mov	r3, r1
 8113a68:	4630      	mov	r0, r6
 8113a6a:	4639      	mov	r1, r7
 8113a6c:	f7ec fc94 	bl	8100398 <__aeabi_dsub>
 8113a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8113a72:	3330      	adds	r3, #48	; 0x30
 8113a74:	f805 3b01 	strb.w	r3, [r5], #1
 8113a78:	9b02      	ldr	r3, [sp, #8]
 8113a7a:	429d      	cmp	r5, r3
 8113a7c:	4606      	mov	r6, r0
 8113a7e:	460f      	mov	r7, r1
 8113a80:	f04f 0200 	mov.w	r2, #0
 8113a84:	d134      	bne.n	8113af0 <_dtoa_r+0x660>
 8113a86:	4b19      	ldr	r3, [pc, #100]	; (8113aec <_dtoa_r+0x65c>)
 8113a88:	ec51 0b18 	vmov	r0, r1, d8
 8113a8c:	f7ec fc86 	bl	810039c <__adddf3>
 8113a90:	4602      	mov	r2, r0
 8113a92:	460b      	mov	r3, r1
 8113a94:	4630      	mov	r0, r6
 8113a96:	4639      	mov	r1, r7
 8113a98:	f7ed f8c6 	bl	8100c28 <__aeabi_dcmpgt>
 8113a9c:	2800      	cmp	r0, #0
 8113a9e:	d175      	bne.n	8113b8c <_dtoa_r+0x6fc>
 8113aa0:	ec53 2b18 	vmov	r2, r3, d8
 8113aa4:	4911      	ldr	r1, [pc, #68]	; (8113aec <_dtoa_r+0x65c>)
 8113aa6:	2000      	movs	r0, #0
 8113aa8:	f7ec fc76 	bl	8100398 <__aeabi_dsub>
 8113aac:	4602      	mov	r2, r0
 8113aae:	460b      	mov	r3, r1
 8113ab0:	4630      	mov	r0, r6
 8113ab2:	4639      	mov	r1, r7
 8113ab4:	f7ed f89a 	bl	8100bec <__aeabi_dcmplt>
 8113ab8:	2800      	cmp	r0, #0
 8113aba:	f43f af27 	beq.w	811390c <_dtoa_r+0x47c>
 8113abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8113ac0:	1e6b      	subs	r3, r5, #1
 8113ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8113ac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8113ac8:	2b30      	cmp	r3, #48	; 0x30
 8113aca:	d0f8      	beq.n	8113abe <_dtoa_r+0x62e>
 8113acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8113ad0:	e04a      	b.n	8113b68 <_dtoa_r+0x6d8>
 8113ad2:	bf00      	nop
 8113ad4:	08116eb8 	.word	0x08116eb8
 8113ad8:	08116e90 	.word	0x08116e90
 8113adc:	3ff00000 	.word	0x3ff00000
 8113ae0:	40240000 	.word	0x40240000
 8113ae4:	401c0000 	.word	0x401c0000
 8113ae8:	40140000 	.word	0x40140000
 8113aec:	3fe00000 	.word	0x3fe00000
 8113af0:	4baf      	ldr	r3, [pc, #700]	; (8113db0 <_dtoa_r+0x920>)
 8113af2:	f7ec fe09 	bl	8100708 <__aeabi_dmul>
 8113af6:	4606      	mov	r6, r0
 8113af8:	460f      	mov	r7, r1
 8113afa:	e7ac      	b.n	8113a56 <_dtoa_r+0x5c6>
 8113afc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8113b00:	9d00      	ldr	r5, [sp, #0]
 8113b02:	4642      	mov	r2, r8
 8113b04:	464b      	mov	r3, r9
 8113b06:	4630      	mov	r0, r6
 8113b08:	4639      	mov	r1, r7
 8113b0a:	f7ec ff27 	bl	810095c <__aeabi_ddiv>
 8113b0e:	f7ed f8ab 	bl	8100c68 <__aeabi_d2iz>
 8113b12:	9002      	str	r0, [sp, #8]
 8113b14:	f7ec fd8e 	bl	8100634 <__aeabi_i2d>
 8113b18:	4642      	mov	r2, r8
 8113b1a:	464b      	mov	r3, r9
 8113b1c:	f7ec fdf4 	bl	8100708 <__aeabi_dmul>
 8113b20:	4602      	mov	r2, r0
 8113b22:	460b      	mov	r3, r1
 8113b24:	4630      	mov	r0, r6
 8113b26:	4639      	mov	r1, r7
 8113b28:	f7ec fc36 	bl	8100398 <__aeabi_dsub>
 8113b2c:	9e02      	ldr	r6, [sp, #8]
 8113b2e:	9f01      	ldr	r7, [sp, #4]
 8113b30:	3630      	adds	r6, #48	; 0x30
 8113b32:	f805 6b01 	strb.w	r6, [r5], #1
 8113b36:	9e00      	ldr	r6, [sp, #0]
 8113b38:	1bae      	subs	r6, r5, r6
 8113b3a:	42b7      	cmp	r7, r6
 8113b3c:	4602      	mov	r2, r0
 8113b3e:	460b      	mov	r3, r1
 8113b40:	d137      	bne.n	8113bb2 <_dtoa_r+0x722>
 8113b42:	f7ec fc2b 	bl	810039c <__adddf3>
 8113b46:	4642      	mov	r2, r8
 8113b48:	464b      	mov	r3, r9
 8113b4a:	4606      	mov	r6, r0
 8113b4c:	460f      	mov	r7, r1
 8113b4e:	f7ed f86b 	bl	8100c28 <__aeabi_dcmpgt>
 8113b52:	b9c8      	cbnz	r0, 8113b88 <_dtoa_r+0x6f8>
 8113b54:	4642      	mov	r2, r8
 8113b56:	464b      	mov	r3, r9
 8113b58:	4630      	mov	r0, r6
 8113b5a:	4639      	mov	r1, r7
 8113b5c:	f7ed f83c 	bl	8100bd8 <__aeabi_dcmpeq>
 8113b60:	b110      	cbz	r0, 8113b68 <_dtoa_r+0x6d8>
 8113b62:	9b02      	ldr	r3, [sp, #8]
 8113b64:	07d9      	lsls	r1, r3, #31
 8113b66:	d40f      	bmi.n	8113b88 <_dtoa_r+0x6f8>
 8113b68:	4620      	mov	r0, r4
 8113b6a:	4659      	mov	r1, fp
 8113b6c:	f000 fc1e 	bl	81143ac <_Bfree>
 8113b70:	2300      	movs	r3, #0
 8113b72:	702b      	strb	r3, [r5, #0]
 8113b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8113b76:	f10a 0001 	add.w	r0, sl, #1
 8113b7a:	6018      	str	r0, [r3, #0]
 8113b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8113b7e:	2b00      	cmp	r3, #0
 8113b80:	f43f acd8 	beq.w	8113534 <_dtoa_r+0xa4>
 8113b84:	601d      	str	r5, [r3, #0]
 8113b86:	e4d5      	b.n	8113534 <_dtoa_r+0xa4>
 8113b88:	f8cd a01c 	str.w	sl, [sp, #28]
 8113b8c:	462b      	mov	r3, r5
 8113b8e:	461d      	mov	r5, r3
 8113b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8113b94:	2a39      	cmp	r2, #57	; 0x39
 8113b96:	d108      	bne.n	8113baa <_dtoa_r+0x71a>
 8113b98:	9a00      	ldr	r2, [sp, #0]
 8113b9a:	429a      	cmp	r2, r3
 8113b9c:	d1f7      	bne.n	8113b8e <_dtoa_r+0x6fe>
 8113b9e:	9a07      	ldr	r2, [sp, #28]
 8113ba0:	9900      	ldr	r1, [sp, #0]
 8113ba2:	3201      	adds	r2, #1
 8113ba4:	9207      	str	r2, [sp, #28]
 8113ba6:	2230      	movs	r2, #48	; 0x30
 8113ba8:	700a      	strb	r2, [r1, #0]
 8113baa:	781a      	ldrb	r2, [r3, #0]
 8113bac:	3201      	adds	r2, #1
 8113bae:	701a      	strb	r2, [r3, #0]
 8113bb0:	e78c      	b.n	8113acc <_dtoa_r+0x63c>
 8113bb2:	4b7f      	ldr	r3, [pc, #508]	; (8113db0 <_dtoa_r+0x920>)
 8113bb4:	2200      	movs	r2, #0
 8113bb6:	f7ec fda7 	bl	8100708 <__aeabi_dmul>
 8113bba:	2200      	movs	r2, #0
 8113bbc:	2300      	movs	r3, #0
 8113bbe:	4606      	mov	r6, r0
 8113bc0:	460f      	mov	r7, r1
 8113bc2:	f7ed f809 	bl	8100bd8 <__aeabi_dcmpeq>
 8113bc6:	2800      	cmp	r0, #0
 8113bc8:	d09b      	beq.n	8113b02 <_dtoa_r+0x672>
 8113bca:	e7cd      	b.n	8113b68 <_dtoa_r+0x6d8>
 8113bcc:	9a08      	ldr	r2, [sp, #32]
 8113bce:	2a00      	cmp	r2, #0
 8113bd0:	f000 80c4 	beq.w	8113d5c <_dtoa_r+0x8cc>
 8113bd4:	9a05      	ldr	r2, [sp, #20]
 8113bd6:	2a01      	cmp	r2, #1
 8113bd8:	f300 80a8 	bgt.w	8113d2c <_dtoa_r+0x89c>
 8113bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8113bde:	2a00      	cmp	r2, #0
 8113be0:	f000 80a0 	beq.w	8113d24 <_dtoa_r+0x894>
 8113be4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8113be8:	9e06      	ldr	r6, [sp, #24]
 8113bea:	4645      	mov	r5, r8
 8113bec:	9a04      	ldr	r2, [sp, #16]
 8113bee:	2101      	movs	r1, #1
 8113bf0:	441a      	add	r2, r3
 8113bf2:	4620      	mov	r0, r4
 8113bf4:	4498      	add	r8, r3
 8113bf6:	9204      	str	r2, [sp, #16]
 8113bf8:	f000 fc94 	bl	8114524 <__i2b>
 8113bfc:	4607      	mov	r7, r0
 8113bfe:	2d00      	cmp	r5, #0
 8113c00:	dd0b      	ble.n	8113c1a <_dtoa_r+0x78a>
 8113c02:	9b04      	ldr	r3, [sp, #16]
 8113c04:	2b00      	cmp	r3, #0
 8113c06:	dd08      	ble.n	8113c1a <_dtoa_r+0x78a>
 8113c08:	42ab      	cmp	r3, r5
 8113c0a:	9a04      	ldr	r2, [sp, #16]
 8113c0c:	bfa8      	it	ge
 8113c0e:	462b      	movge	r3, r5
 8113c10:	eba8 0803 	sub.w	r8, r8, r3
 8113c14:	1aed      	subs	r5, r5, r3
 8113c16:	1ad3      	subs	r3, r2, r3
 8113c18:	9304      	str	r3, [sp, #16]
 8113c1a:	9b06      	ldr	r3, [sp, #24]
 8113c1c:	b1fb      	cbz	r3, 8113c5e <_dtoa_r+0x7ce>
 8113c1e:	9b08      	ldr	r3, [sp, #32]
 8113c20:	2b00      	cmp	r3, #0
 8113c22:	f000 809f 	beq.w	8113d64 <_dtoa_r+0x8d4>
 8113c26:	2e00      	cmp	r6, #0
 8113c28:	dd11      	ble.n	8113c4e <_dtoa_r+0x7be>
 8113c2a:	4639      	mov	r1, r7
 8113c2c:	4632      	mov	r2, r6
 8113c2e:	4620      	mov	r0, r4
 8113c30:	f000 fd34 	bl	811469c <__pow5mult>
 8113c34:	465a      	mov	r2, fp
 8113c36:	4601      	mov	r1, r0
 8113c38:	4607      	mov	r7, r0
 8113c3a:	4620      	mov	r0, r4
 8113c3c:	f000 fc88 	bl	8114550 <__multiply>
 8113c40:	4659      	mov	r1, fp
 8113c42:	9007      	str	r0, [sp, #28]
 8113c44:	4620      	mov	r0, r4
 8113c46:	f000 fbb1 	bl	81143ac <_Bfree>
 8113c4a:	9b07      	ldr	r3, [sp, #28]
 8113c4c:	469b      	mov	fp, r3
 8113c4e:	9b06      	ldr	r3, [sp, #24]
 8113c50:	1b9a      	subs	r2, r3, r6
 8113c52:	d004      	beq.n	8113c5e <_dtoa_r+0x7ce>
 8113c54:	4659      	mov	r1, fp
 8113c56:	4620      	mov	r0, r4
 8113c58:	f000 fd20 	bl	811469c <__pow5mult>
 8113c5c:	4683      	mov	fp, r0
 8113c5e:	2101      	movs	r1, #1
 8113c60:	4620      	mov	r0, r4
 8113c62:	f000 fc5f 	bl	8114524 <__i2b>
 8113c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8113c68:	2b00      	cmp	r3, #0
 8113c6a:	4606      	mov	r6, r0
 8113c6c:	dd7c      	ble.n	8113d68 <_dtoa_r+0x8d8>
 8113c6e:	461a      	mov	r2, r3
 8113c70:	4601      	mov	r1, r0
 8113c72:	4620      	mov	r0, r4
 8113c74:	f000 fd12 	bl	811469c <__pow5mult>
 8113c78:	9b05      	ldr	r3, [sp, #20]
 8113c7a:	2b01      	cmp	r3, #1
 8113c7c:	4606      	mov	r6, r0
 8113c7e:	dd76      	ble.n	8113d6e <_dtoa_r+0x8de>
 8113c80:	2300      	movs	r3, #0
 8113c82:	9306      	str	r3, [sp, #24]
 8113c84:	6933      	ldr	r3, [r6, #16]
 8113c86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8113c8a:	6918      	ldr	r0, [r3, #16]
 8113c8c:	f000 fbfa 	bl	8114484 <__hi0bits>
 8113c90:	f1c0 0020 	rsb	r0, r0, #32
 8113c94:	9b04      	ldr	r3, [sp, #16]
 8113c96:	4418      	add	r0, r3
 8113c98:	f010 001f 	ands.w	r0, r0, #31
 8113c9c:	f000 8086 	beq.w	8113dac <_dtoa_r+0x91c>
 8113ca0:	f1c0 0320 	rsb	r3, r0, #32
 8113ca4:	2b04      	cmp	r3, #4
 8113ca6:	dd7f      	ble.n	8113da8 <_dtoa_r+0x918>
 8113ca8:	f1c0 001c 	rsb	r0, r0, #28
 8113cac:	9b04      	ldr	r3, [sp, #16]
 8113cae:	4403      	add	r3, r0
 8113cb0:	4480      	add	r8, r0
 8113cb2:	4405      	add	r5, r0
 8113cb4:	9304      	str	r3, [sp, #16]
 8113cb6:	f1b8 0f00 	cmp.w	r8, #0
 8113cba:	dd05      	ble.n	8113cc8 <_dtoa_r+0x838>
 8113cbc:	4659      	mov	r1, fp
 8113cbe:	4642      	mov	r2, r8
 8113cc0:	4620      	mov	r0, r4
 8113cc2:	f000 fd45 	bl	8114750 <__lshift>
 8113cc6:	4683      	mov	fp, r0
 8113cc8:	9b04      	ldr	r3, [sp, #16]
 8113cca:	2b00      	cmp	r3, #0
 8113ccc:	dd05      	ble.n	8113cda <_dtoa_r+0x84a>
 8113cce:	4631      	mov	r1, r6
 8113cd0:	461a      	mov	r2, r3
 8113cd2:	4620      	mov	r0, r4
 8113cd4:	f000 fd3c 	bl	8114750 <__lshift>
 8113cd8:	4606      	mov	r6, r0
 8113cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8113cdc:	2b00      	cmp	r3, #0
 8113cde:	d069      	beq.n	8113db4 <_dtoa_r+0x924>
 8113ce0:	4631      	mov	r1, r6
 8113ce2:	4658      	mov	r0, fp
 8113ce4:	f000 fda0 	bl	8114828 <__mcmp>
 8113ce8:	2800      	cmp	r0, #0
 8113cea:	da63      	bge.n	8113db4 <_dtoa_r+0x924>
 8113cec:	2300      	movs	r3, #0
 8113cee:	4659      	mov	r1, fp
 8113cf0:	220a      	movs	r2, #10
 8113cf2:	4620      	mov	r0, r4
 8113cf4:	f000 fb7c 	bl	81143f0 <__multadd>
 8113cf8:	9b08      	ldr	r3, [sp, #32]
 8113cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8113cfe:	4683      	mov	fp, r0
 8113d00:	2b00      	cmp	r3, #0
 8113d02:	f000 818f 	beq.w	8114024 <_dtoa_r+0xb94>
 8113d06:	4639      	mov	r1, r7
 8113d08:	2300      	movs	r3, #0
 8113d0a:	220a      	movs	r2, #10
 8113d0c:	4620      	mov	r0, r4
 8113d0e:	f000 fb6f 	bl	81143f0 <__multadd>
 8113d12:	f1b9 0f00 	cmp.w	r9, #0
 8113d16:	4607      	mov	r7, r0
 8113d18:	f300 808e 	bgt.w	8113e38 <_dtoa_r+0x9a8>
 8113d1c:	9b05      	ldr	r3, [sp, #20]
 8113d1e:	2b02      	cmp	r3, #2
 8113d20:	dc50      	bgt.n	8113dc4 <_dtoa_r+0x934>
 8113d22:	e089      	b.n	8113e38 <_dtoa_r+0x9a8>
 8113d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8113d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8113d2a:	e75d      	b.n	8113be8 <_dtoa_r+0x758>
 8113d2c:	9b01      	ldr	r3, [sp, #4]
 8113d2e:	1e5e      	subs	r6, r3, #1
 8113d30:	9b06      	ldr	r3, [sp, #24]
 8113d32:	42b3      	cmp	r3, r6
 8113d34:	bfbf      	itttt	lt
 8113d36:	9b06      	ldrlt	r3, [sp, #24]
 8113d38:	9606      	strlt	r6, [sp, #24]
 8113d3a:	1af2      	sublt	r2, r6, r3
 8113d3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8113d3e:	bfb6      	itet	lt
 8113d40:	189b      	addlt	r3, r3, r2
 8113d42:	1b9e      	subge	r6, r3, r6
 8113d44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8113d46:	9b01      	ldr	r3, [sp, #4]
 8113d48:	bfb8      	it	lt
 8113d4a:	2600      	movlt	r6, #0
 8113d4c:	2b00      	cmp	r3, #0
 8113d4e:	bfb5      	itete	lt
 8113d50:	eba8 0503 	sublt.w	r5, r8, r3
 8113d54:	9b01      	ldrge	r3, [sp, #4]
 8113d56:	2300      	movlt	r3, #0
 8113d58:	4645      	movge	r5, r8
 8113d5a:	e747      	b.n	8113bec <_dtoa_r+0x75c>
 8113d5c:	9e06      	ldr	r6, [sp, #24]
 8113d5e:	9f08      	ldr	r7, [sp, #32]
 8113d60:	4645      	mov	r5, r8
 8113d62:	e74c      	b.n	8113bfe <_dtoa_r+0x76e>
 8113d64:	9a06      	ldr	r2, [sp, #24]
 8113d66:	e775      	b.n	8113c54 <_dtoa_r+0x7c4>
 8113d68:	9b05      	ldr	r3, [sp, #20]
 8113d6a:	2b01      	cmp	r3, #1
 8113d6c:	dc18      	bgt.n	8113da0 <_dtoa_r+0x910>
 8113d6e:	9b02      	ldr	r3, [sp, #8]
 8113d70:	b9b3      	cbnz	r3, 8113da0 <_dtoa_r+0x910>
 8113d72:	9b03      	ldr	r3, [sp, #12]
 8113d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8113d78:	b9a3      	cbnz	r3, 8113da4 <_dtoa_r+0x914>
 8113d7a:	9b03      	ldr	r3, [sp, #12]
 8113d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8113d80:	0d1b      	lsrs	r3, r3, #20
 8113d82:	051b      	lsls	r3, r3, #20
 8113d84:	b12b      	cbz	r3, 8113d92 <_dtoa_r+0x902>
 8113d86:	9b04      	ldr	r3, [sp, #16]
 8113d88:	3301      	adds	r3, #1
 8113d8a:	9304      	str	r3, [sp, #16]
 8113d8c:	f108 0801 	add.w	r8, r8, #1
 8113d90:	2301      	movs	r3, #1
 8113d92:	9306      	str	r3, [sp, #24]
 8113d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8113d96:	2b00      	cmp	r3, #0
 8113d98:	f47f af74 	bne.w	8113c84 <_dtoa_r+0x7f4>
 8113d9c:	2001      	movs	r0, #1
 8113d9e:	e779      	b.n	8113c94 <_dtoa_r+0x804>
 8113da0:	2300      	movs	r3, #0
 8113da2:	e7f6      	b.n	8113d92 <_dtoa_r+0x902>
 8113da4:	9b02      	ldr	r3, [sp, #8]
 8113da6:	e7f4      	b.n	8113d92 <_dtoa_r+0x902>
 8113da8:	d085      	beq.n	8113cb6 <_dtoa_r+0x826>
 8113daa:	4618      	mov	r0, r3
 8113dac:	301c      	adds	r0, #28
 8113dae:	e77d      	b.n	8113cac <_dtoa_r+0x81c>
 8113db0:	40240000 	.word	0x40240000
 8113db4:	9b01      	ldr	r3, [sp, #4]
 8113db6:	2b00      	cmp	r3, #0
 8113db8:	dc38      	bgt.n	8113e2c <_dtoa_r+0x99c>
 8113dba:	9b05      	ldr	r3, [sp, #20]
 8113dbc:	2b02      	cmp	r3, #2
 8113dbe:	dd35      	ble.n	8113e2c <_dtoa_r+0x99c>
 8113dc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8113dc4:	f1b9 0f00 	cmp.w	r9, #0
 8113dc8:	d10d      	bne.n	8113de6 <_dtoa_r+0x956>
 8113dca:	4631      	mov	r1, r6
 8113dcc:	464b      	mov	r3, r9
 8113dce:	2205      	movs	r2, #5
 8113dd0:	4620      	mov	r0, r4
 8113dd2:	f000 fb0d 	bl	81143f0 <__multadd>
 8113dd6:	4601      	mov	r1, r0
 8113dd8:	4606      	mov	r6, r0
 8113dda:	4658      	mov	r0, fp
 8113ddc:	f000 fd24 	bl	8114828 <__mcmp>
 8113de0:	2800      	cmp	r0, #0
 8113de2:	f73f adbd 	bgt.w	8113960 <_dtoa_r+0x4d0>
 8113de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8113de8:	9d00      	ldr	r5, [sp, #0]
 8113dea:	ea6f 0a03 	mvn.w	sl, r3
 8113dee:	f04f 0800 	mov.w	r8, #0
 8113df2:	4631      	mov	r1, r6
 8113df4:	4620      	mov	r0, r4
 8113df6:	f000 fad9 	bl	81143ac <_Bfree>
 8113dfa:	2f00      	cmp	r7, #0
 8113dfc:	f43f aeb4 	beq.w	8113b68 <_dtoa_r+0x6d8>
 8113e00:	f1b8 0f00 	cmp.w	r8, #0
 8113e04:	d005      	beq.n	8113e12 <_dtoa_r+0x982>
 8113e06:	45b8      	cmp	r8, r7
 8113e08:	d003      	beq.n	8113e12 <_dtoa_r+0x982>
 8113e0a:	4641      	mov	r1, r8
 8113e0c:	4620      	mov	r0, r4
 8113e0e:	f000 facd 	bl	81143ac <_Bfree>
 8113e12:	4639      	mov	r1, r7
 8113e14:	4620      	mov	r0, r4
 8113e16:	f000 fac9 	bl	81143ac <_Bfree>
 8113e1a:	e6a5      	b.n	8113b68 <_dtoa_r+0x6d8>
 8113e1c:	2600      	movs	r6, #0
 8113e1e:	4637      	mov	r7, r6
 8113e20:	e7e1      	b.n	8113de6 <_dtoa_r+0x956>
 8113e22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8113e24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8113e28:	4637      	mov	r7, r6
 8113e2a:	e599      	b.n	8113960 <_dtoa_r+0x4d0>
 8113e2c:	9b08      	ldr	r3, [sp, #32]
 8113e2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8113e32:	2b00      	cmp	r3, #0
 8113e34:	f000 80fd 	beq.w	8114032 <_dtoa_r+0xba2>
 8113e38:	2d00      	cmp	r5, #0
 8113e3a:	dd05      	ble.n	8113e48 <_dtoa_r+0x9b8>
 8113e3c:	4639      	mov	r1, r7
 8113e3e:	462a      	mov	r2, r5
 8113e40:	4620      	mov	r0, r4
 8113e42:	f000 fc85 	bl	8114750 <__lshift>
 8113e46:	4607      	mov	r7, r0
 8113e48:	9b06      	ldr	r3, [sp, #24]
 8113e4a:	2b00      	cmp	r3, #0
 8113e4c:	d05c      	beq.n	8113f08 <_dtoa_r+0xa78>
 8113e4e:	6879      	ldr	r1, [r7, #4]
 8113e50:	4620      	mov	r0, r4
 8113e52:	f000 fa6b 	bl	811432c <_Balloc>
 8113e56:	4605      	mov	r5, r0
 8113e58:	b928      	cbnz	r0, 8113e66 <_dtoa_r+0x9d6>
 8113e5a:	4b80      	ldr	r3, [pc, #512]	; (811405c <_dtoa_r+0xbcc>)
 8113e5c:	4602      	mov	r2, r0
 8113e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8113e62:	f7ff bb2e 	b.w	81134c2 <_dtoa_r+0x32>
 8113e66:	693a      	ldr	r2, [r7, #16]
 8113e68:	3202      	adds	r2, #2
 8113e6a:	0092      	lsls	r2, r2, #2
 8113e6c:	f107 010c 	add.w	r1, r7, #12
 8113e70:	300c      	adds	r0, #12
 8113e72:	f7fe fa42 	bl	81122fa <memcpy>
 8113e76:	2201      	movs	r2, #1
 8113e78:	4629      	mov	r1, r5
 8113e7a:	4620      	mov	r0, r4
 8113e7c:	f000 fc68 	bl	8114750 <__lshift>
 8113e80:	9b00      	ldr	r3, [sp, #0]
 8113e82:	3301      	adds	r3, #1
 8113e84:	9301      	str	r3, [sp, #4]
 8113e86:	9b00      	ldr	r3, [sp, #0]
 8113e88:	444b      	add	r3, r9
 8113e8a:	9307      	str	r3, [sp, #28]
 8113e8c:	9b02      	ldr	r3, [sp, #8]
 8113e8e:	f003 0301 	and.w	r3, r3, #1
 8113e92:	46b8      	mov	r8, r7
 8113e94:	9306      	str	r3, [sp, #24]
 8113e96:	4607      	mov	r7, r0
 8113e98:	9b01      	ldr	r3, [sp, #4]
 8113e9a:	4631      	mov	r1, r6
 8113e9c:	3b01      	subs	r3, #1
 8113e9e:	4658      	mov	r0, fp
 8113ea0:	9302      	str	r3, [sp, #8]
 8113ea2:	f7ff fa69 	bl	8113378 <quorem>
 8113ea6:	4603      	mov	r3, r0
 8113ea8:	3330      	adds	r3, #48	; 0x30
 8113eaa:	9004      	str	r0, [sp, #16]
 8113eac:	4641      	mov	r1, r8
 8113eae:	4658      	mov	r0, fp
 8113eb0:	9308      	str	r3, [sp, #32]
 8113eb2:	f000 fcb9 	bl	8114828 <__mcmp>
 8113eb6:	463a      	mov	r2, r7
 8113eb8:	4681      	mov	r9, r0
 8113eba:	4631      	mov	r1, r6
 8113ebc:	4620      	mov	r0, r4
 8113ebe:	f000 fccf 	bl	8114860 <__mdiff>
 8113ec2:	68c2      	ldr	r2, [r0, #12]
 8113ec4:	9b08      	ldr	r3, [sp, #32]
 8113ec6:	4605      	mov	r5, r0
 8113ec8:	bb02      	cbnz	r2, 8113f0c <_dtoa_r+0xa7c>
 8113eca:	4601      	mov	r1, r0
 8113ecc:	4658      	mov	r0, fp
 8113ece:	f000 fcab 	bl	8114828 <__mcmp>
 8113ed2:	9b08      	ldr	r3, [sp, #32]
 8113ed4:	4602      	mov	r2, r0
 8113ed6:	4629      	mov	r1, r5
 8113ed8:	4620      	mov	r0, r4
 8113eda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8113ede:	f000 fa65 	bl	81143ac <_Bfree>
 8113ee2:	9b05      	ldr	r3, [sp, #20]
 8113ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8113ee6:	9d01      	ldr	r5, [sp, #4]
 8113ee8:	ea43 0102 	orr.w	r1, r3, r2
 8113eec:	9b06      	ldr	r3, [sp, #24]
 8113eee:	430b      	orrs	r3, r1
 8113ef0:	9b08      	ldr	r3, [sp, #32]
 8113ef2:	d10d      	bne.n	8113f10 <_dtoa_r+0xa80>
 8113ef4:	2b39      	cmp	r3, #57	; 0x39
 8113ef6:	d029      	beq.n	8113f4c <_dtoa_r+0xabc>
 8113ef8:	f1b9 0f00 	cmp.w	r9, #0
 8113efc:	dd01      	ble.n	8113f02 <_dtoa_r+0xa72>
 8113efe:	9b04      	ldr	r3, [sp, #16]
 8113f00:	3331      	adds	r3, #49	; 0x31
 8113f02:	9a02      	ldr	r2, [sp, #8]
 8113f04:	7013      	strb	r3, [r2, #0]
 8113f06:	e774      	b.n	8113df2 <_dtoa_r+0x962>
 8113f08:	4638      	mov	r0, r7
 8113f0a:	e7b9      	b.n	8113e80 <_dtoa_r+0x9f0>
 8113f0c:	2201      	movs	r2, #1
 8113f0e:	e7e2      	b.n	8113ed6 <_dtoa_r+0xa46>
 8113f10:	f1b9 0f00 	cmp.w	r9, #0
 8113f14:	db06      	blt.n	8113f24 <_dtoa_r+0xa94>
 8113f16:	9905      	ldr	r1, [sp, #20]
 8113f18:	ea41 0909 	orr.w	r9, r1, r9
 8113f1c:	9906      	ldr	r1, [sp, #24]
 8113f1e:	ea59 0101 	orrs.w	r1, r9, r1
 8113f22:	d120      	bne.n	8113f66 <_dtoa_r+0xad6>
 8113f24:	2a00      	cmp	r2, #0
 8113f26:	ddec      	ble.n	8113f02 <_dtoa_r+0xa72>
 8113f28:	4659      	mov	r1, fp
 8113f2a:	2201      	movs	r2, #1
 8113f2c:	4620      	mov	r0, r4
 8113f2e:	9301      	str	r3, [sp, #4]
 8113f30:	f000 fc0e 	bl	8114750 <__lshift>
 8113f34:	4631      	mov	r1, r6
 8113f36:	4683      	mov	fp, r0
 8113f38:	f000 fc76 	bl	8114828 <__mcmp>
 8113f3c:	2800      	cmp	r0, #0
 8113f3e:	9b01      	ldr	r3, [sp, #4]
 8113f40:	dc02      	bgt.n	8113f48 <_dtoa_r+0xab8>
 8113f42:	d1de      	bne.n	8113f02 <_dtoa_r+0xa72>
 8113f44:	07da      	lsls	r2, r3, #31
 8113f46:	d5dc      	bpl.n	8113f02 <_dtoa_r+0xa72>
 8113f48:	2b39      	cmp	r3, #57	; 0x39
 8113f4a:	d1d8      	bne.n	8113efe <_dtoa_r+0xa6e>
 8113f4c:	9a02      	ldr	r2, [sp, #8]
 8113f4e:	2339      	movs	r3, #57	; 0x39
 8113f50:	7013      	strb	r3, [r2, #0]
 8113f52:	462b      	mov	r3, r5
 8113f54:	461d      	mov	r5, r3
 8113f56:	3b01      	subs	r3, #1
 8113f58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8113f5c:	2a39      	cmp	r2, #57	; 0x39
 8113f5e:	d050      	beq.n	8114002 <_dtoa_r+0xb72>
 8113f60:	3201      	adds	r2, #1
 8113f62:	701a      	strb	r2, [r3, #0]
 8113f64:	e745      	b.n	8113df2 <_dtoa_r+0x962>
 8113f66:	2a00      	cmp	r2, #0
 8113f68:	dd03      	ble.n	8113f72 <_dtoa_r+0xae2>
 8113f6a:	2b39      	cmp	r3, #57	; 0x39
 8113f6c:	d0ee      	beq.n	8113f4c <_dtoa_r+0xabc>
 8113f6e:	3301      	adds	r3, #1
 8113f70:	e7c7      	b.n	8113f02 <_dtoa_r+0xa72>
 8113f72:	9a01      	ldr	r2, [sp, #4]
 8113f74:	9907      	ldr	r1, [sp, #28]
 8113f76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8113f7a:	428a      	cmp	r2, r1
 8113f7c:	d02a      	beq.n	8113fd4 <_dtoa_r+0xb44>
 8113f7e:	4659      	mov	r1, fp
 8113f80:	2300      	movs	r3, #0
 8113f82:	220a      	movs	r2, #10
 8113f84:	4620      	mov	r0, r4
 8113f86:	f000 fa33 	bl	81143f0 <__multadd>
 8113f8a:	45b8      	cmp	r8, r7
 8113f8c:	4683      	mov	fp, r0
 8113f8e:	f04f 0300 	mov.w	r3, #0
 8113f92:	f04f 020a 	mov.w	r2, #10
 8113f96:	4641      	mov	r1, r8
 8113f98:	4620      	mov	r0, r4
 8113f9a:	d107      	bne.n	8113fac <_dtoa_r+0xb1c>
 8113f9c:	f000 fa28 	bl	81143f0 <__multadd>
 8113fa0:	4680      	mov	r8, r0
 8113fa2:	4607      	mov	r7, r0
 8113fa4:	9b01      	ldr	r3, [sp, #4]
 8113fa6:	3301      	adds	r3, #1
 8113fa8:	9301      	str	r3, [sp, #4]
 8113faa:	e775      	b.n	8113e98 <_dtoa_r+0xa08>
 8113fac:	f000 fa20 	bl	81143f0 <__multadd>
 8113fb0:	4639      	mov	r1, r7
 8113fb2:	4680      	mov	r8, r0
 8113fb4:	2300      	movs	r3, #0
 8113fb6:	220a      	movs	r2, #10
 8113fb8:	4620      	mov	r0, r4
 8113fba:	f000 fa19 	bl	81143f0 <__multadd>
 8113fbe:	4607      	mov	r7, r0
 8113fc0:	e7f0      	b.n	8113fa4 <_dtoa_r+0xb14>
 8113fc2:	f1b9 0f00 	cmp.w	r9, #0
 8113fc6:	9a00      	ldr	r2, [sp, #0]
 8113fc8:	bfcc      	ite	gt
 8113fca:	464d      	movgt	r5, r9
 8113fcc:	2501      	movle	r5, #1
 8113fce:	4415      	add	r5, r2
 8113fd0:	f04f 0800 	mov.w	r8, #0
 8113fd4:	4659      	mov	r1, fp
 8113fd6:	2201      	movs	r2, #1
 8113fd8:	4620      	mov	r0, r4
 8113fda:	9301      	str	r3, [sp, #4]
 8113fdc:	f000 fbb8 	bl	8114750 <__lshift>
 8113fe0:	4631      	mov	r1, r6
 8113fe2:	4683      	mov	fp, r0
 8113fe4:	f000 fc20 	bl	8114828 <__mcmp>
 8113fe8:	2800      	cmp	r0, #0
 8113fea:	dcb2      	bgt.n	8113f52 <_dtoa_r+0xac2>
 8113fec:	d102      	bne.n	8113ff4 <_dtoa_r+0xb64>
 8113fee:	9b01      	ldr	r3, [sp, #4]
 8113ff0:	07db      	lsls	r3, r3, #31
 8113ff2:	d4ae      	bmi.n	8113f52 <_dtoa_r+0xac2>
 8113ff4:	462b      	mov	r3, r5
 8113ff6:	461d      	mov	r5, r3
 8113ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8113ffc:	2a30      	cmp	r2, #48	; 0x30
 8113ffe:	d0fa      	beq.n	8113ff6 <_dtoa_r+0xb66>
 8114000:	e6f7      	b.n	8113df2 <_dtoa_r+0x962>
 8114002:	9a00      	ldr	r2, [sp, #0]
 8114004:	429a      	cmp	r2, r3
 8114006:	d1a5      	bne.n	8113f54 <_dtoa_r+0xac4>
 8114008:	f10a 0a01 	add.w	sl, sl, #1
 811400c:	2331      	movs	r3, #49	; 0x31
 811400e:	e779      	b.n	8113f04 <_dtoa_r+0xa74>
 8114010:	4b13      	ldr	r3, [pc, #76]	; (8114060 <_dtoa_r+0xbd0>)
 8114012:	f7ff baaf 	b.w	8113574 <_dtoa_r+0xe4>
 8114016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8114018:	2b00      	cmp	r3, #0
 811401a:	f47f aa86 	bne.w	811352a <_dtoa_r+0x9a>
 811401e:	4b11      	ldr	r3, [pc, #68]	; (8114064 <_dtoa_r+0xbd4>)
 8114020:	f7ff baa8 	b.w	8113574 <_dtoa_r+0xe4>
 8114024:	f1b9 0f00 	cmp.w	r9, #0
 8114028:	dc03      	bgt.n	8114032 <_dtoa_r+0xba2>
 811402a:	9b05      	ldr	r3, [sp, #20]
 811402c:	2b02      	cmp	r3, #2
 811402e:	f73f aec9 	bgt.w	8113dc4 <_dtoa_r+0x934>
 8114032:	9d00      	ldr	r5, [sp, #0]
 8114034:	4631      	mov	r1, r6
 8114036:	4658      	mov	r0, fp
 8114038:	f7ff f99e 	bl	8113378 <quorem>
 811403c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8114040:	f805 3b01 	strb.w	r3, [r5], #1
 8114044:	9a00      	ldr	r2, [sp, #0]
 8114046:	1aaa      	subs	r2, r5, r2
 8114048:	4591      	cmp	r9, r2
 811404a:	ddba      	ble.n	8113fc2 <_dtoa_r+0xb32>
 811404c:	4659      	mov	r1, fp
 811404e:	2300      	movs	r3, #0
 8114050:	220a      	movs	r2, #10
 8114052:	4620      	mov	r0, r4
 8114054:	f000 f9cc 	bl	81143f0 <__multadd>
 8114058:	4683      	mov	fp, r0
 811405a:	e7eb      	b.n	8114034 <_dtoa_r+0xba4>
 811405c:	08116e1e 	.word	0x08116e1e
 8114060:	08116cdc 	.word	0x08116cdc
 8114064:	08116db2 	.word	0x08116db2

08114068 <__sflush_r>:
 8114068:	898a      	ldrh	r2, [r1, #12]
 811406a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811406e:	4605      	mov	r5, r0
 8114070:	0710      	lsls	r0, r2, #28
 8114072:	460c      	mov	r4, r1
 8114074:	d458      	bmi.n	8114128 <__sflush_r+0xc0>
 8114076:	684b      	ldr	r3, [r1, #4]
 8114078:	2b00      	cmp	r3, #0
 811407a:	dc05      	bgt.n	8114088 <__sflush_r+0x20>
 811407c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 811407e:	2b00      	cmp	r3, #0
 8114080:	dc02      	bgt.n	8114088 <__sflush_r+0x20>
 8114082:	2000      	movs	r0, #0
 8114084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8114088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811408a:	2e00      	cmp	r6, #0
 811408c:	d0f9      	beq.n	8114082 <__sflush_r+0x1a>
 811408e:	2300      	movs	r3, #0
 8114090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8114094:	682f      	ldr	r7, [r5, #0]
 8114096:	602b      	str	r3, [r5, #0]
 8114098:	d032      	beq.n	8114100 <__sflush_r+0x98>
 811409a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 811409c:	89a3      	ldrh	r3, [r4, #12]
 811409e:	075a      	lsls	r2, r3, #29
 81140a0:	d505      	bpl.n	81140ae <__sflush_r+0x46>
 81140a2:	6863      	ldr	r3, [r4, #4]
 81140a4:	1ac0      	subs	r0, r0, r3
 81140a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81140a8:	b10b      	cbz	r3, 81140ae <__sflush_r+0x46>
 81140aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81140ac:	1ac0      	subs	r0, r0, r3
 81140ae:	2300      	movs	r3, #0
 81140b0:	4602      	mov	r2, r0
 81140b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81140b4:	6a21      	ldr	r1, [r4, #32]
 81140b6:	4628      	mov	r0, r5
 81140b8:	47b0      	blx	r6
 81140ba:	1c43      	adds	r3, r0, #1
 81140bc:	89a3      	ldrh	r3, [r4, #12]
 81140be:	d106      	bne.n	81140ce <__sflush_r+0x66>
 81140c0:	6829      	ldr	r1, [r5, #0]
 81140c2:	291d      	cmp	r1, #29
 81140c4:	d82c      	bhi.n	8114120 <__sflush_r+0xb8>
 81140c6:	4a2a      	ldr	r2, [pc, #168]	; (8114170 <__sflush_r+0x108>)
 81140c8:	40ca      	lsrs	r2, r1
 81140ca:	07d6      	lsls	r6, r2, #31
 81140cc:	d528      	bpl.n	8114120 <__sflush_r+0xb8>
 81140ce:	2200      	movs	r2, #0
 81140d0:	6062      	str	r2, [r4, #4]
 81140d2:	04d9      	lsls	r1, r3, #19
 81140d4:	6922      	ldr	r2, [r4, #16]
 81140d6:	6022      	str	r2, [r4, #0]
 81140d8:	d504      	bpl.n	81140e4 <__sflush_r+0x7c>
 81140da:	1c42      	adds	r2, r0, #1
 81140dc:	d101      	bne.n	81140e2 <__sflush_r+0x7a>
 81140de:	682b      	ldr	r3, [r5, #0]
 81140e0:	b903      	cbnz	r3, 81140e4 <__sflush_r+0x7c>
 81140e2:	6560      	str	r0, [r4, #84]	; 0x54
 81140e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81140e6:	602f      	str	r7, [r5, #0]
 81140e8:	2900      	cmp	r1, #0
 81140ea:	d0ca      	beq.n	8114082 <__sflush_r+0x1a>
 81140ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81140f0:	4299      	cmp	r1, r3
 81140f2:	d002      	beq.n	81140fa <__sflush_r+0x92>
 81140f4:	4628      	mov	r0, r5
 81140f6:	f000 fca7 	bl	8114a48 <_free_r>
 81140fa:	2000      	movs	r0, #0
 81140fc:	6360      	str	r0, [r4, #52]	; 0x34
 81140fe:	e7c1      	b.n	8114084 <__sflush_r+0x1c>
 8114100:	6a21      	ldr	r1, [r4, #32]
 8114102:	2301      	movs	r3, #1
 8114104:	4628      	mov	r0, r5
 8114106:	47b0      	blx	r6
 8114108:	1c41      	adds	r1, r0, #1
 811410a:	d1c7      	bne.n	811409c <__sflush_r+0x34>
 811410c:	682b      	ldr	r3, [r5, #0]
 811410e:	2b00      	cmp	r3, #0
 8114110:	d0c4      	beq.n	811409c <__sflush_r+0x34>
 8114112:	2b1d      	cmp	r3, #29
 8114114:	d001      	beq.n	811411a <__sflush_r+0xb2>
 8114116:	2b16      	cmp	r3, #22
 8114118:	d101      	bne.n	811411e <__sflush_r+0xb6>
 811411a:	602f      	str	r7, [r5, #0]
 811411c:	e7b1      	b.n	8114082 <__sflush_r+0x1a>
 811411e:	89a3      	ldrh	r3, [r4, #12]
 8114120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8114124:	81a3      	strh	r3, [r4, #12]
 8114126:	e7ad      	b.n	8114084 <__sflush_r+0x1c>
 8114128:	690f      	ldr	r7, [r1, #16]
 811412a:	2f00      	cmp	r7, #0
 811412c:	d0a9      	beq.n	8114082 <__sflush_r+0x1a>
 811412e:	0793      	lsls	r3, r2, #30
 8114130:	680e      	ldr	r6, [r1, #0]
 8114132:	bf08      	it	eq
 8114134:	694b      	ldreq	r3, [r1, #20]
 8114136:	600f      	str	r7, [r1, #0]
 8114138:	bf18      	it	ne
 811413a:	2300      	movne	r3, #0
 811413c:	eba6 0807 	sub.w	r8, r6, r7
 8114140:	608b      	str	r3, [r1, #8]
 8114142:	f1b8 0f00 	cmp.w	r8, #0
 8114146:	dd9c      	ble.n	8114082 <__sflush_r+0x1a>
 8114148:	6a21      	ldr	r1, [r4, #32]
 811414a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 811414c:	4643      	mov	r3, r8
 811414e:	463a      	mov	r2, r7
 8114150:	4628      	mov	r0, r5
 8114152:	47b0      	blx	r6
 8114154:	2800      	cmp	r0, #0
 8114156:	dc06      	bgt.n	8114166 <__sflush_r+0xfe>
 8114158:	89a3      	ldrh	r3, [r4, #12]
 811415a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 811415e:	81a3      	strh	r3, [r4, #12]
 8114160:	f04f 30ff 	mov.w	r0, #4294967295
 8114164:	e78e      	b.n	8114084 <__sflush_r+0x1c>
 8114166:	4407      	add	r7, r0
 8114168:	eba8 0800 	sub.w	r8, r8, r0
 811416c:	e7e9      	b.n	8114142 <__sflush_r+0xda>
 811416e:	bf00      	nop
 8114170:	20400001 	.word	0x20400001

08114174 <_fflush_r>:
 8114174:	b538      	push	{r3, r4, r5, lr}
 8114176:	690b      	ldr	r3, [r1, #16]
 8114178:	4605      	mov	r5, r0
 811417a:	460c      	mov	r4, r1
 811417c:	b913      	cbnz	r3, 8114184 <_fflush_r+0x10>
 811417e:	2500      	movs	r5, #0
 8114180:	4628      	mov	r0, r5
 8114182:	bd38      	pop	{r3, r4, r5, pc}
 8114184:	b118      	cbz	r0, 811418e <_fflush_r+0x1a>
 8114186:	6983      	ldr	r3, [r0, #24]
 8114188:	b90b      	cbnz	r3, 811418e <_fflush_r+0x1a>
 811418a:	f7fd ffe3 	bl	8112154 <__sinit>
 811418e:	4b14      	ldr	r3, [pc, #80]	; (81141e0 <_fflush_r+0x6c>)
 8114190:	429c      	cmp	r4, r3
 8114192:	d11b      	bne.n	81141cc <_fflush_r+0x58>
 8114194:	686c      	ldr	r4, [r5, #4]
 8114196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811419a:	2b00      	cmp	r3, #0
 811419c:	d0ef      	beq.n	811417e <_fflush_r+0xa>
 811419e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81141a0:	07d0      	lsls	r0, r2, #31
 81141a2:	d404      	bmi.n	81141ae <_fflush_r+0x3a>
 81141a4:	0599      	lsls	r1, r3, #22
 81141a6:	d402      	bmi.n	81141ae <_fflush_r+0x3a>
 81141a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81141aa:	f7fe f896 	bl	81122da <__retarget_lock_acquire_recursive>
 81141ae:	4628      	mov	r0, r5
 81141b0:	4621      	mov	r1, r4
 81141b2:	f7ff ff59 	bl	8114068 <__sflush_r>
 81141b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81141b8:	07da      	lsls	r2, r3, #31
 81141ba:	4605      	mov	r5, r0
 81141bc:	d4e0      	bmi.n	8114180 <_fflush_r+0xc>
 81141be:	89a3      	ldrh	r3, [r4, #12]
 81141c0:	059b      	lsls	r3, r3, #22
 81141c2:	d4dd      	bmi.n	8114180 <_fflush_r+0xc>
 81141c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81141c6:	f7fe f889 	bl	81122dc <__retarget_lock_release_recursive>
 81141ca:	e7d9      	b.n	8114180 <_fflush_r+0xc>
 81141cc:	4b05      	ldr	r3, [pc, #20]	; (81141e4 <_fflush_r+0x70>)
 81141ce:	429c      	cmp	r4, r3
 81141d0:	d101      	bne.n	81141d6 <_fflush_r+0x62>
 81141d2:	68ac      	ldr	r4, [r5, #8]
 81141d4:	e7df      	b.n	8114196 <_fflush_r+0x22>
 81141d6:	4b04      	ldr	r3, [pc, #16]	; (81141e8 <_fflush_r+0x74>)
 81141d8:	429c      	cmp	r4, r3
 81141da:	bf08      	it	eq
 81141dc:	68ec      	ldreq	r4, [r5, #12]
 81141de:	e7da      	b.n	8114196 <_fflush_r+0x22>
 81141e0:	08116c88 	.word	0x08116c88
 81141e4:	08116ca8 	.word	0x08116ca8
 81141e8:	08116c68 	.word	0x08116c68

081141ec <fiprintf>:
 81141ec:	b40e      	push	{r1, r2, r3}
 81141ee:	b503      	push	{r0, r1, lr}
 81141f0:	4601      	mov	r1, r0
 81141f2:	ab03      	add	r3, sp, #12
 81141f4:	4805      	ldr	r0, [pc, #20]	; (811420c <fiprintf+0x20>)
 81141f6:	f853 2b04 	ldr.w	r2, [r3], #4
 81141fa:	6800      	ldr	r0, [r0, #0]
 81141fc:	9301      	str	r3, [sp, #4]
 81141fe:	f000 fc9d 	bl	8114b3c <_vfiprintf_r>
 8114202:	b002      	add	sp, #8
 8114204:	f85d eb04 	ldr.w	lr, [sp], #4
 8114208:	b003      	add	sp, #12
 811420a:	4770      	bx	lr
 811420c:	1000002c 	.word	0x1000002c

08114210 <_localeconv_r>:
 8114210:	4800      	ldr	r0, [pc, #0]	; (8114214 <_localeconv_r+0x4>)
 8114212:	4770      	bx	lr
 8114214:	10000180 	.word	0x10000180

08114218 <_lseek_r>:
 8114218:	b538      	push	{r3, r4, r5, lr}
 811421a:	4d07      	ldr	r5, [pc, #28]	; (8114238 <_lseek_r+0x20>)
 811421c:	4604      	mov	r4, r0
 811421e:	4608      	mov	r0, r1
 8114220:	4611      	mov	r1, r2
 8114222:	2200      	movs	r2, #0
 8114224:	602a      	str	r2, [r5, #0]
 8114226:	461a      	mov	r2, r3
 8114228:	f7fd fb3c 	bl	81118a4 <_lseek>
 811422c:	1c43      	adds	r3, r0, #1
 811422e:	d102      	bne.n	8114236 <_lseek_r+0x1e>
 8114230:	682b      	ldr	r3, [r5, #0]
 8114232:	b103      	cbz	r3, 8114236 <_lseek_r+0x1e>
 8114234:	6023      	str	r3, [r4, #0]
 8114236:	bd38      	pop	{r3, r4, r5, pc}
 8114238:	100087a8 	.word	0x100087a8

0811423c <__swhatbuf_r>:
 811423c:	b570      	push	{r4, r5, r6, lr}
 811423e:	460e      	mov	r6, r1
 8114240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8114244:	2900      	cmp	r1, #0
 8114246:	b096      	sub	sp, #88	; 0x58
 8114248:	4614      	mov	r4, r2
 811424a:	461d      	mov	r5, r3
 811424c:	da07      	bge.n	811425e <__swhatbuf_r+0x22>
 811424e:	2300      	movs	r3, #0
 8114250:	602b      	str	r3, [r5, #0]
 8114252:	89b3      	ldrh	r3, [r6, #12]
 8114254:	061a      	lsls	r2, r3, #24
 8114256:	d410      	bmi.n	811427a <__swhatbuf_r+0x3e>
 8114258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 811425c:	e00e      	b.n	811427c <__swhatbuf_r+0x40>
 811425e:	466a      	mov	r2, sp
 8114260:	f000 fdb6 	bl	8114dd0 <_fstat_r>
 8114264:	2800      	cmp	r0, #0
 8114266:	dbf2      	blt.n	811424e <__swhatbuf_r+0x12>
 8114268:	9a01      	ldr	r2, [sp, #4]
 811426a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 811426e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8114272:	425a      	negs	r2, r3
 8114274:	415a      	adcs	r2, r3
 8114276:	602a      	str	r2, [r5, #0]
 8114278:	e7ee      	b.n	8114258 <__swhatbuf_r+0x1c>
 811427a:	2340      	movs	r3, #64	; 0x40
 811427c:	2000      	movs	r0, #0
 811427e:	6023      	str	r3, [r4, #0]
 8114280:	b016      	add	sp, #88	; 0x58
 8114282:	bd70      	pop	{r4, r5, r6, pc}

08114284 <__smakebuf_r>:
 8114284:	898b      	ldrh	r3, [r1, #12]
 8114286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8114288:	079d      	lsls	r5, r3, #30
 811428a:	4606      	mov	r6, r0
 811428c:	460c      	mov	r4, r1
 811428e:	d507      	bpl.n	81142a0 <__smakebuf_r+0x1c>
 8114290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8114294:	6023      	str	r3, [r4, #0]
 8114296:	6123      	str	r3, [r4, #16]
 8114298:	2301      	movs	r3, #1
 811429a:	6163      	str	r3, [r4, #20]
 811429c:	b002      	add	sp, #8
 811429e:	bd70      	pop	{r4, r5, r6, pc}
 81142a0:	ab01      	add	r3, sp, #4
 81142a2:	466a      	mov	r2, sp
 81142a4:	f7ff ffca 	bl	811423c <__swhatbuf_r>
 81142a8:	9900      	ldr	r1, [sp, #0]
 81142aa:	4605      	mov	r5, r0
 81142ac:	4630      	mov	r0, r6
 81142ae:	f7fe f83b 	bl	8112328 <_malloc_r>
 81142b2:	b948      	cbnz	r0, 81142c8 <__smakebuf_r+0x44>
 81142b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81142b8:	059a      	lsls	r2, r3, #22
 81142ba:	d4ef      	bmi.n	811429c <__smakebuf_r+0x18>
 81142bc:	f023 0303 	bic.w	r3, r3, #3
 81142c0:	f043 0302 	orr.w	r3, r3, #2
 81142c4:	81a3      	strh	r3, [r4, #12]
 81142c6:	e7e3      	b.n	8114290 <__smakebuf_r+0xc>
 81142c8:	4b0d      	ldr	r3, [pc, #52]	; (8114300 <__smakebuf_r+0x7c>)
 81142ca:	62b3      	str	r3, [r6, #40]	; 0x28
 81142cc:	89a3      	ldrh	r3, [r4, #12]
 81142ce:	6020      	str	r0, [r4, #0]
 81142d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81142d4:	81a3      	strh	r3, [r4, #12]
 81142d6:	9b00      	ldr	r3, [sp, #0]
 81142d8:	6163      	str	r3, [r4, #20]
 81142da:	9b01      	ldr	r3, [sp, #4]
 81142dc:	6120      	str	r0, [r4, #16]
 81142de:	b15b      	cbz	r3, 81142f8 <__smakebuf_r+0x74>
 81142e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81142e4:	4630      	mov	r0, r6
 81142e6:	f000 fd85 	bl	8114df4 <_isatty_r>
 81142ea:	b128      	cbz	r0, 81142f8 <__smakebuf_r+0x74>
 81142ec:	89a3      	ldrh	r3, [r4, #12]
 81142ee:	f023 0303 	bic.w	r3, r3, #3
 81142f2:	f043 0301 	orr.w	r3, r3, #1
 81142f6:	81a3      	strh	r3, [r4, #12]
 81142f8:	89a0      	ldrh	r0, [r4, #12]
 81142fa:	4305      	orrs	r5, r0
 81142fc:	81a5      	strh	r5, [r4, #12]
 81142fe:	e7cd      	b.n	811429c <__smakebuf_r+0x18>
 8114300:	081120ed 	.word	0x081120ed

08114304 <malloc>:
 8114304:	4b02      	ldr	r3, [pc, #8]	; (8114310 <malloc+0xc>)
 8114306:	4601      	mov	r1, r0
 8114308:	6818      	ldr	r0, [r3, #0]
 811430a:	f7fe b80d 	b.w	8112328 <_malloc_r>
 811430e:	bf00      	nop
 8114310:	1000002c 	.word	0x1000002c

08114314 <__malloc_lock>:
 8114314:	4801      	ldr	r0, [pc, #4]	; (811431c <__malloc_lock+0x8>)
 8114316:	f7fd bfe0 	b.w	81122da <__retarget_lock_acquire_recursive>
 811431a:	bf00      	nop
 811431c:	10008ce0 	.word	0x10008ce0

08114320 <__malloc_unlock>:
 8114320:	4801      	ldr	r0, [pc, #4]	; (8114328 <__malloc_unlock+0x8>)
 8114322:	f7fd bfdb 	b.w	81122dc <__retarget_lock_release_recursive>
 8114326:	bf00      	nop
 8114328:	10008ce0 	.word	0x10008ce0

0811432c <_Balloc>:
 811432c:	b570      	push	{r4, r5, r6, lr}
 811432e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8114330:	4604      	mov	r4, r0
 8114332:	460d      	mov	r5, r1
 8114334:	b976      	cbnz	r6, 8114354 <_Balloc+0x28>
 8114336:	2010      	movs	r0, #16
 8114338:	f7ff ffe4 	bl	8114304 <malloc>
 811433c:	4602      	mov	r2, r0
 811433e:	6260      	str	r0, [r4, #36]	; 0x24
 8114340:	b920      	cbnz	r0, 811434c <_Balloc+0x20>
 8114342:	4b18      	ldr	r3, [pc, #96]	; (81143a4 <_Balloc+0x78>)
 8114344:	4818      	ldr	r0, [pc, #96]	; (81143a8 <_Balloc+0x7c>)
 8114346:	2166      	movs	r1, #102	; 0x66
 8114348:	f7fe ffe8 	bl	811331c <__assert_func>
 811434c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8114350:	6006      	str	r6, [r0, #0]
 8114352:	60c6      	str	r6, [r0, #12]
 8114354:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8114356:	68f3      	ldr	r3, [r6, #12]
 8114358:	b183      	cbz	r3, 811437c <_Balloc+0x50>
 811435a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811435c:	68db      	ldr	r3, [r3, #12]
 811435e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8114362:	b9b8      	cbnz	r0, 8114394 <_Balloc+0x68>
 8114364:	2101      	movs	r1, #1
 8114366:	fa01 f605 	lsl.w	r6, r1, r5
 811436a:	1d72      	adds	r2, r6, #5
 811436c:	0092      	lsls	r2, r2, #2
 811436e:	4620      	mov	r0, r4
 8114370:	f000 fb5a 	bl	8114a28 <_calloc_r>
 8114374:	b160      	cbz	r0, 8114390 <_Balloc+0x64>
 8114376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 811437a:	e00e      	b.n	811439a <_Balloc+0x6e>
 811437c:	2221      	movs	r2, #33	; 0x21
 811437e:	2104      	movs	r1, #4
 8114380:	4620      	mov	r0, r4
 8114382:	f000 fb51 	bl	8114a28 <_calloc_r>
 8114386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8114388:	60f0      	str	r0, [r6, #12]
 811438a:	68db      	ldr	r3, [r3, #12]
 811438c:	2b00      	cmp	r3, #0
 811438e:	d1e4      	bne.n	811435a <_Balloc+0x2e>
 8114390:	2000      	movs	r0, #0
 8114392:	bd70      	pop	{r4, r5, r6, pc}
 8114394:	6802      	ldr	r2, [r0, #0]
 8114396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 811439a:	2300      	movs	r3, #0
 811439c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81143a0:	e7f7      	b.n	8114392 <_Balloc+0x66>
 81143a2:	bf00      	nop
 81143a4:	08116d00 	.word	0x08116d00
 81143a8:	08116e2f 	.word	0x08116e2f

081143ac <_Bfree>:
 81143ac:	b570      	push	{r4, r5, r6, lr}
 81143ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81143b0:	4605      	mov	r5, r0
 81143b2:	460c      	mov	r4, r1
 81143b4:	b976      	cbnz	r6, 81143d4 <_Bfree+0x28>
 81143b6:	2010      	movs	r0, #16
 81143b8:	f7ff ffa4 	bl	8114304 <malloc>
 81143bc:	4602      	mov	r2, r0
 81143be:	6268      	str	r0, [r5, #36]	; 0x24
 81143c0:	b920      	cbnz	r0, 81143cc <_Bfree+0x20>
 81143c2:	4b09      	ldr	r3, [pc, #36]	; (81143e8 <_Bfree+0x3c>)
 81143c4:	4809      	ldr	r0, [pc, #36]	; (81143ec <_Bfree+0x40>)
 81143c6:	218a      	movs	r1, #138	; 0x8a
 81143c8:	f7fe ffa8 	bl	811331c <__assert_func>
 81143cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81143d0:	6006      	str	r6, [r0, #0]
 81143d2:	60c6      	str	r6, [r0, #12]
 81143d4:	b13c      	cbz	r4, 81143e6 <_Bfree+0x3a>
 81143d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 81143d8:	6862      	ldr	r2, [r4, #4]
 81143da:	68db      	ldr	r3, [r3, #12]
 81143dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81143e0:	6021      	str	r1, [r4, #0]
 81143e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81143e6:	bd70      	pop	{r4, r5, r6, pc}
 81143e8:	08116d00 	.word	0x08116d00
 81143ec:	08116e2f 	.word	0x08116e2f

081143f0 <__multadd>:
 81143f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81143f4:	690e      	ldr	r6, [r1, #16]
 81143f6:	4607      	mov	r7, r0
 81143f8:	4698      	mov	r8, r3
 81143fa:	460c      	mov	r4, r1
 81143fc:	f101 0014 	add.w	r0, r1, #20
 8114400:	2300      	movs	r3, #0
 8114402:	6805      	ldr	r5, [r0, #0]
 8114404:	b2a9      	uxth	r1, r5
 8114406:	fb02 8101 	mla	r1, r2, r1, r8
 811440a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 811440e:	0c2d      	lsrs	r5, r5, #16
 8114410:	fb02 c505 	mla	r5, r2, r5, ip
 8114414:	b289      	uxth	r1, r1
 8114416:	3301      	adds	r3, #1
 8114418:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 811441c:	429e      	cmp	r6, r3
 811441e:	f840 1b04 	str.w	r1, [r0], #4
 8114422:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8114426:	dcec      	bgt.n	8114402 <__multadd+0x12>
 8114428:	f1b8 0f00 	cmp.w	r8, #0
 811442c:	d022      	beq.n	8114474 <__multadd+0x84>
 811442e:	68a3      	ldr	r3, [r4, #8]
 8114430:	42b3      	cmp	r3, r6
 8114432:	dc19      	bgt.n	8114468 <__multadd+0x78>
 8114434:	6861      	ldr	r1, [r4, #4]
 8114436:	4638      	mov	r0, r7
 8114438:	3101      	adds	r1, #1
 811443a:	f7ff ff77 	bl	811432c <_Balloc>
 811443e:	4605      	mov	r5, r0
 8114440:	b928      	cbnz	r0, 811444e <__multadd+0x5e>
 8114442:	4602      	mov	r2, r0
 8114444:	4b0d      	ldr	r3, [pc, #52]	; (811447c <__multadd+0x8c>)
 8114446:	480e      	ldr	r0, [pc, #56]	; (8114480 <__multadd+0x90>)
 8114448:	21b5      	movs	r1, #181	; 0xb5
 811444a:	f7fe ff67 	bl	811331c <__assert_func>
 811444e:	6922      	ldr	r2, [r4, #16]
 8114450:	3202      	adds	r2, #2
 8114452:	f104 010c 	add.w	r1, r4, #12
 8114456:	0092      	lsls	r2, r2, #2
 8114458:	300c      	adds	r0, #12
 811445a:	f7fd ff4e 	bl	81122fa <memcpy>
 811445e:	4621      	mov	r1, r4
 8114460:	4638      	mov	r0, r7
 8114462:	f7ff ffa3 	bl	81143ac <_Bfree>
 8114466:	462c      	mov	r4, r5
 8114468:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 811446c:	3601      	adds	r6, #1
 811446e:	f8c3 8014 	str.w	r8, [r3, #20]
 8114472:	6126      	str	r6, [r4, #16]
 8114474:	4620      	mov	r0, r4
 8114476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811447a:	bf00      	nop
 811447c:	08116e1e 	.word	0x08116e1e
 8114480:	08116e2f 	.word	0x08116e2f

08114484 <__hi0bits>:
 8114484:	0c03      	lsrs	r3, r0, #16
 8114486:	041b      	lsls	r3, r3, #16
 8114488:	b9d3      	cbnz	r3, 81144c0 <__hi0bits+0x3c>
 811448a:	0400      	lsls	r0, r0, #16
 811448c:	2310      	movs	r3, #16
 811448e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8114492:	bf04      	itt	eq
 8114494:	0200      	lsleq	r0, r0, #8
 8114496:	3308      	addeq	r3, #8
 8114498:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 811449c:	bf04      	itt	eq
 811449e:	0100      	lsleq	r0, r0, #4
 81144a0:	3304      	addeq	r3, #4
 81144a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 81144a6:	bf04      	itt	eq
 81144a8:	0080      	lsleq	r0, r0, #2
 81144aa:	3302      	addeq	r3, #2
 81144ac:	2800      	cmp	r0, #0
 81144ae:	db05      	blt.n	81144bc <__hi0bits+0x38>
 81144b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 81144b4:	f103 0301 	add.w	r3, r3, #1
 81144b8:	bf08      	it	eq
 81144ba:	2320      	moveq	r3, #32
 81144bc:	4618      	mov	r0, r3
 81144be:	4770      	bx	lr
 81144c0:	2300      	movs	r3, #0
 81144c2:	e7e4      	b.n	811448e <__hi0bits+0xa>

081144c4 <__lo0bits>:
 81144c4:	6803      	ldr	r3, [r0, #0]
 81144c6:	f013 0207 	ands.w	r2, r3, #7
 81144ca:	4601      	mov	r1, r0
 81144cc:	d00b      	beq.n	81144e6 <__lo0bits+0x22>
 81144ce:	07da      	lsls	r2, r3, #31
 81144d0:	d424      	bmi.n	811451c <__lo0bits+0x58>
 81144d2:	0798      	lsls	r0, r3, #30
 81144d4:	bf49      	itett	mi
 81144d6:	085b      	lsrmi	r3, r3, #1
 81144d8:	089b      	lsrpl	r3, r3, #2
 81144da:	2001      	movmi	r0, #1
 81144dc:	600b      	strmi	r3, [r1, #0]
 81144de:	bf5c      	itt	pl
 81144e0:	600b      	strpl	r3, [r1, #0]
 81144e2:	2002      	movpl	r0, #2
 81144e4:	4770      	bx	lr
 81144e6:	b298      	uxth	r0, r3
 81144e8:	b9b0      	cbnz	r0, 8114518 <__lo0bits+0x54>
 81144ea:	0c1b      	lsrs	r3, r3, #16
 81144ec:	2010      	movs	r0, #16
 81144ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 81144f2:	bf04      	itt	eq
 81144f4:	0a1b      	lsreq	r3, r3, #8
 81144f6:	3008      	addeq	r0, #8
 81144f8:	071a      	lsls	r2, r3, #28
 81144fa:	bf04      	itt	eq
 81144fc:	091b      	lsreq	r3, r3, #4
 81144fe:	3004      	addeq	r0, #4
 8114500:	079a      	lsls	r2, r3, #30
 8114502:	bf04      	itt	eq
 8114504:	089b      	lsreq	r3, r3, #2
 8114506:	3002      	addeq	r0, #2
 8114508:	07da      	lsls	r2, r3, #31
 811450a:	d403      	bmi.n	8114514 <__lo0bits+0x50>
 811450c:	085b      	lsrs	r3, r3, #1
 811450e:	f100 0001 	add.w	r0, r0, #1
 8114512:	d005      	beq.n	8114520 <__lo0bits+0x5c>
 8114514:	600b      	str	r3, [r1, #0]
 8114516:	4770      	bx	lr
 8114518:	4610      	mov	r0, r2
 811451a:	e7e8      	b.n	81144ee <__lo0bits+0x2a>
 811451c:	2000      	movs	r0, #0
 811451e:	4770      	bx	lr
 8114520:	2020      	movs	r0, #32
 8114522:	4770      	bx	lr

08114524 <__i2b>:
 8114524:	b510      	push	{r4, lr}
 8114526:	460c      	mov	r4, r1
 8114528:	2101      	movs	r1, #1
 811452a:	f7ff feff 	bl	811432c <_Balloc>
 811452e:	4602      	mov	r2, r0
 8114530:	b928      	cbnz	r0, 811453e <__i2b+0x1a>
 8114532:	4b05      	ldr	r3, [pc, #20]	; (8114548 <__i2b+0x24>)
 8114534:	4805      	ldr	r0, [pc, #20]	; (811454c <__i2b+0x28>)
 8114536:	f44f 71a0 	mov.w	r1, #320	; 0x140
 811453a:	f7fe feef 	bl	811331c <__assert_func>
 811453e:	2301      	movs	r3, #1
 8114540:	6144      	str	r4, [r0, #20]
 8114542:	6103      	str	r3, [r0, #16]
 8114544:	bd10      	pop	{r4, pc}
 8114546:	bf00      	nop
 8114548:	08116e1e 	.word	0x08116e1e
 811454c:	08116e2f 	.word	0x08116e2f

08114550 <__multiply>:
 8114550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114554:	4614      	mov	r4, r2
 8114556:	690a      	ldr	r2, [r1, #16]
 8114558:	6923      	ldr	r3, [r4, #16]
 811455a:	429a      	cmp	r2, r3
 811455c:	bfb8      	it	lt
 811455e:	460b      	movlt	r3, r1
 8114560:	460d      	mov	r5, r1
 8114562:	bfbc      	itt	lt
 8114564:	4625      	movlt	r5, r4
 8114566:	461c      	movlt	r4, r3
 8114568:	f8d5 a010 	ldr.w	sl, [r5, #16]
 811456c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8114570:	68ab      	ldr	r3, [r5, #8]
 8114572:	6869      	ldr	r1, [r5, #4]
 8114574:	eb0a 0709 	add.w	r7, sl, r9
 8114578:	42bb      	cmp	r3, r7
 811457a:	b085      	sub	sp, #20
 811457c:	bfb8      	it	lt
 811457e:	3101      	addlt	r1, #1
 8114580:	f7ff fed4 	bl	811432c <_Balloc>
 8114584:	b930      	cbnz	r0, 8114594 <__multiply+0x44>
 8114586:	4602      	mov	r2, r0
 8114588:	4b42      	ldr	r3, [pc, #264]	; (8114694 <__multiply+0x144>)
 811458a:	4843      	ldr	r0, [pc, #268]	; (8114698 <__multiply+0x148>)
 811458c:	f240 115d 	movw	r1, #349	; 0x15d
 8114590:	f7fe fec4 	bl	811331c <__assert_func>
 8114594:	f100 0614 	add.w	r6, r0, #20
 8114598:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 811459c:	4633      	mov	r3, r6
 811459e:	2200      	movs	r2, #0
 81145a0:	4543      	cmp	r3, r8
 81145a2:	d31e      	bcc.n	81145e2 <__multiply+0x92>
 81145a4:	f105 0c14 	add.w	ip, r5, #20
 81145a8:	f104 0314 	add.w	r3, r4, #20
 81145ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 81145b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 81145b4:	9202      	str	r2, [sp, #8]
 81145b6:	ebac 0205 	sub.w	r2, ip, r5
 81145ba:	3a15      	subs	r2, #21
 81145bc:	f022 0203 	bic.w	r2, r2, #3
 81145c0:	3204      	adds	r2, #4
 81145c2:	f105 0115 	add.w	r1, r5, #21
 81145c6:	458c      	cmp	ip, r1
 81145c8:	bf38      	it	cc
 81145ca:	2204      	movcc	r2, #4
 81145cc:	9201      	str	r2, [sp, #4]
 81145ce:	9a02      	ldr	r2, [sp, #8]
 81145d0:	9303      	str	r3, [sp, #12]
 81145d2:	429a      	cmp	r2, r3
 81145d4:	d808      	bhi.n	81145e8 <__multiply+0x98>
 81145d6:	2f00      	cmp	r7, #0
 81145d8:	dc55      	bgt.n	8114686 <__multiply+0x136>
 81145da:	6107      	str	r7, [r0, #16]
 81145dc:	b005      	add	sp, #20
 81145de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81145e2:	f843 2b04 	str.w	r2, [r3], #4
 81145e6:	e7db      	b.n	81145a0 <__multiply+0x50>
 81145e8:	f8b3 a000 	ldrh.w	sl, [r3]
 81145ec:	f1ba 0f00 	cmp.w	sl, #0
 81145f0:	d020      	beq.n	8114634 <__multiply+0xe4>
 81145f2:	f105 0e14 	add.w	lr, r5, #20
 81145f6:	46b1      	mov	r9, r6
 81145f8:	2200      	movs	r2, #0
 81145fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 81145fe:	f8d9 b000 	ldr.w	fp, [r9]
 8114602:	b2a1      	uxth	r1, r4
 8114604:	fa1f fb8b 	uxth.w	fp, fp
 8114608:	fb0a b101 	mla	r1, sl, r1, fp
 811460c:	4411      	add	r1, r2
 811460e:	f8d9 2000 	ldr.w	r2, [r9]
 8114612:	0c24      	lsrs	r4, r4, #16
 8114614:	0c12      	lsrs	r2, r2, #16
 8114616:	fb0a 2404 	mla	r4, sl, r4, r2
 811461a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 811461e:	b289      	uxth	r1, r1
 8114620:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8114624:	45f4      	cmp	ip, lr
 8114626:	f849 1b04 	str.w	r1, [r9], #4
 811462a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 811462e:	d8e4      	bhi.n	81145fa <__multiply+0xaa>
 8114630:	9901      	ldr	r1, [sp, #4]
 8114632:	5072      	str	r2, [r6, r1]
 8114634:	9a03      	ldr	r2, [sp, #12]
 8114636:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 811463a:	3304      	adds	r3, #4
 811463c:	f1b9 0f00 	cmp.w	r9, #0
 8114640:	d01f      	beq.n	8114682 <__multiply+0x132>
 8114642:	6834      	ldr	r4, [r6, #0]
 8114644:	f105 0114 	add.w	r1, r5, #20
 8114648:	46b6      	mov	lr, r6
 811464a:	f04f 0a00 	mov.w	sl, #0
 811464e:	880a      	ldrh	r2, [r1, #0]
 8114650:	f8be b002 	ldrh.w	fp, [lr, #2]
 8114654:	fb09 b202 	mla	r2, r9, r2, fp
 8114658:	4492      	add	sl, r2
 811465a:	b2a4      	uxth	r4, r4
 811465c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8114660:	f84e 4b04 	str.w	r4, [lr], #4
 8114664:	f851 4b04 	ldr.w	r4, [r1], #4
 8114668:	f8be 2000 	ldrh.w	r2, [lr]
 811466c:	0c24      	lsrs	r4, r4, #16
 811466e:	fb09 2404 	mla	r4, r9, r4, r2
 8114672:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8114676:	458c      	cmp	ip, r1
 8114678:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 811467c:	d8e7      	bhi.n	811464e <__multiply+0xfe>
 811467e:	9a01      	ldr	r2, [sp, #4]
 8114680:	50b4      	str	r4, [r6, r2]
 8114682:	3604      	adds	r6, #4
 8114684:	e7a3      	b.n	81145ce <__multiply+0x7e>
 8114686:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 811468a:	2b00      	cmp	r3, #0
 811468c:	d1a5      	bne.n	81145da <__multiply+0x8a>
 811468e:	3f01      	subs	r7, #1
 8114690:	e7a1      	b.n	81145d6 <__multiply+0x86>
 8114692:	bf00      	nop
 8114694:	08116e1e 	.word	0x08116e1e
 8114698:	08116e2f 	.word	0x08116e2f

0811469c <__pow5mult>:
 811469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81146a0:	4615      	mov	r5, r2
 81146a2:	f012 0203 	ands.w	r2, r2, #3
 81146a6:	4606      	mov	r6, r0
 81146a8:	460f      	mov	r7, r1
 81146aa:	d007      	beq.n	81146bc <__pow5mult+0x20>
 81146ac:	4c25      	ldr	r4, [pc, #148]	; (8114744 <__pow5mult+0xa8>)
 81146ae:	3a01      	subs	r2, #1
 81146b0:	2300      	movs	r3, #0
 81146b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81146b6:	f7ff fe9b 	bl	81143f0 <__multadd>
 81146ba:	4607      	mov	r7, r0
 81146bc:	10ad      	asrs	r5, r5, #2
 81146be:	d03d      	beq.n	811473c <__pow5mult+0xa0>
 81146c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81146c2:	b97c      	cbnz	r4, 81146e4 <__pow5mult+0x48>
 81146c4:	2010      	movs	r0, #16
 81146c6:	f7ff fe1d 	bl	8114304 <malloc>
 81146ca:	4602      	mov	r2, r0
 81146cc:	6270      	str	r0, [r6, #36]	; 0x24
 81146ce:	b928      	cbnz	r0, 81146dc <__pow5mult+0x40>
 81146d0:	4b1d      	ldr	r3, [pc, #116]	; (8114748 <__pow5mult+0xac>)
 81146d2:	481e      	ldr	r0, [pc, #120]	; (811474c <__pow5mult+0xb0>)
 81146d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 81146d8:	f7fe fe20 	bl	811331c <__assert_func>
 81146dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81146e0:	6004      	str	r4, [r0, #0]
 81146e2:	60c4      	str	r4, [r0, #12]
 81146e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 81146e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 81146ec:	b94c      	cbnz	r4, 8114702 <__pow5mult+0x66>
 81146ee:	f240 2171 	movw	r1, #625	; 0x271
 81146f2:	4630      	mov	r0, r6
 81146f4:	f7ff ff16 	bl	8114524 <__i2b>
 81146f8:	2300      	movs	r3, #0
 81146fa:	f8c8 0008 	str.w	r0, [r8, #8]
 81146fe:	4604      	mov	r4, r0
 8114700:	6003      	str	r3, [r0, #0]
 8114702:	f04f 0900 	mov.w	r9, #0
 8114706:	07eb      	lsls	r3, r5, #31
 8114708:	d50a      	bpl.n	8114720 <__pow5mult+0x84>
 811470a:	4639      	mov	r1, r7
 811470c:	4622      	mov	r2, r4
 811470e:	4630      	mov	r0, r6
 8114710:	f7ff ff1e 	bl	8114550 <__multiply>
 8114714:	4639      	mov	r1, r7
 8114716:	4680      	mov	r8, r0
 8114718:	4630      	mov	r0, r6
 811471a:	f7ff fe47 	bl	81143ac <_Bfree>
 811471e:	4647      	mov	r7, r8
 8114720:	106d      	asrs	r5, r5, #1
 8114722:	d00b      	beq.n	811473c <__pow5mult+0xa0>
 8114724:	6820      	ldr	r0, [r4, #0]
 8114726:	b938      	cbnz	r0, 8114738 <__pow5mult+0x9c>
 8114728:	4622      	mov	r2, r4
 811472a:	4621      	mov	r1, r4
 811472c:	4630      	mov	r0, r6
 811472e:	f7ff ff0f 	bl	8114550 <__multiply>
 8114732:	6020      	str	r0, [r4, #0]
 8114734:	f8c0 9000 	str.w	r9, [r0]
 8114738:	4604      	mov	r4, r0
 811473a:	e7e4      	b.n	8114706 <__pow5mult+0x6a>
 811473c:	4638      	mov	r0, r7
 811473e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8114742:	bf00      	nop
 8114744:	08116f80 	.word	0x08116f80
 8114748:	08116d00 	.word	0x08116d00
 811474c:	08116e2f 	.word	0x08116e2f

08114750 <__lshift>:
 8114750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114754:	460c      	mov	r4, r1
 8114756:	6849      	ldr	r1, [r1, #4]
 8114758:	6923      	ldr	r3, [r4, #16]
 811475a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 811475e:	68a3      	ldr	r3, [r4, #8]
 8114760:	4607      	mov	r7, r0
 8114762:	4691      	mov	r9, r2
 8114764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8114768:	f108 0601 	add.w	r6, r8, #1
 811476c:	42b3      	cmp	r3, r6
 811476e:	db0b      	blt.n	8114788 <__lshift+0x38>
 8114770:	4638      	mov	r0, r7
 8114772:	f7ff fddb 	bl	811432c <_Balloc>
 8114776:	4605      	mov	r5, r0
 8114778:	b948      	cbnz	r0, 811478e <__lshift+0x3e>
 811477a:	4602      	mov	r2, r0
 811477c:	4b28      	ldr	r3, [pc, #160]	; (8114820 <__lshift+0xd0>)
 811477e:	4829      	ldr	r0, [pc, #164]	; (8114824 <__lshift+0xd4>)
 8114780:	f240 11d9 	movw	r1, #473	; 0x1d9
 8114784:	f7fe fdca 	bl	811331c <__assert_func>
 8114788:	3101      	adds	r1, #1
 811478a:	005b      	lsls	r3, r3, #1
 811478c:	e7ee      	b.n	811476c <__lshift+0x1c>
 811478e:	2300      	movs	r3, #0
 8114790:	f100 0114 	add.w	r1, r0, #20
 8114794:	f100 0210 	add.w	r2, r0, #16
 8114798:	4618      	mov	r0, r3
 811479a:	4553      	cmp	r3, sl
 811479c:	db33      	blt.n	8114806 <__lshift+0xb6>
 811479e:	6920      	ldr	r0, [r4, #16]
 81147a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81147a4:	f104 0314 	add.w	r3, r4, #20
 81147a8:	f019 091f 	ands.w	r9, r9, #31
 81147ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81147b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 81147b4:	d02b      	beq.n	811480e <__lshift+0xbe>
 81147b6:	f1c9 0e20 	rsb	lr, r9, #32
 81147ba:	468a      	mov	sl, r1
 81147bc:	2200      	movs	r2, #0
 81147be:	6818      	ldr	r0, [r3, #0]
 81147c0:	fa00 f009 	lsl.w	r0, r0, r9
 81147c4:	4302      	orrs	r2, r0
 81147c6:	f84a 2b04 	str.w	r2, [sl], #4
 81147ca:	f853 2b04 	ldr.w	r2, [r3], #4
 81147ce:	459c      	cmp	ip, r3
 81147d0:	fa22 f20e 	lsr.w	r2, r2, lr
 81147d4:	d8f3      	bhi.n	81147be <__lshift+0x6e>
 81147d6:	ebac 0304 	sub.w	r3, ip, r4
 81147da:	3b15      	subs	r3, #21
 81147dc:	f023 0303 	bic.w	r3, r3, #3
 81147e0:	3304      	adds	r3, #4
 81147e2:	f104 0015 	add.w	r0, r4, #21
 81147e6:	4584      	cmp	ip, r0
 81147e8:	bf38      	it	cc
 81147ea:	2304      	movcc	r3, #4
 81147ec:	50ca      	str	r2, [r1, r3]
 81147ee:	b10a      	cbz	r2, 81147f4 <__lshift+0xa4>
 81147f0:	f108 0602 	add.w	r6, r8, #2
 81147f4:	3e01      	subs	r6, #1
 81147f6:	4638      	mov	r0, r7
 81147f8:	612e      	str	r6, [r5, #16]
 81147fa:	4621      	mov	r1, r4
 81147fc:	f7ff fdd6 	bl	81143ac <_Bfree>
 8114800:	4628      	mov	r0, r5
 8114802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114806:	f842 0f04 	str.w	r0, [r2, #4]!
 811480a:	3301      	adds	r3, #1
 811480c:	e7c5      	b.n	811479a <__lshift+0x4a>
 811480e:	3904      	subs	r1, #4
 8114810:	f853 2b04 	ldr.w	r2, [r3], #4
 8114814:	f841 2f04 	str.w	r2, [r1, #4]!
 8114818:	459c      	cmp	ip, r3
 811481a:	d8f9      	bhi.n	8114810 <__lshift+0xc0>
 811481c:	e7ea      	b.n	81147f4 <__lshift+0xa4>
 811481e:	bf00      	nop
 8114820:	08116e1e 	.word	0x08116e1e
 8114824:	08116e2f 	.word	0x08116e2f

08114828 <__mcmp>:
 8114828:	b530      	push	{r4, r5, lr}
 811482a:	6902      	ldr	r2, [r0, #16]
 811482c:	690c      	ldr	r4, [r1, #16]
 811482e:	1b12      	subs	r2, r2, r4
 8114830:	d10e      	bne.n	8114850 <__mcmp+0x28>
 8114832:	f100 0314 	add.w	r3, r0, #20
 8114836:	3114      	adds	r1, #20
 8114838:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 811483c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8114840:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8114844:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8114848:	42a5      	cmp	r5, r4
 811484a:	d003      	beq.n	8114854 <__mcmp+0x2c>
 811484c:	d305      	bcc.n	811485a <__mcmp+0x32>
 811484e:	2201      	movs	r2, #1
 8114850:	4610      	mov	r0, r2
 8114852:	bd30      	pop	{r4, r5, pc}
 8114854:	4283      	cmp	r3, r0
 8114856:	d3f3      	bcc.n	8114840 <__mcmp+0x18>
 8114858:	e7fa      	b.n	8114850 <__mcmp+0x28>
 811485a:	f04f 32ff 	mov.w	r2, #4294967295
 811485e:	e7f7      	b.n	8114850 <__mcmp+0x28>

08114860 <__mdiff>:
 8114860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114864:	460c      	mov	r4, r1
 8114866:	4606      	mov	r6, r0
 8114868:	4611      	mov	r1, r2
 811486a:	4620      	mov	r0, r4
 811486c:	4617      	mov	r7, r2
 811486e:	f7ff ffdb 	bl	8114828 <__mcmp>
 8114872:	1e05      	subs	r5, r0, #0
 8114874:	d110      	bne.n	8114898 <__mdiff+0x38>
 8114876:	4629      	mov	r1, r5
 8114878:	4630      	mov	r0, r6
 811487a:	f7ff fd57 	bl	811432c <_Balloc>
 811487e:	b930      	cbnz	r0, 811488e <__mdiff+0x2e>
 8114880:	4b39      	ldr	r3, [pc, #228]	; (8114968 <__mdiff+0x108>)
 8114882:	4602      	mov	r2, r0
 8114884:	f240 2132 	movw	r1, #562	; 0x232
 8114888:	4838      	ldr	r0, [pc, #224]	; (811496c <__mdiff+0x10c>)
 811488a:	f7fe fd47 	bl	811331c <__assert_func>
 811488e:	2301      	movs	r3, #1
 8114890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8114894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114898:	bfa4      	itt	ge
 811489a:	463b      	movge	r3, r7
 811489c:	4627      	movge	r7, r4
 811489e:	4630      	mov	r0, r6
 81148a0:	6879      	ldr	r1, [r7, #4]
 81148a2:	bfa6      	itte	ge
 81148a4:	461c      	movge	r4, r3
 81148a6:	2500      	movge	r5, #0
 81148a8:	2501      	movlt	r5, #1
 81148aa:	f7ff fd3f 	bl	811432c <_Balloc>
 81148ae:	b920      	cbnz	r0, 81148ba <__mdiff+0x5a>
 81148b0:	4b2d      	ldr	r3, [pc, #180]	; (8114968 <__mdiff+0x108>)
 81148b2:	4602      	mov	r2, r0
 81148b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 81148b8:	e7e6      	b.n	8114888 <__mdiff+0x28>
 81148ba:	693e      	ldr	r6, [r7, #16]
 81148bc:	60c5      	str	r5, [r0, #12]
 81148be:	6925      	ldr	r5, [r4, #16]
 81148c0:	f107 0114 	add.w	r1, r7, #20
 81148c4:	f104 0914 	add.w	r9, r4, #20
 81148c8:	f100 0e14 	add.w	lr, r0, #20
 81148cc:	f107 0210 	add.w	r2, r7, #16
 81148d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 81148d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 81148d8:	46f2      	mov	sl, lr
 81148da:	2700      	movs	r7, #0
 81148dc:	f859 3b04 	ldr.w	r3, [r9], #4
 81148e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 81148e4:	fa1f f883 	uxth.w	r8, r3
 81148e8:	fa17 f78b 	uxtah	r7, r7, fp
 81148ec:	0c1b      	lsrs	r3, r3, #16
 81148ee:	eba7 0808 	sub.w	r8, r7, r8
 81148f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 81148f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 81148fa:	fa1f f888 	uxth.w	r8, r8
 81148fe:	141f      	asrs	r7, r3, #16
 8114900:	454d      	cmp	r5, r9
 8114902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8114906:	f84a 3b04 	str.w	r3, [sl], #4
 811490a:	d8e7      	bhi.n	81148dc <__mdiff+0x7c>
 811490c:	1b2b      	subs	r3, r5, r4
 811490e:	3b15      	subs	r3, #21
 8114910:	f023 0303 	bic.w	r3, r3, #3
 8114914:	3304      	adds	r3, #4
 8114916:	3415      	adds	r4, #21
 8114918:	42a5      	cmp	r5, r4
 811491a:	bf38      	it	cc
 811491c:	2304      	movcc	r3, #4
 811491e:	4419      	add	r1, r3
 8114920:	4473      	add	r3, lr
 8114922:	469e      	mov	lr, r3
 8114924:	460d      	mov	r5, r1
 8114926:	4565      	cmp	r5, ip
 8114928:	d30e      	bcc.n	8114948 <__mdiff+0xe8>
 811492a:	f10c 0203 	add.w	r2, ip, #3
 811492e:	1a52      	subs	r2, r2, r1
 8114930:	f022 0203 	bic.w	r2, r2, #3
 8114934:	3903      	subs	r1, #3
 8114936:	458c      	cmp	ip, r1
 8114938:	bf38      	it	cc
 811493a:	2200      	movcc	r2, #0
 811493c:	441a      	add	r2, r3
 811493e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8114942:	b17b      	cbz	r3, 8114964 <__mdiff+0x104>
 8114944:	6106      	str	r6, [r0, #16]
 8114946:	e7a5      	b.n	8114894 <__mdiff+0x34>
 8114948:	f855 8b04 	ldr.w	r8, [r5], #4
 811494c:	fa17 f488 	uxtah	r4, r7, r8
 8114950:	1422      	asrs	r2, r4, #16
 8114952:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8114956:	b2a4      	uxth	r4, r4
 8114958:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 811495c:	f84e 4b04 	str.w	r4, [lr], #4
 8114960:	1417      	asrs	r7, r2, #16
 8114962:	e7e0      	b.n	8114926 <__mdiff+0xc6>
 8114964:	3e01      	subs	r6, #1
 8114966:	e7ea      	b.n	811493e <__mdiff+0xde>
 8114968:	08116e1e 	.word	0x08116e1e
 811496c:	08116e2f 	.word	0x08116e2f

08114970 <__d2b>:
 8114970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8114974:	4689      	mov	r9, r1
 8114976:	2101      	movs	r1, #1
 8114978:	ec57 6b10 	vmov	r6, r7, d0
 811497c:	4690      	mov	r8, r2
 811497e:	f7ff fcd5 	bl	811432c <_Balloc>
 8114982:	4604      	mov	r4, r0
 8114984:	b930      	cbnz	r0, 8114994 <__d2b+0x24>
 8114986:	4602      	mov	r2, r0
 8114988:	4b25      	ldr	r3, [pc, #148]	; (8114a20 <__d2b+0xb0>)
 811498a:	4826      	ldr	r0, [pc, #152]	; (8114a24 <__d2b+0xb4>)
 811498c:	f240 310a 	movw	r1, #778	; 0x30a
 8114990:	f7fe fcc4 	bl	811331c <__assert_func>
 8114994:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8114998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811499c:	bb35      	cbnz	r5, 81149ec <__d2b+0x7c>
 811499e:	2e00      	cmp	r6, #0
 81149a0:	9301      	str	r3, [sp, #4]
 81149a2:	d028      	beq.n	81149f6 <__d2b+0x86>
 81149a4:	4668      	mov	r0, sp
 81149a6:	9600      	str	r6, [sp, #0]
 81149a8:	f7ff fd8c 	bl	81144c4 <__lo0bits>
 81149ac:	9900      	ldr	r1, [sp, #0]
 81149ae:	b300      	cbz	r0, 81149f2 <__d2b+0x82>
 81149b0:	9a01      	ldr	r2, [sp, #4]
 81149b2:	f1c0 0320 	rsb	r3, r0, #32
 81149b6:	fa02 f303 	lsl.w	r3, r2, r3
 81149ba:	430b      	orrs	r3, r1
 81149bc:	40c2      	lsrs	r2, r0
 81149be:	6163      	str	r3, [r4, #20]
 81149c0:	9201      	str	r2, [sp, #4]
 81149c2:	9b01      	ldr	r3, [sp, #4]
 81149c4:	61a3      	str	r3, [r4, #24]
 81149c6:	2b00      	cmp	r3, #0
 81149c8:	bf14      	ite	ne
 81149ca:	2202      	movne	r2, #2
 81149cc:	2201      	moveq	r2, #1
 81149ce:	6122      	str	r2, [r4, #16]
 81149d0:	b1d5      	cbz	r5, 8114a08 <__d2b+0x98>
 81149d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 81149d6:	4405      	add	r5, r0
 81149d8:	f8c9 5000 	str.w	r5, [r9]
 81149dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 81149e0:	f8c8 0000 	str.w	r0, [r8]
 81149e4:	4620      	mov	r0, r4
 81149e6:	b003      	add	sp, #12
 81149e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81149ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81149f0:	e7d5      	b.n	811499e <__d2b+0x2e>
 81149f2:	6161      	str	r1, [r4, #20]
 81149f4:	e7e5      	b.n	81149c2 <__d2b+0x52>
 81149f6:	a801      	add	r0, sp, #4
 81149f8:	f7ff fd64 	bl	81144c4 <__lo0bits>
 81149fc:	9b01      	ldr	r3, [sp, #4]
 81149fe:	6163      	str	r3, [r4, #20]
 8114a00:	2201      	movs	r2, #1
 8114a02:	6122      	str	r2, [r4, #16]
 8114a04:	3020      	adds	r0, #32
 8114a06:	e7e3      	b.n	81149d0 <__d2b+0x60>
 8114a08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8114a0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8114a10:	f8c9 0000 	str.w	r0, [r9]
 8114a14:	6918      	ldr	r0, [r3, #16]
 8114a16:	f7ff fd35 	bl	8114484 <__hi0bits>
 8114a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8114a1e:	e7df      	b.n	81149e0 <__d2b+0x70>
 8114a20:	08116e1e 	.word	0x08116e1e
 8114a24:	08116e2f 	.word	0x08116e2f

08114a28 <_calloc_r>:
 8114a28:	b513      	push	{r0, r1, r4, lr}
 8114a2a:	434a      	muls	r2, r1
 8114a2c:	4611      	mov	r1, r2
 8114a2e:	9201      	str	r2, [sp, #4]
 8114a30:	f7fd fc7a 	bl	8112328 <_malloc_r>
 8114a34:	4604      	mov	r4, r0
 8114a36:	b118      	cbz	r0, 8114a40 <_calloc_r+0x18>
 8114a38:	9a01      	ldr	r2, [sp, #4]
 8114a3a:	2100      	movs	r1, #0
 8114a3c:	f7fd fc6b 	bl	8112316 <memset>
 8114a40:	4620      	mov	r0, r4
 8114a42:	b002      	add	sp, #8
 8114a44:	bd10      	pop	{r4, pc}
	...

08114a48 <_free_r>:
 8114a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8114a4a:	2900      	cmp	r1, #0
 8114a4c:	d048      	beq.n	8114ae0 <_free_r+0x98>
 8114a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8114a52:	9001      	str	r0, [sp, #4]
 8114a54:	2b00      	cmp	r3, #0
 8114a56:	f1a1 0404 	sub.w	r4, r1, #4
 8114a5a:	bfb8      	it	lt
 8114a5c:	18e4      	addlt	r4, r4, r3
 8114a5e:	f7ff fc59 	bl	8114314 <__malloc_lock>
 8114a62:	4a20      	ldr	r2, [pc, #128]	; (8114ae4 <_free_r+0x9c>)
 8114a64:	9801      	ldr	r0, [sp, #4]
 8114a66:	6813      	ldr	r3, [r2, #0]
 8114a68:	4615      	mov	r5, r2
 8114a6a:	b933      	cbnz	r3, 8114a7a <_free_r+0x32>
 8114a6c:	6063      	str	r3, [r4, #4]
 8114a6e:	6014      	str	r4, [r2, #0]
 8114a70:	b003      	add	sp, #12
 8114a72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8114a76:	f7ff bc53 	b.w	8114320 <__malloc_unlock>
 8114a7a:	42a3      	cmp	r3, r4
 8114a7c:	d90b      	bls.n	8114a96 <_free_r+0x4e>
 8114a7e:	6821      	ldr	r1, [r4, #0]
 8114a80:	1862      	adds	r2, r4, r1
 8114a82:	4293      	cmp	r3, r2
 8114a84:	bf04      	itt	eq
 8114a86:	681a      	ldreq	r2, [r3, #0]
 8114a88:	685b      	ldreq	r3, [r3, #4]
 8114a8a:	6063      	str	r3, [r4, #4]
 8114a8c:	bf04      	itt	eq
 8114a8e:	1852      	addeq	r2, r2, r1
 8114a90:	6022      	streq	r2, [r4, #0]
 8114a92:	602c      	str	r4, [r5, #0]
 8114a94:	e7ec      	b.n	8114a70 <_free_r+0x28>
 8114a96:	461a      	mov	r2, r3
 8114a98:	685b      	ldr	r3, [r3, #4]
 8114a9a:	b10b      	cbz	r3, 8114aa0 <_free_r+0x58>
 8114a9c:	42a3      	cmp	r3, r4
 8114a9e:	d9fa      	bls.n	8114a96 <_free_r+0x4e>
 8114aa0:	6811      	ldr	r1, [r2, #0]
 8114aa2:	1855      	adds	r5, r2, r1
 8114aa4:	42a5      	cmp	r5, r4
 8114aa6:	d10b      	bne.n	8114ac0 <_free_r+0x78>
 8114aa8:	6824      	ldr	r4, [r4, #0]
 8114aaa:	4421      	add	r1, r4
 8114aac:	1854      	adds	r4, r2, r1
 8114aae:	42a3      	cmp	r3, r4
 8114ab0:	6011      	str	r1, [r2, #0]
 8114ab2:	d1dd      	bne.n	8114a70 <_free_r+0x28>
 8114ab4:	681c      	ldr	r4, [r3, #0]
 8114ab6:	685b      	ldr	r3, [r3, #4]
 8114ab8:	6053      	str	r3, [r2, #4]
 8114aba:	4421      	add	r1, r4
 8114abc:	6011      	str	r1, [r2, #0]
 8114abe:	e7d7      	b.n	8114a70 <_free_r+0x28>
 8114ac0:	d902      	bls.n	8114ac8 <_free_r+0x80>
 8114ac2:	230c      	movs	r3, #12
 8114ac4:	6003      	str	r3, [r0, #0]
 8114ac6:	e7d3      	b.n	8114a70 <_free_r+0x28>
 8114ac8:	6825      	ldr	r5, [r4, #0]
 8114aca:	1961      	adds	r1, r4, r5
 8114acc:	428b      	cmp	r3, r1
 8114ace:	bf04      	itt	eq
 8114ad0:	6819      	ldreq	r1, [r3, #0]
 8114ad2:	685b      	ldreq	r3, [r3, #4]
 8114ad4:	6063      	str	r3, [r4, #4]
 8114ad6:	bf04      	itt	eq
 8114ad8:	1949      	addeq	r1, r1, r5
 8114ada:	6021      	streq	r1, [r4, #0]
 8114adc:	6054      	str	r4, [r2, #4]
 8114ade:	e7c7      	b.n	8114a70 <_free_r+0x28>
 8114ae0:	b003      	add	sp, #12
 8114ae2:	bd30      	pop	{r4, r5, pc}
 8114ae4:	10005c0c 	.word	0x10005c0c

08114ae8 <__sfputc_r>:
 8114ae8:	6893      	ldr	r3, [r2, #8]
 8114aea:	3b01      	subs	r3, #1
 8114aec:	2b00      	cmp	r3, #0
 8114aee:	b410      	push	{r4}
 8114af0:	6093      	str	r3, [r2, #8]
 8114af2:	da08      	bge.n	8114b06 <__sfputc_r+0x1e>
 8114af4:	6994      	ldr	r4, [r2, #24]
 8114af6:	42a3      	cmp	r3, r4
 8114af8:	db01      	blt.n	8114afe <__sfputc_r+0x16>
 8114afa:	290a      	cmp	r1, #10
 8114afc:	d103      	bne.n	8114b06 <__sfputc_r+0x1e>
 8114afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8114b02:	f7fe bb39 	b.w	8113178 <__swbuf_r>
 8114b06:	6813      	ldr	r3, [r2, #0]
 8114b08:	1c58      	adds	r0, r3, #1
 8114b0a:	6010      	str	r0, [r2, #0]
 8114b0c:	7019      	strb	r1, [r3, #0]
 8114b0e:	4608      	mov	r0, r1
 8114b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8114b14:	4770      	bx	lr

08114b16 <__sfputs_r>:
 8114b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114b18:	4606      	mov	r6, r0
 8114b1a:	460f      	mov	r7, r1
 8114b1c:	4614      	mov	r4, r2
 8114b1e:	18d5      	adds	r5, r2, r3
 8114b20:	42ac      	cmp	r4, r5
 8114b22:	d101      	bne.n	8114b28 <__sfputs_r+0x12>
 8114b24:	2000      	movs	r0, #0
 8114b26:	e007      	b.n	8114b38 <__sfputs_r+0x22>
 8114b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114b2c:	463a      	mov	r2, r7
 8114b2e:	4630      	mov	r0, r6
 8114b30:	f7ff ffda 	bl	8114ae8 <__sfputc_r>
 8114b34:	1c43      	adds	r3, r0, #1
 8114b36:	d1f3      	bne.n	8114b20 <__sfputs_r+0xa>
 8114b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08114b3c <_vfiprintf_r>:
 8114b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114b40:	460d      	mov	r5, r1
 8114b42:	b09d      	sub	sp, #116	; 0x74
 8114b44:	4614      	mov	r4, r2
 8114b46:	4698      	mov	r8, r3
 8114b48:	4606      	mov	r6, r0
 8114b4a:	b118      	cbz	r0, 8114b54 <_vfiprintf_r+0x18>
 8114b4c:	6983      	ldr	r3, [r0, #24]
 8114b4e:	b90b      	cbnz	r3, 8114b54 <_vfiprintf_r+0x18>
 8114b50:	f7fd fb00 	bl	8112154 <__sinit>
 8114b54:	4b89      	ldr	r3, [pc, #548]	; (8114d7c <_vfiprintf_r+0x240>)
 8114b56:	429d      	cmp	r5, r3
 8114b58:	d11b      	bne.n	8114b92 <_vfiprintf_r+0x56>
 8114b5a:	6875      	ldr	r5, [r6, #4]
 8114b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8114b5e:	07d9      	lsls	r1, r3, #31
 8114b60:	d405      	bmi.n	8114b6e <_vfiprintf_r+0x32>
 8114b62:	89ab      	ldrh	r3, [r5, #12]
 8114b64:	059a      	lsls	r2, r3, #22
 8114b66:	d402      	bmi.n	8114b6e <_vfiprintf_r+0x32>
 8114b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8114b6a:	f7fd fbb6 	bl	81122da <__retarget_lock_acquire_recursive>
 8114b6e:	89ab      	ldrh	r3, [r5, #12]
 8114b70:	071b      	lsls	r3, r3, #28
 8114b72:	d501      	bpl.n	8114b78 <_vfiprintf_r+0x3c>
 8114b74:	692b      	ldr	r3, [r5, #16]
 8114b76:	b9eb      	cbnz	r3, 8114bb4 <_vfiprintf_r+0x78>
 8114b78:	4629      	mov	r1, r5
 8114b7a:	4630      	mov	r0, r6
 8114b7c:	f7fe fb60 	bl	8113240 <__swsetup_r>
 8114b80:	b1c0      	cbz	r0, 8114bb4 <_vfiprintf_r+0x78>
 8114b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8114b84:	07dc      	lsls	r4, r3, #31
 8114b86:	d50e      	bpl.n	8114ba6 <_vfiprintf_r+0x6a>
 8114b88:	f04f 30ff 	mov.w	r0, #4294967295
 8114b8c:	b01d      	add	sp, #116	; 0x74
 8114b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114b92:	4b7b      	ldr	r3, [pc, #492]	; (8114d80 <_vfiprintf_r+0x244>)
 8114b94:	429d      	cmp	r5, r3
 8114b96:	d101      	bne.n	8114b9c <_vfiprintf_r+0x60>
 8114b98:	68b5      	ldr	r5, [r6, #8]
 8114b9a:	e7df      	b.n	8114b5c <_vfiprintf_r+0x20>
 8114b9c:	4b79      	ldr	r3, [pc, #484]	; (8114d84 <_vfiprintf_r+0x248>)
 8114b9e:	429d      	cmp	r5, r3
 8114ba0:	bf08      	it	eq
 8114ba2:	68f5      	ldreq	r5, [r6, #12]
 8114ba4:	e7da      	b.n	8114b5c <_vfiprintf_r+0x20>
 8114ba6:	89ab      	ldrh	r3, [r5, #12]
 8114ba8:	0598      	lsls	r0, r3, #22
 8114baa:	d4ed      	bmi.n	8114b88 <_vfiprintf_r+0x4c>
 8114bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8114bae:	f7fd fb95 	bl	81122dc <__retarget_lock_release_recursive>
 8114bb2:	e7e9      	b.n	8114b88 <_vfiprintf_r+0x4c>
 8114bb4:	2300      	movs	r3, #0
 8114bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8114bb8:	2320      	movs	r3, #32
 8114bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8114bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8114bc2:	2330      	movs	r3, #48	; 0x30
 8114bc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8114d88 <_vfiprintf_r+0x24c>
 8114bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8114bcc:	f04f 0901 	mov.w	r9, #1
 8114bd0:	4623      	mov	r3, r4
 8114bd2:	469a      	mov	sl, r3
 8114bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8114bd8:	b10a      	cbz	r2, 8114bde <_vfiprintf_r+0xa2>
 8114bda:	2a25      	cmp	r2, #37	; 0x25
 8114bdc:	d1f9      	bne.n	8114bd2 <_vfiprintf_r+0x96>
 8114bde:	ebba 0b04 	subs.w	fp, sl, r4
 8114be2:	d00b      	beq.n	8114bfc <_vfiprintf_r+0xc0>
 8114be4:	465b      	mov	r3, fp
 8114be6:	4622      	mov	r2, r4
 8114be8:	4629      	mov	r1, r5
 8114bea:	4630      	mov	r0, r6
 8114bec:	f7ff ff93 	bl	8114b16 <__sfputs_r>
 8114bf0:	3001      	adds	r0, #1
 8114bf2:	f000 80aa 	beq.w	8114d4a <_vfiprintf_r+0x20e>
 8114bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8114bf8:	445a      	add	r2, fp
 8114bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8114bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8114c00:	2b00      	cmp	r3, #0
 8114c02:	f000 80a2 	beq.w	8114d4a <_vfiprintf_r+0x20e>
 8114c06:	2300      	movs	r3, #0
 8114c08:	f04f 32ff 	mov.w	r2, #4294967295
 8114c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8114c10:	f10a 0a01 	add.w	sl, sl, #1
 8114c14:	9304      	str	r3, [sp, #16]
 8114c16:	9307      	str	r3, [sp, #28]
 8114c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8114c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8114c1e:	4654      	mov	r4, sl
 8114c20:	2205      	movs	r2, #5
 8114c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114c26:	4858      	ldr	r0, [pc, #352]	; (8114d88 <_vfiprintf_r+0x24c>)
 8114c28:	f7eb fb62 	bl	81002f0 <memchr>
 8114c2c:	9a04      	ldr	r2, [sp, #16]
 8114c2e:	b9d8      	cbnz	r0, 8114c68 <_vfiprintf_r+0x12c>
 8114c30:	06d1      	lsls	r1, r2, #27
 8114c32:	bf44      	itt	mi
 8114c34:	2320      	movmi	r3, #32
 8114c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8114c3a:	0713      	lsls	r3, r2, #28
 8114c3c:	bf44      	itt	mi
 8114c3e:	232b      	movmi	r3, #43	; 0x2b
 8114c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8114c44:	f89a 3000 	ldrb.w	r3, [sl]
 8114c48:	2b2a      	cmp	r3, #42	; 0x2a
 8114c4a:	d015      	beq.n	8114c78 <_vfiprintf_r+0x13c>
 8114c4c:	9a07      	ldr	r2, [sp, #28]
 8114c4e:	4654      	mov	r4, sl
 8114c50:	2000      	movs	r0, #0
 8114c52:	f04f 0c0a 	mov.w	ip, #10
 8114c56:	4621      	mov	r1, r4
 8114c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8114c5c:	3b30      	subs	r3, #48	; 0x30
 8114c5e:	2b09      	cmp	r3, #9
 8114c60:	d94e      	bls.n	8114d00 <_vfiprintf_r+0x1c4>
 8114c62:	b1b0      	cbz	r0, 8114c92 <_vfiprintf_r+0x156>
 8114c64:	9207      	str	r2, [sp, #28]
 8114c66:	e014      	b.n	8114c92 <_vfiprintf_r+0x156>
 8114c68:	eba0 0308 	sub.w	r3, r0, r8
 8114c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8114c70:	4313      	orrs	r3, r2
 8114c72:	9304      	str	r3, [sp, #16]
 8114c74:	46a2      	mov	sl, r4
 8114c76:	e7d2      	b.n	8114c1e <_vfiprintf_r+0xe2>
 8114c78:	9b03      	ldr	r3, [sp, #12]
 8114c7a:	1d19      	adds	r1, r3, #4
 8114c7c:	681b      	ldr	r3, [r3, #0]
 8114c7e:	9103      	str	r1, [sp, #12]
 8114c80:	2b00      	cmp	r3, #0
 8114c82:	bfbb      	ittet	lt
 8114c84:	425b      	neglt	r3, r3
 8114c86:	f042 0202 	orrlt.w	r2, r2, #2
 8114c8a:	9307      	strge	r3, [sp, #28]
 8114c8c:	9307      	strlt	r3, [sp, #28]
 8114c8e:	bfb8      	it	lt
 8114c90:	9204      	strlt	r2, [sp, #16]
 8114c92:	7823      	ldrb	r3, [r4, #0]
 8114c94:	2b2e      	cmp	r3, #46	; 0x2e
 8114c96:	d10c      	bne.n	8114cb2 <_vfiprintf_r+0x176>
 8114c98:	7863      	ldrb	r3, [r4, #1]
 8114c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8114c9c:	d135      	bne.n	8114d0a <_vfiprintf_r+0x1ce>
 8114c9e:	9b03      	ldr	r3, [sp, #12]
 8114ca0:	1d1a      	adds	r2, r3, #4
 8114ca2:	681b      	ldr	r3, [r3, #0]
 8114ca4:	9203      	str	r2, [sp, #12]
 8114ca6:	2b00      	cmp	r3, #0
 8114ca8:	bfb8      	it	lt
 8114caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8114cae:	3402      	adds	r4, #2
 8114cb0:	9305      	str	r3, [sp, #20]
 8114cb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8114d98 <_vfiprintf_r+0x25c>
 8114cb6:	7821      	ldrb	r1, [r4, #0]
 8114cb8:	2203      	movs	r2, #3
 8114cba:	4650      	mov	r0, sl
 8114cbc:	f7eb fb18 	bl	81002f0 <memchr>
 8114cc0:	b140      	cbz	r0, 8114cd4 <_vfiprintf_r+0x198>
 8114cc2:	2340      	movs	r3, #64	; 0x40
 8114cc4:	eba0 000a 	sub.w	r0, r0, sl
 8114cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8114ccc:	9b04      	ldr	r3, [sp, #16]
 8114cce:	4303      	orrs	r3, r0
 8114cd0:	3401      	adds	r4, #1
 8114cd2:	9304      	str	r3, [sp, #16]
 8114cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114cd8:	482c      	ldr	r0, [pc, #176]	; (8114d8c <_vfiprintf_r+0x250>)
 8114cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8114cde:	2206      	movs	r2, #6
 8114ce0:	f7eb fb06 	bl	81002f0 <memchr>
 8114ce4:	2800      	cmp	r0, #0
 8114ce6:	d03f      	beq.n	8114d68 <_vfiprintf_r+0x22c>
 8114ce8:	4b29      	ldr	r3, [pc, #164]	; (8114d90 <_vfiprintf_r+0x254>)
 8114cea:	bb1b      	cbnz	r3, 8114d34 <_vfiprintf_r+0x1f8>
 8114cec:	9b03      	ldr	r3, [sp, #12]
 8114cee:	3307      	adds	r3, #7
 8114cf0:	f023 0307 	bic.w	r3, r3, #7
 8114cf4:	3308      	adds	r3, #8
 8114cf6:	9303      	str	r3, [sp, #12]
 8114cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8114cfa:	443b      	add	r3, r7
 8114cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8114cfe:	e767      	b.n	8114bd0 <_vfiprintf_r+0x94>
 8114d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8114d04:	460c      	mov	r4, r1
 8114d06:	2001      	movs	r0, #1
 8114d08:	e7a5      	b.n	8114c56 <_vfiprintf_r+0x11a>
 8114d0a:	2300      	movs	r3, #0
 8114d0c:	3401      	adds	r4, #1
 8114d0e:	9305      	str	r3, [sp, #20]
 8114d10:	4619      	mov	r1, r3
 8114d12:	f04f 0c0a 	mov.w	ip, #10
 8114d16:	4620      	mov	r0, r4
 8114d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8114d1c:	3a30      	subs	r2, #48	; 0x30
 8114d1e:	2a09      	cmp	r2, #9
 8114d20:	d903      	bls.n	8114d2a <_vfiprintf_r+0x1ee>
 8114d22:	2b00      	cmp	r3, #0
 8114d24:	d0c5      	beq.n	8114cb2 <_vfiprintf_r+0x176>
 8114d26:	9105      	str	r1, [sp, #20]
 8114d28:	e7c3      	b.n	8114cb2 <_vfiprintf_r+0x176>
 8114d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8114d2e:	4604      	mov	r4, r0
 8114d30:	2301      	movs	r3, #1
 8114d32:	e7f0      	b.n	8114d16 <_vfiprintf_r+0x1da>
 8114d34:	ab03      	add	r3, sp, #12
 8114d36:	9300      	str	r3, [sp, #0]
 8114d38:	462a      	mov	r2, r5
 8114d3a:	4b16      	ldr	r3, [pc, #88]	; (8114d94 <_vfiprintf_r+0x258>)
 8114d3c:	a904      	add	r1, sp, #16
 8114d3e:	4630      	mov	r0, r6
 8114d40:	f7fd fbec 	bl	811251c <_printf_float>
 8114d44:	4607      	mov	r7, r0
 8114d46:	1c78      	adds	r0, r7, #1
 8114d48:	d1d6      	bne.n	8114cf8 <_vfiprintf_r+0x1bc>
 8114d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8114d4c:	07d9      	lsls	r1, r3, #31
 8114d4e:	d405      	bmi.n	8114d5c <_vfiprintf_r+0x220>
 8114d50:	89ab      	ldrh	r3, [r5, #12]
 8114d52:	059a      	lsls	r2, r3, #22
 8114d54:	d402      	bmi.n	8114d5c <_vfiprintf_r+0x220>
 8114d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8114d58:	f7fd fac0 	bl	81122dc <__retarget_lock_release_recursive>
 8114d5c:	89ab      	ldrh	r3, [r5, #12]
 8114d5e:	065b      	lsls	r3, r3, #25
 8114d60:	f53f af12 	bmi.w	8114b88 <_vfiprintf_r+0x4c>
 8114d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8114d66:	e711      	b.n	8114b8c <_vfiprintf_r+0x50>
 8114d68:	ab03      	add	r3, sp, #12
 8114d6a:	9300      	str	r3, [sp, #0]
 8114d6c:	462a      	mov	r2, r5
 8114d6e:	4b09      	ldr	r3, [pc, #36]	; (8114d94 <_vfiprintf_r+0x258>)
 8114d70:	a904      	add	r1, sp, #16
 8114d72:	4630      	mov	r0, r6
 8114d74:	f7fd fe76 	bl	8112a64 <_printf_i>
 8114d78:	e7e4      	b.n	8114d44 <_vfiprintf_r+0x208>
 8114d7a:	bf00      	nop
 8114d7c:	08116c88 	.word	0x08116c88
 8114d80:	08116ca8 	.word	0x08116ca8
 8114d84:	08116c68 	.word	0x08116c68
 8114d88:	08116f8c 	.word	0x08116f8c
 8114d8c:	08116f96 	.word	0x08116f96
 8114d90:	0811251d 	.word	0x0811251d
 8114d94:	08114b17 	.word	0x08114b17
 8114d98:	08116f92 	.word	0x08116f92

08114d9c <_read_r>:
 8114d9c:	b538      	push	{r3, r4, r5, lr}
 8114d9e:	4d07      	ldr	r5, [pc, #28]	; (8114dbc <_read_r+0x20>)
 8114da0:	4604      	mov	r4, r0
 8114da2:	4608      	mov	r0, r1
 8114da4:	4611      	mov	r1, r2
 8114da6:	2200      	movs	r2, #0
 8114da8:	602a      	str	r2, [r5, #0]
 8114daa:	461a      	mov	r2, r3
 8114dac:	f7fc fd8e 	bl	81118cc <_read>
 8114db0:	1c43      	adds	r3, r0, #1
 8114db2:	d102      	bne.n	8114dba <_read_r+0x1e>
 8114db4:	682b      	ldr	r3, [r5, #0]
 8114db6:	b103      	cbz	r3, 8114dba <_read_r+0x1e>
 8114db8:	6023      	str	r3, [r4, #0]
 8114dba:	bd38      	pop	{r3, r4, r5, pc}
 8114dbc:	100087a8 	.word	0x100087a8

08114dc0 <abort>:
 8114dc0:	b508      	push	{r3, lr}
 8114dc2:	2006      	movs	r0, #6
 8114dc4:	f000 f860 	bl	8114e88 <raise>
 8114dc8:	2001      	movs	r0, #1
 8114dca:	f000 f897 	bl	8114efc <_exit>
	...

08114dd0 <_fstat_r>:
 8114dd0:	b538      	push	{r3, r4, r5, lr}
 8114dd2:	4d07      	ldr	r5, [pc, #28]	; (8114df0 <_fstat_r+0x20>)
 8114dd4:	2300      	movs	r3, #0
 8114dd6:	4604      	mov	r4, r0
 8114dd8:	4608      	mov	r0, r1
 8114dda:	4611      	mov	r1, r2
 8114ddc:	602b      	str	r3, [r5, #0]
 8114dde:	f7fc fd9d 	bl	811191c <_fstat>
 8114de2:	1c43      	adds	r3, r0, #1
 8114de4:	d102      	bne.n	8114dec <_fstat_r+0x1c>
 8114de6:	682b      	ldr	r3, [r5, #0]
 8114de8:	b103      	cbz	r3, 8114dec <_fstat_r+0x1c>
 8114dea:	6023      	str	r3, [r4, #0]
 8114dec:	bd38      	pop	{r3, r4, r5, pc}
 8114dee:	bf00      	nop
 8114df0:	100087a8 	.word	0x100087a8

08114df4 <_isatty_r>:
 8114df4:	b538      	push	{r3, r4, r5, lr}
 8114df6:	4d06      	ldr	r5, [pc, #24]	; (8114e10 <_isatty_r+0x1c>)
 8114df8:	2300      	movs	r3, #0
 8114dfa:	4604      	mov	r4, r0
 8114dfc:	4608      	mov	r0, r1
 8114dfe:	602b      	str	r3, [r5, #0]
 8114e00:	f7fc fcf2 	bl	81117e8 <_isatty>
 8114e04:	1c43      	adds	r3, r0, #1
 8114e06:	d102      	bne.n	8114e0e <_isatty_r+0x1a>
 8114e08:	682b      	ldr	r3, [r5, #0]
 8114e0a:	b103      	cbz	r3, 8114e0e <_isatty_r+0x1a>
 8114e0c:	6023      	str	r3, [r4, #0]
 8114e0e:	bd38      	pop	{r3, r4, r5, pc}
 8114e10:	100087a8 	.word	0x100087a8

08114e14 <__ascii_mbtowc>:
 8114e14:	b082      	sub	sp, #8
 8114e16:	b901      	cbnz	r1, 8114e1a <__ascii_mbtowc+0x6>
 8114e18:	a901      	add	r1, sp, #4
 8114e1a:	b142      	cbz	r2, 8114e2e <__ascii_mbtowc+0x1a>
 8114e1c:	b14b      	cbz	r3, 8114e32 <__ascii_mbtowc+0x1e>
 8114e1e:	7813      	ldrb	r3, [r2, #0]
 8114e20:	600b      	str	r3, [r1, #0]
 8114e22:	7812      	ldrb	r2, [r2, #0]
 8114e24:	1e10      	subs	r0, r2, #0
 8114e26:	bf18      	it	ne
 8114e28:	2001      	movne	r0, #1
 8114e2a:	b002      	add	sp, #8
 8114e2c:	4770      	bx	lr
 8114e2e:	4610      	mov	r0, r2
 8114e30:	e7fb      	b.n	8114e2a <__ascii_mbtowc+0x16>
 8114e32:	f06f 0001 	mvn.w	r0, #1
 8114e36:	e7f8      	b.n	8114e2a <__ascii_mbtowc+0x16>

08114e38 <_raise_r>:
 8114e38:	291f      	cmp	r1, #31
 8114e3a:	b538      	push	{r3, r4, r5, lr}
 8114e3c:	4604      	mov	r4, r0
 8114e3e:	460d      	mov	r5, r1
 8114e40:	d904      	bls.n	8114e4c <_raise_r+0x14>
 8114e42:	2316      	movs	r3, #22
 8114e44:	6003      	str	r3, [r0, #0]
 8114e46:	f04f 30ff 	mov.w	r0, #4294967295
 8114e4a:	bd38      	pop	{r3, r4, r5, pc}
 8114e4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8114e4e:	b112      	cbz	r2, 8114e56 <_raise_r+0x1e>
 8114e50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8114e54:	b94b      	cbnz	r3, 8114e6a <_raise_r+0x32>
 8114e56:	4620      	mov	r0, r4
 8114e58:	f000 f830 	bl	8114ebc <_getpid_r>
 8114e5c:	462a      	mov	r2, r5
 8114e5e:	4601      	mov	r1, r0
 8114e60:	4620      	mov	r0, r4
 8114e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8114e66:	f000 b817 	b.w	8114e98 <_kill_r>
 8114e6a:	2b01      	cmp	r3, #1
 8114e6c:	d00a      	beq.n	8114e84 <_raise_r+0x4c>
 8114e6e:	1c59      	adds	r1, r3, #1
 8114e70:	d103      	bne.n	8114e7a <_raise_r+0x42>
 8114e72:	2316      	movs	r3, #22
 8114e74:	6003      	str	r3, [r0, #0]
 8114e76:	2001      	movs	r0, #1
 8114e78:	e7e7      	b.n	8114e4a <_raise_r+0x12>
 8114e7a:	2400      	movs	r4, #0
 8114e7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8114e80:	4628      	mov	r0, r5
 8114e82:	4798      	blx	r3
 8114e84:	2000      	movs	r0, #0
 8114e86:	e7e0      	b.n	8114e4a <_raise_r+0x12>

08114e88 <raise>:
 8114e88:	4b02      	ldr	r3, [pc, #8]	; (8114e94 <raise+0xc>)
 8114e8a:	4601      	mov	r1, r0
 8114e8c:	6818      	ldr	r0, [r3, #0]
 8114e8e:	f7ff bfd3 	b.w	8114e38 <_raise_r>
 8114e92:	bf00      	nop
 8114e94:	1000002c 	.word	0x1000002c

08114e98 <_kill_r>:
 8114e98:	b538      	push	{r3, r4, r5, lr}
 8114e9a:	4d07      	ldr	r5, [pc, #28]	; (8114eb8 <_kill_r+0x20>)
 8114e9c:	2300      	movs	r3, #0
 8114e9e:	4604      	mov	r4, r0
 8114ea0:	4608      	mov	r0, r1
 8114ea2:	4611      	mov	r1, r2
 8114ea4:	602b      	str	r3, [r5, #0]
 8114ea6:	f000 f821 	bl	8114eec <_kill>
 8114eaa:	1c43      	adds	r3, r0, #1
 8114eac:	d102      	bne.n	8114eb4 <_kill_r+0x1c>
 8114eae:	682b      	ldr	r3, [r5, #0]
 8114eb0:	b103      	cbz	r3, 8114eb4 <_kill_r+0x1c>
 8114eb2:	6023      	str	r3, [r4, #0]
 8114eb4:	bd38      	pop	{r3, r4, r5, pc}
 8114eb6:	bf00      	nop
 8114eb8:	100087a8 	.word	0x100087a8

08114ebc <_getpid_r>:
 8114ebc:	f000 b80e 	b.w	8114edc <_getpid>

08114ec0 <__ascii_wctomb>:
 8114ec0:	b149      	cbz	r1, 8114ed6 <__ascii_wctomb+0x16>
 8114ec2:	2aff      	cmp	r2, #255	; 0xff
 8114ec4:	bf85      	ittet	hi
 8114ec6:	238a      	movhi	r3, #138	; 0x8a
 8114ec8:	6003      	strhi	r3, [r0, #0]
 8114eca:	700a      	strbls	r2, [r1, #0]
 8114ecc:	f04f 30ff 	movhi.w	r0, #4294967295
 8114ed0:	bf98      	it	ls
 8114ed2:	2001      	movls	r0, #1
 8114ed4:	4770      	bx	lr
 8114ed6:	4608      	mov	r0, r1
 8114ed8:	4770      	bx	lr
	...

08114edc <_getpid>:
 8114edc:	4b02      	ldr	r3, [pc, #8]	; (8114ee8 <_getpid+0xc>)
 8114ede:	2258      	movs	r2, #88	; 0x58
 8114ee0:	601a      	str	r2, [r3, #0]
 8114ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8114ee6:	4770      	bx	lr
 8114ee8:	100087a8 	.word	0x100087a8

08114eec <_kill>:
 8114eec:	4b02      	ldr	r3, [pc, #8]	; (8114ef8 <_kill+0xc>)
 8114eee:	2258      	movs	r2, #88	; 0x58
 8114ef0:	601a      	str	r2, [r3, #0]
 8114ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8114ef6:	4770      	bx	lr
 8114ef8:	100087a8 	.word	0x100087a8

08114efc <_exit>:
 8114efc:	e7fe      	b.n	8114efc <_exit>
	...

08114f00 <_init>:
 8114f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114f02:	bf00      	nop
 8114f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8114f06:	bc08      	pop	{r3}
 8114f08:	469e      	mov	lr, r3
 8114f0a:	4770      	bx	lr

08114f0c <_fini>:
 8114f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114f0e:	bf00      	nop
 8114f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8114f12:	bc08      	pop	{r3}
 8114f14:	469e      	mov	lr, r3
 8114f16:	4770      	bx	lr
