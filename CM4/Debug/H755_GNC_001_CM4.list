
H755_GNC_001_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019790  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c0  08119a30  08119a30  00029a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0811bbf0  0811bbf0  0002bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0811bbf8  0811bbf8  0002bbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0811bbfc  0811bbfc  0002bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  10000000  0811bc00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  100001fc  0811bdfc  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  1000025c  0811be5c  0003025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 000017d0  100002bc  0811bebc  000302bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007350  10001aa0  0811d68c  00031aa0  2**5
                  ALLOC
 11 ._user_heap_stack 00002400  10008df0  0811d68c  00038df0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031a8c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005f818  00000000  00000000  00031abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009c88  00000000  00000000  000912d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002978  00000000  00000000  0009af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002698  00000000  00000000  0009d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004be33  00000000  00000000  0009ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000417ea  00000000  00000000  000ebda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c0550  00000000  00000000  0012d58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002edadd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bdf0  00000000  00000000  002edb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  002f9920  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  002f995c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10001aa0 	.word	0x10001aa0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08119a18 	.word	0x08119a18

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10001aa4 	.word	0x10001aa4
 81002dc:	08119a18 	.word	0x08119a18

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_ldivmod>:
 8100cb8:	b97b      	cbnz	r3, 8100cda <__aeabi_ldivmod+0x22>
 8100cba:	b972      	cbnz	r2, 8100cda <__aeabi_ldivmod+0x22>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bfbe      	ittt	lt
 8100cc0:	2000      	movlt	r0, #0
 8100cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100cc6:	e006      	blt.n	8100cd6 <__aeabi_ldivmod+0x1e>
 8100cc8:	bf08      	it	eq
 8100cca:	2800      	cmpeq	r0, #0
 8100ccc:	bf1c      	itt	ne
 8100cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8100cd6:	f000 b9b9 	b.w	810104c <__aeabi_idiv0>
 8100cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100ce2:	2900      	cmp	r1, #0
 8100ce4:	db09      	blt.n	8100cfa <__aeabi_ldivmod+0x42>
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	db1a      	blt.n	8100d20 <__aeabi_ldivmod+0x68>
 8100cea:	f000 f84d 	bl	8100d88 <__udivmoddi4>
 8100cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100cf6:	b004      	add	sp, #16
 8100cf8:	4770      	bx	lr
 8100cfa:	4240      	negs	r0, r0
 8100cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d00:	2b00      	cmp	r3, #0
 8100d02:	db1b      	blt.n	8100d3c <__aeabi_ldivmod+0x84>
 8100d04:	f000 f840 	bl	8100d88 <__udivmoddi4>
 8100d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d10:	b004      	add	sp, #16
 8100d12:	4240      	negs	r0, r0
 8100d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d18:	4252      	negs	r2, r2
 8100d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d1e:	4770      	bx	lr
 8100d20:	4252      	negs	r2, r2
 8100d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d26:	f000 f82f 	bl	8100d88 <__udivmoddi4>
 8100d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d32:	b004      	add	sp, #16
 8100d34:	4240      	negs	r0, r0
 8100d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100d3a:	4770      	bx	lr
 8100d3c:	4252      	negs	r2, r2
 8100d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d42:	f000 f821 	bl	8100d88 <__udivmoddi4>
 8100d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d4e:	b004      	add	sp, #16
 8100d50:	4252      	negs	r2, r2
 8100d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100d56:	4770      	bx	lr

08100d58 <__aeabi_uldivmod>:
 8100d58:	b953      	cbnz	r3, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5a:	b94a      	cbnz	r2, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5c:	2900      	cmp	r1, #0
 8100d5e:	bf08      	it	eq
 8100d60:	2800      	cmpeq	r0, #0
 8100d62:	bf1c      	itt	ne
 8100d64:	f04f 31ff 	movne.w	r1, #4294967295
 8100d68:	f04f 30ff 	movne.w	r0, #4294967295
 8100d6c:	f000 b96e 	b.w	810104c <__aeabi_idiv0>
 8100d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d78:	f000 f806 	bl	8100d88 <__udivmoddi4>
 8100d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d84:	b004      	add	sp, #16
 8100d86:	4770      	bx	lr

08100d88 <__udivmoddi4>:
 8100d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100d8c:	9d08      	ldr	r5, [sp, #32]
 8100d8e:	4604      	mov	r4, r0
 8100d90:	468c      	mov	ip, r1
 8100d92:	2b00      	cmp	r3, #0
 8100d94:	f040 8083 	bne.w	8100e9e <__udivmoddi4+0x116>
 8100d98:	428a      	cmp	r2, r1
 8100d9a:	4617      	mov	r7, r2
 8100d9c:	d947      	bls.n	8100e2e <__udivmoddi4+0xa6>
 8100d9e:	fab2 f282 	clz	r2, r2
 8100da2:	b142      	cbz	r2, 8100db6 <__udivmoddi4+0x2e>
 8100da4:	f1c2 0020 	rsb	r0, r2, #32
 8100da8:	fa24 f000 	lsr.w	r0, r4, r0
 8100dac:	4091      	lsls	r1, r2
 8100dae:	4097      	lsls	r7, r2
 8100db0:	ea40 0c01 	orr.w	ip, r0, r1
 8100db4:	4094      	lsls	r4, r2
 8100db6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100dba:	0c23      	lsrs	r3, r4, #16
 8100dbc:	fbbc f6f8 	udiv	r6, ip, r8
 8100dc0:	fa1f fe87 	uxth.w	lr, r7
 8100dc4:	fb08 c116 	mls	r1, r8, r6, ip
 8100dc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100dcc:	fb06 f10e 	mul.w	r1, r6, lr
 8100dd0:	4299      	cmp	r1, r3
 8100dd2:	d909      	bls.n	8100de8 <__udivmoddi4+0x60>
 8100dd4:	18fb      	adds	r3, r7, r3
 8100dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8100dda:	f080 8119 	bcs.w	8101010 <__udivmoddi4+0x288>
 8100dde:	4299      	cmp	r1, r3
 8100de0:	f240 8116 	bls.w	8101010 <__udivmoddi4+0x288>
 8100de4:	3e02      	subs	r6, #2
 8100de6:	443b      	add	r3, r7
 8100de8:	1a5b      	subs	r3, r3, r1
 8100dea:	b2a4      	uxth	r4, r4
 8100dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8100df0:	fb08 3310 	mls	r3, r8, r0, r3
 8100df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100df8:	fb00 fe0e 	mul.w	lr, r0, lr
 8100dfc:	45a6      	cmp	lr, r4
 8100dfe:	d909      	bls.n	8100e14 <__udivmoddi4+0x8c>
 8100e00:	193c      	adds	r4, r7, r4
 8100e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e06:	f080 8105 	bcs.w	8101014 <__udivmoddi4+0x28c>
 8100e0a:	45a6      	cmp	lr, r4
 8100e0c:	f240 8102 	bls.w	8101014 <__udivmoddi4+0x28c>
 8100e10:	3802      	subs	r0, #2
 8100e12:	443c      	add	r4, r7
 8100e14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100e18:	eba4 040e 	sub.w	r4, r4, lr
 8100e1c:	2600      	movs	r6, #0
 8100e1e:	b11d      	cbz	r5, 8100e28 <__udivmoddi4+0xa0>
 8100e20:	40d4      	lsrs	r4, r2
 8100e22:	2300      	movs	r3, #0
 8100e24:	e9c5 4300 	strd	r4, r3, [r5]
 8100e28:	4631      	mov	r1, r6
 8100e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e2e:	b902      	cbnz	r2, 8100e32 <__udivmoddi4+0xaa>
 8100e30:	deff      	udf	#255	; 0xff
 8100e32:	fab2 f282 	clz	r2, r2
 8100e36:	2a00      	cmp	r2, #0
 8100e38:	d150      	bne.n	8100edc <__udivmoddi4+0x154>
 8100e3a:	1bcb      	subs	r3, r1, r7
 8100e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e40:	fa1f f887 	uxth.w	r8, r7
 8100e44:	2601      	movs	r6, #1
 8100e46:	fbb3 fcfe 	udiv	ip, r3, lr
 8100e4a:	0c21      	lsrs	r1, r4, #16
 8100e4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8100e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e54:	fb08 f30c 	mul.w	r3, r8, ip
 8100e58:	428b      	cmp	r3, r1
 8100e5a:	d907      	bls.n	8100e6c <__udivmoddi4+0xe4>
 8100e5c:	1879      	adds	r1, r7, r1
 8100e5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100e62:	d202      	bcs.n	8100e6a <__udivmoddi4+0xe2>
 8100e64:	428b      	cmp	r3, r1
 8100e66:	f200 80e9 	bhi.w	810103c <__udivmoddi4+0x2b4>
 8100e6a:	4684      	mov	ip, r0
 8100e6c:	1ac9      	subs	r1, r1, r3
 8100e6e:	b2a3      	uxth	r3, r4
 8100e70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100e74:	fb0e 1110 	mls	r1, lr, r0, r1
 8100e78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100e7c:	fb08 f800 	mul.w	r8, r8, r0
 8100e80:	45a0      	cmp	r8, r4
 8100e82:	d907      	bls.n	8100e94 <__udivmoddi4+0x10c>
 8100e84:	193c      	adds	r4, r7, r4
 8100e86:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e8a:	d202      	bcs.n	8100e92 <__udivmoddi4+0x10a>
 8100e8c:	45a0      	cmp	r8, r4
 8100e8e:	f200 80d9 	bhi.w	8101044 <__udivmoddi4+0x2bc>
 8100e92:	4618      	mov	r0, r3
 8100e94:	eba4 0408 	sub.w	r4, r4, r8
 8100e98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100e9c:	e7bf      	b.n	8100e1e <__udivmoddi4+0x96>
 8100e9e:	428b      	cmp	r3, r1
 8100ea0:	d909      	bls.n	8100eb6 <__udivmoddi4+0x12e>
 8100ea2:	2d00      	cmp	r5, #0
 8100ea4:	f000 80b1 	beq.w	810100a <__udivmoddi4+0x282>
 8100ea8:	2600      	movs	r6, #0
 8100eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8100eae:	4630      	mov	r0, r6
 8100eb0:	4631      	mov	r1, r6
 8100eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eb6:	fab3 f683 	clz	r6, r3
 8100eba:	2e00      	cmp	r6, #0
 8100ebc:	d14a      	bne.n	8100f54 <__udivmoddi4+0x1cc>
 8100ebe:	428b      	cmp	r3, r1
 8100ec0:	d302      	bcc.n	8100ec8 <__udivmoddi4+0x140>
 8100ec2:	4282      	cmp	r2, r0
 8100ec4:	f200 80b8 	bhi.w	8101038 <__udivmoddi4+0x2b0>
 8100ec8:	1a84      	subs	r4, r0, r2
 8100eca:	eb61 0103 	sbc.w	r1, r1, r3
 8100ece:	2001      	movs	r0, #1
 8100ed0:	468c      	mov	ip, r1
 8100ed2:	2d00      	cmp	r5, #0
 8100ed4:	d0a8      	beq.n	8100e28 <__udivmoddi4+0xa0>
 8100ed6:	e9c5 4c00 	strd	r4, ip, [r5]
 8100eda:	e7a5      	b.n	8100e28 <__udivmoddi4+0xa0>
 8100edc:	f1c2 0320 	rsb	r3, r2, #32
 8100ee0:	fa20 f603 	lsr.w	r6, r0, r3
 8100ee4:	4097      	lsls	r7, r2
 8100ee6:	fa01 f002 	lsl.w	r0, r1, r2
 8100eea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100eee:	40d9      	lsrs	r1, r3
 8100ef0:	4330      	orrs	r0, r6
 8100ef2:	0c03      	lsrs	r3, r0, #16
 8100ef4:	fbb1 f6fe 	udiv	r6, r1, lr
 8100ef8:	fa1f f887 	uxth.w	r8, r7
 8100efc:	fb0e 1116 	mls	r1, lr, r6, r1
 8100f00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f04:	fb06 f108 	mul.w	r1, r6, r8
 8100f08:	4299      	cmp	r1, r3
 8100f0a:	fa04 f402 	lsl.w	r4, r4, r2
 8100f0e:	d909      	bls.n	8100f24 <__udivmoddi4+0x19c>
 8100f10:	18fb      	adds	r3, r7, r3
 8100f12:	f106 3cff 	add.w	ip, r6, #4294967295
 8100f16:	f080 808d 	bcs.w	8101034 <__udivmoddi4+0x2ac>
 8100f1a:	4299      	cmp	r1, r3
 8100f1c:	f240 808a 	bls.w	8101034 <__udivmoddi4+0x2ac>
 8100f20:	3e02      	subs	r6, #2
 8100f22:	443b      	add	r3, r7
 8100f24:	1a5b      	subs	r3, r3, r1
 8100f26:	b281      	uxth	r1, r0
 8100f28:	fbb3 f0fe 	udiv	r0, r3, lr
 8100f2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8100f30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f34:	fb00 f308 	mul.w	r3, r0, r8
 8100f38:	428b      	cmp	r3, r1
 8100f3a:	d907      	bls.n	8100f4c <__udivmoddi4+0x1c4>
 8100f3c:	1879      	adds	r1, r7, r1
 8100f3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8100f42:	d273      	bcs.n	810102c <__udivmoddi4+0x2a4>
 8100f44:	428b      	cmp	r3, r1
 8100f46:	d971      	bls.n	810102c <__udivmoddi4+0x2a4>
 8100f48:	3802      	subs	r0, #2
 8100f4a:	4439      	add	r1, r7
 8100f4c:	1acb      	subs	r3, r1, r3
 8100f4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100f52:	e778      	b.n	8100e46 <__udivmoddi4+0xbe>
 8100f54:	f1c6 0c20 	rsb	ip, r6, #32
 8100f58:	fa03 f406 	lsl.w	r4, r3, r6
 8100f5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8100f60:	431c      	orrs	r4, r3
 8100f62:	fa20 f70c 	lsr.w	r7, r0, ip
 8100f66:	fa01 f306 	lsl.w	r3, r1, r6
 8100f6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100f6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8100f72:	431f      	orrs	r7, r3
 8100f74:	0c3b      	lsrs	r3, r7, #16
 8100f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8100f7a:	fa1f f884 	uxth.w	r8, r4
 8100f7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8100f82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100f86:	fb09 fa08 	mul.w	sl, r9, r8
 8100f8a:	458a      	cmp	sl, r1
 8100f8c:	fa02 f206 	lsl.w	r2, r2, r6
 8100f90:	fa00 f306 	lsl.w	r3, r0, r6
 8100f94:	d908      	bls.n	8100fa8 <__udivmoddi4+0x220>
 8100f96:	1861      	adds	r1, r4, r1
 8100f98:	f109 30ff 	add.w	r0, r9, #4294967295
 8100f9c:	d248      	bcs.n	8101030 <__udivmoddi4+0x2a8>
 8100f9e:	458a      	cmp	sl, r1
 8100fa0:	d946      	bls.n	8101030 <__udivmoddi4+0x2a8>
 8100fa2:	f1a9 0902 	sub.w	r9, r9, #2
 8100fa6:	4421      	add	r1, r4
 8100fa8:	eba1 010a 	sub.w	r1, r1, sl
 8100fac:	b2bf      	uxth	r7, r7
 8100fae:	fbb1 f0fe 	udiv	r0, r1, lr
 8100fb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8100fb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100fba:	fb00 f808 	mul.w	r8, r0, r8
 8100fbe:	45b8      	cmp	r8, r7
 8100fc0:	d907      	bls.n	8100fd2 <__udivmoddi4+0x24a>
 8100fc2:	19e7      	adds	r7, r4, r7
 8100fc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8100fc8:	d22e      	bcs.n	8101028 <__udivmoddi4+0x2a0>
 8100fca:	45b8      	cmp	r8, r7
 8100fcc:	d92c      	bls.n	8101028 <__udivmoddi4+0x2a0>
 8100fce:	3802      	subs	r0, #2
 8100fd0:	4427      	add	r7, r4
 8100fd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100fd6:	eba7 0708 	sub.w	r7, r7, r8
 8100fda:	fba0 8902 	umull	r8, r9, r0, r2
 8100fde:	454f      	cmp	r7, r9
 8100fe0:	46c6      	mov	lr, r8
 8100fe2:	4649      	mov	r1, r9
 8100fe4:	d31a      	bcc.n	810101c <__udivmoddi4+0x294>
 8100fe6:	d017      	beq.n	8101018 <__udivmoddi4+0x290>
 8100fe8:	b15d      	cbz	r5, 8101002 <__udivmoddi4+0x27a>
 8100fea:	ebb3 020e 	subs.w	r2, r3, lr
 8100fee:	eb67 0701 	sbc.w	r7, r7, r1
 8100ff2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100ff6:	40f2      	lsrs	r2, r6
 8100ff8:	ea4c 0202 	orr.w	r2, ip, r2
 8100ffc:	40f7      	lsrs	r7, r6
 8100ffe:	e9c5 2700 	strd	r2, r7, [r5]
 8101002:	2600      	movs	r6, #0
 8101004:	4631      	mov	r1, r6
 8101006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810100a:	462e      	mov	r6, r5
 810100c:	4628      	mov	r0, r5
 810100e:	e70b      	b.n	8100e28 <__udivmoddi4+0xa0>
 8101010:	4606      	mov	r6, r0
 8101012:	e6e9      	b.n	8100de8 <__udivmoddi4+0x60>
 8101014:	4618      	mov	r0, r3
 8101016:	e6fd      	b.n	8100e14 <__udivmoddi4+0x8c>
 8101018:	4543      	cmp	r3, r8
 810101a:	d2e5      	bcs.n	8100fe8 <__udivmoddi4+0x260>
 810101c:	ebb8 0e02 	subs.w	lr, r8, r2
 8101020:	eb69 0104 	sbc.w	r1, r9, r4
 8101024:	3801      	subs	r0, #1
 8101026:	e7df      	b.n	8100fe8 <__udivmoddi4+0x260>
 8101028:	4608      	mov	r0, r1
 810102a:	e7d2      	b.n	8100fd2 <__udivmoddi4+0x24a>
 810102c:	4660      	mov	r0, ip
 810102e:	e78d      	b.n	8100f4c <__udivmoddi4+0x1c4>
 8101030:	4681      	mov	r9, r0
 8101032:	e7b9      	b.n	8100fa8 <__udivmoddi4+0x220>
 8101034:	4666      	mov	r6, ip
 8101036:	e775      	b.n	8100f24 <__udivmoddi4+0x19c>
 8101038:	4630      	mov	r0, r6
 810103a:	e74a      	b.n	8100ed2 <__udivmoddi4+0x14a>
 810103c:	f1ac 0c02 	sub.w	ip, ip, #2
 8101040:	4439      	add	r1, r7
 8101042:	e713      	b.n	8100e6c <__udivmoddi4+0xe4>
 8101044:	3802      	subs	r0, #2
 8101046:	443c      	add	r4, r7
 8101048:	e724      	b.n	8100e94 <__udivmoddi4+0x10c>
 810104a:	bf00      	nop

0810104c <__aeabi_idiv0>:
 810104c:	4770      	bx	lr
 810104e:	bf00      	nop

08101050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101050:	b480      	push	{r7}
 8101052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101054:	4b0b      	ldr	r3, [pc, #44]	; (8101084 <SystemInit+0x34>)
 8101056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810105a:	4a0a      	ldr	r2, [pc, #40]	; (8101084 <SystemInit+0x34>)
 810105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101064:	4b07      	ldr	r3, [pc, #28]	; (8101084 <SystemInit+0x34>)
 8101066:	691b      	ldr	r3, [r3, #16]
 8101068:	4a06      	ldr	r2, [pc, #24]	; (8101084 <SystemInit+0x34>)
 810106a:	f043 0310 	orr.w	r3, r3, #16
 810106e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101070:	4b04      	ldr	r3, [pc, #16]	; (8101084 <SystemInit+0x34>)
 8101072:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101076:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101078:	bf00      	nop
 810107a:	46bd      	mov	sp, r7
 810107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101080:	4770      	bx	lr
 8101082:	bf00      	nop
 8101084:	e000ed00 	.word	0xe000ed00

08101088 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8101088:	b480      	push	{r7}
 810108a:	b083      	sub	sp, #12
 810108c:	af00      	add	r7, sp, #0
 810108e:	6078      	str	r0, [r7, #4]
 8101090:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8101092:	687b      	ldr	r3, [r7, #4]
 8101094:	2b00      	cmp	r3, #0
 8101096:	d00b      	beq.n	81010b0 <LAN8742_RegisterBusIO+0x28>
 8101098:	683b      	ldr	r3, [r7, #0]
 810109a:	68db      	ldr	r3, [r3, #12]
 810109c:	2b00      	cmp	r3, #0
 810109e:	d007      	beq.n	81010b0 <LAN8742_RegisterBusIO+0x28>
 81010a0:	683b      	ldr	r3, [r7, #0]
 81010a2:	689b      	ldr	r3, [r3, #8]
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	d003      	beq.n	81010b0 <LAN8742_RegisterBusIO+0x28>
 81010a8:	683b      	ldr	r3, [r7, #0]
 81010aa:	691b      	ldr	r3, [r3, #16]
 81010ac:	2b00      	cmp	r3, #0
 81010ae:	d102      	bne.n	81010b6 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 81010b0:	f04f 33ff 	mov.w	r3, #4294967295
 81010b4:	e014      	b.n	81010e0 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 81010b6:	683b      	ldr	r3, [r7, #0]
 81010b8:	681a      	ldr	r2, [r3, #0]
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 81010be:	683b      	ldr	r3, [r7, #0]
 81010c0:	685a      	ldr	r2, [r3, #4]
 81010c2:	687b      	ldr	r3, [r7, #4]
 81010c4:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 81010c6:	683b      	ldr	r3, [r7, #0]
 81010c8:	68da      	ldr	r2, [r3, #12]
 81010ca:	687b      	ldr	r3, [r7, #4]
 81010cc:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 81010ce:	683b      	ldr	r3, [r7, #0]
 81010d0:	689a      	ldr	r2, [r3, #8]
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 81010d6:	683b      	ldr	r3, [r7, #0]
 81010d8:	691a      	ldr	r2, [r3, #16]
 81010da:	687b      	ldr	r3, [r7, #4]
 81010dc:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 81010de:	2300      	movs	r3, #0
}
 81010e0:	4618      	mov	r0, r3
 81010e2:	370c      	adds	r7, #12
 81010e4:	46bd      	mov	sp, r7
 81010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ea:	4770      	bx	lr

081010ec <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 81010ec:	b580      	push	{r7, lr}
 81010ee:	b086      	sub	sp, #24
 81010f0:	af00      	add	r7, sp, #0
 81010f2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 81010f4:	2300      	movs	r3, #0
 81010f6:	60fb      	str	r3, [r7, #12]
 81010f8:	2300      	movs	r3, #0
 81010fa:	60bb      	str	r3, [r7, #8]
 81010fc:	2300      	movs	r3, #0
 81010fe:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8101100:	2300      	movs	r3, #0
 8101102:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	685b      	ldr	r3, [r3, #4]
 8101108:	2b00      	cmp	r3, #0
 810110a:	d17c      	bne.n	8101206 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	689b      	ldr	r3, [r3, #8]
 8101110:	2b00      	cmp	r3, #0
 8101112:	d002      	beq.n	810111a <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	689b      	ldr	r3, [r3, #8]
 8101118:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810111a:	687b      	ldr	r3, [r7, #4]
 810111c:	2220      	movs	r2, #32
 810111e:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8101120:	2300      	movs	r3, #0
 8101122:	617b      	str	r3, [r7, #20]
 8101124:	e01c      	b.n	8101160 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8101126:	687b      	ldr	r3, [r7, #4]
 8101128:	695b      	ldr	r3, [r3, #20]
 810112a:	f107 0208 	add.w	r2, r7, #8
 810112e:	2112      	movs	r1, #18
 8101130:	6978      	ldr	r0, [r7, #20]
 8101132:	4798      	blx	r3
 8101134:	4603      	mov	r3, r0
 8101136:	2b00      	cmp	r3, #0
 8101138:	da03      	bge.n	8101142 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 810113a:	f06f 0304 	mvn.w	r3, #4
 810113e:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8101140:	e00b      	b.n	810115a <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8101142:	68bb      	ldr	r3, [r7, #8]
 8101144:	f003 031f 	and.w	r3, r3, #31
 8101148:	697a      	ldr	r2, [r7, #20]
 810114a:	429a      	cmp	r2, r3
 810114c:	d105      	bne.n	810115a <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	697a      	ldr	r2, [r7, #20]
 8101152:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8101154:	2300      	movs	r3, #0
 8101156:	613b      	str	r3, [r7, #16]
         break;
 8101158:	e005      	b.n	8101166 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810115a:	697b      	ldr	r3, [r7, #20]
 810115c:	3301      	adds	r3, #1
 810115e:	617b      	str	r3, [r7, #20]
 8101160:	697b      	ldr	r3, [r7, #20]
 8101162:	2b1f      	cmp	r3, #31
 8101164:	d9df      	bls.n	8101126 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	681b      	ldr	r3, [r3, #0]
 810116a:	2b1f      	cmp	r3, #31
 810116c:	d902      	bls.n	8101174 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 810116e:	f06f 0302 	mvn.w	r3, #2
 8101172:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8101174:	693b      	ldr	r3, [r7, #16]
 8101176:	2b00      	cmp	r3, #0
 8101178:	d145      	bne.n	8101206 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 810117a:	687b      	ldr	r3, [r7, #4]
 810117c:	691b      	ldr	r3, [r3, #16]
 810117e:	687a      	ldr	r2, [r7, #4]
 8101180:	6810      	ldr	r0, [r2, #0]
 8101182:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8101186:	2100      	movs	r1, #0
 8101188:	4798      	blx	r3
 810118a:	4603      	mov	r3, r0
 810118c:	2b00      	cmp	r3, #0
 810118e:	db37      	blt.n	8101200 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	695b      	ldr	r3, [r3, #20]
 8101194:	687a      	ldr	r2, [r7, #4]
 8101196:	6810      	ldr	r0, [r2, #0]
 8101198:	f107 0208 	add.w	r2, r7, #8
 810119c:	2100      	movs	r1, #0
 810119e:	4798      	blx	r3
 81011a0:	4603      	mov	r3, r0
 81011a2:	2b00      	cmp	r3, #0
 81011a4:	db28      	blt.n	81011f8 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	699b      	ldr	r3, [r3, #24]
 81011aa:	4798      	blx	r3
 81011ac:	4603      	mov	r3, r0
 81011ae:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 81011b0:	e01c      	b.n	81011ec <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	699b      	ldr	r3, [r3, #24]
 81011b6:	4798      	blx	r3
 81011b8:	4603      	mov	r3, r0
 81011ba:	461a      	mov	r2, r3
 81011bc:	68fb      	ldr	r3, [r7, #12]
 81011be:	1ad3      	subs	r3, r2, r3
 81011c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81011c4:	d80e      	bhi.n	81011e4 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 81011c6:	687b      	ldr	r3, [r7, #4]
 81011c8:	695b      	ldr	r3, [r3, #20]
 81011ca:	687a      	ldr	r2, [r7, #4]
 81011cc:	6810      	ldr	r0, [r2, #0]
 81011ce:	f107 0208 	add.w	r2, r7, #8
 81011d2:	2100      	movs	r1, #0
 81011d4:	4798      	blx	r3
 81011d6:	4603      	mov	r3, r0
 81011d8:	2b00      	cmp	r3, #0
 81011da:	da07      	bge.n	81011ec <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 81011dc:	f06f 0304 	mvn.w	r3, #4
 81011e0:	613b      	str	r3, [r7, #16]
                 break;
 81011e2:	e010      	b.n	8101206 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 81011e4:	f06f 0301 	mvn.w	r3, #1
 81011e8:	613b      	str	r3, [r7, #16]
               break;
 81011ea:	e00c      	b.n	8101206 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 81011ec:	68bb      	ldr	r3, [r7, #8]
 81011ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81011f2:	2b00      	cmp	r3, #0
 81011f4:	d1dd      	bne.n	81011b2 <LAN8742_Init+0xc6>
 81011f6:	e006      	b.n	8101206 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 81011f8:	f06f 0304 	mvn.w	r3, #4
 81011fc:	613b      	str	r3, [r7, #16]
 81011fe:	e002      	b.n	8101206 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8101200:	f06f 0303 	mvn.w	r3, #3
 8101204:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8101206:	693b      	ldr	r3, [r7, #16]
 8101208:	2b00      	cmp	r3, #0
 810120a:	d112      	bne.n	8101232 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 810120c:	687b      	ldr	r3, [r7, #4]
 810120e:	699b      	ldr	r3, [r3, #24]
 8101210:	4798      	blx	r3
 8101212:	4603      	mov	r3, r0
 8101214:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8101216:	bf00      	nop
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	699b      	ldr	r3, [r3, #24]
 810121c:	4798      	blx	r3
 810121e:	4603      	mov	r3, r0
 8101220:	461a      	mov	r2, r3
 8101222:	68fb      	ldr	r3, [r7, #12]
 8101224:	1ad3      	subs	r3, r2, r3
 8101226:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 810122a:	d9f5      	bls.n	8101218 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	2201      	movs	r2, #1
 8101230:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8101232:	693b      	ldr	r3, [r7, #16]
 }
 8101234:	4618      	mov	r0, r3
 8101236:	3718      	adds	r7, #24
 8101238:	46bd      	mov	sp, r7
 810123a:	bd80      	pop	{r7, pc}

0810123c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b084      	sub	sp, #16
 8101240:	af00      	add	r7, sp, #0
 8101242:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8101244:	2300      	movs	r3, #0
 8101246:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	695b      	ldr	r3, [r3, #20]
 810124c:	687a      	ldr	r2, [r7, #4]
 810124e:	6810      	ldr	r0, [r2, #0]
 8101250:	f107 020c 	add.w	r2, r7, #12
 8101254:	2101      	movs	r1, #1
 8101256:	4798      	blx	r3
 8101258:	4603      	mov	r3, r0
 810125a:	2b00      	cmp	r3, #0
 810125c:	da02      	bge.n	8101264 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 810125e:	f06f 0304 	mvn.w	r3, #4
 8101262:	e06e      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	695b      	ldr	r3, [r3, #20]
 8101268:	687a      	ldr	r2, [r7, #4]
 810126a:	6810      	ldr	r0, [r2, #0]
 810126c:	f107 020c 	add.w	r2, r7, #12
 8101270:	2101      	movs	r1, #1
 8101272:	4798      	blx	r3
 8101274:	4603      	mov	r3, r0
 8101276:	2b00      	cmp	r3, #0
 8101278:	da02      	bge.n	8101280 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810127a:	f06f 0304 	mvn.w	r3, #4
 810127e:	e060      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8101280:	68fb      	ldr	r3, [r7, #12]
 8101282:	f003 0304 	and.w	r3, r3, #4
 8101286:	2b00      	cmp	r3, #0
 8101288:	d101      	bne.n	810128e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 810128a:	2301      	movs	r3, #1
 810128c:	e059      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 810128e:	687b      	ldr	r3, [r7, #4]
 8101290:	695b      	ldr	r3, [r3, #20]
 8101292:	687a      	ldr	r2, [r7, #4]
 8101294:	6810      	ldr	r0, [r2, #0]
 8101296:	f107 020c 	add.w	r2, r7, #12
 810129a:	2100      	movs	r1, #0
 810129c:	4798      	blx	r3
 810129e:	4603      	mov	r3, r0
 81012a0:	2b00      	cmp	r3, #0
 81012a2:	da02      	bge.n	81012aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 81012a4:	f06f 0304 	mvn.w	r3, #4
 81012a8:	e04b      	b.n	8101342 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 81012aa:	68fb      	ldr	r3, [r7, #12]
 81012ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d11b      	bne.n	81012ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 81012b4:	68fb      	ldr	r3, [r7, #12]
 81012b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81012ba:	2b00      	cmp	r3, #0
 81012bc:	d006      	beq.n	81012cc <LAN8742_GetLinkState+0x90>
 81012be:	68fb      	ldr	r3, [r7, #12]
 81012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81012c4:	2b00      	cmp	r3, #0
 81012c6:	d001      	beq.n	81012cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 81012c8:	2302      	movs	r3, #2
 81012ca:	e03a      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 81012cc:	68fb      	ldr	r3, [r7, #12]
 81012ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81012d2:	2b00      	cmp	r3, #0
 81012d4:	d001      	beq.n	81012da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 81012d6:	2303      	movs	r3, #3
 81012d8:	e033      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 81012da:	68fb      	ldr	r3, [r7, #12]
 81012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81012e0:	2b00      	cmp	r3, #0
 81012e2:	d001      	beq.n	81012e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 81012e4:	2304      	movs	r3, #4
 81012e6:	e02c      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81012e8:	2305      	movs	r3, #5
 81012ea:	e02a      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	695b      	ldr	r3, [r3, #20]
 81012f0:	687a      	ldr	r2, [r7, #4]
 81012f2:	6810      	ldr	r0, [r2, #0]
 81012f4:	f107 020c 	add.w	r2, r7, #12
 81012f8:	211f      	movs	r1, #31
 81012fa:	4798      	blx	r3
 81012fc:	4603      	mov	r3, r0
 81012fe:	2b00      	cmp	r3, #0
 8101300:	da02      	bge.n	8101308 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8101302:	f06f 0304 	mvn.w	r3, #4
 8101306:	e01c      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8101308:	68fb      	ldr	r3, [r7, #12]
 810130a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810130e:	2b00      	cmp	r3, #0
 8101310:	d101      	bne.n	8101316 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8101312:	2306      	movs	r3, #6
 8101314:	e015      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8101316:	68fb      	ldr	r3, [r7, #12]
 8101318:	f003 031c 	and.w	r3, r3, #28
 810131c:	2b18      	cmp	r3, #24
 810131e:	d101      	bne.n	8101324 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8101320:	2302      	movs	r3, #2
 8101322:	e00e      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8101324:	68fb      	ldr	r3, [r7, #12]
 8101326:	f003 031c 	and.w	r3, r3, #28
 810132a:	2b08      	cmp	r3, #8
 810132c:	d101      	bne.n	8101332 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810132e:	2303      	movs	r3, #3
 8101330:	e007      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8101332:	68fb      	ldr	r3, [r7, #12]
 8101334:	f003 031c 	and.w	r3, r3, #28
 8101338:	2b14      	cmp	r3, #20
 810133a:	d101      	bne.n	8101340 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810133c:	2304      	movs	r3, #4
 810133e:	e000      	b.n	8101342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8101340:	2305      	movs	r3, #5
    }				
  }
}
 8101342:	4618      	mov	r0, r3
 8101344:	3710      	adds	r7, #16
 8101346:	46bd      	mov	sp, r7
 8101348:	bd80      	pop	{r7, pc}
	...

0810134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810134c:	b580      	push	{r7, lr}
 810134e:	b082      	sub	sp, #8
 8101350:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101352:	4b28      	ldr	r3, [pc, #160]	; (81013f4 <HAL_Init+0xa8>)
 8101354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101358:	4a26      	ldr	r2, [pc, #152]	; (81013f4 <HAL_Init+0xa8>)
 810135a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810135e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101362:	4b24      	ldr	r3, [pc, #144]	; (81013f4 <HAL_Init+0xa8>)
 8101364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810136c:	603b      	str	r3, [r7, #0]
 810136e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101370:	4b21      	ldr	r3, [pc, #132]	; (81013f8 <HAL_Init+0xac>)
 8101372:	681b      	ldr	r3, [r3, #0]
 8101374:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101378:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810137c:	4a1e      	ldr	r2, [pc, #120]	; (81013f8 <HAL_Init+0xac>)
 810137e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101382:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101384:	4b1c      	ldr	r3, [pc, #112]	; (81013f8 <HAL_Init+0xac>)
 8101386:	681b      	ldr	r3, [r3, #0]
 8101388:	4a1b      	ldr	r2, [pc, #108]	; (81013f8 <HAL_Init+0xac>)
 810138a:	f043 0301 	orr.w	r3, r3, #1
 810138e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101390:	2003      	movs	r0, #3
 8101392:	f001 fd52 	bl	8102e3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101396:	f006 f951 	bl	810763c <HAL_RCC_GetSysClockFreq>
 810139a:	4602      	mov	r2, r0
 810139c:	4b15      	ldr	r3, [pc, #84]	; (81013f4 <HAL_Init+0xa8>)
 810139e:	699b      	ldr	r3, [r3, #24]
 81013a0:	0a1b      	lsrs	r3, r3, #8
 81013a2:	f003 030f 	and.w	r3, r3, #15
 81013a6:	4915      	ldr	r1, [pc, #84]	; (81013fc <HAL_Init+0xb0>)
 81013a8:	5ccb      	ldrb	r3, [r1, r3]
 81013aa:	f003 031f 	and.w	r3, r3, #31
 81013ae:	fa22 f303 	lsr.w	r3, r2, r3
 81013b2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81013b4:	4b0f      	ldr	r3, [pc, #60]	; (81013f4 <HAL_Init+0xa8>)
 81013b6:	699b      	ldr	r3, [r3, #24]
 81013b8:	f003 030f 	and.w	r3, r3, #15
 81013bc:	4a0f      	ldr	r2, [pc, #60]	; (81013fc <HAL_Init+0xb0>)
 81013be:	5cd3      	ldrb	r3, [r2, r3]
 81013c0:	f003 031f 	and.w	r3, r3, #31
 81013c4:	687a      	ldr	r2, [r7, #4]
 81013c6:	fa22 f303 	lsr.w	r3, r2, r3
 81013ca:	4a0d      	ldr	r2, [pc, #52]	; (8101400 <HAL_Init+0xb4>)
 81013cc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81013ce:	4b0c      	ldr	r3, [pc, #48]	; (8101400 <HAL_Init+0xb4>)
 81013d0:	681b      	ldr	r3, [r3, #0]
 81013d2:	4a0c      	ldr	r2, [pc, #48]	; (8101404 <HAL_Init+0xb8>)
 81013d4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81013d6:	200f      	movs	r0, #15
 81013d8:	f015 fac8 	bl	811696c <HAL_InitTick>
 81013dc:	4603      	mov	r3, r0
 81013de:	2b00      	cmp	r3, #0
 81013e0:	d001      	beq.n	81013e6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81013e2:	2301      	movs	r3, #1
 81013e4:	e002      	b.n	81013ec <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81013e6:	f015 f809 	bl	81163fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81013ea:	2300      	movs	r3, #0
}
 81013ec:	4618      	mov	r0, r3
 81013ee:	3708      	adds	r7, #8
 81013f0:	46bd      	mov	sp, r7
 81013f2:	bd80      	pop	{r7, pc}
 81013f4:	58024400 	.word	0x58024400
 81013f8:	40024400 	.word	0x40024400
 81013fc:	0811b694 	.word	0x0811b694
 8101400:	10000004 	.word	0x10000004
 8101404:	10000000 	.word	0x10000000

08101408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101408:	b480      	push	{r7}
 810140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810140c:	4b06      	ldr	r3, [pc, #24]	; (8101428 <HAL_IncTick+0x20>)
 810140e:	781b      	ldrb	r3, [r3, #0]
 8101410:	461a      	mov	r2, r3
 8101412:	4b06      	ldr	r3, [pc, #24]	; (810142c <HAL_IncTick+0x24>)
 8101414:	681b      	ldr	r3, [r3, #0]
 8101416:	4413      	add	r3, r2
 8101418:	4a04      	ldr	r2, [pc, #16]	; (810142c <HAL_IncTick+0x24>)
 810141a:	6013      	str	r3, [r2, #0]
}
 810141c:	bf00      	nop
 810141e:	46bd      	mov	sp, r7
 8101420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101424:	4770      	bx	lr
 8101426:	bf00      	nop
 8101428:	1000000c 	.word	0x1000000c
 810142c:	10005c40 	.word	0x10005c40

08101430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101430:	b480      	push	{r7}
 8101432:	af00      	add	r7, sp, #0
  return uwTick;
 8101434:	4b03      	ldr	r3, [pc, #12]	; (8101444 <HAL_GetTick+0x14>)
 8101436:	681b      	ldr	r3, [r3, #0]
}
 8101438:	4618      	mov	r0, r3
 810143a:	46bd      	mov	sp, r7
 810143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101440:	4770      	bx	lr
 8101442:	bf00      	nop
 8101444:	10005c40 	.word	0x10005c40

08101448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101448:	b580      	push	{r7, lr}
 810144a:	b084      	sub	sp, #16
 810144c:	af00      	add	r7, sp, #0
 810144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101450:	f7ff ffee 	bl	8101430 <HAL_GetTick>
 8101454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101456:	687b      	ldr	r3, [r7, #4]
 8101458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810145a:	68fb      	ldr	r3, [r7, #12]
 810145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101460:	d005      	beq.n	810146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101462:	4b0a      	ldr	r3, [pc, #40]	; (810148c <HAL_Delay+0x44>)
 8101464:	781b      	ldrb	r3, [r3, #0]
 8101466:	461a      	mov	r2, r3
 8101468:	68fb      	ldr	r3, [r7, #12]
 810146a:	4413      	add	r3, r2
 810146c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810146e:	bf00      	nop
 8101470:	f7ff ffde 	bl	8101430 <HAL_GetTick>
 8101474:	4602      	mov	r2, r0
 8101476:	68bb      	ldr	r3, [r7, #8]
 8101478:	1ad3      	subs	r3, r2, r3
 810147a:	68fa      	ldr	r2, [r7, #12]
 810147c:	429a      	cmp	r2, r3
 810147e:	d8f7      	bhi.n	8101470 <HAL_Delay+0x28>
  {
  }
}
 8101480:	bf00      	nop
 8101482:	bf00      	nop
 8101484:	3710      	adds	r7, #16
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}
 810148a:	bf00      	nop
 810148c:	1000000c 	.word	0x1000000c

08101490 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101490:	b480      	push	{r7}
 8101492:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101494:	4b03      	ldr	r3, [pc, #12]	; (81014a4 <HAL_GetREVID+0x14>)
 8101496:	681b      	ldr	r3, [r3, #0]
 8101498:	0c1b      	lsrs	r3, r3, #16
}
 810149a:	4618      	mov	r0, r3
 810149c:	46bd      	mov	sp, r7
 810149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014a2:	4770      	bx	lr
 81014a4:	5c001000 	.word	0x5c001000

081014a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 81014a8:	b480      	push	{r7}
 81014aa:	b083      	sub	sp, #12
 81014ac:	af00      	add	r7, sp, #0
 81014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 81014b0:	4b06      	ldr	r3, [pc, #24]	; (81014cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81014b2:	685b      	ldr	r3, [r3, #4]
 81014b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81014b8:	4904      	ldr	r1, [pc, #16]	; (81014cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81014ba:	687b      	ldr	r3, [r7, #4]
 81014bc:	4313      	orrs	r3, r2
 81014be:	604b      	str	r3, [r1, #4]
}
 81014c0:	bf00      	nop
 81014c2:	370c      	adds	r7, #12
 81014c4:	46bd      	mov	sp, r7
 81014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ca:	4770      	bx	lr
 81014cc:	58000400 	.word	0x58000400

081014d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81014d0:	b480      	push	{r7}
 81014d2:	b083      	sub	sp, #12
 81014d4:	af00      	add	r7, sp, #0
 81014d6:	6078      	str	r0, [r7, #4]
 81014d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81014da:	687b      	ldr	r3, [r7, #4]
 81014dc:	689b      	ldr	r3, [r3, #8]
 81014de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81014e2:	683b      	ldr	r3, [r7, #0]
 81014e4:	431a      	orrs	r2, r3
 81014e6:	687b      	ldr	r3, [r7, #4]
 81014e8:	609a      	str	r2, [r3, #8]
}
 81014ea:	bf00      	nop
 81014ec:	370c      	adds	r7, #12
 81014ee:	46bd      	mov	sp, r7
 81014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014f4:	4770      	bx	lr

081014f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81014f6:	b480      	push	{r7}
 81014f8:	b083      	sub	sp, #12
 81014fa:	af00      	add	r7, sp, #0
 81014fc:	6078      	str	r0, [r7, #4]
 81014fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	689b      	ldr	r3, [r3, #8]
 8101504:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8101508:	683b      	ldr	r3, [r7, #0]
 810150a:	431a      	orrs	r2, r3
 810150c:	687b      	ldr	r3, [r7, #4]
 810150e:	609a      	str	r2, [r3, #8]
}
 8101510:	bf00      	nop
 8101512:	370c      	adds	r7, #12
 8101514:	46bd      	mov	sp, r7
 8101516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810151a:	4770      	bx	lr

0810151c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810151c:	b480      	push	{r7}
 810151e:	b083      	sub	sp, #12
 8101520:	af00      	add	r7, sp, #0
 8101522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101524:	687b      	ldr	r3, [r7, #4]
 8101526:	689b      	ldr	r3, [r3, #8]
 8101528:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 810152c:	4618      	mov	r0, r3
 810152e:	370c      	adds	r7, #12
 8101530:	46bd      	mov	sp, r7
 8101532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101536:	4770      	bx	lr

08101538 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101538:	b480      	push	{r7}
 810153a:	b087      	sub	sp, #28
 810153c:	af00      	add	r7, sp, #0
 810153e:	60f8      	str	r0, [r7, #12]
 8101540:	60b9      	str	r1, [r7, #8]
 8101542:	607a      	str	r2, [r7, #4]
 8101544:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101546:	68fb      	ldr	r3, [r7, #12]
 8101548:	3360      	adds	r3, #96	; 0x60
 810154a:	461a      	mov	r2, r3
 810154c:	68bb      	ldr	r3, [r7, #8]
 810154e:	009b      	lsls	r3, r3, #2
 8101550:	4413      	add	r3, r2
 8101552:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101554:	697b      	ldr	r3, [r7, #20]
 8101556:	681b      	ldr	r3, [r3, #0]
 8101558:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101562:	683b      	ldr	r3, [r7, #0]
 8101564:	430b      	orrs	r3, r1
 8101566:	431a      	orrs	r2, r3
 8101568:	697b      	ldr	r3, [r7, #20]
 810156a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 810156c:	bf00      	nop
 810156e:	371c      	adds	r7, #28
 8101570:	46bd      	mov	sp, r7
 8101572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101576:	4770      	bx	lr

08101578 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101578:	b480      	push	{r7}
 810157a:	b085      	sub	sp, #20
 810157c:	af00      	add	r7, sp, #0
 810157e:	60f8      	str	r0, [r7, #12]
 8101580:	60b9      	str	r1, [r7, #8]
 8101582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101584:	68fb      	ldr	r3, [r7, #12]
 8101586:	691b      	ldr	r3, [r3, #16]
 8101588:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 810158c:	68bb      	ldr	r3, [r7, #8]
 810158e:	f003 031f 	and.w	r3, r3, #31
 8101592:	6879      	ldr	r1, [r7, #4]
 8101594:	fa01 f303 	lsl.w	r3, r1, r3
 8101598:	431a      	orrs	r2, r3
 810159a:	68fb      	ldr	r3, [r7, #12]
 810159c:	611a      	str	r2, [r3, #16]
}
 810159e:	bf00      	nop
 81015a0:	3714      	adds	r7, #20
 81015a2:	46bd      	mov	sp, r7
 81015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015a8:	4770      	bx	lr

081015aa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81015aa:	b480      	push	{r7}
 81015ac:	b087      	sub	sp, #28
 81015ae:	af00      	add	r7, sp, #0
 81015b0:	60f8      	str	r0, [r7, #12]
 81015b2:	60b9      	str	r1, [r7, #8]
 81015b4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81015b6:	68fb      	ldr	r3, [r7, #12]
 81015b8:	3360      	adds	r3, #96	; 0x60
 81015ba:	461a      	mov	r2, r3
 81015bc:	68bb      	ldr	r3, [r7, #8]
 81015be:	009b      	lsls	r3, r3, #2
 81015c0:	4413      	add	r3, r2
 81015c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81015c4:	697b      	ldr	r3, [r7, #20]
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81015cc:	687b      	ldr	r3, [r7, #4]
 81015ce:	431a      	orrs	r2, r3
 81015d0:	697b      	ldr	r3, [r7, #20]
 81015d2:	601a      	str	r2, [r3, #0]
  }
}
 81015d4:	bf00      	nop
 81015d6:	371c      	adds	r7, #28
 81015d8:	46bd      	mov	sp, r7
 81015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015de:	4770      	bx	lr

081015e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81015e0:	b480      	push	{r7}
 81015e2:	b083      	sub	sp, #12
 81015e4:	af00      	add	r7, sp, #0
 81015e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81015e8:	687b      	ldr	r3, [r7, #4]
 81015ea:	68db      	ldr	r3, [r3, #12]
 81015ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 81015f0:	2b00      	cmp	r3, #0
 81015f2:	d101      	bne.n	81015f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81015f4:	2301      	movs	r3, #1
 81015f6:	e000      	b.n	81015fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81015f8:	2300      	movs	r3, #0
}
 81015fa:	4618      	mov	r0, r3
 81015fc:	370c      	adds	r7, #12
 81015fe:	46bd      	mov	sp, r7
 8101600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101604:	4770      	bx	lr

08101606 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8101606:	b480      	push	{r7}
 8101608:	b087      	sub	sp, #28
 810160a:	af00      	add	r7, sp, #0
 810160c:	60f8      	str	r0, [r7, #12]
 810160e:	60b9      	str	r1, [r7, #8]
 8101610:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8101612:	68fb      	ldr	r3, [r7, #12]
 8101614:	3330      	adds	r3, #48	; 0x30
 8101616:	461a      	mov	r2, r3
 8101618:	68bb      	ldr	r3, [r7, #8]
 810161a:	0a1b      	lsrs	r3, r3, #8
 810161c:	009b      	lsls	r3, r3, #2
 810161e:	f003 030c 	and.w	r3, r3, #12
 8101622:	4413      	add	r3, r2
 8101624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101626:	697b      	ldr	r3, [r7, #20]
 8101628:	681a      	ldr	r2, [r3, #0]
 810162a:	68bb      	ldr	r3, [r7, #8]
 810162c:	f003 031f 	and.w	r3, r3, #31
 8101630:	211f      	movs	r1, #31
 8101632:	fa01 f303 	lsl.w	r3, r1, r3
 8101636:	43db      	mvns	r3, r3
 8101638:	401a      	ands	r2, r3
 810163a:	687b      	ldr	r3, [r7, #4]
 810163c:	0e9b      	lsrs	r3, r3, #26
 810163e:	f003 011f 	and.w	r1, r3, #31
 8101642:	68bb      	ldr	r3, [r7, #8]
 8101644:	f003 031f 	and.w	r3, r3, #31
 8101648:	fa01 f303 	lsl.w	r3, r1, r3
 810164c:	431a      	orrs	r2, r3
 810164e:	697b      	ldr	r3, [r7, #20]
 8101650:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8101652:	bf00      	nop
 8101654:	371c      	adds	r7, #28
 8101656:	46bd      	mov	sp, r7
 8101658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810165c:	4770      	bx	lr

0810165e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 810165e:	b480      	push	{r7}
 8101660:	b083      	sub	sp, #12
 8101662:	af00      	add	r7, sp, #0
 8101664:	6078      	str	r0, [r7, #4]
 8101666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	68db      	ldr	r3, [r3, #12]
 810166c:	f023 0203 	bic.w	r2, r3, #3
 8101670:	683b      	ldr	r3, [r7, #0]
 8101672:	431a      	orrs	r2, r3
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	60da      	str	r2, [r3, #12]
}
 8101678:	bf00      	nop
 810167a:	370c      	adds	r7, #12
 810167c:	46bd      	mov	sp, r7
 810167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101682:	4770      	bx	lr

08101684 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101684:	b480      	push	{r7}
 8101686:	b087      	sub	sp, #28
 8101688:	af00      	add	r7, sp, #0
 810168a:	60f8      	str	r0, [r7, #12]
 810168c:	60b9      	str	r1, [r7, #8]
 810168e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8101690:	68fb      	ldr	r3, [r7, #12]
 8101692:	3314      	adds	r3, #20
 8101694:	461a      	mov	r2, r3
 8101696:	68bb      	ldr	r3, [r7, #8]
 8101698:	0e5b      	lsrs	r3, r3, #25
 810169a:	009b      	lsls	r3, r3, #2
 810169c:	f003 0304 	and.w	r3, r3, #4
 81016a0:	4413      	add	r3, r2
 81016a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81016a4:	697b      	ldr	r3, [r7, #20]
 81016a6:	681a      	ldr	r2, [r3, #0]
 81016a8:	68bb      	ldr	r3, [r7, #8]
 81016aa:	0d1b      	lsrs	r3, r3, #20
 81016ac:	f003 031f 	and.w	r3, r3, #31
 81016b0:	2107      	movs	r1, #7
 81016b2:	fa01 f303 	lsl.w	r3, r1, r3
 81016b6:	43db      	mvns	r3, r3
 81016b8:	401a      	ands	r2, r3
 81016ba:	68bb      	ldr	r3, [r7, #8]
 81016bc:	0d1b      	lsrs	r3, r3, #20
 81016be:	f003 031f 	and.w	r3, r3, #31
 81016c2:	6879      	ldr	r1, [r7, #4]
 81016c4:	fa01 f303 	lsl.w	r3, r1, r3
 81016c8:	431a      	orrs	r2, r3
 81016ca:	697b      	ldr	r3, [r7, #20]
 81016cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81016ce:	bf00      	nop
 81016d0:	371c      	adds	r7, #28
 81016d2:	46bd      	mov	sp, r7
 81016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d8:	4770      	bx	lr
	...

081016dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81016dc:	b480      	push	{r7}
 81016de:	b085      	sub	sp, #20
 81016e0:	af00      	add	r7, sp, #0
 81016e2:	60f8      	str	r0, [r7, #12]
 81016e4:	60b9      	str	r1, [r7, #8]
 81016e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81016e8:	68fb      	ldr	r3, [r7, #12]
 81016ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81016ee:	68bb      	ldr	r3, [r7, #8]
 81016f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81016f4:	43db      	mvns	r3, r3
 81016f6:	401a      	ands	r2, r3
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	f003 0318 	and.w	r3, r3, #24
 81016fe:	4908      	ldr	r1, [pc, #32]	; (8101720 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101700:	40d9      	lsrs	r1, r3
 8101702:	68bb      	ldr	r3, [r7, #8]
 8101704:	400b      	ands	r3, r1
 8101706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810170a:	431a      	orrs	r2, r3
 810170c:	68fb      	ldr	r3, [r7, #12]
 810170e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8101712:	bf00      	nop
 8101714:	3714      	adds	r7, #20
 8101716:	46bd      	mov	sp, r7
 8101718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810171c:	4770      	bx	lr
 810171e:	bf00      	nop
 8101720:	000fffff 	.word	0x000fffff

08101724 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101724:	b480      	push	{r7}
 8101726:	b083      	sub	sp, #12
 8101728:	af00      	add	r7, sp, #0
 810172a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 810172c:	687b      	ldr	r3, [r7, #4]
 810172e:	689b      	ldr	r3, [r3, #8]
 8101730:	f003 031f 	and.w	r3, r3, #31
}
 8101734:	4618      	mov	r0, r3
 8101736:	370c      	adds	r7, #12
 8101738:	46bd      	mov	sp, r7
 810173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810173e:	4770      	bx	lr

08101740 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101740:	b480      	push	{r7}
 8101742:	b083      	sub	sp, #12
 8101744:	af00      	add	r7, sp, #0
 8101746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101748:	687b      	ldr	r3, [r7, #4]
 810174a:	689b      	ldr	r3, [r3, #8]
 810174c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8101750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101754:	687a      	ldr	r2, [r7, #4]
 8101756:	6093      	str	r3, [r2, #8]
}
 8101758:	bf00      	nop
 810175a:	370c      	adds	r7, #12
 810175c:	46bd      	mov	sp, r7
 810175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101762:	4770      	bx	lr

08101764 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8101764:	b480      	push	{r7}
 8101766:	b083      	sub	sp, #12
 8101768:	af00      	add	r7, sp, #0
 810176a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	689b      	ldr	r3, [r3, #8]
 8101770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101778:	d101      	bne.n	810177e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810177a:	2301      	movs	r3, #1
 810177c:	e000      	b.n	8101780 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810177e:	2300      	movs	r3, #0
}
 8101780:	4618      	mov	r0, r3
 8101782:	370c      	adds	r7, #12
 8101784:	46bd      	mov	sp, r7
 8101786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178a:	4770      	bx	lr

0810178c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 810178c:	b480      	push	{r7}
 810178e:	b083      	sub	sp, #12
 8101790:	af00      	add	r7, sp, #0
 8101792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	689b      	ldr	r3, [r3, #8]
 8101798:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 810179c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81017a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81017a4:	687b      	ldr	r3, [r7, #4]
 81017a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81017a8:	bf00      	nop
 81017aa:	370c      	adds	r7, #12
 81017ac:	46bd      	mov	sp, r7
 81017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b2:	4770      	bx	lr

081017b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81017b4:	b480      	push	{r7}
 81017b6:	b083      	sub	sp, #12
 81017b8:	af00      	add	r7, sp, #0
 81017ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81017bc:	687b      	ldr	r3, [r7, #4]
 81017be:	689b      	ldr	r3, [r3, #8]
 81017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81017c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81017c8:	d101      	bne.n	81017ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81017ca:	2301      	movs	r3, #1
 81017cc:	e000      	b.n	81017d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81017ce:	2300      	movs	r3, #0
}
 81017d0:	4618      	mov	r0, r3
 81017d2:	370c      	adds	r7, #12
 81017d4:	46bd      	mov	sp, r7
 81017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017da:	4770      	bx	lr

081017dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81017dc:	b480      	push	{r7}
 81017de:	b083      	sub	sp, #12
 81017e0:	af00      	add	r7, sp, #0
 81017e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	689b      	ldr	r3, [r3, #8]
 81017e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81017ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81017f0:	f043 0201 	orr.w	r2, r3, #1
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81017f8:	bf00      	nop
 81017fa:	370c      	adds	r7, #12
 81017fc:	46bd      	mov	sp, r7
 81017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101802:	4770      	bx	lr

08101804 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8101804:	b480      	push	{r7}
 8101806:	b083      	sub	sp, #12
 8101808:	af00      	add	r7, sp, #0
 810180a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	689b      	ldr	r3, [r3, #8]
 8101810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101818:	f043 0202 	orr.w	r2, r3, #2
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8101820:	bf00      	nop
 8101822:	370c      	adds	r7, #12
 8101824:	46bd      	mov	sp, r7
 8101826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810182a:	4770      	bx	lr

0810182c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 810182c:	b480      	push	{r7}
 810182e:	b083      	sub	sp, #12
 8101830:	af00      	add	r7, sp, #0
 8101832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101834:	687b      	ldr	r3, [r7, #4]
 8101836:	689b      	ldr	r3, [r3, #8]
 8101838:	f003 0301 	and.w	r3, r3, #1
 810183c:	2b01      	cmp	r3, #1
 810183e:	d101      	bne.n	8101844 <LL_ADC_IsEnabled+0x18>
 8101840:	2301      	movs	r3, #1
 8101842:	e000      	b.n	8101846 <LL_ADC_IsEnabled+0x1a>
 8101844:	2300      	movs	r3, #0
}
 8101846:	4618      	mov	r0, r3
 8101848:	370c      	adds	r7, #12
 810184a:	46bd      	mov	sp, r7
 810184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101850:	4770      	bx	lr

08101852 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8101852:	b480      	push	{r7}
 8101854:	b083      	sub	sp, #12
 8101856:	af00      	add	r7, sp, #0
 8101858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	689b      	ldr	r3, [r3, #8]
 810185e:	f003 0302 	and.w	r3, r3, #2
 8101862:	2b02      	cmp	r3, #2
 8101864:	d101      	bne.n	810186a <LL_ADC_IsDisableOngoing+0x18>
 8101866:	2301      	movs	r3, #1
 8101868:	e000      	b.n	810186c <LL_ADC_IsDisableOngoing+0x1a>
 810186a:	2300      	movs	r3, #0
}
 810186c:	4618      	mov	r0, r3
 810186e:	370c      	adds	r7, #12
 8101870:	46bd      	mov	sp, r7
 8101872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101876:	4770      	bx	lr

08101878 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8101878:	b480      	push	{r7}
 810187a:	b083      	sub	sp, #12
 810187c:	af00      	add	r7, sp, #0
 810187e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101880:	687b      	ldr	r3, [r7, #4]
 8101882:	689b      	ldr	r3, [r3, #8]
 8101884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810188c:	f043 0204 	orr.w	r2, r3, #4
 8101890:	687b      	ldr	r3, [r7, #4]
 8101892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8101894:	bf00      	nop
 8101896:	370c      	adds	r7, #12
 8101898:	46bd      	mov	sp, r7
 810189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810189e:	4770      	bx	lr

081018a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81018a0:	b480      	push	{r7}
 81018a2:	b083      	sub	sp, #12
 81018a4:	af00      	add	r7, sp, #0
 81018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81018a8:	687b      	ldr	r3, [r7, #4]
 81018aa:	689b      	ldr	r3, [r3, #8]
 81018ac:	f003 0304 	and.w	r3, r3, #4
 81018b0:	2b04      	cmp	r3, #4
 81018b2:	d101      	bne.n	81018b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 81018b4:	2301      	movs	r3, #1
 81018b6:	e000      	b.n	81018ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 81018b8:	2300      	movs	r3, #0
}
 81018ba:	4618      	mov	r0, r3
 81018bc:	370c      	adds	r7, #12
 81018be:	46bd      	mov	sp, r7
 81018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c4:	4770      	bx	lr

081018c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81018c6:	b480      	push	{r7}
 81018c8:	b083      	sub	sp, #12
 81018ca:	af00      	add	r7, sp, #0
 81018cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81018ce:	687b      	ldr	r3, [r7, #4]
 81018d0:	689b      	ldr	r3, [r3, #8]
 81018d2:	f003 0308 	and.w	r3, r3, #8
 81018d6:	2b08      	cmp	r3, #8
 81018d8:	d101      	bne.n	81018de <LL_ADC_INJ_IsConversionOngoing+0x18>
 81018da:	2301      	movs	r3, #1
 81018dc:	e000      	b.n	81018e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81018de:	2300      	movs	r3, #0
}
 81018e0:	4618      	mov	r0, r3
 81018e2:	370c      	adds	r7, #12
 81018e4:	46bd      	mov	sp, r7
 81018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ea:	4770      	bx	lr

081018ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81018ec:	b590      	push	{r4, r7, lr}
 81018ee:	b089      	sub	sp, #36	; 0x24
 81018f0:	af00      	add	r7, sp, #0
 81018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81018f4:	2300      	movs	r3, #0
 81018f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81018f8:	2300      	movs	r3, #0
 81018fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	2b00      	cmp	r3, #0
 8101900:	d101      	bne.n	8101906 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8101902:	2301      	movs	r3, #1
 8101904:	e18e      	b.n	8101c24 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	68db      	ldr	r3, [r3, #12]
 810190a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101910:	2b00      	cmp	r3, #0
 8101912:	d109      	bne.n	8101928 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8101914:	6878      	ldr	r0, [r7, #4]
 8101916:	f014 fd8f 	bl	8116438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	2200      	movs	r2, #0
 810191e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101920:	687b      	ldr	r3, [r7, #4]
 8101922:	2200      	movs	r2, #0
 8101924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	681b      	ldr	r3, [r3, #0]
 810192c:	4618      	mov	r0, r3
 810192e:	f7ff ff19 	bl	8101764 <LL_ADC_IsDeepPowerDownEnabled>
 8101932:	4603      	mov	r3, r0
 8101934:	2b00      	cmp	r3, #0
 8101936:	d004      	beq.n	8101942 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	681b      	ldr	r3, [r3, #0]
 810193c:	4618      	mov	r0, r3
 810193e:	f7ff feff 	bl	8101740 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	681b      	ldr	r3, [r3, #0]
 8101946:	4618      	mov	r0, r3
 8101948:	f7ff ff34 	bl	81017b4 <LL_ADC_IsInternalRegulatorEnabled>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d114      	bne.n	810197c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	681b      	ldr	r3, [r3, #0]
 8101956:	4618      	mov	r0, r3
 8101958:	f7ff ff18 	bl	810178c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810195c:	4b9b      	ldr	r3, [pc, #620]	; (8101bcc <HAL_ADC_Init+0x2e0>)
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	099b      	lsrs	r3, r3, #6
 8101962:	4a9b      	ldr	r2, [pc, #620]	; (8101bd0 <HAL_ADC_Init+0x2e4>)
 8101964:	fba2 2303 	umull	r2, r3, r2, r3
 8101968:	099b      	lsrs	r3, r3, #6
 810196a:	3301      	adds	r3, #1
 810196c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810196e:	e002      	b.n	8101976 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101970:	68bb      	ldr	r3, [r7, #8]
 8101972:	3b01      	subs	r3, #1
 8101974:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101976:	68bb      	ldr	r3, [r7, #8]
 8101978:	2b00      	cmp	r3, #0
 810197a:	d1f9      	bne.n	8101970 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	4618      	mov	r0, r3
 8101982:	f7ff ff17 	bl	81017b4 <LL_ADC_IsInternalRegulatorEnabled>
 8101986:	4603      	mov	r3, r0
 8101988:	2b00      	cmp	r3, #0
 810198a:	d10d      	bne.n	81019a8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101990:	f043 0210 	orr.w	r2, r3, #16
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101998:	687b      	ldr	r3, [r7, #4]
 810199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810199c:	f043 0201 	orr.w	r2, r3, #1
 81019a0:	687b      	ldr	r3, [r7, #4]
 81019a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 81019a4:	2301      	movs	r3, #1
 81019a6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81019a8:	687b      	ldr	r3, [r7, #4]
 81019aa:	681b      	ldr	r3, [r3, #0]
 81019ac:	4618      	mov	r0, r3
 81019ae:	f7ff ff77 	bl	81018a0 <LL_ADC_REG_IsConversionOngoing>
 81019b2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81019b8:	f003 0310 	and.w	r3, r3, #16
 81019bc:	2b00      	cmp	r3, #0
 81019be:	f040 8128 	bne.w	8101c12 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81019c2:	697b      	ldr	r3, [r7, #20]
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	f040 8124 	bne.w	8101c12 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81019ce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81019d2:	f043 0202 	orr.w	r2, r3, #2
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81019da:	687b      	ldr	r3, [r7, #4]
 81019dc:	681b      	ldr	r3, [r3, #0]
 81019de:	4618      	mov	r0, r3
 81019e0:	f7ff ff24 	bl	810182c <LL_ADC_IsEnabled>
 81019e4:	4603      	mov	r3, r0
 81019e6:	2b00      	cmp	r3, #0
 81019e8:	d136      	bne.n	8101a58 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81019ea:	687b      	ldr	r3, [r7, #4]
 81019ec:	681b      	ldr	r3, [r3, #0]
 81019ee:	4a79      	ldr	r2, [pc, #484]	; (8101bd4 <HAL_ADC_Init+0x2e8>)
 81019f0:	4293      	cmp	r3, r2
 81019f2:	d004      	beq.n	81019fe <HAL_ADC_Init+0x112>
 81019f4:	687b      	ldr	r3, [r7, #4]
 81019f6:	681b      	ldr	r3, [r3, #0]
 81019f8:	4a77      	ldr	r2, [pc, #476]	; (8101bd8 <HAL_ADC_Init+0x2ec>)
 81019fa:	4293      	cmp	r3, r2
 81019fc:	d10e      	bne.n	8101a1c <HAL_ADC_Init+0x130>
 81019fe:	4875      	ldr	r0, [pc, #468]	; (8101bd4 <HAL_ADC_Init+0x2e8>)
 8101a00:	f7ff ff14 	bl	810182c <LL_ADC_IsEnabled>
 8101a04:	4604      	mov	r4, r0
 8101a06:	4874      	ldr	r0, [pc, #464]	; (8101bd8 <HAL_ADC_Init+0x2ec>)
 8101a08:	f7ff ff10 	bl	810182c <LL_ADC_IsEnabled>
 8101a0c:	4603      	mov	r3, r0
 8101a0e:	4323      	orrs	r3, r4
 8101a10:	2b00      	cmp	r3, #0
 8101a12:	bf0c      	ite	eq
 8101a14:	2301      	moveq	r3, #1
 8101a16:	2300      	movne	r3, #0
 8101a18:	b2db      	uxtb	r3, r3
 8101a1a:	e008      	b.n	8101a2e <HAL_ADC_Init+0x142>
 8101a1c:	486f      	ldr	r0, [pc, #444]	; (8101bdc <HAL_ADC_Init+0x2f0>)
 8101a1e:	f7ff ff05 	bl	810182c <LL_ADC_IsEnabled>
 8101a22:	4603      	mov	r3, r0
 8101a24:	2b00      	cmp	r3, #0
 8101a26:	bf0c      	ite	eq
 8101a28:	2301      	moveq	r3, #1
 8101a2a:	2300      	movne	r3, #0
 8101a2c:	b2db      	uxtb	r3, r3
 8101a2e:	2b00      	cmp	r3, #0
 8101a30:	d012      	beq.n	8101a58 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	4a67      	ldr	r2, [pc, #412]	; (8101bd4 <HAL_ADC_Init+0x2e8>)
 8101a38:	4293      	cmp	r3, r2
 8101a3a:	d004      	beq.n	8101a46 <HAL_ADC_Init+0x15a>
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	681b      	ldr	r3, [r3, #0]
 8101a40:	4a65      	ldr	r2, [pc, #404]	; (8101bd8 <HAL_ADC_Init+0x2ec>)
 8101a42:	4293      	cmp	r3, r2
 8101a44:	d101      	bne.n	8101a4a <HAL_ADC_Init+0x15e>
 8101a46:	4a66      	ldr	r2, [pc, #408]	; (8101be0 <HAL_ADC_Init+0x2f4>)
 8101a48:	e000      	b.n	8101a4c <HAL_ADC_Init+0x160>
 8101a4a:	4a66      	ldr	r2, [pc, #408]	; (8101be4 <HAL_ADC_Init+0x2f8>)
 8101a4c:	687b      	ldr	r3, [r7, #4]
 8101a4e:	685b      	ldr	r3, [r3, #4]
 8101a50:	4619      	mov	r1, r3
 8101a52:	4610      	mov	r0, r2
 8101a54:	f7ff fd3c 	bl	81014d0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101a58:	f7ff fd1a 	bl	8101490 <HAL_GetREVID>
 8101a5c:	4603      	mov	r3, r0
 8101a5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8101a62:	4293      	cmp	r3, r2
 8101a64:	d914      	bls.n	8101a90 <HAL_ADC_Init+0x1a4>
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	689b      	ldr	r3, [r3, #8]
 8101a6a:	2b10      	cmp	r3, #16
 8101a6c:	d110      	bne.n	8101a90 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	7d5b      	ldrb	r3, [r3, #21]
 8101a72:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101a78:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101a7e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	7f1b      	ldrb	r3, [r3, #28]
 8101a84:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101a86:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101a88:	f043 030c 	orr.w	r3, r3, #12
 8101a8c:	61bb      	str	r3, [r7, #24]
 8101a8e:	e00d      	b.n	8101aac <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	7d5b      	ldrb	r3, [r3, #21]
 8101a94:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101a96:	687b      	ldr	r3, [r7, #4]
 8101a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101a9a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101aa0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	7f1b      	ldrb	r3, [r3, #28]
 8101aa6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101aa8:	4313      	orrs	r3, r2
 8101aaa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	7f1b      	ldrb	r3, [r3, #28]
 8101ab0:	2b01      	cmp	r3, #1
 8101ab2:	d106      	bne.n	8101ac2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	6a1b      	ldr	r3, [r3, #32]
 8101ab8:	3b01      	subs	r3, #1
 8101aba:	045b      	lsls	r3, r3, #17
 8101abc:	69ba      	ldr	r2, [r7, #24]
 8101abe:	4313      	orrs	r3, r2
 8101ac0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101ac6:	2b00      	cmp	r3, #0
 8101ac8:	d009      	beq.n	8101ade <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101ace:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101ad6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101ad8:	69ba      	ldr	r2, [r7, #24]
 8101ada:	4313      	orrs	r3, r2
 8101adc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	68da      	ldr	r2, [r3, #12]
 8101ae4:	4b40      	ldr	r3, [pc, #256]	; (8101be8 <HAL_ADC_Init+0x2fc>)
 8101ae6:	4013      	ands	r3, r2
 8101ae8:	687a      	ldr	r2, [r7, #4]
 8101aea:	6812      	ldr	r2, [r2, #0]
 8101aec:	69b9      	ldr	r1, [r7, #24]
 8101aee:	430b      	orrs	r3, r1
 8101af0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	681b      	ldr	r3, [r3, #0]
 8101af6:	4618      	mov	r0, r3
 8101af8:	f7ff fed2 	bl	81018a0 <LL_ADC_REG_IsConversionOngoing>
 8101afc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	4618      	mov	r0, r3
 8101b04:	f7ff fedf 	bl	81018c6 <LL_ADC_INJ_IsConversionOngoing>
 8101b08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101b0a:	693b      	ldr	r3, [r7, #16]
 8101b0c:	2b00      	cmp	r3, #0
 8101b0e:	d14c      	bne.n	8101baa <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101b10:	68fb      	ldr	r3, [r7, #12]
 8101b12:	2b00      	cmp	r3, #0
 8101b14:	d149      	bne.n	8101baa <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	7d1b      	ldrb	r3, [r3, #20]
 8101b1a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8101b20:	4313      	orrs	r3, r2
 8101b22:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	681b      	ldr	r3, [r3, #0]
 8101b28:	68db      	ldr	r3, [r3, #12]
 8101b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8101b2e:	f023 0303 	bic.w	r3, r3, #3
 8101b32:	687a      	ldr	r2, [r7, #4]
 8101b34:	6812      	ldr	r2, [r2, #0]
 8101b36:	69b9      	ldr	r1, [r7, #24]
 8101b38:	430b      	orrs	r3, r1
 8101b3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101b3c:	687b      	ldr	r3, [r7, #4]
 8101b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101b42:	2b01      	cmp	r3, #1
 8101b44:	d11b      	bne.n	8101b7e <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101b4a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	691a      	ldr	r2, [r3, #16]
 8101b52:	4b26      	ldr	r3, [pc, #152]	; (8101bec <HAL_ADC_Init+0x300>)
 8101b54:	4013      	ands	r3, r2
 8101b56:	687a      	ldr	r2, [r7, #4]
 8101b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8101b5a:	3a01      	subs	r2, #1
 8101b5c:	0411      	lsls	r1, r2, #16
 8101b5e:	687a      	ldr	r2, [r7, #4]
 8101b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8101b62:	4311      	orrs	r1, r2
 8101b64:	687a      	ldr	r2, [r7, #4]
 8101b66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101b68:	4311      	orrs	r1, r2
 8101b6a:	687a      	ldr	r2, [r7, #4]
 8101b6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8101b6e:	430a      	orrs	r2, r1
 8101b70:	431a      	orrs	r2, r3
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	681b      	ldr	r3, [r3, #0]
 8101b76:	f042 0201 	orr.w	r2, r2, #1
 8101b7a:	611a      	str	r2, [r3, #16]
 8101b7c:	e007      	b.n	8101b8e <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101b7e:	687b      	ldr	r3, [r7, #4]
 8101b80:	681b      	ldr	r3, [r3, #0]
 8101b82:	691a      	ldr	r2, [r3, #16]
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	681b      	ldr	r3, [r3, #0]
 8101b88:	f022 0201 	bic.w	r2, r2, #1
 8101b8c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	691b      	ldr	r3, [r3, #16]
 8101b94:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	681b      	ldr	r3, [r3, #0]
 8101ba0:	430a      	orrs	r2, r1
 8101ba2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101ba4:	6878      	ldr	r0, [r7, #4]
 8101ba6:	f000 fdf1 	bl	810278c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	68db      	ldr	r3, [r3, #12]
 8101bae:	2b01      	cmp	r3, #1
 8101bb0:	d11e      	bne.n	8101bf0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	681b      	ldr	r3, [r3, #0]
 8101bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101bb8:	f023 010f 	bic.w	r1, r3, #15
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	699b      	ldr	r3, [r3, #24]
 8101bc0:	1e5a      	subs	r2, r3, #1
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	681b      	ldr	r3, [r3, #0]
 8101bc6:	430a      	orrs	r2, r1
 8101bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8101bca:	e019      	b.n	8101c00 <HAL_ADC_Init+0x314>
 8101bcc:	10000000 	.word	0x10000000
 8101bd0:	053e2d63 	.word	0x053e2d63
 8101bd4:	40022000 	.word	0x40022000
 8101bd8:	40022100 	.word	0x40022100
 8101bdc:	58026000 	.word	0x58026000
 8101be0:	40022300 	.word	0x40022300
 8101be4:	58026300 	.word	0x58026300
 8101be8:	fff0c003 	.word	0xfff0c003
 8101bec:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	681b      	ldr	r3, [r3, #0]
 8101bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	681b      	ldr	r3, [r3, #0]
 8101bfa:	f022 020f 	bic.w	r2, r2, #15
 8101bfe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8101c00:	687b      	ldr	r3, [r7, #4]
 8101c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c04:	f023 0303 	bic.w	r3, r3, #3
 8101c08:	f043 0201 	orr.w	r2, r3, #1
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	655a      	str	r2, [r3, #84]	; 0x54
 8101c10:	e007      	b.n	8101c22 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c16:	f043 0210 	orr.w	r2, r3, #16
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8101c1e:	2301      	movs	r3, #1
 8101c20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8101c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8101c24:	4618      	mov	r0, r3
 8101c26:	3724      	adds	r7, #36	; 0x24
 8101c28:	46bd      	mov	sp, r7
 8101c2a:	bd90      	pop	{r4, r7, pc}

08101c2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8101c2c:	b580      	push	{r7, lr}
 8101c2e:	b086      	sub	sp, #24
 8101c30:	af00      	add	r7, sp, #0
 8101c32:	60f8      	str	r0, [r7, #12]
 8101c34:	60b9      	str	r1, [r7, #8]
 8101c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101c38:	68fb      	ldr	r3, [r7, #12]
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	4a56      	ldr	r2, [pc, #344]	; (8101d98 <HAL_ADC_Start_DMA+0x16c>)
 8101c3e:	4293      	cmp	r3, r2
 8101c40:	d004      	beq.n	8101c4c <HAL_ADC_Start_DMA+0x20>
 8101c42:	68fb      	ldr	r3, [r7, #12]
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	4a55      	ldr	r2, [pc, #340]	; (8101d9c <HAL_ADC_Start_DMA+0x170>)
 8101c48:	4293      	cmp	r3, r2
 8101c4a:	d101      	bne.n	8101c50 <HAL_ADC_Start_DMA+0x24>
 8101c4c:	4b54      	ldr	r3, [pc, #336]	; (8101da0 <HAL_ADC_Start_DMA+0x174>)
 8101c4e:	e000      	b.n	8101c52 <HAL_ADC_Start_DMA+0x26>
 8101c50:	4b54      	ldr	r3, [pc, #336]	; (8101da4 <HAL_ADC_Start_DMA+0x178>)
 8101c52:	4618      	mov	r0, r3
 8101c54:	f7ff fd66 	bl	8101724 <LL_ADC_GetMultimode>
 8101c58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101c5a:	68fb      	ldr	r3, [r7, #12]
 8101c5c:	681b      	ldr	r3, [r3, #0]
 8101c5e:	4618      	mov	r0, r3
 8101c60:	f7ff fe1e 	bl	81018a0 <LL_ADC_REG_IsConversionOngoing>
 8101c64:	4603      	mov	r3, r0
 8101c66:	2b00      	cmp	r3, #0
 8101c68:	f040 808e 	bne.w	8101d88 <HAL_ADC_Start_DMA+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8101c6c:	68fb      	ldr	r3, [r7, #12]
 8101c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101c72:	2b01      	cmp	r3, #1
 8101c74:	d101      	bne.n	8101c7a <HAL_ADC_Start_DMA+0x4e>
 8101c76:	2302      	movs	r3, #2
 8101c78:	e089      	b.n	8101d8e <HAL_ADC_Start_DMA+0x162>
 8101c7a:	68fb      	ldr	r3, [r7, #12]
 8101c7c:	2201      	movs	r2, #1
 8101c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101c82:	693b      	ldr	r3, [r7, #16]
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	d005      	beq.n	8101c94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8101c88:	693b      	ldr	r3, [r7, #16]
 8101c8a:	2b05      	cmp	r3, #5
 8101c8c:	d002      	beq.n	8101c94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8101c8e:	693b      	ldr	r3, [r7, #16]
 8101c90:	2b09      	cmp	r3, #9
 8101c92:	d172      	bne.n	8101d7a <HAL_ADC_Start_DMA+0x14e>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8101c94:	68f8      	ldr	r0, [r7, #12]
 8101c96:	f000 fbfb 	bl	8102490 <ADC_Enable>
 8101c9a:	4603      	mov	r3, r0
 8101c9c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8101c9e:	7dfb      	ldrb	r3, [r7, #23]
 8101ca0:	2b00      	cmp	r3, #0
 8101ca2:	d165      	bne.n	8101d70 <HAL_ADC_Start_DMA+0x144>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8101ca4:	68fb      	ldr	r3, [r7, #12]
 8101ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101ca8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101cac:	f023 0301 	bic.w	r3, r3, #1
 8101cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101cb4:	68fb      	ldr	r3, [r7, #12]
 8101cb6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101cb8:	68fb      	ldr	r3, [r7, #12]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	4a37      	ldr	r2, [pc, #220]	; (8101d9c <HAL_ADC_Start_DMA+0x170>)
 8101cbe:	4293      	cmp	r3, r2
 8101cc0:	d002      	beq.n	8101cc8 <HAL_ADC_Start_DMA+0x9c>
 8101cc2:	68fb      	ldr	r3, [r7, #12]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	e000      	b.n	8101cca <HAL_ADC_Start_DMA+0x9e>
 8101cc8:	4b33      	ldr	r3, [pc, #204]	; (8101d98 <HAL_ADC_Start_DMA+0x16c>)
 8101cca:	68fa      	ldr	r2, [r7, #12]
 8101ccc:	6812      	ldr	r2, [r2, #0]
 8101cce:	4293      	cmp	r3, r2
 8101cd0:	d002      	beq.n	8101cd8 <HAL_ADC_Start_DMA+0xac>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101cd2:	693b      	ldr	r3, [r7, #16]
 8101cd4:	2b00      	cmp	r3, #0
 8101cd6:	d105      	bne.n	8101ce4 <HAL_ADC_Start_DMA+0xb8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8101cd8:	68fb      	ldr	r3, [r7, #12]
 8101cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101cdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8101ce0:	68fb      	ldr	r3, [r7, #12]
 8101ce2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8101ce4:	68fb      	ldr	r3, [r7, #12]
 8101ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101cec:	2b00      	cmp	r3, #0
 8101cee:	d006      	beq.n	8101cfe <HAL_ADC_Start_DMA+0xd2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8101cf0:	68fb      	ldr	r3, [r7, #12]
 8101cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101cf4:	f023 0206 	bic.w	r2, r3, #6
 8101cf8:	68fb      	ldr	r3, [r7, #12]
 8101cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8101cfc:	e002      	b.n	8101d04 <HAL_ADC_Start_DMA+0xd8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8101cfe:	68fb      	ldr	r3, [r7, #12]
 8101d00:	2200      	movs	r2, #0
 8101d02:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8101d04:	68fb      	ldr	r3, [r7, #12]
 8101d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101d08:	4a27      	ldr	r2, [pc, #156]	; (8101da8 <HAL_ADC_Start_DMA+0x17c>)
 8101d0a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8101d0c:	68fb      	ldr	r3, [r7, #12]
 8101d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101d10:	4a26      	ldr	r2, [pc, #152]	; (8101dac <HAL_ADC_Start_DMA+0x180>)
 8101d12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8101d14:	68fb      	ldr	r3, [r7, #12]
 8101d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101d18:	4a25      	ldr	r2, [pc, #148]	; (8101db0 <HAL_ADC_Start_DMA+0x184>)
 8101d1a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8101d1c:	68fb      	ldr	r3, [r7, #12]
 8101d1e:	681b      	ldr	r3, [r3, #0]
 8101d20:	221c      	movs	r2, #28
 8101d22:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8101d24:	68fb      	ldr	r3, [r7, #12]
 8101d26:	2200      	movs	r2, #0
 8101d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8101d2c:	68fb      	ldr	r3, [r7, #12]
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	685a      	ldr	r2, [r3, #4]
 8101d32:	68fb      	ldr	r3, [r7, #12]
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	f042 0210 	orr.w	r2, r2, #16
 8101d3a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8101d3c:	68fb      	ldr	r3, [r7, #12]
 8101d3e:	681a      	ldr	r2, [r3, #0]
 8101d40:	68fb      	ldr	r3, [r7, #12]
 8101d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d44:	4619      	mov	r1, r3
 8101d46:	4610      	mov	r0, r2
 8101d48:	f7ff fc89 	bl	810165e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8101d4c:	68fb      	ldr	r3, [r7, #12]
 8101d4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8101d50:	68fb      	ldr	r3, [r7, #12]
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	3340      	adds	r3, #64	; 0x40
 8101d56:	4619      	mov	r1, r3
 8101d58:	68ba      	ldr	r2, [r7, #8]
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	f001 fc0e 	bl	810357c <HAL_DMA_Start_IT>
 8101d60:	4603      	mov	r3, r0
 8101d62:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8101d64:	68fb      	ldr	r3, [r7, #12]
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	4618      	mov	r0, r3
 8101d6a:	f7ff fd85 	bl	8101878 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8101d6e:	e00d      	b.n	8101d8c <HAL_ADC_Start_DMA+0x160>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8101d70:	68fb      	ldr	r3, [r7, #12]
 8101d72:	2200      	movs	r2, #0
 8101d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8101d78:	e008      	b.n	8101d8c <HAL_ADC_Start_DMA+0x160>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8101d7a:	2301      	movs	r3, #1
 8101d7c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8101d7e:	68fb      	ldr	r3, [r7, #12]
 8101d80:	2200      	movs	r2, #0
 8101d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8101d86:	e001      	b.n	8101d8c <HAL_ADC_Start_DMA+0x160>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8101d88:	2302      	movs	r3, #2
 8101d8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8101d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8101d8e:	4618      	mov	r0, r3
 8101d90:	3718      	adds	r7, #24
 8101d92:	46bd      	mov	sp, r7
 8101d94:	bd80      	pop	{r7, pc}
 8101d96:	bf00      	nop
 8101d98:	40022000 	.word	0x40022000
 8101d9c:	40022100 	.word	0x40022100
 8101da0:	40022300 	.word	0x40022300
 8101da4:	58026300 	.word	0x58026300
 8101da8:	08102663 	.word	0x08102663
 8101dac:	0810273b 	.word	0x0810273b
 8101db0:	08102757 	.word	0x08102757

08101db4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8101db4:	b480      	push	{r7}
 8101db6:	b083      	sub	sp, #12
 8101db8:	af00      	add	r7, sp, #0
 8101dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8101dbc:	bf00      	nop
 8101dbe:	370c      	adds	r7, #12
 8101dc0:	46bd      	mov	sp, r7
 8101dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dc6:	4770      	bx	lr

08101dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8101dc8:	b480      	push	{r7}
 8101dca:	b083      	sub	sp, #12
 8101dcc:	af00      	add	r7, sp, #0
 8101dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8101dd0:	bf00      	nop
 8101dd2:	370c      	adds	r7, #12
 8101dd4:	46bd      	mov	sp, r7
 8101dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dda:	4770      	bx	lr

08101ddc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8101ddc:	b480      	push	{r7}
 8101dde:	b083      	sub	sp, #12
 8101de0:	af00      	add	r7, sp, #0
 8101de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8101de4:	bf00      	nop
 8101de6:	370c      	adds	r7, #12
 8101de8:	46bd      	mov	sp, r7
 8101dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dee:	4770      	bx	lr

08101df0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8101df0:	b590      	push	{r4, r7, lr}
 8101df2:	b0a1      	sub	sp, #132	; 0x84
 8101df4:	af00      	add	r7, sp, #0
 8101df6:	6078      	str	r0, [r7, #4]
 8101df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101dfa:	2300      	movs	r3, #0
 8101dfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8101e00:	2300      	movs	r3, #0
 8101e02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8101e04:	683b      	ldr	r3, [r7, #0]
 8101e06:	68db      	ldr	r3, [r3, #12]
 8101e08:	4a9d      	ldr	r2, [pc, #628]	; (8102080 <HAL_ADC_ConfigChannel+0x290>)
 8101e0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101e12:	2b01      	cmp	r3, #1
 8101e14:	d101      	bne.n	8101e1a <HAL_ADC_ConfigChannel+0x2a>
 8101e16:	2302      	movs	r3, #2
 8101e18:	e321      	b.n	810245e <HAL_ADC_ConfigChannel+0x66e>
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	2201      	movs	r2, #1
 8101e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	681b      	ldr	r3, [r3, #0]
 8101e26:	4618      	mov	r0, r3
 8101e28:	f7ff fd3a 	bl	81018a0 <LL_ADC_REG_IsConversionOngoing>
 8101e2c:	4603      	mov	r3, r0
 8101e2e:	2b00      	cmp	r3, #0
 8101e30:	f040 8306 	bne.w	8102440 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8101e34:	683b      	ldr	r3, [r7, #0]
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e3c:	2b00      	cmp	r3, #0
 8101e3e:	d108      	bne.n	8101e52 <HAL_ADC_ConfigChannel+0x62>
 8101e40:	683b      	ldr	r3, [r7, #0]
 8101e42:	681b      	ldr	r3, [r3, #0]
 8101e44:	0e9b      	lsrs	r3, r3, #26
 8101e46:	f003 031f 	and.w	r3, r3, #31
 8101e4a:	2201      	movs	r2, #1
 8101e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8101e50:	e016      	b.n	8101e80 <HAL_ADC_ConfigChannel+0x90>
 8101e52:	683b      	ldr	r3, [r7, #0]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101e5a:	fa93 f3a3 	rbit	r3, r3
 8101e5e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8101e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101e62:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8101e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d101      	bne.n	8101e6e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8101e6a:	2320      	movs	r3, #32
 8101e6c:	e003      	b.n	8101e76 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8101e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101e70:	fab3 f383 	clz	r3, r3
 8101e74:	b2db      	uxtb	r3, r3
 8101e76:	f003 031f 	and.w	r3, r3, #31
 8101e7a:	2201      	movs	r2, #1
 8101e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8101e80:	687a      	ldr	r2, [r7, #4]
 8101e82:	6812      	ldr	r2, [r2, #0]
 8101e84:	69d1      	ldr	r1, [r2, #28]
 8101e86:	687a      	ldr	r2, [r7, #4]
 8101e88:	6812      	ldr	r2, [r2, #0]
 8101e8a:	430b      	orrs	r3, r1
 8101e8c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	6818      	ldr	r0, [r3, #0]
 8101e92:	683b      	ldr	r3, [r7, #0]
 8101e94:	6859      	ldr	r1, [r3, #4]
 8101e96:	683b      	ldr	r3, [r7, #0]
 8101e98:	681b      	ldr	r3, [r3, #0]
 8101e9a:	461a      	mov	r2, r3
 8101e9c:	f7ff fbb3 	bl	8101606 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	681b      	ldr	r3, [r3, #0]
 8101ea4:	4618      	mov	r0, r3
 8101ea6:	f7ff fcfb 	bl	81018a0 <LL_ADC_REG_IsConversionOngoing>
 8101eaa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	4618      	mov	r0, r3
 8101eb2:	f7ff fd08 	bl	81018c6 <LL_ADC_INJ_IsConversionOngoing>
 8101eb6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101eba:	2b00      	cmp	r3, #0
 8101ebc:	f040 80b3 	bne.w	8102026 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	f040 80af 	bne.w	8102026 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	6818      	ldr	r0, [r3, #0]
 8101ecc:	683b      	ldr	r3, [r7, #0]
 8101ece:	6819      	ldr	r1, [r3, #0]
 8101ed0:	683b      	ldr	r3, [r7, #0]
 8101ed2:	689b      	ldr	r3, [r3, #8]
 8101ed4:	461a      	mov	r2, r3
 8101ed6:	f7ff fbd5 	bl	8101684 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8101eda:	4b6a      	ldr	r3, [pc, #424]	; (8102084 <HAL_ADC_ConfigChannel+0x294>)
 8101edc:	681b      	ldr	r3, [r3, #0]
 8101ede:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8101ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101ee6:	d10b      	bne.n	8101f00 <HAL_ADC_ConfigChannel+0x110>
 8101ee8:	683b      	ldr	r3, [r7, #0]
 8101eea:	695a      	ldr	r2, [r3, #20]
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	68db      	ldr	r3, [r3, #12]
 8101ef2:	089b      	lsrs	r3, r3, #2
 8101ef4:	f003 0307 	and.w	r3, r3, #7
 8101ef8:	005b      	lsls	r3, r3, #1
 8101efa:	fa02 f303 	lsl.w	r3, r2, r3
 8101efe:	e01d      	b.n	8101f3c <HAL_ADC_ConfigChannel+0x14c>
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	68db      	ldr	r3, [r3, #12]
 8101f06:	f003 0310 	and.w	r3, r3, #16
 8101f0a:	2b00      	cmp	r3, #0
 8101f0c:	d10b      	bne.n	8101f26 <HAL_ADC_ConfigChannel+0x136>
 8101f0e:	683b      	ldr	r3, [r7, #0]
 8101f10:	695a      	ldr	r2, [r3, #20]
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	68db      	ldr	r3, [r3, #12]
 8101f18:	089b      	lsrs	r3, r3, #2
 8101f1a:	f003 0307 	and.w	r3, r3, #7
 8101f1e:	005b      	lsls	r3, r3, #1
 8101f20:	fa02 f303 	lsl.w	r3, r2, r3
 8101f24:	e00a      	b.n	8101f3c <HAL_ADC_ConfigChannel+0x14c>
 8101f26:	683b      	ldr	r3, [r7, #0]
 8101f28:	695a      	ldr	r2, [r3, #20]
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	68db      	ldr	r3, [r3, #12]
 8101f30:	089b      	lsrs	r3, r3, #2
 8101f32:	f003 0304 	and.w	r3, r3, #4
 8101f36:	005b      	lsls	r3, r3, #1
 8101f38:	fa02 f303 	lsl.w	r3, r2, r3
 8101f3c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8101f3e:	683b      	ldr	r3, [r7, #0]
 8101f40:	691b      	ldr	r3, [r3, #16]
 8101f42:	2b04      	cmp	r3, #4
 8101f44:	d027      	beq.n	8101f96 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	6818      	ldr	r0, [r3, #0]
 8101f4a:	683b      	ldr	r3, [r7, #0]
 8101f4c:	6919      	ldr	r1, [r3, #16]
 8101f4e:	683b      	ldr	r3, [r7, #0]
 8101f50:	681a      	ldr	r2, [r3, #0]
 8101f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101f54:	f7ff faf0 	bl	8101538 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	6818      	ldr	r0, [r3, #0]
 8101f5c:	683b      	ldr	r3, [r7, #0]
 8101f5e:	6919      	ldr	r1, [r3, #16]
 8101f60:	683b      	ldr	r3, [r7, #0]
 8101f62:	7e5b      	ldrb	r3, [r3, #25]
 8101f64:	2b01      	cmp	r3, #1
 8101f66:	d102      	bne.n	8101f6e <HAL_ADC_ConfigChannel+0x17e>
 8101f68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8101f6c:	e000      	b.n	8101f70 <HAL_ADC_ConfigChannel+0x180>
 8101f6e:	2300      	movs	r3, #0
 8101f70:	461a      	mov	r2, r3
 8101f72:	f7ff fb1a 	bl	81015aa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	6818      	ldr	r0, [r3, #0]
 8101f7a:	683b      	ldr	r3, [r7, #0]
 8101f7c:	6919      	ldr	r1, [r3, #16]
 8101f7e:	683b      	ldr	r3, [r7, #0]
 8101f80:	7e1b      	ldrb	r3, [r3, #24]
 8101f82:	2b01      	cmp	r3, #1
 8101f84:	d102      	bne.n	8101f8c <HAL_ADC_ConfigChannel+0x19c>
 8101f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101f8a:	e000      	b.n	8101f8e <HAL_ADC_ConfigChannel+0x19e>
 8101f8c:	2300      	movs	r3, #0
 8101f8e:	461a      	mov	r2, r3
 8101f90:	f7ff faf2 	bl	8101578 <LL_ADC_SetDataRightShift>
 8101f94:	e047      	b.n	8102026 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	681b      	ldr	r3, [r3, #0]
 8101f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101fa0:	683b      	ldr	r3, [r7, #0]
 8101fa2:	681b      	ldr	r3, [r3, #0]
 8101fa4:	069b      	lsls	r3, r3, #26
 8101fa6:	429a      	cmp	r2, r3
 8101fa8:	d107      	bne.n	8101fba <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	681b      	ldr	r3, [r3, #0]
 8101fae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	681b      	ldr	r3, [r3, #0]
 8101fb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101fb8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	681b      	ldr	r3, [r3, #0]
 8101fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101fc4:	683b      	ldr	r3, [r7, #0]
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	069b      	lsls	r3, r3, #26
 8101fca:	429a      	cmp	r2, r3
 8101fcc:	d107      	bne.n	8101fde <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	681b      	ldr	r3, [r3, #0]
 8101fd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101fdc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101fe8:	683b      	ldr	r3, [r7, #0]
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	069b      	lsls	r3, r3, #26
 8101fee:	429a      	cmp	r2, r3
 8101ff0:	d107      	bne.n	8102002 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	681b      	ldr	r3, [r3, #0]
 8101ff6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102000:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	681b      	ldr	r3, [r3, #0]
 8102006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810200c:	683b      	ldr	r3, [r7, #0]
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	069b      	lsls	r3, r3, #26
 8102012:	429a      	cmp	r2, r3
 8102014:	d107      	bne.n	8102026 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102024:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	4618      	mov	r0, r3
 810202c:	f7ff fbfe 	bl	810182c <LL_ADC_IsEnabled>
 8102030:	4603      	mov	r3, r0
 8102032:	2b00      	cmp	r3, #0
 8102034:	f040 820d 	bne.w	8102452 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	6818      	ldr	r0, [r3, #0]
 810203c:	683b      	ldr	r3, [r7, #0]
 810203e:	6819      	ldr	r1, [r3, #0]
 8102040:	683b      	ldr	r3, [r7, #0]
 8102042:	68db      	ldr	r3, [r3, #12]
 8102044:	461a      	mov	r2, r3
 8102046:	f7ff fb49 	bl	81016dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810204a:	683b      	ldr	r3, [r7, #0]
 810204c:	68db      	ldr	r3, [r3, #12]
 810204e:	4a0c      	ldr	r2, [pc, #48]	; (8102080 <HAL_ADC_ConfigChannel+0x290>)
 8102050:	4293      	cmp	r3, r2
 8102052:	f040 8133 	bne.w	81022bc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810205a:	683b      	ldr	r3, [r7, #0]
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102062:	2b00      	cmp	r3, #0
 8102064:	d110      	bne.n	8102088 <HAL_ADC_ConfigChannel+0x298>
 8102066:	683b      	ldr	r3, [r7, #0]
 8102068:	681b      	ldr	r3, [r3, #0]
 810206a:	0e9b      	lsrs	r3, r3, #26
 810206c:	3301      	adds	r3, #1
 810206e:	f003 031f 	and.w	r3, r3, #31
 8102072:	2b09      	cmp	r3, #9
 8102074:	bf94      	ite	ls
 8102076:	2301      	movls	r3, #1
 8102078:	2300      	movhi	r3, #0
 810207a:	b2db      	uxtb	r3, r3
 810207c:	e01e      	b.n	81020bc <HAL_ADC_ConfigChannel+0x2cc>
 810207e:	bf00      	nop
 8102080:	47ff0000 	.word	0x47ff0000
 8102084:	5c001000 	.word	0x5c001000
 8102088:	683b      	ldr	r3, [r7, #0]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810208e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102090:	fa93 f3a3 	rbit	r3, r3
 8102094:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102098:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 810209a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810209c:	2b00      	cmp	r3, #0
 810209e:	d101      	bne.n	81020a4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81020a0:	2320      	movs	r3, #32
 81020a2:	e003      	b.n	81020ac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81020a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81020a6:	fab3 f383 	clz	r3, r3
 81020aa:	b2db      	uxtb	r3, r3
 81020ac:	3301      	adds	r3, #1
 81020ae:	f003 031f 	and.w	r3, r3, #31
 81020b2:	2b09      	cmp	r3, #9
 81020b4:	bf94      	ite	ls
 81020b6:	2301      	movls	r3, #1
 81020b8:	2300      	movhi	r3, #0
 81020ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81020bc:	2b00      	cmp	r3, #0
 81020be:	d079      	beq.n	81021b4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81020c0:	683b      	ldr	r3, [r7, #0]
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81020c8:	2b00      	cmp	r3, #0
 81020ca:	d107      	bne.n	81020dc <HAL_ADC_ConfigChannel+0x2ec>
 81020cc:	683b      	ldr	r3, [r7, #0]
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	0e9b      	lsrs	r3, r3, #26
 81020d2:	3301      	adds	r3, #1
 81020d4:	069b      	lsls	r3, r3, #26
 81020d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81020da:	e015      	b.n	8102108 <HAL_ADC_ConfigChannel+0x318>
 81020dc:	683b      	ldr	r3, [r7, #0]
 81020de:	681b      	ldr	r3, [r3, #0]
 81020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81020e4:	fa93 f3a3 	rbit	r3, r3
 81020e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 81020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81020ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 81020ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81020f0:	2b00      	cmp	r3, #0
 81020f2:	d101      	bne.n	81020f8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 81020f4:	2320      	movs	r3, #32
 81020f6:	e003      	b.n	8102100 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 81020f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81020fa:	fab3 f383 	clz	r3, r3
 81020fe:	b2db      	uxtb	r3, r3
 8102100:	3301      	adds	r3, #1
 8102102:	069b      	lsls	r3, r3, #26
 8102104:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102108:	683b      	ldr	r3, [r7, #0]
 810210a:	681b      	ldr	r3, [r3, #0]
 810210c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102110:	2b00      	cmp	r3, #0
 8102112:	d109      	bne.n	8102128 <HAL_ADC_ConfigChannel+0x338>
 8102114:	683b      	ldr	r3, [r7, #0]
 8102116:	681b      	ldr	r3, [r3, #0]
 8102118:	0e9b      	lsrs	r3, r3, #26
 810211a:	3301      	adds	r3, #1
 810211c:	f003 031f 	and.w	r3, r3, #31
 8102120:	2101      	movs	r1, #1
 8102122:	fa01 f303 	lsl.w	r3, r1, r3
 8102126:	e017      	b.n	8102158 <HAL_ADC_ConfigChannel+0x368>
 8102128:	683b      	ldr	r3, [r7, #0]
 810212a:	681b      	ldr	r3, [r3, #0]
 810212c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810212e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102130:	fa93 f3a3 	rbit	r3, r3
 8102134:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102138:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 810213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810213c:	2b00      	cmp	r3, #0
 810213e:	d101      	bne.n	8102144 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102140:	2320      	movs	r3, #32
 8102142:	e003      	b.n	810214c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102146:	fab3 f383 	clz	r3, r3
 810214a:	b2db      	uxtb	r3, r3
 810214c:	3301      	adds	r3, #1
 810214e:	f003 031f 	and.w	r3, r3, #31
 8102152:	2101      	movs	r1, #1
 8102154:	fa01 f303 	lsl.w	r3, r1, r3
 8102158:	ea42 0103 	orr.w	r1, r2, r3
 810215c:	683b      	ldr	r3, [r7, #0]
 810215e:	681b      	ldr	r3, [r3, #0]
 8102160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102164:	2b00      	cmp	r3, #0
 8102166:	d10a      	bne.n	810217e <HAL_ADC_ConfigChannel+0x38e>
 8102168:	683b      	ldr	r3, [r7, #0]
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	0e9b      	lsrs	r3, r3, #26
 810216e:	3301      	adds	r3, #1
 8102170:	f003 021f 	and.w	r2, r3, #31
 8102174:	4613      	mov	r3, r2
 8102176:	005b      	lsls	r3, r3, #1
 8102178:	4413      	add	r3, r2
 810217a:	051b      	lsls	r3, r3, #20
 810217c:	e018      	b.n	81021b0 <HAL_ADC_ConfigChannel+0x3c0>
 810217e:	683b      	ldr	r3, [r7, #0]
 8102180:	681b      	ldr	r3, [r3, #0]
 8102182:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102186:	fa93 f3a3 	rbit	r3, r3
 810218a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 810218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810218e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102192:	2b00      	cmp	r3, #0
 8102194:	d101      	bne.n	810219a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102196:	2320      	movs	r3, #32
 8102198:	e003      	b.n	81021a2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 810219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810219c:	fab3 f383 	clz	r3, r3
 81021a0:	b2db      	uxtb	r3, r3
 81021a2:	3301      	adds	r3, #1
 81021a4:	f003 021f 	and.w	r2, r3, #31
 81021a8:	4613      	mov	r3, r2
 81021aa:	005b      	lsls	r3, r3, #1
 81021ac:	4413      	add	r3, r2
 81021ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81021b0:	430b      	orrs	r3, r1
 81021b2:	e07e      	b.n	81022b2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81021b4:	683b      	ldr	r3, [r7, #0]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81021bc:	2b00      	cmp	r3, #0
 81021be:	d107      	bne.n	81021d0 <HAL_ADC_ConfigChannel+0x3e0>
 81021c0:	683b      	ldr	r3, [r7, #0]
 81021c2:	681b      	ldr	r3, [r3, #0]
 81021c4:	0e9b      	lsrs	r3, r3, #26
 81021c6:	3301      	adds	r3, #1
 81021c8:	069b      	lsls	r3, r3, #26
 81021ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81021ce:	e015      	b.n	81021fc <HAL_ADC_ConfigChannel+0x40c>
 81021d0:	683b      	ldr	r3, [r7, #0]
 81021d2:	681b      	ldr	r3, [r3, #0]
 81021d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81021d8:	fa93 f3a3 	rbit	r3, r3
 81021dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 81021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 81021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81021e4:	2b00      	cmp	r3, #0
 81021e6:	d101      	bne.n	81021ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 81021e8:	2320      	movs	r3, #32
 81021ea:	e003      	b.n	81021f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 81021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81021ee:	fab3 f383 	clz	r3, r3
 81021f2:	b2db      	uxtb	r3, r3
 81021f4:	3301      	adds	r3, #1
 81021f6:	069b      	lsls	r3, r3, #26
 81021f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81021fc:	683b      	ldr	r3, [r7, #0]
 81021fe:	681b      	ldr	r3, [r3, #0]
 8102200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102204:	2b00      	cmp	r3, #0
 8102206:	d109      	bne.n	810221c <HAL_ADC_ConfigChannel+0x42c>
 8102208:	683b      	ldr	r3, [r7, #0]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	0e9b      	lsrs	r3, r3, #26
 810220e:	3301      	adds	r3, #1
 8102210:	f003 031f 	and.w	r3, r3, #31
 8102214:	2101      	movs	r1, #1
 8102216:	fa01 f303 	lsl.w	r3, r1, r3
 810221a:	e017      	b.n	810224c <HAL_ADC_ConfigChannel+0x45c>
 810221c:	683b      	ldr	r3, [r7, #0]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102222:	69fb      	ldr	r3, [r7, #28]
 8102224:	fa93 f3a3 	rbit	r3, r3
 8102228:	61bb      	str	r3, [r7, #24]
  return result;
 810222a:	69bb      	ldr	r3, [r7, #24]
 810222c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 810222e:	6a3b      	ldr	r3, [r7, #32]
 8102230:	2b00      	cmp	r3, #0
 8102232:	d101      	bne.n	8102238 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102234:	2320      	movs	r3, #32
 8102236:	e003      	b.n	8102240 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102238:	6a3b      	ldr	r3, [r7, #32]
 810223a:	fab3 f383 	clz	r3, r3
 810223e:	b2db      	uxtb	r3, r3
 8102240:	3301      	adds	r3, #1
 8102242:	f003 031f 	and.w	r3, r3, #31
 8102246:	2101      	movs	r1, #1
 8102248:	fa01 f303 	lsl.w	r3, r1, r3
 810224c:	ea42 0103 	orr.w	r1, r2, r3
 8102250:	683b      	ldr	r3, [r7, #0]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102258:	2b00      	cmp	r3, #0
 810225a:	d10d      	bne.n	8102278 <HAL_ADC_ConfigChannel+0x488>
 810225c:	683b      	ldr	r3, [r7, #0]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	0e9b      	lsrs	r3, r3, #26
 8102262:	3301      	adds	r3, #1
 8102264:	f003 021f 	and.w	r2, r3, #31
 8102268:	4613      	mov	r3, r2
 810226a:	005b      	lsls	r3, r3, #1
 810226c:	4413      	add	r3, r2
 810226e:	3b1e      	subs	r3, #30
 8102270:	051b      	lsls	r3, r3, #20
 8102272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102276:	e01b      	b.n	81022b0 <HAL_ADC_ConfigChannel+0x4c0>
 8102278:	683b      	ldr	r3, [r7, #0]
 810227a:	681b      	ldr	r3, [r3, #0]
 810227c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810227e:	693b      	ldr	r3, [r7, #16]
 8102280:	fa93 f3a3 	rbit	r3, r3
 8102284:	60fb      	str	r3, [r7, #12]
  return result;
 8102286:	68fb      	ldr	r3, [r7, #12]
 8102288:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810228a:	697b      	ldr	r3, [r7, #20]
 810228c:	2b00      	cmp	r3, #0
 810228e:	d101      	bne.n	8102294 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102290:	2320      	movs	r3, #32
 8102292:	e003      	b.n	810229c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102294:	697b      	ldr	r3, [r7, #20]
 8102296:	fab3 f383 	clz	r3, r3
 810229a:	b2db      	uxtb	r3, r3
 810229c:	3301      	adds	r3, #1
 810229e:	f003 021f 	and.w	r2, r3, #31
 81022a2:	4613      	mov	r3, r2
 81022a4:	005b      	lsls	r3, r3, #1
 81022a6:	4413      	add	r3, r2
 81022a8:	3b1e      	subs	r3, #30
 81022aa:	051b      	lsls	r3, r3, #20
 81022ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81022b0:	430b      	orrs	r3, r1
 81022b2:	683a      	ldr	r2, [r7, #0]
 81022b4:	6892      	ldr	r2, [r2, #8]
 81022b6:	4619      	mov	r1, r3
 81022b8:	f7ff f9e4 	bl	8101684 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81022bc:	683b      	ldr	r3, [r7, #0]
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	2b00      	cmp	r3, #0
 81022c2:	f280 80c6 	bge.w	8102452 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	4a67      	ldr	r2, [pc, #412]	; (8102468 <HAL_ADC_ConfigChannel+0x678>)
 81022cc:	4293      	cmp	r3, r2
 81022ce:	d004      	beq.n	81022da <HAL_ADC_ConfigChannel+0x4ea>
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	4a65      	ldr	r2, [pc, #404]	; (810246c <HAL_ADC_ConfigChannel+0x67c>)
 81022d6:	4293      	cmp	r3, r2
 81022d8:	d101      	bne.n	81022de <HAL_ADC_ConfigChannel+0x4ee>
 81022da:	4b65      	ldr	r3, [pc, #404]	; (8102470 <HAL_ADC_ConfigChannel+0x680>)
 81022dc:	e000      	b.n	81022e0 <HAL_ADC_ConfigChannel+0x4f0>
 81022de:	4b65      	ldr	r3, [pc, #404]	; (8102474 <HAL_ADC_ConfigChannel+0x684>)
 81022e0:	4618      	mov	r0, r3
 81022e2:	f7ff f91b 	bl	810151c <LL_ADC_GetCommonPathInternalCh>
 81022e6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81022e8:	687b      	ldr	r3, [r7, #4]
 81022ea:	681b      	ldr	r3, [r3, #0]
 81022ec:	4a5e      	ldr	r2, [pc, #376]	; (8102468 <HAL_ADC_ConfigChannel+0x678>)
 81022ee:	4293      	cmp	r3, r2
 81022f0:	d004      	beq.n	81022fc <HAL_ADC_ConfigChannel+0x50c>
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	681b      	ldr	r3, [r3, #0]
 81022f6:	4a5d      	ldr	r2, [pc, #372]	; (810246c <HAL_ADC_ConfigChannel+0x67c>)
 81022f8:	4293      	cmp	r3, r2
 81022fa:	d10e      	bne.n	810231a <HAL_ADC_ConfigChannel+0x52a>
 81022fc:	485a      	ldr	r0, [pc, #360]	; (8102468 <HAL_ADC_ConfigChannel+0x678>)
 81022fe:	f7ff fa95 	bl	810182c <LL_ADC_IsEnabled>
 8102302:	4604      	mov	r4, r0
 8102304:	4859      	ldr	r0, [pc, #356]	; (810246c <HAL_ADC_ConfigChannel+0x67c>)
 8102306:	f7ff fa91 	bl	810182c <LL_ADC_IsEnabled>
 810230a:	4603      	mov	r3, r0
 810230c:	4323      	orrs	r3, r4
 810230e:	2b00      	cmp	r3, #0
 8102310:	bf0c      	ite	eq
 8102312:	2301      	moveq	r3, #1
 8102314:	2300      	movne	r3, #0
 8102316:	b2db      	uxtb	r3, r3
 8102318:	e008      	b.n	810232c <HAL_ADC_ConfigChannel+0x53c>
 810231a:	4857      	ldr	r0, [pc, #348]	; (8102478 <HAL_ADC_ConfigChannel+0x688>)
 810231c:	f7ff fa86 	bl	810182c <LL_ADC_IsEnabled>
 8102320:	4603      	mov	r3, r0
 8102322:	2b00      	cmp	r3, #0
 8102324:	bf0c      	ite	eq
 8102326:	2301      	moveq	r3, #1
 8102328:	2300      	movne	r3, #0
 810232a:	b2db      	uxtb	r3, r3
 810232c:	2b00      	cmp	r3, #0
 810232e:	d07d      	beq.n	810242c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102330:	683b      	ldr	r3, [r7, #0]
 8102332:	681b      	ldr	r3, [r3, #0]
 8102334:	4a51      	ldr	r2, [pc, #324]	; (810247c <HAL_ADC_ConfigChannel+0x68c>)
 8102336:	4293      	cmp	r3, r2
 8102338:	d130      	bne.n	810239c <HAL_ADC_ConfigChannel+0x5ac>
 810233a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810233c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102340:	2b00      	cmp	r3, #0
 8102342:	d12b      	bne.n	810239c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	4a4b      	ldr	r2, [pc, #300]	; (8102478 <HAL_ADC_ConfigChannel+0x688>)
 810234a:	4293      	cmp	r3, r2
 810234c:	f040 8081 	bne.w	8102452 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	4a44      	ldr	r2, [pc, #272]	; (8102468 <HAL_ADC_ConfigChannel+0x678>)
 8102356:	4293      	cmp	r3, r2
 8102358:	d004      	beq.n	8102364 <HAL_ADC_ConfigChannel+0x574>
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	681b      	ldr	r3, [r3, #0]
 810235e:	4a43      	ldr	r2, [pc, #268]	; (810246c <HAL_ADC_ConfigChannel+0x67c>)
 8102360:	4293      	cmp	r3, r2
 8102362:	d101      	bne.n	8102368 <HAL_ADC_ConfigChannel+0x578>
 8102364:	4a42      	ldr	r2, [pc, #264]	; (8102470 <HAL_ADC_ConfigChannel+0x680>)
 8102366:	e000      	b.n	810236a <HAL_ADC_ConfigChannel+0x57a>
 8102368:	4a42      	ldr	r2, [pc, #264]	; (8102474 <HAL_ADC_ConfigChannel+0x684>)
 810236a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810236c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102370:	4619      	mov	r1, r3
 8102372:	4610      	mov	r0, r2
 8102374:	f7ff f8bf 	bl	81014f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102378:	4b41      	ldr	r3, [pc, #260]	; (8102480 <HAL_ADC_ConfigChannel+0x690>)
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	099b      	lsrs	r3, r3, #6
 810237e:	4a41      	ldr	r2, [pc, #260]	; (8102484 <HAL_ADC_ConfigChannel+0x694>)
 8102380:	fba2 2303 	umull	r2, r3, r2, r3
 8102384:	099b      	lsrs	r3, r3, #6
 8102386:	3301      	adds	r3, #1
 8102388:	005b      	lsls	r3, r3, #1
 810238a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810238c:	e002      	b.n	8102394 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 810238e:	68bb      	ldr	r3, [r7, #8]
 8102390:	3b01      	subs	r3, #1
 8102392:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102394:	68bb      	ldr	r3, [r7, #8]
 8102396:	2b00      	cmp	r3, #0
 8102398:	d1f9      	bne.n	810238e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810239a:	e05a      	b.n	8102452 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 810239c:	683b      	ldr	r3, [r7, #0]
 810239e:	681b      	ldr	r3, [r3, #0]
 81023a0:	4a39      	ldr	r2, [pc, #228]	; (8102488 <HAL_ADC_ConfigChannel+0x698>)
 81023a2:	4293      	cmp	r3, r2
 81023a4:	d11e      	bne.n	81023e4 <HAL_ADC_ConfigChannel+0x5f4>
 81023a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	d119      	bne.n	81023e4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	4a30      	ldr	r2, [pc, #192]	; (8102478 <HAL_ADC_ConfigChannel+0x688>)
 81023b6:	4293      	cmp	r3, r2
 81023b8:	d14b      	bne.n	8102452 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	4a2a      	ldr	r2, [pc, #168]	; (8102468 <HAL_ADC_ConfigChannel+0x678>)
 81023c0:	4293      	cmp	r3, r2
 81023c2:	d004      	beq.n	81023ce <HAL_ADC_ConfigChannel+0x5de>
 81023c4:	687b      	ldr	r3, [r7, #4]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	4a28      	ldr	r2, [pc, #160]	; (810246c <HAL_ADC_ConfigChannel+0x67c>)
 81023ca:	4293      	cmp	r3, r2
 81023cc:	d101      	bne.n	81023d2 <HAL_ADC_ConfigChannel+0x5e2>
 81023ce:	4a28      	ldr	r2, [pc, #160]	; (8102470 <HAL_ADC_ConfigChannel+0x680>)
 81023d0:	e000      	b.n	81023d4 <HAL_ADC_ConfigChannel+0x5e4>
 81023d2:	4a28      	ldr	r2, [pc, #160]	; (8102474 <HAL_ADC_ConfigChannel+0x684>)
 81023d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81023da:	4619      	mov	r1, r3
 81023dc:	4610      	mov	r0, r2
 81023de:	f7ff f88a 	bl	81014f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81023e2:	e036      	b.n	8102452 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81023e4:	683b      	ldr	r3, [r7, #0]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	4a28      	ldr	r2, [pc, #160]	; (810248c <HAL_ADC_ConfigChannel+0x69c>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d131      	bne.n	8102452 <HAL_ADC_ConfigChannel+0x662>
 81023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81023f4:	2b00      	cmp	r3, #0
 81023f6:	d12c      	bne.n	8102452 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	4a1e      	ldr	r2, [pc, #120]	; (8102478 <HAL_ADC_ConfigChannel+0x688>)
 81023fe:	4293      	cmp	r3, r2
 8102400:	d127      	bne.n	8102452 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	4a18      	ldr	r2, [pc, #96]	; (8102468 <HAL_ADC_ConfigChannel+0x678>)
 8102408:	4293      	cmp	r3, r2
 810240a:	d004      	beq.n	8102416 <HAL_ADC_ConfigChannel+0x626>
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	4a16      	ldr	r2, [pc, #88]	; (810246c <HAL_ADC_ConfigChannel+0x67c>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d101      	bne.n	810241a <HAL_ADC_ConfigChannel+0x62a>
 8102416:	4a16      	ldr	r2, [pc, #88]	; (8102470 <HAL_ADC_ConfigChannel+0x680>)
 8102418:	e000      	b.n	810241c <HAL_ADC_ConfigChannel+0x62c>
 810241a:	4a16      	ldr	r2, [pc, #88]	; (8102474 <HAL_ADC_ConfigChannel+0x684>)
 810241c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810241e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102422:	4619      	mov	r1, r3
 8102424:	4610      	mov	r0, r2
 8102426:	f7ff f866 	bl	81014f6 <LL_ADC_SetCommonPathInternalCh>
 810242a:	e012      	b.n	8102452 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102430:	f043 0220 	orr.w	r2, r3, #32
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102438:	2301      	movs	r3, #1
 810243a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 810243e:	e008      	b.n	8102452 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102444:	f043 0220 	orr.w	r2, r3, #32
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810244c:	2301      	movs	r3, #1
 810244e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	2200      	movs	r2, #0
 8102456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810245a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 810245e:	4618      	mov	r0, r3
 8102460:	3784      	adds	r7, #132	; 0x84
 8102462:	46bd      	mov	sp, r7
 8102464:	bd90      	pop	{r4, r7, pc}
 8102466:	bf00      	nop
 8102468:	40022000 	.word	0x40022000
 810246c:	40022100 	.word	0x40022100
 8102470:	40022300 	.word	0x40022300
 8102474:	58026300 	.word	0x58026300
 8102478:	58026000 	.word	0x58026000
 810247c:	cb840000 	.word	0xcb840000
 8102480:	10000000 	.word	0x10000000
 8102484:	053e2d63 	.word	0x053e2d63
 8102488:	c7520000 	.word	0xc7520000
 810248c:	cfb80000 	.word	0xcfb80000

08102490 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8102490:	b580      	push	{r7, lr}
 8102492:	b084      	sub	sp, #16
 8102494:	af00      	add	r7, sp, #0
 8102496:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	4618      	mov	r0, r3
 810249e:	f7ff f9c5 	bl	810182c <LL_ADC_IsEnabled>
 81024a2:	4603      	mov	r3, r0
 81024a4:	2b00      	cmp	r3, #0
 81024a6:	d16e      	bne.n	8102586 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	689a      	ldr	r2, [r3, #8]
 81024ae:	4b38      	ldr	r3, [pc, #224]	; (8102590 <ADC_Enable+0x100>)
 81024b0:	4013      	ands	r3, r2
 81024b2:	2b00      	cmp	r3, #0
 81024b4:	d00d      	beq.n	81024d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024ba:	f043 0210 	orr.w	r2, r3, #16
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024c6:	f043 0201 	orr.w	r2, r3, #1
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 81024ce:	2301      	movs	r3, #1
 81024d0:	e05a      	b.n	8102588 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	4618      	mov	r0, r3
 81024d8:	f7ff f980 	bl	81017dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 81024dc:	f7fe ffa8 	bl	8101430 <HAL_GetTick>
 81024e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	4a2b      	ldr	r2, [pc, #172]	; (8102594 <ADC_Enable+0x104>)
 81024e8:	4293      	cmp	r3, r2
 81024ea:	d004      	beq.n	81024f6 <ADC_Enable+0x66>
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	4a29      	ldr	r2, [pc, #164]	; (8102598 <ADC_Enable+0x108>)
 81024f2:	4293      	cmp	r3, r2
 81024f4:	d101      	bne.n	81024fa <ADC_Enable+0x6a>
 81024f6:	4b29      	ldr	r3, [pc, #164]	; (810259c <ADC_Enable+0x10c>)
 81024f8:	e000      	b.n	81024fc <ADC_Enable+0x6c>
 81024fa:	4b29      	ldr	r3, [pc, #164]	; (81025a0 <ADC_Enable+0x110>)
 81024fc:	4618      	mov	r0, r3
 81024fe:	f7ff f911 	bl	8101724 <LL_ADC_GetMultimode>
 8102502:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	4a23      	ldr	r2, [pc, #140]	; (8102598 <ADC_Enable+0x108>)
 810250a:	4293      	cmp	r3, r2
 810250c:	d002      	beq.n	8102514 <ADC_Enable+0x84>
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	e000      	b.n	8102516 <ADC_Enable+0x86>
 8102514:	4b1f      	ldr	r3, [pc, #124]	; (8102594 <ADC_Enable+0x104>)
 8102516:	687a      	ldr	r2, [r7, #4]
 8102518:	6812      	ldr	r2, [r2, #0]
 810251a:	4293      	cmp	r3, r2
 810251c:	d02c      	beq.n	8102578 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810251e:	68bb      	ldr	r3, [r7, #8]
 8102520:	2b00      	cmp	r3, #0
 8102522:	d130      	bne.n	8102586 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102524:	e028      	b.n	8102578 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	4618      	mov	r0, r3
 810252c:	f7ff f97e 	bl	810182c <LL_ADC_IsEnabled>
 8102530:	4603      	mov	r3, r0
 8102532:	2b00      	cmp	r3, #0
 8102534:	d104      	bne.n	8102540 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4618      	mov	r0, r3
 810253c:	f7ff f94e 	bl	81017dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8102540:	f7fe ff76 	bl	8101430 <HAL_GetTick>
 8102544:	4602      	mov	r2, r0
 8102546:	68fb      	ldr	r3, [r7, #12]
 8102548:	1ad3      	subs	r3, r2, r3
 810254a:	2b02      	cmp	r3, #2
 810254c:	d914      	bls.n	8102578 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	681b      	ldr	r3, [r3, #0]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	f003 0301 	and.w	r3, r3, #1
 8102558:	2b01      	cmp	r3, #1
 810255a:	d00d      	beq.n	8102578 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102560:	f043 0210 	orr.w	r2, r3, #16
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810256c:	f043 0201 	orr.w	r2, r3, #1
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8102574:	2301      	movs	r3, #1
 8102576:	e007      	b.n	8102588 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	681b      	ldr	r3, [r3, #0]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	f003 0301 	and.w	r3, r3, #1
 8102582:	2b01      	cmp	r3, #1
 8102584:	d1cf      	bne.n	8102526 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102586:	2300      	movs	r3, #0
}
 8102588:	4618      	mov	r0, r3
 810258a:	3710      	adds	r7, #16
 810258c:	46bd      	mov	sp, r7
 810258e:	bd80      	pop	{r7, pc}
 8102590:	8000003f 	.word	0x8000003f
 8102594:	40022000 	.word	0x40022000
 8102598:	40022100 	.word	0x40022100
 810259c:	40022300 	.word	0x40022300
 81025a0:	58026300 	.word	0x58026300

081025a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 81025a4:	b580      	push	{r7, lr}
 81025a6:	b084      	sub	sp, #16
 81025a8:	af00      	add	r7, sp, #0
 81025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	681b      	ldr	r3, [r3, #0]
 81025b0:	4618      	mov	r0, r3
 81025b2:	f7ff f94e 	bl	8101852 <LL_ADC_IsDisableOngoing>
 81025b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	4618      	mov	r0, r3
 81025be:	f7ff f935 	bl	810182c <LL_ADC_IsEnabled>
 81025c2:	4603      	mov	r3, r0
 81025c4:	2b00      	cmp	r3, #0
 81025c6:	d047      	beq.n	8102658 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 81025c8:	68fb      	ldr	r3, [r7, #12]
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d144      	bne.n	8102658 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	689b      	ldr	r3, [r3, #8]
 81025d4:	f003 030d 	and.w	r3, r3, #13
 81025d8:	2b01      	cmp	r3, #1
 81025da:	d10c      	bne.n	81025f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	4618      	mov	r0, r3
 81025e2:	f7ff f90f 	bl	8101804 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	2203      	movs	r2, #3
 81025ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 81025ee:	f7fe ff1f 	bl	8101430 <HAL_GetTick>
 81025f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81025f4:	e029      	b.n	810264a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025fa:	f043 0210 	orr.w	r2, r3, #16
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102606:	f043 0201 	orr.w	r2, r3, #1
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 810260e:	2301      	movs	r3, #1
 8102610:	e023      	b.n	810265a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8102612:	f7fe ff0d 	bl	8101430 <HAL_GetTick>
 8102616:	4602      	mov	r2, r0
 8102618:	68bb      	ldr	r3, [r7, #8]
 810261a:	1ad3      	subs	r3, r2, r3
 810261c:	2b02      	cmp	r3, #2
 810261e:	d914      	bls.n	810264a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	681b      	ldr	r3, [r3, #0]
 8102624:	689b      	ldr	r3, [r3, #8]
 8102626:	f003 0301 	and.w	r3, r3, #1
 810262a:	2b00      	cmp	r3, #0
 810262c:	d00d      	beq.n	810264a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102632:	f043 0210 	orr.w	r2, r3, #16
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810263e:	f043 0201 	orr.w	r2, r3, #1
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8102646:	2301      	movs	r3, #1
 8102648:	e007      	b.n	810265a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	681b      	ldr	r3, [r3, #0]
 810264e:	689b      	ldr	r3, [r3, #8]
 8102650:	f003 0301 	and.w	r3, r3, #1
 8102654:	2b00      	cmp	r3, #0
 8102656:	d1dc      	bne.n	8102612 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102658:	2300      	movs	r3, #0
}
 810265a:	4618      	mov	r0, r3
 810265c:	3710      	adds	r7, #16
 810265e:	46bd      	mov	sp, r7
 8102660:	bd80      	pop	{r7, pc}

08102662 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8102662:	b580      	push	{r7, lr}
 8102664:	b084      	sub	sp, #16
 8102666:	af00      	add	r7, sp, #0
 8102668:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810266e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8102670:	68fb      	ldr	r3, [r7, #12]
 8102672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8102678:	2b00      	cmp	r3, #0
 810267a:	d14b      	bne.n	8102714 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102680:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8102684:	68fb      	ldr	r3, [r7, #12]
 8102686:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	f003 0308 	and.w	r3, r3, #8
 8102692:	2b00      	cmp	r3, #0
 8102694:	d021      	beq.n	81026da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	681b      	ldr	r3, [r3, #0]
 810269a:	4618      	mov	r0, r3
 810269c:	f7fe ffa0 	bl	81015e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 81026a0:	4603      	mov	r3, r0
 81026a2:	2b00      	cmp	r3, #0
 81026a4:	d032      	beq.n	810270c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 81026a6:	68fb      	ldr	r3, [r7, #12]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	68db      	ldr	r3, [r3, #12]
 81026ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d12b      	bne.n	810270c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81026b4:	68fb      	ldr	r3, [r7, #12]
 81026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81026bc:	68fb      	ldr	r3, [r7, #12]
 81026be:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81026c0:	68fb      	ldr	r3, [r7, #12]
 81026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81026c8:	2b00      	cmp	r3, #0
 81026ca:	d11f      	bne.n	810270c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81026cc:	68fb      	ldr	r3, [r7, #12]
 81026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026d0:	f043 0201 	orr.w	r2, r3, #1
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	655a      	str	r2, [r3, #84]	; 0x54
 81026d8:	e018      	b.n	810270c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 81026da:	68fb      	ldr	r3, [r7, #12]
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	68db      	ldr	r3, [r3, #12]
 81026e0:	f003 0303 	and.w	r3, r3, #3
 81026e4:	2b00      	cmp	r3, #0
 81026e6:	d111      	bne.n	810270c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81026e8:	68fb      	ldr	r3, [r7, #12]
 81026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81026f0:	68fb      	ldr	r3, [r7, #12]
 81026f2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81026f4:	68fb      	ldr	r3, [r7, #12]
 81026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81026fc:	2b00      	cmp	r3, #0
 81026fe:	d105      	bne.n	810270c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102704:	f043 0201 	orr.w	r2, r3, #1
 8102708:	68fb      	ldr	r3, [r7, #12]
 810270a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 810270c:	68f8      	ldr	r0, [r7, #12]
 810270e:	f7ff fb51 	bl	8101db4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8102712:	e00e      	b.n	8102732 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8102714:	68fb      	ldr	r3, [r7, #12]
 8102716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102718:	f003 0310 	and.w	r3, r3, #16
 810271c:	2b00      	cmp	r3, #0
 810271e:	d003      	beq.n	8102728 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8102720:	68f8      	ldr	r0, [r7, #12]
 8102722:	f7ff fb5b 	bl	8101ddc <HAL_ADC_ErrorCallback>
}
 8102726:	e004      	b.n	8102732 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8102728:	68fb      	ldr	r3, [r7, #12]
 810272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810272e:	6878      	ldr	r0, [r7, #4]
 8102730:	4798      	blx	r3
}
 8102732:	bf00      	nop
 8102734:	3710      	adds	r7, #16
 8102736:	46bd      	mov	sp, r7
 8102738:	bd80      	pop	{r7, pc}

0810273a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 810273a:	b580      	push	{r7, lr}
 810273c:	b084      	sub	sp, #16
 810273e:	af00      	add	r7, sp, #0
 8102740:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102746:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8102748:	68f8      	ldr	r0, [r7, #12]
 810274a:	f7ff fb3d 	bl	8101dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 810274e:	bf00      	nop
 8102750:	3710      	adds	r7, #16
 8102752:	46bd      	mov	sp, r7
 8102754:	bd80      	pop	{r7, pc}

08102756 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8102756:	b580      	push	{r7, lr}
 8102758:	b084      	sub	sp, #16
 810275a:	af00      	add	r7, sp, #0
 810275c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102762:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8102764:	68fb      	ldr	r3, [r7, #12]
 8102766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102768:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810276c:	68fb      	ldr	r3, [r7, #12]
 810276e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8102770:	68fb      	ldr	r3, [r7, #12]
 8102772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102774:	f043 0204 	orr.w	r2, r3, #4
 8102778:	68fb      	ldr	r3, [r7, #12]
 810277a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 810277c:	68f8      	ldr	r0, [r7, #12]
 810277e:	f7ff fb2d 	bl	8101ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8102782:	bf00      	nop
 8102784:	3710      	adds	r7, #16
 8102786:	46bd      	mov	sp, r7
 8102788:	bd80      	pop	{r7, pc}
	...

0810278c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810278c:	b580      	push	{r7, lr}
 810278e:	b084      	sub	sp, #16
 8102790:	af00      	add	r7, sp, #0
 8102792:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	4a79      	ldr	r2, [pc, #484]	; (8102980 <ADC_ConfigureBoostMode+0x1f4>)
 810279a:	4293      	cmp	r3, r2
 810279c:	d004      	beq.n	81027a8 <ADC_ConfigureBoostMode+0x1c>
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	681b      	ldr	r3, [r3, #0]
 81027a2:	4a78      	ldr	r2, [pc, #480]	; (8102984 <ADC_ConfigureBoostMode+0x1f8>)
 81027a4:	4293      	cmp	r3, r2
 81027a6:	d109      	bne.n	81027bc <ADC_ConfigureBoostMode+0x30>
 81027a8:	4b77      	ldr	r3, [pc, #476]	; (8102988 <ADC_ConfigureBoostMode+0x1fc>)
 81027aa:	689b      	ldr	r3, [r3, #8]
 81027ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	bf14      	ite	ne
 81027b4:	2301      	movne	r3, #1
 81027b6:	2300      	moveq	r3, #0
 81027b8:	b2db      	uxtb	r3, r3
 81027ba:	e008      	b.n	81027ce <ADC_ConfigureBoostMode+0x42>
 81027bc:	4b73      	ldr	r3, [pc, #460]	; (810298c <ADC_ConfigureBoostMode+0x200>)
 81027be:	689b      	ldr	r3, [r3, #8]
 81027c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81027c4:	2b00      	cmp	r3, #0
 81027c6:	bf14      	ite	ne
 81027c8:	2301      	movne	r3, #1
 81027ca:	2300      	moveq	r3, #0
 81027cc:	b2db      	uxtb	r3, r3
 81027ce:	2b00      	cmp	r3, #0
 81027d0:	d01c      	beq.n	810280c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81027d2:	f005 f8ad 	bl	8107930 <HAL_RCC_GetHCLKFreq>
 81027d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	685b      	ldr	r3, [r3, #4]
 81027dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81027e0:	d010      	beq.n	8102804 <ADC_ConfigureBoostMode+0x78>
 81027e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81027e6:	d871      	bhi.n	81028cc <ADC_ConfigureBoostMode+0x140>
 81027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81027ec:	d002      	beq.n	81027f4 <ADC_ConfigureBoostMode+0x68>
 81027ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81027f2:	d16b      	bne.n	81028cc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	685b      	ldr	r3, [r3, #4]
 81027f8:	0c1b      	lsrs	r3, r3, #16
 81027fa:	68fa      	ldr	r2, [r7, #12]
 81027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8102800:	60fb      	str	r3, [r7, #12]
        break;
 8102802:	e066      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8102804:	68fb      	ldr	r3, [r7, #12]
 8102806:	089b      	lsrs	r3, r3, #2
 8102808:	60fb      	str	r3, [r7, #12]
        break;
 810280a:	e062      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 810280c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8102810:	f006 f86e 	bl	81088f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8102814:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	685b      	ldr	r3, [r3, #4]
 810281a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810281e:	d051      	beq.n	81028c4 <ADC_ConfigureBoostMode+0x138>
 8102820:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102824:	d854      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 8102826:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810282a:	d047      	beq.n	81028bc <ADC_ConfigureBoostMode+0x130>
 810282c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102830:	d84e      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 8102832:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102836:	d03d      	beq.n	81028b4 <ADC_ConfigureBoostMode+0x128>
 8102838:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810283c:	d848      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 810283e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102842:	d033      	beq.n	81028ac <ADC_ConfigureBoostMode+0x120>
 8102844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102848:	d842      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 810284a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810284e:	d029      	beq.n	81028a4 <ADC_ConfigureBoostMode+0x118>
 8102850:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102854:	d83c      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 8102856:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810285a:	d01a      	beq.n	8102892 <ADC_ConfigureBoostMode+0x106>
 810285c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102860:	d836      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 8102862:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102866:	d014      	beq.n	8102892 <ADC_ConfigureBoostMode+0x106>
 8102868:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810286c:	d830      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 810286e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102872:	d00e      	beq.n	8102892 <ADC_ConfigureBoostMode+0x106>
 8102874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102878:	d82a      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 810287a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 810287e:	d008      	beq.n	8102892 <ADC_ConfigureBoostMode+0x106>
 8102880:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102884:	d824      	bhi.n	81028d0 <ADC_ConfigureBoostMode+0x144>
 8102886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810288a:	d002      	beq.n	8102892 <ADC_ConfigureBoostMode+0x106>
 810288c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8102890:	d11e      	bne.n	81028d0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	685b      	ldr	r3, [r3, #4]
 8102896:	0c9b      	lsrs	r3, r3, #18
 8102898:	005b      	lsls	r3, r3, #1
 810289a:	68fa      	ldr	r2, [r7, #12]
 810289c:	fbb2 f3f3 	udiv	r3, r2, r3
 81028a0:	60fb      	str	r3, [r7, #12]
        break;
 81028a2:	e016      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81028a4:	68fb      	ldr	r3, [r7, #12]
 81028a6:	091b      	lsrs	r3, r3, #4
 81028a8:	60fb      	str	r3, [r7, #12]
        break;
 81028aa:	e012      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	095b      	lsrs	r3, r3, #5
 81028b0:	60fb      	str	r3, [r7, #12]
        break;
 81028b2:	e00e      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	099b      	lsrs	r3, r3, #6
 81028b8:	60fb      	str	r3, [r7, #12]
        break;
 81028ba:	e00a      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81028bc:	68fb      	ldr	r3, [r7, #12]
 81028be:	09db      	lsrs	r3, r3, #7
 81028c0:	60fb      	str	r3, [r7, #12]
        break;
 81028c2:	e006      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81028c4:	68fb      	ldr	r3, [r7, #12]
 81028c6:	0a1b      	lsrs	r3, r3, #8
 81028c8:	60fb      	str	r3, [r7, #12]
        break;
 81028ca:	e002      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
        break;
 81028cc:	bf00      	nop
 81028ce:	e000      	b.n	81028d2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 81028d0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81028d2:	f7fe fddd 	bl	8101490 <HAL_GetREVID>
 81028d6:	4603      	mov	r3, r0
 81028d8:	f241 0203 	movw	r2, #4099	; 0x1003
 81028dc:	4293      	cmp	r3, r2
 81028de:	d815      	bhi.n	810290c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 81028e0:	68fb      	ldr	r3, [r7, #12]
 81028e2:	4a2b      	ldr	r2, [pc, #172]	; (8102990 <ADC_ConfigureBoostMode+0x204>)
 81028e4:	4293      	cmp	r3, r2
 81028e6:	d908      	bls.n	81028fa <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	681b      	ldr	r3, [r3, #0]
 81028ec:	689a      	ldr	r2, [r3, #8]
 81028ee:	687b      	ldr	r3, [r7, #4]
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81028f6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81028f8:	e03e      	b.n	8102978 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	689a      	ldr	r2, [r3, #8]
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102908:	609a      	str	r2, [r3, #8]
}
 810290a:	e035      	b.n	8102978 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 810290c:	68fb      	ldr	r3, [r7, #12]
 810290e:	085b      	lsrs	r3, r3, #1
 8102910:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	4a1f      	ldr	r2, [pc, #124]	; (8102994 <ADC_ConfigureBoostMode+0x208>)
 8102916:	4293      	cmp	r3, r2
 8102918:	d808      	bhi.n	810292c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	689a      	ldr	r2, [r3, #8]
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	681b      	ldr	r3, [r3, #0]
 8102924:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102928:	609a      	str	r2, [r3, #8]
}
 810292a:	e025      	b.n	8102978 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 810292c:	68fb      	ldr	r3, [r7, #12]
 810292e:	4a1a      	ldr	r2, [pc, #104]	; (8102998 <ADC_ConfigureBoostMode+0x20c>)
 8102930:	4293      	cmp	r3, r2
 8102932:	d80a      	bhi.n	810294a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	689b      	ldr	r3, [r3, #8]
 810293a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102946:	609a      	str	r2, [r3, #8]
}
 8102948:	e016      	b.n	8102978 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 810294a:	68fb      	ldr	r3, [r7, #12]
 810294c:	4a13      	ldr	r2, [pc, #76]	; (810299c <ADC_ConfigureBoostMode+0x210>)
 810294e:	4293      	cmp	r3, r2
 8102950:	d80a      	bhi.n	8102968 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	689b      	ldr	r3, [r3, #8]
 8102958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102964:	609a      	str	r2, [r3, #8]
}
 8102966:	e007      	b.n	8102978 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	689a      	ldr	r2, [r3, #8]
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8102976:	609a      	str	r2, [r3, #8]
}
 8102978:	bf00      	nop
 810297a:	3710      	adds	r7, #16
 810297c:	46bd      	mov	sp, r7
 810297e:	bd80      	pop	{r7, pc}
 8102980:	40022000 	.word	0x40022000
 8102984:	40022100 	.word	0x40022100
 8102988:	40022300 	.word	0x40022300
 810298c:	58026300 	.word	0x58026300
 8102990:	01312d00 	.word	0x01312d00
 8102994:	005f5e10 	.word	0x005f5e10
 8102998:	00bebc20 	.word	0x00bebc20
 810299c:	017d7840 	.word	0x017d7840

081029a0 <LL_ADC_IsEnabled>:
{
 81029a0:	b480      	push	{r7}
 81029a2:	b083      	sub	sp, #12
 81029a4:	af00      	add	r7, sp, #0
 81029a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	689b      	ldr	r3, [r3, #8]
 81029ac:	f003 0301 	and.w	r3, r3, #1
 81029b0:	2b01      	cmp	r3, #1
 81029b2:	d101      	bne.n	81029b8 <LL_ADC_IsEnabled+0x18>
 81029b4:	2301      	movs	r3, #1
 81029b6:	e000      	b.n	81029ba <LL_ADC_IsEnabled+0x1a>
 81029b8:	2300      	movs	r3, #0
}
 81029ba:	4618      	mov	r0, r3
 81029bc:	370c      	adds	r7, #12
 81029be:	46bd      	mov	sp, r7
 81029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c4:	4770      	bx	lr
	...

081029c8 <LL_ADC_StartCalibration>:
{
 81029c8:	b480      	push	{r7}
 81029ca:	b085      	sub	sp, #20
 81029cc:	af00      	add	r7, sp, #0
 81029ce:	60f8      	str	r0, [r7, #12]
 81029d0:	60b9      	str	r1, [r7, #8]
 81029d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 81029d4:	68fb      	ldr	r3, [r7, #12]
 81029d6:	689a      	ldr	r2, [r3, #8]
 81029d8:	4b09      	ldr	r3, [pc, #36]	; (8102a00 <LL_ADC_StartCalibration+0x38>)
 81029da:	4013      	ands	r3, r2
 81029dc:	68ba      	ldr	r2, [r7, #8]
 81029de:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 81029e2:	687a      	ldr	r2, [r7, #4]
 81029e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 81029e8:	430a      	orrs	r2, r1
 81029ea:	4313      	orrs	r3, r2
 81029ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81029f0:	68fb      	ldr	r3, [r7, #12]
 81029f2:	609a      	str	r2, [r3, #8]
}
 81029f4:	bf00      	nop
 81029f6:	3714      	adds	r7, #20
 81029f8:	46bd      	mov	sp, r7
 81029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029fe:	4770      	bx	lr
 8102a00:	3ffeffc0 	.word	0x3ffeffc0

08102a04 <LL_ADC_IsCalibrationOnGoing>:
{
 8102a04:	b480      	push	{r7}
 8102a06:	b083      	sub	sp, #12
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	689b      	ldr	r3, [r3, #8]
 8102a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8102a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8102a18:	d101      	bne.n	8102a1e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8102a1a:	2301      	movs	r3, #1
 8102a1c:	e000      	b.n	8102a20 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8102a1e:	2300      	movs	r3, #0
}
 8102a20:	4618      	mov	r0, r3
 8102a22:	370c      	adds	r7, #12
 8102a24:	46bd      	mov	sp, r7
 8102a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a2a:	4770      	bx	lr

08102a2c <LL_ADC_REG_IsConversionOngoing>:
{
 8102a2c:	b480      	push	{r7}
 8102a2e:	b083      	sub	sp, #12
 8102a30:	af00      	add	r7, sp, #0
 8102a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	689b      	ldr	r3, [r3, #8]
 8102a38:	f003 0304 	and.w	r3, r3, #4
 8102a3c:	2b04      	cmp	r3, #4
 8102a3e:	d101      	bne.n	8102a44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102a40:	2301      	movs	r3, #1
 8102a42:	e000      	b.n	8102a46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102a44:	2300      	movs	r3, #0
}
 8102a46:	4618      	mov	r0, r3
 8102a48:	370c      	adds	r7, #12
 8102a4a:	46bd      	mov	sp, r7
 8102a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a50:	4770      	bx	lr
	...

08102a54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8102a54:	b580      	push	{r7, lr}
 8102a56:	b086      	sub	sp, #24
 8102a58:	af00      	add	r7, sp, #0
 8102a5a:	60f8      	str	r0, [r7, #12]
 8102a5c:	60b9      	str	r1, [r7, #8]
 8102a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8102a60:	2300      	movs	r3, #0
 8102a62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8102a64:	68fb      	ldr	r3, [r7, #12]
 8102a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102a6a:	2b01      	cmp	r3, #1
 8102a6c:	d101      	bne.n	8102a72 <HAL_ADCEx_Calibration_Start+0x1e>
 8102a6e:	2302      	movs	r3, #2
 8102a70:	e04e      	b.n	8102b10 <HAL_ADCEx_Calibration_Start+0xbc>
 8102a72:	68fb      	ldr	r3, [r7, #12]
 8102a74:	2201      	movs	r2, #1
 8102a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8102a7a:	68f8      	ldr	r0, [r7, #12]
 8102a7c:	f7ff fd92 	bl	81025a4 <ADC_Disable>
 8102a80:	4603      	mov	r3, r0
 8102a82:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8102a84:	7dfb      	ldrb	r3, [r7, #23]
 8102a86:	2b00      	cmp	r3, #0
 8102a88:	d137      	bne.n	8102afa <HAL_ADCEx_Calibration_Start+0xa6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102a8a:	68fb      	ldr	r3, [r7, #12]
 8102a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8102a92:	f023 0302 	bic.w	r3, r3, #2
 8102a96:	f043 0202 	orr.w	r2, r3, #2
 8102a9a:	68fb      	ldr	r3, [r7, #12]
 8102a9c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8102a9e:	68fb      	ldr	r3, [r7, #12]
 8102aa0:	681b      	ldr	r3, [r3, #0]
 8102aa2:	687a      	ldr	r2, [r7, #4]
 8102aa4:	68b9      	ldr	r1, [r7, #8]
 8102aa6:	4618      	mov	r0, r3
 8102aa8:	f7ff ff8e 	bl	81029c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8102aac:	e014      	b.n	8102ad8 <HAL_ADCEx_Calibration_Start+0x84>
    {
      wait_loop_index++;
 8102aae:	693b      	ldr	r3, [r7, #16]
 8102ab0:	3301      	adds	r3, #1
 8102ab2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8102ab4:	693b      	ldr	r3, [r7, #16]
 8102ab6:	4a18      	ldr	r2, [pc, #96]	; (8102b18 <HAL_ADCEx_Calibration_Start+0xc4>)
 8102ab8:	4293      	cmp	r3, r2
 8102aba:	d30d      	bcc.n	8102ad8 <HAL_ADCEx_Calibration_Start+0x84>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8102abc:	68fb      	ldr	r3, [r7, #12]
 8102abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ac0:	f023 0312 	bic.w	r3, r3, #18
 8102ac4:	f043 0210 	orr.w	r2, r3, #16
 8102ac8:	68fb      	ldr	r3, [r7, #12]
 8102aca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8102acc:	68fb      	ldr	r3, [r7, #12]
 8102ace:	2200      	movs	r2, #0
 8102ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8102ad4:	2301      	movs	r3, #1
 8102ad6:	e01b      	b.n	8102b10 <HAL_ADCEx_Calibration_Start+0xbc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8102ad8:	68fb      	ldr	r3, [r7, #12]
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	4618      	mov	r0, r3
 8102ade:	f7ff ff91 	bl	8102a04 <LL_ADC_IsCalibrationOnGoing>
 8102ae2:	4603      	mov	r3, r0
 8102ae4:	2b00      	cmp	r3, #0
 8102ae6:	d1e2      	bne.n	8102aae <HAL_ADCEx_Calibration_Start+0x5a>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102ae8:	68fb      	ldr	r3, [r7, #12]
 8102aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102aec:	f023 0303 	bic.w	r3, r3, #3
 8102af0:	f043 0201 	orr.w	r2, r3, #1
 8102af4:	68fb      	ldr	r3, [r7, #12]
 8102af6:	655a      	str	r2, [r3, #84]	; 0x54
 8102af8:	e005      	b.n	8102b06 <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102afe:	f043 0210 	orr.w	r2, r3, #16
 8102b02:	68fb      	ldr	r3, [r7, #12]
 8102b04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	2200      	movs	r2, #0
 8102b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8102b10:	4618      	mov	r0, r3
 8102b12:	3718      	adds	r7, #24
 8102b14:	46bd      	mov	sp, r7
 8102b16:	bd80      	pop	{r7, pc}
 8102b18:	25c3f800 	.word	0x25c3f800

08102b1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8102b1c:	b590      	push	{r4, r7, lr}
 8102b1e:	b09f      	sub	sp, #124	; 0x7c
 8102b20:	af00      	add	r7, sp, #0
 8102b22:	6078      	str	r0, [r7, #4]
 8102b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102b26:	2300      	movs	r3, #0
 8102b28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102b2c:	687b      	ldr	r3, [r7, #4]
 8102b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102b32:	2b01      	cmp	r3, #1
 8102b34:	d101      	bne.n	8102b3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8102b36:	2302      	movs	r3, #2
 8102b38:	e0c4      	b.n	8102cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	2201      	movs	r2, #1
 8102b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102b42:	2300      	movs	r3, #0
 8102b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8102b46:	2300      	movs	r3, #0
 8102b48:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4a5f      	ldr	r2, [pc, #380]	; (8102ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102b50:	4293      	cmp	r3, r2
 8102b52:	d102      	bne.n	8102b5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8102b54:	4b5e      	ldr	r3, [pc, #376]	; (8102cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102b56:	60bb      	str	r3, [r7, #8]
 8102b58:	e001      	b.n	8102b5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8102b5a:	2300      	movs	r3, #0
 8102b5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8102b5e:	68bb      	ldr	r3, [r7, #8]
 8102b60:	2b00      	cmp	r3, #0
 8102b62:	d10b      	bne.n	8102b7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b68:	f043 0220 	orr.w	r2, r3, #32
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	2200      	movs	r2, #0
 8102b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8102b78:	2301      	movs	r3, #1
 8102b7a:	e0a3      	b.n	8102cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102b7c:	68bb      	ldr	r3, [r7, #8]
 8102b7e:	4618      	mov	r0, r3
 8102b80:	f7ff ff54 	bl	8102a2c <LL_ADC_REG_IsConversionOngoing>
 8102b84:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	4618      	mov	r0, r3
 8102b8c:	f7ff ff4e 	bl	8102a2c <LL_ADC_REG_IsConversionOngoing>
 8102b90:	4603      	mov	r3, r0
 8102b92:	2b00      	cmp	r3, #0
 8102b94:	f040 8085 	bne.w	8102ca2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8102b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102b9a:	2b00      	cmp	r3, #0
 8102b9c:	f040 8081 	bne.w	8102ca2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	4a49      	ldr	r2, [pc, #292]	; (8102ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102ba6:	4293      	cmp	r3, r2
 8102ba8:	d004      	beq.n	8102bb4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	4a48      	ldr	r2, [pc, #288]	; (8102cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102bb0:	4293      	cmp	r3, r2
 8102bb2:	d101      	bne.n	8102bb8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8102bb4:	4b47      	ldr	r3, [pc, #284]	; (8102cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8102bb6:	e000      	b.n	8102bba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8102bb8:	4b47      	ldr	r3, [pc, #284]	; (8102cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8102bba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102bbc:	683b      	ldr	r3, [r7, #0]
 8102bbe:	681b      	ldr	r3, [r3, #0]
 8102bc0:	2b00      	cmp	r3, #0
 8102bc2:	d03b      	beq.n	8102c3c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102bc6:	689b      	ldr	r3, [r3, #8]
 8102bc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102bcc:	683b      	ldr	r3, [r7, #0]
 8102bce:	685b      	ldr	r3, [r3, #4]
 8102bd0:	431a      	orrs	r2, r3
 8102bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102bd4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	4a3c      	ldr	r2, [pc, #240]	; (8102ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102bdc:	4293      	cmp	r3, r2
 8102bde:	d004      	beq.n	8102bea <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	4a3a      	ldr	r2, [pc, #232]	; (8102cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102be6:	4293      	cmp	r3, r2
 8102be8:	d10e      	bne.n	8102c08 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8102bea:	4838      	ldr	r0, [pc, #224]	; (8102ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102bec:	f7ff fed8 	bl	81029a0 <LL_ADC_IsEnabled>
 8102bf0:	4604      	mov	r4, r0
 8102bf2:	4837      	ldr	r0, [pc, #220]	; (8102cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102bf4:	f7ff fed4 	bl	81029a0 <LL_ADC_IsEnabled>
 8102bf8:	4603      	mov	r3, r0
 8102bfa:	4323      	orrs	r3, r4
 8102bfc:	2b00      	cmp	r3, #0
 8102bfe:	bf0c      	ite	eq
 8102c00:	2301      	moveq	r3, #1
 8102c02:	2300      	movne	r3, #0
 8102c04:	b2db      	uxtb	r3, r3
 8102c06:	e008      	b.n	8102c1a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8102c08:	4834      	ldr	r0, [pc, #208]	; (8102cdc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102c0a:	f7ff fec9 	bl	81029a0 <LL_ADC_IsEnabled>
 8102c0e:	4603      	mov	r3, r0
 8102c10:	2b00      	cmp	r3, #0
 8102c12:	bf0c      	ite	eq
 8102c14:	2301      	moveq	r3, #1
 8102c16:	2300      	movne	r3, #0
 8102c18:	b2db      	uxtb	r3, r3
 8102c1a:	2b00      	cmp	r3, #0
 8102c1c:	d04b      	beq.n	8102cb6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8102c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c20:	689b      	ldr	r3, [r3, #8]
 8102c22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102c26:	f023 030f 	bic.w	r3, r3, #15
 8102c2a:	683a      	ldr	r2, [r7, #0]
 8102c2c:	6811      	ldr	r1, [r2, #0]
 8102c2e:	683a      	ldr	r2, [r7, #0]
 8102c30:	6892      	ldr	r2, [r2, #8]
 8102c32:	430a      	orrs	r2, r1
 8102c34:	431a      	orrs	r2, r3
 8102c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c38:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102c3a:	e03c      	b.n	8102cb6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c3e:	689b      	ldr	r3, [r3, #8]
 8102c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	4a1f      	ldr	r2, [pc, #124]	; (8102ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102c4e:	4293      	cmp	r3, r2
 8102c50:	d004      	beq.n	8102c5c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	4a1e      	ldr	r2, [pc, #120]	; (8102cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102c58:	4293      	cmp	r3, r2
 8102c5a:	d10e      	bne.n	8102c7a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8102c5c:	481b      	ldr	r0, [pc, #108]	; (8102ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102c5e:	f7ff fe9f 	bl	81029a0 <LL_ADC_IsEnabled>
 8102c62:	4604      	mov	r4, r0
 8102c64:	481a      	ldr	r0, [pc, #104]	; (8102cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102c66:	f7ff fe9b 	bl	81029a0 <LL_ADC_IsEnabled>
 8102c6a:	4603      	mov	r3, r0
 8102c6c:	4323      	orrs	r3, r4
 8102c6e:	2b00      	cmp	r3, #0
 8102c70:	bf0c      	ite	eq
 8102c72:	2301      	moveq	r3, #1
 8102c74:	2300      	movne	r3, #0
 8102c76:	b2db      	uxtb	r3, r3
 8102c78:	e008      	b.n	8102c8c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8102c7a:	4818      	ldr	r0, [pc, #96]	; (8102cdc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102c7c:	f7ff fe90 	bl	81029a0 <LL_ADC_IsEnabled>
 8102c80:	4603      	mov	r3, r0
 8102c82:	2b00      	cmp	r3, #0
 8102c84:	bf0c      	ite	eq
 8102c86:	2301      	moveq	r3, #1
 8102c88:	2300      	movne	r3, #0
 8102c8a:	b2db      	uxtb	r3, r3
 8102c8c:	2b00      	cmp	r3, #0
 8102c8e:	d012      	beq.n	8102cb6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c92:	689b      	ldr	r3, [r3, #8]
 8102c94:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102c98:	f023 030f 	bic.w	r3, r3, #15
 8102c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8102c9e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102ca0:	e009      	b.n	8102cb6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ca6:	f043 0220 	orr.w	r2, r3, #32
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102cae:	2301      	movs	r3, #1
 8102cb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8102cb4:	e000      	b.n	8102cb8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102cb6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	2200      	movs	r2, #0
 8102cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102cc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8102cc4:	4618      	mov	r0, r3
 8102cc6:	377c      	adds	r7, #124	; 0x7c
 8102cc8:	46bd      	mov	sp, r7
 8102cca:	bd90      	pop	{r4, r7, pc}
 8102ccc:	40022000 	.word	0x40022000
 8102cd0:	40022100 	.word	0x40022100
 8102cd4:	40022300 	.word	0x40022300
 8102cd8:	58026300 	.word	0x58026300
 8102cdc:	58026000 	.word	0x58026000

08102ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102ce0:	b480      	push	{r7}
 8102ce2:	b085      	sub	sp, #20
 8102ce4:	af00      	add	r7, sp, #0
 8102ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	f003 0307 	and.w	r3, r3, #7
 8102cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102cf0:	4b0c      	ldr	r3, [pc, #48]	; (8102d24 <__NVIC_SetPriorityGrouping+0x44>)
 8102cf2:	68db      	ldr	r3, [r3, #12]
 8102cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102cf6:	68ba      	ldr	r2, [r7, #8]
 8102cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102cfc:	4013      	ands	r3, r2
 8102cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102d00:	68fb      	ldr	r3, [r7, #12]
 8102d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102d04:	68bb      	ldr	r3, [r7, #8]
 8102d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102d12:	4a04      	ldr	r2, [pc, #16]	; (8102d24 <__NVIC_SetPriorityGrouping+0x44>)
 8102d14:	68bb      	ldr	r3, [r7, #8]
 8102d16:	60d3      	str	r3, [r2, #12]
}
 8102d18:	bf00      	nop
 8102d1a:	3714      	adds	r7, #20
 8102d1c:	46bd      	mov	sp, r7
 8102d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d22:	4770      	bx	lr
 8102d24:	e000ed00 	.word	0xe000ed00

08102d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102d28:	b480      	push	{r7}
 8102d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102d2c:	4b04      	ldr	r3, [pc, #16]	; (8102d40 <__NVIC_GetPriorityGrouping+0x18>)
 8102d2e:	68db      	ldr	r3, [r3, #12]
 8102d30:	0a1b      	lsrs	r3, r3, #8
 8102d32:	f003 0307 	and.w	r3, r3, #7
}
 8102d36:	4618      	mov	r0, r3
 8102d38:	46bd      	mov	sp, r7
 8102d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d3e:	4770      	bx	lr
 8102d40:	e000ed00 	.word	0xe000ed00

08102d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102d44:	b480      	push	{r7}
 8102d46:	b083      	sub	sp, #12
 8102d48:	af00      	add	r7, sp, #0
 8102d4a:	4603      	mov	r3, r0
 8102d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d52:	2b00      	cmp	r3, #0
 8102d54:	db0b      	blt.n	8102d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102d56:	88fb      	ldrh	r3, [r7, #6]
 8102d58:	f003 021f 	and.w	r2, r3, #31
 8102d5c:	4907      	ldr	r1, [pc, #28]	; (8102d7c <__NVIC_EnableIRQ+0x38>)
 8102d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d62:	095b      	lsrs	r3, r3, #5
 8102d64:	2001      	movs	r0, #1
 8102d66:	fa00 f202 	lsl.w	r2, r0, r2
 8102d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102d6e:	bf00      	nop
 8102d70:	370c      	adds	r7, #12
 8102d72:	46bd      	mov	sp, r7
 8102d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d78:	4770      	bx	lr
 8102d7a:	bf00      	nop
 8102d7c:	e000e100 	.word	0xe000e100

08102d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102d80:	b480      	push	{r7}
 8102d82:	b083      	sub	sp, #12
 8102d84:	af00      	add	r7, sp, #0
 8102d86:	4603      	mov	r3, r0
 8102d88:	6039      	str	r1, [r7, #0]
 8102d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d90:	2b00      	cmp	r3, #0
 8102d92:	db0a      	blt.n	8102daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102d94:	683b      	ldr	r3, [r7, #0]
 8102d96:	b2da      	uxtb	r2, r3
 8102d98:	490c      	ldr	r1, [pc, #48]	; (8102dcc <__NVIC_SetPriority+0x4c>)
 8102d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d9e:	0112      	lsls	r2, r2, #4
 8102da0:	b2d2      	uxtb	r2, r2
 8102da2:	440b      	add	r3, r1
 8102da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102da8:	e00a      	b.n	8102dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102daa:	683b      	ldr	r3, [r7, #0]
 8102dac:	b2da      	uxtb	r2, r3
 8102dae:	4908      	ldr	r1, [pc, #32]	; (8102dd0 <__NVIC_SetPriority+0x50>)
 8102db0:	88fb      	ldrh	r3, [r7, #6]
 8102db2:	f003 030f 	and.w	r3, r3, #15
 8102db6:	3b04      	subs	r3, #4
 8102db8:	0112      	lsls	r2, r2, #4
 8102dba:	b2d2      	uxtb	r2, r2
 8102dbc:	440b      	add	r3, r1
 8102dbe:	761a      	strb	r2, [r3, #24]
}
 8102dc0:	bf00      	nop
 8102dc2:	370c      	adds	r7, #12
 8102dc4:	46bd      	mov	sp, r7
 8102dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dca:	4770      	bx	lr
 8102dcc:	e000e100 	.word	0xe000e100
 8102dd0:	e000ed00 	.word	0xe000ed00

08102dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102dd4:	b480      	push	{r7}
 8102dd6:	b089      	sub	sp, #36	; 0x24
 8102dd8:	af00      	add	r7, sp, #0
 8102dda:	60f8      	str	r0, [r7, #12]
 8102ddc:	60b9      	str	r1, [r7, #8]
 8102dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	f003 0307 	and.w	r3, r3, #7
 8102de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102de8:	69fb      	ldr	r3, [r7, #28]
 8102dea:	f1c3 0307 	rsb	r3, r3, #7
 8102dee:	2b04      	cmp	r3, #4
 8102df0:	bf28      	it	cs
 8102df2:	2304      	movcs	r3, #4
 8102df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102df6:	69fb      	ldr	r3, [r7, #28]
 8102df8:	3304      	adds	r3, #4
 8102dfa:	2b06      	cmp	r3, #6
 8102dfc:	d902      	bls.n	8102e04 <NVIC_EncodePriority+0x30>
 8102dfe:	69fb      	ldr	r3, [r7, #28]
 8102e00:	3b03      	subs	r3, #3
 8102e02:	e000      	b.n	8102e06 <NVIC_EncodePriority+0x32>
 8102e04:	2300      	movs	r3, #0
 8102e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e08:	f04f 32ff 	mov.w	r2, #4294967295
 8102e0c:	69bb      	ldr	r3, [r7, #24]
 8102e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8102e12:	43da      	mvns	r2, r3
 8102e14:	68bb      	ldr	r3, [r7, #8]
 8102e16:	401a      	ands	r2, r3
 8102e18:	697b      	ldr	r3, [r7, #20]
 8102e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8102e20:	697b      	ldr	r3, [r7, #20]
 8102e22:	fa01 f303 	lsl.w	r3, r1, r3
 8102e26:	43d9      	mvns	r1, r3
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e2c:	4313      	orrs	r3, r2
         );
}
 8102e2e:	4618      	mov	r0, r3
 8102e30:	3724      	adds	r7, #36	; 0x24
 8102e32:	46bd      	mov	sp, r7
 8102e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e38:	4770      	bx	lr

08102e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102e3a:	b580      	push	{r7, lr}
 8102e3c:	b082      	sub	sp, #8
 8102e3e:	af00      	add	r7, sp, #0
 8102e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102e42:	6878      	ldr	r0, [r7, #4]
 8102e44:	f7ff ff4c 	bl	8102ce0 <__NVIC_SetPriorityGrouping>
}
 8102e48:	bf00      	nop
 8102e4a:	3708      	adds	r7, #8
 8102e4c:	46bd      	mov	sp, r7
 8102e4e:	bd80      	pop	{r7, pc}

08102e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102e50:	b580      	push	{r7, lr}
 8102e52:	b086      	sub	sp, #24
 8102e54:	af00      	add	r7, sp, #0
 8102e56:	4603      	mov	r3, r0
 8102e58:	60b9      	str	r1, [r7, #8]
 8102e5a:	607a      	str	r2, [r7, #4]
 8102e5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102e5e:	f7ff ff63 	bl	8102d28 <__NVIC_GetPriorityGrouping>
 8102e62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102e64:	687a      	ldr	r2, [r7, #4]
 8102e66:	68b9      	ldr	r1, [r7, #8]
 8102e68:	6978      	ldr	r0, [r7, #20]
 8102e6a:	f7ff ffb3 	bl	8102dd4 <NVIC_EncodePriority>
 8102e6e:	4602      	mov	r2, r0
 8102e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102e74:	4611      	mov	r1, r2
 8102e76:	4618      	mov	r0, r3
 8102e78:	f7ff ff82 	bl	8102d80 <__NVIC_SetPriority>
}
 8102e7c:	bf00      	nop
 8102e7e:	3718      	adds	r7, #24
 8102e80:	46bd      	mov	sp, r7
 8102e82:	bd80      	pop	{r7, pc}

08102e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102e84:	b580      	push	{r7, lr}
 8102e86:	b082      	sub	sp, #8
 8102e88:	af00      	add	r7, sp, #0
 8102e8a:	4603      	mov	r3, r0
 8102e8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102e92:	4618      	mov	r0, r3
 8102e94:	f7ff ff56 	bl	8102d44 <__NVIC_EnableIRQ>
}
 8102e98:	bf00      	nop
 8102e9a:	3708      	adds	r7, #8
 8102e9c:	46bd      	mov	sp, r7
 8102e9e:	bd80      	pop	{r7, pc}

08102ea0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102ea0:	b480      	push	{r7}
 8102ea2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102ea4:	4b07      	ldr	r3, [pc, #28]	; (8102ec4 <HAL_GetCurrentCPUID+0x24>)
 8102ea6:	681b      	ldr	r3, [r3, #0]
 8102ea8:	091b      	lsrs	r3, r3, #4
 8102eaa:	f003 030f 	and.w	r3, r3, #15
 8102eae:	2b07      	cmp	r3, #7
 8102eb0:	d101      	bne.n	8102eb6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102eb2:	2303      	movs	r3, #3
 8102eb4:	e000      	b.n	8102eb8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102eb6:	2301      	movs	r3, #1
  }
}
 8102eb8:	4618      	mov	r0, r3
 8102eba:	46bd      	mov	sp, r7
 8102ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec0:	4770      	bx	lr
 8102ec2:	bf00      	nop
 8102ec4:	e000ed00 	.word	0xe000ed00

08102ec8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8102ec8:	b580      	push	{r7, lr}
 8102eca:	b086      	sub	sp, #24
 8102ecc:	af00      	add	r7, sp, #0
 8102ece:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102ed0:	f7fe faae 	bl	8101430 <HAL_GetTick>
 8102ed4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	2b00      	cmp	r3, #0
 8102eda:	d101      	bne.n	8102ee0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8102edc:	2301      	movs	r3, #1
 8102ede:	e314      	b.n	810350a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	4a66      	ldr	r2, [pc, #408]	; (8103080 <HAL_DMA_Init+0x1b8>)
 8102ee6:	4293      	cmp	r3, r2
 8102ee8:	d04a      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	681b      	ldr	r3, [r3, #0]
 8102eee:	4a65      	ldr	r2, [pc, #404]	; (8103084 <HAL_DMA_Init+0x1bc>)
 8102ef0:	4293      	cmp	r3, r2
 8102ef2:	d045      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	681b      	ldr	r3, [r3, #0]
 8102ef8:	4a63      	ldr	r2, [pc, #396]	; (8103088 <HAL_DMA_Init+0x1c0>)
 8102efa:	4293      	cmp	r3, r2
 8102efc:	d040      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4a62      	ldr	r2, [pc, #392]	; (810308c <HAL_DMA_Init+0x1c4>)
 8102f04:	4293      	cmp	r3, r2
 8102f06:	d03b      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	4a60      	ldr	r2, [pc, #384]	; (8103090 <HAL_DMA_Init+0x1c8>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d036      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4a5f      	ldr	r2, [pc, #380]	; (8103094 <HAL_DMA_Init+0x1cc>)
 8102f18:	4293      	cmp	r3, r2
 8102f1a:	d031      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	4a5d      	ldr	r2, [pc, #372]	; (8103098 <HAL_DMA_Init+0x1d0>)
 8102f22:	4293      	cmp	r3, r2
 8102f24:	d02c      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	681b      	ldr	r3, [r3, #0]
 8102f2a:	4a5c      	ldr	r2, [pc, #368]	; (810309c <HAL_DMA_Init+0x1d4>)
 8102f2c:	4293      	cmp	r3, r2
 8102f2e:	d027      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	4a5a      	ldr	r2, [pc, #360]	; (81030a0 <HAL_DMA_Init+0x1d8>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d022      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	4a59      	ldr	r2, [pc, #356]	; (81030a4 <HAL_DMA_Init+0x1dc>)
 8102f40:	4293      	cmp	r3, r2
 8102f42:	d01d      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	4a57      	ldr	r2, [pc, #348]	; (81030a8 <HAL_DMA_Init+0x1e0>)
 8102f4a:	4293      	cmp	r3, r2
 8102f4c:	d018      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	4a56      	ldr	r2, [pc, #344]	; (81030ac <HAL_DMA_Init+0x1e4>)
 8102f54:	4293      	cmp	r3, r2
 8102f56:	d013      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	4a54      	ldr	r2, [pc, #336]	; (81030b0 <HAL_DMA_Init+0x1e8>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d00e      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	4a53      	ldr	r2, [pc, #332]	; (81030b4 <HAL_DMA_Init+0x1ec>)
 8102f68:	4293      	cmp	r3, r2
 8102f6a:	d009      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	4a51      	ldr	r2, [pc, #324]	; (81030b8 <HAL_DMA_Init+0x1f0>)
 8102f72:	4293      	cmp	r3, r2
 8102f74:	d004      	beq.n	8102f80 <HAL_DMA_Init+0xb8>
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	681b      	ldr	r3, [r3, #0]
 8102f7a:	4a50      	ldr	r2, [pc, #320]	; (81030bc <HAL_DMA_Init+0x1f4>)
 8102f7c:	4293      	cmp	r3, r2
 8102f7e:	d101      	bne.n	8102f84 <HAL_DMA_Init+0xbc>
 8102f80:	2301      	movs	r3, #1
 8102f82:	e000      	b.n	8102f86 <HAL_DMA_Init+0xbe>
 8102f84:	2300      	movs	r3, #0
 8102f86:	2b00      	cmp	r3, #0
 8102f88:	f000 813b 	beq.w	8103202 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	2202      	movs	r2, #2
 8102f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	2200      	movs	r2, #0
 8102f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a37      	ldr	r2, [pc, #220]	; (8103080 <HAL_DMA_Init+0x1b8>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d04a      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	4a36      	ldr	r2, [pc, #216]	; (8103084 <HAL_DMA_Init+0x1bc>)
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d045      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	4a34      	ldr	r2, [pc, #208]	; (8103088 <HAL_DMA_Init+0x1c0>)
 8102fb6:	4293      	cmp	r3, r2
 8102fb8:	d040      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	4a33      	ldr	r2, [pc, #204]	; (810308c <HAL_DMA_Init+0x1c4>)
 8102fc0:	4293      	cmp	r3, r2
 8102fc2:	d03b      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	4a31      	ldr	r2, [pc, #196]	; (8103090 <HAL_DMA_Init+0x1c8>)
 8102fca:	4293      	cmp	r3, r2
 8102fcc:	d036      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	681b      	ldr	r3, [r3, #0]
 8102fd2:	4a30      	ldr	r2, [pc, #192]	; (8103094 <HAL_DMA_Init+0x1cc>)
 8102fd4:	4293      	cmp	r3, r2
 8102fd6:	d031      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	4a2e      	ldr	r2, [pc, #184]	; (8103098 <HAL_DMA_Init+0x1d0>)
 8102fde:	4293      	cmp	r3, r2
 8102fe0:	d02c      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	4a2d      	ldr	r2, [pc, #180]	; (810309c <HAL_DMA_Init+0x1d4>)
 8102fe8:	4293      	cmp	r3, r2
 8102fea:	d027      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	4a2b      	ldr	r2, [pc, #172]	; (81030a0 <HAL_DMA_Init+0x1d8>)
 8102ff2:	4293      	cmp	r3, r2
 8102ff4:	d022      	beq.n	810303c <HAL_DMA_Init+0x174>
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	681b      	ldr	r3, [r3, #0]
 8102ffa:	4a2a      	ldr	r2, [pc, #168]	; (81030a4 <HAL_DMA_Init+0x1dc>)
 8102ffc:	4293      	cmp	r3, r2
 8102ffe:	d01d      	beq.n	810303c <HAL_DMA_Init+0x174>
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	4a28      	ldr	r2, [pc, #160]	; (81030a8 <HAL_DMA_Init+0x1e0>)
 8103006:	4293      	cmp	r3, r2
 8103008:	d018      	beq.n	810303c <HAL_DMA_Init+0x174>
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	681b      	ldr	r3, [r3, #0]
 810300e:	4a27      	ldr	r2, [pc, #156]	; (81030ac <HAL_DMA_Init+0x1e4>)
 8103010:	4293      	cmp	r3, r2
 8103012:	d013      	beq.n	810303c <HAL_DMA_Init+0x174>
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	4a25      	ldr	r2, [pc, #148]	; (81030b0 <HAL_DMA_Init+0x1e8>)
 810301a:	4293      	cmp	r3, r2
 810301c:	d00e      	beq.n	810303c <HAL_DMA_Init+0x174>
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4a24      	ldr	r2, [pc, #144]	; (81030b4 <HAL_DMA_Init+0x1ec>)
 8103024:	4293      	cmp	r3, r2
 8103026:	d009      	beq.n	810303c <HAL_DMA_Init+0x174>
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	4a22      	ldr	r2, [pc, #136]	; (81030b8 <HAL_DMA_Init+0x1f0>)
 810302e:	4293      	cmp	r3, r2
 8103030:	d004      	beq.n	810303c <HAL_DMA_Init+0x174>
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	4a21      	ldr	r2, [pc, #132]	; (81030bc <HAL_DMA_Init+0x1f4>)
 8103038:	4293      	cmp	r3, r2
 810303a:	d108      	bne.n	810304e <HAL_DMA_Init+0x186>
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	681a      	ldr	r2, [r3, #0]
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	f022 0201 	bic.w	r2, r2, #1
 810304a:	601a      	str	r2, [r3, #0]
 810304c:	e007      	b.n	810305e <HAL_DMA_Init+0x196>
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	681a      	ldr	r2, [r3, #0]
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	f022 0201 	bic.w	r2, r2, #1
 810305c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810305e:	e02f      	b.n	81030c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103060:	f7fe f9e6 	bl	8101430 <HAL_GetTick>
 8103064:	4602      	mov	r2, r0
 8103066:	693b      	ldr	r3, [r7, #16]
 8103068:	1ad3      	subs	r3, r2, r3
 810306a:	2b05      	cmp	r3, #5
 810306c:	d928      	bls.n	81030c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	2220      	movs	r2, #32
 8103072:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	2203      	movs	r2, #3
 8103078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 810307c:	2301      	movs	r3, #1
 810307e:	e244      	b.n	810350a <HAL_DMA_Init+0x642>
 8103080:	40020010 	.word	0x40020010
 8103084:	40020028 	.word	0x40020028
 8103088:	40020040 	.word	0x40020040
 810308c:	40020058 	.word	0x40020058
 8103090:	40020070 	.word	0x40020070
 8103094:	40020088 	.word	0x40020088
 8103098:	400200a0 	.word	0x400200a0
 810309c:	400200b8 	.word	0x400200b8
 81030a0:	40020410 	.word	0x40020410
 81030a4:	40020428 	.word	0x40020428
 81030a8:	40020440 	.word	0x40020440
 81030ac:	40020458 	.word	0x40020458
 81030b0:	40020470 	.word	0x40020470
 81030b4:	40020488 	.word	0x40020488
 81030b8:	400204a0 	.word	0x400204a0
 81030bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	f003 0301 	and.w	r3, r3, #1
 81030ca:	2b00      	cmp	r3, #0
 81030cc:	d1c8      	bne.n	8103060 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	681b      	ldr	r3, [r3, #0]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81030d6:	697a      	ldr	r2, [r7, #20]
 81030d8:	4b84      	ldr	r3, [pc, #528]	; (81032ec <HAL_DMA_Init+0x424>)
 81030da:	4013      	ands	r3, r2
 81030dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81030e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	691b      	ldr	r3, [r3, #16]
 81030ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81030f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	699b      	ldr	r3, [r3, #24]
 81030f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81030fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	6a1b      	ldr	r3, [r3, #32]
 8103104:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8103106:	697a      	ldr	r2, [r7, #20]
 8103108:	4313      	orrs	r3, r2
 810310a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103110:	2b04      	cmp	r3, #4
 8103112:	d107      	bne.n	8103124 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810311c:	4313      	orrs	r3, r2
 810311e:	697a      	ldr	r2, [r7, #20]
 8103120:	4313      	orrs	r3, r2
 8103122:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103124:	4b72      	ldr	r3, [pc, #456]	; (81032f0 <HAL_DMA_Init+0x428>)
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	0c1b      	lsrs	r3, r3, #16
 810312a:	041b      	lsls	r3, r3, #16
 810312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103130:	d328      	bcc.n	8103184 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	685b      	ldr	r3, [r3, #4]
 8103136:	2b28      	cmp	r3, #40	; 0x28
 8103138:	d903      	bls.n	8103142 <HAL_DMA_Init+0x27a>
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	685b      	ldr	r3, [r3, #4]
 810313e:	2b2e      	cmp	r3, #46	; 0x2e
 8103140:	d917      	bls.n	8103172 <HAL_DMA_Init+0x2aa>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	685b      	ldr	r3, [r3, #4]
 8103146:	2b3e      	cmp	r3, #62	; 0x3e
 8103148:	d903      	bls.n	8103152 <HAL_DMA_Init+0x28a>
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	685b      	ldr	r3, [r3, #4]
 810314e:	2b42      	cmp	r3, #66	; 0x42
 8103150:	d90f      	bls.n	8103172 <HAL_DMA_Init+0x2aa>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	685b      	ldr	r3, [r3, #4]
 8103156:	2b46      	cmp	r3, #70	; 0x46
 8103158:	d903      	bls.n	8103162 <HAL_DMA_Init+0x29a>
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	685b      	ldr	r3, [r3, #4]
 810315e:	2b48      	cmp	r3, #72	; 0x48
 8103160:	d907      	bls.n	8103172 <HAL_DMA_Init+0x2aa>
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	685b      	ldr	r3, [r3, #4]
 8103166:	2b4e      	cmp	r3, #78	; 0x4e
 8103168:	d905      	bls.n	8103176 <HAL_DMA_Init+0x2ae>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	685b      	ldr	r3, [r3, #4]
 810316e:	2b52      	cmp	r3, #82	; 0x52
 8103170:	d801      	bhi.n	8103176 <HAL_DMA_Init+0x2ae>
 8103172:	2301      	movs	r3, #1
 8103174:	e000      	b.n	8103178 <HAL_DMA_Init+0x2b0>
 8103176:	2300      	movs	r3, #0
 8103178:	2b00      	cmp	r3, #0
 810317a:	d003      	beq.n	8103184 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 810317c:	697b      	ldr	r3, [r7, #20]
 810317e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103182:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	697a      	ldr	r2, [r7, #20]
 810318a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	695b      	ldr	r3, [r3, #20]
 8103192:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103194:	697b      	ldr	r3, [r7, #20]
 8103196:	f023 0307 	bic.w	r3, r3, #7
 810319a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81031a0:	697a      	ldr	r2, [r7, #20]
 81031a2:	4313      	orrs	r3, r2
 81031a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81031aa:	2b04      	cmp	r3, #4
 81031ac:	d117      	bne.n	81031de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81031b2:	697a      	ldr	r2, [r7, #20]
 81031b4:	4313      	orrs	r3, r2
 81031b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031bc:	2b00      	cmp	r3, #0
 81031be:	d00e      	beq.n	81031de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81031c0:	6878      	ldr	r0, [r7, #4]
 81031c2:	f001 fdcd 	bl	8104d60 <DMA_CheckFifoParam>
 81031c6:	4603      	mov	r3, r0
 81031c8:	2b00      	cmp	r3, #0
 81031ca:	d008      	beq.n	81031de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	2240      	movs	r2, #64	; 0x40
 81031d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	2201      	movs	r2, #1
 81031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81031da:	2301      	movs	r3, #1
 81031dc:	e195      	b.n	810350a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	697a      	ldr	r2, [r7, #20]
 81031e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81031e6:	6878      	ldr	r0, [r7, #4]
 81031e8:	f001 fd08 	bl	8104bfc <DMA_CalcBaseAndBitshift>
 81031ec:	4603      	mov	r3, r0
 81031ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031f4:	f003 031f 	and.w	r3, r3, #31
 81031f8:	223f      	movs	r2, #63	; 0x3f
 81031fa:	409a      	lsls	r2, r3
 81031fc:	68bb      	ldr	r3, [r7, #8]
 81031fe:	609a      	str	r2, [r3, #8]
 8103200:	e0cb      	b.n	810339a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	4a3b      	ldr	r2, [pc, #236]	; (81032f4 <HAL_DMA_Init+0x42c>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d022      	beq.n	8103252 <HAL_DMA_Init+0x38a>
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4a39      	ldr	r2, [pc, #228]	; (81032f8 <HAL_DMA_Init+0x430>)
 8103212:	4293      	cmp	r3, r2
 8103214:	d01d      	beq.n	8103252 <HAL_DMA_Init+0x38a>
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a38      	ldr	r2, [pc, #224]	; (81032fc <HAL_DMA_Init+0x434>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d018      	beq.n	8103252 <HAL_DMA_Init+0x38a>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a36      	ldr	r2, [pc, #216]	; (8103300 <HAL_DMA_Init+0x438>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d013      	beq.n	8103252 <HAL_DMA_Init+0x38a>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a35      	ldr	r2, [pc, #212]	; (8103304 <HAL_DMA_Init+0x43c>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d00e      	beq.n	8103252 <HAL_DMA_Init+0x38a>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a33      	ldr	r2, [pc, #204]	; (8103308 <HAL_DMA_Init+0x440>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d009      	beq.n	8103252 <HAL_DMA_Init+0x38a>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4a32      	ldr	r2, [pc, #200]	; (810330c <HAL_DMA_Init+0x444>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d004      	beq.n	8103252 <HAL_DMA_Init+0x38a>
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a30      	ldr	r2, [pc, #192]	; (8103310 <HAL_DMA_Init+0x448>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d101      	bne.n	8103256 <HAL_DMA_Init+0x38e>
 8103252:	2301      	movs	r3, #1
 8103254:	e000      	b.n	8103258 <HAL_DMA_Init+0x390>
 8103256:	2300      	movs	r3, #0
 8103258:	2b00      	cmp	r3, #0
 810325a:	f000 8095 	beq.w	8103388 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	4a24      	ldr	r2, [pc, #144]	; (81032f4 <HAL_DMA_Init+0x42c>)
 8103264:	4293      	cmp	r3, r2
 8103266:	d021      	beq.n	81032ac <HAL_DMA_Init+0x3e4>
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	4a22      	ldr	r2, [pc, #136]	; (81032f8 <HAL_DMA_Init+0x430>)
 810326e:	4293      	cmp	r3, r2
 8103270:	d01c      	beq.n	81032ac <HAL_DMA_Init+0x3e4>
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	4a21      	ldr	r2, [pc, #132]	; (81032fc <HAL_DMA_Init+0x434>)
 8103278:	4293      	cmp	r3, r2
 810327a:	d017      	beq.n	81032ac <HAL_DMA_Init+0x3e4>
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	4a1f      	ldr	r2, [pc, #124]	; (8103300 <HAL_DMA_Init+0x438>)
 8103282:	4293      	cmp	r3, r2
 8103284:	d012      	beq.n	81032ac <HAL_DMA_Init+0x3e4>
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	4a1e      	ldr	r2, [pc, #120]	; (8103304 <HAL_DMA_Init+0x43c>)
 810328c:	4293      	cmp	r3, r2
 810328e:	d00d      	beq.n	81032ac <HAL_DMA_Init+0x3e4>
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	4a1c      	ldr	r2, [pc, #112]	; (8103308 <HAL_DMA_Init+0x440>)
 8103296:	4293      	cmp	r3, r2
 8103298:	d008      	beq.n	81032ac <HAL_DMA_Init+0x3e4>
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	4a1b      	ldr	r2, [pc, #108]	; (810330c <HAL_DMA_Init+0x444>)
 81032a0:	4293      	cmp	r3, r2
 81032a2:	d003      	beq.n	81032ac <HAL_DMA_Init+0x3e4>
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	4a19      	ldr	r2, [pc, #100]	; (8103310 <HAL_DMA_Init+0x448>)
 81032aa:	4293      	cmp	r3, r2
 81032ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	2202      	movs	r2, #2
 81032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	2200      	movs	r2, #0
 81032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81032c6:	697b      	ldr	r3, [r7, #20]
 81032c8:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81032cc:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81032d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	689b      	ldr	r3, [r3, #8]
 81032d6:	2b40      	cmp	r3, #64	; 0x40
 81032d8:	d01c      	beq.n	8103314 <HAL_DMA_Init+0x44c>
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	689b      	ldr	r3, [r3, #8]
 81032de:	2b80      	cmp	r3, #128	; 0x80
 81032e0:	d102      	bne.n	81032e8 <HAL_DMA_Init+0x420>
 81032e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81032e6:	e016      	b.n	8103316 <HAL_DMA_Init+0x44e>
 81032e8:	2300      	movs	r3, #0
 81032ea:	e014      	b.n	8103316 <HAL_DMA_Init+0x44e>
 81032ec:	fe10803f 	.word	0xfe10803f
 81032f0:	5c001000 	.word	0x5c001000
 81032f4:	58025408 	.word	0x58025408
 81032f8:	5802541c 	.word	0x5802541c
 81032fc:	58025430 	.word	0x58025430
 8103300:	58025444 	.word	0x58025444
 8103304:	58025458 	.word	0x58025458
 8103308:	5802546c 	.word	0x5802546c
 810330c:	58025480 	.word	0x58025480
 8103310:	58025494 	.word	0x58025494
 8103314:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103316:	687a      	ldr	r2, [r7, #4]
 8103318:	68d2      	ldr	r2, [r2, #12]
 810331a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810331c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	691b      	ldr	r3, [r3, #16]
 8103322:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	695b      	ldr	r3, [r3, #20]
 810332a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810332c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	699b      	ldr	r3, [r3, #24]
 8103332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	69db      	ldr	r3, [r3, #28]
 810333a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810333c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	6a1b      	ldr	r3, [r3, #32]
 8103342:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103344:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103346:	697a      	ldr	r2, [r7, #20]
 8103348:	4313      	orrs	r3, r2
 810334a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	697a      	ldr	r2, [r7, #20]
 8103352:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	461a      	mov	r2, r3
 810335a:	4b6e      	ldr	r3, [pc, #440]	; (8103514 <HAL_DMA_Init+0x64c>)
 810335c:	4413      	add	r3, r2
 810335e:	4a6e      	ldr	r2, [pc, #440]	; (8103518 <HAL_DMA_Init+0x650>)
 8103360:	fba2 2303 	umull	r2, r3, r2, r3
 8103364:	091b      	lsrs	r3, r3, #4
 8103366:	009a      	lsls	r2, r3, #2
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810336c:	6878      	ldr	r0, [r7, #4]
 810336e:	f001 fc45 	bl	8104bfc <DMA_CalcBaseAndBitshift>
 8103372:	4603      	mov	r3, r0
 8103374:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810337a:	f003 031f 	and.w	r3, r3, #31
 810337e:	2201      	movs	r2, #1
 8103380:	409a      	lsls	r2, r3
 8103382:	68fb      	ldr	r3, [r7, #12]
 8103384:	605a      	str	r2, [r3, #4]
 8103386:	e008      	b.n	810339a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103388:	687b      	ldr	r3, [r7, #4]
 810338a:	2240      	movs	r2, #64	; 0x40
 810338c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	2203      	movs	r2, #3
 8103392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8103396:	2301      	movs	r3, #1
 8103398:	e0b7      	b.n	810350a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4a5f      	ldr	r2, [pc, #380]	; (810351c <HAL_DMA_Init+0x654>)
 81033a0:	4293      	cmp	r3, r2
 81033a2:	d072      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a5d      	ldr	r2, [pc, #372]	; (8103520 <HAL_DMA_Init+0x658>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d06d      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	4a5c      	ldr	r2, [pc, #368]	; (8103524 <HAL_DMA_Init+0x65c>)
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d068      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	4a5a      	ldr	r2, [pc, #360]	; (8103528 <HAL_DMA_Init+0x660>)
 81033be:	4293      	cmp	r3, r2
 81033c0:	d063      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	4a59      	ldr	r2, [pc, #356]	; (810352c <HAL_DMA_Init+0x664>)
 81033c8:	4293      	cmp	r3, r2
 81033ca:	d05e      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	4a57      	ldr	r2, [pc, #348]	; (8103530 <HAL_DMA_Init+0x668>)
 81033d2:	4293      	cmp	r3, r2
 81033d4:	d059      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4a56      	ldr	r2, [pc, #344]	; (8103534 <HAL_DMA_Init+0x66c>)
 81033dc:	4293      	cmp	r3, r2
 81033de:	d054      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	4a54      	ldr	r2, [pc, #336]	; (8103538 <HAL_DMA_Init+0x670>)
 81033e6:	4293      	cmp	r3, r2
 81033e8:	d04f      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	4a53      	ldr	r2, [pc, #332]	; (810353c <HAL_DMA_Init+0x674>)
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d04a      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	4a51      	ldr	r2, [pc, #324]	; (8103540 <HAL_DMA_Init+0x678>)
 81033fa:	4293      	cmp	r3, r2
 81033fc:	d045      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	4a50      	ldr	r2, [pc, #320]	; (8103544 <HAL_DMA_Init+0x67c>)
 8103404:	4293      	cmp	r3, r2
 8103406:	d040      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	4a4e      	ldr	r2, [pc, #312]	; (8103548 <HAL_DMA_Init+0x680>)
 810340e:	4293      	cmp	r3, r2
 8103410:	d03b      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	4a4d      	ldr	r2, [pc, #308]	; (810354c <HAL_DMA_Init+0x684>)
 8103418:	4293      	cmp	r3, r2
 810341a:	d036      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 810341c:	687b      	ldr	r3, [r7, #4]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	4a4b      	ldr	r2, [pc, #300]	; (8103550 <HAL_DMA_Init+0x688>)
 8103422:	4293      	cmp	r3, r2
 8103424:	d031      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	4a4a      	ldr	r2, [pc, #296]	; (8103554 <HAL_DMA_Init+0x68c>)
 810342c:	4293      	cmp	r3, r2
 810342e:	d02c      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	4a48      	ldr	r2, [pc, #288]	; (8103558 <HAL_DMA_Init+0x690>)
 8103436:	4293      	cmp	r3, r2
 8103438:	d027      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	681b      	ldr	r3, [r3, #0]
 810343e:	4a47      	ldr	r2, [pc, #284]	; (810355c <HAL_DMA_Init+0x694>)
 8103440:	4293      	cmp	r3, r2
 8103442:	d022      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	4a45      	ldr	r2, [pc, #276]	; (8103560 <HAL_DMA_Init+0x698>)
 810344a:	4293      	cmp	r3, r2
 810344c:	d01d      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	681b      	ldr	r3, [r3, #0]
 8103452:	4a44      	ldr	r2, [pc, #272]	; (8103564 <HAL_DMA_Init+0x69c>)
 8103454:	4293      	cmp	r3, r2
 8103456:	d018      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	4a42      	ldr	r2, [pc, #264]	; (8103568 <HAL_DMA_Init+0x6a0>)
 810345e:	4293      	cmp	r3, r2
 8103460:	d013      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	681b      	ldr	r3, [r3, #0]
 8103466:	4a41      	ldr	r2, [pc, #260]	; (810356c <HAL_DMA_Init+0x6a4>)
 8103468:	4293      	cmp	r3, r2
 810346a:	d00e      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	681b      	ldr	r3, [r3, #0]
 8103470:	4a3f      	ldr	r2, [pc, #252]	; (8103570 <HAL_DMA_Init+0x6a8>)
 8103472:	4293      	cmp	r3, r2
 8103474:	d009      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	4a3e      	ldr	r2, [pc, #248]	; (8103574 <HAL_DMA_Init+0x6ac>)
 810347c:	4293      	cmp	r3, r2
 810347e:	d004      	beq.n	810348a <HAL_DMA_Init+0x5c2>
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	4a3c      	ldr	r2, [pc, #240]	; (8103578 <HAL_DMA_Init+0x6b0>)
 8103486:	4293      	cmp	r3, r2
 8103488:	d101      	bne.n	810348e <HAL_DMA_Init+0x5c6>
 810348a:	2301      	movs	r3, #1
 810348c:	e000      	b.n	8103490 <HAL_DMA_Init+0x5c8>
 810348e:	2300      	movs	r3, #0
 8103490:	2b00      	cmp	r3, #0
 8103492:	d032      	beq.n	81034fa <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103494:	6878      	ldr	r0, [r7, #4]
 8103496:	f001 fcdf 	bl	8104e58 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	689b      	ldr	r3, [r3, #8]
 810349e:	2b80      	cmp	r3, #128	; 0x80
 81034a0:	d102      	bne.n	81034a8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	2200      	movs	r2, #0
 81034a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81034a8:	687b      	ldr	r3, [r7, #4]
 81034aa:	685a      	ldr	r2, [r3, #4]
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81034b0:	b2d2      	uxtb	r2, r2
 81034b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81034b8:	687a      	ldr	r2, [r7, #4]
 81034ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81034bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	685b      	ldr	r3, [r3, #4]
 81034c2:	2b00      	cmp	r3, #0
 81034c4:	d010      	beq.n	81034e8 <HAL_DMA_Init+0x620>
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	685b      	ldr	r3, [r3, #4]
 81034ca:	2b08      	cmp	r3, #8
 81034cc:	d80c      	bhi.n	81034e8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81034ce:	6878      	ldr	r0, [r7, #4]
 81034d0:	f001 fd5c 	bl	8104f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034d8:	2200      	movs	r2, #0
 81034da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81034e0:	687a      	ldr	r2, [r7, #4]
 81034e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81034e4:	605a      	str	r2, [r3, #4]
 81034e6:	e008      	b.n	81034fa <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	2200      	movs	r2, #0
 81034ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	2200      	movs	r2, #0
 81034f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	2200      	movs	r2, #0
 81034f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	2200      	movs	r2, #0
 81034fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	2201      	movs	r2, #1
 8103504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8103508:	2300      	movs	r3, #0
}
 810350a:	4618      	mov	r0, r3
 810350c:	3718      	adds	r7, #24
 810350e:	46bd      	mov	sp, r7
 8103510:	bd80      	pop	{r7, pc}
 8103512:	bf00      	nop
 8103514:	a7fdabf8 	.word	0xa7fdabf8
 8103518:	cccccccd 	.word	0xcccccccd
 810351c:	40020010 	.word	0x40020010
 8103520:	40020028 	.word	0x40020028
 8103524:	40020040 	.word	0x40020040
 8103528:	40020058 	.word	0x40020058
 810352c:	40020070 	.word	0x40020070
 8103530:	40020088 	.word	0x40020088
 8103534:	400200a0 	.word	0x400200a0
 8103538:	400200b8 	.word	0x400200b8
 810353c:	40020410 	.word	0x40020410
 8103540:	40020428 	.word	0x40020428
 8103544:	40020440 	.word	0x40020440
 8103548:	40020458 	.word	0x40020458
 810354c:	40020470 	.word	0x40020470
 8103550:	40020488 	.word	0x40020488
 8103554:	400204a0 	.word	0x400204a0
 8103558:	400204b8 	.word	0x400204b8
 810355c:	58025408 	.word	0x58025408
 8103560:	5802541c 	.word	0x5802541c
 8103564:	58025430 	.word	0x58025430
 8103568:	58025444 	.word	0x58025444
 810356c:	58025458 	.word	0x58025458
 8103570:	5802546c 	.word	0x5802546c
 8103574:	58025480 	.word	0x58025480
 8103578:	58025494 	.word	0x58025494

0810357c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810357c:	b580      	push	{r7, lr}
 810357e:	b086      	sub	sp, #24
 8103580:	af00      	add	r7, sp, #0
 8103582:	60f8      	str	r0, [r7, #12]
 8103584:	60b9      	str	r1, [r7, #8]
 8103586:	607a      	str	r2, [r7, #4]
 8103588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810358a:	2300      	movs	r3, #0
 810358c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810358e:	68fb      	ldr	r3, [r7, #12]
 8103590:	2b00      	cmp	r3, #0
 8103592:	d101      	bne.n	8103598 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8103594:	2301      	movs	r3, #1
 8103596:	e226      	b.n	81039e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8103598:	68fb      	ldr	r3, [r7, #12]
 810359a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810359e:	2b01      	cmp	r3, #1
 81035a0:	d101      	bne.n	81035a6 <HAL_DMA_Start_IT+0x2a>
 81035a2:	2302      	movs	r3, #2
 81035a4:	e21f      	b.n	81039e6 <HAL_DMA_Start_IT+0x46a>
 81035a6:	68fb      	ldr	r3, [r7, #12]
 81035a8:	2201      	movs	r2, #1
 81035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81035ae:	68fb      	ldr	r3, [r7, #12]
 81035b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81035b4:	b2db      	uxtb	r3, r3
 81035b6:	2b01      	cmp	r3, #1
 81035b8:	f040 820a 	bne.w	81039d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81035bc:	68fb      	ldr	r3, [r7, #12]
 81035be:	2202      	movs	r2, #2
 81035c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81035c4:	68fb      	ldr	r3, [r7, #12]
 81035c6:	2200      	movs	r2, #0
 81035c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81035ca:	68fb      	ldr	r3, [r7, #12]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	4a68      	ldr	r2, [pc, #416]	; (8103770 <HAL_DMA_Start_IT+0x1f4>)
 81035d0:	4293      	cmp	r3, r2
 81035d2:	d04a      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 81035d4:	68fb      	ldr	r3, [r7, #12]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	4a66      	ldr	r2, [pc, #408]	; (8103774 <HAL_DMA_Start_IT+0x1f8>)
 81035da:	4293      	cmp	r3, r2
 81035dc:	d045      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 81035de:	68fb      	ldr	r3, [r7, #12]
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	4a65      	ldr	r2, [pc, #404]	; (8103778 <HAL_DMA_Start_IT+0x1fc>)
 81035e4:	4293      	cmp	r3, r2
 81035e6:	d040      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 81035e8:	68fb      	ldr	r3, [r7, #12]
 81035ea:	681b      	ldr	r3, [r3, #0]
 81035ec:	4a63      	ldr	r2, [pc, #396]	; (810377c <HAL_DMA_Start_IT+0x200>)
 81035ee:	4293      	cmp	r3, r2
 81035f0:	d03b      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 81035f2:	68fb      	ldr	r3, [r7, #12]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	4a62      	ldr	r2, [pc, #392]	; (8103780 <HAL_DMA_Start_IT+0x204>)
 81035f8:	4293      	cmp	r3, r2
 81035fa:	d036      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 81035fc:	68fb      	ldr	r3, [r7, #12]
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	4a60      	ldr	r2, [pc, #384]	; (8103784 <HAL_DMA_Start_IT+0x208>)
 8103602:	4293      	cmp	r3, r2
 8103604:	d031      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 8103606:	68fb      	ldr	r3, [r7, #12]
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	4a5f      	ldr	r2, [pc, #380]	; (8103788 <HAL_DMA_Start_IT+0x20c>)
 810360c:	4293      	cmp	r3, r2
 810360e:	d02c      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 8103610:	68fb      	ldr	r3, [r7, #12]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	4a5d      	ldr	r2, [pc, #372]	; (810378c <HAL_DMA_Start_IT+0x210>)
 8103616:	4293      	cmp	r3, r2
 8103618:	d027      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 810361a:	68fb      	ldr	r3, [r7, #12]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	4a5c      	ldr	r2, [pc, #368]	; (8103790 <HAL_DMA_Start_IT+0x214>)
 8103620:	4293      	cmp	r3, r2
 8103622:	d022      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 8103624:	68fb      	ldr	r3, [r7, #12]
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	4a5a      	ldr	r2, [pc, #360]	; (8103794 <HAL_DMA_Start_IT+0x218>)
 810362a:	4293      	cmp	r3, r2
 810362c:	d01d      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 810362e:	68fb      	ldr	r3, [r7, #12]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	4a59      	ldr	r2, [pc, #356]	; (8103798 <HAL_DMA_Start_IT+0x21c>)
 8103634:	4293      	cmp	r3, r2
 8103636:	d018      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 8103638:	68fb      	ldr	r3, [r7, #12]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	4a57      	ldr	r2, [pc, #348]	; (810379c <HAL_DMA_Start_IT+0x220>)
 810363e:	4293      	cmp	r3, r2
 8103640:	d013      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 8103642:	68fb      	ldr	r3, [r7, #12]
 8103644:	681b      	ldr	r3, [r3, #0]
 8103646:	4a56      	ldr	r2, [pc, #344]	; (81037a0 <HAL_DMA_Start_IT+0x224>)
 8103648:	4293      	cmp	r3, r2
 810364a:	d00e      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 810364c:	68fb      	ldr	r3, [r7, #12]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	4a54      	ldr	r2, [pc, #336]	; (81037a4 <HAL_DMA_Start_IT+0x228>)
 8103652:	4293      	cmp	r3, r2
 8103654:	d009      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 8103656:	68fb      	ldr	r3, [r7, #12]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	4a53      	ldr	r2, [pc, #332]	; (81037a8 <HAL_DMA_Start_IT+0x22c>)
 810365c:	4293      	cmp	r3, r2
 810365e:	d004      	beq.n	810366a <HAL_DMA_Start_IT+0xee>
 8103660:	68fb      	ldr	r3, [r7, #12]
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	4a51      	ldr	r2, [pc, #324]	; (81037ac <HAL_DMA_Start_IT+0x230>)
 8103666:	4293      	cmp	r3, r2
 8103668:	d108      	bne.n	810367c <HAL_DMA_Start_IT+0x100>
 810366a:	68fb      	ldr	r3, [r7, #12]
 810366c:	681b      	ldr	r3, [r3, #0]
 810366e:	681a      	ldr	r2, [r3, #0]
 8103670:	68fb      	ldr	r3, [r7, #12]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	f022 0201 	bic.w	r2, r2, #1
 8103678:	601a      	str	r2, [r3, #0]
 810367a:	e007      	b.n	810368c <HAL_DMA_Start_IT+0x110>
 810367c:	68fb      	ldr	r3, [r7, #12]
 810367e:	681b      	ldr	r3, [r3, #0]
 8103680:	681a      	ldr	r2, [r3, #0]
 8103682:	68fb      	ldr	r3, [r7, #12]
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	f022 0201 	bic.w	r2, r2, #1
 810368a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810368c:	683b      	ldr	r3, [r7, #0]
 810368e:	687a      	ldr	r2, [r7, #4]
 8103690:	68b9      	ldr	r1, [r7, #8]
 8103692:	68f8      	ldr	r0, [r7, #12]
 8103694:	f001 f906 	bl	81048a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103698:	68fb      	ldr	r3, [r7, #12]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a34      	ldr	r2, [pc, #208]	; (8103770 <HAL_DMA_Start_IT+0x1f4>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d04a      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036a2:	68fb      	ldr	r3, [r7, #12]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a33      	ldr	r2, [pc, #204]	; (8103774 <HAL_DMA_Start_IT+0x1f8>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d045      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036ac:	68fb      	ldr	r3, [r7, #12]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a31      	ldr	r2, [pc, #196]	; (8103778 <HAL_DMA_Start_IT+0x1fc>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d040      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036b6:	68fb      	ldr	r3, [r7, #12]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a30      	ldr	r2, [pc, #192]	; (810377c <HAL_DMA_Start_IT+0x200>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d03b      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036c0:	68fb      	ldr	r3, [r7, #12]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a2e      	ldr	r2, [pc, #184]	; (8103780 <HAL_DMA_Start_IT+0x204>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d036      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036ca:	68fb      	ldr	r3, [r7, #12]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a2d      	ldr	r2, [pc, #180]	; (8103784 <HAL_DMA_Start_IT+0x208>)
 81036d0:	4293      	cmp	r3, r2
 81036d2:	d031      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036d4:	68fb      	ldr	r3, [r7, #12]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	4a2b      	ldr	r2, [pc, #172]	; (8103788 <HAL_DMA_Start_IT+0x20c>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d02c      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036de:	68fb      	ldr	r3, [r7, #12]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	4a2a      	ldr	r2, [pc, #168]	; (810378c <HAL_DMA_Start_IT+0x210>)
 81036e4:	4293      	cmp	r3, r2
 81036e6:	d027      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036e8:	68fb      	ldr	r3, [r7, #12]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	4a28      	ldr	r2, [pc, #160]	; (8103790 <HAL_DMA_Start_IT+0x214>)
 81036ee:	4293      	cmp	r3, r2
 81036f0:	d022      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036f2:	68fb      	ldr	r3, [r7, #12]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	4a27      	ldr	r2, [pc, #156]	; (8103794 <HAL_DMA_Start_IT+0x218>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d01d      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 81036fc:	68fb      	ldr	r3, [r7, #12]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4a25      	ldr	r2, [pc, #148]	; (8103798 <HAL_DMA_Start_IT+0x21c>)
 8103702:	4293      	cmp	r3, r2
 8103704:	d018      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 8103706:	68fb      	ldr	r3, [r7, #12]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	4a24      	ldr	r2, [pc, #144]	; (810379c <HAL_DMA_Start_IT+0x220>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d013      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	4a22      	ldr	r2, [pc, #136]	; (81037a0 <HAL_DMA_Start_IT+0x224>)
 8103716:	4293      	cmp	r3, r2
 8103718:	d00e      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 810371a:	68fb      	ldr	r3, [r7, #12]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	4a21      	ldr	r2, [pc, #132]	; (81037a4 <HAL_DMA_Start_IT+0x228>)
 8103720:	4293      	cmp	r3, r2
 8103722:	d009      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 8103724:	68fb      	ldr	r3, [r7, #12]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	4a1f      	ldr	r2, [pc, #124]	; (81037a8 <HAL_DMA_Start_IT+0x22c>)
 810372a:	4293      	cmp	r3, r2
 810372c:	d004      	beq.n	8103738 <HAL_DMA_Start_IT+0x1bc>
 810372e:	68fb      	ldr	r3, [r7, #12]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	4a1e      	ldr	r2, [pc, #120]	; (81037ac <HAL_DMA_Start_IT+0x230>)
 8103734:	4293      	cmp	r3, r2
 8103736:	d101      	bne.n	810373c <HAL_DMA_Start_IT+0x1c0>
 8103738:	2301      	movs	r3, #1
 810373a:	e000      	b.n	810373e <HAL_DMA_Start_IT+0x1c2>
 810373c:	2300      	movs	r3, #0
 810373e:	2b00      	cmp	r3, #0
 8103740:	d036      	beq.n	81037b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103742:	68fb      	ldr	r3, [r7, #12]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	f023 021e 	bic.w	r2, r3, #30
 810374c:	68fb      	ldr	r3, [r7, #12]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	f042 0216 	orr.w	r2, r2, #22
 8103754:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103756:	68fb      	ldr	r3, [r7, #12]
 8103758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810375a:	2b00      	cmp	r3, #0
 810375c:	d03e      	beq.n	81037dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810375e:	68fb      	ldr	r3, [r7, #12]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	681a      	ldr	r2, [r3, #0]
 8103764:	68fb      	ldr	r3, [r7, #12]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	f042 0208 	orr.w	r2, r2, #8
 810376c:	601a      	str	r2, [r3, #0]
 810376e:	e035      	b.n	81037dc <HAL_DMA_Start_IT+0x260>
 8103770:	40020010 	.word	0x40020010
 8103774:	40020028 	.word	0x40020028
 8103778:	40020040 	.word	0x40020040
 810377c:	40020058 	.word	0x40020058
 8103780:	40020070 	.word	0x40020070
 8103784:	40020088 	.word	0x40020088
 8103788:	400200a0 	.word	0x400200a0
 810378c:	400200b8 	.word	0x400200b8
 8103790:	40020410 	.word	0x40020410
 8103794:	40020428 	.word	0x40020428
 8103798:	40020440 	.word	0x40020440
 810379c:	40020458 	.word	0x40020458
 81037a0:	40020470 	.word	0x40020470
 81037a4:	40020488 	.word	0x40020488
 81037a8:	400204a0 	.word	0x400204a0
 81037ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81037b0:	68fb      	ldr	r3, [r7, #12]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	681b      	ldr	r3, [r3, #0]
 81037b6:	f023 020e 	bic.w	r2, r3, #14
 81037ba:	68fb      	ldr	r3, [r7, #12]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	f042 020a 	orr.w	r2, r2, #10
 81037c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81037c4:	68fb      	ldr	r3, [r7, #12]
 81037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81037c8:	2b00      	cmp	r3, #0
 81037ca:	d007      	beq.n	81037dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 81037cc:	68fb      	ldr	r3, [r7, #12]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	681a      	ldr	r2, [r3, #0]
 81037d2:	68fb      	ldr	r3, [r7, #12]
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	f042 0204 	orr.w	r2, r2, #4
 81037da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81037dc:	68fb      	ldr	r3, [r7, #12]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	4a83      	ldr	r2, [pc, #524]	; (81039f0 <HAL_DMA_Start_IT+0x474>)
 81037e2:	4293      	cmp	r3, r2
 81037e4:	d072      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 81037e6:	68fb      	ldr	r3, [r7, #12]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	4a82      	ldr	r2, [pc, #520]	; (81039f4 <HAL_DMA_Start_IT+0x478>)
 81037ec:	4293      	cmp	r3, r2
 81037ee:	d06d      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 81037f0:	68fb      	ldr	r3, [r7, #12]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	4a80      	ldr	r2, [pc, #512]	; (81039f8 <HAL_DMA_Start_IT+0x47c>)
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d068      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 81037fa:	68fb      	ldr	r3, [r7, #12]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	4a7f      	ldr	r2, [pc, #508]	; (81039fc <HAL_DMA_Start_IT+0x480>)
 8103800:	4293      	cmp	r3, r2
 8103802:	d063      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103804:	68fb      	ldr	r3, [r7, #12]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	4a7d      	ldr	r2, [pc, #500]	; (8103a00 <HAL_DMA_Start_IT+0x484>)
 810380a:	4293      	cmp	r3, r2
 810380c:	d05e      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 810380e:	68fb      	ldr	r3, [r7, #12]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	4a7c      	ldr	r2, [pc, #496]	; (8103a04 <HAL_DMA_Start_IT+0x488>)
 8103814:	4293      	cmp	r3, r2
 8103816:	d059      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103818:	68fb      	ldr	r3, [r7, #12]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	4a7a      	ldr	r2, [pc, #488]	; (8103a08 <HAL_DMA_Start_IT+0x48c>)
 810381e:	4293      	cmp	r3, r2
 8103820:	d054      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103822:	68fb      	ldr	r3, [r7, #12]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	4a79      	ldr	r2, [pc, #484]	; (8103a0c <HAL_DMA_Start_IT+0x490>)
 8103828:	4293      	cmp	r3, r2
 810382a:	d04f      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 810382c:	68fb      	ldr	r3, [r7, #12]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	4a77      	ldr	r2, [pc, #476]	; (8103a10 <HAL_DMA_Start_IT+0x494>)
 8103832:	4293      	cmp	r3, r2
 8103834:	d04a      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103836:	68fb      	ldr	r3, [r7, #12]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	4a76      	ldr	r2, [pc, #472]	; (8103a14 <HAL_DMA_Start_IT+0x498>)
 810383c:	4293      	cmp	r3, r2
 810383e:	d045      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103840:	68fb      	ldr	r3, [r7, #12]
 8103842:	681b      	ldr	r3, [r3, #0]
 8103844:	4a74      	ldr	r2, [pc, #464]	; (8103a18 <HAL_DMA_Start_IT+0x49c>)
 8103846:	4293      	cmp	r3, r2
 8103848:	d040      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 810384a:	68fb      	ldr	r3, [r7, #12]
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	4a73      	ldr	r2, [pc, #460]	; (8103a1c <HAL_DMA_Start_IT+0x4a0>)
 8103850:	4293      	cmp	r3, r2
 8103852:	d03b      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103854:	68fb      	ldr	r3, [r7, #12]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	4a71      	ldr	r2, [pc, #452]	; (8103a20 <HAL_DMA_Start_IT+0x4a4>)
 810385a:	4293      	cmp	r3, r2
 810385c:	d036      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 810385e:	68fb      	ldr	r3, [r7, #12]
 8103860:	681b      	ldr	r3, [r3, #0]
 8103862:	4a70      	ldr	r2, [pc, #448]	; (8103a24 <HAL_DMA_Start_IT+0x4a8>)
 8103864:	4293      	cmp	r3, r2
 8103866:	d031      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103868:	68fb      	ldr	r3, [r7, #12]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	4a6e      	ldr	r2, [pc, #440]	; (8103a28 <HAL_DMA_Start_IT+0x4ac>)
 810386e:	4293      	cmp	r3, r2
 8103870:	d02c      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103872:	68fb      	ldr	r3, [r7, #12]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	4a6d      	ldr	r2, [pc, #436]	; (8103a2c <HAL_DMA_Start_IT+0x4b0>)
 8103878:	4293      	cmp	r3, r2
 810387a:	d027      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 810387c:	68fb      	ldr	r3, [r7, #12]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	4a6b      	ldr	r2, [pc, #428]	; (8103a30 <HAL_DMA_Start_IT+0x4b4>)
 8103882:	4293      	cmp	r3, r2
 8103884:	d022      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103886:	68fb      	ldr	r3, [r7, #12]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	4a6a      	ldr	r2, [pc, #424]	; (8103a34 <HAL_DMA_Start_IT+0x4b8>)
 810388c:	4293      	cmp	r3, r2
 810388e:	d01d      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 8103890:	68fb      	ldr	r3, [r7, #12]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	4a68      	ldr	r2, [pc, #416]	; (8103a38 <HAL_DMA_Start_IT+0x4bc>)
 8103896:	4293      	cmp	r3, r2
 8103898:	d018      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 810389a:	68fb      	ldr	r3, [r7, #12]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	4a67      	ldr	r2, [pc, #412]	; (8103a3c <HAL_DMA_Start_IT+0x4c0>)
 81038a0:	4293      	cmp	r3, r2
 81038a2:	d013      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 81038a4:	68fb      	ldr	r3, [r7, #12]
 81038a6:	681b      	ldr	r3, [r3, #0]
 81038a8:	4a65      	ldr	r2, [pc, #404]	; (8103a40 <HAL_DMA_Start_IT+0x4c4>)
 81038aa:	4293      	cmp	r3, r2
 81038ac:	d00e      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 81038ae:	68fb      	ldr	r3, [r7, #12]
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	4a64      	ldr	r2, [pc, #400]	; (8103a44 <HAL_DMA_Start_IT+0x4c8>)
 81038b4:	4293      	cmp	r3, r2
 81038b6:	d009      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 81038b8:	68fb      	ldr	r3, [r7, #12]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	4a62      	ldr	r2, [pc, #392]	; (8103a48 <HAL_DMA_Start_IT+0x4cc>)
 81038be:	4293      	cmp	r3, r2
 81038c0:	d004      	beq.n	81038cc <HAL_DMA_Start_IT+0x350>
 81038c2:	68fb      	ldr	r3, [r7, #12]
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	4a61      	ldr	r2, [pc, #388]	; (8103a4c <HAL_DMA_Start_IT+0x4d0>)
 81038c8:	4293      	cmp	r3, r2
 81038ca:	d101      	bne.n	81038d0 <HAL_DMA_Start_IT+0x354>
 81038cc:	2301      	movs	r3, #1
 81038ce:	e000      	b.n	81038d2 <HAL_DMA_Start_IT+0x356>
 81038d0:	2300      	movs	r3, #0
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d01a      	beq.n	810390c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81038d6:	68fb      	ldr	r3, [r7, #12]
 81038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81038e0:	2b00      	cmp	r3, #0
 81038e2:	d007      	beq.n	81038f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81038e4:	68fb      	ldr	r3, [r7, #12]
 81038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81038e8:	681a      	ldr	r2, [r3, #0]
 81038ea:	68fb      	ldr	r3, [r7, #12]
 81038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81038ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81038f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 81038f4:	68fb      	ldr	r3, [r7, #12]
 81038f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d007      	beq.n	810390c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81038fc:	68fb      	ldr	r3, [r7, #12]
 81038fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103900:	681a      	ldr	r2, [r3, #0]
 8103902:	68fb      	ldr	r3, [r7, #12]
 8103904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810390a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 810390c:	68fb      	ldr	r3, [r7, #12]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	4a37      	ldr	r2, [pc, #220]	; (81039f0 <HAL_DMA_Start_IT+0x474>)
 8103912:	4293      	cmp	r3, r2
 8103914:	d04a      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103916:	68fb      	ldr	r3, [r7, #12]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	4a36      	ldr	r2, [pc, #216]	; (81039f4 <HAL_DMA_Start_IT+0x478>)
 810391c:	4293      	cmp	r3, r2
 810391e:	d045      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103920:	68fb      	ldr	r3, [r7, #12]
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	4a34      	ldr	r2, [pc, #208]	; (81039f8 <HAL_DMA_Start_IT+0x47c>)
 8103926:	4293      	cmp	r3, r2
 8103928:	d040      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 810392a:	68fb      	ldr	r3, [r7, #12]
 810392c:	681b      	ldr	r3, [r3, #0]
 810392e:	4a33      	ldr	r2, [pc, #204]	; (81039fc <HAL_DMA_Start_IT+0x480>)
 8103930:	4293      	cmp	r3, r2
 8103932:	d03b      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103934:	68fb      	ldr	r3, [r7, #12]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	4a31      	ldr	r2, [pc, #196]	; (8103a00 <HAL_DMA_Start_IT+0x484>)
 810393a:	4293      	cmp	r3, r2
 810393c:	d036      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 810393e:	68fb      	ldr	r3, [r7, #12]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	4a30      	ldr	r2, [pc, #192]	; (8103a04 <HAL_DMA_Start_IT+0x488>)
 8103944:	4293      	cmp	r3, r2
 8103946:	d031      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103948:	68fb      	ldr	r3, [r7, #12]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	4a2e      	ldr	r2, [pc, #184]	; (8103a08 <HAL_DMA_Start_IT+0x48c>)
 810394e:	4293      	cmp	r3, r2
 8103950:	d02c      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103952:	68fb      	ldr	r3, [r7, #12]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	4a2d      	ldr	r2, [pc, #180]	; (8103a0c <HAL_DMA_Start_IT+0x490>)
 8103958:	4293      	cmp	r3, r2
 810395a:	d027      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 810395c:	68fb      	ldr	r3, [r7, #12]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a2b      	ldr	r2, [pc, #172]	; (8103a10 <HAL_DMA_Start_IT+0x494>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d022      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103966:	68fb      	ldr	r3, [r7, #12]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	4a2a      	ldr	r2, [pc, #168]	; (8103a14 <HAL_DMA_Start_IT+0x498>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d01d      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103970:	68fb      	ldr	r3, [r7, #12]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	4a28      	ldr	r2, [pc, #160]	; (8103a18 <HAL_DMA_Start_IT+0x49c>)
 8103976:	4293      	cmp	r3, r2
 8103978:	d018      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 810397a:	68fb      	ldr	r3, [r7, #12]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	4a27      	ldr	r2, [pc, #156]	; (8103a1c <HAL_DMA_Start_IT+0x4a0>)
 8103980:	4293      	cmp	r3, r2
 8103982:	d013      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103984:	68fb      	ldr	r3, [r7, #12]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	4a25      	ldr	r2, [pc, #148]	; (8103a20 <HAL_DMA_Start_IT+0x4a4>)
 810398a:	4293      	cmp	r3, r2
 810398c:	d00e      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 810398e:	68fb      	ldr	r3, [r7, #12]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	4a24      	ldr	r2, [pc, #144]	; (8103a24 <HAL_DMA_Start_IT+0x4a8>)
 8103994:	4293      	cmp	r3, r2
 8103996:	d009      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 8103998:	68fb      	ldr	r3, [r7, #12]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	4a22      	ldr	r2, [pc, #136]	; (8103a28 <HAL_DMA_Start_IT+0x4ac>)
 810399e:	4293      	cmp	r3, r2
 81039a0:	d004      	beq.n	81039ac <HAL_DMA_Start_IT+0x430>
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	4a21      	ldr	r2, [pc, #132]	; (8103a2c <HAL_DMA_Start_IT+0x4b0>)
 81039a8:	4293      	cmp	r3, r2
 81039aa:	d108      	bne.n	81039be <HAL_DMA_Start_IT+0x442>
 81039ac:	68fb      	ldr	r3, [r7, #12]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	681a      	ldr	r2, [r3, #0]
 81039b2:	68fb      	ldr	r3, [r7, #12]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	f042 0201 	orr.w	r2, r2, #1
 81039ba:	601a      	str	r2, [r3, #0]
 81039bc:	e012      	b.n	81039e4 <HAL_DMA_Start_IT+0x468>
 81039be:	68fb      	ldr	r3, [r7, #12]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	681a      	ldr	r2, [r3, #0]
 81039c4:	68fb      	ldr	r3, [r7, #12]
 81039c6:	681b      	ldr	r3, [r3, #0]
 81039c8:	f042 0201 	orr.w	r2, r2, #1
 81039cc:	601a      	str	r2, [r3, #0]
 81039ce:	e009      	b.n	81039e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 81039d0:	68fb      	ldr	r3, [r7, #12]
 81039d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81039d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 81039d8:	68fb      	ldr	r3, [r7, #12]
 81039da:	2200      	movs	r2, #0
 81039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 81039e0:	2301      	movs	r3, #1
 81039e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 81039e4:	7dfb      	ldrb	r3, [r7, #23]
}
 81039e6:	4618      	mov	r0, r3
 81039e8:	3718      	adds	r7, #24
 81039ea:	46bd      	mov	sp, r7
 81039ec:	bd80      	pop	{r7, pc}
 81039ee:	bf00      	nop
 81039f0:	40020010 	.word	0x40020010
 81039f4:	40020028 	.word	0x40020028
 81039f8:	40020040 	.word	0x40020040
 81039fc:	40020058 	.word	0x40020058
 8103a00:	40020070 	.word	0x40020070
 8103a04:	40020088 	.word	0x40020088
 8103a08:	400200a0 	.word	0x400200a0
 8103a0c:	400200b8 	.word	0x400200b8
 8103a10:	40020410 	.word	0x40020410
 8103a14:	40020428 	.word	0x40020428
 8103a18:	40020440 	.word	0x40020440
 8103a1c:	40020458 	.word	0x40020458
 8103a20:	40020470 	.word	0x40020470
 8103a24:	40020488 	.word	0x40020488
 8103a28:	400204a0 	.word	0x400204a0
 8103a2c:	400204b8 	.word	0x400204b8
 8103a30:	58025408 	.word	0x58025408
 8103a34:	5802541c 	.word	0x5802541c
 8103a38:	58025430 	.word	0x58025430
 8103a3c:	58025444 	.word	0x58025444
 8103a40:	58025458 	.word	0x58025458
 8103a44:	5802546c 	.word	0x5802546c
 8103a48:	58025480 	.word	0x58025480
 8103a4c:	58025494 	.word	0x58025494

08103a50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8103a50:	b580      	push	{r7, lr}
 8103a52:	b08a      	sub	sp, #40	; 0x28
 8103a54:	af00      	add	r7, sp, #0
 8103a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103a58:	2300      	movs	r3, #0
 8103a5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103a5c:	4b67      	ldr	r3, [pc, #412]	; (8103bfc <HAL_DMA_IRQHandler+0x1ac>)
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	4a67      	ldr	r2, [pc, #412]	; (8103c00 <HAL_DMA_IRQHandler+0x1b0>)
 8103a62:	fba2 2303 	umull	r2, r3, r2, r3
 8103a66:	0a9b      	lsrs	r3, r3, #10
 8103a68:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103a76:	6a3b      	ldr	r3, [r7, #32]
 8103a78:	681b      	ldr	r3, [r3, #0]
 8103a7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103a7c:	69fb      	ldr	r3, [r7, #28]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4a5f      	ldr	r2, [pc, #380]	; (8103c04 <HAL_DMA_IRQHandler+0x1b4>)
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	d04a      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	4a5d      	ldr	r2, [pc, #372]	; (8103c08 <HAL_DMA_IRQHandler+0x1b8>)
 8103a92:	4293      	cmp	r3, r2
 8103a94:	d045      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a5c      	ldr	r2, [pc, #368]	; (8103c0c <HAL_DMA_IRQHandler+0x1bc>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d040      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a5a      	ldr	r2, [pc, #360]	; (8103c10 <HAL_DMA_IRQHandler+0x1c0>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d03b      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4a59      	ldr	r2, [pc, #356]	; (8103c14 <HAL_DMA_IRQHandler+0x1c4>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d036      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a57      	ldr	r2, [pc, #348]	; (8103c18 <HAL_DMA_IRQHandler+0x1c8>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d031      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a56      	ldr	r2, [pc, #344]	; (8103c1c <HAL_DMA_IRQHandler+0x1cc>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d02c      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a54      	ldr	r2, [pc, #336]	; (8103c20 <HAL_DMA_IRQHandler+0x1d0>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d027      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a53      	ldr	r2, [pc, #332]	; (8103c24 <HAL_DMA_IRQHandler+0x1d4>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d022      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a51      	ldr	r2, [pc, #324]	; (8103c28 <HAL_DMA_IRQHandler+0x1d8>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d01d      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a50      	ldr	r2, [pc, #320]	; (8103c2c <HAL_DMA_IRQHandler+0x1dc>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d018      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a4e      	ldr	r2, [pc, #312]	; (8103c30 <HAL_DMA_IRQHandler+0x1e0>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d013      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a4d      	ldr	r2, [pc, #308]	; (8103c34 <HAL_DMA_IRQHandler+0x1e4>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d00e      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	4a4b      	ldr	r2, [pc, #300]	; (8103c38 <HAL_DMA_IRQHandler+0x1e8>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d009      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	4a4a      	ldr	r2, [pc, #296]	; (8103c3c <HAL_DMA_IRQHandler+0x1ec>)
 8103b14:	4293      	cmp	r3, r2
 8103b16:	d004      	beq.n	8103b22 <HAL_DMA_IRQHandler+0xd2>
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	4a48      	ldr	r2, [pc, #288]	; (8103c40 <HAL_DMA_IRQHandler+0x1f0>)
 8103b1e:	4293      	cmp	r3, r2
 8103b20:	d101      	bne.n	8103b26 <HAL_DMA_IRQHandler+0xd6>
 8103b22:	2301      	movs	r3, #1
 8103b24:	e000      	b.n	8103b28 <HAL_DMA_IRQHandler+0xd8>
 8103b26:	2300      	movs	r3, #0
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	f000 842b 	beq.w	8104384 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b32:	f003 031f 	and.w	r3, r3, #31
 8103b36:	2208      	movs	r2, #8
 8103b38:	409a      	lsls	r2, r3
 8103b3a:	69bb      	ldr	r3, [r7, #24]
 8103b3c:	4013      	ands	r3, r2
 8103b3e:	2b00      	cmp	r3, #0
 8103b40:	f000 80a2 	beq.w	8103c88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	681b      	ldr	r3, [r3, #0]
 8103b48:	4a2e      	ldr	r2, [pc, #184]	; (8103c04 <HAL_DMA_IRQHandler+0x1b4>)
 8103b4a:	4293      	cmp	r3, r2
 8103b4c:	d04a      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	4a2d      	ldr	r2, [pc, #180]	; (8103c08 <HAL_DMA_IRQHandler+0x1b8>)
 8103b54:	4293      	cmp	r3, r2
 8103b56:	d045      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	681b      	ldr	r3, [r3, #0]
 8103b5c:	4a2b      	ldr	r2, [pc, #172]	; (8103c0c <HAL_DMA_IRQHandler+0x1bc>)
 8103b5e:	4293      	cmp	r3, r2
 8103b60:	d040      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	681b      	ldr	r3, [r3, #0]
 8103b66:	4a2a      	ldr	r2, [pc, #168]	; (8103c10 <HAL_DMA_IRQHandler+0x1c0>)
 8103b68:	4293      	cmp	r3, r2
 8103b6a:	d03b      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	4a28      	ldr	r2, [pc, #160]	; (8103c14 <HAL_DMA_IRQHandler+0x1c4>)
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d036      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	4a27      	ldr	r2, [pc, #156]	; (8103c18 <HAL_DMA_IRQHandler+0x1c8>)
 8103b7c:	4293      	cmp	r3, r2
 8103b7e:	d031      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	4a25      	ldr	r2, [pc, #148]	; (8103c1c <HAL_DMA_IRQHandler+0x1cc>)
 8103b86:	4293      	cmp	r3, r2
 8103b88:	d02c      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	4a24      	ldr	r2, [pc, #144]	; (8103c20 <HAL_DMA_IRQHandler+0x1d0>)
 8103b90:	4293      	cmp	r3, r2
 8103b92:	d027      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	4a22      	ldr	r2, [pc, #136]	; (8103c24 <HAL_DMA_IRQHandler+0x1d4>)
 8103b9a:	4293      	cmp	r3, r2
 8103b9c:	d022      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	4a21      	ldr	r2, [pc, #132]	; (8103c28 <HAL_DMA_IRQHandler+0x1d8>)
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d01d      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	4a1f      	ldr	r2, [pc, #124]	; (8103c2c <HAL_DMA_IRQHandler+0x1dc>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d018      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	4a1e      	ldr	r2, [pc, #120]	; (8103c30 <HAL_DMA_IRQHandler+0x1e0>)
 8103bb8:	4293      	cmp	r3, r2
 8103bba:	d013      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	4a1c      	ldr	r2, [pc, #112]	; (8103c34 <HAL_DMA_IRQHandler+0x1e4>)
 8103bc2:	4293      	cmp	r3, r2
 8103bc4:	d00e      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4a1b      	ldr	r2, [pc, #108]	; (8103c38 <HAL_DMA_IRQHandler+0x1e8>)
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d009      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	4a19      	ldr	r2, [pc, #100]	; (8103c3c <HAL_DMA_IRQHandler+0x1ec>)
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d004      	beq.n	8103be4 <HAL_DMA_IRQHandler+0x194>
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	681b      	ldr	r3, [r3, #0]
 8103bde:	4a18      	ldr	r2, [pc, #96]	; (8103c40 <HAL_DMA_IRQHandler+0x1f0>)
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d12f      	bne.n	8103c44 <HAL_DMA_IRQHandler+0x1f4>
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	681b      	ldr	r3, [r3, #0]
 8103bea:	f003 0304 	and.w	r3, r3, #4
 8103bee:	2b00      	cmp	r3, #0
 8103bf0:	bf14      	ite	ne
 8103bf2:	2301      	movne	r3, #1
 8103bf4:	2300      	moveq	r3, #0
 8103bf6:	b2db      	uxtb	r3, r3
 8103bf8:	e02e      	b.n	8103c58 <HAL_DMA_IRQHandler+0x208>
 8103bfa:	bf00      	nop
 8103bfc:	10000000 	.word	0x10000000
 8103c00:	1b4e81b5 	.word	0x1b4e81b5
 8103c04:	40020010 	.word	0x40020010
 8103c08:	40020028 	.word	0x40020028
 8103c0c:	40020040 	.word	0x40020040
 8103c10:	40020058 	.word	0x40020058
 8103c14:	40020070 	.word	0x40020070
 8103c18:	40020088 	.word	0x40020088
 8103c1c:	400200a0 	.word	0x400200a0
 8103c20:	400200b8 	.word	0x400200b8
 8103c24:	40020410 	.word	0x40020410
 8103c28:	40020428 	.word	0x40020428
 8103c2c:	40020440 	.word	0x40020440
 8103c30:	40020458 	.word	0x40020458
 8103c34:	40020470 	.word	0x40020470
 8103c38:	40020488 	.word	0x40020488
 8103c3c:	400204a0 	.word	0x400204a0
 8103c40:	400204b8 	.word	0x400204b8
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	681b      	ldr	r3, [r3, #0]
 8103c48:	681b      	ldr	r3, [r3, #0]
 8103c4a:	f003 0308 	and.w	r3, r3, #8
 8103c4e:	2b00      	cmp	r3, #0
 8103c50:	bf14      	ite	ne
 8103c52:	2301      	movne	r3, #1
 8103c54:	2300      	moveq	r3, #0
 8103c56:	b2db      	uxtb	r3, r3
 8103c58:	2b00      	cmp	r3, #0
 8103c5a:	d015      	beq.n	8103c88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	681a      	ldr	r2, [r3, #0]
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	f022 0204 	bic.w	r2, r2, #4
 8103c6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c70:	f003 031f 	and.w	r3, r3, #31
 8103c74:	2208      	movs	r2, #8
 8103c76:	409a      	lsls	r2, r3
 8103c78:	6a3b      	ldr	r3, [r7, #32]
 8103c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c80:	f043 0201 	orr.w	r2, r3, #1
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c8c:	f003 031f 	and.w	r3, r3, #31
 8103c90:	69ba      	ldr	r2, [r7, #24]
 8103c92:	fa22 f303 	lsr.w	r3, r2, r3
 8103c96:	f003 0301 	and.w	r3, r3, #1
 8103c9a:	2b00      	cmp	r3, #0
 8103c9c:	d06e      	beq.n	8103d7c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	4a69      	ldr	r2, [pc, #420]	; (8103e48 <HAL_DMA_IRQHandler+0x3f8>)
 8103ca4:	4293      	cmp	r3, r2
 8103ca6:	d04a      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	4a67      	ldr	r2, [pc, #412]	; (8103e4c <HAL_DMA_IRQHandler+0x3fc>)
 8103cae:	4293      	cmp	r3, r2
 8103cb0:	d045      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	681b      	ldr	r3, [r3, #0]
 8103cb6:	4a66      	ldr	r2, [pc, #408]	; (8103e50 <HAL_DMA_IRQHandler+0x400>)
 8103cb8:	4293      	cmp	r3, r2
 8103cba:	d040      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	4a64      	ldr	r2, [pc, #400]	; (8103e54 <HAL_DMA_IRQHandler+0x404>)
 8103cc2:	4293      	cmp	r3, r2
 8103cc4:	d03b      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	4a63      	ldr	r2, [pc, #396]	; (8103e58 <HAL_DMA_IRQHandler+0x408>)
 8103ccc:	4293      	cmp	r3, r2
 8103cce:	d036      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	4a61      	ldr	r2, [pc, #388]	; (8103e5c <HAL_DMA_IRQHandler+0x40c>)
 8103cd6:	4293      	cmp	r3, r2
 8103cd8:	d031      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	681b      	ldr	r3, [r3, #0]
 8103cde:	4a60      	ldr	r2, [pc, #384]	; (8103e60 <HAL_DMA_IRQHandler+0x410>)
 8103ce0:	4293      	cmp	r3, r2
 8103ce2:	d02c      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	681b      	ldr	r3, [r3, #0]
 8103ce8:	4a5e      	ldr	r2, [pc, #376]	; (8103e64 <HAL_DMA_IRQHandler+0x414>)
 8103cea:	4293      	cmp	r3, r2
 8103cec:	d027      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681b      	ldr	r3, [r3, #0]
 8103cf2:	4a5d      	ldr	r2, [pc, #372]	; (8103e68 <HAL_DMA_IRQHandler+0x418>)
 8103cf4:	4293      	cmp	r3, r2
 8103cf6:	d022      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	681b      	ldr	r3, [r3, #0]
 8103cfc:	4a5b      	ldr	r2, [pc, #364]	; (8103e6c <HAL_DMA_IRQHandler+0x41c>)
 8103cfe:	4293      	cmp	r3, r2
 8103d00:	d01d      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103d02:	687b      	ldr	r3, [r7, #4]
 8103d04:	681b      	ldr	r3, [r3, #0]
 8103d06:	4a5a      	ldr	r2, [pc, #360]	; (8103e70 <HAL_DMA_IRQHandler+0x420>)
 8103d08:	4293      	cmp	r3, r2
 8103d0a:	d018      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	4a58      	ldr	r2, [pc, #352]	; (8103e74 <HAL_DMA_IRQHandler+0x424>)
 8103d12:	4293      	cmp	r3, r2
 8103d14:	d013      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	681b      	ldr	r3, [r3, #0]
 8103d1a:	4a57      	ldr	r2, [pc, #348]	; (8103e78 <HAL_DMA_IRQHandler+0x428>)
 8103d1c:	4293      	cmp	r3, r2
 8103d1e:	d00e      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	681b      	ldr	r3, [r3, #0]
 8103d24:	4a55      	ldr	r2, [pc, #340]	; (8103e7c <HAL_DMA_IRQHandler+0x42c>)
 8103d26:	4293      	cmp	r3, r2
 8103d28:	d009      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	681b      	ldr	r3, [r3, #0]
 8103d2e:	4a54      	ldr	r2, [pc, #336]	; (8103e80 <HAL_DMA_IRQHandler+0x430>)
 8103d30:	4293      	cmp	r3, r2
 8103d32:	d004      	beq.n	8103d3e <HAL_DMA_IRQHandler+0x2ee>
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	4a52      	ldr	r2, [pc, #328]	; (8103e84 <HAL_DMA_IRQHandler+0x434>)
 8103d3a:	4293      	cmp	r3, r2
 8103d3c:	d10a      	bne.n	8103d54 <HAL_DMA_IRQHandler+0x304>
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	681b      	ldr	r3, [r3, #0]
 8103d42:	695b      	ldr	r3, [r3, #20]
 8103d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103d48:	2b00      	cmp	r3, #0
 8103d4a:	bf14      	ite	ne
 8103d4c:	2301      	movne	r3, #1
 8103d4e:	2300      	moveq	r3, #0
 8103d50:	b2db      	uxtb	r3, r3
 8103d52:	e003      	b.n	8103d5c <HAL_DMA_IRQHandler+0x30c>
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	681b      	ldr	r3, [r3, #0]
 8103d58:	681b      	ldr	r3, [r3, #0]
 8103d5a:	2300      	movs	r3, #0
 8103d5c:	2b00      	cmp	r3, #0
 8103d5e:	d00d      	beq.n	8103d7c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d64:	f003 031f 	and.w	r3, r3, #31
 8103d68:	2201      	movs	r2, #1
 8103d6a:	409a      	lsls	r2, r3
 8103d6c:	6a3b      	ldr	r3, [r7, #32]
 8103d6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d74:	f043 0202 	orr.w	r2, r3, #2
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d80:	f003 031f 	and.w	r3, r3, #31
 8103d84:	2204      	movs	r2, #4
 8103d86:	409a      	lsls	r2, r3
 8103d88:	69bb      	ldr	r3, [r7, #24]
 8103d8a:	4013      	ands	r3, r2
 8103d8c:	2b00      	cmp	r3, #0
 8103d8e:	f000 808f 	beq.w	8103eb0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	4a2c      	ldr	r2, [pc, #176]	; (8103e48 <HAL_DMA_IRQHandler+0x3f8>)
 8103d98:	4293      	cmp	r3, r2
 8103d9a:	d04a      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	4a2a      	ldr	r2, [pc, #168]	; (8103e4c <HAL_DMA_IRQHandler+0x3fc>)
 8103da2:	4293      	cmp	r3, r2
 8103da4:	d045      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	4a29      	ldr	r2, [pc, #164]	; (8103e50 <HAL_DMA_IRQHandler+0x400>)
 8103dac:	4293      	cmp	r3, r2
 8103dae:	d040      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	4a27      	ldr	r2, [pc, #156]	; (8103e54 <HAL_DMA_IRQHandler+0x404>)
 8103db6:	4293      	cmp	r3, r2
 8103db8:	d03b      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	4a26      	ldr	r2, [pc, #152]	; (8103e58 <HAL_DMA_IRQHandler+0x408>)
 8103dc0:	4293      	cmp	r3, r2
 8103dc2:	d036      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	4a24      	ldr	r2, [pc, #144]	; (8103e5c <HAL_DMA_IRQHandler+0x40c>)
 8103dca:	4293      	cmp	r3, r2
 8103dcc:	d031      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	4a23      	ldr	r2, [pc, #140]	; (8103e60 <HAL_DMA_IRQHandler+0x410>)
 8103dd4:	4293      	cmp	r3, r2
 8103dd6:	d02c      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	681b      	ldr	r3, [r3, #0]
 8103ddc:	4a21      	ldr	r2, [pc, #132]	; (8103e64 <HAL_DMA_IRQHandler+0x414>)
 8103dde:	4293      	cmp	r3, r2
 8103de0:	d027      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	4a20      	ldr	r2, [pc, #128]	; (8103e68 <HAL_DMA_IRQHandler+0x418>)
 8103de8:	4293      	cmp	r3, r2
 8103dea:	d022      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	4a1e      	ldr	r2, [pc, #120]	; (8103e6c <HAL_DMA_IRQHandler+0x41c>)
 8103df2:	4293      	cmp	r3, r2
 8103df4:	d01d      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103df6:	687b      	ldr	r3, [r7, #4]
 8103df8:	681b      	ldr	r3, [r3, #0]
 8103dfa:	4a1d      	ldr	r2, [pc, #116]	; (8103e70 <HAL_DMA_IRQHandler+0x420>)
 8103dfc:	4293      	cmp	r3, r2
 8103dfe:	d018      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	4a1b      	ldr	r2, [pc, #108]	; (8103e74 <HAL_DMA_IRQHandler+0x424>)
 8103e06:	4293      	cmp	r3, r2
 8103e08:	d013      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	4a1a      	ldr	r2, [pc, #104]	; (8103e78 <HAL_DMA_IRQHandler+0x428>)
 8103e10:	4293      	cmp	r3, r2
 8103e12:	d00e      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	4a18      	ldr	r2, [pc, #96]	; (8103e7c <HAL_DMA_IRQHandler+0x42c>)
 8103e1a:	4293      	cmp	r3, r2
 8103e1c:	d009      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	4a17      	ldr	r2, [pc, #92]	; (8103e80 <HAL_DMA_IRQHandler+0x430>)
 8103e24:	4293      	cmp	r3, r2
 8103e26:	d004      	beq.n	8103e32 <HAL_DMA_IRQHandler+0x3e2>
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	681b      	ldr	r3, [r3, #0]
 8103e2c:	4a15      	ldr	r2, [pc, #84]	; (8103e84 <HAL_DMA_IRQHandler+0x434>)
 8103e2e:	4293      	cmp	r3, r2
 8103e30:	d12a      	bne.n	8103e88 <HAL_DMA_IRQHandler+0x438>
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	f003 0302 	and.w	r3, r3, #2
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	bf14      	ite	ne
 8103e40:	2301      	movne	r3, #1
 8103e42:	2300      	moveq	r3, #0
 8103e44:	b2db      	uxtb	r3, r3
 8103e46:	e023      	b.n	8103e90 <HAL_DMA_IRQHandler+0x440>
 8103e48:	40020010 	.word	0x40020010
 8103e4c:	40020028 	.word	0x40020028
 8103e50:	40020040 	.word	0x40020040
 8103e54:	40020058 	.word	0x40020058
 8103e58:	40020070 	.word	0x40020070
 8103e5c:	40020088 	.word	0x40020088
 8103e60:	400200a0 	.word	0x400200a0
 8103e64:	400200b8 	.word	0x400200b8
 8103e68:	40020410 	.word	0x40020410
 8103e6c:	40020428 	.word	0x40020428
 8103e70:	40020440 	.word	0x40020440
 8103e74:	40020458 	.word	0x40020458
 8103e78:	40020470 	.word	0x40020470
 8103e7c:	40020488 	.word	0x40020488
 8103e80:	400204a0 	.word	0x400204a0
 8103e84:	400204b8 	.word	0x400204b8
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	2300      	movs	r3, #0
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d00d      	beq.n	8103eb0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e98:	f003 031f 	and.w	r3, r3, #31
 8103e9c:	2204      	movs	r2, #4
 8103e9e:	409a      	lsls	r2, r3
 8103ea0:	6a3b      	ldr	r3, [r7, #32]
 8103ea2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ea8:	f043 0204 	orr.w	r2, r3, #4
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103eb4:	f003 031f 	and.w	r3, r3, #31
 8103eb8:	2210      	movs	r2, #16
 8103eba:	409a      	lsls	r2, r3
 8103ebc:	69bb      	ldr	r3, [r7, #24]
 8103ebe:	4013      	ands	r3, r2
 8103ec0:	2b00      	cmp	r3, #0
 8103ec2:	f000 80a6 	beq.w	8104012 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	4a85      	ldr	r2, [pc, #532]	; (81040e0 <HAL_DMA_IRQHandler+0x690>)
 8103ecc:	4293      	cmp	r3, r2
 8103ece:	d04a      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	4a83      	ldr	r2, [pc, #524]	; (81040e4 <HAL_DMA_IRQHandler+0x694>)
 8103ed6:	4293      	cmp	r3, r2
 8103ed8:	d045      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	681b      	ldr	r3, [r3, #0]
 8103ede:	4a82      	ldr	r2, [pc, #520]	; (81040e8 <HAL_DMA_IRQHandler+0x698>)
 8103ee0:	4293      	cmp	r3, r2
 8103ee2:	d040      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	4a80      	ldr	r2, [pc, #512]	; (81040ec <HAL_DMA_IRQHandler+0x69c>)
 8103eea:	4293      	cmp	r3, r2
 8103eec:	d03b      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	4a7f      	ldr	r2, [pc, #508]	; (81040f0 <HAL_DMA_IRQHandler+0x6a0>)
 8103ef4:	4293      	cmp	r3, r2
 8103ef6:	d036      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	4a7d      	ldr	r2, [pc, #500]	; (81040f4 <HAL_DMA_IRQHandler+0x6a4>)
 8103efe:	4293      	cmp	r3, r2
 8103f00:	d031      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	4a7c      	ldr	r2, [pc, #496]	; (81040f8 <HAL_DMA_IRQHandler+0x6a8>)
 8103f08:	4293      	cmp	r3, r2
 8103f0a:	d02c      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	4a7a      	ldr	r2, [pc, #488]	; (81040fc <HAL_DMA_IRQHandler+0x6ac>)
 8103f12:	4293      	cmp	r3, r2
 8103f14:	d027      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	4a79      	ldr	r2, [pc, #484]	; (8104100 <HAL_DMA_IRQHandler+0x6b0>)
 8103f1c:	4293      	cmp	r3, r2
 8103f1e:	d022      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	4a77      	ldr	r2, [pc, #476]	; (8104104 <HAL_DMA_IRQHandler+0x6b4>)
 8103f26:	4293      	cmp	r3, r2
 8103f28:	d01d      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	681b      	ldr	r3, [r3, #0]
 8103f2e:	4a76      	ldr	r2, [pc, #472]	; (8104108 <HAL_DMA_IRQHandler+0x6b8>)
 8103f30:	4293      	cmp	r3, r2
 8103f32:	d018      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	4a74      	ldr	r2, [pc, #464]	; (810410c <HAL_DMA_IRQHandler+0x6bc>)
 8103f3a:	4293      	cmp	r3, r2
 8103f3c:	d013      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	4a73      	ldr	r2, [pc, #460]	; (8104110 <HAL_DMA_IRQHandler+0x6c0>)
 8103f44:	4293      	cmp	r3, r2
 8103f46:	d00e      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	4a71      	ldr	r2, [pc, #452]	; (8104114 <HAL_DMA_IRQHandler+0x6c4>)
 8103f4e:	4293      	cmp	r3, r2
 8103f50:	d009      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	681b      	ldr	r3, [r3, #0]
 8103f56:	4a70      	ldr	r2, [pc, #448]	; (8104118 <HAL_DMA_IRQHandler+0x6c8>)
 8103f58:	4293      	cmp	r3, r2
 8103f5a:	d004      	beq.n	8103f66 <HAL_DMA_IRQHandler+0x516>
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	4a6e      	ldr	r2, [pc, #440]	; (810411c <HAL_DMA_IRQHandler+0x6cc>)
 8103f62:	4293      	cmp	r3, r2
 8103f64:	d10a      	bne.n	8103f7c <HAL_DMA_IRQHandler+0x52c>
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	f003 0308 	and.w	r3, r3, #8
 8103f70:	2b00      	cmp	r3, #0
 8103f72:	bf14      	ite	ne
 8103f74:	2301      	movne	r3, #1
 8103f76:	2300      	moveq	r3, #0
 8103f78:	b2db      	uxtb	r3, r3
 8103f7a:	e009      	b.n	8103f90 <HAL_DMA_IRQHandler+0x540>
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	f003 0304 	and.w	r3, r3, #4
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	bf14      	ite	ne
 8103f8a:	2301      	movne	r3, #1
 8103f8c:	2300      	moveq	r3, #0
 8103f8e:	b2db      	uxtb	r3, r3
 8103f90:	2b00      	cmp	r3, #0
 8103f92:	d03e      	beq.n	8104012 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f98:	f003 031f 	and.w	r3, r3, #31
 8103f9c:	2210      	movs	r2, #16
 8103f9e:	409a      	lsls	r2, r3
 8103fa0:	6a3b      	ldr	r3, [r7, #32]
 8103fa2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	681b      	ldr	r3, [r3, #0]
 8103faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103fae:	2b00      	cmp	r3, #0
 8103fb0:	d018      	beq.n	8103fe4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103fbc:	2b00      	cmp	r3, #0
 8103fbe:	d108      	bne.n	8103fd2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fc4:	2b00      	cmp	r3, #0
 8103fc6:	d024      	beq.n	8104012 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fcc:	6878      	ldr	r0, [r7, #4]
 8103fce:	4798      	blx	r3
 8103fd0:	e01f      	b.n	8104012 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103fd6:	2b00      	cmp	r3, #0
 8103fd8:	d01b      	beq.n	8104012 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103fde:	6878      	ldr	r0, [r7, #4]
 8103fe0:	4798      	blx	r3
 8103fe2:	e016      	b.n	8104012 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103fee:	2b00      	cmp	r3, #0
 8103ff0:	d107      	bne.n	8104002 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	681a      	ldr	r2, [r3, #0]
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f022 0208 	bic.w	r2, r2, #8
 8104000:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104006:	2b00      	cmp	r3, #0
 8104008:	d003      	beq.n	8104012 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810400e:	6878      	ldr	r0, [r7, #4]
 8104010:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104016:	f003 031f 	and.w	r3, r3, #31
 810401a:	2220      	movs	r2, #32
 810401c:	409a      	lsls	r2, r3
 810401e:	69bb      	ldr	r3, [r7, #24]
 8104020:	4013      	ands	r3, r2
 8104022:	2b00      	cmp	r3, #0
 8104024:	f000 8110 	beq.w	8104248 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	4a2c      	ldr	r2, [pc, #176]	; (81040e0 <HAL_DMA_IRQHandler+0x690>)
 810402e:	4293      	cmp	r3, r2
 8104030:	d04a      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	4a2b      	ldr	r2, [pc, #172]	; (81040e4 <HAL_DMA_IRQHandler+0x694>)
 8104038:	4293      	cmp	r3, r2
 810403a:	d045      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	4a29      	ldr	r2, [pc, #164]	; (81040e8 <HAL_DMA_IRQHandler+0x698>)
 8104042:	4293      	cmp	r3, r2
 8104044:	d040      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4a28      	ldr	r2, [pc, #160]	; (81040ec <HAL_DMA_IRQHandler+0x69c>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d03b      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4a26      	ldr	r2, [pc, #152]	; (81040f0 <HAL_DMA_IRQHandler+0x6a0>)
 8104056:	4293      	cmp	r3, r2
 8104058:	d036      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	4a25      	ldr	r2, [pc, #148]	; (81040f4 <HAL_DMA_IRQHandler+0x6a4>)
 8104060:	4293      	cmp	r3, r2
 8104062:	d031      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	4a23      	ldr	r2, [pc, #140]	; (81040f8 <HAL_DMA_IRQHandler+0x6a8>)
 810406a:	4293      	cmp	r3, r2
 810406c:	d02c      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	681b      	ldr	r3, [r3, #0]
 8104072:	4a22      	ldr	r2, [pc, #136]	; (81040fc <HAL_DMA_IRQHandler+0x6ac>)
 8104074:	4293      	cmp	r3, r2
 8104076:	d027      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	4a20      	ldr	r2, [pc, #128]	; (8104100 <HAL_DMA_IRQHandler+0x6b0>)
 810407e:	4293      	cmp	r3, r2
 8104080:	d022      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	4a1f      	ldr	r2, [pc, #124]	; (8104104 <HAL_DMA_IRQHandler+0x6b4>)
 8104088:	4293      	cmp	r3, r2
 810408a:	d01d      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	681b      	ldr	r3, [r3, #0]
 8104090:	4a1d      	ldr	r2, [pc, #116]	; (8104108 <HAL_DMA_IRQHandler+0x6b8>)
 8104092:	4293      	cmp	r3, r2
 8104094:	d018      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	4a1c      	ldr	r2, [pc, #112]	; (810410c <HAL_DMA_IRQHandler+0x6bc>)
 810409c:	4293      	cmp	r3, r2
 810409e:	d013      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	681b      	ldr	r3, [r3, #0]
 81040a4:	4a1a      	ldr	r2, [pc, #104]	; (8104110 <HAL_DMA_IRQHandler+0x6c0>)
 81040a6:	4293      	cmp	r3, r2
 81040a8:	d00e      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	681b      	ldr	r3, [r3, #0]
 81040ae:	4a19      	ldr	r2, [pc, #100]	; (8104114 <HAL_DMA_IRQHandler+0x6c4>)
 81040b0:	4293      	cmp	r3, r2
 81040b2:	d009      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	4a17      	ldr	r2, [pc, #92]	; (8104118 <HAL_DMA_IRQHandler+0x6c8>)
 81040ba:	4293      	cmp	r3, r2
 81040bc:	d004      	beq.n	81040c8 <HAL_DMA_IRQHandler+0x678>
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	681b      	ldr	r3, [r3, #0]
 81040c2:	4a16      	ldr	r2, [pc, #88]	; (810411c <HAL_DMA_IRQHandler+0x6cc>)
 81040c4:	4293      	cmp	r3, r2
 81040c6:	d12b      	bne.n	8104120 <HAL_DMA_IRQHandler+0x6d0>
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	681b      	ldr	r3, [r3, #0]
 81040cc:	681b      	ldr	r3, [r3, #0]
 81040ce:	f003 0310 	and.w	r3, r3, #16
 81040d2:	2b00      	cmp	r3, #0
 81040d4:	bf14      	ite	ne
 81040d6:	2301      	movne	r3, #1
 81040d8:	2300      	moveq	r3, #0
 81040da:	b2db      	uxtb	r3, r3
 81040dc:	e02a      	b.n	8104134 <HAL_DMA_IRQHandler+0x6e4>
 81040de:	bf00      	nop
 81040e0:	40020010 	.word	0x40020010
 81040e4:	40020028 	.word	0x40020028
 81040e8:	40020040 	.word	0x40020040
 81040ec:	40020058 	.word	0x40020058
 81040f0:	40020070 	.word	0x40020070
 81040f4:	40020088 	.word	0x40020088
 81040f8:	400200a0 	.word	0x400200a0
 81040fc:	400200b8 	.word	0x400200b8
 8104100:	40020410 	.word	0x40020410
 8104104:	40020428 	.word	0x40020428
 8104108:	40020440 	.word	0x40020440
 810410c:	40020458 	.word	0x40020458
 8104110:	40020470 	.word	0x40020470
 8104114:	40020488 	.word	0x40020488
 8104118:	400204a0 	.word	0x400204a0
 810411c:	400204b8 	.word	0x400204b8
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	f003 0302 	and.w	r3, r3, #2
 810412a:	2b00      	cmp	r3, #0
 810412c:	bf14      	ite	ne
 810412e:	2301      	movne	r3, #1
 8104130:	2300      	moveq	r3, #0
 8104132:	b2db      	uxtb	r3, r3
 8104134:	2b00      	cmp	r3, #0
 8104136:	f000 8087 	beq.w	8104248 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810413e:	f003 031f 	and.w	r3, r3, #31
 8104142:	2220      	movs	r2, #32
 8104144:	409a      	lsls	r2, r3
 8104146:	6a3b      	ldr	r3, [r7, #32]
 8104148:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104150:	b2db      	uxtb	r3, r3
 8104152:	2b04      	cmp	r3, #4
 8104154:	d139      	bne.n	81041ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	681a      	ldr	r2, [r3, #0]
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	f022 0216 	bic.w	r2, r2, #22
 8104164:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	695a      	ldr	r2, [r3, #20]
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104174:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810417a:	2b00      	cmp	r3, #0
 810417c:	d103      	bne.n	8104186 <HAL_DMA_IRQHandler+0x736>
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104182:	2b00      	cmp	r3, #0
 8104184:	d007      	beq.n	8104196 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	681a      	ldr	r2, [r3, #0]
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	f022 0208 	bic.w	r2, r2, #8
 8104194:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810419a:	f003 031f 	and.w	r3, r3, #31
 810419e:	223f      	movs	r2, #63	; 0x3f
 81041a0:	409a      	lsls	r2, r3
 81041a2:	6a3b      	ldr	r3, [r7, #32]
 81041a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	2201      	movs	r2, #1
 81041aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	2200      	movs	r2, #0
 81041b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81041ba:	2b00      	cmp	r3, #0
 81041bc:	f000 834a 	beq.w	8104854 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81041c4:	6878      	ldr	r0, [r7, #4]
 81041c6:	4798      	blx	r3
          }
          return;
 81041c8:	e344      	b.n	8104854 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	d018      	beq.n	810420a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81041d8:	687b      	ldr	r3, [r7, #4]
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81041e2:	2b00      	cmp	r3, #0
 81041e4:	d108      	bne.n	81041f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81041ea:	2b00      	cmp	r3, #0
 81041ec:	d02c      	beq.n	8104248 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81041f2:	6878      	ldr	r0, [r7, #4]
 81041f4:	4798      	blx	r3
 81041f6:	e027      	b.n	8104248 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81041fc:	2b00      	cmp	r3, #0
 81041fe:	d023      	beq.n	8104248 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104204:	6878      	ldr	r0, [r7, #4]
 8104206:	4798      	blx	r3
 8104208:	e01e      	b.n	8104248 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810420a:	687b      	ldr	r3, [r7, #4]
 810420c:	681b      	ldr	r3, [r3, #0]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104214:	2b00      	cmp	r3, #0
 8104216:	d10f      	bne.n	8104238 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	681a      	ldr	r2, [r3, #0]
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	681b      	ldr	r3, [r3, #0]
 8104222:	f022 0210 	bic.w	r2, r2, #16
 8104226:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	2201      	movs	r2, #1
 810422c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	2200      	movs	r2, #0
 8104234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810423c:	2b00      	cmp	r3, #0
 810423e:	d003      	beq.n	8104248 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104244:	6878      	ldr	r0, [r7, #4]
 8104246:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810424c:	2b00      	cmp	r3, #0
 810424e:	f000 8306 	beq.w	810485e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104256:	f003 0301 	and.w	r3, r3, #1
 810425a:	2b00      	cmp	r3, #0
 810425c:	f000 8088 	beq.w	8104370 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	2204      	movs	r2, #4
 8104264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	4a7a      	ldr	r2, [pc, #488]	; (8104458 <HAL_DMA_IRQHandler+0xa08>)
 810426e:	4293      	cmp	r3, r2
 8104270:	d04a      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	4a79      	ldr	r2, [pc, #484]	; (810445c <HAL_DMA_IRQHandler+0xa0c>)
 8104278:	4293      	cmp	r3, r2
 810427a:	d045      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a77      	ldr	r2, [pc, #476]	; (8104460 <HAL_DMA_IRQHandler+0xa10>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d040      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	4a76      	ldr	r2, [pc, #472]	; (8104464 <HAL_DMA_IRQHandler+0xa14>)
 810428c:	4293      	cmp	r3, r2
 810428e:	d03b      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 8104290:	687b      	ldr	r3, [r7, #4]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	4a74      	ldr	r2, [pc, #464]	; (8104468 <HAL_DMA_IRQHandler+0xa18>)
 8104296:	4293      	cmp	r3, r2
 8104298:	d036      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	4a73      	ldr	r2, [pc, #460]	; (810446c <HAL_DMA_IRQHandler+0xa1c>)
 81042a0:	4293      	cmp	r3, r2
 81042a2:	d031      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	4a71      	ldr	r2, [pc, #452]	; (8104470 <HAL_DMA_IRQHandler+0xa20>)
 81042aa:	4293      	cmp	r3, r2
 81042ac:	d02c      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	4a70      	ldr	r2, [pc, #448]	; (8104474 <HAL_DMA_IRQHandler+0xa24>)
 81042b4:	4293      	cmp	r3, r2
 81042b6:	d027      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	4a6e      	ldr	r2, [pc, #440]	; (8104478 <HAL_DMA_IRQHandler+0xa28>)
 81042be:	4293      	cmp	r3, r2
 81042c0:	d022      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	4a6d      	ldr	r2, [pc, #436]	; (810447c <HAL_DMA_IRQHandler+0xa2c>)
 81042c8:	4293      	cmp	r3, r2
 81042ca:	d01d      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	4a6b      	ldr	r2, [pc, #428]	; (8104480 <HAL_DMA_IRQHandler+0xa30>)
 81042d2:	4293      	cmp	r3, r2
 81042d4:	d018      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	4a6a      	ldr	r2, [pc, #424]	; (8104484 <HAL_DMA_IRQHandler+0xa34>)
 81042dc:	4293      	cmp	r3, r2
 81042de:	d013      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	4a68      	ldr	r2, [pc, #416]	; (8104488 <HAL_DMA_IRQHandler+0xa38>)
 81042e6:	4293      	cmp	r3, r2
 81042e8:	d00e      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	4a67      	ldr	r2, [pc, #412]	; (810448c <HAL_DMA_IRQHandler+0xa3c>)
 81042f0:	4293      	cmp	r3, r2
 81042f2:	d009      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	4a65      	ldr	r2, [pc, #404]	; (8104490 <HAL_DMA_IRQHandler+0xa40>)
 81042fa:	4293      	cmp	r3, r2
 81042fc:	d004      	beq.n	8104308 <HAL_DMA_IRQHandler+0x8b8>
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	4a64      	ldr	r2, [pc, #400]	; (8104494 <HAL_DMA_IRQHandler+0xa44>)
 8104304:	4293      	cmp	r3, r2
 8104306:	d108      	bne.n	810431a <HAL_DMA_IRQHandler+0x8ca>
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	681a      	ldr	r2, [r3, #0]
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	f022 0201 	bic.w	r2, r2, #1
 8104316:	601a      	str	r2, [r3, #0]
 8104318:	e007      	b.n	810432a <HAL_DMA_IRQHandler+0x8da>
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	681b      	ldr	r3, [r3, #0]
 810431e:	681a      	ldr	r2, [r3, #0]
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	f022 0201 	bic.w	r2, r2, #1
 8104328:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810432a:	68fb      	ldr	r3, [r7, #12]
 810432c:	3301      	adds	r3, #1
 810432e:	60fb      	str	r3, [r7, #12]
 8104330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104332:	429a      	cmp	r2, r3
 8104334:	d307      	bcc.n	8104346 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	f003 0301 	and.w	r3, r3, #1
 8104340:	2b00      	cmp	r3, #0
 8104342:	d1f2      	bne.n	810432a <HAL_DMA_IRQHandler+0x8da>
 8104344:	e000      	b.n	8104348 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8104346:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	f003 0301 	and.w	r3, r3, #1
 8104352:	2b00      	cmp	r3, #0
 8104354:	d004      	beq.n	8104360 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	2203      	movs	r2, #3
 810435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 810435e:	e003      	b.n	8104368 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	2201      	movs	r2, #1
 8104364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	2200      	movs	r2, #0
 810436c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104374:	2b00      	cmp	r3, #0
 8104376:	f000 8272 	beq.w	810485e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810437e:	6878      	ldr	r0, [r7, #4]
 8104380:	4798      	blx	r3
 8104382:	e26c      	b.n	810485e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a43      	ldr	r2, [pc, #268]	; (8104498 <HAL_DMA_IRQHandler+0xa48>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d022      	beq.n	81043d4 <HAL_DMA_IRQHandler+0x984>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	4a42      	ldr	r2, [pc, #264]	; (810449c <HAL_DMA_IRQHandler+0xa4c>)
 8104394:	4293      	cmp	r3, r2
 8104396:	d01d      	beq.n	81043d4 <HAL_DMA_IRQHandler+0x984>
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	4a40      	ldr	r2, [pc, #256]	; (81044a0 <HAL_DMA_IRQHandler+0xa50>)
 810439e:	4293      	cmp	r3, r2
 81043a0:	d018      	beq.n	81043d4 <HAL_DMA_IRQHandler+0x984>
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	4a3f      	ldr	r2, [pc, #252]	; (81044a4 <HAL_DMA_IRQHandler+0xa54>)
 81043a8:	4293      	cmp	r3, r2
 81043aa:	d013      	beq.n	81043d4 <HAL_DMA_IRQHandler+0x984>
 81043ac:	687b      	ldr	r3, [r7, #4]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	4a3d      	ldr	r2, [pc, #244]	; (81044a8 <HAL_DMA_IRQHandler+0xa58>)
 81043b2:	4293      	cmp	r3, r2
 81043b4:	d00e      	beq.n	81043d4 <HAL_DMA_IRQHandler+0x984>
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a3c      	ldr	r2, [pc, #240]	; (81044ac <HAL_DMA_IRQHandler+0xa5c>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d009      	beq.n	81043d4 <HAL_DMA_IRQHandler+0x984>
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a3a      	ldr	r2, [pc, #232]	; (81044b0 <HAL_DMA_IRQHandler+0xa60>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d004      	beq.n	81043d4 <HAL_DMA_IRQHandler+0x984>
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a39      	ldr	r2, [pc, #228]	; (81044b4 <HAL_DMA_IRQHandler+0xa64>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d101      	bne.n	81043d8 <HAL_DMA_IRQHandler+0x988>
 81043d4:	2301      	movs	r3, #1
 81043d6:	e000      	b.n	81043da <HAL_DMA_IRQHandler+0x98a>
 81043d8:	2300      	movs	r3, #0
 81043da:	2b00      	cmp	r3, #0
 81043dc:	f000 823f 	beq.w	810485e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043ec:	f003 031f 	and.w	r3, r3, #31
 81043f0:	2204      	movs	r2, #4
 81043f2:	409a      	lsls	r2, r3
 81043f4:	697b      	ldr	r3, [r7, #20]
 81043f6:	4013      	ands	r3, r2
 81043f8:	2b00      	cmp	r3, #0
 81043fa:	f000 80cd 	beq.w	8104598 <HAL_DMA_IRQHandler+0xb48>
 81043fe:	693b      	ldr	r3, [r7, #16]
 8104400:	f003 0304 	and.w	r3, r3, #4
 8104404:	2b00      	cmp	r3, #0
 8104406:	f000 80c7 	beq.w	8104598 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810440e:	f003 031f 	and.w	r3, r3, #31
 8104412:	2204      	movs	r2, #4
 8104414:	409a      	lsls	r2, r3
 8104416:	69fb      	ldr	r3, [r7, #28]
 8104418:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810441a:	693b      	ldr	r3, [r7, #16]
 810441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104420:	2b00      	cmp	r3, #0
 8104422:	d049      	beq.n	81044b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104424:	693b      	ldr	r3, [r7, #16]
 8104426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810442a:	2b00      	cmp	r3, #0
 810442c:	d109      	bne.n	8104442 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104432:	2b00      	cmp	r3, #0
 8104434:	f000 8210 	beq.w	8104858 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810443c:	6878      	ldr	r0, [r7, #4]
 810443e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104440:	e20a      	b.n	8104858 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104446:	2b00      	cmp	r3, #0
 8104448:	f000 8206 	beq.w	8104858 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104450:	6878      	ldr	r0, [r7, #4]
 8104452:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104454:	e200      	b.n	8104858 <HAL_DMA_IRQHandler+0xe08>
 8104456:	bf00      	nop
 8104458:	40020010 	.word	0x40020010
 810445c:	40020028 	.word	0x40020028
 8104460:	40020040 	.word	0x40020040
 8104464:	40020058 	.word	0x40020058
 8104468:	40020070 	.word	0x40020070
 810446c:	40020088 	.word	0x40020088
 8104470:	400200a0 	.word	0x400200a0
 8104474:	400200b8 	.word	0x400200b8
 8104478:	40020410 	.word	0x40020410
 810447c:	40020428 	.word	0x40020428
 8104480:	40020440 	.word	0x40020440
 8104484:	40020458 	.word	0x40020458
 8104488:	40020470 	.word	0x40020470
 810448c:	40020488 	.word	0x40020488
 8104490:	400204a0 	.word	0x400204a0
 8104494:	400204b8 	.word	0x400204b8
 8104498:	58025408 	.word	0x58025408
 810449c:	5802541c 	.word	0x5802541c
 81044a0:	58025430 	.word	0x58025430
 81044a4:	58025444 	.word	0x58025444
 81044a8:	58025458 	.word	0x58025458
 81044ac:	5802546c 	.word	0x5802546c
 81044b0:	58025480 	.word	0x58025480
 81044b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81044b8:	693b      	ldr	r3, [r7, #16]
 81044ba:	f003 0320 	and.w	r3, r3, #32
 81044be:	2b00      	cmp	r3, #0
 81044c0:	d160      	bne.n	8104584 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	4a8c      	ldr	r2, [pc, #560]	; (81046f8 <HAL_DMA_IRQHandler+0xca8>)
 81044c8:	4293      	cmp	r3, r2
 81044ca:	d04a      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	4a8a      	ldr	r2, [pc, #552]	; (81046fc <HAL_DMA_IRQHandler+0xcac>)
 81044d2:	4293      	cmp	r3, r2
 81044d4:	d045      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	681b      	ldr	r3, [r3, #0]
 81044da:	4a89      	ldr	r2, [pc, #548]	; (8104700 <HAL_DMA_IRQHandler+0xcb0>)
 81044dc:	4293      	cmp	r3, r2
 81044de:	d040      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	4a87      	ldr	r2, [pc, #540]	; (8104704 <HAL_DMA_IRQHandler+0xcb4>)
 81044e6:	4293      	cmp	r3, r2
 81044e8:	d03b      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	681b      	ldr	r3, [r3, #0]
 81044ee:	4a86      	ldr	r2, [pc, #536]	; (8104708 <HAL_DMA_IRQHandler+0xcb8>)
 81044f0:	4293      	cmp	r3, r2
 81044f2:	d036      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	4a84      	ldr	r2, [pc, #528]	; (810470c <HAL_DMA_IRQHandler+0xcbc>)
 81044fa:	4293      	cmp	r3, r2
 81044fc:	d031      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	4a83      	ldr	r2, [pc, #524]	; (8104710 <HAL_DMA_IRQHandler+0xcc0>)
 8104504:	4293      	cmp	r3, r2
 8104506:	d02c      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	4a81      	ldr	r2, [pc, #516]	; (8104714 <HAL_DMA_IRQHandler+0xcc4>)
 810450e:	4293      	cmp	r3, r2
 8104510:	d027      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	681b      	ldr	r3, [r3, #0]
 8104516:	4a80      	ldr	r2, [pc, #512]	; (8104718 <HAL_DMA_IRQHandler+0xcc8>)
 8104518:	4293      	cmp	r3, r2
 810451a:	d022      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	4a7e      	ldr	r2, [pc, #504]	; (810471c <HAL_DMA_IRQHandler+0xccc>)
 8104522:	4293      	cmp	r3, r2
 8104524:	d01d      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	681b      	ldr	r3, [r3, #0]
 810452a:	4a7d      	ldr	r2, [pc, #500]	; (8104720 <HAL_DMA_IRQHandler+0xcd0>)
 810452c:	4293      	cmp	r3, r2
 810452e:	d018      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	4a7b      	ldr	r2, [pc, #492]	; (8104724 <HAL_DMA_IRQHandler+0xcd4>)
 8104536:	4293      	cmp	r3, r2
 8104538:	d013      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	4a7a      	ldr	r2, [pc, #488]	; (8104728 <HAL_DMA_IRQHandler+0xcd8>)
 8104540:	4293      	cmp	r3, r2
 8104542:	d00e      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	4a78      	ldr	r2, [pc, #480]	; (810472c <HAL_DMA_IRQHandler+0xcdc>)
 810454a:	4293      	cmp	r3, r2
 810454c:	d009      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	4a77      	ldr	r2, [pc, #476]	; (8104730 <HAL_DMA_IRQHandler+0xce0>)
 8104554:	4293      	cmp	r3, r2
 8104556:	d004      	beq.n	8104562 <HAL_DMA_IRQHandler+0xb12>
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	4a75      	ldr	r2, [pc, #468]	; (8104734 <HAL_DMA_IRQHandler+0xce4>)
 810455e:	4293      	cmp	r3, r2
 8104560:	d108      	bne.n	8104574 <HAL_DMA_IRQHandler+0xb24>
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	681b      	ldr	r3, [r3, #0]
 8104566:	681a      	ldr	r2, [r3, #0]
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	f022 0208 	bic.w	r2, r2, #8
 8104570:	601a      	str	r2, [r3, #0]
 8104572:	e007      	b.n	8104584 <HAL_DMA_IRQHandler+0xb34>
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	681a      	ldr	r2, [r3, #0]
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	f022 0204 	bic.w	r2, r2, #4
 8104582:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104588:	2b00      	cmp	r3, #0
 810458a:	f000 8165 	beq.w	8104858 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810458e:	687b      	ldr	r3, [r7, #4]
 8104590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104592:	6878      	ldr	r0, [r7, #4]
 8104594:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104596:	e15f      	b.n	8104858 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810459c:	f003 031f 	and.w	r3, r3, #31
 81045a0:	2202      	movs	r2, #2
 81045a2:	409a      	lsls	r2, r3
 81045a4:	697b      	ldr	r3, [r7, #20]
 81045a6:	4013      	ands	r3, r2
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	f000 80c5 	beq.w	8104738 <HAL_DMA_IRQHandler+0xce8>
 81045ae:	693b      	ldr	r3, [r7, #16]
 81045b0:	f003 0302 	and.w	r3, r3, #2
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	f000 80bf 	beq.w	8104738 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045be:	f003 031f 	and.w	r3, r3, #31
 81045c2:	2202      	movs	r2, #2
 81045c4:	409a      	lsls	r2, r3
 81045c6:	69fb      	ldr	r3, [r7, #28]
 81045c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81045ca:	693b      	ldr	r3, [r7, #16]
 81045cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81045d0:	2b00      	cmp	r3, #0
 81045d2:	d018      	beq.n	8104606 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81045d4:	693b      	ldr	r3, [r7, #16]
 81045d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81045da:	2b00      	cmp	r3, #0
 81045dc:	d109      	bne.n	81045f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045e2:	2b00      	cmp	r3, #0
 81045e4:	f000 813a 	beq.w	810485c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045ec:	6878      	ldr	r0, [r7, #4]
 81045ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81045f0:	e134      	b.n	810485c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045f6:	2b00      	cmp	r3, #0
 81045f8:	f000 8130 	beq.w	810485c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104600:	6878      	ldr	r0, [r7, #4]
 8104602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104604:	e12a      	b.n	810485c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104606:	693b      	ldr	r3, [r7, #16]
 8104608:	f003 0320 	and.w	r3, r3, #32
 810460c:	2b00      	cmp	r3, #0
 810460e:	d168      	bne.n	81046e2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	4a38      	ldr	r2, [pc, #224]	; (81046f8 <HAL_DMA_IRQHandler+0xca8>)
 8104616:	4293      	cmp	r3, r2
 8104618:	d04a      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	4a37      	ldr	r2, [pc, #220]	; (81046fc <HAL_DMA_IRQHandler+0xcac>)
 8104620:	4293      	cmp	r3, r2
 8104622:	d045      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	4a35      	ldr	r2, [pc, #212]	; (8104700 <HAL_DMA_IRQHandler+0xcb0>)
 810462a:	4293      	cmp	r3, r2
 810462c:	d040      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	681b      	ldr	r3, [r3, #0]
 8104632:	4a34      	ldr	r2, [pc, #208]	; (8104704 <HAL_DMA_IRQHandler+0xcb4>)
 8104634:	4293      	cmp	r3, r2
 8104636:	d03b      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	4a32      	ldr	r2, [pc, #200]	; (8104708 <HAL_DMA_IRQHandler+0xcb8>)
 810463e:	4293      	cmp	r3, r2
 8104640:	d036      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	4a31      	ldr	r2, [pc, #196]	; (810470c <HAL_DMA_IRQHandler+0xcbc>)
 8104648:	4293      	cmp	r3, r2
 810464a:	d031      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	4a2f      	ldr	r2, [pc, #188]	; (8104710 <HAL_DMA_IRQHandler+0xcc0>)
 8104652:	4293      	cmp	r3, r2
 8104654:	d02c      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	4a2e      	ldr	r2, [pc, #184]	; (8104714 <HAL_DMA_IRQHandler+0xcc4>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d027      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	4a2c      	ldr	r2, [pc, #176]	; (8104718 <HAL_DMA_IRQHandler+0xcc8>)
 8104666:	4293      	cmp	r3, r2
 8104668:	d022      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	4a2b      	ldr	r2, [pc, #172]	; (810471c <HAL_DMA_IRQHandler+0xccc>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d01d      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	4a29      	ldr	r2, [pc, #164]	; (8104720 <HAL_DMA_IRQHandler+0xcd0>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d018      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	4a28      	ldr	r2, [pc, #160]	; (8104724 <HAL_DMA_IRQHandler+0xcd4>)
 8104684:	4293      	cmp	r3, r2
 8104686:	d013      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	681b      	ldr	r3, [r3, #0]
 810468c:	4a26      	ldr	r2, [pc, #152]	; (8104728 <HAL_DMA_IRQHandler+0xcd8>)
 810468e:	4293      	cmp	r3, r2
 8104690:	d00e      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	4a25      	ldr	r2, [pc, #148]	; (810472c <HAL_DMA_IRQHandler+0xcdc>)
 8104698:	4293      	cmp	r3, r2
 810469a:	d009      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	681b      	ldr	r3, [r3, #0]
 81046a0:	4a23      	ldr	r2, [pc, #140]	; (8104730 <HAL_DMA_IRQHandler+0xce0>)
 81046a2:	4293      	cmp	r3, r2
 81046a4:	d004      	beq.n	81046b0 <HAL_DMA_IRQHandler+0xc60>
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	4a22      	ldr	r2, [pc, #136]	; (8104734 <HAL_DMA_IRQHandler+0xce4>)
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d108      	bne.n	81046c2 <HAL_DMA_IRQHandler+0xc72>
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	681a      	ldr	r2, [r3, #0]
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	f022 0214 	bic.w	r2, r2, #20
 81046be:	601a      	str	r2, [r3, #0]
 81046c0:	e007      	b.n	81046d2 <HAL_DMA_IRQHandler+0xc82>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	681a      	ldr	r2, [r3, #0]
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	681b      	ldr	r3, [r3, #0]
 81046cc:	f022 020a 	bic.w	r2, r2, #10
 81046d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	2201      	movs	r2, #1
 81046d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	2200      	movs	r2, #0
 81046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81046e6:	2b00      	cmp	r3, #0
 81046e8:	f000 80b8 	beq.w	810485c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81046f0:	6878      	ldr	r0, [r7, #4]
 81046f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81046f4:	e0b2      	b.n	810485c <HAL_DMA_IRQHandler+0xe0c>
 81046f6:	bf00      	nop
 81046f8:	40020010 	.word	0x40020010
 81046fc:	40020028 	.word	0x40020028
 8104700:	40020040 	.word	0x40020040
 8104704:	40020058 	.word	0x40020058
 8104708:	40020070 	.word	0x40020070
 810470c:	40020088 	.word	0x40020088
 8104710:	400200a0 	.word	0x400200a0
 8104714:	400200b8 	.word	0x400200b8
 8104718:	40020410 	.word	0x40020410
 810471c:	40020428 	.word	0x40020428
 8104720:	40020440 	.word	0x40020440
 8104724:	40020458 	.word	0x40020458
 8104728:	40020470 	.word	0x40020470
 810472c:	40020488 	.word	0x40020488
 8104730:	400204a0 	.word	0x400204a0
 8104734:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810473c:	f003 031f 	and.w	r3, r3, #31
 8104740:	2208      	movs	r2, #8
 8104742:	409a      	lsls	r2, r3
 8104744:	697b      	ldr	r3, [r7, #20]
 8104746:	4013      	ands	r3, r2
 8104748:	2b00      	cmp	r3, #0
 810474a:	f000 8088 	beq.w	810485e <HAL_DMA_IRQHandler+0xe0e>
 810474e:	693b      	ldr	r3, [r7, #16]
 8104750:	f003 0308 	and.w	r3, r3, #8
 8104754:	2b00      	cmp	r3, #0
 8104756:	f000 8082 	beq.w	810485e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	4a41      	ldr	r2, [pc, #260]	; (8104864 <HAL_DMA_IRQHandler+0xe14>)
 8104760:	4293      	cmp	r3, r2
 8104762:	d04a      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4a3f      	ldr	r2, [pc, #252]	; (8104868 <HAL_DMA_IRQHandler+0xe18>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d045      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	4a3e      	ldr	r2, [pc, #248]	; (810486c <HAL_DMA_IRQHandler+0xe1c>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d040      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a3c      	ldr	r2, [pc, #240]	; (8104870 <HAL_DMA_IRQHandler+0xe20>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d03b      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	4a3b      	ldr	r2, [pc, #236]	; (8104874 <HAL_DMA_IRQHandler+0xe24>)
 8104788:	4293      	cmp	r3, r2
 810478a:	d036      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a39      	ldr	r2, [pc, #228]	; (8104878 <HAL_DMA_IRQHandler+0xe28>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d031      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	4a38      	ldr	r2, [pc, #224]	; (810487c <HAL_DMA_IRQHandler+0xe2c>)
 810479c:	4293      	cmp	r3, r2
 810479e:	d02c      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	4a36      	ldr	r2, [pc, #216]	; (8104880 <HAL_DMA_IRQHandler+0xe30>)
 81047a6:	4293      	cmp	r3, r2
 81047a8:	d027      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	4a35      	ldr	r2, [pc, #212]	; (8104884 <HAL_DMA_IRQHandler+0xe34>)
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d022      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	4a33      	ldr	r2, [pc, #204]	; (8104888 <HAL_DMA_IRQHandler+0xe38>)
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d01d      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	4a32      	ldr	r2, [pc, #200]	; (810488c <HAL_DMA_IRQHandler+0xe3c>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d018      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a30      	ldr	r2, [pc, #192]	; (8104890 <HAL_DMA_IRQHandler+0xe40>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d013      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a2f      	ldr	r2, [pc, #188]	; (8104894 <HAL_DMA_IRQHandler+0xe44>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d00e      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a2d      	ldr	r2, [pc, #180]	; (8104898 <HAL_DMA_IRQHandler+0xe48>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d009      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	4a2c      	ldr	r2, [pc, #176]	; (810489c <HAL_DMA_IRQHandler+0xe4c>)
 81047ec:	4293      	cmp	r3, r2
 81047ee:	d004      	beq.n	81047fa <HAL_DMA_IRQHandler+0xdaa>
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	4a2a      	ldr	r2, [pc, #168]	; (81048a0 <HAL_DMA_IRQHandler+0xe50>)
 81047f6:	4293      	cmp	r3, r2
 81047f8:	d108      	bne.n	810480c <HAL_DMA_IRQHandler+0xdbc>
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	681a      	ldr	r2, [r3, #0]
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	681b      	ldr	r3, [r3, #0]
 8104804:	f022 021c 	bic.w	r2, r2, #28
 8104808:	601a      	str	r2, [r3, #0]
 810480a:	e007      	b.n	810481c <HAL_DMA_IRQHandler+0xdcc>
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	681a      	ldr	r2, [r3, #0]
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	f022 020e 	bic.w	r2, r2, #14
 810481a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104820:	f003 031f 	and.w	r3, r3, #31
 8104824:	2201      	movs	r2, #1
 8104826:	409a      	lsls	r2, r3
 8104828:	69fb      	ldr	r3, [r7, #28]
 810482a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	2201      	movs	r2, #1
 8104830:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	2201      	movs	r2, #1
 8104836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	2200      	movs	r2, #0
 810483e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104846:	2b00      	cmp	r3, #0
 8104848:	d009      	beq.n	810485e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810484e:	6878      	ldr	r0, [r7, #4]
 8104850:	4798      	blx	r3
 8104852:	e004      	b.n	810485e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8104854:	bf00      	nop
 8104856:	e002      	b.n	810485e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104858:	bf00      	nop
 810485a:	e000      	b.n	810485e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810485c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810485e:	3728      	adds	r7, #40	; 0x28
 8104860:	46bd      	mov	sp, r7
 8104862:	bd80      	pop	{r7, pc}
 8104864:	40020010 	.word	0x40020010
 8104868:	40020028 	.word	0x40020028
 810486c:	40020040 	.word	0x40020040
 8104870:	40020058 	.word	0x40020058
 8104874:	40020070 	.word	0x40020070
 8104878:	40020088 	.word	0x40020088
 810487c:	400200a0 	.word	0x400200a0
 8104880:	400200b8 	.word	0x400200b8
 8104884:	40020410 	.word	0x40020410
 8104888:	40020428 	.word	0x40020428
 810488c:	40020440 	.word	0x40020440
 8104890:	40020458 	.word	0x40020458
 8104894:	40020470 	.word	0x40020470
 8104898:	40020488 	.word	0x40020488
 810489c:	400204a0 	.word	0x400204a0
 81048a0:	400204b8 	.word	0x400204b8

081048a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81048a4:	b480      	push	{r7}
 81048a6:	b087      	sub	sp, #28
 81048a8:	af00      	add	r7, sp, #0
 81048aa:	60f8      	str	r0, [r7, #12]
 81048ac:	60b9      	str	r1, [r7, #8]
 81048ae:	607a      	str	r2, [r7, #4]
 81048b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81048b2:	68fb      	ldr	r3, [r7, #12]
 81048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81048b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81048b8:	68fb      	ldr	r3, [r7, #12]
 81048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81048bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81048be:	68fb      	ldr	r3, [r7, #12]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	4a84      	ldr	r2, [pc, #528]	; (8104ad4 <DMA_SetConfig+0x230>)
 81048c4:	4293      	cmp	r3, r2
 81048c6:	d072      	beq.n	81049ae <DMA_SetConfig+0x10a>
 81048c8:	68fb      	ldr	r3, [r7, #12]
 81048ca:	681b      	ldr	r3, [r3, #0]
 81048cc:	4a82      	ldr	r2, [pc, #520]	; (8104ad8 <DMA_SetConfig+0x234>)
 81048ce:	4293      	cmp	r3, r2
 81048d0:	d06d      	beq.n	81049ae <DMA_SetConfig+0x10a>
 81048d2:	68fb      	ldr	r3, [r7, #12]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	4a81      	ldr	r2, [pc, #516]	; (8104adc <DMA_SetConfig+0x238>)
 81048d8:	4293      	cmp	r3, r2
 81048da:	d068      	beq.n	81049ae <DMA_SetConfig+0x10a>
 81048dc:	68fb      	ldr	r3, [r7, #12]
 81048de:	681b      	ldr	r3, [r3, #0]
 81048e0:	4a7f      	ldr	r2, [pc, #508]	; (8104ae0 <DMA_SetConfig+0x23c>)
 81048e2:	4293      	cmp	r3, r2
 81048e4:	d063      	beq.n	81049ae <DMA_SetConfig+0x10a>
 81048e6:	68fb      	ldr	r3, [r7, #12]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	4a7e      	ldr	r2, [pc, #504]	; (8104ae4 <DMA_SetConfig+0x240>)
 81048ec:	4293      	cmp	r3, r2
 81048ee:	d05e      	beq.n	81049ae <DMA_SetConfig+0x10a>
 81048f0:	68fb      	ldr	r3, [r7, #12]
 81048f2:	681b      	ldr	r3, [r3, #0]
 81048f4:	4a7c      	ldr	r2, [pc, #496]	; (8104ae8 <DMA_SetConfig+0x244>)
 81048f6:	4293      	cmp	r3, r2
 81048f8:	d059      	beq.n	81049ae <DMA_SetConfig+0x10a>
 81048fa:	68fb      	ldr	r3, [r7, #12]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	4a7b      	ldr	r2, [pc, #492]	; (8104aec <DMA_SetConfig+0x248>)
 8104900:	4293      	cmp	r3, r2
 8104902:	d054      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104904:	68fb      	ldr	r3, [r7, #12]
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	4a79      	ldr	r2, [pc, #484]	; (8104af0 <DMA_SetConfig+0x24c>)
 810490a:	4293      	cmp	r3, r2
 810490c:	d04f      	beq.n	81049ae <DMA_SetConfig+0x10a>
 810490e:	68fb      	ldr	r3, [r7, #12]
 8104910:	681b      	ldr	r3, [r3, #0]
 8104912:	4a78      	ldr	r2, [pc, #480]	; (8104af4 <DMA_SetConfig+0x250>)
 8104914:	4293      	cmp	r3, r2
 8104916:	d04a      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104918:	68fb      	ldr	r3, [r7, #12]
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	4a76      	ldr	r2, [pc, #472]	; (8104af8 <DMA_SetConfig+0x254>)
 810491e:	4293      	cmp	r3, r2
 8104920:	d045      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104922:	68fb      	ldr	r3, [r7, #12]
 8104924:	681b      	ldr	r3, [r3, #0]
 8104926:	4a75      	ldr	r2, [pc, #468]	; (8104afc <DMA_SetConfig+0x258>)
 8104928:	4293      	cmp	r3, r2
 810492a:	d040      	beq.n	81049ae <DMA_SetConfig+0x10a>
 810492c:	68fb      	ldr	r3, [r7, #12]
 810492e:	681b      	ldr	r3, [r3, #0]
 8104930:	4a73      	ldr	r2, [pc, #460]	; (8104b00 <DMA_SetConfig+0x25c>)
 8104932:	4293      	cmp	r3, r2
 8104934:	d03b      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104936:	68fb      	ldr	r3, [r7, #12]
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	4a72      	ldr	r2, [pc, #456]	; (8104b04 <DMA_SetConfig+0x260>)
 810493c:	4293      	cmp	r3, r2
 810493e:	d036      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104940:	68fb      	ldr	r3, [r7, #12]
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	4a70      	ldr	r2, [pc, #448]	; (8104b08 <DMA_SetConfig+0x264>)
 8104946:	4293      	cmp	r3, r2
 8104948:	d031      	beq.n	81049ae <DMA_SetConfig+0x10a>
 810494a:	68fb      	ldr	r3, [r7, #12]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	4a6f      	ldr	r2, [pc, #444]	; (8104b0c <DMA_SetConfig+0x268>)
 8104950:	4293      	cmp	r3, r2
 8104952:	d02c      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104954:	68fb      	ldr	r3, [r7, #12]
 8104956:	681b      	ldr	r3, [r3, #0]
 8104958:	4a6d      	ldr	r2, [pc, #436]	; (8104b10 <DMA_SetConfig+0x26c>)
 810495a:	4293      	cmp	r3, r2
 810495c:	d027      	beq.n	81049ae <DMA_SetConfig+0x10a>
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	681b      	ldr	r3, [r3, #0]
 8104962:	4a6c      	ldr	r2, [pc, #432]	; (8104b14 <DMA_SetConfig+0x270>)
 8104964:	4293      	cmp	r3, r2
 8104966:	d022      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104968:	68fb      	ldr	r3, [r7, #12]
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	4a6a      	ldr	r2, [pc, #424]	; (8104b18 <DMA_SetConfig+0x274>)
 810496e:	4293      	cmp	r3, r2
 8104970:	d01d      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104972:	68fb      	ldr	r3, [r7, #12]
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	4a69      	ldr	r2, [pc, #420]	; (8104b1c <DMA_SetConfig+0x278>)
 8104978:	4293      	cmp	r3, r2
 810497a:	d018      	beq.n	81049ae <DMA_SetConfig+0x10a>
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	4a67      	ldr	r2, [pc, #412]	; (8104b20 <DMA_SetConfig+0x27c>)
 8104982:	4293      	cmp	r3, r2
 8104984:	d013      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104986:	68fb      	ldr	r3, [r7, #12]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	4a66      	ldr	r2, [pc, #408]	; (8104b24 <DMA_SetConfig+0x280>)
 810498c:	4293      	cmp	r3, r2
 810498e:	d00e      	beq.n	81049ae <DMA_SetConfig+0x10a>
 8104990:	68fb      	ldr	r3, [r7, #12]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	4a64      	ldr	r2, [pc, #400]	; (8104b28 <DMA_SetConfig+0x284>)
 8104996:	4293      	cmp	r3, r2
 8104998:	d009      	beq.n	81049ae <DMA_SetConfig+0x10a>
 810499a:	68fb      	ldr	r3, [r7, #12]
 810499c:	681b      	ldr	r3, [r3, #0]
 810499e:	4a63      	ldr	r2, [pc, #396]	; (8104b2c <DMA_SetConfig+0x288>)
 81049a0:	4293      	cmp	r3, r2
 81049a2:	d004      	beq.n	81049ae <DMA_SetConfig+0x10a>
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	4a61      	ldr	r2, [pc, #388]	; (8104b30 <DMA_SetConfig+0x28c>)
 81049aa:	4293      	cmp	r3, r2
 81049ac:	d101      	bne.n	81049b2 <DMA_SetConfig+0x10e>
 81049ae:	2301      	movs	r3, #1
 81049b0:	e000      	b.n	81049b4 <DMA_SetConfig+0x110>
 81049b2:	2300      	movs	r3, #0
 81049b4:	2b00      	cmp	r3, #0
 81049b6:	d00d      	beq.n	81049d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81049b8:	68fb      	ldr	r3, [r7, #12]
 81049ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81049bc:	68fa      	ldr	r2, [r7, #12]
 81049be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81049c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81049c2:	68fb      	ldr	r3, [r7, #12]
 81049c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81049c6:	2b00      	cmp	r3, #0
 81049c8:	d004      	beq.n	81049d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81049ca:	68fb      	ldr	r3, [r7, #12]
 81049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81049ce:	68fa      	ldr	r2, [r7, #12]
 81049d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81049d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	4a3e      	ldr	r2, [pc, #248]	; (8104ad4 <DMA_SetConfig+0x230>)
 81049da:	4293      	cmp	r3, r2
 81049dc:	d04a      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 81049de:	68fb      	ldr	r3, [r7, #12]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	4a3d      	ldr	r2, [pc, #244]	; (8104ad8 <DMA_SetConfig+0x234>)
 81049e4:	4293      	cmp	r3, r2
 81049e6:	d045      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 81049e8:	68fb      	ldr	r3, [r7, #12]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	4a3b      	ldr	r2, [pc, #236]	; (8104adc <DMA_SetConfig+0x238>)
 81049ee:	4293      	cmp	r3, r2
 81049f0:	d040      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	4a3a      	ldr	r2, [pc, #232]	; (8104ae0 <DMA_SetConfig+0x23c>)
 81049f8:	4293      	cmp	r3, r2
 81049fa:	d03b      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 81049fc:	68fb      	ldr	r3, [r7, #12]
 81049fe:	681b      	ldr	r3, [r3, #0]
 8104a00:	4a38      	ldr	r2, [pc, #224]	; (8104ae4 <DMA_SetConfig+0x240>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d036      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a06:	68fb      	ldr	r3, [r7, #12]
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	4a37      	ldr	r2, [pc, #220]	; (8104ae8 <DMA_SetConfig+0x244>)
 8104a0c:	4293      	cmp	r3, r2
 8104a0e:	d031      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a10:	68fb      	ldr	r3, [r7, #12]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	4a35      	ldr	r2, [pc, #212]	; (8104aec <DMA_SetConfig+0x248>)
 8104a16:	4293      	cmp	r3, r2
 8104a18:	d02c      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a1a:	68fb      	ldr	r3, [r7, #12]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	4a34      	ldr	r2, [pc, #208]	; (8104af0 <DMA_SetConfig+0x24c>)
 8104a20:	4293      	cmp	r3, r2
 8104a22:	d027      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a24:	68fb      	ldr	r3, [r7, #12]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	4a32      	ldr	r2, [pc, #200]	; (8104af4 <DMA_SetConfig+0x250>)
 8104a2a:	4293      	cmp	r3, r2
 8104a2c:	d022      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	4a31      	ldr	r2, [pc, #196]	; (8104af8 <DMA_SetConfig+0x254>)
 8104a34:	4293      	cmp	r3, r2
 8104a36:	d01d      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a38:	68fb      	ldr	r3, [r7, #12]
 8104a3a:	681b      	ldr	r3, [r3, #0]
 8104a3c:	4a2f      	ldr	r2, [pc, #188]	; (8104afc <DMA_SetConfig+0x258>)
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d018      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a42:	68fb      	ldr	r3, [r7, #12]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	4a2e      	ldr	r2, [pc, #184]	; (8104b00 <DMA_SetConfig+0x25c>)
 8104a48:	4293      	cmp	r3, r2
 8104a4a:	d013      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a4c:	68fb      	ldr	r3, [r7, #12]
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	4a2c      	ldr	r2, [pc, #176]	; (8104b04 <DMA_SetConfig+0x260>)
 8104a52:	4293      	cmp	r3, r2
 8104a54:	d00e      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	4a2b      	ldr	r2, [pc, #172]	; (8104b08 <DMA_SetConfig+0x264>)
 8104a5c:	4293      	cmp	r3, r2
 8104a5e:	d009      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	4a29      	ldr	r2, [pc, #164]	; (8104b0c <DMA_SetConfig+0x268>)
 8104a66:	4293      	cmp	r3, r2
 8104a68:	d004      	beq.n	8104a74 <DMA_SetConfig+0x1d0>
 8104a6a:	68fb      	ldr	r3, [r7, #12]
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	4a28      	ldr	r2, [pc, #160]	; (8104b10 <DMA_SetConfig+0x26c>)
 8104a70:	4293      	cmp	r3, r2
 8104a72:	d101      	bne.n	8104a78 <DMA_SetConfig+0x1d4>
 8104a74:	2301      	movs	r3, #1
 8104a76:	e000      	b.n	8104a7a <DMA_SetConfig+0x1d6>
 8104a78:	2300      	movs	r3, #0
 8104a7a:	2b00      	cmp	r3, #0
 8104a7c:	d05a      	beq.n	8104b34 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a82:	f003 031f 	and.w	r3, r3, #31
 8104a86:	223f      	movs	r2, #63	; 0x3f
 8104a88:	409a      	lsls	r2, r3
 8104a8a:	697b      	ldr	r3, [r7, #20]
 8104a8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104a8e:	68fb      	ldr	r3, [r7, #12]
 8104a90:	681b      	ldr	r3, [r3, #0]
 8104a92:	681a      	ldr	r2, [r3, #0]
 8104a94:	68fb      	ldr	r3, [r7, #12]
 8104a96:	681b      	ldr	r3, [r3, #0]
 8104a98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104a9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8104a9e:	68fb      	ldr	r3, [r7, #12]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	683a      	ldr	r2, [r7, #0]
 8104aa4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104aa6:	68fb      	ldr	r3, [r7, #12]
 8104aa8:	689b      	ldr	r3, [r3, #8]
 8104aaa:	2b40      	cmp	r3, #64	; 0x40
 8104aac:	d108      	bne.n	8104ac0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8104aae:	68fb      	ldr	r3, [r7, #12]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	687a      	ldr	r2, [r7, #4]
 8104ab4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8104ab6:	68fb      	ldr	r3, [r7, #12]
 8104ab8:	681b      	ldr	r3, [r3, #0]
 8104aba:	68ba      	ldr	r2, [r7, #8]
 8104abc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104abe:	e087      	b.n	8104bd0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	68ba      	ldr	r2, [r7, #8]
 8104ac6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	687a      	ldr	r2, [r7, #4]
 8104ace:	60da      	str	r2, [r3, #12]
}
 8104ad0:	e07e      	b.n	8104bd0 <DMA_SetConfig+0x32c>
 8104ad2:	bf00      	nop
 8104ad4:	40020010 	.word	0x40020010
 8104ad8:	40020028 	.word	0x40020028
 8104adc:	40020040 	.word	0x40020040
 8104ae0:	40020058 	.word	0x40020058
 8104ae4:	40020070 	.word	0x40020070
 8104ae8:	40020088 	.word	0x40020088
 8104aec:	400200a0 	.word	0x400200a0
 8104af0:	400200b8 	.word	0x400200b8
 8104af4:	40020410 	.word	0x40020410
 8104af8:	40020428 	.word	0x40020428
 8104afc:	40020440 	.word	0x40020440
 8104b00:	40020458 	.word	0x40020458
 8104b04:	40020470 	.word	0x40020470
 8104b08:	40020488 	.word	0x40020488
 8104b0c:	400204a0 	.word	0x400204a0
 8104b10:	400204b8 	.word	0x400204b8
 8104b14:	58025408 	.word	0x58025408
 8104b18:	5802541c 	.word	0x5802541c
 8104b1c:	58025430 	.word	0x58025430
 8104b20:	58025444 	.word	0x58025444
 8104b24:	58025458 	.word	0x58025458
 8104b28:	5802546c 	.word	0x5802546c
 8104b2c:	58025480 	.word	0x58025480
 8104b30:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8104b34:	68fb      	ldr	r3, [r7, #12]
 8104b36:	681b      	ldr	r3, [r3, #0]
 8104b38:	4a28      	ldr	r2, [pc, #160]	; (8104bdc <DMA_SetConfig+0x338>)
 8104b3a:	4293      	cmp	r3, r2
 8104b3c:	d022      	beq.n	8104b84 <DMA_SetConfig+0x2e0>
 8104b3e:	68fb      	ldr	r3, [r7, #12]
 8104b40:	681b      	ldr	r3, [r3, #0]
 8104b42:	4a27      	ldr	r2, [pc, #156]	; (8104be0 <DMA_SetConfig+0x33c>)
 8104b44:	4293      	cmp	r3, r2
 8104b46:	d01d      	beq.n	8104b84 <DMA_SetConfig+0x2e0>
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	681b      	ldr	r3, [r3, #0]
 8104b4c:	4a25      	ldr	r2, [pc, #148]	; (8104be4 <DMA_SetConfig+0x340>)
 8104b4e:	4293      	cmp	r3, r2
 8104b50:	d018      	beq.n	8104b84 <DMA_SetConfig+0x2e0>
 8104b52:	68fb      	ldr	r3, [r7, #12]
 8104b54:	681b      	ldr	r3, [r3, #0]
 8104b56:	4a24      	ldr	r2, [pc, #144]	; (8104be8 <DMA_SetConfig+0x344>)
 8104b58:	4293      	cmp	r3, r2
 8104b5a:	d013      	beq.n	8104b84 <DMA_SetConfig+0x2e0>
 8104b5c:	68fb      	ldr	r3, [r7, #12]
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	4a22      	ldr	r2, [pc, #136]	; (8104bec <DMA_SetConfig+0x348>)
 8104b62:	4293      	cmp	r3, r2
 8104b64:	d00e      	beq.n	8104b84 <DMA_SetConfig+0x2e0>
 8104b66:	68fb      	ldr	r3, [r7, #12]
 8104b68:	681b      	ldr	r3, [r3, #0]
 8104b6a:	4a21      	ldr	r2, [pc, #132]	; (8104bf0 <DMA_SetConfig+0x34c>)
 8104b6c:	4293      	cmp	r3, r2
 8104b6e:	d009      	beq.n	8104b84 <DMA_SetConfig+0x2e0>
 8104b70:	68fb      	ldr	r3, [r7, #12]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	4a1f      	ldr	r2, [pc, #124]	; (8104bf4 <DMA_SetConfig+0x350>)
 8104b76:	4293      	cmp	r3, r2
 8104b78:	d004      	beq.n	8104b84 <DMA_SetConfig+0x2e0>
 8104b7a:	68fb      	ldr	r3, [r7, #12]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	4a1e      	ldr	r2, [pc, #120]	; (8104bf8 <DMA_SetConfig+0x354>)
 8104b80:	4293      	cmp	r3, r2
 8104b82:	d101      	bne.n	8104b88 <DMA_SetConfig+0x2e4>
 8104b84:	2301      	movs	r3, #1
 8104b86:	e000      	b.n	8104b8a <DMA_SetConfig+0x2e6>
 8104b88:	2300      	movs	r3, #0
 8104b8a:	2b00      	cmp	r3, #0
 8104b8c:	d020      	beq.n	8104bd0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104b8e:	68fb      	ldr	r3, [r7, #12]
 8104b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b92:	f003 031f 	and.w	r3, r3, #31
 8104b96:	2201      	movs	r2, #1
 8104b98:	409a      	lsls	r2, r3
 8104b9a:	693b      	ldr	r3, [r7, #16]
 8104b9c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8104b9e:	68fb      	ldr	r3, [r7, #12]
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	683a      	ldr	r2, [r7, #0]
 8104ba4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104ba6:	68fb      	ldr	r3, [r7, #12]
 8104ba8:	689b      	ldr	r3, [r3, #8]
 8104baa:	2b40      	cmp	r3, #64	; 0x40
 8104bac:	d108      	bne.n	8104bc0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	687a      	ldr	r2, [r7, #4]
 8104bb4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104bb6:	68fb      	ldr	r3, [r7, #12]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	68ba      	ldr	r2, [r7, #8]
 8104bbc:	60da      	str	r2, [r3, #12]
}
 8104bbe:	e007      	b.n	8104bd0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104bc0:	68fb      	ldr	r3, [r7, #12]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	68ba      	ldr	r2, [r7, #8]
 8104bc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104bc8:	68fb      	ldr	r3, [r7, #12]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	687a      	ldr	r2, [r7, #4]
 8104bce:	60da      	str	r2, [r3, #12]
}
 8104bd0:	bf00      	nop
 8104bd2:	371c      	adds	r7, #28
 8104bd4:	46bd      	mov	sp, r7
 8104bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bda:	4770      	bx	lr
 8104bdc:	58025408 	.word	0x58025408
 8104be0:	5802541c 	.word	0x5802541c
 8104be4:	58025430 	.word	0x58025430
 8104be8:	58025444 	.word	0x58025444
 8104bec:	58025458 	.word	0x58025458
 8104bf0:	5802546c 	.word	0x5802546c
 8104bf4:	58025480 	.word	0x58025480
 8104bf8:	58025494 	.word	0x58025494

08104bfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104bfc:	b480      	push	{r7}
 8104bfe:	b085      	sub	sp, #20
 8104c00:	af00      	add	r7, sp, #0
 8104c02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	681b      	ldr	r3, [r3, #0]
 8104c08:	4a43      	ldr	r2, [pc, #268]	; (8104d18 <DMA_CalcBaseAndBitshift+0x11c>)
 8104c0a:	4293      	cmp	r3, r2
 8104c0c:	d04a      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	4a42      	ldr	r2, [pc, #264]	; (8104d1c <DMA_CalcBaseAndBitshift+0x120>)
 8104c14:	4293      	cmp	r3, r2
 8104c16:	d045      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	4a40      	ldr	r2, [pc, #256]	; (8104d20 <DMA_CalcBaseAndBitshift+0x124>)
 8104c1e:	4293      	cmp	r3, r2
 8104c20:	d040      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	4a3f      	ldr	r2, [pc, #252]	; (8104d24 <DMA_CalcBaseAndBitshift+0x128>)
 8104c28:	4293      	cmp	r3, r2
 8104c2a:	d03b      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	4a3d      	ldr	r2, [pc, #244]	; (8104d28 <DMA_CalcBaseAndBitshift+0x12c>)
 8104c32:	4293      	cmp	r3, r2
 8104c34:	d036      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	4a3c      	ldr	r2, [pc, #240]	; (8104d2c <DMA_CalcBaseAndBitshift+0x130>)
 8104c3c:	4293      	cmp	r3, r2
 8104c3e:	d031      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	4a3a      	ldr	r2, [pc, #232]	; (8104d30 <DMA_CalcBaseAndBitshift+0x134>)
 8104c46:	4293      	cmp	r3, r2
 8104c48:	d02c      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	681b      	ldr	r3, [r3, #0]
 8104c4e:	4a39      	ldr	r2, [pc, #228]	; (8104d34 <DMA_CalcBaseAndBitshift+0x138>)
 8104c50:	4293      	cmp	r3, r2
 8104c52:	d027      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	4a37      	ldr	r2, [pc, #220]	; (8104d38 <DMA_CalcBaseAndBitshift+0x13c>)
 8104c5a:	4293      	cmp	r3, r2
 8104c5c:	d022      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c5e:	687b      	ldr	r3, [r7, #4]
 8104c60:	681b      	ldr	r3, [r3, #0]
 8104c62:	4a36      	ldr	r2, [pc, #216]	; (8104d3c <DMA_CalcBaseAndBitshift+0x140>)
 8104c64:	4293      	cmp	r3, r2
 8104c66:	d01d      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	681b      	ldr	r3, [r3, #0]
 8104c6c:	4a34      	ldr	r2, [pc, #208]	; (8104d40 <DMA_CalcBaseAndBitshift+0x144>)
 8104c6e:	4293      	cmp	r3, r2
 8104c70:	d018      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	681b      	ldr	r3, [r3, #0]
 8104c76:	4a33      	ldr	r2, [pc, #204]	; (8104d44 <DMA_CalcBaseAndBitshift+0x148>)
 8104c78:	4293      	cmp	r3, r2
 8104c7a:	d013      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	4a31      	ldr	r2, [pc, #196]	; (8104d48 <DMA_CalcBaseAndBitshift+0x14c>)
 8104c82:	4293      	cmp	r3, r2
 8104c84:	d00e      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	681b      	ldr	r3, [r3, #0]
 8104c8a:	4a30      	ldr	r2, [pc, #192]	; (8104d4c <DMA_CalcBaseAndBitshift+0x150>)
 8104c8c:	4293      	cmp	r3, r2
 8104c8e:	d009      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	4a2e      	ldr	r2, [pc, #184]	; (8104d50 <DMA_CalcBaseAndBitshift+0x154>)
 8104c96:	4293      	cmp	r3, r2
 8104c98:	d004      	beq.n	8104ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	681b      	ldr	r3, [r3, #0]
 8104c9e:	4a2d      	ldr	r2, [pc, #180]	; (8104d54 <DMA_CalcBaseAndBitshift+0x158>)
 8104ca0:	4293      	cmp	r3, r2
 8104ca2:	d101      	bne.n	8104ca8 <DMA_CalcBaseAndBitshift+0xac>
 8104ca4:	2301      	movs	r3, #1
 8104ca6:	e000      	b.n	8104caa <DMA_CalcBaseAndBitshift+0xae>
 8104ca8:	2300      	movs	r3, #0
 8104caa:	2b00      	cmp	r3, #0
 8104cac:	d026      	beq.n	8104cfc <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	b2db      	uxtb	r3, r3
 8104cb4:	3b10      	subs	r3, #16
 8104cb6:	4a28      	ldr	r2, [pc, #160]	; (8104d58 <DMA_CalcBaseAndBitshift+0x15c>)
 8104cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8104cbc:	091b      	lsrs	r3, r3, #4
 8104cbe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104cc0:	68fb      	ldr	r3, [r7, #12]
 8104cc2:	f003 0307 	and.w	r3, r3, #7
 8104cc6:	4a25      	ldr	r2, [pc, #148]	; (8104d5c <DMA_CalcBaseAndBitshift+0x160>)
 8104cc8:	5cd3      	ldrb	r3, [r2, r3]
 8104cca:	461a      	mov	r2, r3
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104cd0:	68fb      	ldr	r3, [r7, #12]
 8104cd2:	2b03      	cmp	r3, #3
 8104cd4:	d909      	bls.n	8104cea <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	681b      	ldr	r3, [r3, #0]
 8104cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104cde:	f023 0303 	bic.w	r3, r3, #3
 8104ce2:	1d1a      	adds	r2, r3, #4
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8104ce8:	e00e      	b.n	8104d08 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104cf2:	f023 0303 	bic.w	r3, r3, #3
 8104cf6:	687a      	ldr	r2, [r7, #4]
 8104cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8104cfa:	e005      	b.n	8104d08 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104cfc:	687b      	ldr	r3, [r7, #4]
 8104cfe:	681b      	ldr	r3, [r3, #0]
 8104d00:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104d0c:	4618      	mov	r0, r3
 8104d0e:	3714      	adds	r7, #20
 8104d10:	46bd      	mov	sp, r7
 8104d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d16:	4770      	bx	lr
 8104d18:	40020010 	.word	0x40020010
 8104d1c:	40020028 	.word	0x40020028
 8104d20:	40020040 	.word	0x40020040
 8104d24:	40020058 	.word	0x40020058
 8104d28:	40020070 	.word	0x40020070
 8104d2c:	40020088 	.word	0x40020088
 8104d30:	400200a0 	.word	0x400200a0
 8104d34:	400200b8 	.word	0x400200b8
 8104d38:	40020410 	.word	0x40020410
 8104d3c:	40020428 	.word	0x40020428
 8104d40:	40020440 	.word	0x40020440
 8104d44:	40020458 	.word	0x40020458
 8104d48:	40020470 	.word	0x40020470
 8104d4c:	40020488 	.word	0x40020488
 8104d50:	400204a0 	.word	0x400204a0
 8104d54:	400204b8 	.word	0x400204b8
 8104d58:	aaaaaaab 	.word	0xaaaaaaab
 8104d5c:	0811b6a4 	.word	0x0811b6a4

08104d60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8104d60:	b480      	push	{r7}
 8104d62:	b085      	sub	sp, #20
 8104d64:	af00      	add	r7, sp, #0
 8104d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104d68:	2300      	movs	r3, #0
 8104d6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	699b      	ldr	r3, [r3, #24]
 8104d70:	2b00      	cmp	r3, #0
 8104d72:	d120      	bne.n	8104db6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d78:	2b03      	cmp	r3, #3
 8104d7a:	d858      	bhi.n	8104e2e <DMA_CheckFifoParam+0xce>
 8104d7c:	a201      	add	r2, pc, #4	; (adr r2, 8104d84 <DMA_CheckFifoParam+0x24>)
 8104d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d82:	bf00      	nop
 8104d84:	08104d95 	.word	0x08104d95
 8104d88:	08104da7 	.word	0x08104da7
 8104d8c:	08104d95 	.word	0x08104d95
 8104d90:	08104e2f 	.word	0x08104e2f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104d9c:	2b00      	cmp	r3, #0
 8104d9e:	d048      	beq.n	8104e32 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104da0:	2301      	movs	r3, #1
 8104da2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104da4:	e045      	b.n	8104e32 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104dae:	d142      	bne.n	8104e36 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104db0:	2301      	movs	r3, #1
 8104db2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104db4:	e03f      	b.n	8104e36 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	699b      	ldr	r3, [r3, #24]
 8104dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104dbe:	d123      	bne.n	8104e08 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104dc4:	2b03      	cmp	r3, #3
 8104dc6:	d838      	bhi.n	8104e3a <DMA_CheckFifoParam+0xda>
 8104dc8:	a201      	add	r2, pc, #4	; (adr r2, 8104dd0 <DMA_CheckFifoParam+0x70>)
 8104dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dce:	bf00      	nop
 8104dd0:	08104de1 	.word	0x08104de1
 8104dd4:	08104de7 	.word	0x08104de7
 8104dd8:	08104de1 	.word	0x08104de1
 8104ddc:	08104df9 	.word	0x08104df9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104de0:	2301      	movs	r3, #1
 8104de2:	73fb      	strb	r3, [r7, #15]
        break;
 8104de4:	e030      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104dee:	2b00      	cmp	r3, #0
 8104df0:	d025      	beq.n	8104e3e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8104df2:	2301      	movs	r3, #1
 8104df4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104df6:	e022      	b.n	8104e3e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104e00:	d11f      	bne.n	8104e42 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8104e02:	2301      	movs	r3, #1
 8104e04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104e06:	e01c      	b.n	8104e42 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e0c:	2b02      	cmp	r3, #2
 8104e0e:	d902      	bls.n	8104e16 <DMA_CheckFifoParam+0xb6>
 8104e10:	2b03      	cmp	r3, #3
 8104e12:	d003      	beq.n	8104e1c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104e14:	e018      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104e16:	2301      	movs	r3, #1
 8104e18:	73fb      	strb	r3, [r7, #15]
        break;
 8104e1a:	e015      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104e24:	2b00      	cmp	r3, #0
 8104e26:	d00e      	beq.n	8104e46 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104e28:	2301      	movs	r3, #1
 8104e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8104e2c:	e00b      	b.n	8104e46 <DMA_CheckFifoParam+0xe6>
        break;
 8104e2e:	bf00      	nop
 8104e30:	e00a      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
        break;
 8104e32:	bf00      	nop
 8104e34:	e008      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
        break;
 8104e36:	bf00      	nop
 8104e38:	e006      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
        break;
 8104e3a:	bf00      	nop
 8104e3c:	e004      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
        break;
 8104e3e:	bf00      	nop
 8104e40:	e002      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
        break;
 8104e42:	bf00      	nop
 8104e44:	e000      	b.n	8104e48 <DMA_CheckFifoParam+0xe8>
    break;
 8104e46:	bf00      	nop
    }
  }

  return status;
 8104e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8104e4a:	4618      	mov	r0, r3
 8104e4c:	3714      	adds	r7, #20
 8104e4e:	46bd      	mov	sp, r7
 8104e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e54:	4770      	bx	lr
 8104e56:	bf00      	nop

08104e58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104e58:	b480      	push	{r7}
 8104e5a:	b085      	sub	sp, #20
 8104e5c:	af00      	add	r7, sp, #0
 8104e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	681b      	ldr	r3, [r3, #0]
 8104e6a:	4a3a      	ldr	r2, [pc, #232]	; (8104f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104e6c:	4293      	cmp	r3, r2
 8104e6e:	d022      	beq.n	8104eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	4a38      	ldr	r2, [pc, #224]	; (8104f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104e76:	4293      	cmp	r3, r2
 8104e78:	d01d      	beq.n	8104eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	4a37      	ldr	r2, [pc, #220]	; (8104f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104e80:	4293      	cmp	r3, r2
 8104e82:	d018      	beq.n	8104eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	4a35      	ldr	r2, [pc, #212]	; (8104f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104e8a:	4293      	cmp	r3, r2
 8104e8c:	d013      	beq.n	8104eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	681b      	ldr	r3, [r3, #0]
 8104e92:	4a34      	ldr	r2, [pc, #208]	; (8104f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104e94:	4293      	cmp	r3, r2
 8104e96:	d00e      	beq.n	8104eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	4a32      	ldr	r2, [pc, #200]	; (8104f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104e9e:	4293      	cmp	r3, r2
 8104ea0:	d009      	beq.n	8104eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	4a31      	ldr	r2, [pc, #196]	; (8104f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104ea8:	4293      	cmp	r3, r2
 8104eaa:	d004      	beq.n	8104eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	4a2f      	ldr	r2, [pc, #188]	; (8104f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104eb2:	4293      	cmp	r3, r2
 8104eb4:	d101      	bne.n	8104eba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104eb6:	2301      	movs	r3, #1
 8104eb8:	e000      	b.n	8104ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104eba:	2300      	movs	r3, #0
 8104ebc:	2b00      	cmp	r3, #0
 8104ebe:	d01c      	beq.n	8104efa <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	681b      	ldr	r3, [r3, #0]
 8104ec4:	b2db      	uxtb	r3, r3
 8104ec6:	3b08      	subs	r3, #8
 8104ec8:	4a2a      	ldr	r2, [pc, #168]	; (8104f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104eca:	fba2 2303 	umull	r2, r3, r2, r3
 8104ece:	091b      	lsrs	r3, r3, #4
 8104ed0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104ed2:	68fb      	ldr	r3, [r7, #12]
 8104ed4:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104ed8:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104edc:	009b      	lsls	r3, r3, #2
 8104ede:	461a      	mov	r2, r3
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	4a24      	ldr	r2, [pc, #144]	; (8104f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104ee8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104eea:	68fb      	ldr	r3, [r7, #12]
 8104eec:	f003 031f 	and.w	r3, r3, #31
 8104ef0:	2201      	movs	r2, #1
 8104ef2:	409a      	lsls	r2, r3
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104ef8:	e026      	b.n	8104f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	b2db      	uxtb	r3, r3
 8104f00:	3b10      	subs	r3, #16
 8104f02:	4a1e      	ldr	r2, [pc, #120]	; (8104f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104f04:	fba2 2303 	umull	r2, r3, r2, r3
 8104f08:	091b      	lsrs	r3, r3, #4
 8104f0a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104f0c:	68bb      	ldr	r3, [r7, #8]
 8104f0e:	4a1c      	ldr	r2, [pc, #112]	; (8104f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104f10:	4293      	cmp	r3, r2
 8104f12:	d806      	bhi.n	8104f22 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104f14:	68bb      	ldr	r3, [r7, #8]
 8104f16:	4a1b      	ldr	r2, [pc, #108]	; (8104f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104f18:	4293      	cmp	r3, r2
 8104f1a:	d902      	bls.n	8104f22 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	3308      	adds	r3, #8
 8104f20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104f22:	68fb      	ldr	r3, [r7, #12]
 8104f24:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104f28:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104f2c:	009b      	lsls	r3, r3, #2
 8104f2e:	461a      	mov	r2, r3
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	4a14      	ldr	r2, [pc, #80]	; (8104f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104f38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104f3a:	68fb      	ldr	r3, [r7, #12]
 8104f3c:	f003 031f 	and.w	r3, r3, #31
 8104f40:	2201      	movs	r2, #1
 8104f42:	409a      	lsls	r2, r3
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8104f48:	bf00      	nop
 8104f4a:	3714      	adds	r7, #20
 8104f4c:	46bd      	mov	sp, r7
 8104f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f52:	4770      	bx	lr
 8104f54:	58025408 	.word	0x58025408
 8104f58:	5802541c 	.word	0x5802541c
 8104f5c:	58025430 	.word	0x58025430
 8104f60:	58025444 	.word	0x58025444
 8104f64:	58025458 	.word	0x58025458
 8104f68:	5802546c 	.word	0x5802546c
 8104f6c:	58025480 	.word	0x58025480
 8104f70:	58025494 	.word	0x58025494
 8104f74:	cccccccd 	.word	0xcccccccd
 8104f78:	58025880 	.word	0x58025880
 8104f7c:	aaaaaaab 	.word	0xaaaaaaab
 8104f80:	400204b8 	.word	0x400204b8
 8104f84:	4002040f 	.word	0x4002040f
 8104f88:	40020880 	.word	0x40020880

08104f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104f8c:	b480      	push	{r7}
 8104f8e:	b085      	sub	sp, #20
 8104f90:	af00      	add	r7, sp, #0
 8104f92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	685b      	ldr	r3, [r3, #4]
 8104f98:	b2db      	uxtb	r3, r3
 8104f9a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	2b00      	cmp	r3, #0
 8104fa0:	d04a      	beq.n	8105038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104fa2:	68fb      	ldr	r3, [r7, #12]
 8104fa4:	2b08      	cmp	r3, #8
 8104fa6:	d847      	bhi.n	8105038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	4a25      	ldr	r2, [pc, #148]	; (8105044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104fae:	4293      	cmp	r3, r2
 8104fb0:	d022      	beq.n	8104ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	4a24      	ldr	r2, [pc, #144]	; (8105048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104fb8:	4293      	cmp	r3, r2
 8104fba:	d01d      	beq.n	8104ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	4a22      	ldr	r2, [pc, #136]	; (810504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104fc2:	4293      	cmp	r3, r2
 8104fc4:	d018      	beq.n	8104ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	681b      	ldr	r3, [r3, #0]
 8104fca:	4a21      	ldr	r2, [pc, #132]	; (8105050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104fcc:	4293      	cmp	r3, r2
 8104fce:	d013      	beq.n	8104ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	681b      	ldr	r3, [r3, #0]
 8104fd4:	4a1f      	ldr	r2, [pc, #124]	; (8105054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104fd6:	4293      	cmp	r3, r2
 8104fd8:	d00e      	beq.n	8104ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	4a1e      	ldr	r2, [pc, #120]	; (8105058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104fe0:	4293      	cmp	r3, r2
 8104fe2:	d009      	beq.n	8104ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	681b      	ldr	r3, [r3, #0]
 8104fe8:	4a1c      	ldr	r2, [pc, #112]	; (810505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104fea:	4293      	cmp	r3, r2
 8104fec:	d004      	beq.n	8104ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	4a1b      	ldr	r2, [pc, #108]	; (8105060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104ff4:	4293      	cmp	r3, r2
 8104ff6:	d101      	bne.n	8104ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104ff8:	2301      	movs	r3, #1
 8104ffa:	e000      	b.n	8104ffe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104ffc:	2300      	movs	r3, #0
 8104ffe:	2b00      	cmp	r3, #0
 8105000:	d00a      	beq.n	8105018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8105002:	68fa      	ldr	r2, [r7, #12]
 8105004:	4b17      	ldr	r3, [pc, #92]	; (8105064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8105006:	4413      	add	r3, r2
 8105008:	009b      	lsls	r3, r3, #2
 810500a:	461a      	mov	r2, r3
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	4a15      	ldr	r2, [pc, #84]	; (8105068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8105014:	671a      	str	r2, [r3, #112]	; 0x70
 8105016:	e009      	b.n	810502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8105018:	68fa      	ldr	r2, [r7, #12]
 810501a:	4b14      	ldr	r3, [pc, #80]	; (810506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 810501c:	4413      	add	r3, r2
 810501e:	009b      	lsls	r3, r3, #2
 8105020:	461a      	mov	r2, r3
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	4a11      	ldr	r2, [pc, #68]	; (8105070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810502a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 810502c:	68fb      	ldr	r3, [r7, #12]
 810502e:	3b01      	subs	r3, #1
 8105030:	2201      	movs	r2, #1
 8105032:	409a      	lsls	r2, r3
 8105034:	687b      	ldr	r3, [r7, #4]
 8105036:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8105038:	bf00      	nop
 810503a:	3714      	adds	r7, #20
 810503c:	46bd      	mov	sp, r7
 810503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105042:	4770      	bx	lr
 8105044:	58025408 	.word	0x58025408
 8105048:	5802541c 	.word	0x5802541c
 810504c:	58025430 	.word	0x58025430
 8105050:	58025444 	.word	0x58025444
 8105054:	58025458 	.word	0x58025458
 8105058:	5802546c 	.word	0x5802546c
 810505c:	58025480 	.word	0x58025480
 8105060:	58025494 	.word	0x58025494
 8105064:	1600963f 	.word	0x1600963f
 8105068:	58025940 	.word	0x58025940
 810506c:	1000823f 	.word	0x1000823f
 8105070:	40020940 	.word	0x40020940

08105074 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8105074:	b580      	push	{r7, lr}
 8105076:	b084      	sub	sp, #16
 8105078:	af00      	add	r7, sp, #0
 810507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	2b00      	cmp	r3, #0
 8105080:	d101      	bne.n	8105086 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8105082:	2301      	movs	r3, #1
 8105084:	e0c8      	b.n	8105218 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810508a:	2b00      	cmp	r3, #0
 810508c:	d102      	bne.n	8105094 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 810508e:	6878      	ldr	r0, [r7, #4]
 8105090:	f00f fb18 	bl	81146c4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	2223      	movs	r2, #35	; 0x23
 8105098:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810509a:	4b61      	ldr	r3, [pc, #388]	; (8105220 <HAL_ETH_Init+0x1ac>)
 810509c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81050a0:	4a5f      	ldr	r2, [pc, #380]	; (8105220 <HAL_ETH_Init+0x1ac>)
 81050a2:	f043 0302 	orr.w	r3, r3, #2
 81050a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81050aa:	4b5d      	ldr	r3, [pc, #372]	; (8105220 <HAL_ETH_Init+0x1ac>)
 81050ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81050b0:	f003 0302 	and.w	r3, r3, #2
 81050b4:	60bb      	str	r3, [r7, #8]
 81050b6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 81050b8:	687b      	ldr	r3, [r7, #4]
 81050ba:	7a1b      	ldrb	r3, [r3, #8]
 81050bc:	2b00      	cmp	r3, #0
 81050be:	d103      	bne.n	81050c8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 81050c0:	2000      	movs	r0, #0
 81050c2:	f7fc f9f1 	bl	81014a8 <HAL_SYSCFG_ETHInterfaceSelect>
 81050c6:	e003      	b.n	81050d0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 81050c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 81050cc:	f7fc f9ec 	bl	81014a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81050d8:	681a      	ldr	r2, [r3, #0]
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	f042 0201 	orr.w	r2, r2, #1
 81050e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81050e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81050e8:	f7fc f9a2 	bl	8101430 <HAL_GetTick>
 81050ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81050ee:	e00f      	b.n	8105110 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 81050f0:	f7fc f99e 	bl	8101430 <HAL_GetTick>
 81050f4:	4602      	mov	r2, r0
 81050f6:	68fb      	ldr	r3, [r7, #12]
 81050f8:	1ad3      	subs	r3, r2, r3
 81050fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81050fe:	d907      	bls.n	8105110 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	2204      	movs	r2, #4
 8105104:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	22e0      	movs	r2, #224	; 0xe0
 810510a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 810510c:	2301      	movs	r3, #1
 810510e:	e083      	b.n	8105218 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	f003 0301 	and.w	r3, r3, #1
 810511e:	2b00      	cmp	r3, #0
 8105120:	d1e6      	bne.n	81050f0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8105122:	6878      	ldr	r0, [r7, #4]
 8105124:	f001 faec 	bl	8106700 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8105128:	f002 fc02 	bl	8107930 <HAL_RCC_GetHCLKFreq>
 810512c:	4603      	mov	r3, r0
 810512e:	4a3d      	ldr	r2, [pc, #244]	; (8105224 <HAL_ETH_Init+0x1b0>)
 8105130:	fba2 2303 	umull	r2, r3, r2, r3
 8105134:	0c9a      	lsrs	r2, r3, #18
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	3a01      	subs	r2, #1
 810513c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8105140:	6878      	ldr	r0, [r7, #4]
 8105142:	f001 fa3f 	bl	81065c4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	681b      	ldr	r3, [r3, #0]
 8105158:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 810515c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8105160:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	695b      	ldr	r3, [r3, #20]
 8105166:	f003 0303 	and.w	r3, r3, #3
 810516a:	2b00      	cmp	r3, #0
 810516c:	d007      	beq.n	810517e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	2201      	movs	r2, #1
 8105172:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	22e0      	movs	r2, #224	; 0xe0
 8105178:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 810517a:	2301      	movs	r3, #1
 810517c:	e04c      	b.n	8105218 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8105186:	3308      	adds	r3, #8
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810518e:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8105192:	687a      	ldr	r2, [r7, #4]
 8105194:	6952      	ldr	r2, [r2, #20]
 8105196:	0052      	lsls	r2, r2, #1
 8105198:	6879      	ldr	r1, [r7, #4]
 810519a:	6809      	ldr	r1, [r1, #0]
 810519c:	431a      	orrs	r2, r3
 810519e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81051a2:	3308      	adds	r3, #8
 81051a4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 81051a6:	6878      	ldr	r0, [r7, #4]
 81051a8:	f001 fb02 	bl	81067b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 81051ac:	6878      	ldr	r0, [r7, #4]
 81051ae:	f001 fb46 	bl	810683e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	685b      	ldr	r3, [r3, #4]
 81051b6:	3305      	adds	r3, #5
 81051b8:	781b      	ldrb	r3, [r3, #0]
 81051ba:	021a      	lsls	r2, r3, #8
 81051bc:	687b      	ldr	r3, [r7, #4]
 81051be:	685b      	ldr	r3, [r3, #4]
 81051c0:	3304      	adds	r3, #4
 81051c2:	781b      	ldrb	r3, [r3, #0]
 81051c4:	4619      	mov	r1, r3
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	681b      	ldr	r3, [r3, #0]
 81051ca:	430a      	orrs	r2, r1
 81051cc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	685b      	ldr	r3, [r3, #4]
 81051d4:	3303      	adds	r3, #3
 81051d6:	781b      	ldrb	r3, [r3, #0]
 81051d8:	061a      	lsls	r2, r3, #24
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	685b      	ldr	r3, [r3, #4]
 81051de:	3302      	adds	r3, #2
 81051e0:	781b      	ldrb	r3, [r3, #0]
 81051e2:	041b      	lsls	r3, r3, #16
 81051e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	685b      	ldr	r3, [r3, #4]
 81051ea:	3301      	adds	r3, #1
 81051ec:	781b      	ldrb	r3, [r3, #0]
 81051ee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81051f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	685b      	ldr	r3, [r3, #4]
 81051f6:	781b      	ldrb	r3, [r3, #0]
 81051f8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81051fe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8105200:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	2200      	movs	r2, #0
 8105208:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	2210      	movs	r2, #16
 810520e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	2210      	movs	r2, #16
 8105214:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8105216:	2300      	movs	r3, #0
}
 8105218:	4618      	mov	r0, r3
 810521a:	3710      	adds	r7, #16
 810521c:	46bd      	mov	sp, r7
 810521e:	bd80      	pop	{r7, pc}
 8105220:	58024400 	.word	0x58024400
 8105224:	431bde83 	.word	0x431bde83

08105228 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8105228:	b480      	push	{r7}
 810522a:	b087      	sub	sp, #28
 810522c:	af00      	add	r7, sp, #0
 810522e:	60f8      	str	r0, [r7, #12]
 8105230:	60b9      	str	r1, [r7, #8]
 8105232:	607a      	str	r2, [r7, #4]
 8105234:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8105236:	68fa      	ldr	r2, [r7, #12]
 8105238:	68bb      	ldr	r3, [r7, #8]
 810523a:	3310      	adds	r3, #16
 810523c:	009b      	lsls	r3, r3, #2
 810523e:	4413      	add	r3, r2
 8105240:	685b      	ldr	r3, [r3, #4]
 8105242:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	2b00      	cmp	r3, #0
 8105248:	d002      	beq.n	8105250 <HAL_ETH_DescAssignMemory+0x28>
 810524a:	68bb      	ldr	r3, [r7, #8]
 810524c:	2b03      	cmp	r3, #3
 810524e:	d904      	bls.n	810525a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8105250:	68fb      	ldr	r3, [r7, #12]
 8105252:	2201      	movs	r2, #1
 8105254:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8105256:	2301      	movs	r3, #1
 8105258:	e021      	b.n	810529e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 810525a:	687a      	ldr	r2, [r7, #4]
 810525c:	697b      	ldr	r3, [r7, #20]
 810525e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8105260:	687a      	ldr	r2, [r7, #4]
 8105262:	697b      	ldr	r3, [r7, #20]
 8105264:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8105266:	697b      	ldr	r3, [r7, #20]
 8105268:	68db      	ldr	r3, [r3, #12]
 810526a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 810526e:	697b      	ldr	r3, [r7, #20]
 8105270:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8105272:	683b      	ldr	r3, [r7, #0]
 8105274:	2b00      	cmp	r3, #0
 8105276:	d00b      	beq.n	8105290 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8105278:	683a      	ldr	r2, [r7, #0]
 810527a:	697b      	ldr	r3, [r7, #20]
 810527c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 810527e:	683a      	ldr	r2, [r7, #0]
 8105280:	697b      	ldr	r3, [r7, #20]
 8105282:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8105284:	697b      	ldr	r3, [r7, #20]
 8105286:	68db      	ldr	r3, [r3, #12]
 8105288:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810528c:	697b      	ldr	r3, [r7, #20]
 810528e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8105290:	697b      	ldr	r3, [r7, #20]
 8105292:	68db      	ldr	r3, [r3, #12]
 8105294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8105298:	697b      	ldr	r3, [r7, #20]
 810529a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810529c:	2300      	movs	r3, #0
}
 810529e:	4618      	mov	r0, r3
 81052a0:	371c      	adds	r7, #28
 81052a2:	46bd      	mov	sp, r7
 81052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052a8:	4770      	bx	lr

081052aa <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 81052aa:	b480      	push	{r7}
 81052ac:	b085      	sub	sp, #20
 81052ae:	af00      	add	r7, sp, #0
 81052b0:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81052b6:	2b10      	cmp	r3, #16
 81052b8:	d175      	bne.n	81053a6 <HAL_ETH_Start_IT+0xfc>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	2223      	movs	r2, #35	; 0x23
 81052be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81052c0:	2300      	movs	r3, #0
 81052c2:	60fb      	str	r3, [r7, #12]
 81052c4:	e00f      	b.n	81052e6 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 81052c6:	687a      	ldr	r2, [r7, #4]
 81052c8:	68fb      	ldr	r3, [r7, #12]
 81052ca:	3310      	adds	r3, #16
 81052cc:	009b      	lsls	r3, r3, #2
 81052ce:	4413      	add	r3, r2
 81052d0:	685b      	ldr	r3, [r3, #4]
 81052d2:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 81052d4:	68bb      	ldr	r3, [r7, #8]
 81052d6:	68db      	ldr	r3, [r3, #12]
 81052d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 81052dc:	68bb      	ldr	r3, [r7, #8]
 81052de:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	3301      	adds	r3, #1
 81052e4:	60fb      	str	r3, [r7, #12]
 81052e6:	68fb      	ldr	r3, [r7, #12]
 81052e8:	2b03      	cmp	r3, #3
 81052ea:	d9ec      	bls.n	81052c6 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	2201      	movs	r2, #1
 81052f0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	681b      	ldr	r3, [r3, #0]
 81052f6:	681a      	ldr	r2, [r3, #0]
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	f042 0202 	orr.w	r2, r2, #2
 8105300:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	681a      	ldr	r2, [r3, #0]
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	f042 0201 	orr.w	r2, r2, #1
 8105310:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	681b      	ldr	r3, [r3, #0]
 8105316:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	681b      	ldr	r3, [r3, #0]
 810531e:	f042 0201 	orr.w	r2, r2, #1
 8105322:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	681b      	ldr	r3, [r3, #0]
 810532a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810532e:	3304      	adds	r3, #4
 8105330:	681a      	ldr	r2, [r3, #0]
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	f042 0201 	orr.w	r2, r2, #1
 810533a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810533e:	3304      	adds	r3, #4
 8105340:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810534a:	3308      	adds	r3, #8
 810534c:	681a      	ldr	r2, [r3, #0]
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	681b      	ldr	r3, [r3, #0]
 8105352:	f042 0201 	orr.w	r2, r2, #1
 8105356:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810535a:	3308      	adds	r3, #8
 810535c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105366:	681a      	ldr	r2, [r3, #0]
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8105370:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105374:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810537e:	3314      	adds	r3, #20
 8105380:	681a      	ldr	r2, [r3, #0]
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	f442 4250 	orr.w	r2, r2, #53248	; 0xd000
 810538a:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 810538e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105392:	3314      	adds	r3, #20
 8105394:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	2210      	movs	r2, #16
 810539a:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	2222      	movs	r2, #34	; 0x22
 81053a0:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 81053a2:	2300      	movs	r3, #0
 81053a4:	e000      	b.n	81053a8 <HAL_ETH_Start_IT+0xfe>
  }
  else
  {
    return HAL_ERROR;
 81053a6:	2301      	movs	r3, #1
  }
}
 81053a8:	4618      	mov	r0, r3
 81053aa:	3714      	adds	r7, #20
 81053ac:	46bd      	mov	sp, r7
 81053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053b2:	4770      	bx	lr

081053b4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 81053b4:	b480      	push	{r7}
 81053b6:	b085      	sub	sp, #20
 81053b8:	af00      	add	r7, sp, #0
 81053ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d069      	beq.n	8105498 <HAL_ETH_Stop_IT+0xe4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	2223      	movs	r2, #35	; 0x23
 81053c8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81053d2:	3314      	adds	r3, #20
 81053d4:	681a      	ldr	r2, [r3, #0]
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	681b      	ldr	r3, [r3, #0]
 81053da:	f422 4250 	bic.w	r2, r2, #53248	; 0xd000
 81053de:	f022 0241 	bic.w	r2, r2, #65	; 0x41
 81053e2:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81053e6:	3314      	adds	r3, #20
 81053e8:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	681b      	ldr	r3, [r3, #0]
 81053ee:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81053f2:	3304      	adds	r3, #4
 81053f4:	681a      	ldr	r2, [r3, #0]
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	f022 0201 	bic.w	r2, r2, #1
 81053fe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8105402:	3304      	adds	r3, #4
 8105404:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	681b      	ldr	r3, [r3, #0]
 810540a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810540e:	3308      	adds	r3, #8
 8105410:	681a      	ldr	r2, [r3, #0]
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	f022 0201 	bic.w	r2, r2, #1
 810541a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810541e:	3308      	adds	r3, #8
 8105420:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	681a      	ldr	r2, [r3, #0]
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	f022 0201 	bic.w	r2, r2, #1
 8105430:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	681b      	ldr	r3, [r3, #0]
 8105436:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	f042 0201 	orr.w	r2, r2, #1
 8105442:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	681b      	ldr	r3, [r3, #0]
 810544a:	681a      	ldr	r2, [r3, #0]
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	681b      	ldr	r3, [r3, #0]
 8105450:	f022 0202 	bic.w	r2, r2, #2
 8105454:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8105456:	2300      	movs	r3, #0
 8105458:	60fb      	str	r3, [r7, #12]
 810545a:	e00f      	b.n	810547c <HAL_ETH_Stop_IT+0xc8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 810545c:	687a      	ldr	r2, [r7, #4]
 810545e:	68fb      	ldr	r3, [r7, #12]
 8105460:	3310      	adds	r3, #16
 8105462:	009b      	lsls	r3, r3, #2
 8105464:	4413      	add	r3, r2
 8105466:	685b      	ldr	r3, [r3, #4]
 8105468:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 810546a:	68bb      	ldr	r3, [r7, #8]
 810546c:	68db      	ldr	r3, [r3, #12]
 810546e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8105472:	68bb      	ldr	r3, [r7, #8]
 8105474:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8105476:	68fb      	ldr	r3, [r7, #12]
 8105478:	3301      	adds	r3, #1
 810547a:	60fb      	str	r3, [r7, #12]
 810547c:	68fb      	ldr	r3, [r7, #12]
 810547e:	2b03      	cmp	r3, #3
 8105480:	d9ec      	bls.n	810545c <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	2200      	movs	r2, #0
 8105486:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8105488:	687b      	ldr	r3, [r7, #4]
 810548a:	2210      	movs	r2, #16
 810548c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	2210      	movs	r2, #16
 8105492:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8105494:	2300      	movs	r3, #0
 8105496:	e000      	b.n	810549a <HAL_ETH_Stop_IT+0xe6>
  }
  else
  {
    return HAL_ERROR;
 8105498:	2301      	movs	r3, #1
  }
}
 810549a:	4618      	mov	r0, r3
 810549c:	3714      	adds	r7, #20
 810549e:	46bd      	mov	sp, r7
 81054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054a4:	4770      	bx	lr

081054a6 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 81054a6:	b580      	push	{r7, lr}
 81054a8:	b086      	sub	sp, #24
 81054aa:	af00      	add	r7, sp, #0
 81054ac:	60f8      	str	r0, [r7, #12]
 81054ae:	60b9      	str	r1, [r7, #8]
 81054b0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 81054b2:	68bb      	ldr	r3, [r7, #8]
 81054b4:	2b00      	cmp	r3, #0
 81054b6:	d107      	bne.n	81054c8 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 81054b8:	68fb      	ldr	r3, [r7, #12]
 81054ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81054bc:	f043 0201 	orr.w	r2, r3, #1
 81054c0:	68fb      	ldr	r3, [r7, #12]
 81054c2:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 81054c4:	2301      	movs	r3, #1
 81054c6:	e073      	b.n	81055b0 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 81054c8:	68fb      	ldr	r3, [r7, #12]
 81054ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81054cc:	2b10      	cmp	r3, #16
 81054ce:	d16e      	bne.n	81055ae <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 81054d0:	2200      	movs	r2, #0
 81054d2:	68b9      	ldr	r1, [r7, #8]
 81054d4:	68f8      	ldr	r0, [r7, #12]
 81054d6:	f001 fa0f 	bl	81068f8 <ETH_Prepare_Tx_Descriptors>
 81054da:	4603      	mov	r3, r0
 81054dc:	2b00      	cmp	r3, #0
 81054de:	d007      	beq.n	81054f0 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 81054e0:	68fb      	ldr	r3, [r7, #12]
 81054e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81054e4:	f043 0202 	orr.w	r2, r3, #2
 81054e8:	68fb      	ldr	r3, [r7, #12]
 81054ea:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 81054ec:	2301      	movs	r3, #1
 81054ee:	e05f      	b.n	81055b0 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 81054f0:	68fb      	ldr	r3, [r7, #12]
 81054f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81054f4:	68fb      	ldr	r3, [r7, #12]
 81054f6:	3206      	adds	r2, #6
 81054f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81054fc:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 81054fe:	68fb      	ldr	r3, [r7, #12]
 8105500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105502:	1c5a      	adds	r2, r3, #1
 8105504:	68fb      	ldr	r3, [r7, #12]
 8105506:	629a      	str	r2, [r3, #40]	; 0x28
 8105508:	68fb      	ldr	r3, [r7, #12]
 810550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810550c:	2b03      	cmp	r3, #3
 810550e:	d904      	bls.n	810551a <HAL_ETH_Transmit+0x74>
 8105510:	68fb      	ldr	r3, [r7, #12]
 8105512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105514:	1f1a      	subs	r2, r3, #4
 8105516:	68fb      	ldr	r3, [r7, #12]
 8105518:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 810551a:	68fb      	ldr	r3, [r7, #12]
 810551c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 810551e:	68fb      	ldr	r3, [r7, #12]
 8105520:	681b      	ldr	r3, [r3, #0]
 8105522:	68fa      	ldr	r2, [r7, #12]
 8105524:	3106      	adds	r1, #6
 8105526:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 810552a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810552e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8105530:	f7fb ff7e 	bl	8101430 <HAL_GetTick>
 8105534:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8105536:	e034      	b.n	81055a2 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8105538:	68fb      	ldr	r3, [r7, #12]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105546:	2b00      	cmp	r3, #0
 8105548:	d011      	beq.n	810556e <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 810554a:	68fb      	ldr	r3, [r7, #12]
 810554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810554e:	f043 0208 	orr.w	r2, r3, #8
 8105552:	68fb      	ldr	r3, [r7, #12]
 8105554:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8105556:	68fb      	ldr	r3, [r7, #12]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 810555e:	681a      	ldr	r2, [r3, #0]
 8105560:	68fb      	ldr	r3, [r7, #12]
 8105562:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	22e0      	movs	r2, #224	; 0xe0
 8105568:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 810556a:	2301      	movs	r3, #1
 810556c:	e020      	b.n	81055b0 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105574:	d015      	beq.n	81055a2 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8105576:	f7fb ff5b 	bl	8101430 <HAL_GetTick>
 810557a:	4602      	mov	r2, r0
 810557c:	693b      	ldr	r3, [r7, #16]
 810557e:	1ad3      	subs	r3, r2, r3
 8105580:	687a      	ldr	r2, [r7, #4]
 8105582:	429a      	cmp	r2, r3
 8105584:	d302      	bcc.n	810558c <HAL_ETH_Transmit+0xe6>
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2b00      	cmp	r3, #0
 810558a:	d10a      	bne.n	81055a2 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 810558c:	68fb      	ldr	r3, [r7, #12]
 810558e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105590:	f043 0204 	orr.w	r2, r3, #4
 8105594:	68fb      	ldr	r3, [r7, #12]
 8105596:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8105598:	68fb      	ldr	r3, [r7, #12]
 810559a:	22e0      	movs	r2, #224	; 0xe0
 810559c:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 810559e:	2301      	movs	r3, #1
 81055a0:	e006      	b.n	81055b0 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 81055a2:	697b      	ldr	r3, [r7, #20]
 81055a4:	68db      	ldr	r3, [r3, #12]
 81055a6:	2b00      	cmp	r3, #0
 81055a8:	dbc6      	blt.n	8105538 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 81055aa:	2300      	movs	r3, #0
 81055ac:	e000      	b.n	81055b0 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 81055ae:	2301      	movs	r3, #1
  }
}
 81055b0:	4618      	mov	r0, r3
 81055b2:	3718      	adds	r7, #24
 81055b4:	46bd      	mov	sp, r7
 81055b6:	bd80      	pop	{r7, pc}

081055b8 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 81055b8:	b480      	push	{r7}
 81055ba:	b089      	sub	sp, #36	; 0x24
 81055bc:	af00      	add	r7, sp, #0
 81055be:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	3344      	adds	r3, #68	; 0x44
 81055c4:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 81055c6:	68bb      	ldr	r3, [r7, #8]
 81055c8:	691b      	ldr	r3, [r3, #16]
 81055ca:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 81055cc:	68bb      	ldr	r3, [r7, #8]
 81055ce:	69fa      	ldr	r2, [r7, #28]
 81055d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81055d4:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 81055d6:	2300      	movs	r3, #0
 81055d8:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 81055da:	2300      	movs	r3, #0
 81055dc:	613b      	str	r3, [r7, #16]
 81055de:	2300      	movs	r3, #0
 81055e0:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 81055e2:	68bb      	ldr	r3, [r7, #8]
 81055e4:	699b      	ldr	r3, [r3, #24]
 81055e6:	2b00      	cmp	r3, #0
 81055e8:	d06b      	beq.n	81056c2 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 81055ea:	2300      	movs	r3, #0
 81055ec:	e0ce      	b.n	810578c <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 81055ee:	697b      	ldr	r3, [r7, #20]
 81055f0:	3301      	adds	r3, #1
 81055f2:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 81055f4:	69bb      	ldr	r3, [r7, #24]
 81055f6:	68db      	ldr	r3, [r3, #12]
 81055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81055fc:	2b00      	cmp	r3, #0
 81055fe:	d036      	beq.n	810566e <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8105600:	693b      	ldr	r3, [r7, #16]
 8105602:	3301      	adds	r3, #1
 8105604:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8105606:	693b      	ldr	r3, [r7, #16]
 8105608:	2b01      	cmp	r3, #1
 810560a:	d101      	bne.n	8105610 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 810560c:	69fb      	ldr	r3, [r7, #28]
 810560e:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8105610:	69fb      	ldr	r3, [r7, #28]
 8105612:	3301      	adds	r3, #1
 8105614:	61fb      	str	r3, [r7, #28]
 8105616:	69fb      	ldr	r3, [r7, #28]
 8105618:	2b03      	cmp	r3, #3
 810561a:	d902      	bls.n	8105622 <HAL_ETH_IsRxDataAvailable+0x6a>
 810561c:	69fb      	ldr	r3, [r7, #28]
 810561e:	3b04      	subs	r3, #4
 8105620:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8105622:	68bb      	ldr	r3, [r7, #8]
 8105624:	69fa      	ldr	r2, [r7, #28]
 8105626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810562a:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 810562c:	69bb      	ldr	r3, [r7, #24]
 810562e:	68db      	ldr	r3, [r3, #12]
 8105630:	2b00      	cmp	r3, #0
 8105632:	db11      	blt.n	8105658 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8105634:	69bb      	ldr	r3, [r7, #24]
 8105636:	68db      	ldr	r3, [r3, #12]
 8105638:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810563c:	2b00      	cmp	r3, #0
 810563e:	d00b      	beq.n	8105658 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8105640:	68bb      	ldr	r3, [r7, #8]
 8105642:	2201      	movs	r2, #1
 8105644:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8105646:	69fb      	ldr	r3, [r7, #28]
 8105648:	3301      	adds	r3, #1
 810564a:	61fb      	str	r3, [r7, #28]
 810564c:	69fb      	ldr	r3, [r7, #28]
 810564e:	2b03      	cmp	r3, #3
 8105650:	d902      	bls.n	8105658 <HAL_ETH_IsRxDataAvailable+0xa0>
 8105652:	69fb      	ldr	r3, [r7, #28]
 8105654:	3b04      	subs	r3, #4
 8105656:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8105658:	68bb      	ldr	r3, [r7, #8]
 810565a:	69fa      	ldr	r2, [r7, #28]
 810565c:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 810565e:	68bb      	ldr	r3, [r7, #8]
 8105660:	68fa      	ldr	r2, [r7, #12]
 8105662:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8105664:	68bb      	ldr	r3, [r7, #8]
 8105666:	693a      	ldr	r2, [r7, #16]
 8105668:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 810566a:	2301      	movs	r3, #1
 810566c:	e08e      	b.n	810578c <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 810566e:	69bb      	ldr	r3, [r7, #24]
 8105670:	68db      	ldr	r3, [r3, #12]
 8105672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105676:	2b00      	cmp	r3, #0
 8105678:	d012      	beq.n	81056a0 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 810567a:	69fb      	ldr	r3, [r7, #28]
 810567c:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 810567e:	2301      	movs	r3, #1
 8105680:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8105682:	69fb      	ldr	r3, [r7, #28]
 8105684:	3301      	adds	r3, #1
 8105686:	61fb      	str	r3, [r7, #28]
 8105688:	69fb      	ldr	r3, [r7, #28]
 810568a:	2b03      	cmp	r3, #3
 810568c:	d902      	bls.n	8105694 <HAL_ETH_IsRxDataAvailable+0xdc>
 810568e:	69fb      	ldr	r3, [r7, #28]
 8105690:	3b04      	subs	r3, #4
 8105692:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8105694:	68bb      	ldr	r3, [r7, #8]
 8105696:	69fa      	ldr	r2, [r7, #28]
 8105698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810569c:	61bb      	str	r3, [r7, #24]
 810569e:	e010      	b.n	81056c2 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 81056a0:	693b      	ldr	r3, [r7, #16]
 81056a2:	3301      	adds	r3, #1
 81056a4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 81056a6:	69fb      	ldr	r3, [r7, #28]
 81056a8:	3301      	adds	r3, #1
 81056aa:	61fb      	str	r3, [r7, #28]
 81056ac:	69fb      	ldr	r3, [r7, #28]
 81056ae:	2b03      	cmp	r3, #3
 81056b0:	d902      	bls.n	81056b8 <HAL_ETH_IsRxDataAvailable+0x100>
 81056b2:	69fb      	ldr	r3, [r7, #28]
 81056b4:	3b04      	subs	r3, #4
 81056b6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 81056b8:	68bb      	ldr	r3, [r7, #8]
 81056ba:	69fa      	ldr	r2, [r7, #28]
 81056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81056c0:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 81056c2:	69bb      	ldr	r3, [r7, #24]
 81056c4:	68db      	ldr	r3, [r3, #12]
 81056c6:	2b00      	cmp	r3, #0
 81056c8:	db02      	blt.n	81056d0 <HAL_ETH_IsRxDataAvailable+0x118>
 81056ca:	697b      	ldr	r3, [r7, #20]
 81056cc:	2b03      	cmp	r3, #3
 81056ce:	d98e      	bls.n	81055ee <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 81056d0:	693b      	ldr	r3, [r7, #16]
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d056      	beq.n	8105784 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 81056d6:	68bb      	ldr	r3, [r7, #8]
 81056d8:	69fa      	ldr	r2, [r7, #28]
 81056da:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 81056dc:	68bb      	ldr	r3, [r7, #8]
 81056de:	68fa      	ldr	r2, [r7, #12]
 81056e0:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 81056e2:	68fb      	ldr	r3, [r7, #12]
 81056e4:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 81056e6:	68bb      	ldr	r3, [r7, #8]
 81056e8:	69fa      	ldr	r2, [r7, #28]
 81056ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81056ee:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 81056f0:	2300      	movs	r3, #0
 81056f2:	617b      	str	r3, [r7, #20]
 81056f4:	e03b      	b.n	810576e <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 81056f6:	69bb      	ldr	r3, [r7, #24]
 81056f8:	691a      	ldr	r2, [r3, #16]
 81056fa:	69bb      	ldr	r3, [r7, #24]
 81056fc:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 81056fe:	69bb      	ldr	r3, [r7, #24]
 8105700:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8105704:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8105706:	69bb      	ldr	r3, [r7, #24]
 8105708:	695b      	ldr	r3, [r3, #20]
 810570a:	2b00      	cmp	r3, #0
 810570c:	d009      	beq.n	8105722 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 810570e:	69bb      	ldr	r3, [r7, #24]
 8105710:	695a      	ldr	r2, [r3, #20]
 8105712:	69bb      	ldr	r3, [r7, #24]
 8105714:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8105716:	69bb      	ldr	r3, [r7, #24]
 8105718:	68db      	ldr	r3, [r3, #12]
 810571a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810571e:	69bb      	ldr	r3, [r7, #24]
 8105720:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8105722:	69bb      	ldr	r3, [r7, #24]
 8105724:	68db      	ldr	r3, [r3, #12]
 8105726:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 810572a:	69bb      	ldr	r3, [r7, #24]
 810572c:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 810572e:	68bb      	ldr	r3, [r7, #8]
 8105730:	6a1b      	ldr	r3, [r3, #32]
 8105732:	2b00      	cmp	r3, #0
 8105734:	d005      	beq.n	8105742 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8105736:	69bb      	ldr	r3, [r7, #24]
 8105738:	68db      	ldr	r3, [r3, #12]
 810573a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810573e:	69bb      	ldr	r3, [r7, #24]
 8105740:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8105742:	693b      	ldr	r3, [r7, #16]
 8105744:	3b01      	subs	r3, #1
 8105746:	697a      	ldr	r2, [r7, #20]
 8105748:	429a      	cmp	r2, r3
 810574a:	d20d      	bcs.n	8105768 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 810574c:	69fb      	ldr	r3, [r7, #28]
 810574e:	3301      	adds	r3, #1
 8105750:	61fb      	str	r3, [r7, #28]
 8105752:	69fb      	ldr	r3, [r7, #28]
 8105754:	2b03      	cmp	r3, #3
 8105756:	d902      	bls.n	810575e <HAL_ETH_IsRxDataAvailable+0x1a6>
 8105758:	69fb      	ldr	r3, [r7, #28]
 810575a:	3b04      	subs	r3, #4
 810575c:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 810575e:	68bb      	ldr	r3, [r7, #8]
 8105760:	69fa      	ldr	r2, [r7, #28]
 8105762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105766:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8105768:	697b      	ldr	r3, [r7, #20]
 810576a:	3301      	adds	r3, #1
 810576c:	617b      	str	r3, [r7, #20]
 810576e:	697a      	ldr	r2, [r7, #20]
 8105770:	693b      	ldr	r3, [r7, #16]
 8105772:	429a      	cmp	r2, r3
 8105774:	d3bf      	bcc.n	81056f6 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	681b      	ldr	r3, [r3, #0]
 810577a:	69ba      	ldr	r2, [r7, #24]
 810577c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105780:	3308      	adds	r3, #8
 8105782:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8105784:	68bb      	ldr	r3, [r7, #8]
 8105786:	2200      	movs	r2, #0
 8105788:	619a      	str	r2, [r3, #24]

  return 0;
 810578a:	2300      	movs	r3, #0
}
 810578c:	4618      	mov	r0, r3
 810578e:	3724      	adds	r7, #36	; 0x24
 8105790:	46bd      	mov	sp, r7
 8105792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105796:	4770      	bx	lr

08105798 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8105798:	b580      	push	{r7, lr}
 810579a:	b08a      	sub	sp, #40	; 0x28
 810579c:	af00      	add	r7, sp, #0
 810579e:	6078      	str	r0, [r7, #4]
 81057a0:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	3344      	adds	r3, #68	; 0x44
 81057a6:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 81057a8:	693b      	ldr	r3, [r7, #16]
 81057aa:	695b      	ldr	r3, [r3, #20]
 81057ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 81057ae:	2300      	movs	r3, #0
 81057b0:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 81057b2:	693b      	ldr	r3, [r7, #16]
 81057b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81057b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81057ba:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 81057bc:	683b      	ldr	r3, [r7, #0]
 81057be:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 81057c0:	697b      	ldr	r3, [r7, #20]
 81057c2:	2b00      	cmp	r3, #0
 81057c4:	d104      	bne.n	81057d0 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	2201      	movs	r2, #1
 81057ca:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 81057cc:	2301      	movs	r3, #1
 81057ce:	e07d      	b.n	81058cc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 81057d0:	693b      	ldr	r3, [r7, #16]
 81057d2:	699b      	ldr	r3, [r3, #24]
 81057d4:	2b00      	cmp	r3, #0
 81057d6:	d10f      	bne.n	81057f8 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 81057d8:	6878      	ldr	r0, [r7, #4]
 81057da:	f7ff feed 	bl	81055b8 <HAL_ETH_IsRxDataAvailable>
 81057de:	4603      	mov	r3, r0
 81057e0:	2b00      	cmp	r3, #0
 81057e2:	d101      	bne.n	81057e8 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 81057e4:	2301      	movs	r3, #1
 81057e6:	e071      	b.n	81058cc <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 81057e8:	693b      	ldr	r3, [r7, #16]
 81057ea:	695b      	ldr	r3, [r3, #20]
 81057ec:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 81057ee:	693b      	ldr	r3, [r7, #16]
 81057f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81057f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81057f6:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 81057f8:	2300      	movs	r3, #0
 81057fa:	623b      	str	r3, [r7, #32]
 81057fc:	e031      	b.n	8105862 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 81057fe:	69bb      	ldr	r3, [r7, #24]
 8105800:	691b      	ldr	r3, [r3, #16]
 8105802:	461a      	mov	r2, r3
 8105804:	697b      	ldr	r3, [r7, #20]
 8105806:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	695a      	ldr	r2, [r3, #20]
 810580c:	697b      	ldr	r3, [r7, #20]
 810580e:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8105810:	69bb      	ldr	r3, [r7, #24]
 8105812:	695b      	ldr	r3, [r3, #20]
 8105814:	2b00      	cmp	r3, #0
 8105816:	d00b      	beq.n	8105830 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8105818:	697b      	ldr	r3, [r7, #20]
 810581a:	689b      	ldr	r3, [r3, #8]
 810581c:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 810581e:	69bb      	ldr	r3, [r7, #24]
 8105820:	695b      	ldr	r3, [r3, #20]
 8105822:	461a      	mov	r2, r3
 8105824:	697b      	ldr	r3, [r7, #20]
 8105826:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	695a      	ldr	r2, [r3, #20]
 810582c:	697b      	ldr	r3, [r7, #20]
 810582e:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8105830:	69bb      	ldr	r3, [r7, #24]
 8105832:	68db      	ldr	r3, [r3, #12]
 8105834:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8105838:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 810583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810583c:	3301      	adds	r3, #1
 810583e:	627b      	str	r3, [r7, #36]	; 0x24
 8105840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105842:	2b03      	cmp	r3, #3
 8105844:	d902      	bls.n	810584c <HAL_ETH_GetRxDataBuffer+0xb4>
 8105846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105848:	3b04      	subs	r3, #4
 810584a:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 810584c:	693b      	ldr	r3, [r7, #16]
 810584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105854:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8105856:	697b      	ldr	r3, [r7, #20]
 8105858:	689b      	ldr	r3, [r3, #8]
 810585a:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 810585c:	6a3b      	ldr	r3, [r7, #32]
 810585e:	3301      	adds	r3, #1
 8105860:	623b      	str	r3, [r7, #32]
 8105862:	693b      	ldr	r3, [r7, #16]
 8105864:	699b      	ldr	r3, [r3, #24]
 8105866:	3b01      	subs	r3, #1
 8105868:	6a3a      	ldr	r2, [r7, #32]
 810586a:	429a      	cmp	r2, r3
 810586c:	d3c7      	bcc.n	81057fe <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 810586e:	69bb      	ldr	r3, [r7, #24]
 8105870:	68db      	ldr	r3, [r3, #12]
 8105872:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8105876:	69fb      	ldr	r3, [r7, #28]
 8105878:	1ad3      	subs	r3, r2, r3
 810587a:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 810587c:	69bb      	ldr	r3, [r7, #24]
 810587e:	691b      	ldr	r3, [r3, #16]
 8105880:	461a      	mov	r2, r3
 8105882:	697b      	ldr	r3, [r7, #20]
 8105884:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8105886:	687b      	ldr	r3, [r7, #4]
 8105888:	695b      	ldr	r3, [r3, #20]
 810588a:	68fa      	ldr	r2, [r7, #12]
 810588c:	429a      	cmp	r2, r3
 810588e:	d803      	bhi.n	8105898 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8105890:	697b      	ldr	r3, [r7, #20]
 8105892:	68fa      	ldr	r2, [r7, #12]
 8105894:	605a      	str	r2, [r3, #4]
 8105896:	e018      	b.n	81058ca <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8105898:	69bb      	ldr	r3, [r7, #24]
 810589a:	695b      	ldr	r3, [r3, #20]
 810589c:	2b00      	cmp	r3, #0
 810589e:	d012      	beq.n	81058c6 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	695a      	ldr	r2, [r3, #20]
 81058a4:	697b      	ldr	r3, [r7, #20]
 81058a6:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 81058a8:	697b      	ldr	r3, [r7, #20]
 81058aa:	689b      	ldr	r3, [r3, #8]
 81058ac:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 81058ae:	69bb      	ldr	r3, [r7, #24]
 81058b0:	695b      	ldr	r3, [r3, #20]
 81058b2:	461a      	mov	r2, r3
 81058b4:	697b      	ldr	r3, [r7, #20]
 81058b6:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	695b      	ldr	r3, [r3, #20]
 81058bc:	68fa      	ldr	r2, [r7, #12]
 81058be:	1ad2      	subs	r2, r2, r3
 81058c0:	697b      	ldr	r3, [r7, #20]
 81058c2:	605a      	str	r2, [r3, #4]
 81058c4:	e001      	b.n	81058ca <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 81058c6:	2301      	movs	r3, #1
 81058c8:	e000      	b.n	81058cc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 81058ca:	2300      	movs	r3, #0
}
 81058cc:	4618      	mov	r0, r3
 81058ce:	3728      	adds	r7, #40	; 0x28
 81058d0:	46bd      	mov	sp, r7
 81058d2:	bd80      	pop	{r7, pc}

081058d4 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 81058d4:	b580      	push	{r7, lr}
 81058d6:	b086      	sub	sp, #24
 81058d8:	af00      	add	r7, sp, #0
 81058da:	6078      	str	r0, [r7, #4]
 81058dc:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	3344      	adds	r3, #68	; 0x44
 81058e2:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 81058e4:	693b      	ldr	r3, [r7, #16]
 81058e6:	695b      	ldr	r3, [r3, #20]
 81058e8:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 81058ea:	693b      	ldr	r3, [r7, #16]
 81058ec:	699b      	ldr	r3, [r3, #24]
 81058ee:	2b00      	cmp	r3, #0
 81058f0:	d107      	bne.n	8105902 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 81058f2:	6878      	ldr	r0, [r7, #4]
 81058f4:	f7ff fe60 	bl	81055b8 <HAL_ETH_IsRxDataAvailable>
 81058f8:	4603      	mov	r3, r0
 81058fa:	2b00      	cmp	r3, #0
 81058fc:	d101      	bne.n	8105902 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 81058fe:	2301      	movs	r3, #1
 8105900:	e017      	b.n	8105932 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8105902:	693b      	ldr	r3, [r7, #16]
 8105904:	699a      	ldr	r2, [r3, #24]
 8105906:	697b      	ldr	r3, [r7, #20]
 8105908:	4413      	add	r3, r2
 810590a:	3b01      	subs	r3, #1
 810590c:	617b      	str	r3, [r7, #20]
 810590e:	697b      	ldr	r3, [r7, #20]
 8105910:	2b03      	cmp	r3, #3
 8105912:	d902      	bls.n	810591a <HAL_ETH_GetRxDataLength+0x46>
 8105914:	697b      	ldr	r3, [r7, #20]
 8105916:	3b04      	subs	r3, #4
 8105918:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 810591a:	693b      	ldr	r3, [r7, #16]
 810591c:	697a      	ldr	r2, [r7, #20]
 810591e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105922:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8105924:	68fb      	ldr	r3, [r7, #12]
 8105926:	68db      	ldr	r3, [r3, #12]
 8105928:	f3c3 020e 	ubfx	r2, r3, #0, #15
 810592c:	683b      	ldr	r3, [r7, #0]
 810592e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8105930:	2300      	movs	r3, #0
}
 8105932:	4618      	mov	r0, r3
 8105934:	3718      	adds	r7, #24
 8105936:	46bd      	mov	sp, r7
 8105938:	bd80      	pop	{r7, pc}

0810593a <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 810593a:	b480      	push	{r7}
 810593c:	b089      	sub	sp, #36	; 0x24
 810593e:	af00      	add	r7, sp, #0
 8105940:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8105942:	687b      	ldr	r3, [r7, #4]
 8105944:	3344      	adds	r3, #68	; 0x44
 8105946:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8105948:	68fb      	ldr	r3, [r7, #12]
 810594a:	695b      	ldr	r3, [r3, #20]
 810594c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 810594e:	68fb      	ldr	r3, [r7, #12]
 8105950:	69fa      	ldr	r2, [r7, #28]
 8105952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105956:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8105958:	68fb      	ldr	r3, [r7, #12]
 810595a:	699b      	ldr	r3, [r3, #24]
 810595c:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	699b      	ldr	r3, [r3, #24]
 8105962:	2b00      	cmp	r3, #0
 8105964:	d101      	bne.n	810596a <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8105966:	2301      	movs	r3, #1
 8105968:	e057      	b.n	8105a1a <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 810596a:	68fb      	ldr	r3, [r7, #12]
 810596c:	69db      	ldr	r3, [r3, #28]
 810596e:	2b00      	cmp	r3, #0
 8105970:	d002      	beq.n	8105978 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8105972:	697b      	ldr	r3, [r7, #20]
 8105974:	3301      	adds	r3, #1
 8105976:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8105978:	2300      	movs	r3, #0
 810597a:	613b      	str	r3, [r7, #16]
 810597c:	e03b      	b.n	81059f6 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 810597e:	69bb      	ldr	r3, [r7, #24]
 8105980:	691a      	ldr	r2, [r3, #16]
 8105982:	69bb      	ldr	r3, [r7, #24]
 8105984:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8105986:	69bb      	ldr	r3, [r7, #24]
 8105988:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810598c:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 810598e:	69bb      	ldr	r3, [r7, #24]
 8105990:	695b      	ldr	r3, [r3, #20]
 8105992:	2b00      	cmp	r3, #0
 8105994:	d009      	beq.n	81059aa <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8105996:	69bb      	ldr	r3, [r7, #24]
 8105998:	695a      	ldr	r2, [r3, #20]
 810599a:	69bb      	ldr	r3, [r7, #24]
 810599c:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 810599e:	69bb      	ldr	r3, [r7, #24]
 81059a0:	68db      	ldr	r3, [r3, #12]
 81059a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 81059a6:	69bb      	ldr	r3, [r7, #24]
 81059a8:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 81059aa:	69bb      	ldr	r3, [r7, #24]
 81059ac:	68db      	ldr	r3, [r3, #12]
 81059ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81059b2:	69bb      	ldr	r3, [r7, #24]
 81059b4:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 81059b6:	68fb      	ldr	r3, [r7, #12]
 81059b8:	6a1b      	ldr	r3, [r3, #32]
 81059ba:	2b00      	cmp	r3, #0
 81059bc:	d005      	beq.n	81059ca <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 81059be:	69bb      	ldr	r3, [r7, #24]
 81059c0:	68db      	ldr	r3, [r3, #12]
 81059c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 81059c6:	69bb      	ldr	r3, [r7, #24]
 81059c8:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 81059ca:	697b      	ldr	r3, [r7, #20]
 81059cc:	3b01      	subs	r3, #1
 81059ce:	693a      	ldr	r2, [r7, #16]
 81059d0:	429a      	cmp	r2, r3
 81059d2:	d20d      	bcs.n	81059f0 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 81059d4:	69fb      	ldr	r3, [r7, #28]
 81059d6:	3301      	adds	r3, #1
 81059d8:	61fb      	str	r3, [r7, #28]
 81059da:	69fb      	ldr	r3, [r7, #28]
 81059dc:	2b03      	cmp	r3, #3
 81059de:	d902      	bls.n	81059e6 <HAL_ETH_BuildRxDescriptors+0xac>
 81059e0:	69fb      	ldr	r3, [r7, #28]
 81059e2:	3b04      	subs	r3, #4
 81059e4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 81059e6:	68fb      	ldr	r3, [r7, #12]
 81059e8:	69fa      	ldr	r2, [r7, #28]
 81059ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81059ee:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 81059f0:	693b      	ldr	r3, [r7, #16]
 81059f2:	3301      	adds	r3, #1
 81059f4:	613b      	str	r3, [r7, #16]
 81059f6:	693a      	ldr	r2, [r7, #16]
 81059f8:	697b      	ldr	r3, [r7, #20]
 81059fa:	429a      	cmp	r2, r3
 81059fc:	d3bf      	bcc.n	810597e <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	681b      	ldr	r3, [r3, #0]
 8105a02:	69ba      	ldr	r2, [r7, #24]
 8105a04:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105a08:	3308      	adds	r3, #8
 8105a0a:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8105a0c:	68fb      	ldr	r3, [r7, #12]
 8105a0e:	2200      	movs	r2, #0
 8105a10:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	2200      	movs	r2, #0
 8105a16:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8105a18:	2300      	movs	r3, #0
}
 8105a1a:	4618      	mov	r0, r3
 8105a1c:	3724      	adds	r7, #36	; 0x24
 8105a1e:	46bd      	mov	sp, r7
 8105a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a24:	4770      	bx	lr
	...

08105a28 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8105a28:	b580      	push	{r7, lr}
 8105a2a:	b082      	sub	sp, #8
 8105a2c:	af00      	add	r7, sp, #0
 8105a2e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8105a30:	687b      	ldr	r3, [r7, #4]
 8105a32:	681b      	ldr	r3, [r3, #0]
 8105a34:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105a3e:	2b40      	cmp	r3, #64	; 0x40
 8105a40:	d113      	bne.n	8105a6a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105a4a:	3314      	adds	r3, #20
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105a52:	2b40      	cmp	r3, #64	; 0x40
 8105a54:	d109      	bne.n	8105a6a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8105a56:	6878      	ldr	r0, [r7, #4]
 8105a58:	f00e ff0a 	bl	8114870 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105a64:	f248 0240 	movw	r2, #32832	; 0x8040
 8105a68:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	f003 0301 	and.w	r3, r3, #1
 8105a78:	2b01      	cmp	r3, #1
 8105a7a:	d113      	bne.n	8105aa4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105a84:	3314      	adds	r3, #20
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	f003 0301 	and.w	r3, r3, #1
 8105a8c:	2b01      	cmp	r3, #1
 8105a8e:	d109      	bne.n	8105aa4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8105a90:	6878      	ldr	r0, [r7, #4]
 8105a92:	f000 f8cb 	bl	8105c2c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105a9e:	f248 0201 	movw	r2, #32769	; 0x8001
 8105aa2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	681b      	ldr	r3, [r3, #0]
 8105aa8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ab6:	d149      	bne.n	8105b4c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105ac0:	3314      	adds	r3, #20
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105acc:	d13e      	bne.n	8105b4c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105ad2:	f043 0208 	orr.w	r2, r3, #8
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105ae2:	681b      	ldr	r3, [r3, #0]
 8105ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105aec:	d11b      	bne.n	8105b26 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105af6:	681a      	ldr	r2, [r3, #0]
 8105af8:	f241 1302 	movw	r3, #4354	; 0x1102
 8105afc:	4013      	ands	r3, r2
 8105afe:	687a      	ldr	r2, [r7, #4]
 8105b00:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8105b02:	687b      	ldr	r3, [r7, #4]
 8105b04:	681b      	ldr	r3, [r3, #0]
 8105b06:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105b0a:	3314      	adds	r3, #20
 8105b0c:	681a      	ldr	r2, [r3, #0]
 8105b0e:	687b      	ldr	r3, [r7, #4]
 8105b10:	681b      	ldr	r3, [r3, #0]
 8105b12:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105b16:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8105b1a:	3314      	adds	r3, #20
 8105b1c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	22e0      	movs	r2, #224	; 0xe0
 8105b22:	66da      	str	r2, [r3, #108]	; 0x6c
 8105b24:	e00f      	b.n	8105b46 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	681b      	ldr	r3, [r3, #0]
 8105b2a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8105b40:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8105b44:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8105b46:	6878      	ldr	r0, [r7, #4]
 8105b48:	f000 f87a 	bl	8105c40 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105b54:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8105b58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105b5c:	d10e      	bne.n	8105b7c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	681b      	ldr	r3, [r3, #0]
 8105b62:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	22e0      	movs	r2, #224	; 0xe0
 8105b6e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8105b70:	6878      	ldr	r0, [r7, #4]
 8105b72:	f000 f86f 	bl	8105c54 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	2200      	movs	r2, #0
 8105b7a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105b84:	f003 0310 	and.w	r3, r3, #16
 8105b88:	2b10      	cmp	r3, #16
 8105b8a:	d10f      	bne.n	8105bac <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8105b94:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8105b9e:	6878      	ldr	r0, [r7, #4]
 8105ba0:	f000 f862 	bl	8105c68 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	2200      	movs	r2, #0
 8105ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	681b      	ldr	r3, [r3, #0]
 8105bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105bb4:	f003 0320 	and.w	r3, r3, #32
 8105bb8:	2b20      	cmp	r3, #32
 8105bba:	d10f      	bne.n	8105bdc <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8105bc4:	f003 020f 	and.w	r2, r3, #15
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8105bce:	6878      	ldr	r0, [r7, #4]
 8105bd0:	f000 f854 	bl	8105c7c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	2200      	movs	r2, #0
 8105bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8105bdc:	f7fd f960 	bl	8102ea0 <HAL_GetCurrentCPUID>
 8105be0:	4603      	mov	r3, r0
 8105be2:	2b03      	cmp	r3, #3
 8105be4:	d10d      	bne.n	8105c02 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8105be6:	4b0f      	ldr	r3, [pc, #60]	; (8105c24 <HAL_ETH_IRQHandler+0x1fc>)
 8105be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105bee:	2b00      	cmp	r3, #0
 8105bf0:	d014      	beq.n	8105c1c <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8105bf2:	4b0c      	ldr	r3, [pc, #48]	; (8105c24 <HAL_ETH_IRQHandler+0x1fc>)
 8105bf4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8105bf8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8105bfa:	6878      	ldr	r0, [r7, #4]
 8105bfc:	f000 f848 	bl	8105c90 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8105c00:	e00c      	b.n	8105c1c <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8105c02:	4b09      	ldr	r3, [pc, #36]	; (8105c28 <HAL_ETH_IRQHandler+0x200>)
 8105c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105c0a:	2b00      	cmp	r3, #0
 8105c0c:	d006      	beq.n	8105c1c <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8105c0e:	4b06      	ldr	r3, [pc, #24]	; (8105c28 <HAL_ETH_IRQHandler+0x200>)
 8105c10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8105c14:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8105c16:	6878      	ldr	r0, [r7, #4]
 8105c18:	f000 f83a 	bl	8105c90 <HAL_ETH_WakeUpCallback>
}
 8105c1c:	bf00      	nop
 8105c1e:	3708      	adds	r7, #8
 8105c20:	46bd      	mov	sp, r7
 8105c22:	bd80      	pop	{r7, pc}
 8105c24:	58000080 	.word	0x58000080
 8105c28:	580000c0 	.word	0x580000c0

08105c2c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8105c2c:	b480      	push	{r7}
 8105c2e:	b083      	sub	sp, #12
 8105c30:	af00      	add	r7, sp, #0
 8105c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8105c34:	bf00      	nop
 8105c36:	370c      	adds	r7, #12
 8105c38:	46bd      	mov	sp, r7
 8105c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c3e:	4770      	bx	lr

08105c40 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8105c40:	b480      	push	{r7}
 8105c42:	b083      	sub	sp, #12
 8105c44:	af00      	add	r7, sp, #0
 8105c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8105c48:	bf00      	nop
 8105c4a:	370c      	adds	r7, #12
 8105c4c:	46bd      	mov	sp, r7
 8105c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c52:	4770      	bx	lr

08105c54 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8105c54:	b480      	push	{r7}
 8105c56:	b083      	sub	sp, #12
 8105c58:	af00      	add	r7, sp, #0
 8105c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8105c5c:	bf00      	nop
 8105c5e:	370c      	adds	r7, #12
 8105c60:	46bd      	mov	sp, r7
 8105c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c66:	4770      	bx	lr

08105c68 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8105c68:	b480      	push	{r7}
 8105c6a:	b083      	sub	sp, #12
 8105c6c:	af00      	add	r7, sp, #0
 8105c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8105c70:	bf00      	nop
 8105c72:	370c      	adds	r7, #12
 8105c74:	46bd      	mov	sp, r7
 8105c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c7a:	4770      	bx	lr

08105c7c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8105c7c:	b480      	push	{r7}
 8105c7e:	b083      	sub	sp, #12
 8105c80:	af00      	add	r7, sp, #0
 8105c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8105c84:	bf00      	nop
 8105c86:	370c      	adds	r7, #12
 8105c88:	46bd      	mov	sp, r7
 8105c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c8e:	4770      	bx	lr

08105c90 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8105c90:	b480      	push	{r7}
 8105c92:	b083      	sub	sp, #12
 8105c94:	af00      	add	r7, sp, #0
 8105c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8105c98:	bf00      	nop
 8105c9a:	370c      	adds	r7, #12
 8105c9c:	46bd      	mov	sp, r7
 8105c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ca2:	4770      	bx	lr

08105ca4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8105ca4:	b580      	push	{r7, lr}
 8105ca6:	b086      	sub	sp, #24
 8105ca8:	af00      	add	r7, sp, #0
 8105caa:	60f8      	str	r0, [r7, #12]
 8105cac:	60b9      	str	r1, [r7, #8]
 8105cae:	607a      	str	r2, [r7, #4]
 8105cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8105cb2:	68fb      	ldr	r3, [r7, #12]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8105cba:	f003 0301 	and.w	r3, r3, #1
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d001      	beq.n	8105cc6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8105cc2:	2301      	movs	r3, #1
 8105cc4:	e03e      	b.n	8105d44 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8105cce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8105cd0:	697b      	ldr	r3, [r7, #20]
 8105cd2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8105cd6:	68bb      	ldr	r3, [r7, #8]
 8105cd8:	055b      	lsls	r3, r3, #21
 8105cda:	4313      	orrs	r3, r2
 8105cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8105cde:	697b      	ldr	r3, [r7, #20]
 8105ce0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	041b      	lsls	r3, r3, #16
 8105ce8:	4313      	orrs	r3, r2
 8105cea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8105cec:	697b      	ldr	r3, [r7, #20]
 8105cee:	f043 030c 	orr.w	r3, r3, #12
 8105cf2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8105cf4:	697b      	ldr	r3, [r7, #20]
 8105cf6:	f043 0301 	orr.w	r3, r3, #1
 8105cfa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	697a      	ldr	r2, [r7, #20]
 8105d02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8105d06:	f7fb fb93 	bl	8101430 <HAL_GetTick>
 8105d0a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105d0c:	e009      	b.n	8105d22 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8105d0e:	f7fb fb8f 	bl	8101430 <HAL_GetTick>
 8105d12:	4602      	mov	r2, r0
 8105d14:	693b      	ldr	r3, [r7, #16]
 8105d16:	1ad3      	subs	r3, r2, r3
 8105d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105d1c:	d901      	bls.n	8105d22 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8105d1e:	2301      	movs	r3, #1
 8105d20:	e010      	b.n	8105d44 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105d22:	68fb      	ldr	r3, [r7, #12]
 8105d24:	681b      	ldr	r3, [r3, #0]
 8105d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8105d2a:	f003 0301 	and.w	r3, r3, #1
 8105d2e:	2b00      	cmp	r3, #0
 8105d30:	d1ed      	bne.n	8105d0e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8105d3a:	b29b      	uxth	r3, r3
 8105d3c:	461a      	mov	r2, r3
 8105d3e:	683b      	ldr	r3, [r7, #0]
 8105d40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8105d42:	2300      	movs	r3, #0
}
 8105d44:	4618      	mov	r0, r3
 8105d46:	3718      	adds	r7, #24
 8105d48:	46bd      	mov	sp, r7
 8105d4a:	bd80      	pop	{r7, pc}

08105d4c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8105d4c:	b580      	push	{r7, lr}
 8105d4e:	b086      	sub	sp, #24
 8105d50:	af00      	add	r7, sp, #0
 8105d52:	60f8      	str	r0, [r7, #12]
 8105d54:	60b9      	str	r1, [r7, #8]
 8105d56:	607a      	str	r2, [r7, #4]
 8105d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	681b      	ldr	r3, [r3, #0]
 8105d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8105d62:	f003 0301 	and.w	r3, r3, #1
 8105d66:	2b00      	cmp	r3, #0
 8105d68:	d001      	beq.n	8105d6e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8105d6a:	2301      	movs	r3, #1
 8105d6c:	e03c      	b.n	8105de8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8105d6e:	68fb      	ldr	r3, [r7, #12]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8105d76:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8105d78:	697b      	ldr	r3, [r7, #20]
 8105d7a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8105d7e:	68bb      	ldr	r3, [r7, #8]
 8105d80:	055b      	lsls	r3, r3, #21
 8105d82:	4313      	orrs	r3, r2
 8105d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8105d86:	697b      	ldr	r3, [r7, #20]
 8105d88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	041b      	lsls	r3, r3, #16
 8105d90:	4313      	orrs	r3, r2
 8105d92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8105d94:	697b      	ldr	r3, [r7, #20]
 8105d96:	f023 030c 	bic.w	r3, r3, #12
 8105d9a:	f043 0304 	orr.w	r3, r3, #4
 8105d9e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8105da0:	697b      	ldr	r3, [r7, #20]
 8105da2:	f043 0301 	orr.w	r3, r3, #1
 8105da6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8105da8:	683b      	ldr	r3, [r7, #0]
 8105daa:	b29a      	uxth	r2, r3
 8105dac:	4b10      	ldr	r3, [pc, #64]	; (8105df0 <HAL_ETH_WritePHYRegister+0xa4>)
 8105dae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8105db2:	4a0f      	ldr	r2, [pc, #60]	; (8105df0 <HAL_ETH_WritePHYRegister+0xa4>)
 8105db4:	697b      	ldr	r3, [r7, #20]
 8105db6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8105dba:	f7fb fb39 	bl	8101430 <HAL_GetTick>
 8105dbe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105dc0:	e009      	b.n	8105dd6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8105dc2:	f7fb fb35 	bl	8101430 <HAL_GetTick>
 8105dc6:	4602      	mov	r2, r0
 8105dc8:	693b      	ldr	r3, [r7, #16]
 8105dca:	1ad3      	subs	r3, r2, r3
 8105dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105dd0:	d901      	bls.n	8105dd6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8105dd2:	2301      	movs	r3, #1
 8105dd4:	e008      	b.n	8105de8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105dd6:	68fb      	ldr	r3, [r7, #12]
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8105dde:	f003 0301 	and.w	r3, r3, #1
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d1ed      	bne.n	8105dc2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8105de6:	2300      	movs	r3, #0
}
 8105de8:	4618      	mov	r0, r3
 8105dea:	3718      	adds	r7, #24
 8105dec:	46bd      	mov	sp, r7
 8105dee:	bd80      	pop	{r7, pc}
 8105df0:	40028000 	.word	0x40028000

08105df4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8105df4:	b480      	push	{r7}
 8105df6:	b083      	sub	sp, #12
 8105df8:	af00      	add	r7, sp, #0
 8105dfa:	6078      	str	r0, [r7, #4]
 8105dfc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8105dfe:	683b      	ldr	r3, [r7, #0]
 8105e00:	2b00      	cmp	r3, #0
 8105e02:	d101      	bne.n	8105e08 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8105e04:	2301      	movs	r3, #1
 8105e06:	e1c3      	b.n	8106190 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	f003 020c 	and.w	r2, r3, #12
 8105e12:	683b      	ldr	r3, [r7, #0]
 8105e14:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	681b      	ldr	r3, [r3, #0]
 8105e1c:	f003 0310 	and.w	r3, r3, #16
 8105e20:	2b00      	cmp	r3, #0
 8105e22:	bf14      	ite	ne
 8105e24:	2301      	movne	r3, #1
 8105e26:	2300      	moveq	r3, #0
 8105e28:	b2db      	uxtb	r3, r3
 8105e2a:	461a      	mov	r2, r3
 8105e2c:	683b      	ldr	r3, [r7, #0]
 8105e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	681b      	ldr	r3, [r3, #0]
 8105e36:	681b      	ldr	r3, [r3, #0]
 8105e38:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8105e3c:	683b      	ldr	r3, [r7, #0]
 8105e3e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	681b      	ldr	r3, [r3, #0]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105e4a:	2b00      	cmp	r3, #0
 8105e4c:	bf0c      	ite	eq
 8105e4e:	2301      	moveq	r3, #1
 8105e50:	2300      	movne	r3, #0
 8105e52:	b2db      	uxtb	r3, r3
 8105e54:	461a      	mov	r2, r3
 8105e56:	683b      	ldr	r3, [r7, #0]
 8105e58:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	681b      	ldr	r3, [r3, #0]
 8105e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105e66:	2b00      	cmp	r3, #0
 8105e68:	bf14      	ite	ne
 8105e6a:	2301      	movne	r3, #1
 8105e6c:	2300      	moveq	r3, #0
 8105e6e:	b2db      	uxtb	r3, r3
 8105e70:	461a      	mov	r2, r3
 8105e72:	683b      	ldr	r3, [r7, #0]
 8105e74:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	681b      	ldr	r3, [r3, #0]
 8105e7a:	681b      	ldr	r3, [r3, #0]
 8105e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105e80:	2b00      	cmp	r3, #0
 8105e82:	bf0c      	ite	eq
 8105e84:	2301      	moveq	r3, #1
 8105e86:	2300      	movne	r3, #0
 8105e88:	b2db      	uxtb	r3, r3
 8105e8a:	461a      	mov	r2, r3
 8105e8c:	683b      	ldr	r3, [r7, #0]
 8105e8e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105e9a:	2b00      	cmp	r3, #0
 8105e9c:	bf14      	ite	ne
 8105e9e:	2301      	movne	r3, #1
 8105ea0:	2300      	moveq	r3, #0
 8105ea2:	b2db      	uxtb	r3, r3
 8105ea4:	461a      	mov	r2, r3
 8105ea6:	683b      	ldr	r3, [r7, #0]
 8105ea8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8105eaa:	687b      	ldr	r3, [r7, #4]
 8105eac:	681b      	ldr	r3, [r3, #0]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105eb4:	2b00      	cmp	r3, #0
 8105eb6:	bf14      	ite	ne
 8105eb8:	2301      	movne	r3, #1
 8105eba:	2300      	moveq	r3, #0
 8105ebc:	b2db      	uxtb	r3, r3
 8105ebe:	461a      	mov	r2, r3
 8105ec0:	683b      	ldr	r3, [r7, #0]
 8105ec2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8105ece:	683b      	ldr	r3, [r7, #0]
 8105ed0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	681b      	ldr	r3, [r3, #0]
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8105edc:	683b      	ldr	r3, [r7, #0]
 8105ede:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	681b      	ldr	r3, [r3, #0]
 8105ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105eea:	2b00      	cmp	r3, #0
 8105eec:	bf14      	ite	ne
 8105eee:	2301      	movne	r3, #1
 8105ef0:	2300      	moveq	r3, #0
 8105ef2:	b2db      	uxtb	r3, r3
 8105ef4:	461a      	mov	r2, r3
 8105ef6:	683b      	ldr	r3, [r7, #0]
 8105ef8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	681b      	ldr	r3, [r3, #0]
 8105f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105f04:	2b00      	cmp	r3, #0
 8105f06:	bf0c      	ite	eq
 8105f08:	2301      	moveq	r3, #1
 8105f0a:	2300      	movne	r3, #0
 8105f0c:	b2db      	uxtb	r3, r3
 8105f0e:	461a      	mov	r2, r3
 8105f10:	683b      	ldr	r3, [r7, #0]
 8105f12:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	681b      	ldr	r3, [r3, #0]
 8105f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105f1e:	2b00      	cmp	r3, #0
 8105f20:	bf0c      	ite	eq
 8105f22:	2301      	moveq	r3, #1
 8105f24:	2300      	movne	r3, #0
 8105f26:	b2db      	uxtb	r3, r3
 8105f28:	461a      	mov	r2, r3
 8105f2a:	683b      	ldr	r3, [r7, #0]
 8105f2c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105f38:	2b00      	cmp	r3, #0
 8105f3a:	bf14      	ite	ne
 8105f3c:	2301      	movne	r3, #1
 8105f3e:	2300      	moveq	r3, #0
 8105f40:	b2db      	uxtb	r3, r3
 8105f42:	461a      	mov	r2, r3
 8105f44:	683b      	ldr	r3, [r7, #0]
 8105f46:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	681b      	ldr	r3, [r3, #0]
 8105f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105f52:	2b00      	cmp	r3, #0
 8105f54:	bf14      	ite	ne
 8105f56:	2301      	movne	r3, #1
 8105f58:	2300      	moveq	r3, #0
 8105f5a:	b2db      	uxtb	r3, r3
 8105f5c:	461a      	mov	r2, r3
 8105f5e:	683b      	ldr	r3, [r7, #0]
 8105f60:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	bf14      	ite	ne
 8105f70:	2301      	movne	r3, #1
 8105f72:	2300      	moveq	r3, #0
 8105f74:	b2db      	uxtb	r3, r3
 8105f76:	461a      	mov	r2, r3
 8105f78:	683b      	ldr	r3, [r7, #0]
 8105f7a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105f86:	2b00      	cmp	r3, #0
 8105f88:	bf14      	ite	ne
 8105f8a:	2301      	movne	r3, #1
 8105f8c:	2300      	moveq	r3, #0
 8105f8e:	b2db      	uxtb	r3, r3
 8105f90:	461a      	mov	r2, r3
 8105f92:	683b      	ldr	r3, [r7, #0]
 8105f94:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	681b      	ldr	r3, [r3, #0]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8105fa0:	683b      	ldr	r3, [r7, #0]
 8105fa2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105fae:	2b00      	cmp	r3, #0
 8105fb0:	bf14      	ite	ne
 8105fb2:	2301      	movne	r3, #1
 8105fb4:	2300      	moveq	r3, #0
 8105fb6:	b2db      	uxtb	r3, r3
 8105fb8:	461a      	mov	r2, r3
 8105fba:	683b      	ldr	r3, [r7, #0]
 8105fbc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	681b      	ldr	r3, [r3, #0]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8105fc8:	683b      	ldr	r3, [r7, #0]
 8105fca:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	685b      	ldr	r3, [r3, #4]
 8105fd2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8105fd6:	683b      	ldr	r3, [r7, #0]
 8105fd8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	685b      	ldr	r3, [r3, #4]
 8105fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105fe4:	2b00      	cmp	r3, #0
 8105fe6:	bf0c      	ite	eq
 8105fe8:	2301      	moveq	r3, #1
 8105fea:	2300      	movne	r3, #0
 8105fec:	b2db      	uxtb	r3, r3
 8105fee:	461a      	mov	r2, r3
 8105ff0:	683b      	ldr	r3, [r7, #0]
 8105ff2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	681b      	ldr	r3, [r3, #0]
 8105ffa:	685b      	ldr	r3, [r3, #4]
 8105ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106000:	2b00      	cmp	r3, #0
 8106002:	bf14      	ite	ne
 8106004:	2301      	movne	r3, #1
 8106006:	2300      	moveq	r3, #0
 8106008:	b2db      	uxtb	r3, r3
 810600a:	461a      	mov	r2, r3
 810600c:	683b      	ldr	r3, [r7, #0]
 810600e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	685b      	ldr	r3, [r3, #4]
 8106018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810601c:	2b00      	cmp	r3, #0
 810601e:	bf14      	ite	ne
 8106020:	2301      	movne	r3, #1
 8106022:	2300      	moveq	r3, #0
 8106024:	b2db      	uxtb	r3, r3
 8106026:	461a      	mov	r2, r3
 8106028:	683b      	ldr	r3, [r7, #0]
 810602a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	685b      	ldr	r3, [r3, #4]
 8106034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106038:	2b00      	cmp	r3, #0
 810603a:	bf14      	ite	ne
 810603c:	2301      	movne	r3, #1
 810603e:	2300      	moveq	r3, #0
 8106040:	b2db      	uxtb	r3, r3
 8106042:	461a      	mov	r2, r3
 8106044:	683b      	ldr	r3, [r7, #0]
 8106046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	685b      	ldr	r3, [r3, #4]
 8106050:	0e5b      	lsrs	r3, r3, #25
 8106052:	f003 021f 	and.w	r2, r3, #31
 8106056:	683b      	ldr	r3, [r7, #0]
 8106058:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	681b      	ldr	r3, [r3, #0]
 810605e:	68db      	ldr	r3, [r3, #12]
 8106060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106064:	2b00      	cmp	r3, #0
 8106066:	bf14      	ite	ne
 8106068:	2301      	movne	r3, #1
 810606a:	2300      	moveq	r3, #0
 810606c:	b2db      	uxtb	r3, r3
 810606e:	461a      	mov	r2, r3
 8106070:	683b      	ldr	r3, [r7, #0]
 8106072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	681b      	ldr	r3, [r3, #0]
 810607a:	68db      	ldr	r3, [r3, #12]
 810607c:	f003 020f 	and.w	r2, r3, #15
 8106080:	683b      	ldr	r3, [r7, #0]
 8106082:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	681b      	ldr	r3, [r3, #0]
 8106088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810608a:	f003 0302 	and.w	r3, r3, #2
 810608e:	2b00      	cmp	r3, #0
 8106090:	bf14      	ite	ne
 8106092:	2301      	movne	r3, #1
 8106094:	2300      	moveq	r3, #0
 8106096:	b2db      	uxtb	r3, r3
 8106098:	461a      	mov	r2, r3
 810609a:	683b      	ldr	r3, [r7, #0]
 810609c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81060aa:	2b00      	cmp	r3, #0
 81060ac:	bf0c      	ite	eq
 81060ae:	2301      	moveq	r3, #1
 81060b0:	2300      	movne	r3, #0
 81060b2:	b2db      	uxtb	r3, r3
 81060b4:	461a      	mov	r2, r3
 81060b6:	683b      	ldr	r3, [r7, #0]
 81060b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	681b      	ldr	r3, [r3, #0]
 81060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81060c6:	683b      	ldr	r3, [r7, #0]
 81060c8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060d0:	0c1b      	lsrs	r3, r3, #16
 81060d2:	b29a      	uxth	r2, r3
 81060d4:	683b      	ldr	r3, [r7, #0]
 81060d6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	681b      	ldr	r3, [r3, #0]
 81060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81060e0:	f003 0301 	and.w	r3, r3, #1
 81060e4:	2b00      	cmp	r3, #0
 81060e6:	bf14      	ite	ne
 81060e8:	2301      	movne	r3, #1
 81060ea:	2300      	moveq	r3, #0
 81060ec:	b2db      	uxtb	r3, r3
 81060ee:	461a      	mov	r2, r3
 81060f0:	683b      	ldr	r3, [r7, #0]
 81060f2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81060fe:	f003 0302 	and.w	r3, r3, #2
 8106102:	2b00      	cmp	r3, #0
 8106104:	bf14      	ite	ne
 8106106:	2301      	movne	r3, #1
 8106108:	2300      	moveq	r3, #0
 810610a:	b2db      	uxtb	r3, r3
 810610c:	461a      	mov	r2, r3
 810610e:	683b      	ldr	r3, [r7, #0]
 8106110:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	681b      	ldr	r3, [r3, #0]
 8106118:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 810611c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8106120:	683b      	ldr	r3, [r7, #0]
 8106122:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 810612c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8106130:	683b      	ldr	r3, [r7, #0]
 8106132:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	681b      	ldr	r3, [r3, #0]
 8106138:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 810613c:	f003 0308 	and.w	r3, r3, #8
 8106140:	2b00      	cmp	r3, #0
 8106142:	bf14      	ite	ne
 8106144:	2301      	movne	r3, #1
 8106146:	2300      	moveq	r3, #0
 8106148:	b2db      	uxtb	r3, r3
 810614a:	461a      	mov	r2, r3
 810614c:	683b      	ldr	r3, [r7, #0]
 810614e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8106152:	687b      	ldr	r3, [r7, #4]
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 810615a:	f003 0310 	and.w	r3, r3, #16
 810615e:	2b00      	cmp	r3, #0
 8106160:	bf14      	ite	ne
 8106162:	2301      	movne	r3, #1
 8106164:	2300      	moveq	r3, #0
 8106166:	b2db      	uxtb	r3, r3
 8106168:	461a      	mov	r2, r3
 810616a:	683b      	ldr	r3, [r7, #0]
 810616c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8106178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810617c:	2b00      	cmp	r3, #0
 810617e:	bf0c      	ite	eq
 8106180:	2301      	moveq	r3, #1
 8106182:	2300      	movne	r3, #0
 8106184:	b2db      	uxtb	r3, r3
 8106186:	461a      	mov	r2, r3
 8106188:	683b      	ldr	r3, [r7, #0]
 810618a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 810618e:	2300      	movs	r3, #0
}
 8106190:	4618      	mov	r0, r3
 8106192:	370c      	adds	r7, #12
 8106194:	46bd      	mov	sp, r7
 8106196:	f85d 7b04 	ldr.w	r7, [sp], #4
 810619a:	4770      	bx	lr

0810619c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 810619c:	b580      	push	{r7, lr}
 810619e:	b082      	sub	sp, #8
 81061a0:	af00      	add	r7, sp, #0
 81061a2:	6078      	str	r0, [r7, #4]
 81061a4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 81061a6:	683b      	ldr	r3, [r7, #0]
 81061a8:	2b00      	cmp	r3, #0
 81061aa:	d101      	bne.n	81061b0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 81061ac:	2301      	movs	r3, #1
 81061ae:	e00a      	b.n	81061c6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81061b4:	2b10      	cmp	r3, #16
 81061b6:	d105      	bne.n	81061c4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 81061b8:	6839      	ldr	r1, [r7, #0]
 81061ba:	6878      	ldr	r0, [r7, #4]
 81061bc:	f000 f860 	bl	8106280 <ETH_SetMACConfig>

    return HAL_OK;
 81061c0:	2300      	movs	r3, #0
 81061c2:	e000      	b.n	81061c6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 81061c4:	2301      	movs	r3, #1
  }
}
 81061c6:	4618      	mov	r0, r3
 81061c8:	3708      	adds	r7, #8
 81061ca:	46bd      	mov	sp, r7
 81061cc:	bd80      	pop	{r7, pc}
	...

081061d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 81061d0:	b580      	push	{r7, lr}
 81061d2:	b084      	sub	sp, #16
 81061d4:	af00      	add	r7, sp, #0
 81061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	681b      	ldr	r3, [r3, #0]
 81061dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 81061e0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 81061e2:	68fb      	ldr	r3, [r7, #12]
 81061e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81061e8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 81061ea:	f001 fba1 	bl	8107930 <HAL_RCC_GetHCLKFreq>
 81061ee:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 81061f0:	68bb      	ldr	r3, [r7, #8]
 81061f2:	4a1e      	ldr	r2, [pc, #120]	; (810626c <HAL_ETH_SetMDIOClockRange+0x9c>)
 81061f4:	4293      	cmp	r3, r2
 81061f6:	d908      	bls.n	810620a <HAL_ETH_SetMDIOClockRange+0x3a>
 81061f8:	68bb      	ldr	r3, [r7, #8]
 81061fa:	4a1d      	ldr	r2, [pc, #116]	; (8106270 <HAL_ETH_SetMDIOClockRange+0xa0>)
 81061fc:	4293      	cmp	r3, r2
 81061fe:	d804      	bhi.n	810620a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8106200:	68fb      	ldr	r3, [r7, #12]
 8106202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8106206:	60fb      	str	r3, [r7, #12]
 8106208:	e027      	b.n	810625a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 810620a:	68bb      	ldr	r3, [r7, #8]
 810620c:	4a18      	ldr	r2, [pc, #96]	; (8106270 <HAL_ETH_SetMDIOClockRange+0xa0>)
 810620e:	4293      	cmp	r3, r2
 8106210:	d908      	bls.n	8106224 <HAL_ETH_SetMDIOClockRange+0x54>
 8106212:	68bb      	ldr	r3, [r7, #8]
 8106214:	4a17      	ldr	r2, [pc, #92]	; (8106274 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8106216:	4293      	cmp	r3, r2
 8106218:	d204      	bcs.n	8106224 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810621a:	68fb      	ldr	r3, [r7, #12]
 810621c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8106220:	60fb      	str	r3, [r7, #12]
 8106222:	e01a      	b.n	810625a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8106224:	68bb      	ldr	r3, [r7, #8]
 8106226:	4a13      	ldr	r2, [pc, #76]	; (8106274 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8106228:	4293      	cmp	r3, r2
 810622a:	d303      	bcc.n	8106234 <HAL_ETH_SetMDIOClockRange+0x64>
 810622c:	68bb      	ldr	r3, [r7, #8]
 810622e:	4a12      	ldr	r2, [pc, #72]	; (8106278 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8106230:	4293      	cmp	r3, r2
 8106232:	d911      	bls.n	8106258 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8106234:	68bb      	ldr	r3, [r7, #8]
 8106236:	4a10      	ldr	r2, [pc, #64]	; (8106278 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8106238:	4293      	cmp	r3, r2
 810623a:	d908      	bls.n	810624e <HAL_ETH_SetMDIOClockRange+0x7e>
 810623c:	68bb      	ldr	r3, [r7, #8]
 810623e:	4a0f      	ldr	r2, [pc, #60]	; (810627c <HAL_ETH_SetMDIOClockRange+0xac>)
 8106240:	4293      	cmp	r3, r2
 8106242:	d804      	bhi.n	810624e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8106244:	68fb      	ldr	r3, [r7, #12]
 8106246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810624a:	60fb      	str	r3, [r7, #12]
 810624c:	e005      	b.n	810625a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810624e:	68fb      	ldr	r3, [r7, #12]
 8106250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8106254:	60fb      	str	r3, [r7, #12]
 8106256:	e000      	b.n	810625a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8106258:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	68fa      	ldr	r2, [r7, #12]
 8106260:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8106264:	bf00      	nop
 8106266:	3710      	adds	r7, #16
 8106268:	46bd      	mov	sp, r7
 810626a:	bd80      	pop	{r7, pc}
 810626c:	01312cff 	.word	0x01312cff
 8106270:	02160ebf 	.word	0x02160ebf
 8106274:	03938700 	.word	0x03938700
 8106278:	05f5e0ff 	.word	0x05f5e0ff
 810627c:	08f0d17f 	.word	0x08f0d17f

08106280 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8106280:	b480      	push	{r7}
 8106282:	b085      	sub	sp, #20
 8106284:	af00      	add	r7, sp, #0
 8106286:	6078      	str	r0, [r7, #4]
 8106288:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 810628a:	683b      	ldr	r3, [r7, #0]
 810628c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 810628e:	683b      	ldr	r3, [r7, #0]
 8106290:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8106292:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8106294:	683b      	ldr	r3, [r7, #0]
 8106296:	791b      	ldrb	r3, [r3, #4]
 8106298:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 810629a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810629c:	683b      	ldr	r3, [r7, #0]
 810629e:	7b1b      	ldrb	r3, [r3, #12]
 81062a0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 81062a2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 81062a4:	683b      	ldr	r3, [r7, #0]
 81062a6:	7b5b      	ldrb	r3, [r3, #13]
 81062a8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81062aa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81062ac:	683b      	ldr	r3, [r7, #0]
 81062ae:	7b9b      	ldrb	r3, [r3, #14]
 81062b0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 81062b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81062b4:	683b      	ldr	r3, [r7, #0]
 81062b6:	7bdb      	ldrb	r3, [r3, #15]
 81062b8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81062ba:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81062bc:	683a      	ldr	r2, [r7, #0]
 81062be:	7c12      	ldrb	r2, [r2, #16]
 81062c0:	2a00      	cmp	r2, #0
 81062c2:	d102      	bne.n	81062ca <ETH_SetMACConfig+0x4a>
 81062c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81062c8:	e000      	b.n	81062cc <ETH_SetMACConfig+0x4c>
 81062ca:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81062cc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81062ce:	683a      	ldr	r2, [r7, #0]
 81062d0:	7c52      	ldrb	r2, [r2, #17]
 81062d2:	2a00      	cmp	r2, #0
 81062d4:	d102      	bne.n	81062dc <ETH_SetMACConfig+0x5c>
 81062d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81062da:	e000      	b.n	81062de <ETH_SetMACConfig+0x5e>
 81062dc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81062de:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 81062e0:	683b      	ldr	r3, [r7, #0]
 81062e2:	7c9b      	ldrb	r3, [r3, #18]
 81062e4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81062e6:	431a      	orrs	r2, r3
                                macconf->Speed |
 81062e8:	683b      	ldr	r3, [r7, #0]
 81062ea:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 81062ec:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 81062ee:	683b      	ldr	r3, [r7, #0]
 81062f0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 81062f2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 81062f4:	683b      	ldr	r3, [r7, #0]
 81062f6:	7f1b      	ldrb	r3, [r3, #28]
 81062f8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 81062fa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 81062fc:	683b      	ldr	r3, [r7, #0]
 81062fe:	7f5b      	ldrb	r3, [r3, #29]
 8106300:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8106302:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8106304:	683a      	ldr	r2, [r7, #0]
 8106306:	7f92      	ldrb	r2, [r2, #30]
 8106308:	2a00      	cmp	r2, #0
 810630a:	d102      	bne.n	8106312 <ETH_SetMACConfig+0x92>
 810630c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8106310:	e000      	b.n	8106314 <ETH_SetMACConfig+0x94>
 8106312:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8106314:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8106316:	683b      	ldr	r3, [r7, #0]
 8106318:	7fdb      	ldrb	r3, [r3, #31]
 810631a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 810631c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 810631e:	683a      	ldr	r2, [r7, #0]
 8106320:	f892 2020 	ldrb.w	r2, [r2, #32]
 8106324:	2a00      	cmp	r2, #0
 8106326:	d102      	bne.n	810632e <ETH_SetMACConfig+0xae>
 8106328:	f44f 7280 	mov.w	r2, #256	; 0x100
 810632c:	e000      	b.n	8106330 <ETH_SetMACConfig+0xb0>
 810632e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8106330:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8106332:	683b      	ldr	r3, [r7, #0]
 8106334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8106336:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8106338:	683b      	ldr	r3, [r7, #0]
 810633a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810633e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8106340:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8106342:	683b      	ldr	r3, [r7, #0]
 8106344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8106346:	4313      	orrs	r3, r2
 8106348:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	681a      	ldr	r2, [r3, #0]
 8106350:	4b57      	ldr	r3, [pc, #348]	; (81064b0 <ETH_SetMACConfig+0x230>)
 8106352:	4013      	ands	r3, r2
 8106354:	687a      	ldr	r2, [r7, #4]
 8106356:	6812      	ldr	r2, [r2, #0]
 8106358:	68f9      	ldr	r1, [r7, #12]
 810635a:	430b      	orrs	r3, r1
 810635c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 810635e:	683b      	ldr	r3, [r7, #0]
 8106360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106362:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8106364:	683b      	ldr	r3, [r7, #0]
 8106366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810636a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 810636c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 810636e:	683b      	ldr	r3, [r7, #0]
 8106370:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8106374:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8106376:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8106378:	683b      	ldr	r3, [r7, #0]
 810637a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 810637e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8106380:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8106382:	683a      	ldr	r2, [r7, #0]
 8106384:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8106388:	2a00      	cmp	r2, #0
 810638a:	d102      	bne.n	8106392 <ETH_SetMACConfig+0x112>
 810638c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8106390:	e000      	b.n	8106394 <ETH_SetMACConfig+0x114>
 8106392:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8106394:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8106396:	683b      	ldr	r3, [r7, #0]
 8106398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 810639a:	4313      	orrs	r3, r2
 810639c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	681b      	ldr	r3, [r3, #0]
 81063a2:	685a      	ldr	r2, [r3, #4]
 81063a4:	4b43      	ldr	r3, [pc, #268]	; (81064b4 <ETH_SetMACConfig+0x234>)
 81063a6:	4013      	ands	r3, r2
 81063a8:	687a      	ldr	r2, [r7, #4]
 81063aa:	6812      	ldr	r2, [r2, #0]
 81063ac:	68f9      	ldr	r1, [r7, #12]
 81063ae:	430b      	orrs	r3, r1
 81063b0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81063b2:	683b      	ldr	r3, [r7, #0]
 81063b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81063b8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81063ba:	683b      	ldr	r3, [r7, #0]
 81063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81063be:	4313      	orrs	r3, r2
 81063c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	68db      	ldr	r3, [r3, #12]
 81063c8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 81063cc:	f023 0301 	bic.w	r3, r3, #1
 81063d0:	687a      	ldr	r2, [r7, #4]
 81063d2:	6812      	ldr	r2, [r2, #0]
 81063d4:	68f9      	ldr	r1, [r7, #12]
 81063d6:	430b      	orrs	r3, r1
 81063d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81063da:	683b      	ldr	r3, [r7, #0]
 81063dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 81063e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 81063e2:	683b      	ldr	r3, [r7, #0]
 81063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81063e6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 81063e8:	683a      	ldr	r2, [r7, #0]
 81063ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 81063ee:	2a00      	cmp	r2, #0
 81063f0:	d101      	bne.n	81063f6 <ETH_SetMACConfig+0x176>
 81063f2:	2280      	movs	r2, #128	; 0x80
 81063f4:	e000      	b.n	81063f8 <ETH_SetMACConfig+0x178>
 81063f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 81063f8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 81063fa:	683b      	ldr	r3, [r7, #0]
 81063fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81063fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8106400:	4313      	orrs	r3, r2
 8106402:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	681b      	ldr	r3, [r3, #0]
 8106408:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810640a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 810640e:	4013      	ands	r3, r2
 8106410:	687a      	ldr	r2, [r7, #4]
 8106412:	6812      	ldr	r2, [r2, #0]
 8106414:	68f9      	ldr	r1, [r7, #12]
 8106416:	430b      	orrs	r3, r1
 8106418:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810641a:	683b      	ldr	r3, [r7, #0]
 810641c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8106420:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8106422:	683b      	ldr	r3, [r7, #0]
 8106424:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8106428:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810642a:	4313      	orrs	r3, r2
 810642c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	681b      	ldr	r3, [r3, #0]
 8106432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106436:	f023 0103 	bic.w	r1, r3, #3
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	68fa      	ldr	r2, [r7, #12]
 8106440:	430a      	orrs	r2, r1
 8106442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	681b      	ldr	r3, [r3, #0]
 810644a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 810644e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8106452:	683b      	ldr	r3, [r7, #0]
 8106454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	430a      	orrs	r2, r1
 810645c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8106460:	683b      	ldr	r3, [r7, #0]
 8106462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8106464:	683a      	ldr	r2, [r7, #0]
 8106466:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 810646a:	2a00      	cmp	r2, #0
 810646c:	d101      	bne.n	8106472 <ETH_SetMACConfig+0x1f2>
 810646e:	2240      	movs	r2, #64	; 0x40
 8106470:	e000      	b.n	8106474 <ETH_SetMACConfig+0x1f4>
 8106472:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8106474:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8106476:	683b      	ldr	r3, [r7, #0]
 8106478:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 810647c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810647e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8106480:	683b      	ldr	r3, [r7, #0]
 8106482:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8106486:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8106488:	4313      	orrs	r3, r2
 810648a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	681b      	ldr	r3, [r3, #0]
 8106490:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8106494:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	68fa      	ldr	r2, [r7, #12]
 810649e:	430a      	orrs	r2, r1
 81064a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 81064a4:	bf00      	nop
 81064a6:	3714      	adds	r7, #20
 81064a8:	46bd      	mov	sp, r7
 81064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064ae:	4770      	bx	lr
 81064b0:	00048083 	.word	0x00048083
 81064b4:	c0f88000 	.word	0xc0f88000

081064b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 81064b8:	b480      	push	{r7}
 81064ba:	b085      	sub	sp, #20
 81064bc:	af00      	add	r7, sp, #0
 81064be:	6078      	str	r0, [r7, #4]
 81064c0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 81064d0:	f023 0302 	bic.w	r3, r3, #2
 81064d4:	683a      	ldr	r2, [r7, #0]
 81064d6:	6812      	ldr	r2, [r2, #0]
 81064d8:	6879      	ldr	r1, [r7, #4]
 81064da:	6809      	ldr	r1, [r1, #0]
 81064dc:	431a      	orrs	r2, r3
 81064de:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 81064e2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81064e4:	683b      	ldr	r3, [r7, #0]
 81064e6:	791b      	ldrb	r3, [r3, #4]
 81064e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 81064ea:	683b      	ldr	r3, [r7, #0]
 81064ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81064ee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 81064f0:	683b      	ldr	r3, [r7, #0]
 81064f2:	7b1b      	ldrb	r3, [r3, #12]
 81064f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81064f6:	4313      	orrs	r3, r2
 81064f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8106502:	3304      	adds	r3, #4
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 810650a:	f023 0301 	bic.w	r3, r3, #1
 810650e:	687a      	ldr	r2, [r7, #4]
 8106510:	6811      	ldr	r1, [r2, #0]
 8106512:	68fa      	ldr	r2, [r7, #12]
 8106514:	431a      	orrs	r2, r3
 8106516:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 810651a:	3304      	adds	r3, #4
 810651c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810651e:	683b      	ldr	r3, [r7, #0]
 8106520:	7b5b      	ldrb	r3, [r3, #13]
 8106522:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8106524:	683b      	ldr	r3, [r7, #0]
 8106526:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8106528:	4313      	orrs	r3, r2
 810652a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	681b      	ldr	r3, [r3, #0]
 8106530:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8106534:	681a      	ldr	r2, [r3, #0]
 8106536:	4b21      	ldr	r3, [pc, #132]	; (81065bc <ETH_SetDMAConfig+0x104>)
 8106538:	4013      	ands	r3, r2
 810653a:	687a      	ldr	r2, [r7, #4]
 810653c:	6811      	ldr	r1, [r2, #0]
 810653e:	68fa      	ldr	r2, [r7, #12]
 8106540:	431a      	orrs	r2, r3
 8106542:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8106546:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8106548:	683b      	ldr	r3, [r7, #0]
 810654a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 810654c:	683b      	ldr	r3, [r7, #0]
 810654e:	7d1b      	ldrb	r3, [r3, #20]
 8106550:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8106552:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8106554:	683b      	ldr	r3, [r7, #0]
 8106556:	7f5b      	ldrb	r3, [r3, #29]
 8106558:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810655a:	4313      	orrs	r3, r2
 810655c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810655e:	687b      	ldr	r3, [r7, #4]
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8106566:	3304      	adds	r3, #4
 8106568:	681a      	ldr	r2, [r3, #0]
 810656a:	4b15      	ldr	r3, [pc, #84]	; (81065c0 <ETH_SetDMAConfig+0x108>)
 810656c:	4013      	ands	r3, r2
 810656e:	687a      	ldr	r2, [r7, #4]
 8106570:	6811      	ldr	r1, [r2, #0]
 8106572:	68fa      	ldr	r2, [r7, #12]
 8106574:	431a      	orrs	r2, r3
 8106576:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 810657a:	3304      	adds	r3, #4
 810657c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810657e:	683b      	ldr	r3, [r7, #0]
 8106580:	7f1b      	ldrb	r3, [r3, #28]
 8106582:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8106584:	683b      	ldr	r3, [r7, #0]
 8106586:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8106588:	4313      	orrs	r3, r2
 810658a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	681b      	ldr	r3, [r3, #0]
 8106590:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8106594:	3308      	adds	r3, #8
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810659c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 81065a0:	687a      	ldr	r2, [r7, #4]
 81065a2:	6811      	ldr	r1, [r2, #0]
 81065a4:	68fa      	ldr	r2, [r7, #12]
 81065a6:	431a      	orrs	r2, r3
 81065a8:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81065ac:	3308      	adds	r3, #8
 81065ae:	601a      	str	r2, [r3, #0]
}
 81065b0:	bf00      	nop
 81065b2:	3714      	adds	r7, #20
 81065b4:	46bd      	mov	sp, r7
 81065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065ba:	4770      	bx	lr
 81065bc:	fffec000 	.word	0xfffec000
 81065c0:	ffc0efef 	.word	0xffc0efef

081065c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81065c4:	b580      	push	{r7, lr}
 81065c6:	b0a4      	sub	sp, #144	; 0x90
 81065c8:	af00      	add	r7, sp, #0
 81065ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81065cc:	2301      	movs	r3, #1
 81065ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 81065d2:	2300      	movs	r3, #0
 81065d4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 81065d6:	2300      	movs	r3, #0
 81065d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 81065dc:	2300      	movs	r3, #0
 81065de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 81065e2:	2301      	movs	r3, #1
 81065e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 81065e8:	2301      	movs	r3, #1
 81065ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 81065ee:	2301      	movs	r3, #1
 81065f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 81065f4:	2300      	movs	r3, #0
 81065f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 81065fa:	2301      	movs	r3, #1
 81065fc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8106600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8106604:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8106606:	2300      	movs	r3, #0
 8106608:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 810660c:	2300      	movs	r3, #0
 810660e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8106610:	2300      	movs	r3, #0
 8106612:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8106616:	2300      	movs	r3, #0
 8106618:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 810661c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8106620:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8106622:	2300      	movs	r3, #0
 8106624:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8106628:	2300      	movs	r3, #0
 810662a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 810662c:	2301      	movs	r3, #1
 810662e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8106632:	2300      	movs	r3, #0
 8106634:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8106638:	2300      	movs	r3, #0
 810663a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810663e:	2300      	movs	r3, #0
 8106640:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8106642:	2300      	movs	r3, #0
 8106644:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8106646:	2300      	movs	r3, #0
 8106648:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810664a:	2300      	movs	r3, #0
 810664c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8106650:	2300      	movs	r3, #0
 8106652:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8106656:	2301      	movs	r3, #1
 8106658:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810665c:	2320      	movs	r3, #32
 810665e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8106662:	2301      	movs	r3, #1
 8106664:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8106668:	2300      	movs	r3, #0
 810666a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810666e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8106672:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8106674:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8106678:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 810667a:	2300      	movs	r3, #0
 810667c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8106680:	2302      	movs	r3, #2
 8106682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8106686:	2300      	movs	r3, #0
 8106688:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 810668c:	2300      	movs	r3, #0
 810668e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8106692:	2300      	movs	r3, #0
 8106694:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8106698:	2301      	movs	r3, #1
 810669a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810669e:	2300      	movs	r3, #0
 81066a0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81066a2:	2301      	movs	r3, #1
 81066a4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81066a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81066ac:	4619      	mov	r1, r3
 81066ae:	6878      	ldr	r0, [r7, #4]
 81066b0:	f7ff fde6 	bl	8106280 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81066b4:	2301      	movs	r3, #1
 81066b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81066b8:	2301      	movs	r3, #1
 81066ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81066bc:	2300      	movs	r3, #0
 81066be:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81066c0:	2300      	movs	r3, #0
 81066c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81066c6:	2300      	movs	r3, #0
 81066c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81066ca:	2300      	movs	r3, #0
 81066cc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81066ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 81066d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 81066d4:	2300      	movs	r3, #0
 81066d6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 81066d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 81066dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 81066de:	2300      	movs	r3, #0
 81066e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 81066e4:	f44f 7306 	mov.w	r3, #536	; 0x218
 81066e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 81066ea:	f107 0308 	add.w	r3, r7, #8
 81066ee:	4619      	mov	r1, r3
 81066f0:	6878      	ldr	r0, [r7, #4]
 81066f2:	f7ff fee1 	bl	81064b8 <ETH_SetDMAConfig>
}
 81066f6:	bf00      	nop
 81066f8:	3790      	adds	r7, #144	; 0x90
 81066fa:	46bd      	mov	sp, r7
 81066fc:	bd80      	pop	{r7, pc}
	...

08106700 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8106700:	b580      	push	{r7, lr}
 8106702:	b084      	sub	sp, #16
 8106704:	af00      	add	r7, sp, #0
 8106706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	681b      	ldr	r3, [r3, #0]
 810670c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8106710:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8106712:	68fb      	ldr	r3, [r7, #12]
 8106714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8106718:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810671a:	f001 f909 	bl	8107930 <HAL_RCC_GetHCLKFreq>
 810671e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8106720:	68bb      	ldr	r3, [r7, #8]
 8106722:	4a1e      	ldr	r2, [pc, #120]	; (810679c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8106724:	4293      	cmp	r3, r2
 8106726:	d908      	bls.n	810673a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8106728:	68bb      	ldr	r3, [r7, #8]
 810672a:	4a1d      	ldr	r2, [pc, #116]	; (81067a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 810672c:	4293      	cmp	r3, r2
 810672e:	d804      	bhi.n	810673a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8106730:	68fb      	ldr	r3, [r7, #12]
 8106732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8106736:	60fb      	str	r3, [r7, #12]
 8106738:	e027      	b.n	810678a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 810673a:	68bb      	ldr	r3, [r7, #8]
 810673c:	4a18      	ldr	r2, [pc, #96]	; (81067a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 810673e:	4293      	cmp	r3, r2
 8106740:	d908      	bls.n	8106754 <ETH_MAC_MDIO_ClkConfig+0x54>
 8106742:	68bb      	ldr	r3, [r7, #8]
 8106744:	4a17      	ldr	r2, [pc, #92]	; (81067a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8106746:	4293      	cmp	r3, r2
 8106748:	d204      	bcs.n	8106754 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810674a:	68fb      	ldr	r3, [r7, #12]
 810674c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8106750:	60fb      	str	r3, [r7, #12]
 8106752:	e01a      	b.n	810678a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8106754:	68bb      	ldr	r3, [r7, #8]
 8106756:	4a13      	ldr	r2, [pc, #76]	; (81067a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8106758:	4293      	cmp	r3, r2
 810675a:	d303      	bcc.n	8106764 <ETH_MAC_MDIO_ClkConfig+0x64>
 810675c:	68bb      	ldr	r3, [r7, #8]
 810675e:	4a12      	ldr	r2, [pc, #72]	; (81067a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8106760:	4293      	cmp	r3, r2
 8106762:	d911      	bls.n	8106788 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8106764:	68bb      	ldr	r3, [r7, #8]
 8106766:	4a10      	ldr	r2, [pc, #64]	; (81067a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8106768:	4293      	cmp	r3, r2
 810676a:	d908      	bls.n	810677e <ETH_MAC_MDIO_ClkConfig+0x7e>
 810676c:	68bb      	ldr	r3, [r7, #8]
 810676e:	4a0f      	ldr	r2, [pc, #60]	; (81067ac <ETH_MAC_MDIO_ClkConfig+0xac>)
 8106770:	4293      	cmp	r3, r2
 8106772:	d804      	bhi.n	810677e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8106774:	68fb      	ldr	r3, [r7, #12]
 8106776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810677a:	60fb      	str	r3, [r7, #12]
 810677c:	e005      	b.n	810678a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810677e:	68fb      	ldr	r3, [r7, #12]
 8106780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8106784:	60fb      	str	r3, [r7, #12]
 8106786:	e000      	b.n	810678a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8106788:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	68fa      	ldr	r2, [r7, #12]
 8106790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8106794:	bf00      	nop
 8106796:	3710      	adds	r7, #16
 8106798:	46bd      	mov	sp, r7
 810679a:	bd80      	pop	{r7, pc}
 810679c:	01312cff 	.word	0x01312cff
 81067a0:	02160ebf 	.word	0x02160ebf
 81067a4:	03938700 	.word	0x03938700
 81067a8:	05f5e0ff 	.word	0x05f5e0ff
 81067ac:	08f0d17f 	.word	0x08f0d17f

081067b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 81067b0:	b480      	push	{r7}
 81067b2:	b085      	sub	sp, #20
 81067b4:	af00      	add	r7, sp, #0
 81067b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81067b8:	2300      	movs	r3, #0
 81067ba:	60fb      	str	r3, [r7, #12]
 81067bc:	e01d      	b.n	81067fa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	68d9      	ldr	r1, [r3, #12]
 81067c2:	68fa      	ldr	r2, [r7, #12]
 81067c4:	4613      	mov	r3, r2
 81067c6:	005b      	lsls	r3, r3, #1
 81067c8:	4413      	add	r3, r2
 81067ca:	00db      	lsls	r3, r3, #3
 81067cc:	440b      	add	r3, r1
 81067ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 81067d0:	68bb      	ldr	r3, [r7, #8]
 81067d2:	2200      	movs	r2, #0
 81067d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 81067d6:	68bb      	ldr	r3, [r7, #8]
 81067d8:	2200      	movs	r2, #0
 81067da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 81067dc:	68bb      	ldr	r3, [r7, #8]
 81067de:	2200      	movs	r2, #0
 81067e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 81067e2:	68bb      	ldr	r3, [r7, #8]
 81067e4:	2200      	movs	r2, #0
 81067e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 81067e8:	68b9      	ldr	r1, [r7, #8]
 81067ea:	687b      	ldr	r3, [r7, #4]
 81067ec:	68fa      	ldr	r2, [r7, #12]
 81067ee:	3206      	adds	r2, #6
 81067f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81067f4:	68fb      	ldr	r3, [r7, #12]
 81067f6:	3301      	adds	r3, #1
 81067f8:	60fb      	str	r3, [r7, #12]
 81067fa:	68fb      	ldr	r3, [r7, #12]
 81067fc:	2b03      	cmp	r3, #3
 81067fe:	d9de      	bls.n	81067be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	2200      	movs	r2, #0
 8106804:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	681b      	ldr	r3, [r3, #0]
 810680a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810680e:	330c      	adds	r3, #12
 8106810:	2203      	movs	r2, #3
 8106812:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	68da      	ldr	r2, [r3, #12]
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8106820:	3314      	adds	r3, #20
 8106822:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	68da      	ldr	r2, [r3, #12]
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8106830:	601a      	str	r2, [r3, #0]
}
 8106832:	bf00      	nop
 8106834:	3714      	adds	r7, #20
 8106836:	46bd      	mov	sp, r7
 8106838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810683c:	4770      	bx	lr

0810683e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810683e:	b480      	push	{r7}
 8106840:	b085      	sub	sp, #20
 8106842:	af00      	add	r7, sp, #0
 8106844:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8106846:	2300      	movs	r3, #0
 8106848:	60fb      	str	r3, [r7, #12]
 810684a:	e024      	b.n	8106896 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	6919      	ldr	r1, [r3, #16]
 8106850:	68fa      	ldr	r2, [r7, #12]
 8106852:	4613      	mov	r3, r2
 8106854:	005b      	lsls	r3, r3, #1
 8106856:	4413      	add	r3, r2
 8106858:	00db      	lsls	r3, r3, #3
 810685a:	440b      	add	r3, r1
 810685c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 810685e:	68bb      	ldr	r3, [r7, #8]
 8106860:	2200      	movs	r2, #0
 8106862:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8106864:	68bb      	ldr	r3, [r7, #8]
 8106866:	2200      	movs	r2, #0
 8106868:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 810686a:	68bb      	ldr	r3, [r7, #8]
 810686c:	2200      	movs	r2, #0
 810686e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8106870:	68bb      	ldr	r3, [r7, #8]
 8106872:	2200      	movs	r2, #0
 8106874:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8106876:	68bb      	ldr	r3, [r7, #8]
 8106878:	2200      	movs	r2, #0
 810687a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 810687c:	68bb      	ldr	r3, [r7, #8]
 810687e:	2200      	movs	r2, #0
 8106880:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8106882:	68ba      	ldr	r2, [r7, #8]
 8106884:	6879      	ldr	r1, [r7, #4]
 8106886:	68fb      	ldr	r3, [r7, #12]
 8106888:	3310      	adds	r3, #16
 810688a:	009b      	lsls	r3, r3, #2
 810688c:	440b      	add	r3, r1
 810688e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8106890:	68fb      	ldr	r3, [r7, #12]
 8106892:	3301      	adds	r3, #1
 8106894:	60fb      	str	r3, [r7, #12]
 8106896:	68fb      	ldr	r3, [r7, #12]
 8106898:	2b03      	cmp	r3, #3
 810689a:	d9d7      	bls.n	810684c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	2200      	movs	r2, #0
 81068a0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	2200      	movs	r2, #0
 81068a6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	2200      	movs	r2, #0
 81068ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 81068ae:	687b      	ldr	r3, [r7, #4]
 81068b0:	2200      	movs	r2, #0
 81068b2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	2200      	movs	r2, #0
 81068b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	681b      	ldr	r3, [r3, #0]
 81068be:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81068c2:	3310      	adds	r3, #16
 81068c4:	2203      	movs	r2, #3
 81068c6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 81068c8:	687b      	ldr	r3, [r7, #4]
 81068ca:	691a      	ldr	r2, [r3, #16]
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81068d4:	331c      	adds	r3, #28
 81068d6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	691b      	ldr	r3, [r3, #16]
 81068dc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	681b      	ldr	r3, [r3, #0]
 81068e4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 81068e8:	3308      	adds	r3, #8
 81068ea:	601a      	str	r2, [r3, #0]
}
 81068ec:	bf00      	nop
 81068ee:	3714      	adds	r7, #20
 81068f0:	46bd      	mov	sp, r7
 81068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068f6:	4770      	bx	lr

081068f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 81068f8:	b480      	push	{r7}
 81068fa:	b08d      	sub	sp, #52	; 0x34
 81068fc:	af00      	add	r7, sp, #0
 81068fe:	60f8      	str	r0, [r7, #12]
 8106900:	60b9      	str	r1, [r7, #8]
 8106902:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8106904:	68fb      	ldr	r3, [r7, #12]
 8106906:	3318      	adds	r3, #24
 8106908:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 810690a:	697b      	ldr	r3, [r7, #20]
 810690c:	691b      	ldr	r3, [r3, #16]
 810690e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8106910:	697b      	ldr	r3, [r7, #20]
 8106912:	691b      	ldr	r3, [r3, #16]
 8106914:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8106916:	2300      	movs	r3, #0
 8106918:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810691a:	697b      	ldr	r3, [r7, #20]
 810691c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106922:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8106924:	68bb      	ldr	r3, [r7, #8]
 8106926:	689b      	ldr	r3, [r3, #8]
 8106928:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 810692a:	2300      	movs	r3, #0
 810692c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810692e:	6a3b      	ldr	r3, [r7, #32]
 8106930:	68db      	ldr	r3, [r3, #12]
 8106932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8106936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810693a:	d007      	beq.n	810694c <ETH_Prepare_Tx_Descriptors+0x54>
 810693c:	697a      	ldr	r2, [r7, #20]
 810693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106940:	3304      	adds	r3, #4
 8106942:	009b      	lsls	r3, r3, #2
 8106944:	4413      	add	r3, r2
 8106946:	685b      	ldr	r3, [r3, #4]
 8106948:	2b00      	cmp	r3, #0
 810694a:	d001      	beq.n	8106950 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 810694c:	2302      	movs	r3, #2
 810694e:	e24b      	b.n	8106de8 <ETH_Prepare_Tx_Descriptors+0x4f0>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8106950:	68bb      	ldr	r3, [r7, #8]
 8106952:	681b      	ldr	r3, [r3, #0]
 8106954:	f003 0304 	and.w	r3, r3, #4
 8106958:	2b00      	cmp	r3, #0
 810695a:	d044      	beq.n	81069e6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 810695c:	6a3b      	ldr	r3, [r7, #32]
 810695e:	68db      	ldr	r3, [r3, #12]
 8106960:	0c1b      	lsrs	r3, r3, #16
 8106962:	041b      	lsls	r3, r3, #16
 8106964:	68ba      	ldr	r2, [r7, #8]
 8106966:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8106968:	431a      	orrs	r2, r3
 810696a:	6a3b      	ldr	r3, [r7, #32]
 810696c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 810696e:	6a3b      	ldr	r3, [r7, #32]
 8106970:	68db      	ldr	r3, [r3, #12]
 8106972:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8106976:	6a3b      	ldr	r3, [r7, #32]
 8106978:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 810697a:	68fb      	ldr	r3, [r7, #12]
 810697c:	681b      	ldr	r3, [r3, #0]
 810697e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8106980:	68fb      	ldr	r3, [r7, #12]
 8106982:	681b      	ldr	r3, [r3, #0]
 8106984:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8106988:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 810698a:	68bb      	ldr	r3, [r7, #8]
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	f003 0308 	and.w	r3, r3, #8
 8106992:	2b00      	cmp	r3, #0
 8106994:	d027      	beq.n	81069e6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8106996:	6a3b      	ldr	r3, [r7, #32]
 8106998:	689b      	ldr	r3, [r3, #8]
 810699a:	b29a      	uxth	r2, r3
 810699c:	68bb      	ldr	r3, [r7, #8]
 810699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069a0:	041b      	lsls	r3, r3, #16
 81069a2:	431a      	orrs	r2, r3
 81069a4:	6a3b      	ldr	r3, [r7, #32]
 81069a6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 81069a8:	6a3b      	ldr	r3, [r7, #32]
 81069aa:	68db      	ldr	r3, [r3, #12]
 81069ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 81069b0:	6a3b      	ldr	r3, [r7, #32]
 81069b2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 81069b4:	6a3b      	ldr	r3, [r7, #32]
 81069b6:	68db      	ldr	r3, [r3, #12]
 81069b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 81069bc:	68bb      	ldr	r3, [r7, #8]
 81069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81069c0:	431a      	orrs	r2, r3
 81069c2:	6a3b      	ldr	r3, [r7, #32]
 81069c4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 81069c6:	68fb      	ldr	r3, [r7, #12]
 81069c8:	681b      	ldr	r3, [r3, #0]
 81069ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81069cc:	68fb      	ldr	r3, [r7, #12]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 81069d4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 81069d6:	68fb      	ldr	r3, [r7, #12]
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81069dc:	68fb      	ldr	r3, [r7, #12]
 81069de:	681b      	ldr	r3, [r3, #0]
 81069e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 81069e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 81069e6:	68bb      	ldr	r3, [r7, #8]
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	f003 0310 	and.w	r3, r3, #16
 81069ee:	2b00      	cmp	r3, #0
 81069f0:	d010      	beq.n	8106a14 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 81069f2:	6a3b      	ldr	r3, [r7, #32]
 81069f4:	689b      	ldr	r3, [r3, #8]
 81069f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 81069fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81069fe:	68ba      	ldr	r2, [r7, #8]
 8106a00:	6992      	ldr	r2, [r2, #24]
 8106a02:	431a      	orrs	r2, r3
 8106a04:	6a3b      	ldr	r3, [r7, #32]
 8106a06:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8106a08:	6a3b      	ldr	r3, [r7, #32]
 8106a0a:	68db      	ldr	r3, [r3, #12]
 8106a0c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8106a10:	6a3b      	ldr	r3, [r7, #32]
 8106a12:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8106a14:	68bb      	ldr	r3, [r7, #8]
 8106a16:	681b      	ldr	r3, [r3, #0]
 8106a18:	f003 0304 	and.w	r3, r3, #4
 8106a1c:	2b00      	cmp	r3, #0
 8106a1e:	d105      	bne.n	8106a2c <ETH_Prepare_Tx_Descriptors+0x134>
 8106a20:	68bb      	ldr	r3, [r7, #8]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	f003 0310 	and.w	r3, r3, #16
 8106a28:	2b00      	cmp	r3, #0
 8106a2a:	d030      	beq.n	8106a8e <ETH_Prepare_Tx_Descriptors+0x196>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8106a2c:	6a3b      	ldr	r3, [r7, #32]
 8106a2e:	68db      	ldr	r3, [r3, #12]
 8106a30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8106a34:	6a3b      	ldr	r3, [r7, #32]
 8106a36:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8106a38:	6a3b      	ldr	r3, [r7, #32]
 8106a3a:	68db      	ldr	r3, [r3, #12]
 8106a3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8106a40:	6a3b      	ldr	r3, [r7, #32]
 8106a42:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8106a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a46:	3301      	adds	r3, #1
 8106a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a4c:	2b03      	cmp	r3, #3
 8106a4e:	d902      	bls.n	8106a56 <ETH_Prepare_Tx_Descriptors+0x15e>
 8106a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a52:	3b04      	subs	r3, #4
 8106a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106a56:	697b      	ldr	r3, [r7, #20]
 8106a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106a5e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8106a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a62:	3301      	adds	r3, #1
 8106a64:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8106a66:	6a3b      	ldr	r3, [r7, #32]
 8106a68:	68db      	ldr	r3, [r3, #12]
 8106a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8106a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8106a72:	d10c      	bne.n	8106a8e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8106a74:	697b      	ldr	r3, [r7, #20]
 8106a76:	693a      	ldr	r2, [r7, #16]
 8106a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106a7c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8106a7e:	6a3b      	ldr	r3, [r7, #32]
 8106a80:	68db      	ldr	r3, [r3, #12]
 8106a82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106a86:	6a3b      	ldr	r3, [r7, #32]
 8106a88:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8106a8a:	2302      	movs	r3, #2
 8106a8c:	e1ac      	b.n	8106de8 <ETH_Prepare_Tx_Descriptors+0x4f0>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8106a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a90:	3301      	adds	r3, #1
 8106a92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8106a94:	69fb      	ldr	r3, [r7, #28]
 8106a96:	681b      	ldr	r3, [r3, #0]
 8106a98:	461a      	mov	r2, r3
 8106a9a:	6a3b      	ldr	r3, [r7, #32]
 8106a9c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8106a9e:	6a3b      	ldr	r3, [r7, #32]
 8106aa0:	689b      	ldr	r3, [r3, #8]
 8106aa2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8106aa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8106aaa:	69fa      	ldr	r2, [r7, #28]
 8106aac:	6852      	ldr	r2, [r2, #4]
 8106aae:	431a      	orrs	r2, r3
 8106ab0:	6a3b      	ldr	r3, [r7, #32]
 8106ab2:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8106ab4:	69fb      	ldr	r3, [r7, #28]
 8106ab6:	689b      	ldr	r3, [r3, #8]
 8106ab8:	2b00      	cmp	r3, #0
 8106aba:	d014      	beq.n	8106ae6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8106abc:	69fb      	ldr	r3, [r7, #28]
 8106abe:	689b      	ldr	r3, [r3, #8]
 8106ac0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8106ac2:	69fb      	ldr	r3, [r7, #28]
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	461a      	mov	r2, r3
 8106ac8:	6a3b      	ldr	r3, [r7, #32]
 8106aca:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8106acc:	6a3b      	ldr	r3, [r7, #32]
 8106ace:	689b      	ldr	r3, [r3, #8]
 8106ad0:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8106ad4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8106ad8:	69fa      	ldr	r2, [r7, #28]
 8106ada:	6852      	ldr	r2, [r2, #4]
 8106adc:	0412      	lsls	r2, r2, #16
 8106ade:	431a      	orrs	r2, r3
 8106ae0:	6a3b      	ldr	r3, [r7, #32]
 8106ae2:	609a      	str	r2, [r3, #8]
 8106ae4:	e00a      	b.n	8106afc <ETH_Prepare_Tx_Descriptors+0x204>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8106ae6:	6a3b      	ldr	r3, [r7, #32]
 8106ae8:	2200      	movs	r2, #0
 8106aea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8106aec:	6a3b      	ldr	r3, [r7, #32]
 8106aee:	689b      	ldr	r3, [r3, #8]
 8106af0:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8106af4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8106af8:	6a3a      	ldr	r2, [r7, #32]
 8106afa:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8106afc:	68bb      	ldr	r3, [r7, #8]
 8106afe:	681b      	ldr	r3, [r3, #0]
 8106b00:	f003 0310 	and.w	r3, r3, #16
 8106b04:	2b00      	cmp	r3, #0
 8106b06:	d019      	beq.n	8106b3c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8106b08:	6a3b      	ldr	r3, [r7, #32]
 8106b0a:	68db      	ldr	r3, [r3, #12]
 8106b0c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8106b10:	68bb      	ldr	r3, [r7, #8]
 8106b12:	6a1b      	ldr	r3, [r3, #32]
 8106b14:	04db      	lsls	r3, r3, #19
 8106b16:	431a      	orrs	r2, r3
 8106b18:	6a3b      	ldr	r3, [r7, #32]
 8106b1a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8106b1c:	6a3b      	ldr	r3, [r7, #32]
 8106b1e:	68db      	ldr	r3, [r3, #12]
 8106b20:	0c9b      	lsrs	r3, r3, #18
 8106b22:	049b      	lsls	r3, r3, #18
 8106b24:	68ba      	ldr	r2, [r7, #8]
 8106b26:	69d2      	ldr	r2, [r2, #28]
 8106b28:	431a      	orrs	r2, r3
 8106b2a:	6a3b      	ldr	r3, [r7, #32]
 8106b2c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8106b2e:	6a3b      	ldr	r3, [r7, #32]
 8106b30:	68db      	ldr	r3, [r3, #12]
 8106b32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8106b36:	6a3b      	ldr	r3, [r7, #32]
 8106b38:	60da      	str	r2, [r3, #12]
 8106b3a:	e028      	b.n	8106b8e <ETH_Prepare_Tx_Descriptors+0x296>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8106b3c:	6a3b      	ldr	r3, [r7, #32]
 8106b3e:	68db      	ldr	r3, [r3, #12]
 8106b40:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8106b44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8106b48:	68ba      	ldr	r2, [r7, #8]
 8106b4a:	6852      	ldr	r2, [r2, #4]
 8106b4c:	431a      	orrs	r2, r3
 8106b4e:	6a3b      	ldr	r3, [r7, #32]
 8106b50:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8106b52:	68bb      	ldr	r3, [r7, #8]
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	f003 0301 	and.w	r3, r3, #1
 8106b5a:	2b00      	cmp	r3, #0
 8106b5c:	d008      	beq.n	8106b70 <ETH_Prepare_Tx_Descriptors+0x278>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8106b5e:	6a3b      	ldr	r3, [r7, #32]
 8106b60:	68db      	ldr	r3, [r3, #12]
 8106b62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8106b66:	68bb      	ldr	r3, [r7, #8]
 8106b68:	695b      	ldr	r3, [r3, #20]
 8106b6a:	431a      	orrs	r2, r3
 8106b6c:	6a3b      	ldr	r3, [r7, #32]
 8106b6e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8106b70:	68bb      	ldr	r3, [r7, #8]
 8106b72:	681b      	ldr	r3, [r3, #0]
 8106b74:	f003 0320 	and.w	r3, r3, #32
 8106b78:	2b00      	cmp	r3, #0
 8106b7a:	d008      	beq.n	8106b8e <ETH_Prepare_Tx_Descriptors+0x296>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8106b7c:	6a3b      	ldr	r3, [r7, #32]
 8106b7e:	68db      	ldr	r3, [r3, #12]
 8106b80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8106b84:	68bb      	ldr	r3, [r7, #8]
 8106b86:	691b      	ldr	r3, [r3, #16]
 8106b88:	431a      	orrs	r2, r3
 8106b8a:	6a3b      	ldr	r3, [r7, #32]
 8106b8c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8106b8e:	68bb      	ldr	r3, [r7, #8]
 8106b90:	681b      	ldr	r3, [r3, #0]
 8106b92:	f003 0304 	and.w	r3, r3, #4
 8106b96:	2b00      	cmp	r3, #0
 8106b98:	d008      	beq.n	8106bac <ETH_Prepare_Tx_Descriptors+0x2b4>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8106b9a:	6a3b      	ldr	r3, [r7, #32]
 8106b9c:	689b      	ldr	r3, [r3, #8]
 8106b9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8106ba2:	68bb      	ldr	r3, [r7, #8]
 8106ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ba6:	431a      	orrs	r2, r3
 8106ba8:	6a3b      	ldr	r3, [r7, #32]
 8106baa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8106bac:	6a3b      	ldr	r3, [r7, #32]
 8106bae:	68db      	ldr	r3, [r3, #12]
 8106bb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8106bb4:	6a3b      	ldr	r3, [r7, #32]
 8106bb6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8106bb8:	6a3b      	ldr	r3, [r7, #32]
 8106bba:	68db      	ldr	r3, [r3, #12]
 8106bbc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8106bc0:	6a3b      	ldr	r3, [r7, #32]
 8106bc2:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8106bc4:	6a3b      	ldr	r3, [r7, #32]
 8106bc6:	68db      	ldr	r3, [r3, #12]
 8106bc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8106bcc:	6a3b      	ldr	r3, [r7, #32]
 8106bce:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8106bd0:	68bb      	ldr	r3, [r7, #8]
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	f003 0302 	and.w	r3, r3, #2
 8106bd8:	2b00      	cmp	r3, #0
 8106bda:	f000 80d3 	beq.w	8106d84 <ETH_Prepare_Tx_Descriptors+0x48c>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8106bde:	6a3b      	ldr	r3, [r7, #32]
 8106be0:	68db      	ldr	r3, [r3, #12]
 8106be2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8106be6:	68bb      	ldr	r3, [r7, #8]
 8106be8:	68db      	ldr	r3, [r3, #12]
 8106bea:	431a      	orrs	r2, r3
 8106bec:	6a3b      	ldr	r3, [r7, #32]
 8106bee:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8106bf0:	e0c8      	b.n	8106d84 <ETH_Prepare_Tx_Descriptors+0x48c>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8106bf2:	6a3b      	ldr	r3, [r7, #32]
 8106bf4:	68db      	ldr	r3, [r3, #12]
 8106bf6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8106bfa:	6a3b      	ldr	r3, [r7, #32]
 8106bfc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8106bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c00:	3301      	adds	r3, #1
 8106c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c06:	2b03      	cmp	r3, #3
 8106c08:	d902      	bls.n	8106c10 <ETH_Prepare_Tx_Descriptors+0x318>
 8106c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c0c:	3b04      	subs	r3, #4
 8106c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106c10:	697b      	ldr	r3, [r7, #20]
 8106c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106c18:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8106c1a:	6a3b      	ldr	r3, [r7, #32]
 8106c1c:	68db      	ldr	r3, [r3, #12]
 8106c1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8106c22:	6a3b      	ldr	r3, [r7, #32]
 8106c24:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8106c26:	6a3b      	ldr	r3, [r7, #32]
 8106c28:	68db      	ldr	r3, [r3, #12]
 8106c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8106c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8106c32:	d007      	beq.n	8106c44 <ETH_Prepare_Tx_Descriptors+0x34c>
 8106c34:	697a      	ldr	r2, [r7, #20]
 8106c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c38:	3304      	adds	r3, #4
 8106c3a:	009b      	lsls	r3, r3, #2
 8106c3c:	4413      	add	r3, r2
 8106c3e:	685b      	ldr	r3, [r3, #4]
 8106c40:	2b00      	cmp	r3, #0
 8106c42:	d026      	beq.n	8106c92 <ETH_Prepare_Tx_Descriptors+0x39a>
    {
      descidx = firstdescidx;
 8106c44:	693b      	ldr	r3, [r7, #16]
 8106c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106c48:	697b      	ldr	r3, [r7, #20]
 8106c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106c50:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8106c52:	2300      	movs	r3, #0
 8106c54:	627b      	str	r3, [r7, #36]	; 0x24
 8106c56:	e016      	b.n	8106c86 <ETH_Prepare_Tx_Descriptors+0x38e>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8106c58:	6a3b      	ldr	r3, [r7, #32]
 8106c5a:	68db      	ldr	r3, [r3, #12]
 8106c5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106c60:	6a3b      	ldr	r3, [r7, #32]
 8106c62:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8106c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c66:	3301      	adds	r3, #1
 8106c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c6c:	2b03      	cmp	r3, #3
 8106c6e:	d902      	bls.n	8106c76 <ETH_Prepare_Tx_Descriptors+0x37e>
 8106c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c72:	3b04      	subs	r3, #4
 8106c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106c76:	697b      	ldr	r3, [r7, #20]
 8106c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106c7e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8106c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106c82:	3301      	adds	r3, #1
 8106c84:	627b      	str	r3, [r7, #36]	; 0x24
 8106c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c8a:	429a      	cmp	r2, r3
 8106c8c:	d3e4      	bcc.n	8106c58 <ETH_Prepare_Tx_Descriptors+0x360>
      }

      return HAL_ETH_ERROR_BUSY;
 8106c8e:	2302      	movs	r3, #2
 8106c90:	e0aa      	b.n	8106de8 <ETH_Prepare_Tx_Descriptors+0x4f0>
    }

    descnbr += 1U;
 8106c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c94:	3301      	adds	r3, #1
 8106c96:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8106c98:	69fb      	ldr	r3, [r7, #28]
 8106c9a:	689b      	ldr	r3, [r3, #8]
 8106c9c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8106c9e:	69fb      	ldr	r3, [r7, #28]
 8106ca0:	681b      	ldr	r3, [r3, #0]
 8106ca2:	461a      	mov	r2, r3
 8106ca4:	6a3b      	ldr	r3, [r7, #32]
 8106ca6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8106ca8:	6a3b      	ldr	r3, [r7, #32]
 8106caa:	689b      	ldr	r3, [r3, #8]
 8106cac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8106cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8106cb4:	69fa      	ldr	r2, [r7, #28]
 8106cb6:	6852      	ldr	r2, [r2, #4]
 8106cb8:	431a      	orrs	r2, r3
 8106cba:	6a3b      	ldr	r3, [r7, #32]
 8106cbc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8106cbe:	69fb      	ldr	r3, [r7, #28]
 8106cc0:	689b      	ldr	r3, [r3, #8]
 8106cc2:	2b00      	cmp	r3, #0
 8106cc4:	d014      	beq.n	8106cf0 <ETH_Prepare_Tx_Descriptors+0x3f8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8106cc6:	69fb      	ldr	r3, [r7, #28]
 8106cc8:	689b      	ldr	r3, [r3, #8]
 8106cca:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8106ccc:	69fb      	ldr	r3, [r7, #28]
 8106cce:	681b      	ldr	r3, [r3, #0]
 8106cd0:	461a      	mov	r2, r3
 8106cd2:	6a3b      	ldr	r3, [r7, #32]
 8106cd4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8106cd6:	6a3b      	ldr	r3, [r7, #32]
 8106cd8:	689b      	ldr	r3, [r3, #8]
 8106cda:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8106cde:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8106ce2:	69fa      	ldr	r2, [r7, #28]
 8106ce4:	6852      	ldr	r2, [r2, #4]
 8106ce6:	0412      	lsls	r2, r2, #16
 8106ce8:	431a      	orrs	r2, r3
 8106cea:	6a3b      	ldr	r3, [r7, #32]
 8106cec:	609a      	str	r2, [r3, #8]
 8106cee:	e00a      	b.n	8106d06 <ETH_Prepare_Tx_Descriptors+0x40e>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8106cf0:	6a3b      	ldr	r3, [r7, #32]
 8106cf2:	2200      	movs	r2, #0
 8106cf4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8106cf6:	6a3b      	ldr	r3, [r7, #32]
 8106cf8:	689b      	ldr	r3, [r3, #8]
 8106cfa:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8106cfe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8106d02:	6a3a      	ldr	r2, [r7, #32]
 8106d04:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8106d06:	68bb      	ldr	r3, [r7, #8]
 8106d08:	681b      	ldr	r3, [r3, #0]
 8106d0a:	f003 0310 	and.w	r3, r3, #16
 8106d0e:	2b00      	cmp	r3, #0
 8106d10:	d00f      	beq.n	8106d32 <ETH_Prepare_Tx_Descriptors+0x43a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8106d12:	6a3b      	ldr	r3, [r7, #32]
 8106d14:	68db      	ldr	r3, [r3, #12]
 8106d16:	0c9b      	lsrs	r3, r3, #18
 8106d18:	049b      	lsls	r3, r3, #18
 8106d1a:	68ba      	ldr	r2, [r7, #8]
 8106d1c:	69d2      	ldr	r2, [r2, #28]
 8106d1e:	431a      	orrs	r2, r3
 8106d20:	6a3b      	ldr	r3, [r7, #32]
 8106d22:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8106d24:	6a3b      	ldr	r3, [r7, #32]
 8106d26:	68db      	ldr	r3, [r3, #12]
 8106d28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8106d2c:	6a3b      	ldr	r3, [r7, #32]
 8106d2e:	60da      	str	r2, [r3, #12]
 8106d30:	e019      	b.n	8106d66 <ETH_Prepare_Tx_Descriptors+0x46e>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8106d32:	6a3b      	ldr	r3, [r7, #32]
 8106d34:	68db      	ldr	r3, [r3, #12]
 8106d36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8106d3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8106d3e:	68ba      	ldr	r2, [r7, #8]
 8106d40:	6852      	ldr	r2, [r2, #4]
 8106d42:	431a      	orrs	r2, r3
 8106d44:	6a3b      	ldr	r3, [r7, #32]
 8106d46:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8106d48:	68bb      	ldr	r3, [r7, #8]
 8106d4a:	681b      	ldr	r3, [r3, #0]
 8106d4c:	f003 0301 	and.w	r3, r3, #1
 8106d50:	2b00      	cmp	r3, #0
 8106d52:	d008      	beq.n	8106d66 <ETH_Prepare_Tx_Descriptors+0x46e>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8106d54:	6a3b      	ldr	r3, [r7, #32]
 8106d56:	68db      	ldr	r3, [r3, #12]
 8106d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8106d5c:	68bb      	ldr	r3, [r7, #8]
 8106d5e:	695b      	ldr	r3, [r3, #20]
 8106d60:	431a      	orrs	r2, r3
 8106d62:	6a3b      	ldr	r3, [r7, #32]
 8106d64:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8106d66:	69bb      	ldr	r3, [r7, #24]
 8106d68:	3301      	adds	r3, #1
 8106d6a:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8106d6c:	6a3b      	ldr	r3, [r7, #32]
 8106d6e:	68db      	ldr	r3, [r3, #12]
 8106d70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8106d74:	6a3b      	ldr	r3, [r7, #32]
 8106d76:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8106d78:	6a3b      	ldr	r3, [r7, #32]
 8106d7a:	68db      	ldr	r3, [r3, #12]
 8106d7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8106d80:	6a3b      	ldr	r3, [r7, #32]
 8106d82:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8106d84:	69fb      	ldr	r3, [r7, #28]
 8106d86:	689b      	ldr	r3, [r3, #8]
 8106d88:	2b00      	cmp	r3, #0
 8106d8a:	f47f af32 	bne.w	8106bf2 <ETH_Prepare_Tx_Descriptors+0x2fa>
  }

  if(ItMode != ((uint32_t)RESET))
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	2b00      	cmp	r3, #0
 8106d92:	d006      	beq.n	8106da2 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8106d94:	6a3b      	ldr	r3, [r7, #32]
 8106d96:	689b      	ldr	r3, [r3, #8]
 8106d98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8106d9c:	6a3b      	ldr	r3, [r7, #32]
 8106d9e:	609a      	str	r2, [r3, #8]
 8106da0:	e005      	b.n	8106dae <ETH_Prepare_Tx_Descriptors+0x4b6>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8106da2:	6a3b      	ldr	r3, [r7, #32]
 8106da4:	689b      	ldr	r3, [r3, #8]
 8106da6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106daa:	6a3b      	ldr	r3, [r7, #32]
 8106dac:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8106dae:	6a3b      	ldr	r3, [r7, #32]
 8106db0:	68db      	ldr	r3, [r3, #12]
 8106db2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8106db6:	6a3b      	ldr	r3, [r7, #32]
 8106db8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8106dba:	697b      	ldr	r3, [r7, #20]
 8106dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106dbe:	6979      	ldr	r1, [r7, #20]
 8106dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106dc2:	3304      	adds	r3, #4
 8106dc4:	009b      	lsls	r3, r3, #2
 8106dc6:	440b      	add	r3, r1
 8106dc8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8106dca:	697b      	ldr	r3, [r7, #20]
 8106dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106dce:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8106dd0:	b672      	cpsid	i
}
 8106dd2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8106dd4:	697b      	ldr	r3, [r7, #20]
 8106dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8106dd8:	69bb      	ldr	r3, [r7, #24]
 8106dda:	4413      	add	r3, r2
 8106ddc:	1c5a      	adds	r2, r3, #1
 8106dde:	697b      	ldr	r3, [r7, #20]
 8106de0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8106de2:	b662      	cpsie	i
}
 8106de4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8106de6:	2300      	movs	r3, #0
}
 8106de8:	4618      	mov	r0, r3
 8106dea:	3734      	adds	r7, #52	; 0x34
 8106dec:	46bd      	mov	sp, r7
 8106dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106df2:	4770      	bx	lr

08106df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106df4:	b480      	push	{r7}
 8106df6:	b089      	sub	sp, #36	; 0x24
 8106df8:	af00      	add	r7, sp, #0
 8106dfa:	6078      	str	r0, [r7, #4]
 8106dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106dfe:	2300      	movs	r3, #0
 8106e00:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106e02:	4b89      	ldr	r3, [pc, #548]	; (8107028 <HAL_GPIO_Init+0x234>)
 8106e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106e06:	e194      	b.n	8107132 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106e08:	683b      	ldr	r3, [r7, #0]
 8106e0a:	681a      	ldr	r2, [r3, #0]
 8106e0c:	2101      	movs	r1, #1
 8106e0e:	69fb      	ldr	r3, [r7, #28]
 8106e10:	fa01 f303 	lsl.w	r3, r1, r3
 8106e14:	4013      	ands	r3, r2
 8106e16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106e18:	693b      	ldr	r3, [r7, #16]
 8106e1a:	2b00      	cmp	r3, #0
 8106e1c:	f000 8186 	beq.w	810712c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8106e20:	683b      	ldr	r3, [r7, #0]
 8106e22:	685b      	ldr	r3, [r3, #4]
 8106e24:	f003 0303 	and.w	r3, r3, #3
 8106e28:	2b01      	cmp	r3, #1
 8106e2a:	d005      	beq.n	8106e38 <HAL_GPIO_Init+0x44>
 8106e2c:	683b      	ldr	r3, [r7, #0]
 8106e2e:	685b      	ldr	r3, [r3, #4]
 8106e30:	f003 0303 	and.w	r3, r3, #3
 8106e34:	2b02      	cmp	r3, #2
 8106e36:	d130      	bne.n	8106e9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106e38:	687b      	ldr	r3, [r7, #4]
 8106e3a:	689b      	ldr	r3, [r3, #8]
 8106e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106e3e:	69fb      	ldr	r3, [r7, #28]
 8106e40:	005b      	lsls	r3, r3, #1
 8106e42:	2203      	movs	r2, #3
 8106e44:	fa02 f303 	lsl.w	r3, r2, r3
 8106e48:	43db      	mvns	r3, r3
 8106e4a:	69ba      	ldr	r2, [r7, #24]
 8106e4c:	4013      	ands	r3, r2
 8106e4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106e50:	683b      	ldr	r3, [r7, #0]
 8106e52:	68da      	ldr	r2, [r3, #12]
 8106e54:	69fb      	ldr	r3, [r7, #28]
 8106e56:	005b      	lsls	r3, r3, #1
 8106e58:	fa02 f303 	lsl.w	r3, r2, r3
 8106e5c:	69ba      	ldr	r2, [r7, #24]
 8106e5e:	4313      	orrs	r3, r2
 8106e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	69ba      	ldr	r2, [r7, #24]
 8106e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	685b      	ldr	r3, [r3, #4]
 8106e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106e6e:	2201      	movs	r2, #1
 8106e70:	69fb      	ldr	r3, [r7, #28]
 8106e72:	fa02 f303 	lsl.w	r3, r2, r3
 8106e76:	43db      	mvns	r3, r3
 8106e78:	69ba      	ldr	r2, [r7, #24]
 8106e7a:	4013      	ands	r3, r2
 8106e7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8106e7e:	683b      	ldr	r3, [r7, #0]
 8106e80:	685b      	ldr	r3, [r3, #4]
 8106e82:	091b      	lsrs	r3, r3, #4
 8106e84:	f003 0201 	and.w	r2, r3, #1
 8106e88:	69fb      	ldr	r3, [r7, #28]
 8106e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8106e8e:	69ba      	ldr	r2, [r7, #24]
 8106e90:	4313      	orrs	r3, r2
 8106e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	69ba      	ldr	r2, [r7, #24]
 8106e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106e9a:	683b      	ldr	r3, [r7, #0]
 8106e9c:	685b      	ldr	r3, [r3, #4]
 8106e9e:	f003 0303 	and.w	r3, r3, #3
 8106ea2:	2b03      	cmp	r3, #3
 8106ea4:	d017      	beq.n	8106ed6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	68db      	ldr	r3, [r3, #12]
 8106eaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106eac:	69fb      	ldr	r3, [r7, #28]
 8106eae:	005b      	lsls	r3, r3, #1
 8106eb0:	2203      	movs	r2, #3
 8106eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8106eb6:	43db      	mvns	r3, r3
 8106eb8:	69ba      	ldr	r2, [r7, #24]
 8106eba:	4013      	ands	r3, r2
 8106ebc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106ebe:	683b      	ldr	r3, [r7, #0]
 8106ec0:	689a      	ldr	r2, [r3, #8]
 8106ec2:	69fb      	ldr	r3, [r7, #28]
 8106ec4:	005b      	lsls	r3, r3, #1
 8106ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8106eca:	69ba      	ldr	r2, [r7, #24]
 8106ecc:	4313      	orrs	r3, r2
 8106ece:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	69ba      	ldr	r2, [r7, #24]
 8106ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8106ed6:	683b      	ldr	r3, [r7, #0]
 8106ed8:	685b      	ldr	r3, [r3, #4]
 8106eda:	f003 0303 	and.w	r3, r3, #3
 8106ede:	2b02      	cmp	r3, #2
 8106ee0:	d123      	bne.n	8106f2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106ee2:	69fb      	ldr	r3, [r7, #28]
 8106ee4:	08da      	lsrs	r2, r3, #3
 8106ee6:	687b      	ldr	r3, [r7, #4]
 8106ee8:	3208      	adds	r2, #8
 8106eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106ef0:	69fb      	ldr	r3, [r7, #28]
 8106ef2:	f003 0307 	and.w	r3, r3, #7
 8106ef6:	009b      	lsls	r3, r3, #2
 8106ef8:	220f      	movs	r2, #15
 8106efa:	fa02 f303 	lsl.w	r3, r2, r3
 8106efe:	43db      	mvns	r3, r3
 8106f00:	69ba      	ldr	r2, [r7, #24]
 8106f02:	4013      	ands	r3, r2
 8106f04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106f06:	683b      	ldr	r3, [r7, #0]
 8106f08:	691a      	ldr	r2, [r3, #16]
 8106f0a:	69fb      	ldr	r3, [r7, #28]
 8106f0c:	f003 0307 	and.w	r3, r3, #7
 8106f10:	009b      	lsls	r3, r3, #2
 8106f12:	fa02 f303 	lsl.w	r3, r2, r3
 8106f16:	69ba      	ldr	r2, [r7, #24]
 8106f18:	4313      	orrs	r3, r2
 8106f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106f1c:	69fb      	ldr	r3, [r7, #28]
 8106f1e:	08da      	lsrs	r2, r3, #3
 8106f20:	687b      	ldr	r3, [r7, #4]
 8106f22:	3208      	adds	r2, #8
 8106f24:	69b9      	ldr	r1, [r7, #24]
 8106f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	681b      	ldr	r3, [r3, #0]
 8106f2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106f30:	69fb      	ldr	r3, [r7, #28]
 8106f32:	005b      	lsls	r3, r3, #1
 8106f34:	2203      	movs	r2, #3
 8106f36:	fa02 f303 	lsl.w	r3, r2, r3
 8106f3a:	43db      	mvns	r3, r3
 8106f3c:	69ba      	ldr	r2, [r7, #24]
 8106f3e:	4013      	ands	r3, r2
 8106f40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106f42:	683b      	ldr	r3, [r7, #0]
 8106f44:	685b      	ldr	r3, [r3, #4]
 8106f46:	f003 0203 	and.w	r2, r3, #3
 8106f4a:	69fb      	ldr	r3, [r7, #28]
 8106f4c:	005b      	lsls	r3, r3, #1
 8106f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8106f52:	69ba      	ldr	r2, [r7, #24]
 8106f54:	4313      	orrs	r3, r2
 8106f56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	69ba      	ldr	r2, [r7, #24]
 8106f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8106f5e:	683b      	ldr	r3, [r7, #0]
 8106f60:	685b      	ldr	r3, [r3, #4]
 8106f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106f66:	2b00      	cmp	r3, #0
 8106f68:	f000 80e0 	beq.w	810712c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106f6c:	4b2f      	ldr	r3, [pc, #188]	; (810702c <HAL_GPIO_Init+0x238>)
 8106f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106f72:	4a2e      	ldr	r2, [pc, #184]	; (810702c <HAL_GPIO_Init+0x238>)
 8106f74:	f043 0302 	orr.w	r3, r3, #2
 8106f78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106f7c:	4b2b      	ldr	r3, [pc, #172]	; (810702c <HAL_GPIO_Init+0x238>)
 8106f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106f82:	f003 0302 	and.w	r3, r3, #2
 8106f86:	60fb      	str	r3, [r7, #12]
 8106f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106f8a:	4a29      	ldr	r2, [pc, #164]	; (8107030 <HAL_GPIO_Init+0x23c>)
 8106f8c:	69fb      	ldr	r3, [r7, #28]
 8106f8e:	089b      	lsrs	r3, r3, #2
 8106f90:	3302      	adds	r3, #2
 8106f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106f98:	69fb      	ldr	r3, [r7, #28]
 8106f9a:	f003 0303 	and.w	r3, r3, #3
 8106f9e:	009b      	lsls	r3, r3, #2
 8106fa0:	220f      	movs	r2, #15
 8106fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8106fa6:	43db      	mvns	r3, r3
 8106fa8:	69ba      	ldr	r2, [r7, #24]
 8106faa:	4013      	ands	r3, r2
 8106fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106fae:	687b      	ldr	r3, [r7, #4]
 8106fb0:	4a20      	ldr	r2, [pc, #128]	; (8107034 <HAL_GPIO_Init+0x240>)
 8106fb2:	4293      	cmp	r3, r2
 8106fb4:	d052      	beq.n	810705c <HAL_GPIO_Init+0x268>
 8106fb6:	687b      	ldr	r3, [r7, #4]
 8106fb8:	4a1f      	ldr	r2, [pc, #124]	; (8107038 <HAL_GPIO_Init+0x244>)
 8106fba:	4293      	cmp	r3, r2
 8106fbc:	d031      	beq.n	8107022 <HAL_GPIO_Init+0x22e>
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	4a1e      	ldr	r2, [pc, #120]	; (810703c <HAL_GPIO_Init+0x248>)
 8106fc2:	4293      	cmp	r3, r2
 8106fc4:	d02b      	beq.n	810701e <HAL_GPIO_Init+0x22a>
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	4a1d      	ldr	r2, [pc, #116]	; (8107040 <HAL_GPIO_Init+0x24c>)
 8106fca:	4293      	cmp	r3, r2
 8106fcc:	d025      	beq.n	810701a <HAL_GPIO_Init+0x226>
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	4a1c      	ldr	r2, [pc, #112]	; (8107044 <HAL_GPIO_Init+0x250>)
 8106fd2:	4293      	cmp	r3, r2
 8106fd4:	d01f      	beq.n	8107016 <HAL_GPIO_Init+0x222>
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	4a1b      	ldr	r2, [pc, #108]	; (8107048 <HAL_GPIO_Init+0x254>)
 8106fda:	4293      	cmp	r3, r2
 8106fdc:	d019      	beq.n	8107012 <HAL_GPIO_Init+0x21e>
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	4a1a      	ldr	r2, [pc, #104]	; (810704c <HAL_GPIO_Init+0x258>)
 8106fe2:	4293      	cmp	r3, r2
 8106fe4:	d013      	beq.n	810700e <HAL_GPIO_Init+0x21a>
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	4a19      	ldr	r2, [pc, #100]	; (8107050 <HAL_GPIO_Init+0x25c>)
 8106fea:	4293      	cmp	r3, r2
 8106fec:	d00d      	beq.n	810700a <HAL_GPIO_Init+0x216>
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	4a18      	ldr	r2, [pc, #96]	; (8107054 <HAL_GPIO_Init+0x260>)
 8106ff2:	4293      	cmp	r3, r2
 8106ff4:	d007      	beq.n	8107006 <HAL_GPIO_Init+0x212>
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	4a17      	ldr	r2, [pc, #92]	; (8107058 <HAL_GPIO_Init+0x264>)
 8106ffa:	4293      	cmp	r3, r2
 8106ffc:	d101      	bne.n	8107002 <HAL_GPIO_Init+0x20e>
 8106ffe:	2309      	movs	r3, #9
 8107000:	e02d      	b.n	810705e <HAL_GPIO_Init+0x26a>
 8107002:	230a      	movs	r3, #10
 8107004:	e02b      	b.n	810705e <HAL_GPIO_Init+0x26a>
 8107006:	2308      	movs	r3, #8
 8107008:	e029      	b.n	810705e <HAL_GPIO_Init+0x26a>
 810700a:	2307      	movs	r3, #7
 810700c:	e027      	b.n	810705e <HAL_GPIO_Init+0x26a>
 810700e:	2306      	movs	r3, #6
 8107010:	e025      	b.n	810705e <HAL_GPIO_Init+0x26a>
 8107012:	2305      	movs	r3, #5
 8107014:	e023      	b.n	810705e <HAL_GPIO_Init+0x26a>
 8107016:	2304      	movs	r3, #4
 8107018:	e021      	b.n	810705e <HAL_GPIO_Init+0x26a>
 810701a:	2303      	movs	r3, #3
 810701c:	e01f      	b.n	810705e <HAL_GPIO_Init+0x26a>
 810701e:	2302      	movs	r3, #2
 8107020:	e01d      	b.n	810705e <HAL_GPIO_Init+0x26a>
 8107022:	2301      	movs	r3, #1
 8107024:	e01b      	b.n	810705e <HAL_GPIO_Init+0x26a>
 8107026:	bf00      	nop
 8107028:	580000c0 	.word	0x580000c0
 810702c:	58024400 	.word	0x58024400
 8107030:	58000400 	.word	0x58000400
 8107034:	58020000 	.word	0x58020000
 8107038:	58020400 	.word	0x58020400
 810703c:	58020800 	.word	0x58020800
 8107040:	58020c00 	.word	0x58020c00
 8107044:	58021000 	.word	0x58021000
 8107048:	58021400 	.word	0x58021400
 810704c:	58021800 	.word	0x58021800
 8107050:	58021c00 	.word	0x58021c00
 8107054:	58022000 	.word	0x58022000
 8107058:	58022400 	.word	0x58022400
 810705c:	2300      	movs	r3, #0
 810705e:	69fa      	ldr	r2, [r7, #28]
 8107060:	f002 0203 	and.w	r2, r2, #3
 8107064:	0092      	lsls	r2, r2, #2
 8107066:	4093      	lsls	r3, r2
 8107068:	69ba      	ldr	r2, [r7, #24]
 810706a:	4313      	orrs	r3, r2
 810706c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810706e:	4938      	ldr	r1, [pc, #224]	; (8107150 <HAL_GPIO_Init+0x35c>)
 8107070:	69fb      	ldr	r3, [r7, #28]
 8107072:	089b      	lsrs	r3, r3, #2
 8107074:	3302      	adds	r3, #2
 8107076:	69ba      	ldr	r2, [r7, #24]
 8107078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810707c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107080:	681b      	ldr	r3, [r3, #0]
 8107082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107084:	693b      	ldr	r3, [r7, #16]
 8107086:	43db      	mvns	r3, r3
 8107088:	69ba      	ldr	r2, [r7, #24]
 810708a:	4013      	ands	r3, r2
 810708c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810708e:	683b      	ldr	r3, [r7, #0]
 8107090:	685b      	ldr	r3, [r3, #4]
 8107092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107096:	2b00      	cmp	r3, #0
 8107098:	d003      	beq.n	81070a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810709a:	69ba      	ldr	r2, [r7, #24]
 810709c:	693b      	ldr	r3, [r7, #16]
 810709e:	4313      	orrs	r3, r2
 81070a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81070a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81070a6:	69bb      	ldr	r3, [r7, #24]
 81070a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81070aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81070ae:	685b      	ldr	r3, [r3, #4]
 81070b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81070b2:	693b      	ldr	r3, [r7, #16]
 81070b4:	43db      	mvns	r3, r3
 81070b6:	69ba      	ldr	r2, [r7, #24]
 81070b8:	4013      	ands	r3, r2
 81070ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81070bc:	683b      	ldr	r3, [r7, #0]
 81070be:	685b      	ldr	r3, [r3, #4]
 81070c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81070c4:	2b00      	cmp	r3, #0
 81070c6:	d003      	beq.n	81070d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81070c8:	69ba      	ldr	r2, [r7, #24]
 81070ca:	693b      	ldr	r3, [r7, #16]
 81070cc:	4313      	orrs	r3, r2
 81070ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81070d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81070d4:	69bb      	ldr	r3, [r7, #24]
 81070d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81070d8:	697b      	ldr	r3, [r7, #20]
 81070da:	685b      	ldr	r3, [r3, #4]
 81070dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81070de:	693b      	ldr	r3, [r7, #16]
 81070e0:	43db      	mvns	r3, r3
 81070e2:	69ba      	ldr	r2, [r7, #24]
 81070e4:	4013      	ands	r3, r2
 81070e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81070e8:	683b      	ldr	r3, [r7, #0]
 81070ea:	685b      	ldr	r3, [r3, #4]
 81070ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81070f0:	2b00      	cmp	r3, #0
 81070f2:	d003      	beq.n	81070fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81070f4:	69ba      	ldr	r2, [r7, #24]
 81070f6:	693b      	ldr	r3, [r7, #16]
 81070f8:	4313      	orrs	r3, r2
 81070fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81070fc:	697b      	ldr	r3, [r7, #20]
 81070fe:	69ba      	ldr	r2, [r7, #24]
 8107100:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8107102:	697b      	ldr	r3, [r7, #20]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107108:	693b      	ldr	r3, [r7, #16]
 810710a:	43db      	mvns	r3, r3
 810710c:	69ba      	ldr	r2, [r7, #24]
 810710e:	4013      	ands	r3, r2
 8107110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8107112:	683b      	ldr	r3, [r7, #0]
 8107114:	685b      	ldr	r3, [r3, #4]
 8107116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810711a:	2b00      	cmp	r3, #0
 810711c:	d003      	beq.n	8107126 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810711e:	69ba      	ldr	r2, [r7, #24]
 8107120:	693b      	ldr	r3, [r7, #16]
 8107122:	4313      	orrs	r3, r2
 8107124:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8107126:	697b      	ldr	r3, [r7, #20]
 8107128:	69ba      	ldr	r2, [r7, #24]
 810712a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810712c:	69fb      	ldr	r3, [r7, #28]
 810712e:	3301      	adds	r3, #1
 8107130:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8107132:	683b      	ldr	r3, [r7, #0]
 8107134:	681a      	ldr	r2, [r3, #0]
 8107136:	69fb      	ldr	r3, [r7, #28]
 8107138:	fa22 f303 	lsr.w	r3, r2, r3
 810713c:	2b00      	cmp	r3, #0
 810713e:	f47f ae63 	bne.w	8106e08 <HAL_GPIO_Init+0x14>
  }
}
 8107142:	bf00      	nop
 8107144:	bf00      	nop
 8107146:	3724      	adds	r7, #36	; 0x24
 8107148:	46bd      	mov	sp, r7
 810714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810714e:	4770      	bx	lr
 8107150:	58000400 	.word	0x58000400

08107154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8107154:	b480      	push	{r7}
 8107156:	b085      	sub	sp, #20
 8107158:	af00      	add	r7, sp, #0
 810715a:	6078      	str	r0, [r7, #4]
 810715c:	460b      	mov	r3, r1
 810715e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	691a      	ldr	r2, [r3, #16]
 8107164:	887b      	ldrh	r3, [r7, #2]
 8107166:	4013      	ands	r3, r2
 8107168:	2b00      	cmp	r3, #0
 810716a:	d002      	beq.n	8107172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 810716c:	2301      	movs	r3, #1
 810716e:	73fb      	strb	r3, [r7, #15]
 8107170:	e001      	b.n	8107176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8107172:	2300      	movs	r3, #0
 8107174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8107176:	7bfb      	ldrb	r3, [r7, #15]
}
 8107178:	4618      	mov	r0, r3
 810717a:	3714      	adds	r7, #20
 810717c:	46bd      	mov	sp, r7
 810717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107182:	4770      	bx	lr

08107184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8107184:	b480      	push	{r7}
 8107186:	b083      	sub	sp, #12
 8107188:	af00      	add	r7, sp, #0
 810718a:	6078      	str	r0, [r7, #4]
 810718c:	460b      	mov	r3, r1
 810718e:	807b      	strh	r3, [r7, #2]
 8107190:	4613      	mov	r3, r2
 8107192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8107194:	787b      	ldrb	r3, [r7, #1]
 8107196:	2b00      	cmp	r3, #0
 8107198:	d003      	beq.n	81071a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810719a:	887a      	ldrh	r2, [r7, #2]
 810719c:	687b      	ldr	r3, [r7, #4]
 810719e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81071a0:	e003      	b.n	81071aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81071a2:	887b      	ldrh	r3, [r7, #2]
 81071a4:	041a      	lsls	r2, r3, #16
 81071a6:	687b      	ldr	r3, [r7, #4]
 81071a8:	619a      	str	r2, [r3, #24]
}
 81071aa:	bf00      	nop
 81071ac:	370c      	adds	r7, #12
 81071ae:	46bd      	mov	sp, r7
 81071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071b4:	4770      	bx	lr
	...

081071b8 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 81071b8:	b480      	push	{r7}
 81071ba:	b083      	sub	sp, #12
 81071bc:	af00      	add	r7, sp, #0
 81071be:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 81071c0:	4a07      	ldr	r2, [pc, #28]	; (81071e0 <HAL_HSEM_IsSemTaken+0x28>)
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81071c8:	2b00      	cmp	r3, #0
 81071ca:	da01      	bge.n	81071d0 <HAL_HSEM_IsSemTaken+0x18>
 81071cc:	2301      	movs	r3, #1
 81071ce:	e000      	b.n	81071d2 <HAL_HSEM_IsSemTaken+0x1a>
 81071d0:	2300      	movs	r3, #0
}
 81071d2:	4618      	mov	r0, r3
 81071d4:	370c      	adds	r7, #12
 81071d6:	46bd      	mov	sp, r7
 81071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071dc:	4770      	bx	lr
 81071de:	bf00      	nop
 81071e0:	58026400 	.word	0x58026400

081071e4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81071e4:	b480      	push	{r7}
 81071e6:	b083      	sub	sp, #12
 81071e8:	af00      	add	r7, sp, #0
 81071ea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81071ec:	4b05      	ldr	r3, [pc, #20]	; (8107204 <HAL_HSEM_ActivateNotification+0x20>)
 81071ee:	681a      	ldr	r2, [r3, #0]
 81071f0:	4904      	ldr	r1, [pc, #16]	; (8107204 <HAL_HSEM_ActivateNotification+0x20>)
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	4313      	orrs	r3, r2
 81071f6:	600b      	str	r3, [r1, #0]
#endif
}
 81071f8:	bf00      	nop
 81071fa:	370c      	adds	r7, #12
 81071fc:	46bd      	mov	sp, r7
 81071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107202:	4770      	bx	lr
 8107204:	58026510 	.word	0x58026510

08107208 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8107208:	b580      	push	{r7, lr}
 810720a:	b084      	sub	sp, #16
 810720c:	af00      	add	r7, sp, #0
 810720e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	2b00      	cmp	r3, #0
 8107214:	d101      	bne.n	810721a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8107216:	2301      	movs	r3, #1
 8107218:	e099      	b.n	810734e <HAL_LPTIM_Init+0x146>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	685b      	ldr	r3, [r3, #4]
 810721e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8107226:	b2db      	uxtb	r3, r3
 8107228:	2b00      	cmp	r3, #0
 810722a:	d106      	bne.n	810723a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	2200      	movs	r2, #0
 8107230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8107234:	6878      	ldr	r0, [r7, #4]
 8107236:	f00f fa07 	bl	8116648 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	2202      	movs	r2, #2
 810723e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8107242:	687b      	ldr	r3, [r7, #4]
 8107244:	681b      	ldr	r3, [r3, #0]
 8107246:	68db      	ldr	r3, [r3, #12]
 8107248:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 810724a:	687b      	ldr	r3, [r7, #4]
 810724c:	685b      	ldr	r3, [r3, #4]
 810724e:	2b01      	cmp	r3, #1
 8107250:	d004      	beq.n	810725c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810725a:	d103      	bne.n	8107264 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 810725c:	68fb      	ldr	r3, [r7, #12]
 810725e:	f023 031e 	bic.w	r3, r3, #30
 8107262:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	695b      	ldr	r3, [r3, #20]
 8107268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810726c:	4293      	cmp	r3, r2
 810726e:	d005      	beq.n	810727c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8107270:	68fb      	ldr	r3, [r7, #12]
 8107272:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8107276:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 810727a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 810727c:	68fa      	ldr	r2, [r7, #12]
 810727e:	4b36      	ldr	r3, [pc, #216]	; (8107358 <HAL_LPTIM_Init+0x150>)
 8107280:	4013      	ands	r3, r2
 8107282:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8107284:	687b      	ldr	r3, [r7, #4]
 8107286:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8107288:	687b      	ldr	r3, [r7, #4]
 810728a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 810728c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 810728e:	687b      	ldr	r3, [r7, #4]
 8107290:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8107292:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8107294:	687b      	ldr	r3, [r7, #4]
 8107296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8107298:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 810729a:	687b      	ldr	r3, [r7, #4]
 810729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 810729e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 81072a0:	68fa      	ldr	r2, [r7, #12]
 81072a2:	4313      	orrs	r3, r2
 81072a4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 81072a6:	687b      	ldr	r3, [r7, #4]
 81072a8:	685b      	ldr	r3, [r3, #4]
 81072aa:	2b00      	cmp	r3, #0
 81072ac:	d107      	bne.n	81072be <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 81072ae:	687b      	ldr	r3, [r7, #4]
 81072b0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 81072b2:	687b      	ldr	r3, [r7, #4]
 81072b4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 81072b6:	4313      	orrs	r3, r2
 81072b8:	68fa      	ldr	r2, [r7, #12]
 81072ba:	4313      	orrs	r3, r2
 81072bc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	685b      	ldr	r3, [r3, #4]
 81072c2:	2b01      	cmp	r3, #1
 81072c4:	d004      	beq.n	81072d0 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 81072c6:	687b      	ldr	r3, [r7, #4]
 81072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81072ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81072ce:	d107      	bne.n	81072e0 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 81072d0:	687b      	ldr	r3, [r7, #4]
 81072d2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 81072d4:	687b      	ldr	r3, [r7, #4]
 81072d6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 81072d8:	4313      	orrs	r3, r2
 81072da:	68fa      	ldr	r2, [r7, #12]
 81072dc:	4313      	orrs	r3, r2
 81072de:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	695b      	ldr	r3, [r3, #20]
 81072e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81072e8:	4293      	cmp	r3, r2
 81072ea:	d00a      	beq.n	8107302 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 81072ec:	687b      	ldr	r3, [r7, #4]
 81072ee:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 81072f4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 81072fa:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 81072fc:	68fa      	ldr	r2, [r7, #12]
 81072fe:	4313      	orrs	r3, r2
 8107300:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	681b      	ldr	r3, [r3, #0]
 8107306:	68fa      	ldr	r2, [r7, #12]
 8107308:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	681b      	ldr	r3, [r3, #0]
 810730e:	4a13      	ldr	r2, [pc, #76]	; (810735c <HAL_LPTIM_Init+0x154>)
 8107310:	4293      	cmp	r3, r2
 8107312:	d004      	beq.n	810731e <HAL_LPTIM_Init+0x116>
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	681b      	ldr	r3, [r3, #0]
 8107318:	4a11      	ldr	r2, [pc, #68]	; (8107360 <HAL_LPTIM_Init+0x158>)
 810731a:	4293      	cmp	r3, r2
 810731c:	d108      	bne.n	8107330 <HAL_LPTIM_Init+0x128>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8107322:	687b      	ldr	r3, [r7, #4]
 8107324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107326:	687b      	ldr	r3, [r7, #4]
 8107328:	681b      	ldr	r3, [r3, #0]
 810732a:	430a      	orrs	r2, r1
 810732c:	625a      	str	r2, [r3, #36]	; 0x24
 810732e:	e009      	b.n	8107344 <HAL_LPTIM_Init+0x13c>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	681b      	ldr	r3, [r3, #0]
 8107334:	4a0b      	ldr	r2, [pc, #44]	; (8107364 <HAL_LPTIM_Init+0x15c>)
 8107336:	4293      	cmp	r3, r2
 8107338:	d104      	bne.n	8107344 <HAL_LPTIM_Init+0x13c>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 810733a:	687b      	ldr	r3, [r7, #4]
 810733c:	681b      	ldr	r3, [r3, #0]
 810733e:	687a      	ldr	r2, [r7, #4]
 8107340:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8107342:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8107344:	687b      	ldr	r3, [r7, #4]
 8107346:	2201      	movs	r2, #1
 8107348:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 810734c:	2300      	movs	r3, #0
}
 810734e:	4618      	mov	r0, r3
 8107350:	3710      	adds	r7, #16
 8107352:	46bd      	mov	sp, r7
 8107354:	bd80      	pop	{r7, pc}
 8107356:	bf00      	nop
 8107358:	ff19f1fe 	.word	0xff19f1fe
 810735c:	40002400 	.word	0x40002400
 8107360:	58002400 	.word	0x58002400
 8107364:	58002800 	.word	0x58002800

08107368 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8107368:	b580      	push	{r7, lr}
 810736a:	b082      	sub	sp, #8
 810736c:	af00      	add	r7, sp, #0
 810736e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	681b      	ldr	r3, [r3, #0]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	f003 0301 	and.w	r3, r3, #1
 810737a:	2b01      	cmp	r3, #1
 810737c:	d10d      	bne.n	810739a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 810737e:	687b      	ldr	r3, [r7, #4]
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	689b      	ldr	r3, [r3, #8]
 8107384:	f003 0301 	and.w	r3, r3, #1
 8107388:	2b01      	cmp	r3, #1
 810738a:	d106      	bne.n	810739a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 810738c:	687b      	ldr	r3, [r7, #4]
 810738e:	681b      	ldr	r3, [r3, #0]
 8107390:	2201      	movs	r2, #1
 8107392:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8107394:	6878      	ldr	r0, [r7, #4]
 8107396:	f000 f882 	bl	810749e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 810739a:	687b      	ldr	r3, [r7, #4]
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	681b      	ldr	r3, [r3, #0]
 81073a0:	f003 0302 	and.w	r3, r3, #2
 81073a4:	2b02      	cmp	r3, #2
 81073a6:	d10d      	bne.n	81073c4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 81073a8:	687b      	ldr	r3, [r7, #4]
 81073aa:	681b      	ldr	r3, [r3, #0]
 81073ac:	689b      	ldr	r3, [r3, #8]
 81073ae:	f003 0302 	and.w	r3, r3, #2
 81073b2:	2b02      	cmp	r3, #2
 81073b4:	d106      	bne.n	81073c4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 81073b6:	687b      	ldr	r3, [r7, #4]
 81073b8:	681b      	ldr	r3, [r3, #0]
 81073ba:	2202      	movs	r2, #2
 81073bc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 81073be:	6878      	ldr	r0, [r7, #4]
 81073c0:	f000 f877 	bl	81074b2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	681b      	ldr	r3, [r3, #0]
 81073c8:	681b      	ldr	r3, [r3, #0]
 81073ca:	f003 0304 	and.w	r3, r3, #4
 81073ce:	2b04      	cmp	r3, #4
 81073d0:	d10d      	bne.n	81073ee <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	689b      	ldr	r3, [r3, #8]
 81073d8:	f003 0304 	and.w	r3, r3, #4
 81073dc:	2b04      	cmp	r3, #4
 81073de:	d106      	bne.n	81073ee <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	681b      	ldr	r3, [r3, #0]
 81073e4:	2204      	movs	r2, #4
 81073e6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 81073e8:	6878      	ldr	r0, [r7, #4]
 81073ea:	f000 f86c 	bl	81074c6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 81073ee:	687b      	ldr	r3, [r7, #4]
 81073f0:	681b      	ldr	r3, [r3, #0]
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	f003 0308 	and.w	r3, r3, #8
 81073f8:	2b08      	cmp	r3, #8
 81073fa:	d10d      	bne.n	8107418 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	689b      	ldr	r3, [r3, #8]
 8107402:	f003 0308 	and.w	r3, r3, #8
 8107406:	2b08      	cmp	r3, #8
 8107408:	d106      	bne.n	8107418 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	2208      	movs	r2, #8
 8107410:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8107412:	6878      	ldr	r0, [r7, #4]
 8107414:	f000 f861 	bl	81074da <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	681b      	ldr	r3, [r3, #0]
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	f003 0310 	and.w	r3, r3, #16
 8107422:	2b10      	cmp	r3, #16
 8107424:	d10d      	bne.n	8107442 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8107426:	687b      	ldr	r3, [r7, #4]
 8107428:	681b      	ldr	r3, [r3, #0]
 810742a:	689b      	ldr	r3, [r3, #8]
 810742c:	f003 0310 	and.w	r3, r3, #16
 8107430:	2b10      	cmp	r3, #16
 8107432:	d106      	bne.n	8107442 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8107434:	687b      	ldr	r3, [r7, #4]
 8107436:	681b      	ldr	r3, [r3, #0]
 8107438:	2210      	movs	r2, #16
 810743a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 810743c:	6878      	ldr	r0, [r7, #4]
 810743e:	f000 f856 	bl	81074ee <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	681b      	ldr	r3, [r3, #0]
 8107446:	681b      	ldr	r3, [r3, #0]
 8107448:	f003 0320 	and.w	r3, r3, #32
 810744c:	2b20      	cmp	r3, #32
 810744e:	d10d      	bne.n	810746c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8107450:	687b      	ldr	r3, [r7, #4]
 8107452:	681b      	ldr	r3, [r3, #0]
 8107454:	689b      	ldr	r3, [r3, #8]
 8107456:	f003 0320 	and.w	r3, r3, #32
 810745a:	2b20      	cmp	r3, #32
 810745c:	d106      	bne.n	810746c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 810745e:	687b      	ldr	r3, [r7, #4]
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	2220      	movs	r2, #32
 8107464:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8107466:	6878      	ldr	r0, [r7, #4]
 8107468:	f000 f84b 	bl	8107502 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	681b      	ldr	r3, [r3, #0]
 8107470:	681b      	ldr	r3, [r3, #0]
 8107472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107476:	2b40      	cmp	r3, #64	; 0x40
 8107478:	d10d      	bne.n	8107496 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	681b      	ldr	r3, [r3, #0]
 810747e:	689b      	ldr	r3, [r3, #8]
 8107480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107484:	2b40      	cmp	r3, #64	; 0x40
 8107486:	d106      	bne.n	8107496 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8107488:	687b      	ldr	r3, [r7, #4]
 810748a:	681b      	ldr	r3, [r3, #0]
 810748c:	2240      	movs	r2, #64	; 0x40
 810748e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8107490:	6878      	ldr	r0, [r7, #4]
 8107492:	f000 f840 	bl	8107516 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8107496:	bf00      	nop
 8107498:	3708      	adds	r7, #8
 810749a:	46bd      	mov	sp, r7
 810749c:	bd80      	pop	{r7, pc}

0810749e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 810749e:	b480      	push	{r7}
 81074a0:	b083      	sub	sp, #12
 81074a2:	af00      	add	r7, sp, #0
 81074a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 81074a6:	bf00      	nop
 81074a8:	370c      	adds	r7, #12
 81074aa:	46bd      	mov	sp, r7
 81074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074b0:	4770      	bx	lr

081074b2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 81074b2:	b480      	push	{r7}
 81074b4:	b083      	sub	sp, #12
 81074b6:	af00      	add	r7, sp, #0
 81074b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 81074ba:	bf00      	nop
 81074bc:	370c      	adds	r7, #12
 81074be:	46bd      	mov	sp, r7
 81074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074c4:	4770      	bx	lr

081074c6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 81074c6:	b480      	push	{r7}
 81074c8:	b083      	sub	sp, #12
 81074ca:	af00      	add	r7, sp, #0
 81074cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 81074ce:	bf00      	nop
 81074d0:	370c      	adds	r7, #12
 81074d2:	46bd      	mov	sp, r7
 81074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074d8:	4770      	bx	lr

081074da <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 81074da:	b480      	push	{r7}
 81074dc:	b083      	sub	sp, #12
 81074de:	af00      	add	r7, sp, #0
 81074e0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 81074e2:	bf00      	nop
 81074e4:	370c      	adds	r7, #12
 81074e6:	46bd      	mov	sp, r7
 81074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ec:	4770      	bx	lr

081074ee <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 81074ee:	b480      	push	{r7}
 81074f0:	b083      	sub	sp, #12
 81074f2:	af00      	add	r7, sp, #0
 81074f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 81074f6:	bf00      	nop
 81074f8:	370c      	adds	r7, #12
 81074fa:	46bd      	mov	sp, r7
 81074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107500:	4770      	bx	lr

08107502 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8107502:	b480      	push	{r7}
 8107504:	b083      	sub	sp, #12
 8107506:	af00      	add	r7, sp, #0
 8107508:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 810750a:	bf00      	nop
 810750c:	370c      	adds	r7, #12
 810750e:	46bd      	mov	sp, r7
 8107510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107514:	4770      	bx	lr

08107516 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8107516:	b480      	push	{r7}
 8107518:	b083      	sub	sp, #12
 810751a:	af00      	add	r7, sp, #0
 810751c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 810751e:	bf00      	nop
 8107520:	370c      	adds	r7, #12
 8107522:	46bd      	mov	sp, r7
 8107524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107528:	4770      	bx	lr
	...

0810752c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810752c:	b580      	push	{r7, lr}
 810752e:	b084      	sub	sp, #16
 8107530:	af00      	add	r7, sp, #0
 8107532:	60f8      	str	r0, [r7, #12]
 8107534:	460b      	mov	r3, r1
 8107536:	607a      	str	r2, [r7, #4]
 8107538:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810753a:	4b37      	ldr	r3, [pc, #220]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 810753c:	681b      	ldr	r3, [r3, #0]
 810753e:	f023 0201 	bic.w	r2, r3, #1
 8107542:	4935      	ldr	r1, [pc, #212]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107544:	68fb      	ldr	r3, [r7, #12]
 8107546:	4313      	orrs	r3, r2
 8107548:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810754a:	687b      	ldr	r3, [r7, #4]
 810754c:	2b00      	cmp	r3, #0
 810754e:	d123      	bne.n	8107598 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107550:	f7fb fca6 	bl	8102ea0 <HAL_GetCurrentCPUID>
 8107554:	4603      	mov	r3, r0
 8107556:	2b03      	cmp	r3, #3
 8107558:	d158      	bne.n	810760c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810755a:	4b2f      	ldr	r3, [pc, #188]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 810755c:	691b      	ldr	r3, [r3, #16]
 810755e:	4a2e      	ldr	r2, [pc, #184]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107560:	f023 0301 	bic.w	r3, r3, #1
 8107564:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107566:	4b2d      	ldr	r3, [pc, #180]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107568:	691b      	ldr	r3, [r3, #16]
 810756a:	4a2c      	ldr	r2, [pc, #176]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810756c:	f043 0304 	orr.w	r3, r3, #4
 8107570:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107572:	f3bf 8f4f 	dsb	sy
}
 8107576:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107578:	f3bf 8f6f 	isb	sy
}
 810757c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810757e:	7afb      	ldrb	r3, [r7, #11]
 8107580:	2b01      	cmp	r3, #1
 8107582:	d101      	bne.n	8107588 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107584:	bf30      	wfi
 8107586:	e000      	b.n	810758a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107588:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810758a:	4b24      	ldr	r3, [pc, #144]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810758c:	691b      	ldr	r3, [r3, #16]
 810758e:	4a23      	ldr	r2, [pc, #140]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107590:	f023 0304 	bic.w	r3, r3, #4
 8107594:	6113      	str	r3, [r2, #16]
 8107596:	e03c      	b.n	8107612 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8107598:	687b      	ldr	r3, [r7, #4]
 810759a:	2b01      	cmp	r3, #1
 810759c:	d123      	bne.n	81075e6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810759e:	f7fb fc7f 	bl	8102ea0 <HAL_GetCurrentCPUID>
 81075a2:	4603      	mov	r3, r0
 81075a4:	2b01      	cmp	r3, #1
 81075a6:	d133      	bne.n	8107610 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81075a8:	4b1b      	ldr	r3, [pc, #108]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 81075aa:	695b      	ldr	r3, [r3, #20]
 81075ac:	4a1a      	ldr	r2, [pc, #104]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 81075ae:	f023 0302 	bic.w	r3, r3, #2
 81075b2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81075b4:	4b19      	ldr	r3, [pc, #100]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075b6:	691b      	ldr	r3, [r3, #16]
 81075b8:	4a18      	ldr	r2, [pc, #96]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075ba:	f043 0304 	orr.w	r3, r3, #4
 81075be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81075c0:	f3bf 8f4f 	dsb	sy
}
 81075c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81075c6:	f3bf 8f6f 	isb	sy
}
 81075ca:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81075cc:	7afb      	ldrb	r3, [r7, #11]
 81075ce:	2b01      	cmp	r3, #1
 81075d0:	d101      	bne.n	81075d6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81075d2:	bf30      	wfi
 81075d4:	e000      	b.n	81075d8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81075d6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81075d8:	4b10      	ldr	r3, [pc, #64]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075da:	691b      	ldr	r3, [r3, #16]
 81075dc:	4a0f      	ldr	r2, [pc, #60]	; (810761c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075de:	f023 0304 	bic.w	r3, r3, #4
 81075e2:	6113      	str	r3, [r2, #16]
 81075e4:	e015      	b.n	8107612 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81075e6:	f7fb fc5b 	bl	8102ea0 <HAL_GetCurrentCPUID>
 81075ea:	4603      	mov	r3, r0
 81075ec:	2b03      	cmp	r3, #3
 81075ee:	d106      	bne.n	81075fe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81075f0:	4b09      	ldr	r3, [pc, #36]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 81075f2:	691b      	ldr	r3, [r3, #16]
 81075f4:	4a08      	ldr	r2, [pc, #32]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 81075f6:	f023 0304 	bic.w	r3, r3, #4
 81075fa:	6113      	str	r3, [r2, #16]
 81075fc:	e009      	b.n	8107612 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81075fe:	4b06      	ldr	r3, [pc, #24]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107600:	695b      	ldr	r3, [r3, #20]
 8107602:	4a05      	ldr	r2, [pc, #20]	; (8107618 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107604:	f023 0304 	bic.w	r3, r3, #4
 8107608:	6153      	str	r3, [r2, #20]
 810760a:	e002      	b.n	8107612 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810760c:	bf00      	nop
 810760e:	e000      	b.n	8107612 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107610:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107612:	3710      	adds	r7, #16
 8107614:	46bd      	mov	sp, r7
 8107616:	bd80      	pop	{r7, pc}
 8107618:	58024800 	.word	0x58024800
 810761c:	e000ed00 	.word	0xe000ed00

08107620 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107620:	b580      	push	{r7, lr}
 8107622:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107624:	f7fb fc3c 	bl	8102ea0 <HAL_GetCurrentCPUID>
 8107628:	4603      	mov	r3, r0
 810762a:	2b03      	cmp	r3, #3
 810762c:	d101      	bne.n	8107632 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810762e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107630:	e001      	b.n	8107636 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107632:	bf40      	sev
    __WFE ();
 8107634:	bf20      	wfe
}
 8107636:	bf00      	nop
 8107638:	bd80      	pop	{r7, pc}
	...

0810763c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810763c:	b480      	push	{r7}
 810763e:	b089      	sub	sp, #36	; 0x24
 8107640:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107642:	4bb3      	ldr	r3, [pc, #716]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107644:	691b      	ldr	r3, [r3, #16]
 8107646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810764a:	2b18      	cmp	r3, #24
 810764c:	f200 8155 	bhi.w	81078fa <HAL_RCC_GetSysClockFreq+0x2be>
 8107650:	a201      	add	r2, pc, #4	; (adr r2, 8107658 <HAL_RCC_GetSysClockFreq+0x1c>)
 8107652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107656:	bf00      	nop
 8107658:	081076bd 	.word	0x081076bd
 810765c:	081078fb 	.word	0x081078fb
 8107660:	081078fb 	.word	0x081078fb
 8107664:	081078fb 	.word	0x081078fb
 8107668:	081078fb 	.word	0x081078fb
 810766c:	081078fb 	.word	0x081078fb
 8107670:	081078fb 	.word	0x081078fb
 8107674:	081078fb 	.word	0x081078fb
 8107678:	081076e3 	.word	0x081076e3
 810767c:	081078fb 	.word	0x081078fb
 8107680:	081078fb 	.word	0x081078fb
 8107684:	081078fb 	.word	0x081078fb
 8107688:	081078fb 	.word	0x081078fb
 810768c:	081078fb 	.word	0x081078fb
 8107690:	081078fb 	.word	0x081078fb
 8107694:	081078fb 	.word	0x081078fb
 8107698:	081076e9 	.word	0x081076e9
 810769c:	081078fb 	.word	0x081078fb
 81076a0:	081078fb 	.word	0x081078fb
 81076a4:	081078fb 	.word	0x081078fb
 81076a8:	081078fb 	.word	0x081078fb
 81076ac:	081078fb 	.word	0x081078fb
 81076b0:	081078fb 	.word	0x081078fb
 81076b4:	081078fb 	.word	0x081078fb
 81076b8:	081076ef 	.word	0x081076ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81076bc:	4b94      	ldr	r3, [pc, #592]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81076be:	681b      	ldr	r3, [r3, #0]
 81076c0:	f003 0320 	and.w	r3, r3, #32
 81076c4:	2b00      	cmp	r3, #0
 81076c6:	d009      	beq.n	81076dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81076c8:	4b91      	ldr	r3, [pc, #580]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81076ca:	681b      	ldr	r3, [r3, #0]
 81076cc:	08db      	lsrs	r3, r3, #3
 81076ce:	f003 0303 	and.w	r3, r3, #3
 81076d2:	4a90      	ldr	r2, [pc, #576]	; (8107914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81076d4:	fa22 f303 	lsr.w	r3, r2, r3
 81076d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81076da:	e111      	b.n	8107900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81076dc:	4b8d      	ldr	r3, [pc, #564]	; (8107914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81076de:	61bb      	str	r3, [r7, #24]
    break;
 81076e0:	e10e      	b.n	8107900 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81076e2:	4b8d      	ldr	r3, [pc, #564]	; (8107918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81076e4:	61bb      	str	r3, [r7, #24]
    break;
 81076e6:	e10b      	b.n	8107900 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81076e8:	4b8c      	ldr	r3, [pc, #560]	; (810791c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81076ea:	61bb      	str	r3, [r7, #24]
    break;
 81076ec:	e108      	b.n	8107900 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81076ee:	4b88      	ldr	r3, [pc, #544]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81076f2:	f003 0303 	and.w	r3, r3, #3
 81076f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81076f8:	4b85      	ldr	r3, [pc, #532]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81076fc:	091b      	lsrs	r3, r3, #4
 81076fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107702:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8107704:	4b82      	ldr	r3, [pc, #520]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107708:	f003 0301 	and.w	r3, r3, #1
 810770c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810770e:	4b80      	ldr	r3, [pc, #512]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107712:	08db      	lsrs	r3, r3, #3
 8107714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107718:	68fa      	ldr	r2, [r7, #12]
 810771a:	fb02 f303 	mul.w	r3, r2, r3
 810771e:	ee07 3a90 	vmov	s15, r3
 8107722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107726:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810772a:	693b      	ldr	r3, [r7, #16]
 810772c:	2b00      	cmp	r3, #0
 810772e:	f000 80e1 	beq.w	81078f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8107732:	697b      	ldr	r3, [r7, #20]
 8107734:	2b02      	cmp	r3, #2
 8107736:	f000 8083 	beq.w	8107840 <HAL_RCC_GetSysClockFreq+0x204>
 810773a:	697b      	ldr	r3, [r7, #20]
 810773c:	2b02      	cmp	r3, #2
 810773e:	f200 80a1 	bhi.w	8107884 <HAL_RCC_GetSysClockFreq+0x248>
 8107742:	697b      	ldr	r3, [r7, #20]
 8107744:	2b00      	cmp	r3, #0
 8107746:	d003      	beq.n	8107750 <HAL_RCC_GetSysClockFreq+0x114>
 8107748:	697b      	ldr	r3, [r7, #20]
 810774a:	2b01      	cmp	r3, #1
 810774c:	d056      	beq.n	81077fc <HAL_RCC_GetSysClockFreq+0x1c0>
 810774e:	e099      	b.n	8107884 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107750:	4b6f      	ldr	r3, [pc, #444]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107752:	681b      	ldr	r3, [r3, #0]
 8107754:	f003 0320 	and.w	r3, r3, #32
 8107758:	2b00      	cmp	r3, #0
 810775a:	d02d      	beq.n	81077b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810775c:	4b6c      	ldr	r3, [pc, #432]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810775e:	681b      	ldr	r3, [r3, #0]
 8107760:	08db      	lsrs	r3, r3, #3
 8107762:	f003 0303 	and.w	r3, r3, #3
 8107766:	4a6b      	ldr	r2, [pc, #428]	; (8107914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107768:	fa22 f303 	lsr.w	r3, r2, r3
 810776c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810776e:	687b      	ldr	r3, [r7, #4]
 8107770:	ee07 3a90 	vmov	s15, r3
 8107774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107778:	693b      	ldr	r3, [r7, #16]
 810777a:	ee07 3a90 	vmov	s15, r3
 810777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107786:	4b62      	ldr	r3, [pc, #392]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810778e:	ee07 3a90 	vmov	s15, r3
 8107792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107796:	ed97 6a02 	vldr	s12, [r7, #8]
 810779a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8107920 <HAL_RCC_GetSysClockFreq+0x2e4>
 810779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81077b6:	e087      	b.n	81078c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81077b8:	693b      	ldr	r3, [r7, #16]
 81077ba:	ee07 3a90 	vmov	s15, r3
 81077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8107924 <HAL_RCC_GetSysClockFreq+0x2e8>
 81077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077ca:	4b51      	ldr	r3, [pc, #324]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077d2:	ee07 3a90 	vmov	s15, r3
 81077d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077da:	ed97 6a02 	vldr	s12, [r7, #8]
 81077de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8107920 <HAL_RCC_GetSysClockFreq+0x2e4>
 81077e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81077fa:	e065      	b.n	81078c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81077fc:	693b      	ldr	r3, [r7, #16]
 81077fe:	ee07 3a90 	vmov	s15, r3
 8107802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107806:	eddf 6a48 	vldr	s13, [pc, #288]	; 8107928 <HAL_RCC_GetSysClockFreq+0x2ec>
 810780a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810780e:	4b40      	ldr	r3, [pc, #256]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107816:	ee07 3a90 	vmov	s15, r3
 810781a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810781e:	ed97 6a02 	vldr	s12, [r7, #8]
 8107822:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8107920 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810782a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810782e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107836:	ee67 7a27 	vmul.f32	s15, s14, s15
 810783a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810783e:	e043      	b.n	81078c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107840:	693b      	ldr	r3, [r7, #16]
 8107842:	ee07 3a90 	vmov	s15, r3
 8107846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810784a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810792c <HAL_RCC_GetSysClockFreq+0x2f0>
 810784e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107852:	4b2f      	ldr	r3, [pc, #188]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810785a:	ee07 3a90 	vmov	s15, r3
 810785e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107862:	ed97 6a02 	vldr	s12, [r7, #8]
 8107866:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8107920 <HAL_RCC_GetSysClockFreq+0x2e4>
 810786a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810786e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810787a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810787e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107882:	e021      	b.n	81078c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107884:	693b      	ldr	r3, [r7, #16]
 8107886:	ee07 3a90 	vmov	s15, r3
 810788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810788e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8107928 <HAL_RCC_GetSysClockFreq+0x2ec>
 8107892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107896:	4b1e      	ldr	r3, [pc, #120]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810789e:	ee07 3a90 	vmov	s15, r3
 81078a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81078aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8107920 <HAL_RCC_GetSysClockFreq+0x2e4>
 81078ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81078c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81078c8:	4b11      	ldr	r3, [pc, #68]	; (8107910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078cc:	0a5b      	lsrs	r3, r3, #9
 81078ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81078d2:	3301      	adds	r3, #1
 81078d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81078d6:	683b      	ldr	r3, [r7, #0]
 81078d8:	ee07 3a90 	vmov	s15, r3
 81078dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81078e0:	edd7 6a07 	vldr	s13, [r7, #28]
 81078e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81078e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81078ec:	ee17 3a90 	vmov	r3, s15
 81078f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81078f2:	e005      	b.n	8107900 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81078f4:	2300      	movs	r3, #0
 81078f6:	61bb      	str	r3, [r7, #24]
    break;
 81078f8:	e002      	b.n	8107900 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81078fa:	4b07      	ldr	r3, [pc, #28]	; (8107918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81078fc:	61bb      	str	r3, [r7, #24]
    break;
 81078fe:	bf00      	nop
  }

  return sysclockfreq;
 8107900:	69bb      	ldr	r3, [r7, #24]
}
 8107902:	4618      	mov	r0, r3
 8107904:	3724      	adds	r7, #36	; 0x24
 8107906:	46bd      	mov	sp, r7
 8107908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810790c:	4770      	bx	lr
 810790e:	bf00      	nop
 8107910:	58024400 	.word	0x58024400
 8107914:	03d09000 	.word	0x03d09000
 8107918:	003d0900 	.word	0x003d0900
 810791c:	007a1200 	.word	0x007a1200
 8107920:	46000000 	.word	0x46000000
 8107924:	4c742400 	.word	0x4c742400
 8107928:	4a742400 	.word	0x4a742400
 810792c:	4af42400 	.word	0x4af42400

08107930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8107930:	b580      	push	{r7, lr}
 8107932:	b082      	sub	sp, #8
 8107934:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8107936:	f7ff fe81 	bl	810763c <HAL_RCC_GetSysClockFreq>
 810793a:	4602      	mov	r2, r0
 810793c:	4b11      	ldr	r3, [pc, #68]	; (8107984 <HAL_RCC_GetHCLKFreq+0x54>)
 810793e:	699b      	ldr	r3, [r3, #24]
 8107940:	0a1b      	lsrs	r3, r3, #8
 8107942:	f003 030f 	and.w	r3, r3, #15
 8107946:	4910      	ldr	r1, [pc, #64]	; (8107988 <HAL_RCC_GetHCLKFreq+0x58>)
 8107948:	5ccb      	ldrb	r3, [r1, r3]
 810794a:	f003 031f 	and.w	r3, r3, #31
 810794e:	fa22 f303 	lsr.w	r3, r2, r3
 8107952:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8107954:	4b0b      	ldr	r3, [pc, #44]	; (8107984 <HAL_RCC_GetHCLKFreq+0x54>)
 8107956:	699b      	ldr	r3, [r3, #24]
 8107958:	f003 030f 	and.w	r3, r3, #15
 810795c:	4a0a      	ldr	r2, [pc, #40]	; (8107988 <HAL_RCC_GetHCLKFreq+0x58>)
 810795e:	5cd3      	ldrb	r3, [r2, r3]
 8107960:	f003 031f 	and.w	r3, r3, #31
 8107964:	687a      	ldr	r2, [r7, #4]
 8107966:	fa22 f303 	lsr.w	r3, r2, r3
 810796a:	4a08      	ldr	r2, [pc, #32]	; (810798c <HAL_RCC_GetHCLKFreq+0x5c>)
 810796c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810796e:	4b07      	ldr	r3, [pc, #28]	; (810798c <HAL_RCC_GetHCLKFreq+0x5c>)
 8107970:	681b      	ldr	r3, [r3, #0]
 8107972:	4a07      	ldr	r2, [pc, #28]	; (8107990 <HAL_RCC_GetHCLKFreq+0x60>)
 8107974:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8107976:	4b05      	ldr	r3, [pc, #20]	; (810798c <HAL_RCC_GetHCLKFreq+0x5c>)
 8107978:	681b      	ldr	r3, [r3, #0]
}
 810797a:	4618      	mov	r0, r3
 810797c:	3708      	adds	r7, #8
 810797e:	46bd      	mov	sp, r7
 8107980:	bd80      	pop	{r7, pc}
 8107982:	bf00      	nop
 8107984:	58024400 	.word	0x58024400
 8107988:	0811b694 	.word	0x0811b694
 810798c:	10000004 	.word	0x10000004
 8107990:	10000000 	.word	0x10000000

08107994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8107994:	b580      	push	{r7, lr}
 8107996:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8107998:	f7ff ffca 	bl	8107930 <HAL_RCC_GetHCLKFreq>
 810799c:	4602      	mov	r2, r0
 810799e:	4b06      	ldr	r3, [pc, #24]	; (81079b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81079a0:	69db      	ldr	r3, [r3, #28]
 81079a2:	091b      	lsrs	r3, r3, #4
 81079a4:	f003 0307 	and.w	r3, r3, #7
 81079a8:	4904      	ldr	r1, [pc, #16]	; (81079bc <HAL_RCC_GetPCLK1Freq+0x28>)
 81079aa:	5ccb      	ldrb	r3, [r1, r3]
 81079ac:	f003 031f 	and.w	r3, r3, #31
 81079b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81079b4:	4618      	mov	r0, r3
 81079b6:	bd80      	pop	{r7, pc}
 81079b8:	58024400 	.word	0x58024400
 81079bc:	0811b694 	.word	0x0811b694

081079c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81079c0:	b580      	push	{r7, lr}
 81079c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81079c4:	f7ff ffb4 	bl	8107930 <HAL_RCC_GetHCLKFreq>
 81079c8:	4602      	mov	r2, r0
 81079ca:	4b06      	ldr	r3, [pc, #24]	; (81079e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 81079cc:	69db      	ldr	r3, [r3, #28]
 81079ce:	0a1b      	lsrs	r3, r3, #8
 81079d0:	f003 0307 	and.w	r3, r3, #7
 81079d4:	4904      	ldr	r1, [pc, #16]	; (81079e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 81079d6:	5ccb      	ldrb	r3, [r1, r3]
 81079d8:	f003 031f 	and.w	r3, r3, #31
 81079dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81079e0:	4618      	mov	r0, r3
 81079e2:	bd80      	pop	{r7, pc}
 81079e4:	58024400 	.word	0x58024400
 81079e8:	0811b694 	.word	0x0811b694

081079ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81079ec:	b480      	push	{r7}
 81079ee:	b083      	sub	sp, #12
 81079f0:	af00      	add	r7, sp, #0
 81079f2:	6078      	str	r0, [r7, #4]
 81079f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	223f      	movs	r2, #63	; 0x3f
 81079fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81079fc:	4b1a      	ldr	r3, [pc, #104]	; (8107a68 <HAL_RCC_GetClockConfig+0x7c>)
 81079fe:	691b      	ldr	r3, [r3, #16]
 8107a00:	f003 0207 	and.w	r2, r3, #7
 8107a04:	687b      	ldr	r3, [r7, #4]
 8107a06:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8107a08:	4b17      	ldr	r3, [pc, #92]	; (8107a68 <HAL_RCC_GetClockConfig+0x7c>)
 8107a0a:	699b      	ldr	r3, [r3, #24]
 8107a0c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8107a10:	687b      	ldr	r3, [r7, #4]
 8107a12:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8107a14:	4b14      	ldr	r3, [pc, #80]	; (8107a68 <HAL_RCC_GetClockConfig+0x7c>)
 8107a16:	699b      	ldr	r3, [r3, #24]
 8107a18:	f003 020f 	and.w	r2, r3, #15
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8107a20:	4b11      	ldr	r3, [pc, #68]	; (8107a68 <HAL_RCC_GetClockConfig+0x7c>)
 8107a22:	699b      	ldr	r3, [r3, #24]
 8107a24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8107a2c:	4b0e      	ldr	r3, [pc, #56]	; (8107a68 <HAL_RCC_GetClockConfig+0x7c>)
 8107a2e:	69db      	ldr	r3, [r3, #28]
 8107a30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8107a38:	4b0b      	ldr	r3, [pc, #44]	; (8107a68 <HAL_RCC_GetClockConfig+0x7c>)
 8107a3a:	69db      	ldr	r3, [r3, #28]
 8107a3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8107a44:	4b08      	ldr	r3, [pc, #32]	; (8107a68 <HAL_RCC_GetClockConfig+0x7c>)
 8107a46:	6a1b      	ldr	r3, [r3, #32]
 8107a48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8107a50:	4b06      	ldr	r3, [pc, #24]	; (8107a6c <HAL_RCC_GetClockConfig+0x80>)
 8107a52:	681b      	ldr	r3, [r3, #0]
 8107a54:	f003 020f 	and.w	r2, r3, #15
 8107a58:	683b      	ldr	r3, [r7, #0]
 8107a5a:	601a      	str	r2, [r3, #0]
}
 8107a5c:	bf00      	nop
 8107a5e:	370c      	adds	r7, #12
 8107a60:	46bd      	mov	sp, r7
 8107a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a66:	4770      	bx	lr
 8107a68:	58024400 	.word	0x58024400
 8107a6c:	52002000 	.word	0x52002000

08107a70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8107a70:	b580      	push	{r7, lr}
 8107a72:	b086      	sub	sp, #24
 8107a74:	af00      	add	r7, sp, #0
 8107a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8107a78:	2300      	movs	r3, #0
 8107a7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8107a7c:	2300      	movs	r3, #0
 8107a7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	681b      	ldr	r3, [r3, #0]
 8107a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107a88:	2b00      	cmp	r3, #0
 8107a8a:	d03f      	beq.n	8107b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8107a8c:	687b      	ldr	r3, [r7, #4]
 8107a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107a90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107a94:	d02a      	beq.n	8107aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8107a96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107a9a:	d824      	bhi.n	8107ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8107a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107aa0:	d018      	beq.n	8107ad4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8107aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107aa6:	d81e      	bhi.n	8107ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8107aa8:	2b00      	cmp	r3, #0
 8107aaa:	d003      	beq.n	8107ab4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8107aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107ab0:	d007      	beq.n	8107ac2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8107ab2:	e018      	b.n	8107ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107ab4:	4bab      	ldr	r3, [pc, #684]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ab8:	4aaa      	ldr	r2, [pc, #680]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8107ac0:	e015      	b.n	8107aee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	3304      	adds	r3, #4
 8107ac6:	2102      	movs	r1, #2
 8107ac8:	4618      	mov	r0, r3
 8107aca:	f001 fff3 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107ace:	4603      	mov	r3, r0
 8107ad0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8107ad2:	e00c      	b.n	8107aee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8107ad4:	687b      	ldr	r3, [r7, #4]
 8107ad6:	3324      	adds	r3, #36	; 0x24
 8107ad8:	2102      	movs	r1, #2
 8107ada:	4618      	mov	r0, r3
 8107adc:	f002 f89c 	bl	8109c18 <RCCEx_PLL3_Config>
 8107ae0:	4603      	mov	r3, r0
 8107ae2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8107ae4:	e003      	b.n	8107aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107ae6:	2301      	movs	r3, #1
 8107ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8107aea:	e000      	b.n	8107aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8107aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107aee:	7dfb      	ldrb	r3, [r7, #23]
 8107af0:	2b00      	cmp	r3, #0
 8107af2:	d109      	bne.n	8107b08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8107af4:	4b9b      	ldr	r3, [pc, #620]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107b00:	4998      	ldr	r1, [pc, #608]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107b02:	4313      	orrs	r3, r2
 8107b04:	650b      	str	r3, [r1, #80]	; 0x50
 8107b06:	e001      	b.n	8107b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b08:	7dfb      	ldrb	r3, [r7, #23]
 8107b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	681b      	ldr	r3, [r3, #0]
 8107b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107b14:	2b00      	cmp	r3, #0
 8107b16:	d03d      	beq.n	8107b94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8107b18:	687b      	ldr	r3, [r7, #4]
 8107b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b1c:	2b04      	cmp	r3, #4
 8107b1e:	d826      	bhi.n	8107b6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8107b20:	a201      	add	r2, pc, #4	; (adr r2, 8107b28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8107b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b26:	bf00      	nop
 8107b28:	08107b3d 	.word	0x08107b3d
 8107b2c:	08107b4b 	.word	0x08107b4b
 8107b30:	08107b5d 	.word	0x08107b5d
 8107b34:	08107b75 	.word	0x08107b75
 8107b38:	08107b75 	.word	0x08107b75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107b3c:	4b89      	ldr	r3, [pc, #548]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b40:	4a88      	ldr	r2, [pc, #544]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107b48:	e015      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	3304      	adds	r3, #4
 8107b4e:	2100      	movs	r1, #0
 8107b50:	4618      	mov	r0, r3
 8107b52:	f001 ffaf 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107b56:	4603      	mov	r3, r0
 8107b58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107b5a:	e00c      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	3324      	adds	r3, #36	; 0x24
 8107b60:	2100      	movs	r1, #0
 8107b62:	4618      	mov	r0, r3
 8107b64:	f002 f858 	bl	8109c18 <RCCEx_PLL3_Config>
 8107b68:	4603      	mov	r3, r0
 8107b6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107b6c:	e003      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107b6e:	2301      	movs	r3, #1
 8107b70:	75fb      	strb	r3, [r7, #23]
      break;
 8107b72:	e000      	b.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8107b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107b76:	7dfb      	ldrb	r3, [r7, #23]
 8107b78:	2b00      	cmp	r3, #0
 8107b7a:	d109      	bne.n	8107b90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8107b7c:	4b79      	ldr	r3, [pc, #484]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107b80:	f023 0207 	bic.w	r2, r3, #7
 8107b84:	687b      	ldr	r3, [r7, #4]
 8107b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b88:	4976      	ldr	r1, [pc, #472]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107b8a:	4313      	orrs	r3, r2
 8107b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8107b8e:	e001      	b.n	8107b94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b90:	7dfb      	ldrb	r3, [r7, #23]
 8107b92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	681b      	ldr	r3, [r3, #0]
 8107b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8107b9c:	2b00      	cmp	r3, #0
 8107b9e:	d042      	beq.n	8107c26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8107ba0:	687b      	ldr	r3, [r7, #4]
 8107ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107ba8:	d02b      	beq.n	8107c02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8107baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107bae:	d825      	bhi.n	8107bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8107bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8107bb2:	d028      	beq.n	8107c06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8107bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8107bb6:	d821      	bhi.n	8107bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8107bb8:	2b80      	cmp	r3, #128	; 0x80
 8107bba:	d016      	beq.n	8107bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8107bbc:	2b80      	cmp	r3, #128	; 0x80
 8107bbe:	d81d      	bhi.n	8107bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8107bc0:	2b00      	cmp	r3, #0
 8107bc2:	d002      	beq.n	8107bca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8107bc4:	2b40      	cmp	r3, #64	; 0x40
 8107bc6:	d007      	beq.n	8107bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8107bc8:	e018      	b.n	8107bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107bca:	4b66      	ldr	r3, [pc, #408]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bce:	4a65      	ldr	r2, [pc, #404]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8107bd6:	e017      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107bd8:	687b      	ldr	r3, [r7, #4]
 8107bda:	3304      	adds	r3, #4
 8107bdc:	2100      	movs	r1, #0
 8107bde:	4618      	mov	r0, r3
 8107be0:	f001 ff68 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107be4:	4603      	mov	r3, r0
 8107be6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8107be8:	e00e      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	3324      	adds	r3, #36	; 0x24
 8107bee:	2100      	movs	r1, #0
 8107bf0:	4618      	mov	r0, r3
 8107bf2:	f002 f811 	bl	8109c18 <RCCEx_PLL3_Config>
 8107bf6:	4603      	mov	r3, r0
 8107bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8107bfa:	e005      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107bfc:	2301      	movs	r3, #1
 8107bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8107c00:	e002      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8107c02:	bf00      	nop
 8107c04:	e000      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8107c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107c08:	7dfb      	ldrb	r3, [r7, #23]
 8107c0a:	2b00      	cmp	r3, #0
 8107c0c:	d109      	bne.n	8107c22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8107c0e:	4b55      	ldr	r3, [pc, #340]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107c12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8107c16:	687b      	ldr	r3, [r7, #4]
 8107c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107c1a:	4952      	ldr	r1, [pc, #328]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107c1c:	4313      	orrs	r3, r2
 8107c1e:	650b      	str	r3, [r1, #80]	; 0x50
 8107c20:	e001      	b.n	8107c26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107c22:	7dfb      	ldrb	r3, [r7, #23]
 8107c24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	681b      	ldr	r3, [r3, #0]
 8107c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8107c2e:	2b00      	cmp	r3, #0
 8107c30:	d049      	beq.n	8107cc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8107c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107c3c:	d030      	beq.n	8107ca0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8107c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107c42:	d82a      	bhi.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8107c44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107c48:	d02c      	beq.n	8107ca4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8107c4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107c4e:	d824      	bhi.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8107c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107c54:	d018      	beq.n	8107c88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8107c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107c5a:	d81e      	bhi.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8107c5c:	2b00      	cmp	r3, #0
 8107c5e:	d003      	beq.n	8107c68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8107c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107c64:	d007      	beq.n	8107c76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8107c66:	e018      	b.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107c68:	4b3e      	ldr	r3, [pc, #248]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c6c:	4a3d      	ldr	r2, [pc, #244]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107c74:	e017      	b.n	8107ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107c76:	687b      	ldr	r3, [r7, #4]
 8107c78:	3304      	adds	r3, #4
 8107c7a:	2100      	movs	r1, #0
 8107c7c:	4618      	mov	r0, r3
 8107c7e:	f001 ff19 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107c82:	4603      	mov	r3, r0
 8107c84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8107c86:	e00e      	b.n	8107ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8107c88:	687b      	ldr	r3, [r7, #4]
 8107c8a:	3324      	adds	r3, #36	; 0x24
 8107c8c:	2100      	movs	r1, #0
 8107c8e:	4618      	mov	r0, r3
 8107c90:	f001 ffc2 	bl	8109c18 <RCCEx_PLL3_Config>
 8107c94:	4603      	mov	r3, r0
 8107c96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107c98:	e005      	b.n	8107ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8107c9a:	2301      	movs	r3, #1
 8107c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8107c9e:	e002      	b.n	8107ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8107ca0:	bf00      	nop
 8107ca2:	e000      	b.n	8107ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8107ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107ca6:	7dfb      	ldrb	r3, [r7, #23]
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	d10a      	bne.n	8107cc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8107cac:	4b2d      	ldr	r3, [pc, #180]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107cb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8107cba:	492a      	ldr	r1, [pc, #168]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107cbc:	4313      	orrs	r3, r2
 8107cbe:	658b      	str	r3, [r1, #88]	; 0x58
 8107cc0:	e001      	b.n	8107cc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107cc2:	7dfb      	ldrb	r3, [r7, #23]
 8107cc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	681b      	ldr	r3, [r3, #0]
 8107cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107cce:	2b00      	cmp	r3, #0
 8107cd0:	d04c      	beq.n	8107d6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8107cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107cdc:	d030      	beq.n	8107d40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8107cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107ce2:	d82a      	bhi.n	8107d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8107ce4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107ce8:	d02c      	beq.n	8107d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8107cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107cee:	d824      	bhi.n	8107d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8107cf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107cf4:	d018      	beq.n	8107d28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8107cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107cfa:	d81e      	bhi.n	8107d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8107cfc:	2b00      	cmp	r3, #0
 8107cfe:	d003      	beq.n	8107d08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8107d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107d04:	d007      	beq.n	8107d16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8107d06:	e018      	b.n	8107d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107d08:	4b16      	ldr	r3, [pc, #88]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d0c:	4a15      	ldr	r2, [pc, #84]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107d14:	e017      	b.n	8107d46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	3304      	adds	r3, #4
 8107d1a:	2100      	movs	r1, #0
 8107d1c:	4618      	mov	r0, r3
 8107d1e:	f001 fec9 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107d22:	4603      	mov	r3, r0
 8107d24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8107d26:	e00e      	b.n	8107d46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	3324      	adds	r3, #36	; 0x24
 8107d2c:	2100      	movs	r1, #0
 8107d2e:	4618      	mov	r0, r3
 8107d30:	f001 ff72 	bl	8109c18 <RCCEx_PLL3_Config>
 8107d34:	4603      	mov	r3, r0
 8107d36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107d38:	e005      	b.n	8107d46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8107d3a:	2301      	movs	r3, #1
 8107d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8107d3e:	e002      	b.n	8107d46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8107d40:	bf00      	nop
 8107d42:	e000      	b.n	8107d46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8107d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107d46:	7dfb      	ldrb	r3, [r7, #23]
 8107d48:	2b00      	cmp	r3, #0
 8107d4a:	d10d      	bne.n	8107d68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8107d4c:	4b05      	ldr	r3, [pc, #20]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107d50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8107d5a:	4902      	ldr	r1, [pc, #8]	; (8107d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107d5c:	4313      	orrs	r3, r2
 8107d5e:	658b      	str	r3, [r1, #88]	; 0x58
 8107d60:	e004      	b.n	8107d6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8107d62:	bf00      	nop
 8107d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107d68:	7dfb      	ldrb	r3, [r7, #23]
 8107d6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	681b      	ldr	r3, [r3, #0]
 8107d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107d74:	2b00      	cmp	r3, #0
 8107d76:	d032      	beq.n	8107dde <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8107d78:	687b      	ldr	r3, [r7, #4]
 8107d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107d7c:	2b30      	cmp	r3, #48	; 0x30
 8107d7e:	d01c      	beq.n	8107dba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8107d80:	2b30      	cmp	r3, #48	; 0x30
 8107d82:	d817      	bhi.n	8107db4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8107d84:	2b20      	cmp	r3, #32
 8107d86:	d00c      	beq.n	8107da2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8107d88:	2b20      	cmp	r3, #32
 8107d8a:	d813      	bhi.n	8107db4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8107d8c:	2b00      	cmp	r3, #0
 8107d8e:	d016      	beq.n	8107dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8107d90:	2b10      	cmp	r3, #16
 8107d92:	d10f      	bne.n	8107db4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107d94:	4baf      	ldr	r3, [pc, #700]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d98:	4aae      	ldr	r2, [pc, #696]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8107da0:	e00e      	b.n	8107dc0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	3304      	adds	r3, #4
 8107da6:	2102      	movs	r1, #2
 8107da8:	4618      	mov	r0, r3
 8107daa:	f001 fe83 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107dae:	4603      	mov	r3, r0
 8107db0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8107db2:	e005      	b.n	8107dc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8107db4:	2301      	movs	r3, #1
 8107db6:	75fb      	strb	r3, [r7, #23]
      break;
 8107db8:	e002      	b.n	8107dc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8107dba:	bf00      	nop
 8107dbc:	e000      	b.n	8107dc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8107dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107dc0:	7dfb      	ldrb	r3, [r7, #23]
 8107dc2:	2b00      	cmp	r3, #0
 8107dc4:	d109      	bne.n	8107dda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8107dc6:	4ba3      	ldr	r3, [pc, #652]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107dca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107dd2:	49a0      	ldr	r1, [pc, #640]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107dd4:	4313      	orrs	r3, r2
 8107dd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8107dd8:	e001      	b.n	8107dde <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107dda:	7dfb      	ldrb	r3, [r7, #23]
 8107ddc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8107de6:	2b00      	cmp	r3, #0
 8107de8:	d047      	beq.n	8107e7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107df2:	d030      	beq.n	8107e56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8107df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107df8:	d82a      	bhi.n	8107e50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8107dfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107dfe:	d02c      	beq.n	8107e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8107e00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107e04:	d824      	bhi.n	8107e50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8107e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107e0a:	d018      	beq.n	8107e3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8107e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107e10:	d81e      	bhi.n	8107e50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8107e12:	2b00      	cmp	r3, #0
 8107e14:	d003      	beq.n	8107e1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8107e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107e1a:	d007      	beq.n	8107e2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8107e1c:	e018      	b.n	8107e50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107e1e:	4b8d      	ldr	r3, [pc, #564]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e22:	4a8c      	ldr	r2, [pc, #560]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8107e2a:	e017      	b.n	8107e5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	3304      	adds	r3, #4
 8107e30:	2100      	movs	r1, #0
 8107e32:	4618      	mov	r0, r3
 8107e34:	f001 fe3e 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107e38:	4603      	mov	r3, r0
 8107e3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8107e3c:	e00e      	b.n	8107e5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	3324      	adds	r3, #36	; 0x24
 8107e42:	2100      	movs	r1, #0
 8107e44:	4618      	mov	r0, r3
 8107e46:	f001 fee7 	bl	8109c18 <RCCEx_PLL3_Config>
 8107e4a:	4603      	mov	r3, r0
 8107e4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8107e4e:	e005      	b.n	8107e5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107e50:	2301      	movs	r3, #1
 8107e52:	75fb      	strb	r3, [r7, #23]
      break;
 8107e54:	e002      	b.n	8107e5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8107e56:	bf00      	nop
 8107e58:	e000      	b.n	8107e5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8107e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107e5c:	7dfb      	ldrb	r3, [r7, #23]
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	d109      	bne.n	8107e76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8107e62:	4b7c      	ldr	r3, [pc, #496]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107e66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8107e6a:	687b      	ldr	r3, [r7, #4]
 8107e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107e6e:	4979      	ldr	r1, [pc, #484]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107e70:	4313      	orrs	r3, r2
 8107e72:	650b      	str	r3, [r1, #80]	; 0x50
 8107e74:	e001      	b.n	8107e7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107e76:	7dfb      	ldrb	r3, [r7, #23]
 8107e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8107e7a:	687b      	ldr	r3, [r7, #4]
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8107e82:	2b00      	cmp	r3, #0
 8107e84:	d049      	beq.n	8107f1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8107e8e:	d02e      	beq.n	8107eee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8107e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8107e94:	d828      	bhi.n	8107ee8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107e96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107e9a:	d02a      	beq.n	8107ef2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8107e9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107ea0:	d822      	bhi.n	8107ee8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107ea6:	d026      	beq.n	8107ef6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8107ea8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107eac:	d81c      	bhi.n	8107ee8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107eb2:	d010      	beq.n	8107ed6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8107eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107eb8:	d816      	bhi.n	8107ee8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107eba:	2b00      	cmp	r3, #0
 8107ebc:	d01d      	beq.n	8107efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8107ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107ec2:	d111      	bne.n	8107ee8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	3304      	adds	r3, #4
 8107ec8:	2101      	movs	r1, #1
 8107eca:	4618      	mov	r0, r3
 8107ecc:	f001 fdf2 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107ed0:	4603      	mov	r3, r0
 8107ed2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8107ed4:	e012      	b.n	8107efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8107ed6:	687b      	ldr	r3, [r7, #4]
 8107ed8:	3324      	adds	r3, #36	; 0x24
 8107eda:	2101      	movs	r1, #1
 8107edc:	4618      	mov	r0, r3
 8107ede:	f001 fe9b 	bl	8109c18 <RCCEx_PLL3_Config>
 8107ee2:	4603      	mov	r3, r0
 8107ee4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8107ee6:	e009      	b.n	8107efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107ee8:	2301      	movs	r3, #1
 8107eea:	75fb      	strb	r3, [r7, #23]
      break;
 8107eec:	e006      	b.n	8107efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107eee:	bf00      	nop
 8107ef0:	e004      	b.n	8107efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107ef2:	bf00      	nop
 8107ef4:	e002      	b.n	8107efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107ef6:	bf00      	nop
 8107ef8:	e000      	b.n	8107efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107efc:	7dfb      	ldrb	r3, [r7, #23]
 8107efe:	2b00      	cmp	r3, #0
 8107f00:	d109      	bne.n	8107f16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8107f02:	4b54      	ldr	r3, [pc, #336]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107f06:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107f0e:	4951      	ldr	r1, [pc, #324]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107f10:	4313      	orrs	r3, r2
 8107f12:	650b      	str	r3, [r1, #80]	; 0x50
 8107f14:	e001      	b.n	8107f1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107f16:	7dfb      	ldrb	r3, [r7, #23]
 8107f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8107f1a:	687b      	ldr	r3, [r7, #4]
 8107f1c:	681b      	ldr	r3, [r3, #0]
 8107f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8107f22:	2b00      	cmp	r3, #0
 8107f24:	d04b      	beq.n	8107fbe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8107f26:	687b      	ldr	r3, [r7, #4]
 8107f28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8107f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107f30:	d02e      	beq.n	8107f90 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8107f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107f36:	d828      	bhi.n	8107f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8107f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107f3c:	d02a      	beq.n	8107f94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8107f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107f42:	d822      	bhi.n	8107f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8107f44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107f48:	d026      	beq.n	8107f98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8107f4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107f4e:	d81c      	bhi.n	8107f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8107f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107f54:	d010      	beq.n	8107f78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8107f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107f5a:	d816      	bhi.n	8107f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8107f5c:	2b00      	cmp	r3, #0
 8107f5e:	d01d      	beq.n	8107f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8107f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107f64:	d111      	bne.n	8107f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8107f66:	687b      	ldr	r3, [r7, #4]
 8107f68:	3304      	adds	r3, #4
 8107f6a:	2101      	movs	r1, #1
 8107f6c:	4618      	mov	r0, r3
 8107f6e:	f001 fda1 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107f72:	4603      	mov	r3, r0
 8107f74:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8107f76:	e012      	b.n	8107f9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	3324      	adds	r3, #36	; 0x24
 8107f7c:	2101      	movs	r1, #1
 8107f7e:	4618      	mov	r0, r3
 8107f80:	f001 fe4a 	bl	8109c18 <RCCEx_PLL3_Config>
 8107f84:	4603      	mov	r3, r0
 8107f86:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8107f88:	e009      	b.n	8107f9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8107f8a:	2301      	movs	r3, #1
 8107f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8107f8e:	e006      	b.n	8107f9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8107f90:	bf00      	nop
 8107f92:	e004      	b.n	8107f9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8107f94:	bf00      	nop
 8107f96:	e002      	b.n	8107f9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8107f98:	bf00      	nop
 8107f9a:	e000      	b.n	8107f9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8107f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107f9e:	7dfb      	ldrb	r3, [r7, #23]
 8107fa0:	2b00      	cmp	r3, #0
 8107fa2:	d10a      	bne.n	8107fba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8107fa4:	4b2b      	ldr	r3, [pc, #172]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107fa8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8107fac:	687b      	ldr	r3, [r7, #4]
 8107fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8107fb2:	4928      	ldr	r1, [pc, #160]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107fb4:	4313      	orrs	r3, r2
 8107fb6:	658b      	str	r3, [r1, #88]	; 0x58
 8107fb8:	e001      	b.n	8107fbe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107fba:	7dfb      	ldrb	r3, [r7, #23]
 8107fbc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8107fbe:	687b      	ldr	r3, [r7, #4]
 8107fc0:	681b      	ldr	r3, [r3, #0]
 8107fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107fc6:	2b00      	cmp	r3, #0
 8107fc8:	d02f      	beq.n	810802a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8107fca:	687b      	ldr	r3, [r7, #4]
 8107fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107fd2:	d00e      	beq.n	8107ff2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8107fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107fd8:	d814      	bhi.n	8108004 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8107fda:	2b00      	cmp	r3, #0
 8107fdc:	d015      	beq.n	810800a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8107fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107fe2:	d10f      	bne.n	8108004 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107fe4:	4b1b      	ldr	r3, [pc, #108]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fe8:	4a1a      	ldr	r2, [pc, #104]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8107ff0:	e00c      	b.n	810800c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8107ff2:	687b      	ldr	r3, [r7, #4]
 8107ff4:	3304      	adds	r3, #4
 8107ff6:	2101      	movs	r1, #1
 8107ff8:	4618      	mov	r0, r3
 8107ffa:	f001 fd5b 	bl	8109ab4 <RCCEx_PLL2_Config>
 8107ffe:	4603      	mov	r3, r0
 8108000:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8108002:	e003      	b.n	810800c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108004:	2301      	movs	r3, #1
 8108006:	75fb      	strb	r3, [r7, #23]
      break;
 8108008:	e000      	b.n	810800c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810800a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810800c:	7dfb      	ldrb	r3, [r7, #23]
 810800e:	2b00      	cmp	r3, #0
 8108010:	d109      	bne.n	8108026 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8108012:	4b10      	ldr	r3, [pc, #64]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810801e:	490d      	ldr	r1, [pc, #52]	; (8108054 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108020:	4313      	orrs	r3, r2
 8108022:	650b      	str	r3, [r1, #80]	; 0x50
 8108024:	e001      	b.n	810802a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108026:	7dfb      	ldrb	r3, [r7, #23]
 8108028:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	681b      	ldr	r3, [r3, #0]
 810802e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108032:	2b00      	cmp	r3, #0
 8108034:	d033      	beq.n	810809e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810803a:	2b03      	cmp	r3, #3
 810803c:	d81c      	bhi.n	8108078 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810803e:	a201      	add	r2, pc, #4	; (adr r2, 8108044 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8108040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108044:	0810807f 	.word	0x0810807f
 8108048:	08108059 	.word	0x08108059
 810804c:	08108067 	.word	0x08108067
 8108050:	0810807f 	.word	0x0810807f
 8108054:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108058:	4bb9      	ldr	r3, [pc, #740]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810805c:	4ab8      	ldr	r2, [pc, #736]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810805e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8108064:	e00c      	b.n	8108080 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	3304      	adds	r3, #4
 810806a:	2102      	movs	r1, #2
 810806c:	4618      	mov	r0, r3
 810806e:	f001 fd21 	bl	8109ab4 <RCCEx_PLL2_Config>
 8108072:	4603      	mov	r3, r0
 8108074:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8108076:	e003      	b.n	8108080 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8108078:	2301      	movs	r3, #1
 810807a:	75fb      	strb	r3, [r7, #23]
      break;
 810807c:	e000      	b.n	8108080 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810807e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108080:	7dfb      	ldrb	r3, [r7, #23]
 8108082:	2b00      	cmp	r3, #0
 8108084:	d109      	bne.n	810809a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8108086:	4bae      	ldr	r3, [pc, #696]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810808a:	f023 0203 	bic.w	r2, r3, #3
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108092:	49ab      	ldr	r1, [pc, #684]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108094:	4313      	orrs	r3, r2
 8108096:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108098:	e001      	b.n	810809e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810809a:	7dfb      	ldrb	r3, [r7, #23]
 810809c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	681b      	ldr	r3, [r3, #0]
 81080a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81080a6:	2b00      	cmp	r3, #0
 81080a8:	f000 8088 	beq.w	81081bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81080ac:	4ba5      	ldr	r3, [pc, #660]	; (8108344 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81080ae:	681b      	ldr	r3, [r3, #0]
 81080b0:	4aa4      	ldr	r2, [pc, #656]	; (8108344 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81080b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81080b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81080b8:	f7f9 f9ba 	bl	8101430 <HAL_GetTick>
 81080bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81080be:	e009      	b.n	81080d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81080c0:	f7f9 f9b6 	bl	8101430 <HAL_GetTick>
 81080c4:	4602      	mov	r2, r0
 81080c6:	693b      	ldr	r3, [r7, #16]
 81080c8:	1ad3      	subs	r3, r2, r3
 81080ca:	2b64      	cmp	r3, #100	; 0x64
 81080cc:	d902      	bls.n	81080d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81080ce:	2303      	movs	r3, #3
 81080d0:	75fb      	strb	r3, [r7, #23]
        break;
 81080d2:	e005      	b.n	81080e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81080d4:	4b9b      	ldr	r3, [pc, #620]	; (8108344 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81080d6:	681b      	ldr	r3, [r3, #0]
 81080d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81080dc:	2b00      	cmp	r3, #0
 81080de:	d0ef      	beq.n	81080c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81080e0:	7dfb      	ldrb	r3, [r7, #23]
 81080e2:	2b00      	cmp	r3, #0
 81080e4:	d168      	bne.n	81081b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81080e6:	4b96      	ldr	r3, [pc, #600]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81080e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81080f0:	4053      	eors	r3, r2
 81080f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81080f6:	2b00      	cmp	r3, #0
 81080f8:	d013      	beq.n	8108122 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81080fa:	4b91      	ldr	r3, [pc, #580]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81080fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108102:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8108104:	4b8e      	ldr	r3, [pc, #568]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108108:	4a8d      	ldr	r2, [pc, #564]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810810a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810810e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8108110:	4b8b      	ldr	r3, [pc, #556]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108114:	4a8a      	ldr	r2, [pc, #552]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810811a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810811c:	4a88      	ldr	r2, [pc, #544]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810811e:	68fb      	ldr	r3, [r7, #12]
 8108120:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810812c:	d115      	bne.n	810815a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810812e:	f7f9 f97f 	bl	8101430 <HAL_GetTick>
 8108132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108134:	e00b      	b.n	810814e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8108136:	f7f9 f97b 	bl	8101430 <HAL_GetTick>
 810813a:	4602      	mov	r2, r0
 810813c:	693b      	ldr	r3, [r7, #16]
 810813e:	1ad3      	subs	r3, r2, r3
 8108140:	f241 3288 	movw	r2, #5000	; 0x1388
 8108144:	4293      	cmp	r3, r2
 8108146:	d902      	bls.n	810814e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8108148:	2303      	movs	r3, #3
 810814a:	75fb      	strb	r3, [r7, #23]
            break;
 810814c:	e005      	b.n	810815a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810814e:	4b7c      	ldr	r3, [pc, #496]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108152:	f003 0302 	and.w	r3, r3, #2
 8108156:	2b00      	cmp	r3, #0
 8108158:	d0ed      	beq.n	8108136 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810815a:	7dfb      	ldrb	r3, [r7, #23]
 810815c:	2b00      	cmp	r3, #0
 810815e:	d128      	bne.n	81081b2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8108160:	687b      	ldr	r3, [r7, #4]
 8108162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810816a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810816e:	d10f      	bne.n	8108190 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8108170:	4b73      	ldr	r3, [pc, #460]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108172:	691b      	ldr	r3, [r3, #16]
 8108174:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8108178:	687b      	ldr	r3, [r7, #4]
 810817a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810817e:	091b      	lsrs	r3, r3, #4
 8108180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8108184:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8108188:	496d      	ldr	r1, [pc, #436]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810818a:	4313      	orrs	r3, r2
 810818c:	610b      	str	r3, [r1, #16]
 810818e:	e005      	b.n	810819c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8108190:	4b6b      	ldr	r3, [pc, #428]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108192:	691b      	ldr	r3, [r3, #16]
 8108194:	4a6a      	ldr	r2, [pc, #424]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108196:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810819a:	6113      	str	r3, [r2, #16]
 810819c:	4b68      	ldr	r3, [pc, #416]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810819e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81081a0:	687b      	ldr	r3, [r7, #4]
 81081a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81081a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81081aa:	4965      	ldr	r1, [pc, #404]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81081ac:	4313      	orrs	r3, r2
 81081ae:	670b      	str	r3, [r1, #112]	; 0x70
 81081b0:	e004      	b.n	81081bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81081b2:	7dfb      	ldrb	r3, [r7, #23]
 81081b4:	75bb      	strb	r3, [r7, #22]
 81081b6:	e001      	b.n	81081bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81081b8:	7dfb      	ldrb	r3, [r7, #23]
 81081ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81081bc:	687b      	ldr	r3, [r7, #4]
 81081be:	681b      	ldr	r3, [r3, #0]
 81081c0:	f003 0301 	and.w	r3, r3, #1
 81081c4:	2b00      	cmp	r3, #0
 81081c6:	d07e      	beq.n	81082c6 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81081cc:	2b28      	cmp	r3, #40	; 0x28
 81081ce:	d867      	bhi.n	81082a0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81081d0:	a201      	add	r2, pc, #4	; (adr r2, 81081d8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081d6:	bf00      	nop
 81081d8:	081082a7 	.word	0x081082a7
 81081dc:	081082a1 	.word	0x081082a1
 81081e0:	081082a1 	.word	0x081082a1
 81081e4:	081082a1 	.word	0x081082a1
 81081e8:	081082a1 	.word	0x081082a1
 81081ec:	081082a1 	.word	0x081082a1
 81081f0:	081082a1 	.word	0x081082a1
 81081f4:	081082a1 	.word	0x081082a1
 81081f8:	0810827d 	.word	0x0810827d
 81081fc:	081082a1 	.word	0x081082a1
 8108200:	081082a1 	.word	0x081082a1
 8108204:	081082a1 	.word	0x081082a1
 8108208:	081082a1 	.word	0x081082a1
 810820c:	081082a1 	.word	0x081082a1
 8108210:	081082a1 	.word	0x081082a1
 8108214:	081082a1 	.word	0x081082a1
 8108218:	0810828f 	.word	0x0810828f
 810821c:	081082a1 	.word	0x081082a1
 8108220:	081082a1 	.word	0x081082a1
 8108224:	081082a1 	.word	0x081082a1
 8108228:	081082a1 	.word	0x081082a1
 810822c:	081082a1 	.word	0x081082a1
 8108230:	081082a1 	.word	0x081082a1
 8108234:	081082a1 	.word	0x081082a1
 8108238:	081082a7 	.word	0x081082a7
 810823c:	081082a1 	.word	0x081082a1
 8108240:	081082a1 	.word	0x081082a1
 8108244:	081082a1 	.word	0x081082a1
 8108248:	081082a1 	.word	0x081082a1
 810824c:	081082a1 	.word	0x081082a1
 8108250:	081082a1 	.word	0x081082a1
 8108254:	081082a1 	.word	0x081082a1
 8108258:	081082a7 	.word	0x081082a7
 810825c:	081082a1 	.word	0x081082a1
 8108260:	081082a1 	.word	0x081082a1
 8108264:	081082a1 	.word	0x081082a1
 8108268:	081082a1 	.word	0x081082a1
 810826c:	081082a1 	.word	0x081082a1
 8108270:	081082a1 	.word	0x081082a1
 8108274:	081082a1 	.word	0x081082a1
 8108278:	081082a7 	.word	0x081082a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810827c:	687b      	ldr	r3, [r7, #4]
 810827e:	3304      	adds	r3, #4
 8108280:	2101      	movs	r1, #1
 8108282:	4618      	mov	r0, r3
 8108284:	f001 fc16 	bl	8109ab4 <RCCEx_PLL2_Config>
 8108288:	4603      	mov	r3, r0
 810828a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810828c:	e00c      	b.n	81082a8 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810828e:	687b      	ldr	r3, [r7, #4]
 8108290:	3324      	adds	r3, #36	; 0x24
 8108292:	2101      	movs	r1, #1
 8108294:	4618      	mov	r0, r3
 8108296:	f001 fcbf 	bl	8109c18 <RCCEx_PLL3_Config>
 810829a:	4603      	mov	r3, r0
 810829c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810829e:	e003      	b.n	81082a8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81082a0:	2301      	movs	r3, #1
 81082a2:	75fb      	strb	r3, [r7, #23]
      break;
 81082a4:	e000      	b.n	81082a8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81082a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81082a8:	7dfb      	ldrb	r3, [r7, #23]
 81082aa:	2b00      	cmp	r3, #0
 81082ac:	d109      	bne.n	81082c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81082ae:	4b24      	ldr	r3, [pc, #144]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81082ba:	4921      	ldr	r1, [pc, #132]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81082bc:	4313      	orrs	r3, r2
 81082be:	654b      	str	r3, [r1, #84]	; 0x54
 81082c0:	e001      	b.n	81082c6 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81082c2:	7dfb      	ldrb	r3, [r7, #23]
 81082c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	681b      	ldr	r3, [r3, #0]
 81082ca:	f003 0302 	and.w	r3, r3, #2
 81082ce:	2b00      	cmp	r3, #0
 81082d0:	d03c      	beq.n	810834c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81082d2:	687b      	ldr	r3, [r7, #4]
 81082d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81082d6:	2b05      	cmp	r3, #5
 81082d8:	d820      	bhi.n	810831c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81082da:	a201      	add	r2, pc, #4	; (adr r2, 81082e0 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81082dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082e0:	08108323 	.word	0x08108323
 81082e4:	081082f9 	.word	0x081082f9
 81082e8:	0810830b 	.word	0x0810830b
 81082ec:	08108323 	.word	0x08108323
 81082f0:	08108323 	.word	0x08108323
 81082f4:	08108323 	.word	0x08108323
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	3304      	adds	r3, #4
 81082fc:	2101      	movs	r1, #1
 81082fe:	4618      	mov	r0, r3
 8108300:	f001 fbd8 	bl	8109ab4 <RCCEx_PLL2_Config>
 8108304:	4603      	mov	r3, r0
 8108306:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8108308:	e00c      	b.n	8108324 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	3324      	adds	r3, #36	; 0x24
 810830e:	2101      	movs	r1, #1
 8108310:	4618      	mov	r0, r3
 8108312:	f001 fc81 	bl	8109c18 <RCCEx_PLL3_Config>
 8108316:	4603      	mov	r3, r0
 8108318:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810831a:	e003      	b.n	8108324 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810831c:	2301      	movs	r3, #1
 810831e:	75fb      	strb	r3, [r7, #23]
      break;
 8108320:	e000      	b.n	8108324 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8108322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108324:	7dfb      	ldrb	r3, [r7, #23]
 8108326:	2b00      	cmp	r3, #0
 8108328:	d10e      	bne.n	8108348 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810832a:	4b05      	ldr	r3, [pc, #20]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810832c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810832e:	f023 0207 	bic.w	r2, r3, #7
 8108332:	687b      	ldr	r3, [r7, #4]
 8108334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108336:	4902      	ldr	r1, [pc, #8]	; (8108340 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108338:	4313      	orrs	r3, r2
 810833a:	654b      	str	r3, [r1, #84]	; 0x54
 810833c:	e006      	b.n	810834c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810833e:	bf00      	nop
 8108340:	58024400 	.word	0x58024400
 8108344:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108348:	7dfb      	ldrb	r3, [r7, #23]
 810834a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	681b      	ldr	r3, [r3, #0]
 8108350:	f003 0304 	and.w	r3, r3, #4
 8108354:	2b00      	cmp	r3, #0
 8108356:	d039      	beq.n	81083cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810835e:	2b05      	cmp	r3, #5
 8108360:	d820      	bhi.n	81083a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8108362:	a201      	add	r2, pc, #4	; (adr r2, 8108368 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8108364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108368:	081083ab 	.word	0x081083ab
 810836c:	08108381 	.word	0x08108381
 8108370:	08108393 	.word	0x08108393
 8108374:	081083ab 	.word	0x081083ab
 8108378:	081083ab 	.word	0x081083ab
 810837c:	081083ab 	.word	0x081083ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108380:	687b      	ldr	r3, [r7, #4]
 8108382:	3304      	adds	r3, #4
 8108384:	2101      	movs	r1, #1
 8108386:	4618      	mov	r0, r3
 8108388:	f001 fb94 	bl	8109ab4 <RCCEx_PLL2_Config>
 810838c:	4603      	mov	r3, r0
 810838e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8108390:	e00c      	b.n	81083ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	3324      	adds	r3, #36	; 0x24
 8108396:	2101      	movs	r1, #1
 8108398:	4618      	mov	r0, r3
 810839a:	f001 fc3d 	bl	8109c18 <RCCEx_PLL3_Config>
 810839e:	4603      	mov	r3, r0
 81083a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81083a2:	e003      	b.n	81083ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81083a4:	2301      	movs	r3, #1
 81083a6:	75fb      	strb	r3, [r7, #23]
      break;
 81083a8:	e000      	b.n	81083ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81083aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81083ac:	7dfb      	ldrb	r3, [r7, #23]
 81083ae:	2b00      	cmp	r3, #0
 81083b0:	d10a      	bne.n	81083c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81083b2:	4bb7      	ldr	r3, [pc, #732]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81083b6:	f023 0207 	bic.w	r2, r3, #7
 81083ba:	687b      	ldr	r3, [r7, #4]
 81083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81083c0:	49b3      	ldr	r1, [pc, #716]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81083c2:	4313      	orrs	r3, r2
 81083c4:	658b      	str	r3, [r1, #88]	; 0x58
 81083c6:	e001      	b.n	81083cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81083c8:	7dfb      	ldrb	r3, [r7, #23]
 81083ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81083cc:	687b      	ldr	r3, [r7, #4]
 81083ce:	681b      	ldr	r3, [r3, #0]
 81083d0:	f003 0320 	and.w	r3, r3, #32
 81083d4:	2b00      	cmp	r3, #0
 81083d6:	d04b      	beq.n	8108470 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81083de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81083e2:	d02e      	beq.n	8108442 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 81083e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81083e8:	d828      	bhi.n	810843c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81083ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81083ee:	d02a      	beq.n	8108446 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81083f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81083f4:	d822      	bhi.n	810843c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81083f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81083fa:	d026      	beq.n	810844a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81083fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108400:	d81c      	bhi.n	810843c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108406:	d010      	beq.n	810842a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8108408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810840c:	d816      	bhi.n	810843c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810840e:	2b00      	cmp	r3, #0
 8108410:	d01d      	beq.n	810844e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8108412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108416:	d111      	bne.n	810843c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108418:	687b      	ldr	r3, [r7, #4]
 810841a:	3304      	adds	r3, #4
 810841c:	2100      	movs	r1, #0
 810841e:	4618      	mov	r0, r3
 8108420:	f001 fb48 	bl	8109ab4 <RCCEx_PLL2_Config>
 8108424:	4603      	mov	r3, r0
 8108426:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8108428:	e012      	b.n	8108450 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810842a:	687b      	ldr	r3, [r7, #4]
 810842c:	3324      	adds	r3, #36	; 0x24
 810842e:	2102      	movs	r1, #2
 8108430:	4618      	mov	r0, r3
 8108432:	f001 fbf1 	bl	8109c18 <RCCEx_PLL3_Config>
 8108436:	4603      	mov	r3, r0
 8108438:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810843a:	e009      	b.n	8108450 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810843c:	2301      	movs	r3, #1
 810843e:	75fb      	strb	r3, [r7, #23]
      break;
 8108440:	e006      	b.n	8108450 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8108442:	bf00      	nop
 8108444:	e004      	b.n	8108450 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8108446:	bf00      	nop
 8108448:	e002      	b.n	8108450 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810844a:	bf00      	nop
 810844c:	e000      	b.n	8108450 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810844e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108450:	7dfb      	ldrb	r3, [r7, #23]
 8108452:	2b00      	cmp	r3, #0
 8108454:	d10a      	bne.n	810846c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8108456:	4b8e      	ldr	r3, [pc, #568]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810845a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810845e:	687b      	ldr	r3, [r7, #4]
 8108460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108464:	498a      	ldr	r1, [pc, #552]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108466:	4313      	orrs	r3, r2
 8108468:	654b      	str	r3, [r1, #84]	; 0x54
 810846a:	e001      	b.n	8108470 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810846c:	7dfb      	ldrb	r3, [r7, #23]
 810846e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8108470:	687b      	ldr	r3, [r7, #4]
 8108472:	681b      	ldr	r3, [r3, #0]
 8108474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108478:	2b00      	cmp	r3, #0
 810847a:	d04b      	beq.n	8108514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8108482:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8108486:	d02e      	beq.n	81084e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8108488:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810848c:	d828      	bhi.n	81084e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810848e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108492:	d02a      	beq.n	81084ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8108494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108498:	d822      	bhi.n	81084e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810849a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810849e:	d026      	beq.n	81084ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81084a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81084a4:	d81c      	bhi.n	81084e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81084a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81084aa:	d010      	beq.n	81084ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81084ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81084b0:	d816      	bhi.n	81084e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81084b2:	2b00      	cmp	r3, #0
 81084b4:	d01d      	beq.n	81084f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81084b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81084ba:	d111      	bne.n	81084e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	3304      	adds	r3, #4
 81084c0:	2100      	movs	r1, #0
 81084c2:	4618      	mov	r0, r3
 81084c4:	f001 faf6 	bl	8109ab4 <RCCEx_PLL2_Config>
 81084c8:	4603      	mov	r3, r0
 81084ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81084cc:	e012      	b.n	81084f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81084ce:	687b      	ldr	r3, [r7, #4]
 81084d0:	3324      	adds	r3, #36	; 0x24
 81084d2:	2102      	movs	r1, #2
 81084d4:	4618      	mov	r0, r3
 81084d6:	f001 fb9f 	bl	8109c18 <RCCEx_PLL3_Config>
 81084da:	4603      	mov	r3, r0
 81084dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81084de:	e009      	b.n	81084f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81084e0:	2301      	movs	r3, #1
 81084e2:	75fb      	strb	r3, [r7, #23]
      break;
 81084e4:	e006      	b.n	81084f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81084e6:	bf00      	nop
 81084e8:	e004      	b.n	81084f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81084ea:	bf00      	nop
 81084ec:	e002      	b.n	81084f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81084ee:	bf00      	nop
 81084f0:	e000      	b.n	81084f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81084f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81084f4:	7dfb      	ldrb	r3, [r7, #23]
 81084f6:	2b00      	cmp	r3, #0
 81084f8:	d10a      	bne.n	8108510 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81084fa:	4b65      	ldr	r3, [pc, #404]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81084fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8108508:	4961      	ldr	r1, [pc, #388]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810850a:	4313      	orrs	r3, r2
 810850c:	658b      	str	r3, [r1, #88]	; 0x58
 810850e:	e001      	b.n	8108514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108510:	7dfb      	ldrb	r3, [r7, #23]
 8108512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	681b      	ldr	r3, [r3, #0]
 8108518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810851c:	2b00      	cmp	r3, #0
 810851e:	d04b      	beq.n	81085b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8108520:	687b      	ldr	r3, [r7, #4]
 8108522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8108526:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810852a:	d02e      	beq.n	810858a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810852c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8108530:	d828      	bhi.n	8108584 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8108532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108536:	d02a      	beq.n	810858e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8108538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810853c:	d822      	bhi.n	8108584 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810853e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8108542:	d026      	beq.n	8108592 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8108544:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8108548:	d81c      	bhi.n	8108584 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810854a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810854e:	d010      	beq.n	8108572 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8108550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108554:	d816      	bhi.n	8108584 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8108556:	2b00      	cmp	r3, #0
 8108558:	d01d      	beq.n	8108596 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810855a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810855e:	d111      	bne.n	8108584 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108560:	687b      	ldr	r3, [r7, #4]
 8108562:	3304      	adds	r3, #4
 8108564:	2100      	movs	r1, #0
 8108566:	4618      	mov	r0, r3
 8108568:	f001 faa4 	bl	8109ab4 <RCCEx_PLL2_Config>
 810856c:	4603      	mov	r3, r0
 810856e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8108570:	e012      	b.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108572:	687b      	ldr	r3, [r7, #4]
 8108574:	3324      	adds	r3, #36	; 0x24
 8108576:	2102      	movs	r1, #2
 8108578:	4618      	mov	r0, r3
 810857a:	f001 fb4d 	bl	8109c18 <RCCEx_PLL3_Config>
 810857e:	4603      	mov	r3, r0
 8108580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8108582:	e009      	b.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108584:	2301      	movs	r3, #1
 8108586:	75fb      	strb	r3, [r7, #23]
      break;
 8108588:	e006      	b.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810858a:	bf00      	nop
 810858c:	e004      	b.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810858e:	bf00      	nop
 8108590:	e002      	b.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8108592:	bf00      	nop
 8108594:	e000      	b.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8108596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108598:	7dfb      	ldrb	r3, [r7, #23]
 810859a:	2b00      	cmp	r3, #0
 810859c:	d10a      	bne.n	81085b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810859e:	4b3c      	ldr	r3, [pc, #240]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81085a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81085a6:	687b      	ldr	r3, [r7, #4]
 81085a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81085ac:	4938      	ldr	r1, [pc, #224]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81085ae:	4313      	orrs	r3, r2
 81085b0:	658b      	str	r3, [r1, #88]	; 0x58
 81085b2:	e001      	b.n	81085b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085b4:	7dfb      	ldrb	r3, [r7, #23]
 81085b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	681b      	ldr	r3, [r3, #0]
 81085bc:	f003 0308 	and.w	r3, r3, #8
 81085c0:	2b00      	cmp	r3, #0
 81085c2:	d01a      	beq.n	81085fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81085ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81085ce:	d10a      	bne.n	81085e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81085d0:	687b      	ldr	r3, [r7, #4]
 81085d2:	3324      	adds	r3, #36	; 0x24
 81085d4:	2102      	movs	r1, #2
 81085d6:	4618      	mov	r0, r3
 81085d8:	f001 fb1e 	bl	8109c18 <RCCEx_PLL3_Config>
 81085dc:	4603      	mov	r3, r0
 81085de:	2b00      	cmp	r3, #0
 81085e0:	d001      	beq.n	81085e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81085e2:	2301      	movs	r3, #1
 81085e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81085e6:	4b2a      	ldr	r3, [pc, #168]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81085ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81085ee:	687b      	ldr	r3, [r7, #4]
 81085f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81085f4:	4926      	ldr	r1, [pc, #152]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81085f6:	4313      	orrs	r3, r2
 81085f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81085fa:	687b      	ldr	r3, [r7, #4]
 81085fc:	681b      	ldr	r3, [r3, #0]
 81085fe:	f003 0310 	and.w	r3, r3, #16
 8108602:	2b00      	cmp	r3, #0
 8108604:	d01a      	beq.n	810863c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8108606:	687b      	ldr	r3, [r7, #4]
 8108608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810860c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108610:	d10a      	bne.n	8108628 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	3324      	adds	r3, #36	; 0x24
 8108616:	2102      	movs	r1, #2
 8108618:	4618      	mov	r0, r3
 810861a:	f001 fafd 	bl	8109c18 <RCCEx_PLL3_Config>
 810861e:	4603      	mov	r3, r0
 8108620:	2b00      	cmp	r3, #0
 8108622:	d001      	beq.n	8108628 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8108624:	2301      	movs	r3, #1
 8108626:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8108628:	4b19      	ldr	r3, [pc, #100]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810862a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810862c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8108630:	687b      	ldr	r3, [r7, #4]
 8108632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8108636:	4916      	ldr	r1, [pc, #88]	; (8108690 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108638:	4313      	orrs	r3, r2
 810863a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	681b      	ldr	r3, [r3, #0]
 8108640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8108644:	2b00      	cmp	r3, #0
 8108646:	d036      	beq.n	81086b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810864e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108652:	d01f      	beq.n	8108694 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8108654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108658:	d817      	bhi.n	810868a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810865a:	2b00      	cmp	r3, #0
 810865c:	d003      	beq.n	8108666 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810865e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108662:	d009      	beq.n	8108678 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8108664:	e011      	b.n	810868a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	3304      	adds	r3, #4
 810866a:	2100      	movs	r1, #0
 810866c:	4618      	mov	r0, r3
 810866e:	f001 fa21 	bl	8109ab4 <RCCEx_PLL2_Config>
 8108672:	4603      	mov	r3, r0
 8108674:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8108676:	e00e      	b.n	8108696 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108678:	687b      	ldr	r3, [r7, #4]
 810867a:	3324      	adds	r3, #36	; 0x24
 810867c:	2102      	movs	r1, #2
 810867e:	4618      	mov	r0, r3
 8108680:	f001 faca 	bl	8109c18 <RCCEx_PLL3_Config>
 8108684:	4603      	mov	r3, r0
 8108686:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8108688:	e005      	b.n	8108696 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810868a:	2301      	movs	r3, #1
 810868c:	75fb      	strb	r3, [r7, #23]
      break;
 810868e:	e002      	b.n	8108696 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8108690:	58024400 	.word	0x58024400
      break;
 8108694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108696:	7dfb      	ldrb	r3, [r7, #23]
 8108698:	2b00      	cmp	r3, #0
 810869a:	d10a      	bne.n	81086b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810869c:	4b93      	ldr	r3, [pc, #588]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810869e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81086a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81086aa:	4990      	ldr	r1, [pc, #576]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81086ac:	4313      	orrs	r3, r2
 81086ae:	658b      	str	r3, [r1, #88]	; 0x58
 81086b0:	e001      	b.n	81086b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81086b2:	7dfb      	ldrb	r3, [r7, #23]
 81086b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81086b6:	687b      	ldr	r3, [r7, #4]
 81086b8:	681b      	ldr	r3, [r3, #0]
 81086ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81086be:	2b00      	cmp	r3, #0
 81086c0:	d033      	beq.n	810872a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81086c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81086cc:	d01c      	beq.n	8108708 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81086ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81086d2:	d816      	bhi.n	8108702 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81086d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81086d8:	d003      	beq.n	81086e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81086da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81086de:	d007      	beq.n	81086f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81086e0:	e00f      	b.n	8108702 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81086e2:	4b82      	ldr	r3, [pc, #520]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81086e6:	4a81      	ldr	r2, [pc, #516]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81086e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81086ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81086ee:	e00c      	b.n	810870a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	3324      	adds	r3, #36	; 0x24
 81086f4:	2101      	movs	r1, #1
 81086f6:	4618      	mov	r0, r3
 81086f8:	f001 fa8e 	bl	8109c18 <RCCEx_PLL3_Config>
 81086fc:	4603      	mov	r3, r0
 81086fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8108700:	e003      	b.n	810870a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108702:	2301      	movs	r3, #1
 8108704:	75fb      	strb	r3, [r7, #23]
      break;
 8108706:	e000      	b.n	810870a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8108708:	bf00      	nop
    }

    if(ret == HAL_OK)
 810870a:	7dfb      	ldrb	r3, [r7, #23]
 810870c:	2b00      	cmp	r3, #0
 810870e:	d10a      	bne.n	8108726 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8108710:	4b76      	ldr	r3, [pc, #472]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810871e:	4973      	ldr	r1, [pc, #460]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108720:	4313      	orrs	r3, r2
 8108722:	654b      	str	r3, [r1, #84]	; 0x54
 8108724:	e001      	b.n	810872a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108726:	7dfb      	ldrb	r3, [r7, #23]
 8108728:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810872a:	687b      	ldr	r3, [r7, #4]
 810872c:	681b      	ldr	r3, [r3, #0]
 810872e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8108732:	2b00      	cmp	r3, #0
 8108734:	d029      	beq.n	810878a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8108736:	687b      	ldr	r3, [r7, #4]
 8108738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810873a:	2b00      	cmp	r3, #0
 810873c:	d003      	beq.n	8108746 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810873e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108742:	d007      	beq.n	8108754 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8108744:	e00f      	b.n	8108766 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108746:	4b69      	ldr	r3, [pc, #420]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810874a:	4a68      	ldr	r2, [pc, #416]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810874c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8108752:	e00b      	b.n	810876c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108754:	687b      	ldr	r3, [r7, #4]
 8108756:	3304      	adds	r3, #4
 8108758:	2102      	movs	r1, #2
 810875a:	4618      	mov	r0, r3
 810875c:	f001 f9aa 	bl	8109ab4 <RCCEx_PLL2_Config>
 8108760:	4603      	mov	r3, r0
 8108762:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8108764:	e002      	b.n	810876c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8108766:	2301      	movs	r3, #1
 8108768:	75fb      	strb	r3, [r7, #23]
      break;
 810876a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810876c:	7dfb      	ldrb	r3, [r7, #23]
 810876e:	2b00      	cmp	r3, #0
 8108770:	d109      	bne.n	8108786 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8108772:	4b5e      	ldr	r3, [pc, #376]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108776:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810877e:	495b      	ldr	r1, [pc, #364]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108780:	4313      	orrs	r3, r2
 8108782:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108784:	e001      	b.n	810878a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108786:	7dfb      	ldrb	r3, [r7, #23]
 8108788:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810878a:	687b      	ldr	r3, [r7, #4]
 810878c:	681b      	ldr	r3, [r3, #0]
 810878e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108792:	2b00      	cmp	r3, #0
 8108794:	d00a      	beq.n	81087ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8108796:	687b      	ldr	r3, [r7, #4]
 8108798:	3324      	adds	r3, #36	; 0x24
 810879a:	2102      	movs	r1, #2
 810879c:	4618      	mov	r0, r3
 810879e:	f001 fa3b 	bl	8109c18 <RCCEx_PLL3_Config>
 81087a2:	4603      	mov	r3, r0
 81087a4:	2b00      	cmp	r3, #0
 81087a6:	d001      	beq.n	81087ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81087a8:	2301      	movs	r3, #1
 81087aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	681b      	ldr	r3, [r3, #0]
 81087b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81087b4:	2b00      	cmp	r3, #0
 81087b6:	d030      	beq.n	810881a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81087bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81087c0:	d017      	beq.n	81087f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81087c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81087c6:	d811      	bhi.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81087c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81087cc:	d013      	beq.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81087ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81087d2:	d80b      	bhi.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81087d4:	2b00      	cmp	r3, #0
 81087d6:	d010      	beq.n	81087fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81087d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81087dc:	d106      	bne.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81087de:	4b43      	ldr	r3, [pc, #268]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81087e2:	4a42      	ldr	r2, [pc, #264]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81087e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81087e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81087ea:	e007      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81087ec:	2301      	movs	r3, #1
 81087ee:	75fb      	strb	r3, [r7, #23]
      break;
 81087f0:	e004      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81087f2:	bf00      	nop
 81087f4:	e002      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81087f6:	bf00      	nop
 81087f8:	e000      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81087fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81087fc:	7dfb      	ldrb	r3, [r7, #23]
 81087fe:	2b00      	cmp	r3, #0
 8108800:	d109      	bne.n	8108816 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8108802:	4b3a      	ldr	r3, [pc, #232]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810880a:	687b      	ldr	r3, [r7, #4]
 810880c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810880e:	4937      	ldr	r1, [pc, #220]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108810:	4313      	orrs	r3, r2
 8108812:	654b      	str	r3, [r1, #84]	; 0x54
 8108814:	e001      	b.n	810881a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108816:	7dfb      	ldrb	r3, [r7, #23]
 8108818:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	681b      	ldr	r3, [r3, #0]
 810881e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8108822:	2b00      	cmp	r3, #0
 8108824:	d008      	beq.n	8108838 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8108826:	4b31      	ldr	r3, [pc, #196]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810882a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108832:	492e      	ldr	r1, [pc, #184]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108834:	4313      	orrs	r3, r2
 8108836:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	681b      	ldr	r3, [r3, #0]
 810883c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108840:	2b00      	cmp	r3, #0
 8108842:	d009      	beq.n	8108858 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8108844:	4b29      	ldr	r3, [pc, #164]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108846:	691b      	ldr	r3, [r3, #16]
 8108848:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8108852:	4926      	ldr	r1, [pc, #152]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108854:	4313      	orrs	r3, r2
 8108856:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8108858:	687b      	ldr	r3, [r7, #4]
 810885a:	681b      	ldr	r3, [r3, #0]
 810885c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8108860:	2b00      	cmp	r3, #0
 8108862:	d008      	beq.n	8108876 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8108864:	4b21      	ldr	r3, [pc, #132]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108868:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108870:	491e      	ldr	r1, [pc, #120]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108872:	4313      	orrs	r3, r2
 8108874:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8108876:	687b      	ldr	r3, [r7, #4]
 8108878:	681b      	ldr	r3, [r3, #0]
 810887a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810887e:	2b00      	cmp	r3, #0
 8108880:	d00d      	beq.n	810889e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8108882:	4b1a      	ldr	r3, [pc, #104]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108884:	691b      	ldr	r3, [r3, #16]
 8108886:	4a19      	ldr	r2, [pc, #100]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810888c:	6113      	str	r3, [r2, #16]
 810888e:	4b17      	ldr	r3, [pc, #92]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108890:	691a      	ldr	r2, [r3, #16]
 8108892:	687b      	ldr	r3, [r7, #4]
 8108894:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8108898:	4914      	ldr	r1, [pc, #80]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810889a:	4313      	orrs	r3, r2
 810889c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	681b      	ldr	r3, [r3, #0]
 81088a2:	2b00      	cmp	r3, #0
 81088a4:	da08      	bge.n	81088b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81088a6:	4b11      	ldr	r3, [pc, #68]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81088a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81088aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81088ae:	687b      	ldr	r3, [r7, #4]
 81088b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81088b2:	490e      	ldr	r1, [pc, #56]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81088b4:	4313      	orrs	r3, r2
 81088b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81088b8:	687b      	ldr	r3, [r7, #4]
 81088ba:	681b      	ldr	r3, [r3, #0]
 81088bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81088c0:	2b00      	cmp	r3, #0
 81088c2:	d009      	beq.n	81088d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81088c4:	4b09      	ldr	r3, [pc, #36]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81088c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81088c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81088d2:	4906      	ldr	r1, [pc, #24]	; (81088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81088d4:	4313      	orrs	r3, r2
 81088d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81088d8:	7dbb      	ldrb	r3, [r7, #22]
 81088da:	2b00      	cmp	r3, #0
 81088dc:	d101      	bne.n	81088e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81088de:	2300      	movs	r3, #0
 81088e0:	e000      	b.n	81088e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81088e2:	2301      	movs	r3, #1
}
 81088e4:	4618      	mov	r0, r3
 81088e6:	3718      	adds	r7, #24
 81088e8:	46bd      	mov	sp, r7
 81088ea:	bd80      	pop	{r7, pc}
 81088ec:	58024400 	.word	0x58024400

081088f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 81088f0:	b580      	push	{r7, lr}
 81088f2:	b090      	sub	sp, #64	; 0x40
 81088f4:	af00      	add	r7, sp, #0
 81088f6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81088fe:	f040 8095 	bne.w	8108a2c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8108902:	4bae      	ldr	r3, [pc, #696]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108906:	f003 0307 	and.w	r3, r3, #7
 810890a:	633b      	str	r3, [r7, #48]	; 0x30
 810890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810890e:	2b04      	cmp	r3, #4
 8108910:	f200 8088 	bhi.w	8108a24 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8108914:	a201      	add	r2, pc, #4	; (adr r2, 810891c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8108916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810891a:	bf00      	nop
 810891c:	08108931 	.word	0x08108931
 8108920:	08108959 	.word	0x08108959
 8108924:	08108981 	.word	0x08108981
 8108928:	08108a1d 	.word	0x08108a1d
 810892c:	081089a9 	.word	0x081089a9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108930:	4ba2      	ldr	r3, [pc, #648]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108932:	681b      	ldr	r3, [r3, #0]
 8108934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810893c:	d108      	bne.n	8108950 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810893e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108942:	4618      	mov	r0, r3
 8108944:	f000 ff64 	bl	8109810 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8108948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810894a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810894c:	f000 bc95 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108950:	2300      	movs	r3, #0
 8108952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108954:	f000 bc91 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108958:	4b98      	ldr	r3, [pc, #608]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810895a:	681b      	ldr	r3, [r3, #0]
 810895c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108964:	d108      	bne.n	8108978 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108966:	f107 0318 	add.w	r3, r7, #24
 810896a:	4618      	mov	r0, r3
 810896c:	f000 fca8 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108970:	69bb      	ldr	r3, [r7, #24]
 8108972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108974:	f000 bc81 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108978:	2300      	movs	r3, #0
 810897a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810897c:	f000 bc7d 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108980:	4b8e      	ldr	r3, [pc, #568]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108982:	681b      	ldr	r3, [r3, #0]
 8108984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810898c:	d108      	bne.n	81089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810898e:	f107 030c 	add.w	r3, r7, #12
 8108992:	4618      	mov	r0, r3
 8108994:	f000 fde8 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108998:	68fb      	ldr	r3, [r7, #12]
 810899a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810899c:	f000 bc6d 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81089a0:	2300      	movs	r3, #0
 81089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81089a4:	f000 bc69 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81089a8:	4b84      	ldr	r3, [pc, #528]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81089aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81089ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81089b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81089b2:	4b82      	ldr	r3, [pc, #520]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81089b4:	681b      	ldr	r3, [r3, #0]
 81089b6:	f003 0304 	and.w	r3, r3, #4
 81089ba:	2b04      	cmp	r3, #4
 81089bc:	d10c      	bne.n	81089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 81089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81089c0:	2b00      	cmp	r3, #0
 81089c2:	d109      	bne.n	81089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81089c4:	4b7d      	ldr	r3, [pc, #500]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81089c6:	681b      	ldr	r3, [r3, #0]
 81089c8:	08db      	lsrs	r3, r3, #3
 81089ca:	f003 0303 	and.w	r3, r3, #3
 81089ce:	4a7c      	ldr	r2, [pc, #496]	; (8108bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 81089d0:	fa22 f303 	lsr.w	r3, r2, r3
 81089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81089d6:	e01f      	b.n	8108a18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81089d8:	4b78      	ldr	r3, [pc, #480]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81089da:	681b      	ldr	r3, [r3, #0]
 81089dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81089e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81089e4:	d106      	bne.n	81089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 81089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81089e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81089ec:	d102      	bne.n	81089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81089ee:	4b75      	ldr	r3, [pc, #468]	; (8108bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 81089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81089f2:	e011      	b.n	8108a18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81089f4:	4b71      	ldr	r3, [pc, #452]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81089f6:	681b      	ldr	r3, [r3, #0]
 81089f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81089fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108a00:	d106      	bne.n	8108a10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8108a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108a08:	d102      	bne.n	8108a10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108a0a:	4b6f      	ldr	r3, [pc, #444]	; (8108bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8108a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108a0e:	e003      	b.n	8108a18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8108a10:	2300      	movs	r3, #0
 8108a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8108a14:	f000 bc31 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108a18:	f000 bc2f 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8108a1c:	4b6b      	ldr	r3, [pc, #428]	; (8108bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8108a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108a20:	f000 bc2b 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8108a24:	2300      	movs	r3, #0
 8108a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108a28:	f000 bc27 	b.w	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8108a2c:	687b      	ldr	r3, [r7, #4]
 8108a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108a32:	f040 8095 	bne.w	8108b60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8108a36:	4b61      	ldr	r3, [pc, #388]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108a3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8108a3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8108a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108a46:	d04d      	beq.n	8108ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8108a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108a4e:	f200 8084 	bhi.w	8108b5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8108a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a54:	2bc0      	cmp	r3, #192	; 0xc0
 8108a56:	d07d      	beq.n	8108b54 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8108a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8108a5c:	d87d      	bhi.n	8108b5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8108a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a60:	2b80      	cmp	r3, #128	; 0x80
 8108a62:	d02d      	beq.n	8108ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8108a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a66:	2b80      	cmp	r3, #128	; 0x80
 8108a68:	d877      	bhi.n	8108b5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8108a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a6c:	2b00      	cmp	r3, #0
 8108a6e:	d003      	beq.n	8108a78 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8108a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108a72:	2b40      	cmp	r3, #64	; 0x40
 8108a74:	d012      	beq.n	8108a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8108a76:	e070      	b.n	8108b5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108a78:	4b50      	ldr	r3, [pc, #320]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108a84:	d107      	bne.n	8108a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108a8a:	4618      	mov	r0, r3
 8108a8c:	f000 fec0 	bl	8109810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108a94:	e3f1      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108a96:	2300      	movs	r3, #0
 8108a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108a9a:	e3ee      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108a9c:	4b47      	ldr	r3, [pc, #284]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108a9e:	681b      	ldr	r3, [r3, #0]
 8108aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108aa8:	d107      	bne.n	8108aba <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108aaa:	f107 0318 	add.w	r3, r7, #24
 8108aae:	4618      	mov	r0, r3
 8108ab0:	f000 fc06 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108ab4:	69bb      	ldr	r3, [r7, #24]
 8108ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108ab8:	e3df      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108aba:	2300      	movs	r3, #0
 8108abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108abe:	e3dc      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108ac0:	4b3e      	ldr	r3, [pc, #248]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108ac2:	681b      	ldr	r3, [r3, #0]
 8108ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108acc:	d107      	bne.n	8108ade <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108ace:	f107 030c 	add.w	r3, r7, #12
 8108ad2:	4618      	mov	r0, r3
 8108ad4:	f000 fd48 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108ad8:	68fb      	ldr	r3, [r7, #12]
 8108ada:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108adc:	e3cd      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108ade:	2300      	movs	r3, #0
 8108ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108ae2:	e3ca      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8108ae4:	4b35      	ldr	r3, [pc, #212]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108aec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108aee:	4b33      	ldr	r3, [pc, #204]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108af0:	681b      	ldr	r3, [r3, #0]
 8108af2:	f003 0304 	and.w	r3, r3, #4
 8108af6:	2b04      	cmp	r3, #4
 8108af8:	d10c      	bne.n	8108b14 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8108afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108afc:	2b00      	cmp	r3, #0
 8108afe:	d109      	bne.n	8108b14 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108b00:	4b2e      	ldr	r3, [pc, #184]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108b02:	681b      	ldr	r3, [r3, #0]
 8108b04:	08db      	lsrs	r3, r3, #3
 8108b06:	f003 0303 	and.w	r3, r3, #3
 8108b0a:	4a2d      	ldr	r2, [pc, #180]	; (8108bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8108b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8108b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108b12:	e01e      	b.n	8108b52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108b14:	4b29      	ldr	r3, [pc, #164]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108b16:	681b      	ldr	r3, [r3, #0]
 8108b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108b20:	d106      	bne.n	8108b30 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8108b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108b28:	d102      	bne.n	8108b30 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8108b2a:	4b26      	ldr	r3, [pc, #152]	; (8108bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8108b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108b2e:	e010      	b.n	8108b52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108b30:	4b22      	ldr	r3, [pc, #136]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108b32:	681b      	ldr	r3, [r3, #0]
 8108b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108b3c:	d106      	bne.n	8108b4c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8108b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108b44:	d102      	bne.n	8108b4c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108b46:	4b20      	ldr	r3, [pc, #128]	; (8108bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8108b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108b4a:	e002      	b.n	8108b52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8108b4c:	2300      	movs	r3, #0
 8108b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8108b50:	e393      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108b52:	e392      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8108b54:	4b1d      	ldr	r3, [pc, #116]	; (8108bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8108b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108b58:	e38f      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8108b5a:	2300      	movs	r3, #0
 8108b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108b5e:	e38c      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108b66:	f040 80a7 	bne.w	8108cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8108b6a:	4b14      	ldr	r3, [pc, #80]	; (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8108b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108b6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8108b72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8108b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108b76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108b7a:	d05f      	beq.n	8108c3c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8108b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108b7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108b82:	f200 8096 	bhi.w	8108cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8108b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108b88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108b8c:	f000 808e 	beq.w	8108cac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8108b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108b92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108b96:	f200 808c 	bhi.w	8108cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8108b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108ba0:	d03a      	beq.n	8108c18 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8108ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108ba8:	f200 8083 	bhi.w	8108cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8108bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108bae:	2b00      	cmp	r3, #0
 8108bb0:	d00e      	beq.n	8108bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8108bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108bb8:	d01c      	beq.n	8108bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8108bba:	e07a      	b.n	8108cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8108bbc:	58024400 	.word	0x58024400
 8108bc0:	03d09000 	.word	0x03d09000
 8108bc4:	003d0900 	.word	0x003d0900
 8108bc8:	007a1200 	.word	0x007a1200
 8108bcc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108bd0:	4baa      	ldr	r3, [pc, #680]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108bd2:	681b      	ldr	r3, [r3, #0]
 8108bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108bdc:	d107      	bne.n	8108bee <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108be2:	4618      	mov	r0, r3
 8108be4:	f000 fe14 	bl	8109810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108bea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108bec:	e345      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108bee:	2300      	movs	r3, #0
 8108bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108bf2:	e342      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108bf4:	4ba1      	ldr	r3, [pc, #644]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108bf6:	681b      	ldr	r3, [r3, #0]
 8108bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108c00:	d107      	bne.n	8108c12 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108c02:	f107 0318 	add.w	r3, r7, #24
 8108c06:	4618      	mov	r0, r3
 8108c08:	f000 fb5a 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108c0c:	69bb      	ldr	r3, [r7, #24]
 8108c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108c10:	e333      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108c12:	2300      	movs	r3, #0
 8108c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108c16:	e330      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108c18:	4b98      	ldr	r3, [pc, #608]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108c1a:	681b      	ldr	r3, [r3, #0]
 8108c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108c24:	d107      	bne.n	8108c36 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108c26:	f107 030c 	add.w	r3, r7, #12
 8108c2a:	4618      	mov	r0, r3
 8108c2c:	f000 fc9c 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108c30:	68fb      	ldr	r3, [r7, #12]
 8108c32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108c34:	e321      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108c36:	2300      	movs	r3, #0
 8108c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108c3a:	e31e      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8108c3c:	4b8f      	ldr	r3, [pc, #572]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108c44:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108c46:	4b8d      	ldr	r3, [pc, #564]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108c48:	681b      	ldr	r3, [r3, #0]
 8108c4a:	f003 0304 	and.w	r3, r3, #4
 8108c4e:	2b04      	cmp	r3, #4
 8108c50:	d10c      	bne.n	8108c6c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8108c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108c54:	2b00      	cmp	r3, #0
 8108c56:	d109      	bne.n	8108c6c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108c58:	4b88      	ldr	r3, [pc, #544]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108c5a:	681b      	ldr	r3, [r3, #0]
 8108c5c:	08db      	lsrs	r3, r3, #3
 8108c5e:	f003 0303 	and.w	r3, r3, #3
 8108c62:	4a87      	ldr	r2, [pc, #540]	; (8108e80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8108c64:	fa22 f303 	lsr.w	r3, r2, r3
 8108c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108c6a:	e01e      	b.n	8108caa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108c6c:	4b83      	ldr	r3, [pc, #524]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108c6e:	681b      	ldr	r3, [r3, #0]
 8108c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108c78:	d106      	bne.n	8108c88 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8108c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108c80:	d102      	bne.n	8108c88 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8108c82:	4b80      	ldr	r3, [pc, #512]	; (8108e84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8108c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108c86:	e010      	b.n	8108caa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108c88:	4b7c      	ldr	r3, [pc, #496]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108c8a:	681b      	ldr	r3, [r3, #0]
 8108c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108c94:	d106      	bne.n	8108ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8108c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108c9c:	d102      	bne.n	8108ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108c9e:	4b7a      	ldr	r3, [pc, #488]	; (8108e88 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8108ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108ca2:	e002      	b.n	8108caa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8108ca4:	2300      	movs	r3, #0
 8108ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8108ca8:	e2e7      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108caa:	e2e6      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8108cac:	4b77      	ldr	r3, [pc, #476]	; (8108e8c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8108cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108cb0:	e2e3      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8108cb2:	2300      	movs	r3, #0
 8108cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108cb6:	e2e0      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108cbe:	f040 809c 	bne.w	8108dfa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8108cc2:	4b6e      	ldr	r3, [pc, #440]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108cc6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8108cca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8108ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108cce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108cd2:	d054      	beq.n	8108d7e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8108cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108cda:	f200 808b 	bhi.w	8108df4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8108cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108ce0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108ce4:	f000 8083 	beq.w	8108dee <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8108ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108cee:	f200 8081 	bhi.w	8108df4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8108cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108cf8:	d02f      	beq.n	8108d5a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8108cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108d00:	d878      	bhi.n	8108df4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8108d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d04:	2b00      	cmp	r3, #0
 8108d06:	d004      	beq.n	8108d12 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8108d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108d0e:	d012      	beq.n	8108d36 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8108d10:	e070      	b.n	8108df4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108d12:	4b5a      	ldr	r3, [pc, #360]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108d14:	681b      	ldr	r3, [r3, #0]
 8108d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108d1e:	d107      	bne.n	8108d30 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108d24:	4618      	mov	r0, r3
 8108d26:	f000 fd73 	bl	8109810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108d2e:	e2a4      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108d30:	2300      	movs	r3, #0
 8108d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108d34:	e2a1      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108d36:	4b51      	ldr	r3, [pc, #324]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108d38:	681b      	ldr	r3, [r3, #0]
 8108d3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108d42:	d107      	bne.n	8108d54 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108d44:	f107 0318 	add.w	r3, r7, #24
 8108d48:	4618      	mov	r0, r3
 8108d4a:	f000 fab9 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108d4e:	69bb      	ldr	r3, [r7, #24]
 8108d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8108d52:	e292      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108d54:	2300      	movs	r3, #0
 8108d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108d58:	e28f      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108d5a:	4b48      	ldr	r3, [pc, #288]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108d5c:	681b      	ldr	r3, [r3, #0]
 8108d5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108d66:	d107      	bne.n	8108d78 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108d68:	f107 030c 	add.w	r3, r7, #12
 8108d6c:	4618      	mov	r0, r3
 8108d6e:	f000 fbfb 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108d72:	68fb      	ldr	r3, [r7, #12]
 8108d74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108d76:	e280      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108d78:	2300      	movs	r3, #0
 8108d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108d7c:	e27d      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8108d7e:	4b3f      	ldr	r3, [pc, #252]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108d82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108d86:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108d88:	4b3c      	ldr	r3, [pc, #240]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108d8a:	681b      	ldr	r3, [r3, #0]
 8108d8c:	f003 0304 	and.w	r3, r3, #4
 8108d90:	2b04      	cmp	r3, #4
 8108d92:	d10c      	bne.n	8108dae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8108d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108d96:	2b00      	cmp	r3, #0
 8108d98:	d109      	bne.n	8108dae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108d9a:	4b38      	ldr	r3, [pc, #224]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108d9c:	681b      	ldr	r3, [r3, #0]
 8108d9e:	08db      	lsrs	r3, r3, #3
 8108da0:	f003 0303 	and.w	r3, r3, #3
 8108da4:	4a36      	ldr	r2, [pc, #216]	; (8108e80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8108da6:	fa22 f303 	lsr.w	r3, r2, r3
 8108daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108dac:	e01e      	b.n	8108dec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108dae:	4b33      	ldr	r3, [pc, #204]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108db0:	681b      	ldr	r3, [r3, #0]
 8108db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108dba:	d106      	bne.n	8108dca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8108dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108dc2:	d102      	bne.n	8108dca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8108dc4:	4b2f      	ldr	r3, [pc, #188]	; (8108e84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8108dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108dc8:	e010      	b.n	8108dec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108dca:	4b2c      	ldr	r3, [pc, #176]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108dcc:	681b      	ldr	r3, [r3, #0]
 8108dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108dd6:	d106      	bne.n	8108de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8108dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108dde:	d102      	bne.n	8108de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108de0:	4b29      	ldr	r3, [pc, #164]	; (8108e88 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8108de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108de4:	e002      	b.n	8108dec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8108de6:	2300      	movs	r3, #0
 8108de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8108dea:	e246      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108dec:	e245      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8108dee:	4b27      	ldr	r3, [pc, #156]	; (8108e8c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8108df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108df2:	e242      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8108df4:	2300      	movs	r3, #0
 8108df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108df8:	e23f      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108e00:	f040 80a8 	bne.w	8108f54 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8108e04:	4b1d      	ldr	r3, [pc, #116]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108e08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8108e0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8108e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108e14:	d060      	beq.n	8108ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8108e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108e1c:	f200 8097 	bhi.w	8108f4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8108e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108e26:	f000 808f 	beq.w	8108f48 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8108e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108e30:	f200 808d 	bhi.w	8108f4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8108e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108e3a:	d03b      	beq.n	8108eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8108e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108e42:	f200 8084 	bhi.w	8108f4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8108e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e48:	2b00      	cmp	r3, #0
 8108e4a:	d004      	beq.n	8108e56 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8108e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108e52:	d01d      	beq.n	8108e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8108e54:	e07b      	b.n	8108f4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108e56:	4b09      	ldr	r3, [pc, #36]	; (8108e7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108e58:	681b      	ldr	r3, [r3, #0]
 8108e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108e62:	d107      	bne.n	8108e74 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108e68:	4618      	mov	r0, r3
 8108e6a:	f000 fcd1 	bl	8109810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108e70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108e72:	e202      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108e74:	2300      	movs	r3, #0
 8108e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108e78:	e1ff      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108e7a:	bf00      	nop
 8108e7c:	58024400 	.word	0x58024400
 8108e80:	03d09000 	.word	0x03d09000
 8108e84:	003d0900 	.word	0x003d0900
 8108e88:	007a1200 	.word	0x007a1200
 8108e8c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108e90:	4ba3      	ldr	r3, [pc, #652]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108e92:	681b      	ldr	r3, [r3, #0]
 8108e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108e9c:	d107      	bne.n	8108eae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108e9e:	f107 0318 	add.w	r3, r7, #24
 8108ea2:	4618      	mov	r0, r3
 8108ea4:	f000 fa0c 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108ea8:	69bb      	ldr	r3, [r7, #24]
 8108eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108eac:	e1e5      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108eae:	2300      	movs	r3, #0
 8108eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108eb2:	e1e2      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108eb4:	4b9a      	ldr	r3, [pc, #616]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108eb6:	681b      	ldr	r3, [r3, #0]
 8108eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108ec0:	d107      	bne.n	8108ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108ec2:	f107 030c 	add.w	r3, r7, #12
 8108ec6:	4618      	mov	r0, r3
 8108ec8:	f000 fb4e 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108ecc:	68fb      	ldr	r3, [r7, #12]
 8108ece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108ed0:	e1d3      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108ed2:	2300      	movs	r3, #0
 8108ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108ed6:	e1d0      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8108ed8:	4b91      	ldr	r3, [pc, #580]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108ee0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108ee2:	4b8f      	ldr	r3, [pc, #572]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108ee4:	681b      	ldr	r3, [r3, #0]
 8108ee6:	f003 0304 	and.w	r3, r3, #4
 8108eea:	2b04      	cmp	r3, #4
 8108eec:	d10c      	bne.n	8108f08 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8108eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108ef0:	2b00      	cmp	r3, #0
 8108ef2:	d109      	bne.n	8108f08 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108ef4:	4b8a      	ldr	r3, [pc, #552]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108ef6:	681b      	ldr	r3, [r3, #0]
 8108ef8:	08db      	lsrs	r3, r3, #3
 8108efa:	f003 0303 	and.w	r3, r3, #3
 8108efe:	4a89      	ldr	r2, [pc, #548]	; (8109124 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8108f00:	fa22 f303 	lsr.w	r3, r2, r3
 8108f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108f06:	e01e      	b.n	8108f46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108f08:	4b85      	ldr	r3, [pc, #532]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108f0a:	681b      	ldr	r3, [r3, #0]
 8108f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108f14:	d106      	bne.n	8108f24 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8108f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108f1c:	d102      	bne.n	8108f24 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8108f1e:	4b82      	ldr	r3, [pc, #520]	; (8109128 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8108f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108f22:	e010      	b.n	8108f46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108f24:	4b7e      	ldr	r3, [pc, #504]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108f26:	681b      	ldr	r3, [r3, #0]
 8108f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108f30:	d106      	bne.n	8108f40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8108f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108f38:	d102      	bne.n	8108f40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108f3a:	4b7c      	ldr	r3, [pc, #496]	; (810912c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8108f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108f3e:	e002      	b.n	8108f46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8108f40:	2300      	movs	r3, #0
 8108f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8108f44:	e199      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108f46:	e198      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8108f48:	4b79      	ldr	r3, [pc, #484]	; (8109130 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8108f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108f4c:	e195      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8108f4e:	2300      	movs	r3, #0
 8108f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108f52:	e192      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8108f5a:	d173      	bne.n	8109044 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8108f5c:	4b70      	ldr	r3, [pc, #448]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8108f64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8108f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108f6c:	d02f      	beq.n	8108fce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8108f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108f74:	d863      	bhi.n	810903e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8108f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f78:	2b00      	cmp	r3, #0
 8108f7a:	d004      	beq.n	8108f86 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8108f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108f82:	d012      	beq.n	8108faa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8108f84:	e05b      	b.n	810903e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108f86:	4b66      	ldr	r3, [pc, #408]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108f88:	681b      	ldr	r3, [r3, #0]
 8108f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108f92:	d107      	bne.n	8108fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108f94:	f107 0318 	add.w	r3, r7, #24
 8108f98:	4618      	mov	r0, r3
 8108f9a:	f000 f991 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108f9e:	69bb      	ldr	r3, [r7, #24]
 8108fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108fa2:	e16a      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108fa4:	2300      	movs	r3, #0
 8108fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108fa8:	e167      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108faa:	4b5d      	ldr	r3, [pc, #372]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108fac:	681b      	ldr	r3, [r3, #0]
 8108fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108fb6:	d107      	bne.n	8108fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108fb8:	f107 030c 	add.w	r3, r7, #12
 8108fbc:	4618      	mov	r0, r3
 8108fbe:	f000 fad3 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8108fc2:	697b      	ldr	r3, [r7, #20]
 8108fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108fc6:	e158      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108fc8:	2300      	movs	r3, #0
 8108fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108fcc:	e155      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8108fce:	4b54      	ldr	r3, [pc, #336]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108fd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108fd6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108fd8:	4b51      	ldr	r3, [pc, #324]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108fda:	681b      	ldr	r3, [r3, #0]
 8108fdc:	f003 0304 	and.w	r3, r3, #4
 8108fe0:	2b04      	cmp	r3, #4
 8108fe2:	d10c      	bne.n	8108ffe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8108fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108fe6:	2b00      	cmp	r3, #0
 8108fe8:	d109      	bne.n	8108ffe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108fea:	4b4d      	ldr	r3, [pc, #308]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108fec:	681b      	ldr	r3, [r3, #0]
 8108fee:	08db      	lsrs	r3, r3, #3
 8108ff0:	f003 0303 	and.w	r3, r3, #3
 8108ff4:	4a4b      	ldr	r2, [pc, #300]	; (8109124 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8108ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8108ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108ffc:	e01e      	b.n	810903c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108ffe:	4b48      	ldr	r3, [pc, #288]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8109000:	681b      	ldr	r3, [r3, #0]
 8109002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810900a:	d106      	bne.n	810901a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 810900c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810900e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109012:	d102      	bne.n	810901a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8109014:	4b44      	ldr	r3, [pc, #272]	; (8109128 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8109016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8109018:	e010      	b.n	810903c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810901a:	4b41      	ldr	r3, [pc, #260]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810901c:	681b      	ldr	r3, [r3, #0]
 810901e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109026:	d106      	bne.n	8109036 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8109028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810902a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810902e:	d102      	bne.n	8109036 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8109030:	4b3e      	ldr	r3, [pc, #248]	; (810912c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8109032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8109034:	e002      	b.n	810903c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8109036:	2300      	movs	r3, #0
 8109038:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810903a:	e11e      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810903c:	e11d      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810903e:	2300      	movs	r3, #0
 8109040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8109042:	e11a      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8109044:	687b      	ldr	r3, [r7, #4]
 8109046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810904a:	d133      	bne.n	81090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 810904c:	4b34      	ldr	r3, [pc, #208]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810904e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109054:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8109056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109058:	2b00      	cmp	r3, #0
 810905a:	d004      	beq.n	8109066 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 810905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810905e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109062:	d012      	beq.n	810908a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8109064:	e023      	b.n	81090ae <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109066:	4b2e      	ldr	r3, [pc, #184]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8109068:	681b      	ldr	r3, [r3, #0]
 810906a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810906e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109072:	d107      	bne.n	8109084 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109078:	4618      	mov	r0, r3
 810907a:	f000 fbc9 	bl	8109810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109080:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8109082:	e0fa      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8109084:	2300      	movs	r3, #0
 8109086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8109088:	e0f7      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810908a:	4b25      	ldr	r3, [pc, #148]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810908c:	681b      	ldr	r3, [r3, #0]
 810908e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8109096:	d107      	bne.n	81090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109098:	f107 0318 	add.w	r3, r7, #24
 810909c:	4618      	mov	r0, r3
 810909e:	f000 f90f 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81090a2:	6a3b      	ldr	r3, [r7, #32]
 81090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81090a6:	e0e8      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81090a8:	2300      	movs	r3, #0
 81090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81090ac:	e0e5      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 81090ae:	2300      	movs	r3, #0
 81090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81090b2:	e0e2      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81090b4:	687b      	ldr	r3, [r7, #4]
 81090b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81090ba:	f040 808f 	bne.w	81091dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 81090be:	4b18      	ldr	r3, [pc, #96]	; (8109120 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81090c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81090c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81090c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81090ce:	d075      	beq.n	81091bc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 81090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81090d6:	d87e      	bhi.n	81091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 81090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81090de:	d060      	beq.n	81091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 81090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81090e6:	d876      	bhi.n	81091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 81090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81090ee:	d045      	beq.n	810917c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 81090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81090f6:	d86e      	bhi.n	81091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 81090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81090fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81090fe:	d02b      	beq.n	8109158 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8109100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109106:	d866      	bhi.n	81091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8109108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810910a:	2b00      	cmp	r3, #0
 810910c:	d004      	beq.n	8109118 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 810910e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109114:	d00e      	beq.n	8109134 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8109116:	e05e      	b.n	81091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8109118:	f000 f8bc 	bl	8109294 <HAL_RCCEx_GetD3PCLK1Freq>
 810911c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 810911e:	e0ac      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8109120:	58024400 	.word	0x58024400
 8109124:	03d09000 	.word	0x03d09000
 8109128:	003d0900 	.word	0x003d0900
 810912c:	007a1200 	.word	0x007a1200
 8109130:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109134:	4b53      	ldr	r3, [pc, #332]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8109136:	681b      	ldr	r3, [r3, #0]
 8109138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810913c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8109140:	d107      	bne.n	8109152 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109142:	f107 0318 	add.w	r3, r7, #24
 8109146:	4618      	mov	r0, r3
 8109148:	f000 f8ba 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810914c:	69fb      	ldr	r3, [r7, #28]
 810914e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8109150:	e093      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8109152:	2300      	movs	r3, #0
 8109154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8109156:	e090      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109158:	4b4a      	ldr	r3, [pc, #296]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810915a:	681b      	ldr	r3, [r3, #0]
 810915c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109164:	d107      	bne.n	8109176 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109166:	f107 030c 	add.w	r3, r7, #12
 810916a:	4618      	mov	r0, r3
 810916c:	f000 f9fc 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8109170:	693b      	ldr	r3, [r7, #16]
 8109172:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8109174:	e081      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8109176:	2300      	movs	r3, #0
 8109178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810917a:	e07e      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810917c:	4b41      	ldr	r3, [pc, #260]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810917e:	681b      	ldr	r3, [r3, #0]
 8109180:	f003 0304 	and.w	r3, r3, #4
 8109184:	2b04      	cmp	r3, #4
 8109186:	d109      	bne.n	810919c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109188:	4b3e      	ldr	r3, [pc, #248]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810918a:	681b      	ldr	r3, [r3, #0]
 810918c:	08db      	lsrs	r3, r3, #3
 810918e:	f003 0303 	and.w	r3, r3, #3
 8109192:	4a3d      	ldr	r2, [pc, #244]	; (8109288 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8109194:	fa22 f303 	lsr.w	r3, r2, r3
 8109198:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810919a:	e06e      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810919c:	2300      	movs	r3, #0
 810919e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81091a0:	e06b      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81091a2:	4b38      	ldr	r3, [pc, #224]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81091a4:	681b      	ldr	r3, [r3, #0]
 81091a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81091aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81091ae:	d102      	bne.n	81091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 81091b0:	4b36      	ldr	r3, [pc, #216]	; (810928c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 81091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81091b4:	e061      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81091b6:	2300      	movs	r3, #0
 81091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81091ba:	e05e      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81091bc:	4b31      	ldr	r3, [pc, #196]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81091be:	681b      	ldr	r3, [r3, #0]
 81091c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81091c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81091c8:	d102      	bne.n	81091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 81091ca:	4b31      	ldr	r3, [pc, #196]	; (8109290 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81091ce:	e054      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81091d0:	2300      	movs	r3, #0
 81091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81091d4:	e051      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 81091d6:	2300      	movs	r3, #0
 81091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81091da:	e04e      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81091e2:	d148      	bne.n	8109276 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 81091e4:	4b27      	ldr	r3, [pc, #156]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81091e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81091e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81091ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81091ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81091f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81091f4:	d02a      	beq.n	810924c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 81091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81091f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81091fc:	d838      	bhi.n	8109270 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 81091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109200:	2b00      	cmp	r3, #0
 8109202:	d004      	beq.n	810920e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8109204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810920a:	d00d      	beq.n	8109228 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 810920c:	e030      	b.n	8109270 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810920e:	4b1d      	ldr	r3, [pc, #116]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8109210:	681b      	ldr	r3, [r3, #0]
 8109212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810921a:	d102      	bne.n	8109222 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 810921c:	4b1c      	ldr	r3, [pc, #112]	; (8109290 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810921e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8109220:	e02b      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8109222:	2300      	movs	r3, #0
 8109224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8109226:	e028      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109228:	4b16      	ldr	r3, [pc, #88]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810922a:	681b      	ldr	r3, [r3, #0]
 810922c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109234:	d107      	bne.n	8109246 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810923a:	4618      	mov	r0, r3
 810923c:	f000 fae8 	bl	8109810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109242:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8109244:	e019      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8109246:	2300      	movs	r3, #0
 8109248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810924a:	e016      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810924c:	4b0d      	ldr	r3, [pc, #52]	; (8109284 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810924e:	681b      	ldr	r3, [r3, #0]
 8109250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8109258:	d107      	bne.n	810926a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810925a:	f107 0318 	add.w	r3, r7, #24
 810925e:	4618      	mov	r0, r3
 8109260:	f000 f82e 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109264:	69fb      	ldr	r3, [r7, #28]
 8109266:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8109268:	e007      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810926a:	2300      	movs	r3, #0
 810926c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810926e:	e004      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8109270:	2300      	movs	r3, #0
 8109272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8109274:	e001      	b.n	810927a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8109276:	2300      	movs	r3, #0
 8109278:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 810927a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810927c:	4618      	mov	r0, r3
 810927e:	3740      	adds	r7, #64	; 0x40
 8109280:	46bd      	mov	sp, r7
 8109282:	bd80      	pop	{r7, pc}
 8109284:	58024400 	.word	0x58024400
 8109288:	03d09000 	.word	0x03d09000
 810928c:	003d0900 	.word	0x003d0900
 8109290:	007a1200 	.word	0x007a1200

08109294 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109294:	b580      	push	{r7, lr}
 8109296:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8109298:	f7fe fb4a 	bl	8107930 <HAL_RCC_GetHCLKFreq>
 810929c:	4602      	mov	r2, r0
 810929e:	4b06      	ldr	r3, [pc, #24]	; (81092b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81092a0:	6a1b      	ldr	r3, [r3, #32]
 81092a2:	091b      	lsrs	r3, r3, #4
 81092a4:	f003 0307 	and.w	r3, r3, #7
 81092a8:	4904      	ldr	r1, [pc, #16]	; (81092bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81092aa:	5ccb      	ldrb	r3, [r1, r3]
 81092ac:	f003 031f 	and.w	r3, r3, #31
 81092b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81092b4:	4618      	mov	r0, r3
 81092b6:	bd80      	pop	{r7, pc}
 81092b8:	58024400 	.word	0x58024400
 81092bc:	0811b694 	.word	0x0811b694

081092c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81092c0:	b480      	push	{r7}
 81092c2:	b089      	sub	sp, #36	; 0x24
 81092c4:	af00      	add	r7, sp, #0
 81092c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81092c8:	4ba1      	ldr	r3, [pc, #644]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81092cc:	f003 0303 	and.w	r3, r3, #3
 81092d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81092d2:	4b9f      	ldr	r3, [pc, #636]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81092d6:	0b1b      	lsrs	r3, r3, #12
 81092d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81092dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81092de:	4b9c      	ldr	r3, [pc, #624]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81092e2:	091b      	lsrs	r3, r3, #4
 81092e4:	f003 0301 	and.w	r3, r3, #1
 81092e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81092ea:	4b99      	ldr	r3, [pc, #612]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81092ee:	08db      	lsrs	r3, r3, #3
 81092f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81092f4:	693a      	ldr	r2, [r7, #16]
 81092f6:	fb02 f303 	mul.w	r3, r2, r3
 81092fa:	ee07 3a90 	vmov	s15, r3
 81092fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109306:	697b      	ldr	r3, [r7, #20]
 8109308:	2b00      	cmp	r3, #0
 810930a:	f000 8111 	beq.w	8109530 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810930e:	69bb      	ldr	r3, [r7, #24]
 8109310:	2b02      	cmp	r3, #2
 8109312:	f000 8083 	beq.w	810941c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109316:	69bb      	ldr	r3, [r7, #24]
 8109318:	2b02      	cmp	r3, #2
 810931a:	f200 80a1 	bhi.w	8109460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810931e:	69bb      	ldr	r3, [r7, #24]
 8109320:	2b00      	cmp	r3, #0
 8109322:	d003      	beq.n	810932c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109324:	69bb      	ldr	r3, [r7, #24]
 8109326:	2b01      	cmp	r3, #1
 8109328:	d056      	beq.n	81093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810932a:	e099      	b.n	8109460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810932c:	4b88      	ldr	r3, [pc, #544]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810932e:	681b      	ldr	r3, [r3, #0]
 8109330:	f003 0320 	and.w	r3, r3, #32
 8109334:	2b00      	cmp	r3, #0
 8109336:	d02d      	beq.n	8109394 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109338:	4b85      	ldr	r3, [pc, #532]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810933a:	681b      	ldr	r3, [r3, #0]
 810933c:	08db      	lsrs	r3, r3, #3
 810933e:	f003 0303 	and.w	r3, r3, #3
 8109342:	4a84      	ldr	r2, [pc, #528]	; (8109554 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8109344:	fa22 f303 	lsr.w	r3, r2, r3
 8109348:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810934a:	68bb      	ldr	r3, [r7, #8]
 810934c:	ee07 3a90 	vmov	s15, r3
 8109350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109354:	697b      	ldr	r3, [r7, #20]
 8109356:	ee07 3a90 	vmov	s15, r3
 810935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810935e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109362:	4b7b      	ldr	r3, [pc, #492]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810936a:	ee07 3a90 	vmov	s15, r3
 810936e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109372:	ed97 6a03 	vldr	s12, [r7, #12]
 8109376:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810937a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810937e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810938e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109392:	e087      	b.n	81094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109394:	697b      	ldr	r3, [r7, #20]
 8109396:	ee07 3a90 	vmov	s15, r3
 810939a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810939e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810955c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81093a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81093a6:	4b6a      	ldr	r3, [pc, #424]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81093ae:	ee07 3a90 	vmov	s15, r3
 81093b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81093b6:	ed97 6a03 	vldr	s12, [r7, #12]
 81093ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81093be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81093c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81093c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81093ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81093ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81093d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81093d6:	e065      	b.n	81094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81093d8:	697b      	ldr	r3, [r7, #20]
 81093da:	ee07 3a90 	vmov	s15, r3
 81093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81093e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81093e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81093ea:	4b59      	ldr	r3, [pc, #356]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81093ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81093f2:	ee07 3a90 	vmov	s15, r3
 81093f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81093fa:	ed97 6a03 	vldr	s12, [r7, #12]
 81093fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810940a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810940e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810941a:	e043      	b.n	81094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810941c:	697b      	ldr	r3, [r7, #20]
 810941e:	ee07 3a90 	vmov	s15, r3
 8109422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810942a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810942e:	4b48      	ldr	r3, [pc, #288]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109436:	ee07 3a90 	vmov	s15, r3
 810943a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810943e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109442:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810944a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810944e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109456:	ee67 7a27 	vmul.f32	s15, s14, s15
 810945a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810945e:	e021      	b.n	81094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109460:	697b      	ldr	r3, [r7, #20]
 8109462:	ee07 3a90 	vmov	s15, r3
 8109466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810946a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810946e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109472:	4b37      	ldr	r3, [pc, #220]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810947a:	ee07 3a90 	vmov	s15, r3
 810947e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109482:	ed97 6a03 	vldr	s12, [r7, #12]
 8109486:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810948a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810948e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810949a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810949e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81094a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81094a4:	4b2a      	ldr	r3, [pc, #168]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81094a8:	0a5b      	lsrs	r3, r3, #9
 81094aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81094ae:	ee07 3a90 	vmov	s15, r3
 81094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81094b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81094ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 81094be:	edd7 6a07 	vldr	s13, [r7, #28]
 81094c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81094c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81094ca:	ee17 2a90 	vmov	r2, s15
 81094ce:	687b      	ldr	r3, [r7, #4]
 81094d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81094d2:	4b1f      	ldr	r3, [pc, #124]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81094d6:	0c1b      	lsrs	r3, r3, #16
 81094d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81094dc:	ee07 3a90 	vmov	s15, r3
 81094e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81094e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81094e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81094ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81094f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81094f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81094f8:	ee17 2a90 	vmov	r2, s15
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8109500:	4b13      	ldr	r3, [pc, #76]	; (8109550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109504:	0e1b      	lsrs	r3, r3, #24
 8109506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810950a:	ee07 3a90 	vmov	s15, r3
 810950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109516:	ee37 7a87 	vadd.f32	s14, s15, s14
 810951a:	edd7 6a07 	vldr	s13, [r7, #28]
 810951e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109526:	ee17 2a90 	vmov	r2, s15
 810952a:	687b      	ldr	r3, [r7, #4]
 810952c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810952e:	e008      	b.n	8109542 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8109530:	687b      	ldr	r3, [r7, #4]
 8109532:	2200      	movs	r2, #0
 8109534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	2200      	movs	r2, #0
 810953a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810953c:	687b      	ldr	r3, [r7, #4]
 810953e:	2200      	movs	r2, #0
 8109540:	609a      	str	r2, [r3, #8]
}
 8109542:	bf00      	nop
 8109544:	3724      	adds	r7, #36	; 0x24
 8109546:	46bd      	mov	sp, r7
 8109548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810954c:	4770      	bx	lr
 810954e:	bf00      	nop
 8109550:	58024400 	.word	0x58024400
 8109554:	03d09000 	.word	0x03d09000
 8109558:	46000000 	.word	0x46000000
 810955c:	4c742400 	.word	0x4c742400
 8109560:	4a742400 	.word	0x4a742400
 8109564:	4af42400 	.word	0x4af42400

08109568 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8109568:	b480      	push	{r7}
 810956a:	b089      	sub	sp, #36	; 0x24
 810956c:	af00      	add	r7, sp, #0
 810956e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109570:	4ba1      	ldr	r3, [pc, #644]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109574:	f003 0303 	and.w	r3, r3, #3
 8109578:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810957a:	4b9f      	ldr	r3, [pc, #636]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810957e:	0d1b      	lsrs	r3, r3, #20
 8109580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109584:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8109586:	4b9c      	ldr	r3, [pc, #624]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810958a:	0a1b      	lsrs	r3, r3, #8
 810958c:	f003 0301 	and.w	r3, r3, #1
 8109590:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8109592:	4b99      	ldr	r3, [pc, #612]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109596:	08db      	lsrs	r3, r3, #3
 8109598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810959c:	693a      	ldr	r2, [r7, #16]
 810959e:	fb02 f303 	mul.w	r3, r2, r3
 81095a2:	ee07 3a90 	vmov	s15, r3
 81095a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81095aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81095ae:	697b      	ldr	r3, [r7, #20]
 81095b0:	2b00      	cmp	r3, #0
 81095b2:	f000 8111 	beq.w	81097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81095b6:	69bb      	ldr	r3, [r7, #24]
 81095b8:	2b02      	cmp	r3, #2
 81095ba:	f000 8083 	beq.w	81096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81095be:	69bb      	ldr	r3, [r7, #24]
 81095c0:	2b02      	cmp	r3, #2
 81095c2:	f200 80a1 	bhi.w	8109708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81095c6:	69bb      	ldr	r3, [r7, #24]
 81095c8:	2b00      	cmp	r3, #0
 81095ca:	d003      	beq.n	81095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81095cc:	69bb      	ldr	r3, [r7, #24]
 81095ce:	2b01      	cmp	r3, #1
 81095d0:	d056      	beq.n	8109680 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81095d2:	e099      	b.n	8109708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81095d4:	4b88      	ldr	r3, [pc, #544]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81095d6:	681b      	ldr	r3, [r3, #0]
 81095d8:	f003 0320 	and.w	r3, r3, #32
 81095dc:	2b00      	cmp	r3, #0
 81095de:	d02d      	beq.n	810963c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81095e0:	4b85      	ldr	r3, [pc, #532]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81095e2:	681b      	ldr	r3, [r3, #0]
 81095e4:	08db      	lsrs	r3, r3, #3
 81095e6:	f003 0303 	and.w	r3, r3, #3
 81095ea:	4a84      	ldr	r2, [pc, #528]	; (81097fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81095ec:	fa22 f303 	lsr.w	r3, r2, r3
 81095f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81095f2:	68bb      	ldr	r3, [r7, #8]
 81095f4:	ee07 3a90 	vmov	s15, r3
 81095f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81095fc:	697b      	ldr	r3, [r7, #20]
 81095fe:	ee07 3a90 	vmov	s15, r3
 8109602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810960a:	4b7b      	ldr	r3, [pc, #492]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810960e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109612:	ee07 3a90 	vmov	s15, r3
 8109616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810961a:	ed97 6a03 	vldr	s12, [r7, #12]
 810961e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810962a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810962e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109636:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810963a:	e087      	b.n	810974c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810963c:	697b      	ldr	r3, [r7, #20]
 810963e:	ee07 3a90 	vmov	s15, r3
 8109642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109804 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810964a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810964e:	4b6a      	ldr	r3, [pc, #424]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109656:	ee07 3a90 	vmov	s15, r3
 810965a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810965e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109662:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810966a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810966e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109676:	ee67 7a27 	vmul.f32	s15, s14, s15
 810967a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810967e:	e065      	b.n	810974c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109680:	697b      	ldr	r3, [r7, #20]
 8109682:	ee07 3a90 	vmov	s15, r3
 8109686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810968a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810968e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109692:	4b59      	ldr	r3, [pc, #356]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810969a:	ee07 3a90 	vmov	s15, r3
 810969e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81096a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81096a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81096aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81096ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81096b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81096b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81096ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81096be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81096c2:	e043      	b.n	810974c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81096c4:	697b      	ldr	r3, [r7, #20]
 81096c6:	ee07 3a90 	vmov	s15, r3
 81096ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81096ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810980c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81096d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81096d6:	4b48      	ldr	r3, [pc, #288]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81096da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81096de:	ee07 3a90 	vmov	s15, r3
 81096e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81096e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81096ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81096ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81096f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81096f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81096fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81096fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109706:	e021      	b.n	810974c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109708:	697b      	ldr	r3, [r7, #20]
 810970a:	ee07 3a90 	vmov	s15, r3
 810970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810971a:	4b37      	ldr	r3, [pc, #220]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810971e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109722:	ee07 3a90 	vmov	s15, r3
 8109726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810972a:	ed97 6a03 	vldr	s12, [r7, #12]
 810972e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810973a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810973e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810974a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810974c:	4b2a      	ldr	r3, [pc, #168]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109750:	0a5b      	lsrs	r3, r3, #9
 8109752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109756:	ee07 3a90 	vmov	s15, r3
 810975a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810975e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109766:	edd7 6a07 	vldr	s13, [r7, #28]
 810976a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810976e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109772:	ee17 2a90 	vmov	r2, s15
 8109776:	687b      	ldr	r3, [r7, #4]
 8109778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810977a:	4b1f      	ldr	r3, [pc, #124]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810977e:	0c1b      	lsrs	r3, r3, #16
 8109780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109784:	ee07 3a90 	vmov	s15, r3
 8109788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810978c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109794:	edd7 6a07 	vldr	s13, [r7, #28]
 8109798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810979c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81097a0:	ee17 2a90 	vmov	r2, s15
 81097a4:	687b      	ldr	r3, [r7, #4]
 81097a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81097a8:	4b13      	ldr	r3, [pc, #76]	; (81097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81097aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81097ac:	0e1b      	lsrs	r3, r3, #24
 81097ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81097b2:	ee07 3a90 	vmov	s15, r3
 81097b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81097ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81097be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81097c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81097c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81097ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81097ce:	ee17 2a90 	vmov	r2, s15
 81097d2:	687b      	ldr	r3, [r7, #4]
 81097d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81097d6:	e008      	b.n	81097ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81097d8:	687b      	ldr	r3, [r7, #4]
 81097da:	2200      	movs	r2, #0
 81097dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81097de:	687b      	ldr	r3, [r7, #4]
 81097e0:	2200      	movs	r2, #0
 81097e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81097e4:	687b      	ldr	r3, [r7, #4]
 81097e6:	2200      	movs	r2, #0
 81097e8:	609a      	str	r2, [r3, #8]
}
 81097ea:	bf00      	nop
 81097ec:	3724      	adds	r7, #36	; 0x24
 81097ee:	46bd      	mov	sp, r7
 81097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097f4:	4770      	bx	lr
 81097f6:	bf00      	nop
 81097f8:	58024400 	.word	0x58024400
 81097fc:	03d09000 	.word	0x03d09000
 8109800:	46000000 	.word	0x46000000
 8109804:	4c742400 	.word	0x4c742400
 8109808:	4a742400 	.word	0x4a742400
 810980c:	4af42400 	.word	0x4af42400

08109810 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8109810:	b480      	push	{r7}
 8109812:	b089      	sub	sp, #36	; 0x24
 8109814:	af00      	add	r7, sp, #0
 8109816:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109818:	4ba0      	ldr	r3, [pc, #640]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810981a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810981c:	f003 0303 	and.w	r3, r3, #3
 8109820:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8109822:	4b9e      	ldr	r3, [pc, #632]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109826:	091b      	lsrs	r3, r3, #4
 8109828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810982c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810982e:	4b9b      	ldr	r3, [pc, #620]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109832:	f003 0301 	and.w	r3, r3, #1
 8109836:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8109838:	4b98      	ldr	r3, [pc, #608]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810983a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810983c:	08db      	lsrs	r3, r3, #3
 810983e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109842:	693a      	ldr	r2, [r7, #16]
 8109844:	fb02 f303 	mul.w	r3, r2, r3
 8109848:	ee07 3a90 	vmov	s15, r3
 810984c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109850:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8109854:	697b      	ldr	r3, [r7, #20]
 8109856:	2b00      	cmp	r3, #0
 8109858:	f000 8111 	beq.w	8109a7e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810985c:	69bb      	ldr	r3, [r7, #24]
 810985e:	2b02      	cmp	r3, #2
 8109860:	f000 8083 	beq.w	810996a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8109864:	69bb      	ldr	r3, [r7, #24]
 8109866:	2b02      	cmp	r3, #2
 8109868:	f200 80a1 	bhi.w	81099ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810986c:	69bb      	ldr	r3, [r7, #24]
 810986e:	2b00      	cmp	r3, #0
 8109870:	d003      	beq.n	810987a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8109872:	69bb      	ldr	r3, [r7, #24]
 8109874:	2b01      	cmp	r3, #1
 8109876:	d056      	beq.n	8109926 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8109878:	e099      	b.n	81099ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810987a:	4b88      	ldr	r3, [pc, #544]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810987c:	681b      	ldr	r3, [r3, #0]
 810987e:	f003 0320 	and.w	r3, r3, #32
 8109882:	2b00      	cmp	r3, #0
 8109884:	d02d      	beq.n	81098e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109886:	4b85      	ldr	r3, [pc, #532]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109888:	681b      	ldr	r3, [r3, #0]
 810988a:	08db      	lsrs	r3, r3, #3
 810988c:	f003 0303 	and.w	r3, r3, #3
 8109890:	4a83      	ldr	r2, [pc, #524]	; (8109aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8109892:	fa22 f303 	lsr.w	r3, r2, r3
 8109896:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109898:	68bb      	ldr	r3, [r7, #8]
 810989a:	ee07 3a90 	vmov	s15, r3
 810989e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81098a2:	697b      	ldr	r3, [r7, #20]
 81098a4:	ee07 3a90 	vmov	s15, r3
 81098a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81098ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81098b0:	4b7a      	ldr	r3, [pc, #488]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81098b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81098b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81098b8:	ee07 3a90 	vmov	s15, r3
 81098bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81098c0:	ed97 6a03 	vldr	s12, [r7, #12]
 81098c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8109aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81098c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81098cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81098d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81098d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81098d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81098dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81098e0:	e087      	b.n	81099f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81098e2:	697b      	ldr	r3, [r7, #20]
 81098e4:	ee07 3a90 	vmov	s15, r3
 81098e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81098ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8109aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81098f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81098f4:	4b69      	ldr	r3, [pc, #420]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81098f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81098f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81098fc:	ee07 3a90 	vmov	s15, r3
 8109900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109904:	ed97 6a03 	vldr	s12, [r7, #12]
 8109908:	eddf 5a66 	vldr	s11, [pc, #408]	; 8109aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810990c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810991c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109920:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109924:	e065      	b.n	81099f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109926:	697b      	ldr	r3, [r7, #20]
 8109928:	ee07 3a90 	vmov	s15, r3
 810992c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109930:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8109aac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8109934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109938:	4b58      	ldr	r3, [pc, #352]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810993c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109940:	ee07 3a90 	vmov	s15, r3
 8109944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109948:	ed97 6a03 	vldr	s12, [r7, #12]
 810994c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8109aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8109950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810995c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109964:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109968:	e043      	b.n	81099f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810996a:	697b      	ldr	r3, [r7, #20]
 810996c:	ee07 3a90 	vmov	s15, r3
 8109970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109974:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8109ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8109978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810997c:	4b47      	ldr	r3, [pc, #284]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810997e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109984:	ee07 3a90 	vmov	s15, r3
 8109988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810998c:	ed97 6a03 	vldr	s12, [r7, #12]
 8109990:	eddf 5a44 	vldr	s11, [pc, #272]	; 8109aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8109994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810999c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81099a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81099a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81099a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81099ac:	e021      	b.n	81099f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81099ae:	697b      	ldr	r3, [r7, #20]
 81099b0:	ee07 3a90 	vmov	s15, r3
 81099b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8109aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81099bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81099c0:	4b36      	ldr	r3, [pc, #216]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81099c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81099c8:	ee07 3a90 	vmov	s15, r3
 81099cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81099d0:	ed97 6a03 	vldr	s12, [r7, #12]
 81099d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8109aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81099d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81099dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81099e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81099e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81099e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81099ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81099f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 81099f2:	4b2a      	ldr	r3, [pc, #168]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81099f6:	0a5b      	lsrs	r3, r3, #9
 81099f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81099fc:	ee07 3a90 	vmov	s15, r3
 8109a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8109a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109a18:	ee17 2a90 	vmov	r2, s15
 8109a1c:	687b      	ldr	r3, [r7, #4]
 8109a1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8109a20:	4b1e      	ldr	r3, [pc, #120]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109a24:	0c1b      	lsrs	r3, r3, #16
 8109a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109a2a:	ee07 3a90 	vmov	s15, r3
 8109a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8109a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109a46:	ee17 2a90 	vmov	r2, s15
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8109a4e:	4b13      	ldr	r3, [pc, #76]	; (8109a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109a52:	0e1b      	lsrs	r3, r3, #24
 8109a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109a58:	ee07 3a90 	vmov	s15, r3
 8109a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8109a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109a74:	ee17 2a90 	vmov	r2, s15
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8109a7c:	e008      	b.n	8109a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8109a7e:	687b      	ldr	r3, [r7, #4]
 8109a80:	2200      	movs	r2, #0
 8109a82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8109a84:	687b      	ldr	r3, [r7, #4]
 8109a86:	2200      	movs	r2, #0
 8109a88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	2200      	movs	r2, #0
 8109a8e:	609a      	str	r2, [r3, #8]
}
 8109a90:	bf00      	nop
 8109a92:	3724      	adds	r7, #36	; 0x24
 8109a94:	46bd      	mov	sp, r7
 8109a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a9a:	4770      	bx	lr
 8109a9c:	58024400 	.word	0x58024400
 8109aa0:	03d09000 	.word	0x03d09000
 8109aa4:	46000000 	.word	0x46000000
 8109aa8:	4c742400 	.word	0x4c742400
 8109aac:	4a742400 	.word	0x4a742400
 8109ab0:	4af42400 	.word	0x4af42400

08109ab4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8109ab4:	b580      	push	{r7, lr}
 8109ab6:	b084      	sub	sp, #16
 8109ab8:	af00      	add	r7, sp, #0
 8109aba:	6078      	str	r0, [r7, #4]
 8109abc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109abe:	2300      	movs	r3, #0
 8109ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109ac2:	4b54      	ldr	r3, [pc, #336]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ac6:	f003 0303 	and.w	r3, r3, #3
 8109aca:	2b03      	cmp	r3, #3
 8109acc:	d101      	bne.n	8109ad2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8109ace:	2301      	movs	r3, #1
 8109ad0:	e09b      	b.n	8109c0a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8109ad2:	4b50      	ldr	r3, [pc, #320]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109ad4:	681b      	ldr	r3, [r3, #0]
 8109ad6:	4a4f      	ldr	r2, [pc, #316]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109ad8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8109adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109ade:	f7f7 fca7 	bl	8101430 <HAL_GetTick>
 8109ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109ae4:	e008      	b.n	8109af8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8109ae6:	f7f7 fca3 	bl	8101430 <HAL_GetTick>
 8109aea:	4602      	mov	r2, r0
 8109aec:	68bb      	ldr	r3, [r7, #8]
 8109aee:	1ad3      	subs	r3, r2, r3
 8109af0:	2b02      	cmp	r3, #2
 8109af2:	d901      	bls.n	8109af8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109af4:	2303      	movs	r3, #3
 8109af6:	e088      	b.n	8109c0a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109af8:	4b46      	ldr	r3, [pc, #280]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109b00:	2b00      	cmp	r3, #0
 8109b02:	d1f0      	bne.n	8109ae6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8109b04:	4b43      	ldr	r3, [pc, #268]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109b08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8109b0c:	687b      	ldr	r3, [r7, #4]
 8109b0e:	681b      	ldr	r3, [r3, #0]
 8109b10:	031b      	lsls	r3, r3, #12
 8109b12:	4940      	ldr	r1, [pc, #256]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b14:	4313      	orrs	r3, r2
 8109b16:	628b      	str	r3, [r1, #40]	; 0x28
 8109b18:	687b      	ldr	r3, [r7, #4]
 8109b1a:	685b      	ldr	r3, [r3, #4]
 8109b1c:	3b01      	subs	r3, #1
 8109b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109b22:	687b      	ldr	r3, [r7, #4]
 8109b24:	689b      	ldr	r3, [r3, #8]
 8109b26:	3b01      	subs	r3, #1
 8109b28:	025b      	lsls	r3, r3, #9
 8109b2a:	b29b      	uxth	r3, r3
 8109b2c:	431a      	orrs	r2, r3
 8109b2e:	687b      	ldr	r3, [r7, #4]
 8109b30:	68db      	ldr	r3, [r3, #12]
 8109b32:	3b01      	subs	r3, #1
 8109b34:	041b      	lsls	r3, r3, #16
 8109b36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109b3a:	431a      	orrs	r2, r3
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	691b      	ldr	r3, [r3, #16]
 8109b40:	3b01      	subs	r3, #1
 8109b42:	061b      	lsls	r3, r3, #24
 8109b44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109b48:	4932      	ldr	r1, [pc, #200]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b4a:	4313      	orrs	r3, r2
 8109b4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8109b4e:	4b31      	ldr	r3, [pc, #196]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8109b56:	687b      	ldr	r3, [r7, #4]
 8109b58:	695b      	ldr	r3, [r3, #20]
 8109b5a:	492e      	ldr	r1, [pc, #184]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b5c:	4313      	orrs	r3, r2
 8109b5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109b60:	4b2c      	ldr	r3, [pc, #176]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b64:	f023 0220 	bic.w	r2, r3, #32
 8109b68:	687b      	ldr	r3, [r7, #4]
 8109b6a:	699b      	ldr	r3, [r3, #24]
 8109b6c:	4929      	ldr	r1, [pc, #164]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b6e:	4313      	orrs	r3, r2
 8109b70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8109b72:	4b28      	ldr	r3, [pc, #160]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b76:	4a27      	ldr	r2, [pc, #156]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b78:	f023 0310 	bic.w	r3, r3, #16
 8109b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8109b7e:	4b25      	ldr	r3, [pc, #148]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109b86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109b8a:	687a      	ldr	r2, [r7, #4]
 8109b8c:	69d2      	ldr	r2, [r2, #28]
 8109b8e:	00d2      	lsls	r2, r2, #3
 8109b90:	4920      	ldr	r1, [pc, #128]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b92:	4313      	orrs	r3, r2
 8109b94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8109b96:	4b1f      	ldr	r3, [pc, #124]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b9a:	4a1e      	ldr	r2, [pc, #120]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109b9c:	f043 0310 	orr.w	r3, r3, #16
 8109ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8109ba2:	683b      	ldr	r3, [r7, #0]
 8109ba4:	2b00      	cmp	r3, #0
 8109ba6:	d106      	bne.n	8109bb6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8109ba8:	4b1a      	ldr	r3, [pc, #104]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109bac:	4a19      	ldr	r2, [pc, #100]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8109bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109bb4:	e00f      	b.n	8109bd6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109bb6:	683b      	ldr	r3, [r7, #0]
 8109bb8:	2b01      	cmp	r3, #1
 8109bba:	d106      	bne.n	8109bca <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8109bbc:	4b15      	ldr	r3, [pc, #84]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109bc0:	4a14      	ldr	r2, [pc, #80]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109bc8:	e005      	b.n	8109bd6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8109bca:	4b12      	ldr	r3, [pc, #72]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109bce:	4a11      	ldr	r2, [pc, #68]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8109bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8109bd6:	4b0f      	ldr	r3, [pc, #60]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bd8:	681b      	ldr	r3, [r3, #0]
 8109bda:	4a0e      	ldr	r2, [pc, #56]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8109be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109be2:	f7f7 fc25 	bl	8101430 <HAL_GetTick>
 8109be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109be8:	e008      	b.n	8109bfc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8109bea:	f7f7 fc21 	bl	8101430 <HAL_GetTick>
 8109bee:	4602      	mov	r2, r0
 8109bf0:	68bb      	ldr	r3, [r7, #8]
 8109bf2:	1ad3      	subs	r3, r2, r3
 8109bf4:	2b02      	cmp	r3, #2
 8109bf6:	d901      	bls.n	8109bfc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109bf8:	2303      	movs	r3, #3
 8109bfa:	e006      	b.n	8109c0a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109bfc:	4b05      	ldr	r3, [pc, #20]	; (8109c14 <RCCEx_PLL2_Config+0x160>)
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109c04:	2b00      	cmp	r3, #0
 8109c06:	d0f0      	beq.n	8109bea <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8109c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8109c0a:	4618      	mov	r0, r3
 8109c0c:	3710      	adds	r7, #16
 8109c0e:	46bd      	mov	sp, r7
 8109c10:	bd80      	pop	{r7, pc}
 8109c12:	bf00      	nop
 8109c14:	58024400 	.word	0x58024400

08109c18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8109c18:	b580      	push	{r7, lr}
 8109c1a:	b084      	sub	sp, #16
 8109c1c:	af00      	add	r7, sp, #0
 8109c1e:	6078      	str	r0, [r7, #4]
 8109c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109c22:	2300      	movs	r3, #0
 8109c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109c26:	4b54      	ldr	r3, [pc, #336]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109c2a:	f003 0303 	and.w	r3, r3, #3
 8109c2e:	2b03      	cmp	r3, #3
 8109c30:	d101      	bne.n	8109c36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8109c32:	2301      	movs	r3, #1
 8109c34:	e09b      	b.n	8109d6e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8109c36:	4b50      	ldr	r3, [pc, #320]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109c38:	681b      	ldr	r3, [r3, #0]
 8109c3a:	4a4f      	ldr	r2, [pc, #316]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109c42:	f7f7 fbf5 	bl	8101430 <HAL_GetTick>
 8109c46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109c48:	e008      	b.n	8109c5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109c4a:	f7f7 fbf1 	bl	8101430 <HAL_GetTick>
 8109c4e:	4602      	mov	r2, r0
 8109c50:	68bb      	ldr	r3, [r7, #8]
 8109c52:	1ad3      	subs	r3, r2, r3
 8109c54:	2b02      	cmp	r3, #2
 8109c56:	d901      	bls.n	8109c5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109c58:	2303      	movs	r3, #3
 8109c5a:	e088      	b.n	8109d6e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109c5c:	4b46      	ldr	r3, [pc, #280]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109c5e:	681b      	ldr	r3, [r3, #0]
 8109c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109c64:	2b00      	cmp	r3, #0
 8109c66:	d1f0      	bne.n	8109c4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8109c68:	4b43      	ldr	r3, [pc, #268]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109c6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8109c70:	687b      	ldr	r3, [r7, #4]
 8109c72:	681b      	ldr	r3, [r3, #0]
 8109c74:	051b      	lsls	r3, r3, #20
 8109c76:	4940      	ldr	r1, [pc, #256]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109c78:	4313      	orrs	r3, r2
 8109c7a:	628b      	str	r3, [r1, #40]	; 0x28
 8109c7c:	687b      	ldr	r3, [r7, #4]
 8109c7e:	685b      	ldr	r3, [r3, #4]
 8109c80:	3b01      	subs	r3, #1
 8109c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109c86:	687b      	ldr	r3, [r7, #4]
 8109c88:	689b      	ldr	r3, [r3, #8]
 8109c8a:	3b01      	subs	r3, #1
 8109c8c:	025b      	lsls	r3, r3, #9
 8109c8e:	b29b      	uxth	r3, r3
 8109c90:	431a      	orrs	r2, r3
 8109c92:	687b      	ldr	r3, [r7, #4]
 8109c94:	68db      	ldr	r3, [r3, #12]
 8109c96:	3b01      	subs	r3, #1
 8109c98:	041b      	lsls	r3, r3, #16
 8109c9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109c9e:	431a      	orrs	r2, r3
 8109ca0:	687b      	ldr	r3, [r7, #4]
 8109ca2:	691b      	ldr	r3, [r3, #16]
 8109ca4:	3b01      	subs	r3, #1
 8109ca6:	061b      	lsls	r3, r3, #24
 8109ca8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109cac:	4932      	ldr	r1, [pc, #200]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cae:	4313      	orrs	r3, r2
 8109cb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109cb2:	4b31      	ldr	r3, [pc, #196]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8109cba:	687b      	ldr	r3, [r7, #4]
 8109cbc:	695b      	ldr	r3, [r3, #20]
 8109cbe:	492e      	ldr	r1, [pc, #184]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cc0:	4313      	orrs	r3, r2
 8109cc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8109cc4:	4b2c      	ldr	r3, [pc, #176]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8109ccc:	687b      	ldr	r3, [r7, #4]
 8109cce:	699b      	ldr	r3, [r3, #24]
 8109cd0:	4929      	ldr	r1, [pc, #164]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cd2:	4313      	orrs	r3, r2
 8109cd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8109cd6:	4b28      	ldr	r3, [pc, #160]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cda:	4a27      	ldr	r2, [pc, #156]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109ce2:	4b25      	ldr	r3, [pc, #148]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109cea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109cee:	687a      	ldr	r2, [r7, #4]
 8109cf0:	69d2      	ldr	r2, [r2, #28]
 8109cf2:	00d2      	lsls	r2, r2, #3
 8109cf4:	4920      	ldr	r1, [pc, #128]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cf6:	4313      	orrs	r3, r2
 8109cf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8109cfa:	4b1f      	ldr	r3, [pc, #124]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cfe:	4a1e      	ldr	r2, [pc, #120]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8109d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8109d06:	683b      	ldr	r3, [r7, #0]
 8109d08:	2b00      	cmp	r3, #0
 8109d0a:	d106      	bne.n	8109d1a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109d0c:	4b1a      	ldr	r3, [pc, #104]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d10:	4a19      	ldr	r2, [pc, #100]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8109d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109d18:	e00f      	b.n	8109d3a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109d1a:	683b      	ldr	r3, [r7, #0]
 8109d1c:	2b01      	cmp	r3, #1
 8109d1e:	d106      	bne.n	8109d2e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109d20:	4b15      	ldr	r3, [pc, #84]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d24:	4a14      	ldr	r2, [pc, #80]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8109d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109d2c:	e005      	b.n	8109d3a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109d2e:	4b12      	ldr	r3, [pc, #72]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d32:	4a11      	ldr	r2, [pc, #68]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8109d38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8109d3a:	4b0f      	ldr	r3, [pc, #60]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d3c:	681b      	ldr	r3, [r3, #0]
 8109d3e:	4a0e      	ldr	r2, [pc, #56]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109d46:	f7f7 fb73 	bl	8101430 <HAL_GetTick>
 8109d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109d4c:	e008      	b.n	8109d60 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109d4e:	f7f7 fb6f 	bl	8101430 <HAL_GetTick>
 8109d52:	4602      	mov	r2, r0
 8109d54:	68bb      	ldr	r3, [r7, #8]
 8109d56:	1ad3      	subs	r3, r2, r3
 8109d58:	2b02      	cmp	r3, #2
 8109d5a:	d901      	bls.n	8109d60 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109d5c:	2303      	movs	r3, #3
 8109d5e:	e006      	b.n	8109d6e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109d60:	4b05      	ldr	r3, [pc, #20]	; (8109d78 <RCCEx_PLL3_Config+0x160>)
 8109d62:	681b      	ldr	r3, [r3, #0]
 8109d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109d68:	2b00      	cmp	r3, #0
 8109d6a:	d0f0      	beq.n	8109d4e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8109d6e:	4618      	mov	r0, r3
 8109d70:	3710      	adds	r7, #16
 8109d72:	46bd      	mov	sp, r7
 8109d74:	bd80      	pop	{r7, pc}
 8109d76:	bf00      	nop
 8109d78:	58024400 	.word	0x58024400

08109d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109d7c:	b580      	push	{r7, lr}
 8109d7e:	b082      	sub	sp, #8
 8109d80:	af00      	add	r7, sp, #0
 8109d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109d84:	687b      	ldr	r3, [r7, #4]
 8109d86:	2b00      	cmp	r3, #0
 8109d88:	d101      	bne.n	8109d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8109d8a:	2301      	movs	r3, #1
 8109d8c:	e049      	b.n	8109e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109d94:	b2db      	uxtb	r3, r3
 8109d96:	2b00      	cmp	r3, #0
 8109d98:	d106      	bne.n	8109da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109d9a:	687b      	ldr	r3, [r7, #4]
 8109d9c:	2200      	movs	r2, #0
 8109d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8109da2:	6878      	ldr	r0, [r7, #4]
 8109da4:	f00c fd12 	bl	81167cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109da8:	687b      	ldr	r3, [r7, #4]
 8109daa:	2202      	movs	r2, #2
 8109dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109db0:	687b      	ldr	r3, [r7, #4]
 8109db2:	681a      	ldr	r2, [r3, #0]
 8109db4:	687b      	ldr	r3, [r7, #4]
 8109db6:	3304      	adds	r3, #4
 8109db8:	4619      	mov	r1, r3
 8109dba:	4610      	mov	r0, r2
 8109dbc:	f000 fcc8 	bl	810a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109dc0:	687b      	ldr	r3, [r7, #4]
 8109dc2:	2201      	movs	r2, #1
 8109dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109dc8:	687b      	ldr	r3, [r7, #4]
 8109dca:	2201      	movs	r2, #1
 8109dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8109dd0:	687b      	ldr	r3, [r7, #4]
 8109dd2:	2201      	movs	r2, #1
 8109dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8109dd8:	687b      	ldr	r3, [r7, #4]
 8109dda:	2201      	movs	r2, #1
 8109ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8109de0:	687b      	ldr	r3, [r7, #4]
 8109de2:	2201      	movs	r2, #1
 8109de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8109de8:	687b      	ldr	r3, [r7, #4]
 8109dea:	2201      	movs	r2, #1
 8109dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	2201      	movs	r2, #1
 8109df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109df8:	687b      	ldr	r3, [r7, #4]
 8109dfa:	2201      	movs	r2, #1
 8109dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109e00:	687b      	ldr	r3, [r7, #4]
 8109e02:	2201      	movs	r2, #1
 8109e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109e08:	687b      	ldr	r3, [r7, #4]
 8109e0a:	2201      	movs	r2, #1
 8109e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109e10:	687b      	ldr	r3, [r7, #4]
 8109e12:	2201      	movs	r2, #1
 8109e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109e18:	687b      	ldr	r3, [r7, #4]
 8109e1a:	2201      	movs	r2, #1
 8109e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109e20:	2300      	movs	r3, #0
}
 8109e22:	4618      	mov	r0, r3
 8109e24:	3708      	adds	r7, #8
 8109e26:	46bd      	mov	sp, r7
 8109e28:	bd80      	pop	{r7, pc}
	...

08109e2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8109e2c:	b480      	push	{r7}
 8109e2e:	b085      	sub	sp, #20
 8109e30:	af00      	add	r7, sp, #0
 8109e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109e34:	687b      	ldr	r3, [r7, #4]
 8109e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109e3a:	b2db      	uxtb	r3, r3
 8109e3c:	2b01      	cmp	r3, #1
 8109e3e:	d001      	beq.n	8109e44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8109e40:	2301      	movs	r3, #1
 8109e42:	e04c      	b.n	8109ede <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	2202      	movs	r2, #2
 8109e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109e4c:	687b      	ldr	r3, [r7, #4]
 8109e4e:	681b      	ldr	r3, [r3, #0]
 8109e50:	4a26      	ldr	r2, [pc, #152]	; (8109eec <HAL_TIM_Base_Start+0xc0>)
 8109e52:	4293      	cmp	r3, r2
 8109e54:	d022      	beq.n	8109e9c <HAL_TIM_Base_Start+0x70>
 8109e56:	687b      	ldr	r3, [r7, #4]
 8109e58:	681b      	ldr	r3, [r3, #0]
 8109e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109e5e:	d01d      	beq.n	8109e9c <HAL_TIM_Base_Start+0x70>
 8109e60:	687b      	ldr	r3, [r7, #4]
 8109e62:	681b      	ldr	r3, [r3, #0]
 8109e64:	4a22      	ldr	r2, [pc, #136]	; (8109ef0 <HAL_TIM_Base_Start+0xc4>)
 8109e66:	4293      	cmp	r3, r2
 8109e68:	d018      	beq.n	8109e9c <HAL_TIM_Base_Start+0x70>
 8109e6a:	687b      	ldr	r3, [r7, #4]
 8109e6c:	681b      	ldr	r3, [r3, #0]
 8109e6e:	4a21      	ldr	r2, [pc, #132]	; (8109ef4 <HAL_TIM_Base_Start+0xc8>)
 8109e70:	4293      	cmp	r3, r2
 8109e72:	d013      	beq.n	8109e9c <HAL_TIM_Base_Start+0x70>
 8109e74:	687b      	ldr	r3, [r7, #4]
 8109e76:	681b      	ldr	r3, [r3, #0]
 8109e78:	4a1f      	ldr	r2, [pc, #124]	; (8109ef8 <HAL_TIM_Base_Start+0xcc>)
 8109e7a:	4293      	cmp	r3, r2
 8109e7c:	d00e      	beq.n	8109e9c <HAL_TIM_Base_Start+0x70>
 8109e7e:	687b      	ldr	r3, [r7, #4]
 8109e80:	681b      	ldr	r3, [r3, #0]
 8109e82:	4a1e      	ldr	r2, [pc, #120]	; (8109efc <HAL_TIM_Base_Start+0xd0>)
 8109e84:	4293      	cmp	r3, r2
 8109e86:	d009      	beq.n	8109e9c <HAL_TIM_Base_Start+0x70>
 8109e88:	687b      	ldr	r3, [r7, #4]
 8109e8a:	681b      	ldr	r3, [r3, #0]
 8109e8c:	4a1c      	ldr	r2, [pc, #112]	; (8109f00 <HAL_TIM_Base_Start+0xd4>)
 8109e8e:	4293      	cmp	r3, r2
 8109e90:	d004      	beq.n	8109e9c <HAL_TIM_Base_Start+0x70>
 8109e92:	687b      	ldr	r3, [r7, #4]
 8109e94:	681b      	ldr	r3, [r3, #0]
 8109e96:	4a1b      	ldr	r2, [pc, #108]	; (8109f04 <HAL_TIM_Base_Start+0xd8>)
 8109e98:	4293      	cmp	r3, r2
 8109e9a:	d115      	bne.n	8109ec8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	681b      	ldr	r3, [r3, #0]
 8109ea0:	689a      	ldr	r2, [r3, #8]
 8109ea2:	4b19      	ldr	r3, [pc, #100]	; (8109f08 <HAL_TIM_Base_Start+0xdc>)
 8109ea4:	4013      	ands	r3, r2
 8109ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109ea8:	68fb      	ldr	r3, [r7, #12]
 8109eaa:	2b06      	cmp	r3, #6
 8109eac:	d015      	beq.n	8109eda <HAL_TIM_Base_Start+0xae>
 8109eae:	68fb      	ldr	r3, [r7, #12]
 8109eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109eb4:	d011      	beq.n	8109eda <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8109eb6:	687b      	ldr	r3, [r7, #4]
 8109eb8:	681b      	ldr	r3, [r3, #0]
 8109eba:	681a      	ldr	r2, [r3, #0]
 8109ebc:	687b      	ldr	r3, [r7, #4]
 8109ebe:	681b      	ldr	r3, [r3, #0]
 8109ec0:	f042 0201 	orr.w	r2, r2, #1
 8109ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109ec6:	e008      	b.n	8109eda <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109ec8:	687b      	ldr	r3, [r7, #4]
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	681a      	ldr	r2, [r3, #0]
 8109ece:	687b      	ldr	r3, [r7, #4]
 8109ed0:	681b      	ldr	r3, [r3, #0]
 8109ed2:	f042 0201 	orr.w	r2, r2, #1
 8109ed6:	601a      	str	r2, [r3, #0]
 8109ed8:	e000      	b.n	8109edc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109edc:	2300      	movs	r3, #0
}
 8109ede:	4618      	mov	r0, r3
 8109ee0:	3714      	adds	r7, #20
 8109ee2:	46bd      	mov	sp, r7
 8109ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ee8:	4770      	bx	lr
 8109eea:	bf00      	nop
 8109eec:	40010000 	.word	0x40010000
 8109ef0:	40000400 	.word	0x40000400
 8109ef4:	40000800 	.word	0x40000800
 8109ef8:	40000c00 	.word	0x40000c00
 8109efc:	40010400 	.word	0x40010400
 8109f00:	40001800 	.word	0x40001800
 8109f04:	40014000 	.word	0x40014000
 8109f08:	00010007 	.word	0x00010007

08109f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8109f0c:	b480      	push	{r7}
 8109f0e:	b085      	sub	sp, #20
 8109f10:	af00      	add	r7, sp, #0
 8109f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109f14:	687b      	ldr	r3, [r7, #4]
 8109f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109f1a:	b2db      	uxtb	r3, r3
 8109f1c:	2b01      	cmp	r3, #1
 8109f1e:	d001      	beq.n	8109f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109f20:	2301      	movs	r3, #1
 8109f22:	e054      	b.n	8109fce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109f24:	687b      	ldr	r3, [r7, #4]
 8109f26:	2202      	movs	r2, #2
 8109f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109f2c:	687b      	ldr	r3, [r7, #4]
 8109f2e:	681b      	ldr	r3, [r3, #0]
 8109f30:	68da      	ldr	r2, [r3, #12]
 8109f32:	687b      	ldr	r3, [r7, #4]
 8109f34:	681b      	ldr	r3, [r3, #0]
 8109f36:	f042 0201 	orr.w	r2, r2, #1
 8109f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109f3c:	687b      	ldr	r3, [r7, #4]
 8109f3e:	681b      	ldr	r3, [r3, #0]
 8109f40:	4a26      	ldr	r2, [pc, #152]	; (8109fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8109f42:	4293      	cmp	r3, r2
 8109f44:	d022      	beq.n	8109f8c <HAL_TIM_Base_Start_IT+0x80>
 8109f46:	687b      	ldr	r3, [r7, #4]
 8109f48:	681b      	ldr	r3, [r3, #0]
 8109f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109f4e:	d01d      	beq.n	8109f8c <HAL_TIM_Base_Start_IT+0x80>
 8109f50:	687b      	ldr	r3, [r7, #4]
 8109f52:	681b      	ldr	r3, [r3, #0]
 8109f54:	4a22      	ldr	r2, [pc, #136]	; (8109fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8109f56:	4293      	cmp	r3, r2
 8109f58:	d018      	beq.n	8109f8c <HAL_TIM_Base_Start_IT+0x80>
 8109f5a:	687b      	ldr	r3, [r7, #4]
 8109f5c:	681b      	ldr	r3, [r3, #0]
 8109f5e:	4a21      	ldr	r2, [pc, #132]	; (8109fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8109f60:	4293      	cmp	r3, r2
 8109f62:	d013      	beq.n	8109f8c <HAL_TIM_Base_Start_IT+0x80>
 8109f64:	687b      	ldr	r3, [r7, #4]
 8109f66:	681b      	ldr	r3, [r3, #0]
 8109f68:	4a1f      	ldr	r2, [pc, #124]	; (8109fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8109f6a:	4293      	cmp	r3, r2
 8109f6c:	d00e      	beq.n	8109f8c <HAL_TIM_Base_Start_IT+0x80>
 8109f6e:	687b      	ldr	r3, [r7, #4]
 8109f70:	681b      	ldr	r3, [r3, #0]
 8109f72:	4a1e      	ldr	r2, [pc, #120]	; (8109fec <HAL_TIM_Base_Start_IT+0xe0>)
 8109f74:	4293      	cmp	r3, r2
 8109f76:	d009      	beq.n	8109f8c <HAL_TIM_Base_Start_IT+0x80>
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	681b      	ldr	r3, [r3, #0]
 8109f7c:	4a1c      	ldr	r2, [pc, #112]	; (8109ff0 <HAL_TIM_Base_Start_IT+0xe4>)
 8109f7e:	4293      	cmp	r3, r2
 8109f80:	d004      	beq.n	8109f8c <HAL_TIM_Base_Start_IT+0x80>
 8109f82:	687b      	ldr	r3, [r7, #4]
 8109f84:	681b      	ldr	r3, [r3, #0]
 8109f86:	4a1b      	ldr	r2, [pc, #108]	; (8109ff4 <HAL_TIM_Base_Start_IT+0xe8>)
 8109f88:	4293      	cmp	r3, r2
 8109f8a:	d115      	bne.n	8109fb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109f8c:	687b      	ldr	r3, [r7, #4]
 8109f8e:	681b      	ldr	r3, [r3, #0]
 8109f90:	689a      	ldr	r2, [r3, #8]
 8109f92:	4b19      	ldr	r3, [pc, #100]	; (8109ff8 <HAL_TIM_Base_Start_IT+0xec>)
 8109f94:	4013      	ands	r3, r2
 8109f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109f98:	68fb      	ldr	r3, [r7, #12]
 8109f9a:	2b06      	cmp	r3, #6
 8109f9c:	d015      	beq.n	8109fca <HAL_TIM_Base_Start_IT+0xbe>
 8109f9e:	68fb      	ldr	r3, [r7, #12]
 8109fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109fa4:	d011      	beq.n	8109fca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8109fa6:	687b      	ldr	r3, [r7, #4]
 8109fa8:	681b      	ldr	r3, [r3, #0]
 8109faa:	681a      	ldr	r2, [r3, #0]
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	681b      	ldr	r3, [r3, #0]
 8109fb0:	f042 0201 	orr.w	r2, r2, #1
 8109fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109fb6:	e008      	b.n	8109fca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109fb8:	687b      	ldr	r3, [r7, #4]
 8109fba:	681b      	ldr	r3, [r3, #0]
 8109fbc:	681a      	ldr	r2, [r3, #0]
 8109fbe:	687b      	ldr	r3, [r7, #4]
 8109fc0:	681b      	ldr	r3, [r3, #0]
 8109fc2:	f042 0201 	orr.w	r2, r2, #1
 8109fc6:	601a      	str	r2, [r3, #0]
 8109fc8:	e000      	b.n	8109fcc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109fcc:	2300      	movs	r3, #0
}
 8109fce:	4618      	mov	r0, r3
 8109fd0:	3714      	adds	r7, #20
 8109fd2:	46bd      	mov	sp, r7
 8109fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fd8:	4770      	bx	lr
 8109fda:	bf00      	nop
 8109fdc:	40010000 	.word	0x40010000
 8109fe0:	40000400 	.word	0x40000400
 8109fe4:	40000800 	.word	0x40000800
 8109fe8:	40000c00 	.word	0x40000c00
 8109fec:	40010400 	.word	0x40010400
 8109ff0:	40001800 	.word	0x40001800
 8109ff4:	40014000 	.word	0x40014000
 8109ff8:	00010007 	.word	0x00010007

08109ffc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8109ffc:	b580      	push	{r7, lr}
 8109ffe:	b082      	sub	sp, #8
 810a000:	af00      	add	r7, sp, #0
 810a002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810a004:	687b      	ldr	r3, [r7, #4]
 810a006:	2b00      	cmp	r3, #0
 810a008:	d101      	bne.n	810a00e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810a00a:	2301      	movs	r3, #1
 810a00c:	e049      	b.n	810a0a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810a014:	b2db      	uxtb	r3, r3
 810a016:	2b00      	cmp	r3, #0
 810a018:	d106      	bne.n	810a028 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810a01a:	687b      	ldr	r3, [r7, #4]
 810a01c:	2200      	movs	r2, #0
 810a01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810a022:	6878      	ldr	r0, [r7, #4]
 810a024:	f000 f841 	bl	810a0aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a028:	687b      	ldr	r3, [r7, #4]
 810a02a:	2202      	movs	r2, #2
 810a02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810a030:	687b      	ldr	r3, [r7, #4]
 810a032:	681a      	ldr	r2, [r3, #0]
 810a034:	687b      	ldr	r3, [r7, #4]
 810a036:	3304      	adds	r3, #4
 810a038:	4619      	mov	r1, r3
 810a03a:	4610      	mov	r0, r2
 810a03c:	f000 fb88 	bl	810a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810a040:	687b      	ldr	r3, [r7, #4]
 810a042:	2201      	movs	r2, #1
 810a044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a048:	687b      	ldr	r3, [r7, #4]
 810a04a:	2201      	movs	r2, #1
 810a04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810a050:	687b      	ldr	r3, [r7, #4]
 810a052:	2201      	movs	r2, #1
 810a054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810a058:	687b      	ldr	r3, [r7, #4]
 810a05a:	2201      	movs	r2, #1
 810a05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810a060:	687b      	ldr	r3, [r7, #4]
 810a062:	2201      	movs	r2, #1
 810a064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810a068:	687b      	ldr	r3, [r7, #4]
 810a06a:	2201      	movs	r2, #1
 810a06c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810a070:	687b      	ldr	r3, [r7, #4]
 810a072:	2201      	movs	r2, #1
 810a074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a078:	687b      	ldr	r3, [r7, #4]
 810a07a:	2201      	movs	r2, #1
 810a07c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a080:	687b      	ldr	r3, [r7, #4]
 810a082:	2201      	movs	r2, #1
 810a084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a088:	687b      	ldr	r3, [r7, #4]
 810a08a:	2201      	movs	r2, #1
 810a08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810a090:	687b      	ldr	r3, [r7, #4]
 810a092:	2201      	movs	r2, #1
 810a094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810a098:	687b      	ldr	r3, [r7, #4]
 810a09a:	2201      	movs	r2, #1
 810a09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810a0a0:	2300      	movs	r3, #0
}
 810a0a2:	4618      	mov	r0, r3
 810a0a4:	3708      	adds	r7, #8
 810a0a6:	46bd      	mov	sp, r7
 810a0a8:	bd80      	pop	{r7, pc}

0810a0aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810a0aa:	b480      	push	{r7}
 810a0ac:	b083      	sub	sp, #12
 810a0ae:	af00      	add	r7, sp, #0
 810a0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810a0b2:	bf00      	nop
 810a0b4:	370c      	adds	r7, #12
 810a0b6:	46bd      	mov	sp, r7
 810a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0bc:	4770      	bx	lr

0810a0be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810a0be:	b580      	push	{r7, lr}
 810a0c0:	b082      	sub	sp, #8
 810a0c2:	af00      	add	r7, sp, #0
 810a0c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810a0c6:	687b      	ldr	r3, [r7, #4]
 810a0c8:	681b      	ldr	r3, [r3, #0]
 810a0ca:	691b      	ldr	r3, [r3, #16]
 810a0cc:	f003 0302 	and.w	r3, r3, #2
 810a0d0:	2b02      	cmp	r3, #2
 810a0d2:	d122      	bne.n	810a11a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810a0d4:	687b      	ldr	r3, [r7, #4]
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	68db      	ldr	r3, [r3, #12]
 810a0da:	f003 0302 	and.w	r3, r3, #2
 810a0de:	2b02      	cmp	r3, #2
 810a0e0:	d11b      	bne.n	810a11a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810a0e2:	687b      	ldr	r3, [r7, #4]
 810a0e4:	681b      	ldr	r3, [r3, #0]
 810a0e6:	f06f 0202 	mvn.w	r2, #2
 810a0ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810a0ec:	687b      	ldr	r3, [r7, #4]
 810a0ee:	2201      	movs	r2, #1
 810a0f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810a0f2:	687b      	ldr	r3, [r7, #4]
 810a0f4:	681b      	ldr	r3, [r3, #0]
 810a0f6:	699b      	ldr	r3, [r3, #24]
 810a0f8:	f003 0303 	and.w	r3, r3, #3
 810a0fc:	2b00      	cmp	r3, #0
 810a0fe:	d003      	beq.n	810a108 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810a100:	6878      	ldr	r0, [r7, #4]
 810a102:	f000 fb11 	bl	810a728 <HAL_TIM_IC_CaptureCallback>
 810a106:	e005      	b.n	810a114 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810a108:	6878      	ldr	r0, [r7, #4]
 810a10a:	f000 fb03 	bl	810a714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a10e:	6878      	ldr	r0, [r7, #4]
 810a110:	f00b fe26 	bl	8115d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a114:	687b      	ldr	r3, [r7, #4]
 810a116:	2200      	movs	r2, #0
 810a118:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810a11a:	687b      	ldr	r3, [r7, #4]
 810a11c:	681b      	ldr	r3, [r3, #0]
 810a11e:	691b      	ldr	r3, [r3, #16]
 810a120:	f003 0304 	and.w	r3, r3, #4
 810a124:	2b04      	cmp	r3, #4
 810a126:	d122      	bne.n	810a16e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810a128:	687b      	ldr	r3, [r7, #4]
 810a12a:	681b      	ldr	r3, [r3, #0]
 810a12c:	68db      	ldr	r3, [r3, #12]
 810a12e:	f003 0304 	and.w	r3, r3, #4
 810a132:	2b04      	cmp	r3, #4
 810a134:	d11b      	bne.n	810a16e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810a136:	687b      	ldr	r3, [r7, #4]
 810a138:	681b      	ldr	r3, [r3, #0]
 810a13a:	f06f 0204 	mvn.w	r2, #4
 810a13e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810a140:	687b      	ldr	r3, [r7, #4]
 810a142:	2202      	movs	r2, #2
 810a144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810a146:	687b      	ldr	r3, [r7, #4]
 810a148:	681b      	ldr	r3, [r3, #0]
 810a14a:	699b      	ldr	r3, [r3, #24]
 810a14c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a150:	2b00      	cmp	r3, #0
 810a152:	d003      	beq.n	810a15c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810a154:	6878      	ldr	r0, [r7, #4]
 810a156:	f000 fae7 	bl	810a728 <HAL_TIM_IC_CaptureCallback>
 810a15a:	e005      	b.n	810a168 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810a15c:	6878      	ldr	r0, [r7, #4]
 810a15e:	f000 fad9 	bl	810a714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a162:	6878      	ldr	r0, [r7, #4]
 810a164:	f00b fdfc 	bl	8115d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a168:	687b      	ldr	r3, [r7, #4]
 810a16a:	2200      	movs	r2, #0
 810a16c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810a16e:	687b      	ldr	r3, [r7, #4]
 810a170:	681b      	ldr	r3, [r3, #0]
 810a172:	691b      	ldr	r3, [r3, #16]
 810a174:	f003 0308 	and.w	r3, r3, #8
 810a178:	2b08      	cmp	r3, #8
 810a17a:	d122      	bne.n	810a1c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810a17c:	687b      	ldr	r3, [r7, #4]
 810a17e:	681b      	ldr	r3, [r3, #0]
 810a180:	68db      	ldr	r3, [r3, #12]
 810a182:	f003 0308 	and.w	r3, r3, #8
 810a186:	2b08      	cmp	r3, #8
 810a188:	d11b      	bne.n	810a1c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810a18a:	687b      	ldr	r3, [r7, #4]
 810a18c:	681b      	ldr	r3, [r3, #0]
 810a18e:	f06f 0208 	mvn.w	r2, #8
 810a192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810a194:	687b      	ldr	r3, [r7, #4]
 810a196:	2204      	movs	r2, #4
 810a198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810a19a:	687b      	ldr	r3, [r7, #4]
 810a19c:	681b      	ldr	r3, [r3, #0]
 810a19e:	69db      	ldr	r3, [r3, #28]
 810a1a0:	f003 0303 	and.w	r3, r3, #3
 810a1a4:	2b00      	cmp	r3, #0
 810a1a6:	d003      	beq.n	810a1b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810a1a8:	6878      	ldr	r0, [r7, #4]
 810a1aa:	f000 fabd 	bl	810a728 <HAL_TIM_IC_CaptureCallback>
 810a1ae:	e005      	b.n	810a1bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810a1b0:	6878      	ldr	r0, [r7, #4]
 810a1b2:	f000 faaf 	bl	810a714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a1b6:	6878      	ldr	r0, [r7, #4]
 810a1b8:	f00b fdd2 	bl	8115d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a1bc:	687b      	ldr	r3, [r7, #4]
 810a1be:	2200      	movs	r2, #0
 810a1c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810a1c2:	687b      	ldr	r3, [r7, #4]
 810a1c4:	681b      	ldr	r3, [r3, #0]
 810a1c6:	691b      	ldr	r3, [r3, #16]
 810a1c8:	f003 0310 	and.w	r3, r3, #16
 810a1cc:	2b10      	cmp	r3, #16
 810a1ce:	d122      	bne.n	810a216 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810a1d0:	687b      	ldr	r3, [r7, #4]
 810a1d2:	681b      	ldr	r3, [r3, #0]
 810a1d4:	68db      	ldr	r3, [r3, #12]
 810a1d6:	f003 0310 	and.w	r3, r3, #16
 810a1da:	2b10      	cmp	r3, #16
 810a1dc:	d11b      	bne.n	810a216 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810a1de:	687b      	ldr	r3, [r7, #4]
 810a1e0:	681b      	ldr	r3, [r3, #0]
 810a1e2:	f06f 0210 	mvn.w	r2, #16
 810a1e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810a1e8:	687b      	ldr	r3, [r7, #4]
 810a1ea:	2208      	movs	r2, #8
 810a1ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810a1ee:	687b      	ldr	r3, [r7, #4]
 810a1f0:	681b      	ldr	r3, [r3, #0]
 810a1f2:	69db      	ldr	r3, [r3, #28]
 810a1f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a1f8:	2b00      	cmp	r3, #0
 810a1fa:	d003      	beq.n	810a204 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810a1fc:	6878      	ldr	r0, [r7, #4]
 810a1fe:	f000 fa93 	bl	810a728 <HAL_TIM_IC_CaptureCallback>
 810a202:	e005      	b.n	810a210 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810a204:	6878      	ldr	r0, [r7, #4]
 810a206:	f000 fa85 	bl	810a714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a20a:	6878      	ldr	r0, [r7, #4]
 810a20c:	f00b fda8 	bl	8115d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a210:	687b      	ldr	r3, [r7, #4]
 810a212:	2200      	movs	r2, #0
 810a214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810a216:	687b      	ldr	r3, [r7, #4]
 810a218:	681b      	ldr	r3, [r3, #0]
 810a21a:	691b      	ldr	r3, [r3, #16]
 810a21c:	f003 0301 	and.w	r3, r3, #1
 810a220:	2b01      	cmp	r3, #1
 810a222:	d10e      	bne.n	810a242 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810a224:	687b      	ldr	r3, [r7, #4]
 810a226:	681b      	ldr	r3, [r3, #0]
 810a228:	68db      	ldr	r3, [r3, #12]
 810a22a:	f003 0301 	and.w	r3, r3, #1
 810a22e:	2b01      	cmp	r3, #1
 810a230:	d107      	bne.n	810a242 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810a232:	687b      	ldr	r3, [r7, #4]
 810a234:	681b      	ldr	r3, [r3, #0]
 810a236:	f06f 0201 	mvn.w	r2, #1
 810a23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810a23c:	6878      	ldr	r0, [r7, #4]
 810a23e:	f00b ff1b 	bl	8116078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810a242:	687b      	ldr	r3, [r7, #4]
 810a244:	681b      	ldr	r3, [r3, #0]
 810a246:	691b      	ldr	r3, [r3, #16]
 810a248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a24c:	2b80      	cmp	r3, #128	; 0x80
 810a24e:	d10e      	bne.n	810a26e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810a250:	687b      	ldr	r3, [r7, #4]
 810a252:	681b      	ldr	r3, [r3, #0]
 810a254:	68db      	ldr	r3, [r3, #12]
 810a256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a25a:	2b80      	cmp	r3, #128	; 0x80
 810a25c:	d107      	bne.n	810a26e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810a25e:	687b      	ldr	r3, [r7, #4]
 810a260:	681b      	ldr	r3, [r3, #0]
 810a262:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810a266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810a268:	6878      	ldr	r0, [r7, #4]
 810a26a:	f000 ff93 	bl	810b194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810a26e:	687b      	ldr	r3, [r7, #4]
 810a270:	681b      	ldr	r3, [r3, #0]
 810a272:	691b      	ldr	r3, [r3, #16]
 810a274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a27c:	d10e      	bne.n	810a29c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	681b      	ldr	r3, [r3, #0]
 810a282:	68db      	ldr	r3, [r3, #12]
 810a284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a288:	2b80      	cmp	r3, #128	; 0x80
 810a28a:	d107      	bne.n	810a29c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810a28c:	687b      	ldr	r3, [r7, #4]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810a294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810a296:	6878      	ldr	r0, [r7, #4]
 810a298:	f000 ff86 	bl	810b1a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810a29c:	687b      	ldr	r3, [r7, #4]
 810a29e:	681b      	ldr	r3, [r3, #0]
 810a2a0:	691b      	ldr	r3, [r3, #16]
 810a2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a2a6:	2b40      	cmp	r3, #64	; 0x40
 810a2a8:	d10e      	bne.n	810a2c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810a2aa:	687b      	ldr	r3, [r7, #4]
 810a2ac:	681b      	ldr	r3, [r3, #0]
 810a2ae:	68db      	ldr	r3, [r3, #12]
 810a2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a2b4:	2b40      	cmp	r3, #64	; 0x40
 810a2b6:	d107      	bne.n	810a2c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810a2b8:	687b      	ldr	r3, [r7, #4]
 810a2ba:	681b      	ldr	r3, [r3, #0]
 810a2bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810a2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810a2c2:	6878      	ldr	r0, [r7, #4]
 810a2c4:	f000 fa3a 	bl	810a73c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810a2c8:	687b      	ldr	r3, [r7, #4]
 810a2ca:	681b      	ldr	r3, [r3, #0]
 810a2cc:	691b      	ldr	r3, [r3, #16]
 810a2ce:	f003 0320 	and.w	r3, r3, #32
 810a2d2:	2b20      	cmp	r3, #32
 810a2d4:	d10e      	bne.n	810a2f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810a2d6:	687b      	ldr	r3, [r7, #4]
 810a2d8:	681b      	ldr	r3, [r3, #0]
 810a2da:	68db      	ldr	r3, [r3, #12]
 810a2dc:	f003 0320 	and.w	r3, r3, #32
 810a2e0:	2b20      	cmp	r3, #32
 810a2e2:	d107      	bne.n	810a2f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810a2e4:	687b      	ldr	r3, [r7, #4]
 810a2e6:	681b      	ldr	r3, [r3, #0]
 810a2e8:	f06f 0220 	mvn.w	r2, #32
 810a2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810a2ee:	6878      	ldr	r0, [r7, #4]
 810a2f0:	f000 ff46 	bl	810b180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810a2f4:	bf00      	nop
 810a2f6:	3708      	adds	r7, #8
 810a2f8:	46bd      	mov	sp, r7
 810a2fa:	bd80      	pop	{r7, pc}

0810a2fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810a2fc:	b580      	push	{r7, lr}
 810a2fe:	b086      	sub	sp, #24
 810a300:	af00      	add	r7, sp, #0
 810a302:	60f8      	str	r0, [r7, #12]
 810a304:	60b9      	str	r1, [r7, #8]
 810a306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810a308:	2300      	movs	r3, #0
 810a30a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810a30c:	68fb      	ldr	r3, [r7, #12]
 810a30e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810a312:	2b01      	cmp	r3, #1
 810a314:	d101      	bne.n	810a31a <HAL_TIM_PWM_ConfigChannel+0x1e>
 810a316:	2302      	movs	r3, #2
 810a318:	e0ff      	b.n	810a51a <HAL_TIM_PWM_ConfigChannel+0x21e>
 810a31a:	68fb      	ldr	r3, [r7, #12]
 810a31c:	2201      	movs	r2, #1
 810a31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 810a322:	687b      	ldr	r3, [r7, #4]
 810a324:	2b14      	cmp	r3, #20
 810a326:	f200 80f0 	bhi.w	810a50a <HAL_TIM_PWM_ConfigChannel+0x20e>
 810a32a:	a201      	add	r2, pc, #4	; (adr r2, 810a330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810a32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a330:	0810a385 	.word	0x0810a385
 810a334:	0810a50b 	.word	0x0810a50b
 810a338:	0810a50b 	.word	0x0810a50b
 810a33c:	0810a50b 	.word	0x0810a50b
 810a340:	0810a3c5 	.word	0x0810a3c5
 810a344:	0810a50b 	.word	0x0810a50b
 810a348:	0810a50b 	.word	0x0810a50b
 810a34c:	0810a50b 	.word	0x0810a50b
 810a350:	0810a407 	.word	0x0810a407
 810a354:	0810a50b 	.word	0x0810a50b
 810a358:	0810a50b 	.word	0x0810a50b
 810a35c:	0810a50b 	.word	0x0810a50b
 810a360:	0810a447 	.word	0x0810a447
 810a364:	0810a50b 	.word	0x0810a50b
 810a368:	0810a50b 	.word	0x0810a50b
 810a36c:	0810a50b 	.word	0x0810a50b
 810a370:	0810a489 	.word	0x0810a489
 810a374:	0810a50b 	.word	0x0810a50b
 810a378:	0810a50b 	.word	0x0810a50b
 810a37c:	0810a50b 	.word	0x0810a50b
 810a380:	0810a4c9 	.word	0x0810a4c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810a384:	68fb      	ldr	r3, [r7, #12]
 810a386:	681b      	ldr	r3, [r3, #0]
 810a388:	68b9      	ldr	r1, [r7, #8]
 810a38a:	4618      	mov	r0, r3
 810a38c:	f000 fa7a 	bl	810a884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810a390:	68fb      	ldr	r3, [r7, #12]
 810a392:	681b      	ldr	r3, [r3, #0]
 810a394:	699a      	ldr	r2, [r3, #24]
 810a396:	68fb      	ldr	r3, [r7, #12]
 810a398:	681b      	ldr	r3, [r3, #0]
 810a39a:	f042 0208 	orr.w	r2, r2, #8
 810a39e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810a3a0:	68fb      	ldr	r3, [r7, #12]
 810a3a2:	681b      	ldr	r3, [r3, #0]
 810a3a4:	699a      	ldr	r2, [r3, #24]
 810a3a6:	68fb      	ldr	r3, [r7, #12]
 810a3a8:	681b      	ldr	r3, [r3, #0]
 810a3aa:	f022 0204 	bic.w	r2, r2, #4
 810a3ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810a3b0:	68fb      	ldr	r3, [r7, #12]
 810a3b2:	681b      	ldr	r3, [r3, #0]
 810a3b4:	6999      	ldr	r1, [r3, #24]
 810a3b6:	68bb      	ldr	r3, [r7, #8]
 810a3b8:	691a      	ldr	r2, [r3, #16]
 810a3ba:	68fb      	ldr	r3, [r7, #12]
 810a3bc:	681b      	ldr	r3, [r3, #0]
 810a3be:	430a      	orrs	r2, r1
 810a3c0:	619a      	str	r2, [r3, #24]
      break;
 810a3c2:	e0a5      	b.n	810a510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810a3c4:	68fb      	ldr	r3, [r7, #12]
 810a3c6:	681b      	ldr	r3, [r3, #0]
 810a3c8:	68b9      	ldr	r1, [r7, #8]
 810a3ca:	4618      	mov	r0, r3
 810a3cc:	f000 faea 	bl	810a9a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810a3d0:	68fb      	ldr	r3, [r7, #12]
 810a3d2:	681b      	ldr	r3, [r3, #0]
 810a3d4:	699a      	ldr	r2, [r3, #24]
 810a3d6:	68fb      	ldr	r3, [r7, #12]
 810a3d8:	681b      	ldr	r3, [r3, #0]
 810a3da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a3de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810a3e0:	68fb      	ldr	r3, [r7, #12]
 810a3e2:	681b      	ldr	r3, [r3, #0]
 810a3e4:	699a      	ldr	r2, [r3, #24]
 810a3e6:	68fb      	ldr	r3, [r7, #12]
 810a3e8:	681b      	ldr	r3, [r3, #0]
 810a3ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810a3ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810a3f0:	68fb      	ldr	r3, [r7, #12]
 810a3f2:	681b      	ldr	r3, [r3, #0]
 810a3f4:	6999      	ldr	r1, [r3, #24]
 810a3f6:	68bb      	ldr	r3, [r7, #8]
 810a3f8:	691b      	ldr	r3, [r3, #16]
 810a3fa:	021a      	lsls	r2, r3, #8
 810a3fc:	68fb      	ldr	r3, [r7, #12]
 810a3fe:	681b      	ldr	r3, [r3, #0]
 810a400:	430a      	orrs	r2, r1
 810a402:	619a      	str	r2, [r3, #24]
      break;
 810a404:	e084      	b.n	810a510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810a406:	68fb      	ldr	r3, [r7, #12]
 810a408:	681b      	ldr	r3, [r3, #0]
 810a40a:	68b9      	ldr	r1, [r7, #8]
 810a40c:	4618      	mov	r0, r3
 810a40e:	f000 fb53 	bl	810aab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810a412:	68fb      	ldr	r3, [r7, #12]
 810a414:	681b      	ldr	r3, [r3, #0]
 810a416:	69da      	ldr	r2, [r3, #28]
 810a418:	68fb      	ldr	r3, [r7, #12]
 810a41a:	681b      	ldr	r3, [r3, #0]
 810a41c:	f042 0208 	orr.w	r2, r2, #8
 810a420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810a422:	68fb      	ldr	r3, [r7, #12]
 810a424:	681b      	ldr	r3, [r3, #0]
 810a426:	69da      	ldr	r2, [r3, #28]
 810a428:	68fb      	ldr	r3, [r7, #12]
 810a42a:	681b      	ldr	r3, [r3, #0]
 810a42c:	f022 0204 	bic.w	r2, r2, #4
 810a430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810a432:	68fb      	ldr	r3, [r7, #12]
 810a434:	681b      	ldr	r3, [r3, #0]
 810a436:	69d9      	ldr	r1, [r3, #28]
 810a438:	68bb      	ldr	r3, [r7, #8]
 810a43a:	691a      	ldr	r2, [r3, #16]
 810a43c:	68fb      	ldr	r3, [r7, #12]
 810a43e:	681b      	ldr	r3, [r3, #0]
 810a440:	430a      	orrs	r2, r1
 810a442:	61da      	str	r2, [r3, #28]
      break;
 810a444:	e064      	b.n	810a510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810a446:	68fb      	ldr	r3, [r7, #12]
 810a448:	681b      	ldr	r3, [r3, #0]
 810a44a:	68b9      	ldr	r1, [r7, #8]
 810a44c:	4618      	mov	r0, r3
 810a44e:	f000 fbbb 	bl	810abc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810a452:	68fb      	ldr	r3, [r7, #12]
 810a454:	681b      	ldr	r3, [r3, #0]
 810a456:	69da      	ldr	r2, [r3, #28]
 810a458:	68fb      	ldr	r3, [r7, #12]
 810a45a:	681b      	ldr	r3, [r3, #0]
 810a45c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810a462:	68fb      	ldr	r3, [r7, #12]
 810a464:	681b      	ldr	r3, [r3, #0]
 810a466:	69da      	ldr	r2, [r3, #28]
 810a468:	68fb      	ldr	r3, [r7, #12]
 810a46a:	681b      	ldr	r3, [r3, #0]
 810a46c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810a470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810a472:	68fb      	ldr	r3, [r7, #12]
 810a474:	681b      	ldr	r3, [r3, #0]
 810a476:	69d9      	ldr	r1, [r3, #28]
 810a478:	68bb      	ldr	r3, [r7, #8]
 810a47a:	691b      	ldr	r3, [r3, #16]
 810a47c:	021a      	lsls	r2, r3, #8
 810a47e:	68fb      	ldr	r3, [r7, #12]
 810a480:	681b      	ldr	r3, [r3, #0]
 810a482:	430a      	orrs	r2, r1
 810a484:	61da      	str	r2, [r3, #28]
      break;
 810a486:	e043      	b.n	810a510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810a488:	68fb      	ldr	r3, [r7, #12]
 810a48a:	681b      	ldr	r3, [r3, #0]
 810a48c:	68b9      	ldr	r1, [r7, #8]
 810a48e:	4618      	mov	r0, r3
 810a490:	f000 fc04 	bl	810ac9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810a494:	68fb      	ldr	r3, [r7, #12]
 810a496:	681b      	ldr	r3, [r3, #0]
 810a498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a49a:	68fb      	ldr	r3, [r7, #12]
 810a49c:	681b      	ldr	r3, [r3, #0]
 810a49e:	f042 0208 	orr.w	r2, r2, #8
 810a4a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810a4a4:	68fb      	ldr	r3, [r7, #12]
 810a4a6:	681b      	ldr	r3, [r3, #0]
 810a4a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a4aa:	68fb      	ldr	r3, [r7, #12]
 810a4ac:	681b      	ldr	r3, [r3, #0]
 810a4ae:	f022 0204 	bic.w	r2, r2, #4
 810a4b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810a4b4:	68fb      	ldr	r3, [r7, #12]
 810a4b6:	681b      	ldr	r3, [r3, #0]
 810a4b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810a4ba:	68bb      	ldr	r3, [r7, #8]
 810a4bc:	691a      	ldr	r2, [r3, #16]
 810a4be:	68fb      	ldr	r3, [r7, #12]
 810a4c0:	681b      	ldr	r3, [r3, #0]
 810a4c2:	430a      	orrs	r2, r1
 810a4c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810a4c6:	e023      	b.n	810a510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810a4c8:	68fb      	ldr	r3, [r7, #12]
 810a4ca:	681b      	ldr	r3, [r3, #0]
 810a4cc:	68b9      	ldr	r1, [r7, #8]
 810a4ce:	4618      	mov	r0, r3
 810a4d0:	f000 fc48 	bl	810ad64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810a4d4:	68fb      	ldr	r3, [r7, #12]
 810a4d6:	681b      	ldr	r3, [r3, #0]
 810a4d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a4da:	68fb      	ldr	r3, [r7, #12]
 810a4dc:	681b      	ldr	r3, [r3, #0]
 810a4de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a4e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810a4e4:	68fb      	ldr	r3, [r7, #12]
 810a4e6:	681b      	ldr	r3, [r3, #0]
 810a4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a4ea:	68fb      	ldr	r3, [r7, #12]
 810a4ec:	681b      	ldr	r3, [r3, #0]
 810a4ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810a4f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810a4f4:	68fb      	ldr	r3, [r7, #12]
 810a4f6:	681b      	ldr	r3, [r3, #0]
 810a4f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810a4fa:	68bb      	ldr	r3, [r7, #8]
 810a4fc:	691b      	ldr	r3, [r3, #16]
 810a4fe:	021a      	lsls	r2, r3, #8
 810a500:	68fb      	ldr	r3, [r7, #12]
 810a502:	681b      	ldr	r3, [r3, #0]
 810a504:	430a      	orrs	r2, r1
 810a506:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810a508:	e002      	b.n	810a510 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810a50a:	2301      	movs	r3, #1
 810a50c:	75fb      	strb	r3, [r7, #23]
      break;
 810a50e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810a510:	68fb      	ldr	r3, [r7, #12]
 810a512:	2200      	movs	r2, #0
 810a514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810a518:	7dfb      	ldrb	r3, [r7, #23]
}
 810a51a:	4618      	mov	r0, r3
 810a51c:	3718      	adds	r7, #24
 810a51e:	46bd      	mov	sp, r7
 810a520:	bd80      	pop	{r7, pc}
 810a522:	bf00      	nop

0810a524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810a524:	b580      	push	{r7, lr}
 810a526:	b084      	sub	sp, #16
 810a528:	af00      	add	r7, sp, #0
 810a52a:	6078      	str	r0, [r7, #4]
 810a52c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810a52e:	2300      	movs	r3, #0
 810a530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810a532:	687b      	ldr	r3, [r7, #4]
 810a534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810a538:	2b01      	cmp	r3, #1
 810a53a:	d101      	bne.n	810a540 <HAL_TIM_ConfigClockSource+0x1c>
 810a53c:	2302      	movs	r3, #2
 810a53e:	e0de      	b.n	810a6fe <HAL_TIM_ConfigClockSource+0x1da>
 810a540:	687b      	ldr	r3, [r7, #4]
 810a542:	2201      	movs	r2, #1
 810a544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810a548:	687b      	ldr	r3, [r7, #4]
 810a54a:	2202      	movs	r2, #2
 810a54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810a550:	687b      	ldr	r3, [r7, #4]
 810a552:	681b      	ldr	r3, [r3, #0]
 810a554:	689b      	ldr	r3, [r3, #8]
 810a556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810a558:	68bb      	ldr	r3, [r7, #8]
 810a55a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810a55e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810a562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810a564:	68bb      	ldr	r3, [r7, #8]
 810a566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a56a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810a56c:	687b      	ldr	r3, [r7, #4]
 810a56e:	681b      	ldr	r3, [r3, #0]
 810a570:	68ba      	ldr	r2, [r7, #8]
 810a572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810a574:	683b      	ldr	r3, [r7, #0]
 810a576:	681b      	ldr	r3, [r3, #0]
 810a578:	4a63      	ldr	r2, [pc, #396]	; (810a708 <HAL_TIM_ConfigClockSource+0x1e4>)
 810a57a:	4293      	cmp	r3, r2
 810a57c:	f000 80a9 	beq.w	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a580:	4a61      	ldr	r2, [pc, #388]	; (810a708 <HAL_TIM_ConfigClockSource+0x1e4>)
 810a582:	4293      	cmp	r3, r2
 810a584:	f200 80ae 	bhi.w	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a588:	4a60      	ldr	r2, [pc, #384]	; (810a70c <HAL_TIM_ConfigClockSource+0x1e8>)
 810a58a:	4293      	cmp	r3, r2
 810a58c:	f000 80a1 	beq.w	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a590:	4a5e      	ldr	r2, [pc, #376]	; (810a70c <HAL_TIM_ConfigClockSource+0x1e8>)
 810a592:	4293      	cmp	r3, r2
 810a594:	f200 80a6 	bhi.w	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a598:	4a5d      	ldr	r2, [pc, #372]	; (810a710 <HAL_TIM_ConfigClockSource+0x1ec>)
 810a59a:	4293      	cmp	r3, r2
 810a59c:	f000 8099 	beq.w	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a5a0:	4a5b      	ldr	r2, [pc, #364]	; (810a710 <HAL_TIM_ConfigClockSource+0x1ec>)
 810a5a2:	4293      	cmp	r3, r2
 810a5a4:	f200 809e 	bhi.w	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810a5ac:	f000 8091 	beq.w	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a5b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810a5b4:	f200 8096 	bhi.w	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a5bc:	f000 8089 	beq.w	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a5c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a5c4:	f200 808e 	bhi.w	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a5cc:	d03e      	beq.n	810a64c <HAL_TIM_ConfigClockSource+0x128>
 810a5ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a5d2:	f200 8087 	bhi.w	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a5da:	f000 8086 	beq.w	810a6ea <HAL_TIM_ConfigClockSource+0x1c6>
 810a5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a5e2:	d87f      	bhi.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5e4:	2b70      	cmp	r3, #112	; 0x70
 810a5e6:	d01a      	beq.n	810a61e <HAL_TIM_ConfigClockSource+0xfa>
 810a5e8:	2b70      	cmp	r3, #112	; 0x70
 810a5ea:	d87b      	bhi.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5ec:	2b60      	cmp	r3, #96	; 0x60
 810a5ee:	d050      	beq.n	810a692 <HAL_TIM_ConfigClockSource+0x16e>
 810a5f0:	2b60      	cmp	r3, #96	; 0x60
 810a5f2:	d877      	bhi.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5f4:	2b50      	cmp	r3, #80	; 0x50
 810a5f6:	d03c      	beq.n	810a672 <HAL_TIM_ConfigClockSource+0x14e>
 810a5f8:	2b50      	cmp	r3, #80	; 0x50
 810a5fa:	d873      	bhi.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a5fc:	2b40      	cmp	r3, #64	; 0x40
 810a5fe:	d058      	beq.n	810a6b2 <HAL_TIM_ConfigClockSource+0x18e>
 810a600:	2b40      	cmp	r3, #64	; 0x40
 810a602:	d86f      	bhi.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a604:	2b30      	cmp	r3, #48	; 0x30
 810a606:	d064      	beq.n	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a608:	2b30      	cmp	r3, #48	; 0x30
 810a60a:	d86b      	bhi.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a60c:	2b20      	cmp	r3, #32
 810a60e:	d060      	beq.n	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a610:	2b20      	cmp	r3, #32
 810a612:	d867      	bhi.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a614:	2b00      	cmp	r3, #0
 810a616:	d05c      	beq.n	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a618:	2b10      	cmp	r3, #16
 810a61a:	d05a      	beq.n	810a6d2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a61c:	e062      	b.n	810a6e4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	6818      	ldr	r0, [r3, #0]
 810a622:	683b      	ldr	r3, [r7, #0]
 810a624:	6899      	ldr	r1, [r3, #8]
 810a626:	683b      	ldr	r3, [r7, #0]
 810a628:	685a      	ldr	r2, [r3, #4]
 810a62a:	683b      	ldr	r3, [r7, #0]
 810a62c:	68db      	ldr	r3, [r3, #12]
 810a62e:	f000 fc7b 	bl	810af28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810a632:	687b      	ldr	r3, [r7, #4]
 810a634:	681b      	ldr	r3, [r3, #0]
 810a636:	689b      	ldr	r3, [r3, #8]
 810a638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810a63a:	68bb      	ldr	r3, [r7, #8]
 810a63c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810a640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810a642:	687b      	ldr	r3, [r7, #4]
 810a644:	681b      	ldr	r3, [r3, #0]
 810a646:	68ba      	ldr	r2, [r7, #8]
 810a648:	609a      	str	r2, [r3, #8]
      break;
 810a64a:	e04f      	b.n	810a6ec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810a64c:	687b      	ldr	r3, [r7, #4]
 810a64e:	6818      	ldr	r0, [r3, #0]
 810a650:	683b      	ldr	r3, [r7, #0]
 810a652:	6899      	ldr	r1, [r3, #8]
 810a654:	683b      	ldr	r3, [r7, #0]
 810a656:	685a      	ldr	r2, [r3, #4]
 810a658:	683b      	ldr	r3, [r7, #0]
 810a65a:	68db      	ldr	r3, [r3, #12]
 810a65c:	f000 fc64 	bl	810af28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810a660:	687b      	ldr	r3, [r7, #4]
 810a662:	681b      	ldr	r3, [r3, #0]
 810a664:	689a      	ldr	r2, [r3, #8]
 810a666:	687b      	ldr	r3, [r7, #4]
 810a668:	681b      	ldr	r3, [r3, #0]
 810a66a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810a66e:	609a      	str	r2, [r3, #8]
      break;
 810a670:	e03c      	b.n	810a6ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810a672:	687b      	ldr	r3, [r7, #4]
 810a674:	6818      	ldr	r0, [r3, #0]
 810a676:	683b      	ldr	r3, [r7, #0]
 810a678:	6859      	ldr	r1, [r3, #4]
 810a67a:	683b      	ldr	r3, [r7, #0]
 810a67c:	68db      	ldr	r3, [r3, #12]
 810a67e:	461a      	mov	r2, r3
 810a680:	f000 fbd6 	bl	810ae30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810a684:	687b      	ldr	r3, [r7, #4]
 810a686:	681b      	ldr	r3, [r3, #0]
 810a688:	2150      	movs	r1, #80	; 0x50
 810a68a:	4618      	mov	r0, r3
 810a68c:	f000 fc2f 	bl	810aeee <TIM_ITRx_SetConfig>
      break;
 810a690:	e02c      	b.n	810a6ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810a692:	687b      	ldr	r3, [r7, #4]
 810a694:	6818      	ldr	r0, [r3, #0]
 810a696:	683b      	ldr	r3, [r7, #0]
 810a698:	6859      	ldr	r1, [r3, #4]
 810a69a:	683b      	ldr	r3, [r7, #0]
 810a69c:	68db      	ldr	r3, [r3, #12]
 810a69e:	461a      	mov	r2, r3
 810a6a0:	f000 fbf5 	bl	810ae8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810a6a4:	687b      	ldr	r3, [r7, #4]
 810a6a6:	681b      	ldr	r3, [r3, #0]
 810a6a8:	2160      	movs	r1, #96	; 0x60
 810a6aa:	4618      	mov	r0, r3
 810a6ac:	f000 fc1f 	bl	810aeee <TIM_ITRx_SetConfig>
      break;
 810a6b0:	e01c      	b.n	810a6ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810a6b2:	687b      	ldr	r3, [r7, #4]
 810a6b4:	6818      	ldr	r0, [r3, #0]
 810a6b6:	683b      	ldr	r3, [r7, #0]
 810a6b8:	6859      	ldr	r1, [r3, #4]
 810a6ba:	683b      	ldr	r3, [r7, #0]
 810a6bc:	68db      	ldr	r3, [r3, #12]
 810a6be:	461a      	mov	r2, r3
 810a6c0:	f000 fbb6 	bl	810ae30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	681b      	ldr	r3, [r3, #0]
 810a6c8:	2140      	movs	r1, #64	; 0x40
 810a6ca:	4618      	mov	r0, r3
 810a6cc:	f000 fc0f 	bl	810aeee <TIM_ITRx_SetConfig>
      break;
 810a6d0:	e00c      	b.n	810a6ec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810a6d2:	687b      	ldr	r3, [r7, #4]
 810a6d4:	681a      	ldr	r2, [r3, #0]
 810a6d6:	683b      	ldr	r3, [r7, #0]
 810a6d8:	681b      	ldr	r3, [r3, #0]
 810a6da:	4619      	mov	r1, r3
 810a6dc:	4610      	mov	r0, r2
 810a6de:	f000 fc06 	bl	810aeee <TIM_ITRx_SetConfig>
      break;
 810a6e2:	e003      	b.n	810a6ec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810a6e4:	2301      	movs	r3, #1
 810a6e6:	73fb      	strb	r3, [r7, #15]
      break;
 810a6e8:	e000      	b.n	810a6ec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810a6ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810a6ec:	687b      	ldr	r3, [r7, #4]
 810a6ee:	2201      	movs	r2, #1
 810a6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810a6f4:	687b      	ldr	r3, [r7, #4]
 810a6f6:	2200      	movs	r2, #0
 810a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 810a6fe:	4618      	mov	r0, r3
 810a700:	3710      	adds	r7, #16
 810a702:	46bd      	mov	sp, r7
 810a704:	bd80      	pop	{r7, pc}
 810a706:	bf00      	nop
 810a708:	00100040 	.word	0x00100040
 810a70c:	00100030 	.word	0x00100030
 810a710:	00100020 	.word	0x00100020

0810a714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810a714:	b480      	push	{r7}
 810a716:	b083      	sub	sp, #12
 810a718:	af00      	add	r7, sp, #0
 810a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810a71c:	bf00      	nop
 810a71e:	370c      	adds	r7, #12
 810a720:	46bd      	mov	sp, r7
 810a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a726:	4770      	bx	lr

0810a728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810a728:	b480      	push	{r7}
 810a72a:	b083      	sub	sp, #12
 810a72c:	af00      	add	r7, sp, #0
 810a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810a730:	bf00      	nop
 810a732:	370c      	adds	r7, #12
 810a734:	46bd      	mov	sp, r7
 810a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a73a:	4770      	bx	lr

0810a73c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810a73c:	b480      	push	{r7}
 810a73e:	b083      	sub	sp, #12
 810a740:	af00      	add	r7, sp, #0
 810a742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810a744:	bf00      	nop
 810a746:	370c      	adds	r7, #12
 810a748:	46bd      	mov	sp, r7
 810a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a74e:	4770      	bx	lr

0810a750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810a750:	b480      	push	{r7}
 810a752:	b085      	sub	sp, #20
 810a754:	af00      	add	r7, sp, #0
 810a756:	6078      	str	r0, [r7, #4]
 810a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810a75a:	687b      	ldr	r3, [r7, #4]
 810a75c:	681b      	ldr	r3, [r3, #0]
 810a75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	4a40      	ldr	r2, [pc, #256]	; (810a864 <TIM_Base_SetConfig+0x114>)
 810a764:	4293      	cmp	r3, r2
 810a766:	d013      	beq.n	810a790 <TIM_Base_SetConfig+0x40>
 810a768:	687b      	ldr	r3, [r7, #4]
 810a76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a76e:	d00f      	beq.n	810a790 <TIM_Base_SetConfig+0x40>
 810a770:	687b      	ldr	r3, [r7, #4]
 810a772:	4a3d      	ldr	r2, [pc, #244]	; (810a868 <TIM_Base_SetConfig+0x118>)
 810a774:	4293      	cmp	r3, r2
 810a776:	d00b      	beq.n	810a790 <TIM_Base_SetConfig+0x40>
 810a778:	687b      	ldr	r3, [r7, #4]
 810a77a:	4a3c      	ldr	r2, [pc, #240]	; (810a86c <TIM_Base_SetConfig+0x11c>)
 810a77c:	4293      	cmp	r3, r2
 810a77e:	d007      	beq.n	810a790 <TIM_Base_SetConfig+0x40>
 810a780:	687b      	ldr	r3, [r7, #4]
 810a782:	4a3b      	ldr	r2, [pc, #236]	; (810a870 <TIM_Base_SetConfig+0x120>)
 810a784:	4293      	cmp	r3, r2
 810a786:	d003      	beq.n	810a790 <TIM_Base_SetConfig+0x40>
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	4a3a      	ldr	r2, [pc, #232]	; (810a874 <TIM_Base_SetConfig+0x124>)
 810a78c:	4293      	cmp	r3, r2
 810a78e:	d108      	bne.n	810a7a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810a790:	68fb      	ldr	r3, [r7, #12]
 810a792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810a798:	683b      	ldr	r3, [r7, #0]
 810a79a:	685b      	ldr	r3, [r3, #4]
 810a79c:	68fa      	ldr	r2, [r7, #12]
 810a79e:	4313      	orrs	r3, r2
 810a7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810a7a2:	687b      	ldr	r3, [r7, #4]
 810a7a4:	4a2f      	ldr	r2, [pc, #188]	; (810a864 <TIM_Base_SetConfig+0x114>)
 810a7a6:	4293      	cmp	r3, r2
 810a7a8:	d01f      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7aa:	687b      	ldr	r3, [r7, #4]
 810a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a7b0:	d01b      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7b2:	687b      	ldr	r3, [r7, #4]
 810a7b4:	4a2c      	ldr	r2, [pc, #176]	; (810a868 <TIM_Base_SetConfig+0x118>)
 810a7b6:	4293      	cmp	r3, r2
 810a7b8:	d017      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7ba:	687b      	ldr	r3, [r7, #4]
 810a7bc:	4a2b      	ldr	r2, [pc, #172]	; (810a86c <TIM_Base_SetConfig+0x11c>)
 810a7be:	4293      	cmp	r3, r2
 810a7c0:	d013      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7c2:	687b      	ldr	r3, [r7, #4]
 810a7c4:	4a2a      	ldr	r2, [pc, #168]	; (810a870 <TIM_Base_SetConfig+0x120>)
 810a7c6:	4293      	cmp	r3, r2
 810a7c8:	d00f      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7ca:	687b      	ldr	r3, [r7, #4]
 810a7cc:	4a29      	ldr	r2, [pc, #164]	; (810a874 <TIM_Base_SetConfig+0x124>)
 810a7ce:	4293      	cmp	r3, r2
 810a7d0:	d00b      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	4a28      	ldr	r2, [pc, #160]	; (810a878 <TIM_Base_SetConfig+0x128>)
 810a7d6:	4293      	cmp	r3, r2
 810a7d8:	d007      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	4a27      	ldr	r2, [pc, #156]	; (810a87c <TIM_Base_SetConfig+0x12c>)
 810a7de:	4293      	cmp	r3, r2
 810a7e0:	d003      	beq.n	810a7ea <TIM_Base_SetConfig+0x9a>
 810a7e2:	687b      	ldr	r3, [r7, #4]
 810a7e4:	4a26      	ldr	r2, [pc, #152]	; (810a880 <TIM_Base_SetConfig+0x130>)
 810a7e6:	4293      	cmp	r3, r2
 810a7e8:	d108      	bne.n	810a7fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810a7ea:	68fb      	ldr	r3, [r7, #12]
 810a7ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a7f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810a7f2:	683b      	ldr	r3, [r7, #0]
 810a7f4:	68db      	ldr	r3, [r3, #12]
 810a7f6:	68fa      	ldr	r2, [r7, #12]
 810a7f8:	4313      	orrs	r3, r2
 810a7fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810a7fc:	68fb      	ldr	r3, [r7, #12]
 810a7fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810a802:	683b      	ldr	r3, [r7, #0]
 810a804:	695b      	ldr	r3, [r3, #20]
 810a806:	4313      	orrs	r3, r2
 810a808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810a80a:	687b      	ldr	r3, [r7, #4]
 810a80c:	68fa      	ldr	r2, [r7, #12]
 810a80e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810a810:	683b      	ldr	r3, [r7, #0]
 810a812:	689a      	ldr	r2, [r3, #8]
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810a818:	683b      	ldr	r3, [r7, #0]
 810a81a:	681a      	ldr	r2, [r3, #0]
 810a81c:	687b      	ldr	r3, [r7, #4]
 810a81e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	4a10      	ldr	r2, [pc, #64]	; (810a864 <TIM_Base_SetConfig+0x114>)
 810a824:	4293      	cmp	r3, r2
 810a826:	d00f      	beq.n	810a848 <TIM_Base_SetConfig+0xf8>
 810a828:	687b      	ldr	r3, [r7, #4]
 810a82a:	4a12      	ldr	r2, [pc, #72]	; (810a874 <TIM_Base_SetConfig+0x124>)
 810a82c:	4293      	cmp	r3, r2
 810a82e:	d00b      	beq.n	810a848 <TIM_Base_SetConfig+0xf8>
 810a830:	687b      	ldr	r3, [r7, #4]
 810a832:	4a11      	ldr	r2, [pc, #68]	; (810a878 <TIM_Base_SetConfig+0x128>)
 810a834:	4293      	cmp	r3, r2
 810a836:	d007      	beq.n	810a848 <TIM_Base_SetConfig+0xf8>
 810a838:	687b      	ldr	r3, [r7, #4]
 810a83a:	4a10      	ldr	r2, [pc, #64]	; (810a87c <TIM_Base_SetConfig+0x12c>)
 810a83c:	4293      	cmp	r3, r2
 810a83e:	d003      	beq.n	810a848 <TIM_Base_SetConfig+0xf8>
 810a840:	687b      	ldr	r3, [r7, #4]
 810a842:	4a0f      	ldr	r2, [pc, #60]	; (810a880 <TIM_Base_SetConfig+0x130>)
 810a844:	4293      	cmp	r3, r2
 810a846:	d103      	bne.n	810a850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810a848:	683b      	ldr	r3, [r7, #0]
 810a84a:	691a      	ldr	r2, [r3, #16]
 810a84c:	687b      	ldr	r3, [r7, #4]
 810a84e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810a850:	687b      	ldr	r3, [r7, #4]
 810a852:	2201      	movs	r2, #1
 810a854:	615a      	str	r2, [r3, #20]
}
 810a856:	bf00      	nop
 810a858:	3714      	adds	r7, #20
 810a85a:	46bd      	mov	sp, r7
 810a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a860:	4770      	bx	lr
 810a862:	bf00      	nop
 810a864:	40010000 	.word	0x40010000
 810a868:	40000400 	.word	0x40000400
 810a86c:	40000800 	.word	0x40000800
 810a870:	40000c00 	.word	0x40000c00
 810a874:	40010400 	.word	0x40010400
 810a878:	40014000 	.word	0x40014000
 810a87c:	40014400 	.word	0x40014400
 810a880:	40014800 	.word	0x40014800

0810a884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a884:	b480      	push	{r7}
 810a886:	b087      	sub	sp, #28
 810a888:	af00      	add	r7, sp, #0
 810a88a:	6078      	str	r0, [r7, #4]
 810a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	6a1b      	ldr	r3, [r3, #32]
 810a892:	f023 0201 	bic.w	r2, r3, #1
 810a896:	687b      	ldr	r3, [r7, #4]
 810a898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a89a:	687b      	ldr	r3, [r7, #4]
 810a89c:	6a1b      	ldr	r3, [r3, #32]
 810a89e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a8a0:	687b      	ldr	r3, [r7, #4]
 810a8a2:	685b      	ldr	r3, [r3, #4]
 810a8a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a8a6:	687b      	ldr	r3, [r7, #4]
 810a8a8:	699b      	ldr	r3, [r3, #24]
 810a8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810a8ac:	68fb      	ldr	r3, [r7, #12]
 810a8ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a8b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810a8b8:	68fb      	ldr	r3, [r7, #12]
 810a8ba:	f023 0303 	bic.w	r3, r3, #3
 810a8be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a8c0:	683b      	ldr	r3, [r7, #0]
 810a8c2:	681b      	ldr	r3, [r3, #0]
 810a8c4:	68fa      	ldr	r2, [r7, #12]
 810a8c6:	4313      	orrs	r3, r2
 810a8c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810a8ca:	697b      	ldr	r3, [r7, #20]
 810a8cc:	f023 0302 	bic.w	r3, r3, #2
 810a8d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810a8d2:	683b      	ldr	r3, [r7, #0]
 810a8d4:	689b      	ldr	r3, [r3, #8]
 810a8d6:	697a      	ldr	r2, [r7, #20]
 810a8d8:	4313      	orrs	r3, r2
 810a8da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	4a2c      	ldr	r2, [pc, #176]	; (810a990 <TIM_OC1_SetConfig+0x10c>)
 810a8e0:	4293      	cmp	r3, r2
 810a8e2:	d00f      	beq.n	810a904 <TIM_OC1_SetConfig+0x80>
 810a8e4:	687b      	ldr	r3, [r7, #4]
 810a8e6:	4a2b      	ldr	r2, [pc, #172]	; (810a994 <TIM_OC1_SetConfig+0x110>)
 810a8e8:	4293      	cmp	r3, r2
 810a8ea:	d00b      	beq.n	810a904 <TIM_OC1_SetConfig+0x80>
 810a8ec:	687b      	ldr	r3, [r7, #4]
 810a8ee:	4a2a      	ldr	r2, [pc, #168]	; (810a998 <TIM_OC1_SetConfig+0x114>)
 810a8f0:	4293      	cmp	r3, r2
 810a8f2:	d007      	beq.n	810a904 <TIM_OC1_SetConfig+0x80>
 810a8f4:	687b      	ldr	r3, [r7, #4]
 810a8f6:	4a29      	ldr	r2, [pc, #164]	; (810a99c <TIM_OC1_SetConfig+0x118>)
 810a8f8:	4293      	cmp	r3, r2
 810a8fa:	d003      	beq.n	810a904 <TIM_OC1_SetConfig+0x80>
 810a8fc:	687b      	ldr	r3, [r7, #4]
 810a8fe:	4a28      	ldr	r2, [pc, #160]	; (810a9a0 <TIM_OC1_SetConfig+0x11c>)
 810a900:	4293      	cmp	r3, r2
 810a902:	d10c      	bne.n	810a91e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810a904:	697b      	ldr	r3, [r7, #20]
 810a906:	f023 0308 	bic.w	r3, r3, #8
 810a90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810a90c:	683b      	ldr	r3, [r7, #0]
 810a90e:	68db      	ldr	r3, [r3, #12]
 810a910:	697a      	ldr	r2, [r7, #20]
 810a912:	4313      	orrs	r3, r2
 810a914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810a916:	697b      	ldr	r3, [r7, #20]
 810a918:	f023 0304 	bic.w	r3, r3, #4
 810a91c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a91e:	687b      	ldr	r3, [r7, #4]
 810a920:	4a1b      	ldr	r2, [pc, #108]	; (810a990 <TIM_OC1_SetConfig+0x10c>)
 810a922:	4293      	cmp	r3, r2
 810a924:	d00f      	beq.n	810a946 <TIM_OC1_SetConfig+0xc2>
 810a926:	687b      	ldr	r3, [r7, #4]
 810a928:	4a1a      	ldr	r2, [pc, #104]	; (810a994 <TIM_OC1_SetConfig+0x110>)
 810a92a:	4293      	cmp	r3, r2
 810a92c:	d00b      	beq.n	810a946 <TIM_OC1_SetConfig+0xc2>
 810a92e:	687b      	ldr	r3, [r7, #4]
 810a930:	4a19      	ldr	r2, [pc, #100]	; (810a998 <TIM_OC1_SetConfig+0x114>)
 810a932:	4293      	cmp	r3, r2
 810a934:	d007      	beq.n	810a946 <TIM_OC1_SetConfig+0xc2>
 810a936:	687b      	ldr	r3, [r7, #4]
 810a938:	4a18      	ldr	r2, [pc, #96]	; (810a99c <TIM_OC1_SetConfig+0x118>)
 810a93a:	4293      	cmp	r3, r2
 810a93c:	d003      	beq.n	810a946 <TIM_OC1_SetConfig+0xc2>
 810a93e:	687b      	ldr	r3, [r7, #4]
 810a940:	4a17      	ldr	r2, [pc, #92]	; (810a9a0 <TIM_OC1_SetConfig+0x11c>)
 810a942:	4293      	cmp	r3, r2
 810a944:	d111      	bne.n	810a96a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810a946:	693b      	ldr	r3, [r7, #16]
 810a948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a94c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810a94e:	693b      	ldr	r3, [r7, #16]
 810a950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810a954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810a956:	683b      	ldr	r3, [r7, #0]
 810a958:	695b      	ldr	r3, [r3, #20]
 810a95a:	693a      	ldr	r2, [r7, #16]
 810a95c:	4313      	orrs	r3, r2
 810a95e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810a960:	683b      	ldr	r3, [r7, #0]
 810a962:	699b      	ldr	r3, [r3, #24]
 810a964:	693a      	ldr	r2, [r7, #16]
 810a966:	4313      	orrs	r3, r2
 810a968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a96a:	687b      	ldr	r3, [r7, #4]
 810a96c:	693a      	ldr	r2, [r7, #16]
 810a96e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a970:	687b      	ldr	r3, [r7, #4]
 810a972:	68fa      	ldr	r2, [r7, #12]
 810a974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810a976:	683b      	ldr	r3, [r7, #0]
 810a978:	685a      	ldr	r2, [r3, #4]
 810a97a:	687b      	ldr	r3, [r7, #4]
 810a97c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a97e:	687b      	ldr	r3, [r7, #4]
 810a980:	697a      	ldr	r2, [r7, #20]
 810a982:	621a      	str	r2, [r3, #32]
}
 810a984:	bf00      	nop
 810a986:	371c      	adds	r7, #28
 810a988:	46bd      	mov	sp, r7
 810a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a98e:	4770      	bx	lr
 810a990:	40010000 	.word	0x40010000
 810a994:	40010400 	.word	0x40010400
 810a998:	40014000 	.word	0x40014000
 810a99c:	40014400 	.word	0x40014400
 810a9a0:	40014800 	.word	0x40014800

0810a9a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a9a4:	b480      	push	{r7}
 810a9a6:	b087      	sub	sp, #28
 810a9a8:	af00      	add	r7, sp, #0
 810a9aa:	6078      	str	r0, [r7, #4]
 810a9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a9ae:	687b      	ldr	r3, [r7, #4]
 810a9b0:	6a1b      	ldr	r3, [r3, #32]
 810a9b2:	f023 0210 	bic.w	r2, r3, #16
 810a9b6:	687b      	ldr	r3, [r7, #4]
 810a9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a9ba:	687b      	ldr	r3, [r7, #4]
 810a9bc:	6a1b      	ldr	r3, [r3, #32]
 810a9be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a9c0:	687b      	ldr	r3, [r7, #4]
 810a9c2:	685b      	ldr	r3, [r3, #4]
 810a9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a9c6:	687b      	ldr	r3, [r7, #4]
 810a9c8:	699b      	ldr	r3, [r3, #24]
 810a9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810a9cc:	68fb      	ldr	r3, [r7, #12]
 810a9ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810a9d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810a9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810a9d8:	68fb      	ldr	r3, [r7, #12]
 810a9da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a9de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a9e0:	683b      	ldr	r3, [r7, #0]
 810a9e2:	681b      	ldr	r3, [r3, #0]
 810a9e4:	021b      	lsls	r3, r3, #8
 810a9e6:	68fa      	ldr	r2, [r7, #12]
 810a9e8:	4313      	orrs	r3, r2
 810a9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810a9ec:	697b      	ldr	r3, [r7, #20]
 810a9ee:	f023 0320 	bic.w	r3, r3, #32
 810a9f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810a9f4:	683b      	ldr	r3, [r7, #0]
 810a9f6:	689b      	ldr	r3, [r3, #8]
 810a9f8:	011b      	lsls	r3, r3, #4
 810a9fa:	697a      	ldr	r2, [r7, #20]
 810a9fc:	4313      	orrs	r3, r2
 810a9fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810aa00:	687b      	ldr	r3, [r7, #4]
 810aa02:	4a28      	ldr	r2, [pc, #160]	; (810aaa4 <TIM_OC2_SetConfig+0x100>)
 810aa04:	4293      	cmp	r3, r2
 810aa06:	d003      	beq.n	810aa10 <TIM_OC2_SetConfig+0x6c>
 810aa08:	687b      	ldr	r3, [r7, #4]
 810aa0a:	4a27      	ldr	r2, [pc, #156]	; (810aaa8 <TIM_OC2_SetConfig+0x104>)
 810aa0c:	4293      	cmp	r3, r2
 810aa0e:	d10d      	bne.n	810aa2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810aa10:	697b      	ldr	r3, [r7, #20]
 810aa12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810aa16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810aa18:	683b      	ldr	r3, [r7, #0]
 810aa1a:	68db      	ldr	r3, [r3, #12]
 810aa1c:	011b      	lsls	r3, r3, #4
 810aa1e:	697a      	ldr	r2, [r7, #20]
 810aa20:	4313      	orrs	r3, r2
 810aa22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810aa24:	697b      	ldr	r3, [r7, #20]
 810aa26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810aa2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810aa2c:	687b      	ldr	r3, [r7, #4]
 810aa2e:	4a1d      	ldr	r2, [pc, #116]	; (810aaa4 <TIM_OC2_SetConfig+0x100>)
 810aa30:	4293      	cmp	r3, r2
 810aa32:	d00f      	beq.n	810aa54 <TIM_OC2_SetConfig+0xb0>
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	4a1c      	ldr	r2, [pc, #112]	; (810aaa8 <TIM_OC2_SetConfig+0x104>)
 810aa38:	4293      	cmp	r3, r2
 810aa3a:	d00b      	beq.n	810aa54 <TIM_OC2_SetConfig+0xb0>
 810aa3c:	687b      	ldr	r3, [r7, #4]
 810aa3e:	4a1b      	ldr	r2, [pc, #108]	; (810aaac <TIM_OC2_SetConfig+0x108>)
 810aa40:	4293      	cmp	r3, r2
 810aa42:	d007      	beq.n	810aa54 <TIM_OC2_SetConfig+0xb0>
 810aa44:	687b      	ldr	r3, [r7, #4]
 810aa46:	4a1a      	ldr	r2, [pc, #104]	; (810aab0 <TIM_OC2_SetConfig+0x10c>)
 810aa48:	4293      	cmp	r3, r2
 810aa4a:	d003      	beq.n	810aa54 <TIM_OC2_SetConfig+0xb0>
 810aa4c:	687b      	ldr	r3, [r7, #4]
 810aa4e:	4a19      	ldr	r2, [pc, #100]	; (810aab4 <TIM_OC2_SetConfig+0x110>)
 810aa50:	4293      	cmp	r3, r2
 810aa52:	d113      	bne.n	810aa7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810aa54:	693b      	ldr	r3, [r7, #16]
 810aa56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810aa5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810aa5c:	693b      	ldr	r3, [r7, #16]
 810aa5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810aa62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810aa64:	683b      	ldr	r3, [r7, #0]
 810aa66:	695b      	ldr	r3, [r3, #20]
 810aa68:	009b      	lsls	r3, r3, #2
 810aa6a:	693a      	ldr	r2, [r7, #16]
 810aa6c:	4313      	orrs	r3, r2
 810aa6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810aa70:	683b      	ldr	r3, [r7, #0]
 810aa72:	699b      	ldr	r3, [r3, #24]
 810aa74:	009b      	lsls	r3, r3, #2
 810aa76:	693a      	ldr	r2, [r7, #16]
 810aa78:	4313      	orrs	r3, r2
 810aa7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	693a      	ldr	r2, [r7, #16]
 810aa80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810aa82:	687b      	ldr	r3, [r7, #4]
 810aa84:	68fa      	ldr	r2, [r7, #12]
 810aa86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810aa88:	683b      	ldr	r3, [r7, #0]
 810aa8a:	685a      	ldr	r2, [r3, #4]
 810aa8c:	687b      	ldr	r3, [r7, #4]
 810aa8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810aa90:	687b      	ldr	r3, [r7, #4]
 810aa92:	697a      	ldr	r2, [r7, #20]
 810aa94:	621a      	str	r2, [r3, #32]
}
 810aa96:	bf00      	nop
 810aa98:	371c      	adds	r7, #28
 810aa9a:	46bd      	mov	sp, r7
 810aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aaa0:	4770      	bx	lr
 810aaa2:	bf00      	nop
 810aaa4:	40010000 	.word	0x40010000
 810aaa8:	40010400 	.word	0x40010400
 810aaac:	40014000 	.word	0x40014000
 810aab0:	40014400 	.word	0x40014400
 810aab4:	40014800 	.word	0x40014800

0810aab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810aab8:	b480      	push	{r7}
 810aaba:	b087      	sub	sp, #28
 810aabc:	af00      	add	r7, sp, #0
 810aabe:	6078      	str	r0, [r7, #4]
 810aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	6a1b      	ldr	r3, [r3, #32]
 810aac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810aaca:	687b      	ldr	r3, [r7, #4]
 810aacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810aace:	687b      	ldr	r3, [r7, #4]
 810aad0:	6a1b      	ldr	r3, [r3, #32]
 810aad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810aad4:	687b      	ldr	r3, [r7, #4]
 810aad6:	685b      	ldr	r3, [r3, #4]
 810aad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810aada:	687b      	ldr	r3, [r7, #4]
 810aadc:	69db      	ldr	r3, [r3, #28]
 810aade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810aae0:	68fb      	ldr	r3, [r7, #12]
 810aae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810aae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810aaea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810aaec:	68fb      	ldr	r3, [r7, #12]
 810aaee:	f023 0303 	bic.w	r3, r3, #3
 810aaf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810aaf4:	683b      	ldr	r3, [r7, #0]
 810aaf6:	681b      	ldr	r3, [r3, #0]
 810aaf8:	68fa      	ldr	r2, [r7, #12]
 810aafa:	4313      	orrs	r3, r2
 810aafc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810aafe:	697b      	ldr	r3, [r7, #20]
 810ab00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810ab04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810ab06:	683b      	ldr	r3, [r7, #0]
 810ab08:	689b      	ldr	r3, [r3, #8]
 810ab0a:	021b      	lsls	r3, r3, #8
 810ab0c:	697a      	ldr	r2, [r7, #20]
 810ab0e:	4313      	orrs	r3, r2
 810ab10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810ab12:	687b      	ldr	r3, [r7, #4]
 810ab14:	4a27      	ldr	r2, [pc, #156]	; (810abb4 <TIM_OC3_SetConfig+0xfc>)
 810ab16:	4293      	cmp	r3, r2
 810ab18:	d003      	beq.n	810ab22 <TIM_OC3_SetConfig+0x6a>
 810ab1a:	687b      	ldr	r3, [r7, #4]
 810ab1c:	4a26      	ldr	r2, [pc, #152]	; (810abb8 <TIM_OC3_SetConfig+0x100>)
 810ab1e:	4293      	cmp	r3, r2
 810ab20:	d10d      	bne.n	810ab3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810ab22:	697b      	ldr	r3, [r7, #20]
 810ab24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810ab28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810ab2a:	683b      	ldr	r3, [r7, #0]
 810ab2c:	68db      	ldr	r3, [r3, #12]
 810ab2e:	021b      	lsls	r3, r3, #8
 810ab30:	697a      	ldr	r2, [r7, #20]
 810ab32:	4313      	orrs	r3, r2
 810ab34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810ab36:	697b      	ldr	r3, [r7, #20]
 810ab38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810ab3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ab3e:	687b      	ldr	r3, [r7, #4]
 810ab40:	4a1c      	ldr	r2, [pc, #112]	; (810abb4 <TIM_OC3_SetConfig+0xfc>)
 810ab42:	4293      	cmp	r3, r2
 810ab44:	d00f      	beq.n	810ab66 <TIM_OC3_SetConfig+0xae>
 810ab46:	687b      	ldr	r3, [r7, #4]
 810ab48:	4a1b      	ldr	r2, [pc, #108]	; (810abb8 <TIM_OC3_SetConfig+0x100>)
 810ab4a:	4293      	cmp	r3, r2
 810ab4c:	d00b      	beq.n	810ab66 <TIM_OC3_SetConfig+0xae>
 810ab4e:	687b      	ldr	r3, [r7, #4]
 810ab50:	4a1a      	ldr	r2, [pc, #104]	; (810abbc <TIM_OC3_SetConfig+0x104>)
 810ab52:	4293      	cmp	r3, r2
 810ab54:	d007      	beq.n	810ab66 <TIM_OC3_SetConfig+0xae>
 810ab56:	687b      	ldr	r3, [r7, #4]
 810ab58:	4a19      	ldr	r2, [pc, #100]	; (810abc0 <TIM_OC3_SetConfig+0x108>)
 810ab5a:	4293      	cmp	r3, r2
 810ab5c:	d003      	beq.n	810ab66 <TIM_OC3_SetConfig+0xae>
 810ab5e:	687b      	ldr	r3, [r7, #4]
 810ab60:	4a18      	ldr	r2, [pc, #96]	; (810abc4 <TIM_OC3_SetConfig+0x10c>)
 810ab62:	4293      	cmp	r3, r2
 810ab64:	d113      	bne.n	810ab8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810ab66:	693b      	ldr	r3, [r7, #16]
 810ab68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810ab6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810ab6e:	693b      	ldr	r3, [r7, #16]
 810ab70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810ab74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810ab76:	683b      	ldr	r3, [r7, #0]
 810ab78:	695b      	ldr	r3, [r3, #20]
 810ab7a:	011b      	lsls	r3, r3, #4
 810ab7c:	693a      	ldr	r2, [r7, #16]
 810ab7e:	4313      	orrs	r3, r2
 810ab80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810ab82:	683b      	ldr	r3, [r7, #0]
 810ab84:	699b      	ldr	r3, [r3, #24]
 810ab86:	011b      	lsls	r3, r3, #4
 810ab88:	693a      	ldr	r2, [r7, #16]
 810ab8a:	4313      	orrs	r3, r2
 810ab8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ab8e:	687b      	ldr	r3, [r7, #4]
 810ab90:	693a      	ldr	r2, [r7, #16]
 810ab92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810ab94:	687b      	ldr	r3, [r7, #4]
 810ab96:	68fa      	ldr	r2, [r7, #12]
 810ab98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810ab9a:	683b      	ldr	r3, [r7, #0]
 810ab9c:	685a      	ldr	r2, [r3, #4]
 810ab9e:	687b      	ldr	r3, [r7, #4]
 810aba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810aba2:	687b      	ldr	r3, [r7, #4]
 810aba4:	697a      	ldr	r2, [r7, #20]
 810aba6:	621a      	str	r2, [r3, #32]
}
 810aba8:	bf00      	nop
 810abaa:	371c      	adds	r7, #28
 810abac:	46bd      	mov	sp, r7
 810abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abb2:	4770      	bx	lr
 810abb4:	40010000 	.word	0x40010000
 810abb8:	40010400 	.word	0x40010400
 810abbc:	40014000 	.word	0x40014000
 810abc0:	40014400 	.word	0x40014400
 810abc4:	40014800 	.word	0x40014800

0810abc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810abc8:	b480      	push	{r7}
 810abca:	b087      	sub	sp, #28
 810abcc:	af00      	add	r7, sp, #0
 810abce:	6078      	str	r0, [r7, #4]
 810abd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810abd2:	687b      	ldr	r3, [r7, #4]
 810abd4:	6a1b      	ldr	r3, [r3, #32]
 810abd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810abda:	687b      	ldr	r3, [r7, #4]
 810abdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810abde:	687b      	ldr	r3, [r7, #4]
 810abe0:	6a1b      	ldr	r3, [r3, #32]
 810abe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	685b      	ldr	r3, [r3, #4]
 810abe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810abea:	687b      	ldr	r3, [r7, #4]
 810abec:	69db      	ldr	r3, [r3, #28]
 810abee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810abf0:	68fb      	ldr	r3, [r7, #12]
 810abf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810abf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810abfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810abfc:	68fb      	ldr	r3, [r7, #12]
 810abfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810ac02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810ac04:	683b      	ldr	r3, [r7, #0]
 810ac06:	681b      	ldr	r3, [r3, #0]
 810ac08:	021b      	lsls	r3, r3, #8
 810ac0a:	68fa      	ldr	r2, [r7, #12]
 810ac0c:	4313      	orrs	r3, r2
 810ac0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810ac10:	693b      	ldr	r3, [r7, #16]
 810ac12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810ac16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810ac18:	683b      	ldr	r3, [r7, #0]
 810ac1a:	689b      	ldr	r3, [r3, #8]
 810ac1c:	031b      	lsls	r3, r3, #12
 810ac1e:	693a      	ldr	r2, [r7, #16]
 810ac20:	4313      	orrs	r3, r2
 810ac22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ac24:	687b      	ldr	r3, [r7, #4]
 810ac26:	4a18      	ldr	r2, [pc, #96]	; (810ac88 <TIM_OC4_SetConfig+0xc0>)
 810ac28:	4293      	cmp	r3, r2
 810ac2a:	d00f      	beq.n	810ac4c <TIM_OC4_SetConfig+0x84>
 810ac2c:	687b      	ldr	r3, [r7, #4]
 810ac2e:	4a17      	ldr	r2, [pc, #92]	; (810ac8c <TIM_OC4_SetConfig+0xc4>)
 810ac30:	4293      	cmp	r3, r2
 810ac32:	d00b      	beq.n	810ac4c <TIM_OC4_SetConfig+0x84>
 810ac34:	687b      	ldr	r3, [r7, #4]
 810ac36:	4a16      	ldr	r2, [pc, #88]	; (810ac90 <TIM_OC4_SetConfig+0xc8>)
 810ac38:	4293      	cmp	r3, r2
 810ac3a:	d007      	beq.n	810ac4c <TIM_OC4_SetConfig+0x84>
 810ac3c:	687b      	ldr	r3, [r7, #4]
 810ac3e:	4a15      	ldr	r2, [pc, #84]	; (810ac94 <TIM_OC4_SetConfig+0xcc>)
 810ac40:	4293      	cmp	r3, r2
 810ac42:	d003      	beq.n	810ac4c <TIM_OC4_SetConfig+0x84>
 810ac44:	687b      	ldr	r3, [r7, #4]
 810ac46:	4a14      	ldr	r2, [pc, #80]	; (810ac98 <TIM_OC4_SetConfig+0xd0>)
 810ac48:	4293      	cmp	r3, r2
 810ac4a:	d109      	bne.n	810ac60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810ac4c:	697b      	ldr	r3, [r7, #20]
 810ac4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810ac52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810ac54:	683b      	ldr	r3, [r7, #0]
 810ac56:	695b      	ldr	r3, [r3, #20]
 810ac58:	019b      	lsls	r3, r3, #6
 810ac5a:	697a      	ldr	r2, [r7, #20]
 810ac5c:	4313      	orrs	r3, r2
 810ac5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ac60:	687b      	ldr	r3, [r7, #4]
 810ac62:	697a      	ldr	r2, [r7, #20]
 810ac64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810ac66:	687b      	ldr	r3, [r7, #4]
 810ac68:	68fa      	ldr	r2, [r7, #12]
 810ac6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810ac6c:	683b      	ldr	r3, [r7, #0]
 810ac6e:	685a      	ldr	r2, [r3, #4]
 810ac70:	687b      	ldr	r3, [r7, #4]
 810ac72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ac74:	687b      	ldr	r3, [r7, #4]
 810ac76:	693a      	ldr	r2, [r7, #16]
 810ac78:	621a      	str	r2, [r3, #32]
}
 810ac7a:	bf00      	nop
 810ac7c:	371c      	adds	r7, #28
 810ac7e:	46bd      	mov	sp, r7
 810ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac84:	4770      	bx	lr
 810ac86:	bf00      	nop
 810ac88:	40010000 	.word	0x40010000
 810ac8c:	40010400 	.word	0x40010400
 810ac90:	40014000 	.word	0x40014000
 810ac94:	40014400 	.word	0x40014400
 810ac98:	40014800 	.word	0x40014800

0810ac9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810ac9c:	b480      	push	{r7}
 810ac9e:	b087      	sub	sp, #28
 810aca0:	af00      	add	r7, sp, #0
 810aca2:	6078      	str	r0, [r7, #4]
 810aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810aca6:	687b      	ldr	r3, [r7, #4]
 810aca8:	6a1b      	ldr	r3, [r3, #32]
 810acaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810acae:	687b      	ldr	r3, [r7, #4]
 810acb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810acb2:	687b      	ldr	r3, [r7, #4]
 810acb4:	6a1b      	ldr	r3, [r3, #32]
 810acb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	685b      	ldr	r3, [r3, #4]
 810acbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810acc4:	68fb      	ldr	r3, [r7, #12]
 810acc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810acce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810acd0:	683b      	ldr	r3, [r7, #0]
 810acd2:	681b      	ldr	r3, [r3, #0]
 810acd4:	68fa      	ldr	r2, [r7, #12]
 810acd6:	4313      	orrs	r3, r2
 810acd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810acda:	693b      	ldr	r3, [r7, #16]
 810acdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810ace0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810ace2:	683b      	ldr	r3, [r7, #0]
 810ace4:	689b      	ldr	r3, [r3, #8]
 810ace6:	041b      	lsls	r3, r3, #16
 810ace8:	693a      	ldr	r2, [r7, #16]
 810acea:	4313      	orrs	r3, r2
 810acec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810acee:	687b      	ldr	r3, [r7, #4]
 810acf0:	4a17      	ldr	r2, [pc, #92]	; (810ad50 <TIM_OC5_SetConfig+0xb4>)
 810acf2:	4293      	cmp	r3, r2
 810acf4:	d00f      	beq.n	810ad16 <TIM_OC5_SetConfig+0x7a>
 810acf6:	687b      	ldr	r3, [r7, #4]
 810acf8:	4a16      	ldr	r2, [pc, #88]	; (810ad54 <TIM_OC5_SetConfig+0xb8>)
 810acfa:	4293      	cmp	r3, r2
 810acfc:	d00b      	beq.n	810ad16 <TIM_OC5_SetConfig+0x7a>
 810acfe:	687b      	ldr	r3, [r7, #4]
 810ad00:	4a15      	ldr	r2, [pc, #84]	; (810ad58 <TIM_OC5_SetConfig+0xbc>)
 810ad02:	4293      	cmp	r3, r2
 810ad04:	d007      	beq.n	810ad16 <TIM_OC5_SetConfig+0x7a>
 810ad06:	687b      	ldr	r3, [r7, #4]
 810ad08:	4a14      	ldr	r2, [pc, #80]	; (810ad5c <TIM_OC5_SetConfig+0xc0>)
 810ad0a:	4293      	cmp	r3, r2
 810ad0c:	d003      	beq.n	810ad16 <TIM_OC5_SetConfig+0x7a>
 810ad0e:	687b      	ldr	r3, [r7, #4]
 810ad10:	4a13      	ldr	r2, [pc, #76]	; (810ad60 <TIM_OC5_SetConfig+0xc4>)
 810ad12:	4293      	cmp	r3, r2
 810ad14:	d109      	bne.n	810ad2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810ad16:	697b      	ldr	r3, [r7, #20]
 810ad18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810ad1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810ad1e:	683b      	ldr	r3, [r7, #0]
 810ad20:	695b      	ldr	r3, [r3, #20]
 810ad22:	021b      	lsls	r3, r3, #8
 810ad24:	697a      	ldr	r2, [r7, #20]
 810ad26:	4313      	orrs	r3, r2
 810ad28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ad2a:	687b      	ldr	r3, [r7, #4]
 810ad2c:	697a      	ldr	r2, [r7, #20]
 810ad2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810ad30:	687b      	ldr	r3, [r7, #4]
 810ad32:	68fa      	ldr	r2, [r7, #12]
 810ad34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810ad36:	683b      	ldr	r3, [r7, #0]
 810ad38:	685a      	ldr	r2, [r3, #4]
 810ad3a:	687b      	ldr	r3, [r7, #4]
 810ad3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ad3e:	687b      	ldr	r3, [r7, #4]
 810ad40:	693a      	ldr	r2, [r7, #16]
 810ad42:	621a      	str	r2, [r3, #32]
}
 810ad44:	bf00      	nop
 810ad46:	371c      	adds	r7, #28
 810ad48:	46bd      	mov	sp, r7
 810ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad4e:	4770      	bx	lr
 810ad50:	40010000 	.word	0x40010000
 810ad54:	40010400 	.word	0x40010400
 810ad58:	40014000 	.word	0x40014000
 810ad5c:	40014400 	.word	0x40014400
 810ad60:	40014800 	.word	0x40014800

0810ad64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810ad64:	b480      	push	{r7}
 810ad66:	b087      	sub	sp, #28
 810ad68:	af00      	add	r7, sp, #0
 810ad6a:	6078      	str	r0, [r7, #4]
 810ad6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810ad6e:	687b      	ldr	r3, [r7, #4]
 810ad70:	6a1b      	ldr	r3, [r3, #32]
 810ad72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810ad76:	687b      	ldr	r3, [r7, #4]
 810ad78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ad7a:	687b      	ldr	r3, [r7, #4]
 810ad7c:	6a1b      	ldr	r3, [r3, #32]
 810ad7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ad80:	687b      	ldr	r3, [r7, #4]
 810ad82:	685b      	ldr	r3, [r3, #4]
 810ad84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810ad86:	687b      	ldr	r3, [r7, #4]
 810ad88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ad8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810ad8c:	68fb      	ldr	r3, [r7, #12]
 810ad8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810ad92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810ad96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810ad98:	683b      	ldr	r3, [r7, #0]
 810ad9a:	681b      	ldr	r3, [r3, #0]
 810ad9c:	021b      	lsls	r3, r3, #8
 810ad9e:	68fa      	ldr	r2, [r7, #12]
 810ada0:	4313      	orrs	r3, r2
 810ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810ada4:	693b      	ldr	r3, [r7, #16]
 810ada6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810adaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810adac:	683b      	ldr	r3, [r7, #0]
 810adae:	689b      	ldr	r3, [r3, #8]
 810adb0:	051b      	lsls	r3, r3, #20
 810adb2:	693a      	ldr	r2, [r7, #16]
 810adb4:	4313      	orrs	r3, r2
 810adb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810adb8:	687b      	ldr	r3, [r7, #4]
 810adba:	4a18      	ldr	r2, [pc, #96]	; (810ae1c <TIM_OC6_SetConfig+0xb8>)
 810adbc:	4293      	cmp	r3, r2
 810adbe:	d00f      	beq.n	810ade0 <TIM_OC6_SetConfig+0x7c>
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	4a17      	ldr	r2, [pc, #92]	; (810ae20 <TIM_OC6_SetConfig+0xbc>)
 810adc4:	4293      	cmp	r3, r2
 810adc6:	d00b      	beq.n	810ade0 <TIM_OC6_SetConfig+0x7c>
 810adc8:	687b      	ldr	r3, [r7, #4]
 810adca:	4a16      	ldr	r2, [pc, #88]	; (810ae24 <TIM_OC6_SetConfig+0xc0>)
 810adcc:	4293      	cmp	r3, r2
 810adce:	d007      	beq.n	810ade0 <TIM_OC6_SetConfig+0x7c>
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	4a15      	ldr	r2, [pc, #84]	; (810ae28 <TIM_OC6_SetConfig+0xc4>)
 810add4:	4293      	cmp	r3, r2
 810add6:	d003      	beq.n	810ade0 <TIM_OC6_SetConfig+0x7c>
 810add8:	687b      	ldr	r3, [r7, #4]
 810adda:	4a14      	ldr	r2, [pc, #80]	; (810ae2c <TIM_OC6_SetConfig+0xc8>)
 810addc:	4293      	cmp	r3, r2
 810adde:	d109      	bne.n	810adf4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810ade0:	697b      	ldr	r3, [r7, #20]
 810ade2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810ade6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810ade8:	683b      	ldr	r3, [r7, #0]
 810adea:	695b      	ldr	r3, [r3, #20]
 810adec:	029b      	lsls	r3, r3, #10
 810adee:	697a      	ldr	r2, [r7, #20]
 810adf0:	4313      	orrs	r3, r2
 810adf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810adf4:	687b      	ldr	r3, [r7, #4]
 810adf6:	697a      	ldr	r2, [r7, #20]
 810adf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810adfa:	687b      	ldr	r3, [r7, #4]
 810adfc:	68fa      	ldr	r2, [r7, #12]
 810adfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810ae00:	683b      	ldr	r3, [r7, #0]
 810ae02:	685a      	ldr	r2, [r3, #4]
 810ae04:	687b      	ldr	r3, [r7, #4]
 810ae06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	693a      	ldr	r2, [r7, #16]
 810ae0c:	621a      	str	r2, [r3, #32]
}
 810ae0e:	bf00      	nop
 810ae10:	371c      	adds	r7, #28
 810ae12:	46bd      	mov	sp, r7
 810ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae18:	4770      	bx	lr
 810ae1a:	bf00      	nop
 810ae1c:	40010000 	.word	0x40010000
 810ae20:	40010400 	.word	0x40010400
 810ae24:	40014000 	.word	0x40014000
 810ae28:	40014400 	.word	0x40014400
 810ae2c:	40014800 	.word	0x40014800

0810ae30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ae30:	b480      	push	{r7}
 810ae32:	b087      	sub	sp, #28
 810ae34:	af00      	add	r7, sp, #0
 810ae36:	60f8      	str	r0, [r7, #12]
 810ae38:	60b9      	str	r1, [r7, #8]
 810ae3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810ae3c:	68fb      	ldr	r3, [r7, #12]
 810ae3e:	6a1b      	ldr	r3, [r3, #32]
 810ae40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810ae42:	68fb      	ldr	r3, [r7, #12]
 810ae44:	6a1b      	ldr	r3, [r3, #32]
 810ae46:	f023 0201 	bic.w	r2, r3, #1
 810ae4a:	68fb      	ldr	r3, [r7, #12]
 810ae4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810ae4e:	68fb      	ldr	r3, [r7, #12]
 810ae50:	699b      	ldr	r3, [r3, #24]
 810ae52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810ae54:	693b      	ldr	r3, [r7, #16]
 810ae56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810ae5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810ae5c:	687b      	ldr	r3, [r7, #4]
 810ae5e:	011b      	lsls	r3, r3, #4
 810ae60:	693a      	ldr	r2, [r7, #16]
 810ae62:	4313      	orrs	r3, r2
 810ae64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810ae66:	697b      	ldr	r3, [r7, #20]
 810ae68:	f023 030a 	bic.w	r3, r3, #10
 810ae6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810ae6e:	697a      	ldr	r2, [r7, #20]
 810ae70:	68bb      	ldr	r3, [r7, #8]
 810ae72:	4313      	orrs	r3, r2
 810ae74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810ae76:	68fb      	ldr	r3, [r7, #12]
 810ae78:	693a      	ldr	r2, [r7, #16]
 810ae7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ae7c:	68fb      	ldr	r3, [r7, #12]
 810ae7e:	697a      	ldr	r2, [r7, #20]
 810ae80:	621a      	str	r2, [r3, #32]
}
 810ae82:	bf00      	nop
 810ae84:	371c      	adds	r7, #28
 810ae86:	46bd      	mov	sp, r7
 810ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae8c:	4770      	bx	lr

0810ae8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ae8e:	b480      	push	{r7}
 810ae90:	b087      	sub	sp, #28
 810ae92:	af00      	add	r7, sp, #0
 810ae94:	60f8      	str	r0, [r7, #12]
 810ae96:	60b9      	str	r1, [r7, #8]
 810ae98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810ae9a:	68fb      	ldr	r3, [r7, #12]
 810ae9c:	6a1b      	ldr	r3, [r3, #32]
 810ae9e:	f023 0210 	bic.w	r2, r3, #16
 810aea2:	68fb      	ldr	r3, [r7, #12]
 810aea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810aea6:	68fb      	ldr	r3, [r7, #12]
 810aea8:	699b      	ldr	r3, [r3, #24]
 810aeaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810aeac:	68fb      	ldr	r3, [r7, #12]
 810aeae:	6a1b      	ldr	r3, [r3, #32]
 810aeb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810aeb2:	697b      	ldr	r3, [r7, #20]
 810aeb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810aeb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810aeba:	687b      	ldr	r3, [r7, #4]
 810aebc:	031b      	lsls	r3, r3, #12
 810aebe:	697a      	ldr	r2, [r7, #20]
 810aec0:	4313      	orrs	r3, r2
 810aec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810aec4:	693b      	ldr	r3, [r7, #16]
 810aec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810aeca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810aecc:	68bb      	ldr	r3, [r7, #8]
 810aece:	011b      	lsls	r3, r3, #4
 810aed0:	693a      	ldr	r2, [r7, #16]
 810aed2:	4313      	orrs	r3, r2
 810aed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810aed6:	68fb      	ldr	r3, [r7, #12]
 810aed8:	697a      	ldr	r2, [r7, #20]
 810aeda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810aedc:	68fb      	ldr	r3, [r7, #12]
 810aede:	693a      	ldr	r2, [r7, #16]
 810aee0:	621a      	str	r2, [r3, #32]
}
 810aee2:	bf00      	nop
 810aee4:	371c      	adds	r7, #28
 810aee6:	46bd      	mov	sp, r7
 810aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aeec:	4770      	bx	lr

0810aeee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810aeee:	b480      	push	{r7}
 810aef0:	b085      	sub	sp, #20
 810aef2:	af00      	add	r7, sp, #0
 810aef4:	6078      	str	r0, [r7, #4]
 810aef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810aef8:	687b      	ldr	r3, [r7, #4]
 810aefa:	689b      	ldr	r3, [r3, #8]
 810aefc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810aefe:	68fb      	ldr	r3, [r7, #12]
 810af00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810af04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810af08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810af0a:	683a      	ldr	r2, [r7, #0]
 810af0c:	68fb      	ldr	r3, [r7, #12]
 810af0e:	4313      	orrs	r3, r2
 810af10:	f043 0307 	orr.w	r3, r3, #7
 810af14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810af16:	687b      	ldr	r3, [r7, #4]
 810af18:	68fa      	ldr	r2, [r7, #12]
 810af1a:	609a      	str	r2, [r3, #8]
}
 810af1c:	bf00      	nop
 810af1e:	3714      	adds	r7, #20
 810af20:	46bd      	mov	sp, r7
 810af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af26:	4770      	bx	lr

0810af28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810af28:	b480      	push	{r7}
 810af2a:	b087      	sub	sp, #28
 810af2c:	af00      	add	r7, sp, #0
 810af2e:	60f8      	str	r0, [r7, #12]
 810af30:	60b9      	str	r1, [r7, #8]
 810af32:	607a      	str	r2, [r7, #4]
 810af34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810af36:	68fb      	ldr	r3, [r7, #12]
 810af38:	689b      	ldr	r3, [r3, #8]
 810af3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810af3c:	697b      	ldr	r3, [r7, #20]
 810af3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810af42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810af44:	683b      	ldr	r3, [r7, #0]
 810af46:	021a      	lsls	r2, r3, #8
 810af48:	687b      	ldr	r3, [r7, #4]
 810af4a:	431a      	orrs	r2, r3
 810af4c:	68bb      	ldr	r3, [r7, #8]
 810af4e:	4313      	orrs	r3, r2
 810af50:	697a      	ldr	r2, [r7, #20]
 810af52:	4313      	orrs	r3, r2
 810af54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810af56:	68fb      	ldr	r3, [r7, #12]
 810af58:	697a      	ldr	r2, [r7, #20]
 810af5a:	609a      	str	r2, [r3, #8]
}
 810af5c:	bf00      	nop
 810af5e:	371c      	adds	r7, #28
 810af60:	46bd      	mov	sp, r7
 810af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af66:	4770      	bx	lr

0810af68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810af68:	b480      	push	{r7}
 810af6a:	b085      	sub	sp, #20
 810af6c:	af00      	add	r7, sp, #0
 810af6e:	6078      	str	r0, [r7, #4]
 810af70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810af72:	687b      	ldr	r3, [r7, #4]
 810af74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810af78:	2b01      	cmp	r3, #1
 810af7a:	d101      	bne.n	810af80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810af7c:	2302      	movs	r3, #2
 810af7e:	e06d      	b.n	810b05c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810af80:	687b      	ldr	r3, [r7, #4]
 810af82:	2201      	movs	r2, #1
 810af84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810af88:	687b      	ldr	r3, [r7, #4]
 810af8a:	2202      	movs	r2, #2
 810af8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810af90:	687b      	ldr	r3, [r7, #4]
 810af92:	681b      	ldr	r3, [r3, #0]
 810af94:	685b      	ldr	r3, [r3, #4]
 810af96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810af98:	687b      	ldr	r3, [r7, #4]
 810af9a:	681b      	ldr	r3, [r3, #0]
 810af9c:	689b      	ldr	r3, [r3, #8]
 810af9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810afa0:	687b      	ldr	r3, [r7, #4]
 810afa2:	681b      	ldr	r3, [r3, #0]
 810afa4:	4a30      	ldr	r2, [pc, #192]	; (810b068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810afa6:	4293      	cmp	r3, r2
 810afa8:	d004      	beq.n	810afb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810afaa:	687b      	ldr	r3, [r7, #4]
 810afac:	681b      	ldr	r3, [r3, #0]
 810afae:	4a2f      	ldr	r2, [pc, #188]	; (810b06c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810afb0:	4293      	cmp	r3, r2
 810afb2:	d108      	bne.n	810afc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810afb4:	68fb      	ldr	r3, [r7, #12]
 810afb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810afba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810afbc:	683b      	ldr	r3, [r7, #0]
 810afbe:	685b      	ldr	r3, [r3, #4]
 810afc0:	68fa      	ldr	r2, [r7, #12]
 810afc2:	4313      	orrs	r3, r2
 810afc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810afc6:	68fb      	ldr	r3, [r7, #12]
 810afc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810afcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810afce:	683b      	ldr	r3, [r7, #0]
 810afd0:	681b      	ldr	r3, [r3, #0]
 810afd2:	68fa      	ldr	r2, [r7, #12]
 810afd4:	4313      	orrs	r3, r2
 810afd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810afd8:	687b      	ldr	r3, [r7, #4]
 810afda:	681b      	ldr	r3, [r3, #0]
 810afdc:	68fa      	ldr	r2, [r7, #12]
 810afde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810afe0:	687b      	ldr	r3, [r7, #4]
 810afe2:	681b      	ldr	r3, [r3, #0]
 810afe4:	4a20      	ldr	r2, [pc, #128]	; (810b068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810afe6:	4293      	cmp	r3, r2
 810afe8:	d022      	beq.n	810b030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810afea:	687b      	ldr	r3, [r7, #4]
 810afec:	681b      	ldr	r3, [r3, #0]
 810afee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810aff2:	d01d      	beq.n	810b030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810aff4:	687b      	ldr	r3, [r7, #4]
 810aff6:	681b      	ldr	r3, [r3, #0]
 810aff8:	4a1d      	ldr	r2, [pc, #116]	; (810b070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810affa:	4293      	cmp	r3, r2
 810affc:	d018      	beq.n	810b030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810affe:	687b      	ldr	r3, [r7, #4]
 810b000:	681b      	ldr	r3, [r3, #0]
 810b002:	4a1c      	ldr	r2, [pc, #112]	; (810b074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810b004:	4293      	cmp	r3, r2
 810b006:	d013      	beq.n	810b030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b008:	687b      	ldr	r3, [r7, #4]
 810b00a:	681b      	ldr	r3, [r3, #0]
 810b00c:	4a1a      	ldr	r2, [pc, #104]	; (810b078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810b00e:	4293      	cmp	r3, r2
 810b010:	d00e      	beq.n	810b030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b012:	687b      	ldr	r3, [r7, #4]
 810b014:	681b      	ldr	r3, [r3, #0]
 810b016:	4a15      	ldr	r2, [pc, #84]	; (810b06c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810b018:	4293      	cmp	r3, r2
 810b01a:	d009      	beq.n	810b030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b01c:	687b      	ldr	r3, [r7, #4]
 810b01e:	681b      	ldr	r3, [r3, #0]
 810b020:	4a16      	ldr	r2, [pc, #88]	; (810b07c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810b022:	4293      	cmp	r3, r2
 810b024:	d004      	beq.n	810b030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b026:	687b      	ldr	r3, [r7, #4]
 810b028:	681b      	ldr	r3, [r3, #0]
 810b02a:	4a15      	ldr	r2, [pc, #84]	; (810b080 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810b02c:	4293      	cmp	r3, r2
 810b02e:	d10c      	bne.n	810b04a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810b030:	68bb      	ldr	r3, [r7, #8]
 810b032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810b036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810b038:	683b      	ldr	r3, [r7, #0]
 810b03a:	689b      	ldr	r3, [r3, #8]
 810b03c:	68ba      	ldr	r2, [r7, #8]
 810b03e:	4313      	orrs	r3, r2
 810b040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810b042:	687b      	ldr	r3, [r7, #4]
 810b044:	681b      	ldr	r3, [r3, #0]
 810b046:	68ba      	ldr	r2, [r7, #8]
 810b048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810b04a:	687b      	ldr	r3, [r7, #4]
 810b04c:	2201      	movs	r2, #1
 810b04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810b052:	687b      	ldr	r3, [r7, #4]
 810b054:	2200      	movs	r2, #0
 810b056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810b05a:	2300      	movs	r3, #0
}
 810b05c:	4618      	mov	r0, r3
 810b05e:	3714      	adds	r7, #20
 810b060:	46bd      	mov	sp, r7
 810b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b066:	4770      	bx	lr
 810b068:	40010000 	.word	0x40010000
 810b06c:	40010400 	.word	0x40010400
 810b070:	40000400 	.word	0x40000400
 810b074:	40000800 	.word	0x40000800
 810b078:	40000c00 	.word	0x40000c00
 810b07c:	40001800 	.word	0x40001800
 810b080:	40014000 	.word	0x40014000

0810b084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810b084:	b480      	push	{r7}
 810b086:	b085      	sub	sp, #20
 810b088:	af00      	add	r7, sp, #0
 810b08a:	6078      	str	r0, [r7, #4]
 810b08c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810b08e:	2300      	movs	r3, #0
 810b090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810b092:	687b      	ldr	r3, [r7, #4]
 810b094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810b098:	2b01      	cmp	r3, #1
 810b09a:	d101      	bne.n	810b0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810b09c:	2302      	movs	r3, #2
 810b09e:	e065      	b.n	810b16c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	2201      	movs	r2, #1
 810b0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810b0a8:	68fb      	ldr	r3, [r7, #12]
 810b0aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810b0ae:	683b      	ldr	r3, [r7, #0]
 810b0b0:	68db      	ldr	r3, [r3, #12]
 810b0b2:	4313      	orrs	r3, r2
 810b0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810b0b6:	68fb      	ldr	r3, [r7, #12]
 810b0b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810b0bc:	683b      	ldr	r3, [r7, #0]
 810b0be:	689b      	ldr	r3, [r3, #8]
 810b0c0:	4313      	orrs	r3, r2
 810b0c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810b0c4:	68fb      	ldr	r3, [r7, #12]
 810b0c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810b0ca:	683b      	ldr	r3, [r7, #0]
 810b0cc:	685b      	ldr	r3, [r3, #4]
 810b0ce:	4313      	orrs	r3, r2
 810b0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810b0d2:	68fb      	ldr	r3, [r7, #12]
 810b0d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810b0d8:	683b      	ldr	r3, [r7, #0]
 810b0da:	681b      	ldr	r3, [r3, #0]
 810b0dc:	4313      	orrs	r3, r2
 810b0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810b0e0:	68fb      	ldr	r3, [r7, #12]
 810b0e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810b0e6:	683b      	ldr	r3, [r7, #0]
 810b0e8:	691b      	ldr	r3, [r3, #16]
 810b0ea:	4313      	orrs	r3, r2
 810b0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810b0ee:	68fb      	ldr	r3, [r7, #12]
 810b0f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810b0f4:	683b      	ldr	r3, [r7, #0]
 810b0f6:	695b      	ldr	r3, [r3, #20]
 810b0f8:	4313      	orrs	r3, r2
 810b0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810b0fc:	68fb      	ldr	r3, [r7, #12]
 810b0fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810b102:	683b      	ldr	r3, [r7, #0]
 810b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b106:	4313      	orrs	r3, r2
 810b108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810b10a:	68fb      	ldr	r3, [r7, #12]
 810b10c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810b110:	683b      	ldr	r3, [r7, #0]
 810b112:	699b      	ldr	r3, [r3, #24]
 810b114:	041b      	lsls	r3, r3, #16
 810b116:	4313      	orrs	r3, r2
 810b118:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810b11a:	687b      	ldr	r3, [r7, #4]
 810b11c:	681b      	ldr	r3, [r3, #0]
 810b11e:	4a16      	ldr	r2, [pc, #88]	; (810b178 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810b120:	4293      	cmp	r3, r2
 810b122:	d004      	beq.n	810b12e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810b124:	687b      	ldr	r3, [r7, #4]
 810b126:	681b      	ldr	r3, [r3, #0]
 810b128:	4a14      	ldr	r2, [pc, #80]	; (810b17c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810b12a:	4293      	cmp	r3, r2
 810b12c:	d115      	bne.n	810b15a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810b12e:	68fb      	ldr	r3, [r7, #12]
 810b130:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810b134:	683b      	ldr	r3, [r7, #0]
 810b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b138:	051b      	lsls	r3, r3, #20
 810b13a:	4313      	orrs	r3, r2
 810b13c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810b13e:	68fb      	ldr	r3, [r7, #12]
 810b140:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810b144:	683b      	ldr	r3, [r7, #0]
 810b146:	69db      	ldr	r3, [r3, #28]
 810b148:	4313      	orrs	r3, r2
 810b14a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810b14c:	68fb      	ldr	r3, [r7, #12]
 810b14e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810b152:	683b      	ldr	r3, [r7, #0]
 810b154:	6a1b      	ldr	r3, [r3, #32]
 810b156:	4313      	orrs	r3, r2
 810b158:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810b15a:	687b      	ldr	r3, [r7, #4]
 810b15c:	681b      	ldr	r3, [r3, #0]
 810b15e:	68fa      	ldr	r2, [r7, #12]
 810b160:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810b162:	687b      	ldr	r3, [r7, #4]
 810b164:	2200      	movs	r2, #0
 810b166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810b16a:	2300      	movs	r3, #0
}
 810b16c:	4618      	mov	r0, r3
 810b16e:	3714      	adds	r7, #20
 810b170:	46bd      	mov	sp, r7
 810b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b176:	4770      	bx	lr
 810b178:	40010000 	.word	0x40010000
 810b17c:	40010400 	.word	0x40010400

0810b180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810b180:	b480      	push	{r7}
 810b182:	b083      	sub	sp, #12
 810b184:	af00      	add	r7, sp, #0
 810b186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810b188:	bf00      	nop
 810b18a:	370c      	adds	r7, #12
 810b18c:	46bd      	mov	sp, r7
 810b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b192:	4770      	bx	lr

0810b194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810b194:	b480      	push	{r7}
 810b196:	b083      	sub	sp, #12
 810b198:	af00      	add	r7, sp, #0
 810b19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810b19c:	bf00      	nop
 810b19e:	370c      	adds	r7, #12
 810b1a0:	46bd      	mov	sp, r7
 810b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1a6:	4770      	bx	lr

0810b1a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810b1a8:	b480      	push	{r7}
 810b1aa:	b083      	sub	sp, #12
 810b1ac:	af00      	add	r7, sp, #0
 810b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810b1b0:	bf00      	nop
 810b1b2:	370c      	adds	r7, #12
 810b1b4:	46bd      	mov	sp, r7
 810b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1ba:	4770      	bx	lr

0810b1bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810b1bc:	b580      	push	{r7, lr}
 810b1be:	b082      	sub	sp, #8
 810b1c0:	af00      	add	r7, sp, #0
 810b1c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810b1c4:	687b      	ldr	r3, [r7, #4]
 810b1c6:	2b00      	cmp	r3, #0
 810b1c8:	d101      	bne.n	810b1ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810b1ca:	2301      	movs	r3, #1
 810b1cc:	e042      	b.n	810b254 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810b1ce:	687b      	ldr	r3, [r7, #4]
 810b1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b1d4:	2b00      	cmp	r3, #0
 810b1d6:	d106      	bne.n	810b1e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810b1d8:	687b      	ldr	r3, [r7, #4]
 810b1da:	2200      	movs	r2, #0
 810b1dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810b1e0:	6878      	ldr	r0, [r7, #4]
 810b1e2:	f00b fb8d 	bl	8116900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810b1e6:	687b      	ldr	r3, [r7, #4]
 810b1e8:	2224      	movs	r2, #36	; 0x24
 810b1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810b1ee:	687b      	ldr	r3, [r7, #4]
 810b1f0:	681b      	ldr	r3, [r3, #0]
 810b1f2:	681a      	ldr	r2, [r3, #0]
 810b1f4:	687b      	ldr	r3, [r7, #4]
 810b1f6:	681b      	ldr	r3, [r3, #0]
 810b1f8:	f022 0201 	bic.w	r2, r2, #1
 810b1fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810b1fe:	6878      	ldr	r0, [r7, #4]
 810b200:	f000 f996 	bl	810b530 <UART_SetConfig>
 810b204:	4603      	mov	r3, r0
 810b206:	2b01      	cmp	r3, #1
 810b208:	d101      	bne.n	810b20e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810b20a:	2301      	movs	r3, #1
 810b20c:	e022      	b.n	810b254 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810b20e:	687b      	ldr	r3, [r7, #4]
 810b210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b212:	2b00      	cmp	r3, #0
 810b214:	d002      	beq.n	810b21c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810b216:	6878      	ldr	r0, [r7, #4]
 810b218:	f000 feea 	bl	810bff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810b21c:	687b      	ldr	r3, [r7, #4]
 810b21e:	681b      	ldr	r3, [r3, #0]
 810b220:	685a      	ldr	r2, [r3, #4]
 810b222:	687b      	ldr	r3, [r7, #4]
 810b224:	681b      	ldr	r3, [r3, #0]
 810b226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810b22a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810b22c:	687b      	ldr	r3, [r7, #4]
 810b22e:	681b      	ldr	r3, [r3, #0]
 810b230:	689a      	ldr	r2, [r3, #8]
 810b232:	687b      	ldr	r3, [r7, #4]
 810b234:	681b      	ldr	r3, [r3, #0]
 810b236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810b23a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810b23c:	687b      	ldr	r3, [r7, #4]
 810b23e:	681b      	ldr	r3, [r3, #0]
 810b240:	681a      	ldr	r2, [r3, #0]
 810b242:	687b      	ldr	r3, [r7, #4]
 810b244:	681b      	ldr	r3, [r3, #0]
 810b246:	f042 0201 	orr.w	r2, r2, #1
 810b24a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810b24c:	6878      	ldr	r0, [r7, #4]
 810b24e:	f000 ff71 	bl	810c134 <UART_CheckIdleState>
 810b252:	4603      	mov	r3, r0
}
 810b254:	4618      	mov	r0, r3
 810b256:	3708      	adds	r7, #8
 810b258:	46bd      	mov	sp, r7
 810b25a:	bd80      	pop	{r7, pc}

0810b25c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810b25c:	b580      	push	{r7, lr}
 810b25e:	b08a      	sub	sp, #40	; 0x28
 810b260:	af02      	add	r7, sp, #8
 810b262:	60f8      	str	r0, [r7, #12]
 810b264:	60b9      	str	r1, [r7, #8]
 810b266:	603b      	str	r3, [r7, #0]
 810b268:	4613      	mov	r3, r2
 810b26a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b26c:	68fb      	ldr	r3, [r7, #12]
 810b26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b272:	2b20      	cmp	r3, #32
 810b274:	f040 8083 	bne.w	810b37e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 810b278:	68bb      	ldr	r3, [r7, #8]
 810b27a:	2b00      	cmp	r3, #0
 810b27c:	d002      	beq.n	810b284 <HAL_UART_Transmit+0x28>
 810b27e:	88fb      	ldrh	r3, [r7, #6]
 810b280:	2b00      	cmp	r3, #0
 810b282:	d101      	bne.n	810b288 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 810b284:	2301      	movs	r3, #1
 810b286:	e07b      	b.n	810b380 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 810b288:	68fb      	ldr	r3, [r7, #12]
 810b28a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b28e:	2b01      	cmp	r3, #1
 810b290:	d101      	bne.n	810b296 <HAL_UART_Transmit+0x3a>
 810b292:	2302      	movs	r3, #2
 810b294:	e074      	b.n	810b380 <HAL_UART_Transmit+0x124>
 810b296:	68fb      	ldr	r3, [r7, #12]
 810b298:	2201      	movs	r2, #1
 810b29a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b29e:	68fb      	ldr	r3, [r7, #12]
 810b2a0:	2200      	movs	r2, #0
 810b2a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810b2a6:	68fb      	ldr	r3, [r7, #12]
 810b2a8:	2221      	movs	r2, #33	; 0x21
 810b2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810b2ae:	f7f6 f8bf 	bl	8101430 <HAL_GetTick>
 810b2b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810b2b4:	68fb      	ldr	r3, [r7, #12]
 810b2b6:	88fa      	ldrh	r2, [r7, #6]
 810b2b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810b2bc:	68fb      	ldr	r3, [r7, #12]
 810b2be:	88fa      	ldrh	r2, [r7, #6]
 810b2c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810b2c4:	68fb      	ldr	r3, [r7, #12]
 810b2c6:	689b      	ldr	r3, [r3, #8]
 810b2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b2cc:	d108      	bne.n	810b2e0 <HAL_UART_Transmit+0x84>
 810b2ce:	68fb      	ldr	r3, [r7, #12]
 810b2d0:	691b      	ldr	r3, [r3, #16]
 810b2d2:	2b00      	cmp	r3, #0
 810b2d4:	d104      	bne.n	810b2e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810b2d6:	2300      	movs	r3, #0
 810b2d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810b2da:	68bb      	ldr	r3, [r7, #8]
 810b2dc:	61bb      	str	r3, [r7, #24]
 810b2de:	e003      	b.n	810b2e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 810b2e0:	68bb      	ldr	r3, [r7, #8]
 810b2e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810b2e4:	2300      	movs	r3, #0
 810b2e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810b2e8:	68fb      	ldr	r3, [r7, #12]
 810b2ea:	2200      	movs	r2, #0
 810b2ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 810b2f0:	e02c      	b.n	810b34c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810b2f2:	683b      	ldr	r3, [r7, #0]
 810b2f4:	9300      	str	r3, [sp, #0]
 810b2f6:	697b      	ldr	r3, [r7, #20]
 810b2f8:	2200      	movs	r2, #0
 810b2fa:	2180      	movs	r1, #128	; 0x80
 810b2fc:	68f8      	ldr	r0, [r7, #12]
 810b2fe:	f000 ff64 	bl	810c1ca <UART_WaitOnFlagUntilTimeout>
 810b302:	4603      	mov	r3, r0
 810b304:	2b00      	cmp	r3, #0
 810b306:	d001      	beq.n	810b30c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 810b308:	2303      	movs	r3, #3
 810b30a:	e039      	b.n	810b380 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 810b30c:	69fb      	ldr	r3, [r7, #28]
 810b30e:	2b00      	cmp	r3, #0
 810b310:	d10b      	bne.n	810b32a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810b312:	69bb      	ldr	r3, [r7, #24]
 810b314:	881b      	ldrh	r3, [r3, #0]
 810b316:	461a      	mov	r2, r3
 810b318:	68fb      	ldr	r3, [r7, #12]
 810b31a:	681b      	ldr	r3, [r3, #0]
 810b31c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810b320:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810b322:	69bb      	ldr	r3, [r7, #24]
 810b324:	3302      	adds	r3, #2
 810b326:	61bb      	str	r3, [r7, #24]
 810b328:	e007      	b.n	810b33a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810b32a:	69fb      	ldr	r3, [r7, #28]
 810b32c:	781a      	ldrb	r2, [r3, #0]
 810b32e:	68fb      	ldr	r3, [r7, #12]
 810b330:	681b      	ldr	r3, [r3, #0]
 810b332:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810b334:	69fb      	ldr	r3, [r7, #28]
 810b336:	3301      	adds	r3, #1
 810b338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810b33a:	68fb      	ldr	r3, [r7, #12]
 810b33c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810b340:	b29b      	uxth	r3, r3
 810b342:	3b01      	subs	r3, #1
 810b344:	b29a      	uxth	r2, r3
 810b346:	68fb      	ldr	r3, [r7, #12]
 810b348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 810b34c:	68fb      	ldr	r3, [r7, #12]
 810b34e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810b352:	b29b      	uxth	r3, r3
 810b354:	2b00      	cmp	r3, #0
 810b356:	d1cc      	bne.n	810b2f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810b358:	683b      	ldr	r3, [r7, #0]
 810b35a:	9300      	str	r3, [sp, #0]
 810b35c:	697b      	ldr	r3, [r7, #20]
 810b35e:	2200      	movs	r2, #0
 810b360:	2140      	movs	r1, #64	; 0x40
 810b362:	68f8      	ldr	r0, [r7, #12]
 810b364:	f000 ff31 	bl	810c1ca <UART_WaitOnFlagUntilTimeout>
 810b368:	4603      	mov	r3, r0
 810b36a:	2b00      	cmp	r3, #0
 810b36c:	d001      	beq.n	810b372 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810b36e:	2303      	movs	r3, #3
 810b370:	e006      	b.n	810b380 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810b372:	68fb      	ldr	r3, [r7, #12]
 810b374:	2220      	movs	r2, #32
 810b376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810b37a:	2300      	movs	r3, #0
 810b37c:	e000      	b.n	810b380 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810b37e:	2302      	movs	r3, #2
  }
}
 810b380:	4618      	mov	r0, r3
 810b382:	3720      	adds	r7, #32
 810b384:	46bd      	mov	sp, r7
 810b386:	bd80      	pop	{r7, pc}

0810b388 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810b388:	b580      	push	{r7, lr}
 810b38a:	b08a      	sub	sp, #40	; 0x28
 810b38c:	af02      	add	r7, sp, #8
 810b38e:	60f8      	str	r0, [r7, #12]
 810b390:	60b9      	str	r1, [r7, #8]
 810b392:	603b      	str	r3, [r7, #0]
 810b394:	4613      	mov	r3, r2
 810b396:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810b398:	68fb      	ldr	r3, [r7, #12]
 810b39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b39e:	2b20      	cmp	r3, #32
 810b3a0:	f040 80c0 	bne.w	810b524 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 810b3a4:	68bb      	ldr	r3, [r7, #8]
 810b3a6:	2b00      	cmp	r3, #0
 810b3a8:	d002      	beq.n	810b3b0 <HAL_UART_Receive+0x28>
 810b3aa:	88fb      	ldrh	r3, [r7, #6]
 810b3ac:	2b00      	cmp	r3, #0
 810b3ae:	d101      	bne.n	810b3b4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810b3b0:	2301      	movs	r3, #1
 810b3b2:	e0b8      	b.n	810b526 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 810b3b4:	68fb      	ldr	r3, [r7, #12]
 810b3b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b3ba:	2b01      	cmp	r3, #1
 810b3bc:	d101      	bne.n	810b3c2 <HAL_UART_Receive+0x3a>
 810b3be:	2302      	movs	r3, #2
 810b3c0:	e0b1      	b.n	810b526 <HAL_UART_Receive+0x19e>
 810b3c2:	68fb      	ldr	r3, [r7, #12]
 810b3c4:	2201      	movs	r2, #1
 810b3c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b3ca:	68fb      	ldr	r3, [r7, #12]
 810b3cc:	2200      	movs	r2, #0
 810b3ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810b3d2:	68fb      	ldr	r3, [r7, #12]
 810b3d4:	2222      	movs	r2, #34	; 0x22
 810b3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b3da:	68fb      	ldr	r3, [r7, #12]
 810b3dc:	2200      	movs	r2, #0
 810b3de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810b3e0:	f7f6 f826 	bl	8101430 <HAL_GetTick>
 810b3e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810b3e6:	68fb      	ldr	r3, [r7, #12]
 810b3e8:	88fa      	ldrh	r2, [r7, #6]
 810b3ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 810b3ee:	68fb      	ldr	r3, [r7, #12]
 810b3f0:	88fa      	ldrh	r2, [r7, #6]
 810b3f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810b3f6:	68fb      	ldr	r3, [r7, #12]
 810b3f8:	689b      	ldr	r3, [r3, #8]
 810b3fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b3fe:	d10e      	bne.n	810b41e <HAL_UART_Receive+0x96>
 810b400:	68fb      	ldr	r3, [r7, #12]
 810b402:	691b      	ldr	r3, [r3, #16]
 810b404:	2b00      	cmp	r3, #0
 810b406:	d105      	bne.n	810b414 <HAL_UART_Receive+0x8c>
 810b408:	68fb      	ldr	r3, [r7, #12]
 810b40a:	f240 12ff 	movw	r2, #511	; 0x1ff
 810b40e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810b412:	e02d      	b.n	810b470 <HAL_UART_Receive+0xe8>
 810b414:	68fb      	ldr	r3, [r7, #12]
 810b416:	22ff      	movs	r2, #255	; 0xff
 810b418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810b41c:	e028      	b.n	810b470 <HAL_UART_Receive+0xe8>
 810b41e:	68fb      	ldr	r3, [r7, #12]
 810b420:	689b      	ldr	r3, [r3, #8]
 810b422:	2b00      	cmp	r3, #0
 810b424:	d10d      	bne.n	810b442 <HAL_UART_Receive+0xba>
 810b426:	68fb      	ldr	r3, [r7, #12]
 810b428:	691b      	ldr	r3, [r3, #16]
 810b42a:	2b00      	cmp	r3, #0
 810b42c:	d104      	bne.n	810b438 <HAL_UART_Receive+0xb0>
 810b42e:	68fb      	ldr	r3, [r7, #12]
 810b430:	22ff      	movs	r2, #255	; 0xff
 810b432:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810b436:	e01b      	b.n	810b470 <HAL_UART_Receive+0xe8>
 810b438:	68fb      	ldr	r3, [r7, #12]
 810b43a:	227f      	movs	r2, #127	; 0x7f
 810b43c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810b440:	e016      	b.n	810b470 <HAL_UART_Receive+0xe8>
 810b442:	68fb      	ldr	r3, [r7, #12]
 810b444:	689b      	ldr	r3, [r3, #8]
 810b446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b44a:	d10d      	bne.n	810b468 <HAL_UART_Receive+0xe0>
 810b44c:	68fb      	ldr	r3, [r7, #12]
 810b44e:	691b      	ldr	r3, [r3, #16]
 810b450:	2b00      	cmp	r3, #0
 810b452:	d104      	bne.n	810b45e <HAL_UART_Receive+0xd6>
 810b454:	68fb      	ldr	r3, [r7, #12]
 810b456:	227f      	movs	r2, #127	; 0x7f
 810b458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810b45c:	e008      	b.n	810b470 <HAL_UART_Receive+0xe8>
 810b45e:	68fb      	ldr	r3, [r7, #12]
 810b460:	223f      	movs	r2, #63	; 0x3f
 810b462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810b466:	e003      	b.n	810b470 <HAL_UART_Receive+0xe8>
 810b468:	68fb      	ldr	r3, [r7, #12]
 810b46a:	2200      	movs	r2, #0
 810b46c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 810b470:	68fb      	ldr	r3, [r7, #12]
 810b472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 810b476:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810b478:	68fb      	ldr	r3, [r7, #12]
 810b47a:	689b      	ldr	r3, [r3, #8]
 810b47c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b480:	d108      	bne.n	810b494 <HAL_UART_Receive+0x10c>
 810b482:	68fb      	ldr	r3, [r7, #12]
 810b484:	691b      	ldr	r3, [r3, #16]
 810b486:	2b00      	cmp	r3, #0
 810b488:	d104      	bne.n	810b494 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 810b48a:	2300      	movs	r3, #0
 810b48c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810b48e:	68bb      	ldr	r3, [r7, #8]
 810b490:	61bb      	str	r3, [r7, #24]
 810b492:	e003      	b.n	810b49c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 810b494:	68bb      	ldr	r3, [r7, #8]
 810b496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810b498:	2300      	movs	r3, #0
 810b49a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810b49c:	68fb      	ldr	r3, [r7, #12]
 810b49e:	2200      	movs	r2, #0
 810b4a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810b4a4:	e032      	b.n	810b50c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810b4a6:	683b      	ldr	r3, [r7, #0]
 810b4a8:	9300      	str	r3, [sp, #0]
 810b4aa:	697b      	ldr	r3, [r7, #20]
 810b4ac:	2200      	movs	r2, #0
 810b4ae:	2120      	movs	r1, #32
 810b4b0:	68f8      	ldr	r0, [r7, #12]
 810b4b2:	f000 fe8a 	bl	810c1ca <UART_WaitOnFlagUntilTimeout>
 810b4b6:	4603      	mov	r3, r0
 810b4b8:	2b00      	cmp	r3, #0
 810b4ba:	d001      	beq.n	810b4c0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 810b4bc:	2303      	movs	r3, #3
 810b4be:	e032      	b.n	810b526 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 810b4c0:	69fb      	ldr	r3, [r7, #28]
 810b4c2:	2b00      	cmp	r3, #0
 810b4c4:	d10c      	bne.n	810b4e0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810b4c6:	68fb      	ldr	r3, [r7, #12]
 810b4c8:	681b      	ldr	r3, [r3, #0]
 810b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b4cc:	b29a      	uxth	r2, r3
 810b4ce:	8a7b      	ldrh	r3, [r7, #18]
 810b4d0:	4013      	ands	r3, r2
 810b4d2:	b29a      	uxth	r2, r3
 810b4d4:	69bb      	ldr	r3, [r7, #24]
 810b4d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810b4d8:	69bb      	ldr	r3, [r7, #24]
 810b4da:	3302      	adds	r3, #2
 810b4dc:	61bb      	str	r3, [r7, #24]
 810b4de:	e00c      	b.n	810b4fa <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810b4e0:	68fb      	ldr	r3, [r7, #12]
 810b4e2:	681b      	ldr	r3, [r3, #0]
 810b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b4e6:	b2da      	uxtb	r2, r3
 810b4e8:	8a7b      	ldrh	r3, [r7, #18]
 810b4ea:	b2db      	uxtb	r3, r3
 810b4ec:	4013      	ands	r3, r2
 810b4ee:	b2da      	uxtb	r2, r3
 810b4f0:	69fb      	ldr	r3, [r7, #28]
 810b4f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810b4f4:	69fb      	ldr	r3, [r7, #28]
 810b4f6:	3301      	adds	r3, #1
 810b4f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810b4fa:	68fb      	ldr	r3, [r7, #12]
 810b4fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b500:	b29b      	uxth	r3, r3
 810b502:	3b01      	subs	r3, #1
 810b504:	b29a      	uxth	r2, r3
 810b506:	68fb      	ldr	r3, [r7, #12]
 810b508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 810b50c:	68fb      	ldr	r3, [r7, #12]
 810b50e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b512:	b29b      	uxth	r3, r3
 810b514:	2b00      	cmp	r3, #0
 810b516:	d1c6      	bne.n	810b4a6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810b518:	68fb      	ldr	r3, [r7, #12]
 810b51a:	2220      	movs	r2, #32
 810b51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 810b520:	2300      	movs	r3, #0
 810b522:	e000      	b.n	810b526 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 810b524:	2302      	movs	r3, #2
  }
}
 810b526:	4618      	mov	r0, r3
 810b528:	3720      	adds	r7, #32
 810b52a:	46bd      	mov	sp, r7
 810b52c:	bd80      	pop	{r7, pc}
	...

0810b530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b530:	b5b0      	push	{r4, r5, r7, lr}
 810b532:	b08e      	sub	sp, #56	; 0x38
 810b534:	af00      	add	r7, sp, #0
 810b536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b538:	2300      	movs	r3, #0
 810b53a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b53e:	687b      	ldr	r3, [r7, #4]
 810b540:	689a      	ldr	r2, [r3, #8]
 810b542:	687b      	ldr	r3, [r7, #4]
 810b544:	691b      	ldr	r3, [r3, #16]
 810b546:	431a      	orrs	r2, r3
 810b548:	687b      	ldr	r3, [r7, #4]
 810b54a:	695b      	ldr	r3, [r3, #20]
 810b54c:	431a      	orrs	r2, r3
 810b54e:	687b      	ldr	r3, [r7, #4]
 810b550:	69db      	ldr	r3, [r3, #28]
 810b552:	4313      	orrs	r3, r2
 810b554:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b556:	687b      	ldr	r3, [r7, #4]
 810b558:	681b      	ldr	r3, [r3, #0]
 810b55a:	681a      	ldr	r2, [r3, #0]
 810b55c:	4bc0      	ldr	r3, [pc, #768]	; (810b860 <UART_SetConfig+0x330>)
 810b55e:	4013      	ands	r3, r2
 810b560:	687a      	ldr	r2, [r7, #4]
 810b562:	6812      	ldr	r2, [r2, #0]
 810b564:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b566:	430b      	orrs	r3, r1
 810b568:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b56a:	687b      	ldr	r3, [r7, #4]
 810b56c:	681b      	ldr	r3, [r3, #0]
 810b56e:	685b      	ldr	r3, [r3, #4]
 810b570:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810b574:	687b      	ldr	r3, [r7, #4]
 810b576:	68da      	ldr	r2, [r3, #12]
 810b578:	687b      	ldr	r3, [r7, #4]
 810b57a:	681b      	ldr	r3, [r3, #0]
 810b57c:	430a      	orrs	r2, r1
 810b57e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b580:	687b      	ldr	r3, [r7, #4]
 810b582:	699b      	ldr	r3, [r3, #24]
 810b584:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b586:	687b      	ldr	r3, [r7, #4]
 810b588:	681b      	ldr	r3, [r3, #0]
 810b58a:	4ab6      	ldr	r2, [pc, #728]	; (810b864 <UART_SetConfig+0x334>)
 810b58c:	4293      	cmp	r3, r2
 810b58e:	d004      	beq.n	810b59a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b590:	687b      	ldr	r3, [r7, #4]
 810b592:	6a1b      	ldr	r3, [r3, #32]
 810b594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b596:	4313      	orrs	r3, r2
 810b598:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b59a:	687b      	ldr	r3, [r7, #4]
 810b59c:	681b      	ldr	r3, [r3, #0]
 810b59e:	689b      	ldr	r3, [r3, #8]
 810b5a0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810b5a4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810b5a8:	687a      	ldr	r2, [r7, #4]
 810b5aa:	6812      	ldr	r2, [r2, #0]
 810b5ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b5ae:	430b      	orrs	r3, r1
 810b5b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b5b2:	687b      	ldr	r3, [r7, #4]
 810b5b4:	681b      	ldr	r3, [r3, #0]
 810b5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b5b8:	f023 010f 	bic.w	r1, r3, #15
 810b5bc:	687b      	ldr	r3, [r7, #4]
 810b5be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810b5c0:	687b      	ldr	r3, [r7, #4]
 810b5c2:	681b      	ldr	r3, [r3, #0]
 810b5c4:	430a      	orrs	r2, r1
 810b5c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b5c8:	687b      	ldr	r3, [r7, #4]
 810b5ca:	681b      	ldr	r3, [r3, #0]
 810b5cc:	4aa6      	ldr	r2, [pc, #664]	; (810b868 <UART_SetConfig+0x338>)
 810b5ce:	4293      	cmp	r3, r2
 810b5d0:	d176      	bne.n	810b6c0 <UART_SetConfig+0x190>
 810b5d2:	4ba6      	ldr	r3, [pc, #664]	; (810b86c <UART_SetConfig+0x33c>)
 810b5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b5d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b5da:	2b28      	cmp	r3, #40	; 0x28
 810b5dc:	d86c      	bhi.n	810b6b8 <UART_SetConfig+0x188>
 810b5de:	a201      	add	r2, pc, #4	; (adr r2, 810b5e4 <UART_SetConfig+0xb4>)
 810b5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b5e4:	0810b689 	.word	0x0810b689
 810b5e8:	0810b6b9 	.word	0x0810b6b9
 810b5ec:	0810b6b9 	.word	0x0810b6b9
 810b5f0:	0810b6b9 	.word	0x0810b6b9
 810b5f4:	0810b6b9 	.word	0x0810b6b9
 810b5f8:	0810b6b9 	.word	0x0810b6b9
 810b5fc:	0810b6b9 	.word	0x0810b6b9
 810b600:	0810b6b9 	.word	0x0810b6b9
 810b604:	0810b691 	.word	0x0810b691
 810b608:	0810b6b9 	.word	0x0810b6b9
 810b60c:	0810b6b9 	.word	0x0810b6b9
 810b610:	0810b6b9 	.word	0x0810b6b9
 810b614:	0810b6b9 	.word	0x0810b6b9
 810b618:	0810b6b9 	.word	0x0810b6b9
 810b61c:	0810b6b9 	.word	0x0810b6b9
 810b620:	0810b6b9 	.word	0x0810b6b9
 810b624:	0810b699 	.word	0x0810b699
 810b628:	0810b6b9 	.word	0x0810b6b9
 810b62c:	0810b6b9 	.word	0x0810b6b9
 810b630:	0810b6b9 	.word	0x0810b6b9
 810b634:	0810b6b9 	.word	0x0810b6b9
 810b638:	0810b6b9 	.word	0x0810b6b9
 810b63c:	0810b6b9 	.word	0x0810b6b9
 810b640:	0810b6b9 	.word	0x0810b6b9
 810b644:	0810b6a1 	.word	0x0810b6a1
 810b648:	0810b6b9 	.word	0x0810b6b9
 810b64c:	0810b6b9 	.word	0x0810b6b9
 810b650:	0810b6b9 	.word	0x0810b6b9
 810b654:	0810b6b9 	.word	0x0810b6b9
 810b658:	0810b6b9 	.word	0x0810b6b9
 810b65c:	0810b6b9 	.word	0x0810b6b9
 810b660:	0810b6b9 	.word	0x0810b6b9
 810b664:	0810b6a9 	.word	0x0810b6a9
 810b668:	0810b6b9 	.word	0x0810b6b9
 810b66c:	0810b6b9 	.word	0x0810b6b9
 810b670:	0810b6b9 	.word	0x0810b6b9
 810b674:	0810b6b9 	.word	0x0810b6b9
 810b678:	0810b6b9 	.word	0x0810b6b9
 810b67c:	0810b6b9 	.word	0x0810b6b9
 810b680:	0810b6b9 	.word	0x0810b6b9
 810b684:	0810b6b1 	.word	0x0810b6b1
 810b688:	2301      	movs	r3, #1
 810b68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b68e:	e220      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b690:	2304      	movs	r3, #4
 810b692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b696:	e21c      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b698:	2308      	movs	r3, #8
 810b69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b69e:	e218      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b6a0:	2310      	movs	r3, #16
 810b6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6a6:	e214      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b6a8:	2320      	movs	r3, #32
 810b6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6ae:	e210      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b6b0:	2340      	movs	r3, #64	; 0x40
 810b6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6b6:	e20c      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b6b8:	2380      	movs	r3, #128	; 0x80
 810b6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6be:	e208      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b6c0:	687b      	ldr	r3, [r7, #4]
 810b6c2:	681b      	ldr	r3, [r3, #0]
 810b6c4:	4a6a      	ldr	r2, [pc, #424]	; (810b870 <UART_SetConfig+0x340>)
 810b6c6:	4293      	cmp	r3, r2
 810b6c8:	d130      	bne.n	810b72c <UART_SetConfig+0x1fc>
 810b6ca:	4b68      	ldr	r3, [pc, #416]	; (810b86c <UART_SetConfig+0x33c>)
 810b6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b6ce:	f003 0307 	and.w	r3, r3, #7
 810b6d2:	2b05      	cmp	r3, #5
 810b6d4:	d826      	bhi.n	810b724 <UART_SetConfig+0x1f4>
 810b6d6:	a201      	add	r2, pc, #4	; (adr r2, 810b6dc <UART_SetConfig+0x1ac>)
 810b6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b6dc:	0810b6f5 	.word	0x0810b6f5
 810b6e0:	0810b6fd 	.word	0x0810b6fd
 810b6e4:	0810b705 	.word	0x0810b705
 810b6e8:	0810b70d 	.word	0x0810b70d
 810b6ec:	0810b715 	.word	0x0810b715
 810b6f0:	0810b71d 	.word	0x0810b71d
 810b6f4:	2300      	movs	r3, #0
 810b6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6fa:	e1ea      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b6fc:	2304      	movs	r3, #4
 810b6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b702:	e1e6      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b704:	2308      	movs	r3, #8
 810b706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b70a:	e1e2      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b70c:	2310      	movs	r3, #16
 810b70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b712:	e1de      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b714:	2320      	movs	r3, #32
 810b716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b71a:	e1da      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b71c:	2340      	movs	r3, #64	; 0x40
 810b71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b722:	e1d6      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b724:	2380      	movs	r3, #128	; 0x80
 810b726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b72a:	e1d2      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b72c:	687b      	ldr	r3, [r7, #4]
 810b72e:	681b      	ldr	r3, [r3, #0]
 810b730:	4a50      	ldr	r2, [pc, #320]	; (810b874 <UART_SetConfig+0x344>)
 810b732:	4293      	cmp	r3, r2
 810b734:	d130      	bne.n	810b798 <UART_SetConfig+0x268>
 810b736:	4b4d      	ldr	r3, [pc, #308]	; (810b86c <UART_SetConfig+0x33c>)
 810b738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b73a:	f003 0307 	and.w	r3, r3, #7
 810b73e:	2b05      	cmp	r3, #5
 810b740:	d826      	bhi.n	810b790 <UART_SetConfig+0x260>
 810b742:	a201      	add	r2, pc, #4	; (adr r2, 810b748 <UART_SetConfig+0x218>)
 810b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b748:	0810b761 	.word	0x0810b761
 810b74c:	0810b769 	.word	0x0810b769
 810b750:	0810b771 	.word	0x0810b771
 810b754:	0810b779 	.word	0x0810b779
 810b758:	0810b781 	.word	0x0810b781
 810b75c:	0810b789 	.word	0x0810b789
 810b760:	2300      	movs	r3, #0
 810b762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b766:	e1b4      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b768:	2304      	movs	r3, #4
 810b76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b76e:	e1b0      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b770:	2308      	movs	r3, #8
 810b772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b776:	e1ac      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b778:	2310      	movs	r3, #16
 810b77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b77e:	e1a8      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b780:	2320      	movs	r3, #32
 810b782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b786:	e1a4      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b788:	2340      	movs	r3, #64	; 0x40
 810b78a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b78e:	e1a0      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b790:	2380      	movs	r3, #128	; 0x80
 810b792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b796:	e19c      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b798:	687b      	ldr	r3, [r7, #4]
 810b79a:	681b      	ldr	r3, [r3, #0]
 810b79c:	4a36      	ldr	r2, [pc, #216]	; (810b878 <UART_SetConfig+0x348>)
 810b79e:	4293      	cmp	r3, r2
 810b7a0:	d130      	bne.n	810b804 <UART_SetConfig+0x2d4>
 810b7a2:	4b32      	ldr	r3, [pc, #200]	; (810b86c <UART_SetConfig+0x33c>)
 810b7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b7a6:	f003 0307 	and.w	r3, r3, #7
 810b7aa:	2b05      	cmp	r3, #5
 810b7ac:	d826      	bhi.n	810b7fc <UART_SetConfig+0x2cc>
 810b7ae:	a201      	add	r2, pc, #4	; (adr r2, 810b7b4 <UART_SetConfig+0x284>)
 810b7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b7b4:	0810b7cd 	.word	0x0810b7cd
 810b7b8:	0810b7d5 	.word	0x0810b7d5
 810b7bc:	0810b7dd 	.word	0x0810b7dd
 810b7c0:	0810b7e5 	.word	0x0810b7e5
 810b7c4:	0810b7ed 	.word	0x0810b7ed
 810b7c8:	0810b7f5 	.word	0x0810b7f5
 810b7cc:	2300      	movs	r3, #0
 810b7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7d2:	e17e      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b7d4:	2304      	movs	r3, #4
 810b7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7da:	e17a      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b7dc:	2308      	movs	r3, #8
 810b7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7e2:	e176      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b7e4:	2310      	movs	r3, #16
 810b7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7ea:	e172      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b7ec:	2320      	movs	r3, #32
 810b7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7f2:	e16e      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b7f4:	2340      	movs	r3, #64	; 0x40
 810b7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7fa:	e16a      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b7fc:	2380      	movs	r3, #128	; 0x80
 810b7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b802:	e166      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b804:	687b      	ldr	r3, [r7, #4]
 810b806:	681b      	ldr	r3, [r3, #0]
 810b808:	4a1c      	ldr	r2, [pc, #112]	; (810b87c <UART_SetConfig+0x34c>)
 810b80a:	4293      	cmp	r3, r2
 810b80c:	d140      	bne.n	810b890 <UART_SetConfig+0x360>
 810b80e:	4b17      	ldr	r3, [pc, #92]	; (810b86c <UART_SetConfig+0x33c>)
 810b810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b812:	f003 0307 	and.w	r3, r3, #7
 810b816:	2b05      	cmp	r3, #5
 810b818:	d836      	bhi.n	810b888 <UART_SetConfig+0x358>
 810b81a:	a201      	add	r2, pc, #4	; (adr r2, 810b820 <UART_SetConfig+0x2f0>)
 810b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b820:	0810b839 	.word	0x0810b839
 810b824:	0810b841 	.word	0x0810b841
 810b828:	0810b849 	.word	0x0810b849
 810b82c:	0810b851 	.word	0x0810b851
 810b830:	0810b859 	.word	0x0810b859
 810b834:	0810b881 	.word	0x0810b881
 810b838:	2300      	movs	r3, #0
 810b83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b83e:	e148      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b840:	2304      	movs	r3, #4
 810b842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b846:	e144      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b848:	2308      	movs	r3, #8
 810b84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b84e:	e140      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b850:	2310      	movs	r3, #16
 810b852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b856:	e13c      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b858:	2320      	movs	r3, #32
 810b85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b85e:	e138      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b860:	cfff69f3 	.word	0xcfff69f3
 810b864:	58000c00 	.word	0x58000c00
 810b868:	40011000 	.word	0x40011000
 810b86c:	58024400 	.word	0x58024400
 810b870:	40004400 	.word	0x40004400
 810b874:	40004800 	.word	0x40004800
 810b878:	40004c00 	.word	0x40004c00
 810b87c:	40005000 	.word	0x40005000
 810b880:	2340      	movs	r3, #64	; 0x40
 810b882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b886:	e124      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b888:	2380      	movs	r3, #128	; 0x80
 810b88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b88e:	e120      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b890:	687b      	ldr	r3, [r7, #4]
 810b892:	681b      	ldr	r3, [r3, #0]
 810b894:	4acc      	ldr	r2, [pc, #816]	; (810bbc8 <UART_SetConfig+0x698>)
 810b896:	4293      	cmp	r3, r2
 810b898:	d176      	bne.n	810b988 <UART_SetConfig+0x458>
 810b89a:	4bcc      	ldr	r3, [pc, #816]	; (810bbcc <UART_SetConfig+0x69c>)
 810b89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b89e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b8a2:	2b28      	cmp	r3, #40	; 0x28
 810b8a4:	d86c      	bhi.n	810b980 <UART_SetConfig+0x450>
 810b8a6:	a201      	add	r2, pc, #4	; (adr r2, 810b8ac <UART_SetConfig+0x37c>)
 810b8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b8ac:	0810b951 	.word	0x0810b951
 810b8b0:	0810b981 	.word	0x0810b981
 810b8b4:	0810b981 	.word	0x0810b981
 810b8b8:	0810b981 	.word	0x0810b981
 810b8bc:	0810b981 	.word	0x0810b981
 810b8c0:	0810b981 	.word	0x0810b981
 810b8c4:	0810b981 	.word	0x0810b981
 810b8c8:	0810b981 	.word	0x0810b981
 810b8cc:	0810b959 	.word	0x0810b959
 810b8d0:	0810b981 	.word	0x0810b981
 810b8d4:	0810b981 	.word	0x0810b981
 810b8d8:	0810b981 	.word	0x0810b981
 810b8dc:	0810b981 	.word	0x0810b981
 810b8e0:	0810b981 	.word	0x0810b981
 810b8e4:	0810b981 	.word	0x0810b981
 810b8e8:	0810b981 	.word	0x0810b981
 810b8ec:	0810b961 	.word	0x0810b961
 810b8f0:	0810b981 	.word	0x0810b981
 810b8f4:	0810b981 	.word	0x0810b981
 810b8f8:	0810b981 	.word	0x0810b981
 810b8fc:	0810b981 	.word	0x0810b981
 810b900:	0810b981 	.word	0x0810b981
 810b904:	0810b981 	.word	0x0810b981
 810b908:	0810b981 	.word	0x0810b981
 810b90c:	0810b969 	.word	0x0810b969
 810b910:	0810b981 	.word	0x0810b981
 810b914:	0810b981 	.word	0x0810b981
 810b918:	0810b981 	.word	0x0810b981
 810b91c:	0810b981 	.word	0x0810b981
 810b920:	0810b981 	.word	0x0810b981
 810b924:	0810b981 	.word	0x0810b981
 810b928:	0810b981 	.word	0x0810b981
 810b92c:	0810b971 	.word	0x0810b971
 810b930:	0810b981 	.word	0x0810b981
 810b934:	0810b981 	.word	0x0810b981
 810b938:	0810b981 	.word	0x0810b981
 810b93c:	0810b981 	.word	0x0810b981
 810b940:	0810b981 	.word	0x0810b981
 810b944:	0810b981 	.word	0x0810b981
 810b948:	0810b981 	.word	0x0810b981
 810b94c:	0810b979 	.word	0x0810b979
 810b950:	2301      	movs	r3, #1
 810b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b956:	e0bc      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b958:	2304      	movs	r3, #4
 810b95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b95e:	e0b8      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b960:	2308      	movs	r3, #8
 810b962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b966:	e0b4      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b968:	2310      	movs	r3, #16
 810b96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b96e:	e0b0      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b970:	2320      	movs	r3, #32
 810b972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b976:	e0ac      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b978:	2340      	movs	r3, #64	; 0x40
 810b97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b97e:	e0a8      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b980:	2380      	movs	r3, #128	; 0x80
 810b982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b986:	e0a4      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b988:	687b      	ldr	r3, [r7, #4]
 810b98a:	681b      	ldr	r3, [r3, #0]
 810b98c:	4a90      	ldr	r2, [pc, #576]	; (810bbd0 <UART_SetConfig+0x6a0>)
 810b98e:	4293      	cmp	r3, r2
 810b990:	d130      	bne.n	810b9f4 <UART_SetConfig+0x4c4>
 810b992:	4b8e      	ldr	r3, [pc, #568]	; (810bbcc <UART_SetConfig+0x69c>)
 810b994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b996:	f003 0307 	and.w	r3, r3, #7
 810b99a:	2b05      	cmp	r3, #5
 810b99c:	d826      	bhi.n	810b9ec <UART_SetConfig+0x4bc>
 810b99e:	a201      	add	r2, pc, #4	; (adr r2, 810b9a4 <UART_SetConfig+0x474>)
 810b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b9a4:	0810b9bd 	.word	0x0810b9bd
 810b9a8:	0810b9c5 	.word	0x0810b9c5
 810b9ac:	0810b9cd 	.word	0x0810b9cd
 810b9b0:	0810b9d5 	.word	0x0810b9d5
 810b9b4:	0810b9dd 	.word	0x0810b9dd
 810b9b8:	0810b9e5 	.word	0x0810b9e5
 810b9bc:	2300      	movs	r3, #0
 810b9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9c2:	e086      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b9c4:	2304      	movs	r3, #4
 810b9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9ca:	e082      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b9cc:	2308      	movs	r3, #8
 810b9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9d2:	e07e      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b9d4:	2310      	movs	r3, #16
 810b9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9da:	e07a      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b9dc:	2320      	movs	r3, #32
 810b9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9e2:	e076      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b9e4:	2340      	movs	r3, #64	; 0x40
 810b9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9ea:	e072      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b9ec:	2380      	movs	r3, #128	; 0x80
 810b9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9f2:	e06e      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810b9f4:	687b      	ldr	r3, [r7, #4]
 810b9f6:	681b      	ldr	r3, [r3, #0]
 810b9f8:	4a76      	ldr	r2, [pc, #472]	; (810bbd4 <UART_SetConfig+0x6a4>)
 810b9fa:	4293      	cmp	r3, r2
 810b9fc:	d130      	bne.n	810ba60 <UART_SetConfig+0x530>
 810b9fe:	4b73      	ldr	r3, [pc, #460]	; (810bbcc <UART_SetConfig+0x69c>)
 810ba00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ba02:	f003 0307 	and.w	r3, r3, #7
 810ba06:	2b05      	cmp	r3, #5
 810ba08:	d826      	bhi.n	810ba58 <UART_SetConfig+0x528>
 810ba0a:	a201      	add	r2, pc, #4	; (adr r2, 810ba10 <UART_SetConfig+0x4e0>)
 810ba0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ba10:	0810ba29 	.word	0x0810ba29
 810ba14:	0810ba31 	.word	0x0810ba31
 810ba18:	0810ba39 	.word	0x0810ba39
 810ba1c:	0810ba41 	.word	0x0810ba41
 810ba20:	0810ba49 	.word	0x0810ba49
 810ba24:	0810ba51 	.word	0x0810ba51
 810ba28:	2300      	movs	r3, #0
 810ba2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba2e:	e050      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba30:	2304      	movs	r3, #4
 810ba32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba36:	e04c      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba38:	2308      	movs	r3, #8
 810ba3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba3e:	e048      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba40:	2310      	movs	r3, #16
 810ba42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba46:	e044      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba48:	2320      	movs	r3, #32
 810ba4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba4e:	e040      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba50:	2340      	movs	r3, #64	; 0x40
 810ba52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba56:	e03c      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba58:	2380      	movs	r3, #128	; 0x80
 810ba5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba5e:	e038      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba60:	687b      	ldr	r3, [r7, #4]
 810ba62:	681b      	ldr	r3, [r3, #0]
 810ba64:	4a5c      	ldr	r2, [pc, #368]	; (810bbd8 <UART_SetConfig+0x6a8>)
 810ba66:	4293      	cmp	r3, r2
 810ba68:	d130      	bne.n	810bacc <UART_SetConfig+0x59c>
 810ba6a:	4b58      	ldr	r3, [pc, #352]	; (810bbcc <UART_SetConfig+0x69c>)
 810ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810ba6e:	f003 0307 	and.w	r3, r3, #7
 810ba72:	2b05      	cmp	r3, #5
 810ba74:	d826      	bhi.n	810bac4 <UART_SetConfig+0x594>
 810ba76:	a201      	add	r2, pc, #4	; (adr r2, 810ba7c <UART_SetConfig+0x54c>)
 810ba78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ba7c:	0810ba95 	.word	0x0810ba95
 810ba80:	0810ba9d 	.word	0x0810ba9d
 810ba84:	0810baa5 	.word	0x0810baa5
 810ba88:	0810baad 	.word	0x0810baad
 810ba8c:	0810bab5 	.word	0x0810bab5
 810ba90:	0810babd 	.word	0x0810babd
 810ba94:	2302      	movs	r3, #2
 810ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba9a:	e01a      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810ba9c:	2304      	movs	r3, #4
 810ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baa2:	e016      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810baa4:	2308      	movs	r3, #8
 810baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baaa:	e012      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810baac:	2310      	movs	r3, #16
 810baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bab2:	e00e      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810bab4:	2320      	movs	r3, #32
 810bab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baba:	e00a      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810babc:	2340      	movs	r3, #64	; 0x40
 810babe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bac2:	e006      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810bac4:	2380      	movs	r3, #128	; 0x80
 810bac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baca:	e002      	b.n	810bad2 <UART_SetConfig+0x5a2>
 810bacc:	2380      	movs	r3, #128	; 0x80
 810bace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810bad2:	687b      	ldr	r3, [r7, #4]
 810bad4:	681b      	ldr	r3, [r3, #0]
 810bad6:	4a40      	ldr	r2, [pc, #256]	; (810bbd8 <UART_SetConfig+0x6a8>)
 810bad8:	4293      	cmp	r3, r2
 810bada:	f040 80ef 	bne.w	810bcbc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810bade:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810bae2:	2b20      	cmp	r3, #32
 810bae4:	dc46      	bgt.n	810bb74 <UART_SetConfig+0x644>
 810bae6:	2b02      	cmp	r3, #2
 810bae8:	f2c0 8081 	blt.w	810bbee <UART_SetConfig+0x6be>
 810baec:	3b02      	subs	r3, #2
 810baee:	2b1e      	cmp	r3, #30
 810baf0:	d87d      	bhi.n	810bbee <UART_SetConfig+0x6be>
 810baf2:	a201      	add	r2, pc, #4	; (adr r2, 810baf8 <UART_SetConfig+0x5c8>)
 810baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810baf8:	0810bb7b 	.word	0x0810bb7b
 810bafc:	0810bbef 	.word	0x0810bbef
 810bb00:	0810bb83 	.word	0x0810bb83
 810bb04:	0810bbef 	.word	0x0810bbef
 810bb08:	0810bbef 	.word	0x0810bbef
 810bb0c:	0810bbef 	.word	0x0810bbef
 810bb10:	0810bb93 	.word	0x0810bb93
 810bb14:	0810bbef 	.word	0x0810bbef
 810bb18:	0810bbef 	.word	0x0810bbef
 810bb1c:	0810bbef 	.word	0x0810bbef
 810bb20:	0810bbef 	.word	0x0810bbef
 810bb24:	0810bbef 	.word	0x0810bbef
 810bb28:	0810bbef 	.word	0x0810bbef
 810bb2c:	0810bbef 	.word	0x0810bbef
 810bb30:	0810bba3 	.word	0x0810bba3
 810bb34:	0810bbef 	.word	0x0810bbef
 810bb38:	0810bbef 	.word	0x0810bbef
 810bb3c:	0810bbef 	.word	0x0810bbef
 810bb40:	0810bbef 	.word	0x0810bbef
 810bb44:	0810bbef 	.word	0x0810bbef
 810bb48:	0810bbef 	.word	0x0810bbef
 810bb4c:	0810bbef 	.word	0x0810bbef
 810bb50:	0810bbef 	.word	0x0810bbef
 810bb54:	0810bbef 	.word	0x0810bbef
 810bb58:	0810bbef 	.word	0x0810bbef
 810bb5c:	0810bbef 	.word	0x0810bbef
 810bb60:	0810bbef 	.word	0x0810bbef
 810bb64:	0810bbef 	.word	0x0810bbef
 810bb68:	0810bbef 	.word	0x0810bbef
 810bb6c:	0810bbef 	.word	0x0810bbef
 810bb70:	0810bbe1 	.word	0x0810bbe1
 810bb74:	2b40      	cmp	r3, #64	; 0x40
 810bb76:	d036      	beq.n	810bbe6 <UART_SetConfig+0x6b6>
 810bb78:	e039      	b.n	810bbee <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810bb7a:	f7fd fb8b 	bl	8109294 <HAL_RCCEx_GetD3PCLK1Freq>
 810bb7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bb80:	e03b      	b.n	810bbfa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb82:	f107 0314 	add.w	r3, r7, #20
 810bb86:	4618      	mov	r0, r3
 810bb88:	f7fd fb9a 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bb8c:	69bb      	ldr	r3, [r7, #24]
 810bb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb90:	e033      	b.n	810bbfa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bb92:	f107 0308 	add.w	r3, r7, #8
 810bb96:	4618      	mov	r0, r3
 810bb98:	f7fd fce6 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bb9c:	68fb      	ldr	r3, [r7, #12]
 810bb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bba0:	e02b      	b.n	810bbfa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bba2:	4b0a      	ldr	r3, [pc, #40]	; (810bbcc <UART_SetConfig+0x69c>)
 810bba4:	681b      	ldr	r3, [r3, #0]
 810bba6:	f003 0320 	and.w	r3, r3, #32
 810bbaa:	2b00      	cmp	r3, #0
 810bbac:	d009      	beq.n	810bbc2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bbae:	4b07      	ldr	r3, [pc, #28]	; (810bbcc <UART_SetConfig+0x69c>)
 810bbb0:	681b      	ldr	r3, [r3, #0]
 810bbb2:	08db      	lsrs	r3, r3, #3
 810bbb4:	f003 0303 	and.w	r3, r3, #3
 810bbb8:	4a08      	ldr	r2, [pc, #32]	; (810bbdc <UART_SetConfig+0x6ac>)
 810bbba:	fa22 f303 	lsr.w	r3, r2, r3
 810bbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bbc0:	e01b      	b.n	810bbfa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810bbc2:	4b06      	ldr	r3, [pc, #24]	; (810bbdc <UART_SetConfig+0x6ac>)
 810bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bbc6:	e018      	b.n	810bbfa <UART_SetConfig+0x6ca>
 810bbc8:	40011400 	.word	0x40011400
 810bbcc:	58024400 	.word	0x58024400
 810bbd0:	40007800 	.word	0x40007800
 810bbd4:	40007c00 	.word	0x40007c00
 810bbd8:	58000c00 	.word	0x58000c00
 810bbdc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bbe0:	4bc4      	ldr	r3, [pc, #784]	; (810bef4 <UART_SetConfig+0x9c4>)
 810bbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bbe4:	e009      	b.n	810bbfa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bbe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bbec:	e005      	b.n	810bbfa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810bbee:	2300      	movs	r3, #0
 810bbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bbf2:	2301      	movs	r3, #1
 810bbf4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bbf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bbfc:	2b00      	cmp	r3, #0
 810bbfe:	f000 81da 	beq.w	810bfb6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810bc02:	687b      	ldr	r3, [r7, #4]
 810bc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bc06:	4abc      	ldr	r2, [pc, #752]	; (810bef8 <UART_SetConfig+0x9c8>)
 810bc08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bc0c:	461a      	mov	r2, r3
 810bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bc10:	fbb3 f3f2 	udiv	r3, r3, r2
 810bc14:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810bc16:	687b      	ldr	r3, [r7, #4]
 810bc18:	685a      	ldr	r2, [r3, #4]
 810bc1a:	4613      	mov	r3, r2
 810bc1c:	005b      	lsls	r3, r3, #1
 810bc1e:	4413      	add	r3, r2
 810bc20:	6a3a      	ldr	r2, [r7, #32]
 810bc22:	429a      	cmp	r2, r3
 810bc24:	d305      	bcc.n	810bc32 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810bc26:	687b      	ldr	r3, [r7, #4]
 810bc28:	685b      	ldr	r3, [r3, #4]
 810bc2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810bc2c:	6a3a      	ldr	r2, [r7, #32]
 810bc2e:	429a      	cmp	r2, r3
 810bc30:	d903      	bls.n	810bc3a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810bc32:	2301      	movs	r3, #1
 810bc34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810bc38:	e1bd      	b.n	810bfb6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bc3c:	4618      	mov	r0, r3
 810bc3e:	f04f 0100 	mov.w	r1, #0
 810bc42:	687b      	ldr	r3, [r7, #4]
 810bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bc46:	4aac      	ldr	r2, [pc, #688]	; (810bef8 <UART_SetConfig+0x9c8>)
 810bc48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bc4c:	b29a      	uxth	r2, r3
 810bc4e:	f04f 0300 	mov.w	r3, #0
 810bc52:	f7f5 f881 	bl	8100d58 <__aeabi_uldivmod>
 810bc56:	4602      	mov	r2, r0
 810bc58:	460b      	mov	r3, r1
 810bc5a:	4610      	mov	r0, r2
 810bc5c:	4619      	mov	r1, r3
 810bc5e:	f04f 0200 	mov.w	r2, #0
 810bc62:	f04f 0300 	mov.w	r3, #0
 810bc66:	020b      	lsls	r3, r1, #8
 810bc68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810bc6c:	0202      	lsls	r2, r0, #8
 810bc6e:	6879      	ldr	r1, [r7, #4]
 810bc70:	6849      	ldr	r1, [r1, #4]
 810bc72:	0849      	lsrs	r1, r1, #1
 810bc74:	4608      	mov	r0, r1
 810bc76:	f04f 0100 	mov.w	r1, #0
 810bc7a:	1814      	adds	r4, r2, r0
 810bc7c:	eb43 0501 	adc.w	r5, r3, r1
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	685b      	ldr	r3, [r3, #4]
 810bc84:	461a      	mov	r2, r3
 810bc86:	f04f 0300 	mov.w	r3, #0
 810bc8a:	4620      	mov	r0, r4
 810bc8c:	4629      	mov	r1, r5
 810bc8e:	f7f5 f863 	bl	8100d58 <__aeabi_uldivmod>
 810bc92:	4602      	mov	r2, r0
 810bc94:	460b      	mov	r3, r1
 810bc96:	4613      	mov	r3, r2
 810bc98:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bc9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810bca0:	d308      	bcc.n	810bcb4 <UART_SetConfig+0x784>
 810bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810bca8:	d204      	bcs.n	810bcb4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810bcaa:	687b      	ldr	r3, [r7, #4]
 810bcac:	681b      	ldr	r3, [r3, #0]
 810bcae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810bcb0:	60da      	str	r2, [r3, #12]
 810bcb2:	e180      	b.n	810bfb6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810bcb4:	2301      	movs	r3, #1
 810bcb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810bcba:	e17c      	b.n	810bfb6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810bcbc:	687b      	ldr	r3, [r7, #4]
 810bcbe:	69db      	ldr	r3, [r3, #28]
 810bcc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810bcc4:	f040 80be 	bne.w	810be44 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 810bcc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810bccc:	2b20      	cmp	r3, #32
 810bcce:	dc49      	bgt.n	810bd64 <UART_SetConfig+0x834>
 810bcd0:	2b00      	cmp	r3, #0
 810bcd2:	db7c      	blt.n	810bdce <UART_SetConfig+0x89e>
 810bcd4:	2b20      	cmp	r3, #32
 810bcd6:	d87a      	bhi.n	810bdce <UART_SetConfig+0x89e>
 810bcd8:	a201      	add	r2, pc, #4	; (adr r2, 810bce0 <UART_SetConfig+0x7b0>)
 810bcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bcde:	bf00      	nop
 810bce0:	0810bd6b 	.word	0x0810bd6b
 810bce4:	0810bd73 	.word	0x0810bd73
 810bce8:	0810bdcf 	.word	0x0810bdcf
 810bcec:	0810bdcf 	.word	0x0810bdcf
 810bcf0:	0810bd7b 	.word	0x0810bd7b
 810bcf4:	0810bdcf 	.word	0x0810bdcf
 810bcf8:	0810bdcf 	.word	0x0810bdcf
 810bcfc:	0810bdcf 	.word	0x0810bdcf
 810bd00:	0810bd8b 	.word	0x0810bd8b
 810bd04:	0810bdcf 	.word	0x0810bdcf
 810bd08:	0810bdcf 	.word	0x0810bdcf
 810bd0c:	0810bdcf 	.word	0x0810bdcf
 810bd10:	0810bdcf 	.word	0x0810bdcf
 810bd14:	0810bdcf 	.word	0x0810bdcf
 810bd18:	0810bdcf 	.word	0x0810bdcf
 810bd1c:	0810bdcf 	.word	0x0810bdcf
 810bd20:	0810bd9b 	.word	0x0810bd9b
 810bd24:	0810bdcf 	.word	0x0810bdcf
 810bd28:	0810bdcf 	.word	0x0810bdcf
 810bd2c:	0810bdcf 	.word	0x0810bdcf
 810bd30:	0810bdcf 	.word	0x0810bdcf
 810bd34:	0810bdcf 	.word	0x0810bdcf
 810bd38:	0810bdcf 	.word	0x0810bdcf
 810bd3c:	0810bdcf 	.word	0x0810bdcf
 810bd40:	0810bdcf 	.word	0x0810bdcf
 810bd44:	0810bdcf 	.word	0x0810bdcf
 810bd48:	0810bdcf 	.word	0x0810bdcf
 810bd4c:	0810bdcf 	.word	0x0810bdcf
 810bd50:	0810bdcf 	.word	0x0810bdcf
 810bd54:	0810bdcf 	.word	0x0810bdcf
 810bd58:	0810bdcf 	.word	0x0810bdcf
 810bd5c:	0810bdcf 	.word	0x0810bdcf
 810bd60:	0810bdc1 	.word	0x0810bdc1
 810bd64:	2b40      	cmp	r3, #64	; 0x40
 810bd66:	d02e      	beq.n	810bdc6 <UART_SetConfig+0x896>
 810bd68:	e031      	b.n	810bdce <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bd6a:	f7fb fe13 	bl	8107994 <HAL_RCC_GetPCLK1Freq>
 810bd6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bd70:	e033      	b.n	810bdda <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bd72:	f7fb fe25 	bl	81079c0 <HAL_RCC_GetPCLK2Freq>
 810bd76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bd78:	e02f      	b.n	810bdda <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bd7a:	f107 0314 	add.w	r3, r7, #20
 810bd7e:	4618      	mov	r0, r3
 810bd80:	f7fd fa9e 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bd84:	69bb      	ldr	r3, [r7, #24]
 810bd86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd88:	e027      	b.n	810bdda <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bd8a:	f107 0308 	add.w	r3, r7, #8
 810bd8e:	4618      	mov	r0, r3
 810bd90:	f7fd fbea 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bd94:	68fb      	ldr	r3, [r7, #12]
 810bd96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd98:	e01f      	b.n	810bdda <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bd9a:	4b58      	ldr	r3, [pc, #352]	; (810befc <UART_SetConfig+0x9cc>)
 810bd9c:	681b      	ldr	r3, [r3, #0]
 810bd9e:	f003 0320 	and.w	r3, r3, #32
 810bda2:	2b00      	cmp	r3, #0
 810bda4:	d009      	beq.n	810bdba <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bda6:	4b55      	ldr	r3, [pc, #340]	; (810befc <UART_SetConfig+0x9cc>)
 810bda8:	681b      	ldr	r3, [r3, #0]
 810bdaa:	08db      	lsrs	r3, r3, #3
 810bdac:	f003 0303 	and.w	r3, r3, #3
 810bdb0:	4a53      	ldr	r2, [pc, #332]	; (810bf00 <UART_SetConfig+0x9d0>)
 810bdb2:	fa22 f303 	lsr.w	r3, r2, r3
 810bdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bdb8:	e00f      	b.n	810bdda <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810bdba:	4b51      	ldr	r3, [pc, #324]	; (810bf00 <UART_SetConfig+0x9d0>)
 810bdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bdbe:	e00c      	b.n	810bdda <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bdc0:	4b4c      	ldr	r3, [pc, #304]	; (810bef4 <UART_SetConfig+0x9c4>)
 810bdc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bdc4:	e009      	b.n	810bdda <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bdc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bdca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bdcc:	e005      	b.n	810bdda <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810bdce:	2300      	movs	r3, #0
 810bdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bdd2:	2301      	movs	r3, #1
 810bdd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bdd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810bdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bddc:	2b00      	cmp	r3, #0
 810bdde:	f000 80ea 	beq.w	810bfb6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bde2:	687b      	ldr	r3, [r7, #4]
 810bde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bde6:	4a44      	ldr	r2, [pc, #272]	; (810bef8 <UART_SetConfig+0x9c8>)
 810bde8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bdec:	461a      	mov	r2, r3
 810bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bdf0:	fbb3 f3f2 	udiv	r3, r3, r2
 810bdf4:	005a      	lsls	r2, r3, #1
 810bdf6:	687b      	ldr	r3, [r7, #4]
 810bdf8:	685b      	ldr	r3, [r3, #4]
 810bdfa:	085b      	lsrs	r3, r3, #1
 810bdfc:	441a      	add	r2, r3
 810bdfe:	687b      	ldr	r3, [r7, #4]
 810be00:	685b      	ldr	r3, [r3, #4]
 810be02:	fbb2 f3f3 	udiv	r3, r2, r3
 810be06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be0a:	2b0f      	cmp	r3, #15
 810be0c:	d916      	bls.n	810be3c <UART_SetConfig+0x90c>
 810be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810be14:	d212      	bcs.n	810be3c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be18:	b29b      	uxth	r3, r3
 810be1a:	f023 030f 	bic.w	r3, r3, #15
 810be1e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be22:	085b      	lsrs	r3, r3, #1
 810be24:	b29b      	uxth	r3, r3
 810be26:	f003 0307 	and.w	r3, r3, #7
 810be2a:	b29a      	uxth	r2, r3
 810be2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810be2e:	4313      	orrs	r3, r2
 810be30:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810be32:	687b      	ldr	r3, [r7, #4]
 810be34:	681b      	ldr	r3, [r3, #0]
 810be36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810be38:	60da      	str	r2, [r3, #12]
 810be3a:	e0bc      	b.n	810bfb6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810be3c:	2301      	movs	r3, #1
 810be3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810be42:	e0b8      	b.n	810bfb6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810be44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810be48:	2b20      	cmp	r3, #32
 810be4a:	dc4b      	bgt.n	810bee4 <UART_SetConfig+0x9b4>
 810be4c:	2b00      	cmp	r3, #0
 810be4e:	f2c0 8087 	blt.w	810bf60 <UART_SetConfig+0xa30>
 810be52:	2b20      	cmp	r3, #32
 810be54:	f200 8084 	bhi.w	810bf60 <UART_SetConfig+0xa30>
 810be58:	a201      	add	r2, pc, #4	; (adr r2, 810be60 <UART_SetConfig+0x930>)
 810be5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be5e:	bf00      	nop
 810be60:	0810beeb 	.word	0x0810beeb
 810be64:	0810bf05 	.word	0x0810bf05
 810be68:	0810bf61 	.word	0x0810bf61
 810be6c:	0810bf61 	.word	0x0810bf61
 810be70:	0810bf0d 	.word	0x0810bf0d
 810be74:	0810bf61 	.word	0x0810bf61
 810be78:	0810bf61 	.word	0x0810bf61
 810be7c:	0810bf61 	.word	0x0810bf61
 810be80:	0810bf1d 	.word	0x0810bf1d
 810be84:	0810bf61 	.word	0x0810bf61
 810be88:	0810bf61 	.word	0x0810bf61
 810be8c:	0810bf61 	.word	0x0810bf61
 810be90:	0810bf61 	.word	0x0810bf61
 810be94:	0810bf61 	.word	0x0810bf61
 810be98:	0810bf61 	.word	0x0810bf61
 810be9c:	0810bf61 	.word	0x0810bf61
 810bea0:	0810bf2d 	.word	0x0810bf2d
 810bea4:	0810bf61 	.word	0x0810bf61
 810bea8:	0810bf61 	.word	0x0810bf61
 810beac:	0810bf61 	.word	0x0810bf61
 810beb0:	0810bf61 	.word	0x0810bf61
 810beb4:	0810bf61 	.word	0x0810bf61
 810beb8:	0810bf61 	.word	0x0810bf61
 810bebc:	0810bf61 	.word	0x0810bf61
 810bec0:	0810bf61 	.word	0x0810bf61
 810bec4:	0810bf61 	.word	0x0810bf61
 810bec8:	0810bf61 	.word	0x0810bf61
 810becc:	0810bf61 	.word	0x0810bf61
 810bed0:	0810bf61 	.word	0x0810bf61
 810bed4:	0810bf61 	.word	0x0810bf61
 810bed8:	0810bf61 	.word	0x0810bf61
 810bedc:	0810bf61 	.word	0x0810bf61
 810bee0:	0810bf53 	.word	0x0810bf53
 810bee4:	2b40      	cmp	r3, #64	; 0x40
 810bee6:	d037      	beq.n	810bf58 <UART_SetConfig+0xa28>
 810bee8:	e03a      	b.n	810bf60 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810beea:	f7fb fd53 	bl	8107994 <HAL_RCC_GetPCLK1Freq>
 810beee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bef0:	e03c      	b.n	810bf6c <UART_SetConfig+0xa3c>
 810bef2:	bf00      	nop
 810bef4:	003d0900 	.word	0x003d0900
 810bef8:	0811b6ac 	.word	0x0811b6ac
 810befc:	58024400 	.word	0x58024400
 810bf00:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bf04:	f7fb fd5c 	bl	81079c0 <HAL_RCC_GetPCLK2Freq>
 810bf08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bf0a:	e02f      	b.n	810bf6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bf0c:	f107 0314 	add.w	r3, r7, #20
 810bf10:	4618      	mov	r0, r3
 810bf12:	f7fd f9d5 	bl	81092c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bf16:	69bb      	ldr	r3, [r7, #24]
 810bf18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf1a:	e027      	b.n	810bf6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bf1c:	f107 0308 	add.w	r3, r7, #8
 810bf20:	4618      	mov	r0, r3
 810bf22:	f7fd fb21 	bl	8109568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bf26:	68fb      	ldr	r3, [r7, #12]
 810bf28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf2a:	e01f      	b.n	810bf6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bf2c:	4b2c      	ldr	r3, [pc, #176]	; (810bfe0 <UART_SetConfig+0xab0>)
 810bf2e:	681b      	ldr	r3, [r3, #0]
 810bf30:	f003 0320 	and.w	r3, r3, #32
 810bf34:	2b00      	cmp	r3, #0
 810bf36:	d009      	beq.n	810bf4c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bf38:	4b29      	ldr	r3, [pc, #164]	; (810bfe0 <UART_SetConfig+0xab0>)
 810bf3a:	681b      	ldr	r3, [r3, #0]
 810bf3c:	08db      	lsrs	r3, r3, #3
 810bf3e:	f003 0303 	and.w	r3, r3, #3
 810bf42:	4a28      	ldr	r2, [pc, #160]	; (810bfe4 <UART_SetConfig+0xab4>)
 810bf44:	fa22 f303 	lsr.w	r3, r2, r3
 810bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bf4a:	e00f      	b.n	810bf6c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810bf4c:	4b25      	ldr	r3, [pc, #148]	; (810bfe4 <UART_SetConfig+0xab4>)
 810bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf50:	e00c      	b.n	810bf6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bf52:	4b25      	ldr	r3, [pc, #148]	; (810bfe8 <UART_SetConfig+0xab8>)
 810bf54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf56:	e009      	b.n	810bf6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bf58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bf5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf5e:	e005      	b.n	810bf6c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810bf60:	2300      	movs	r3, #0
 810bf62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bf64:	2301      	movs	r3, #1
 810bf66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bf6a:	bf00      	nop
    }

    if (pclk != 0U)
 810bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bf6e:	2b00      	cmp	r3, #0
 810bf70:	d021      	beq.n	810bfb6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bf72:	687b      	ldr	r3, [r7, #4]
 810bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bf76:	4a1d      	ldr	r2, [pc, #116]	; (810bfec <UART_SetConfig+0xabc>)
 810bf78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bf7c:	461a      	mov	r2, r3
 810bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bf80:	fbb3 f2f2 	udiv	r2, r3, r2
 810bf84:	687b      	ldr	r3, [r7, #4]
 810bf86:	685b      	ldr	r3, [r3, #4]
 810bf88:	085b      	lsrs	r3, r3, #1
 810bf8a:	441a      	add	r2, r3
 810bf8c:	687b      	ldr	r3, [r7, #4]
 810bf8e:	685b      	ldr	r3, [r3, #4]
 810bf90:	fbb2 f3f3 	udiv	r3, r2, r3
 810bf94:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf98:	2b0f      	cmp	r3, #15
 810bf9a:	d909      	bls.n	810bfb0 <UART_SetConfig+0xa80>
 810bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810bfa2:	d205      	bcs.n	810bfb0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bfa6:	b29a      	uxth	r2, r3
 810bfa8:	687b      	ldr	r3, [r7, #4]
 810bfaa:	681b      	ldr	r3, [r3, #0]
 810bfac:	60da      	str	r2, [r3, #12]
 810bfae:	e002      	b.n	810bfb6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810bfb0:	2301      	movs	r3, #1
 810bfb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810bfb6:	687b      	ldr	r3, [r7, #4]
 810bfb8:	2201      	movs	r2, #1
 810bfba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810bfbe:	687b      	ldr	r3, [r7, #4]
 810bfc0:	2201      	movs	r2, #1
 810bfc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810bfc6:	687b      	ldr	r3, [r7, #4]
 810bfc8:	2200      	movs	r2, #0
 810bfca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810bfcc:	687b      	ldr	r3, [r7, #4]
 810bfce:	2200      	movs	r2, #0
 810bfd0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810bfd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810bfd6:	4618      	mov	r0, r3
 810bfd8:	3738      	adds	r7, #56	; 0x38
 810bfda:	46bd      	mov	sp, r7
 810bfdc:	bdb0      	pop	{r4, r5, r7, pc}
 810bfde:	bf00      	nop
 810bfe0:	58024400 	.word	0x58024400
 810bfe4:	03d09000 	.word	0x03d09000
 810bfe8:	003d0900 	.word	0x003d0900
 810bfec:	0811b6ac 	.word	0x0811b6ac

0810bff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810bff0:	b480      	push	{r7}
 810bff2:	b083      	sub	sp, #12
 810bff4:	af00      	add	r7, sp, #0
 810bff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810bff8:	687b      	ldr	r3, [r7, #4]
 810bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bffc:	f003 0301 	and.w	r3, r3, #1
 810c000:	2b00      	cmp	r3, #0
 810c002:	d00a      	beq.n	810c01a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810c004:	687b      	ldr	r3, [r7, #4]
 810c006:	681b      	ldr	r3, [r3, #0]
 810c008:	685b      	ldr	r3, [r3, #4]
 810c00a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810c00e:	687b      	ldr	r3, [r7, #4]
 810c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c012:	687b      	ldr	r3, [r7, #4]
 810c014:	681b      	ldr	r3, [r3, #0]
 810c016:	430a      	orrs	r2, r1
 810c018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810c01a:	687b      	ldr	r3, [r7, #4]
 810c01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c01e:	f003 0302 	and.w	r3, r3, #2
 810c022:	2b00      	cmp	r3, #0
 810c024:	d00a      	beq.n	810c03c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810c026:	687b      	ldr	r3, [r7, #4]
 810c028:	681b      	ldr	r3, [r3, #0]
 810c02a:	685b      	ldr	r3, [r3, #4]
 810c02c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810c030:	687b      	ldr	r3, [r7, #4]
 810c032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810c034:	687b      	ldr	r3, [r7, #4]
 810c036:	681b      	ldr	r3, [r3, #0]
 810c038:	430a      	orrs	r2, r1
 810c03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810c03c:	687b      	ldr	r3, [r7, #4]
 810c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c040:	f003 0304 	and.w	r3, r3, #4
 810c044:	2b00      	cmp	r3, #0
 810c046:	d00a      	beq.n	810c05e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810c048:	687b      	ldr	r3, [r7, #4]
 810c04a:	681b      	ldr	r3, [r3, #0]
 810c04c:	685b      	ldr	r3, [r3, #4]
 810c04e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810c052:	687b      	ldr	r3, [r7, #4]
 810c054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810c056:	687b      	ldr	r3, [r7, #4]
 810c058:	681b      	ldr	r3, [r3, #0]
 810c05a:	430a      	orrs	r2, r1
 810c05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810c05e:	687b      	ldr	r3, [r7, #4]
 810c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c062:	f003 0308 	and.w	r3, r3, #8
 810c066:	2b00      	cmp	r3, #0
 810c068:	d00a      	beq.n	810c080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810c06a:	687b      	ldr	r3, [r7, #4]
 810c06c:	681b      	ldr	r3, [r3, #0]
 810c06e:	685b      	ldr	r3, [r3, #4]
 810c070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810c074:	687b      	ldr	r3, [r7, #4]
 810c076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c078:	687b      	ldr	r3, [r7, #4]
 810c07a:	681b      	ldr	r3, [r3, #0]
 810c07c:	430a      	orrs	r2, r1
 810c07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c084:	f003 0310 	and.w	r3, r3, #16
 810c088:	2b00      	cmp	r3, #0
 810c08a:	d00a      	beq.n	810c0a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810c08c:	687b      	ldr	r3, [r7, #4]
 810c08e:	681b      	ldr	r3, [r3, #0]
 810c090:	689b      	ldr	r3, [r3, #8]
 810c092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810c096:	687b      	ldr	r3, [r7, #4]
 810c098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c09a:	687b      	ldr	r3, [r7, #4]
 810c09c:	681b      	ldr	r3, [r3, #0]
 810c09e:	430a      	orrs	r2, r1
 810c0a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810c0a2:	687b      	ldr	r3, [r7, #4]
 810c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c0a6:	f003 0320 	and.w	r3, r3, #32
 810c0aa:	2b00      	cmp	r3, #0
 810c0ac:	d00a      	beq.n	810c0c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810c0ae:	687b      	ldr	r3, [r7, #4]
 810c0b0:	681b      	ldr	r3, [r3, #0]
 810c0b2:	689b      	ldr	r3, [r3, #8]
 810c0b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810c0b8:	687b      	ldr	r3, [r7, #4]
 810c0ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810c0bc:	687b      	ldr	r3, [r7, #4]
 810c0be:	681b      	ldr	r3, [r3, #0]
 810c0c0:	430a      	orrs	r2, r1
 810c0c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810c0c4:	687b      	ldr	r3, [r7, #4]
 810c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c0cc:	2b00      	cmp	r3, #0
 810c0ce:	d01a      	beq.n	810c106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810c0d0:	687b      	ldr	r3, [r7, #4]
 810c0d2:	681b      	ldr	r3, [r3, #0]
 810c0d4:	685b      	ldr	r3, [r3, #4]
 810c0d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810c0da:	687b      	ldr	r3, [r7, #4]
 810c0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810c0de:	687b      	ldr	r3, [r7, #4]
 810c0e0:	681b      	ldr	r3, [r3, #0]
 810c0e2:	430a      	orrs	r2, r1
 810c0e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810c0e6:	687b      	ldr	r3, [r7, #4]
 810c0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810c0ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c0ee:	d10a      	bne.n	810c106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810c0f0:	687b      	ldr	r3, [r7, #4]
 810c0f2:	681b      	ldr	r3, [r3, #0]
 810c0f4:	685b      	ldr	r3, [r3, #4]
 810c0f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810c0fa:	687b      	ldr	r3, [r7, #4]
 810c0fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810c0fe:	687b      	ldr	r3, [r7, #4]
 810c100:	681b      	ldr	r3, [r3, #0]
 810c102:	430a      	orrs	r2, r1
 810c104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810c106:	687b      	ldr	r3, [r7, #4]
 810c108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c10e:	2b00      	cmp	r3, #0
 810c110:	d00a      	beq.n	810c128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810c112:	687b      	ldr	r3, [r7, #4]
 810c114:	681b      	ldr	r3, [r3, #0]
 810c116:	685b      	ldr	r3, [r3, #4]
 810c118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810c11c:	687b      	ldr	r3, [r7, #4]
 810c11e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c120:	687b      	ldr	r3, [r7, #4]
 810c122:	681b      	ldr	r3, [r3, #0]
 810c124:	430a      	orrs	r2, r1
 810c126:	605a      	str	r2, [r3, #4]
  }
}
 810c128:	bf00      	nop
 810c12a:	370c      	adds	r7, #12
 810c12c:	46bd      	mov	sp, r7
 810c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c132:	4770      	bx	lr

0810c134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810c134:	b580      	push	{r7, lr}
 810c136:	b086      	sub	sp, #24
 810c138:	af02      	add	r7, sp, #8
 810c13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c13c:	687b      	ldr	r3, [r7, #4]
 810c13e:	2200      	movs	r2, #0
 810c140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810c144:	f7f5 f974 	bl	8101430 <HAL_GetTick>
 810c148:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810c14a:	687b      	ldr	r3, [r7, #4]
 810c14c:	681b      	ldr	r3, [r3, #0]
 810c14e:	681b      	ldr	r3, [r3, #0]
 810c150:	f003 0308 	and.w	r3, r3, #8
 810c154:	2b08      	cmp	r3, #8
 810c156:	d10e      	bne.n	810c176 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810c15c:	9300      	str	r3, [sp, #0]
 810c15e:	68fb      	ldr	r3, [r7, #12]
 810c160:	2200      	movs	r2, #0
 810c162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810c166:	6878      	ldr	r0, [r7, #4]
 810c168:	f000 f82f 	bl	810c1ca <UART_WaitOnFlagUntilTimeout>
 810c16c:	4603      	mov	r3, r0
 810c16e:	2b00      	cmp	r3, #0
 810c170:	d001      	beq.n	810c176 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c172:	2303      	movs	r3, #3
 810c174:	e025      	b.n	810c1c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810c176:	687b      	ldr	r3, [r7, #4]
 810c178:	681b      	ldr	r3, [r3, #0]
 810c17a:	681b      	ldr	r3, [r3, #0]
 810c17c:	f003 0304 	and.w	r3, r3, #4
 810c180:	2b04      	cmp	r3, #4
 810c182:	d10e      	bne.n	810c1a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810c188:	9300      	str	r3, [sp, #0]
 810c18a:	68fb      	ldr	r3, [r7, #12]
 810c18c:	2200      	movs	r2, #0
 810c18e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810c192:	6878      	ldr	r0, [r7, #4]
 810c194:	f000 f819 	bl	810c1ca <UART_WaitOnFlagUntilTimeout>
 810c198:	4603      	mov	r3, r0
 810c19a:	2b00      	cmp	r3, #0
 810c19c:	d001      	beq.n	810c1a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c19e:	2303      	movs	r3, #3
 810c1a0:	e00f      	b.n	810c1c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810c1a2:	687b      	ldr	r3, [r7, #4]
 810c1a4:	2220      	movs	r2, #32
 810c1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810c1aa:	687b      	ldr	r3, [r7, #4]
 810c1ac:	2220      	movs	r2, #32
 810c1ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c1b2:	687b      	ldr	r3, [r7, #4]
 810c1b4:	2200      	movs	r2, #0
 810c1b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810c1b8:	687b      	ldr	r3, [r7, #4]
 810c1ba:	2200      	movs	r2, #0
 810c1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c1c0:	2300      	movs	r3, #0
}
 810c1c2:	4618      	mov	r0, r3
 810c1c4:	3710      	adds	r7, #16
 810c1c6:	46bd      	mov	sp, r7
 810c1c8:	bd80      	pop	{r7, pc}

0810c1ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810c1ca:	b580      	push	{r7, lr}
 810c1cc:	b09c      	sub	sp, #112	; 0x70
 810c1ce:	af00      	add	r7, sp, #0
 810c1d0:	60f8      	str	r0, [r7, #12]
 810c1d2:	60b9      	str	r1, [r7, #8]
 810c1d4:	603b      	str	r3, [r7, #0]
 810c1d6:	4613      	mov	r3, r2
 810c1d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c1da:	e0a9      	b.n	810c330 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810c1dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c1e2:	f000 80a5 	beq.w	810c330 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810c1e6:	f7f5 f923 	bl	8101430 <HAL_GetTick>
 810c1ea:	4602      	mov	r2, r0
 810c1ec:	683b      	ldr	r3, [r7, #0]
 810c1ee:	1ad3      	subs	r3, r2, r3
 810c1f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810c1f2:	429a      	cmp	r2, r3
 810c1f4:	d302      	bcc.n	810c1fc <UART_WaitOnFlagUntilTimeout+0x32>
 810c1f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810c1f8:	2b00      	cmp	r3, #0
 810c1fa:	d140      	bne.n	810c27e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810c1fc:	68fb      	ldr	r3, [r7, #12]
 810c1fe:	681b      	ldr	r3, [r3, #0]
 810c200:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810c204:	e853 3f00 	ldrex	r3, [r3]
 810c208:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810c20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810c20c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810c210:	667b      	str	r3, [r7, #100]	; 0x64
 810c212:	68fb      	ldr	r3, [r7, #12]
 810c214:	681b      	ldr	r3, [r3, #0]
 810c216:	461a      	mov	r2, r3
 810c218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810c21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810c21c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c21e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810c220:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810c222:	e841 2300 	strex	r3, r2, [r1]
 810c226:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810c228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810c22a:	2b00      	cmp	r3, #0
 810c22c:	d1e6      	bne.n	810c1fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c22e:	68fb      	ldr	r3, [r7, #12]
 810c230:	681b      	ldr	r3, [r3, #0]
 810c232:	3308      	adds	r3, #8
 810c234:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810c238:	e853 3f00 	ldrex	r3, [r3]
 810c23c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810c240:	f023 0301 	bic.w	r3, r3, #1
 810c244:	663b      	str	r3, [r7, #96]	; 0x60
 810c246:	68fb      	ldr	r3, [r7, #12]
 810c248:	681b      	ldr	r3, [r3, #0]
 810c24a:	3308      	adds	r3, #8
 810c24c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810c24e:	64ba      	str	r2, [r7, #72]	; 0x48
 810c250:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810c254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810c256:	e841 2300 	strex	r3, r2, [r1]
 810c25a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810c25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810c25e:	2b00      	cmp	r3, #0
 810c260:	d1e5      	bne.n	810c22e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810c262:	68fb      	ldr	r3, [r7, #12]
 810c264:	2220      	movs	r2, #32
 810c266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810c26a:	68fb      	ldr	r3, [r7, #12]
 810c26c:	2220      	movs	r2, #32
 810c26e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810c272:	68fb      	ldr	r3, [r7, #12]
 810c274:	2200      	movs	r2, #0
 810c276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810c27a:	2303      	movs	r3, #3
 810c27c:	e069      	b.n	810c352 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810c27e:	68fb      	ldr	r3, [r7, #12]
 810c280:	681b      	ldr	r3, [r3, #0]
 810c282:	681b      	ldr	r3, [r3, #0]
 810c284:	f003 0304 	and.w	r3, r3, #4
 810c288:	2b00      	cmp	r3, #0
 810c28a:	d051      	beq.n	810c330 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810c28c:	68fb      	ldr	r3, [r7, #12]
 810c28e:	681b      	ldr	r3, [r3, #0]
 810c290:	69db      	ldr	r3, [r3, #28]
 810c292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810c296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810c29a:	d149      	bne.n	810c330 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c29c:	68fb      	ldr	r3, [r7, #12]
 810c29e:	681b      	ldr	r3, [r3, #0]
 810c2a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c2a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810c2a6:	68fb      	ldr	r3, [r7, #12]
 810c2a8:	681b      	ldr	r3, [r3, #0]
 810c2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c2ae:	e853 3f00 	ldrex	r3, [r3]
 810c2b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c2b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810c2ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 810c2bc:	68fb      	ldr	r3, [r7, #12]
 810c2be:	681b      	ldr	r3, [r3, #0]
 810c2c0:	461a      	mov	r2, r3
 810c2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810c2c4:	637b      	str	r3, [r7, #52]	; 0x34
 810c2c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c2c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810c2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810c2cc:	e841 2300 	strex	r3, r2, [r1]
 810c2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c2d4:	2b00      	cmp	r3, #0
 810c2d6:	d1e6      	bne.n	810c2a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c2d8:	68fb      	ldr	r3, [r7, #12]
 810c2da:	681b      	ldr	r3, [r3, #0]
 810c2dc:	3308      	adds	r3, #8
 810c2de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c2e0:	697b      	ldr	r3, [r7, #20]
 810c2e2:	e853 3f00 	ldrex	r3, [r3]
 810c2e6:	613b      	str	r3, [r7, #16]
   return(result);
 810c2e8:	693b      	ldr	r3, [r7, #16]
 810c2ea:	f023 0301 	bic.w	r3, r3, #1
 810c2ee:	66bb      	str	r3, [r7, #104]	; 0x68
 810c2f0:	68fb      	ldr	r3, [r7, #12]
 810c2f2:	681b      	ldr	r3, [r3, #0]
 810c2f4:	3308      	adds	r3, #8
 810c2f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810c2f8:	623a      	str	r2, [r7, #32]
 810c2fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c2fc:	69f9      	ldr	r1, [r7, #28]
 810c2fe:	6a3a      	ldr	r2, [r7, #32]
 810c300:	e841 2300 	strex	r3, r2, [r1]
 810c304:	61bb      	str	r3, [r7, #24]
   return(result);
 810c306:	69bb      	ldr	r3, [r7, #24]
 810c308:	2b00      	cmp	r3, #0
 810c30a:	d1e5      	bne.n	810c2d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810c30c:	68fb      	ldr	r3, [r7, #12]
 810c30e:	2220      	movs	r2, #32
 810c310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810c314:	68fb      	ldr	r3, [r7, #12]
 810c316:	2220      	movs	r2, #32
 810c318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810c31c:	68fb      	ldr	r3, [r7, #12]
 810c31e:	2220      	movs	r2, #32
 810c320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c324:	68fb      	ldr	r3, [r7, #12]
 810c326:	2200      	movs	r2, #0
 810c328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810c32c:	2303      	movs	r3, #3
 810c32e:	e010      	b.n	810c352 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c330:	68fb      	ldr	r3, [r7, #12]
 810c332:	681b      	ldr	r3, [r3, #0]
 810c334:	69da      	ldr	r2, [r3, #28]
 810c336:	68bb      	ldr	r3, [r7, #8]
 810c338:	4013      	ands	r3, r2
 810c33a:	68ba      	ldr	r2, [r7, #8]
 810c33c:	429a      	cmp	r2, r3
 810c33e:	bf0c      	ite	eq
 810c340:	2301      	moveq	r3, #1
 810c342:	2300      	movne	r3, #0
 810c344:	b2db      	uxtb	r3, r3
 810c346:	461a      	mov	r2, r3
 810c348:	79fb      	ldrb	r3, [r7, #7]
 810c34a:	429a      	cmp	r2, r3
 810c34c:	f43f af46 	beq.w	810c1dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810c350:	2300      	movs	r3, #0
}
 810c352:	4618      	mov	r0, r3
 810c354:	3770      	adds	r7, #112	; 0x70
 810c356:	46bd      	mov	sp, r7
 810c358:	bd80      	pop	{r7, pc}

0810c35a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c35a:	b480      	push	{r7}
 810c35c:	b085      	sub	sp, #20
 810c35e:	af00      	add	r7, sp, #0
 810c360:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c362:	687b      	ldr	r3, [r7, #4]
 810c364:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c368:	2b01      	cmp	r3, #1
 810c36a:	d101      	bne.n	810c370 <HAL_UARTEx_DisableFifoMode+0x16>
 810c36c:	2302      	movs	r3, #2
 810c36e:	e027      	b.n	810c3c0 <HAL_UARTEx_DisableFifoMode+0x66>
 810c370:	687b      	ldr	r3, [r7, #4]
 810c372:	2201      	movs	r2, #1
 810c374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c378:	687b      	ldr	r3, [r7, #4]
 810c37a:	2224      	movs	r2, #36	; 0x24
 810c37c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c380:	687b      	ldr	r3, [r7, #4]
 810c382:	681b      	ldr	r3, [r3, #0]
 810c384:	681b      	ldr	r3, [r3, #0]
 810c386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c388:	687b      	ldr	r3, [r7, #4]
 810c38a:	681b      	ldr	r3, [r3, #0]
 810c38c:	681a      	ldr	r2, [r3, #0]
 810c38e:	687b      	ldr	r3, [r7, #4]
 810c390:	681b      	ldr	r3, [r3, #0]
 810c392:	f022 0201 	bic.w	r2, r2, #1
 810c396:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c398:	68fb      	ldr	r3, [r7, #12]
 810c39a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810c39e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c3a0:	687b      	ldr	r3, [r7, #4]
 810c3a2:	2200      	movs	r2, #0
 810c3a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c3a6:	687b      	ldr	r3, [r7, #4]
 810c3a8:	681b      	ldr	r3, [r3, #0]
 810c3aa:	68fa      	ldr	r2, [r7, #12]
 810c3ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c3ae:	687b      	ldr	r3, [r7, #4]
 810c3b0:	2220      	movs	r2, #32
 810c3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	2200      	movs	r2, #0
 810c3ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c3be:	2300      	movs	r3, #0
}
 810c3c0:	4618      	mov	r0, r3
 810c3c2:	3714      	adds	r7, #20
 810c3c4:	46bd      	mov	sp, r7
 810c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3ca:	4770      	bx	lr

0810c3cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c3cc:	b580      	push	{r7, lr}
 810c3ce:	b084      	sub	sp, #16
 810c3d0:	af00      	add	r7, sp, #0
 810c3d2:	6078      	str	r0, [r7, #4]
 810c3d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c3d6:	687b      	ldr	r3, [r7, #4]
 810c3d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c3dc:	2b01      	cmp	r3, #1
 810c3de:	d101      	bne.n	810c3e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c3e0:	2302      	movs	r3, #2
 810c3e2:	e02d      	b.n	810c440 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c3e4:	687b      	ldr	r3, [r7, #4]
 810c3e6:	2201      	movs	r2, #1
 810c3e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c3ec:	687b      	ldr	r3, [r7, #4]
 810c3ee:	2224      	movs	r2, #36	; 0x24
 810c3f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c3f4:	687b      	ldr	r3, [r7, #4]
 810c3f6:	681b      	ldr	r3, [r3, #0]
 810c3f8:	681b      	ldr	r3, [r3, #0]
 810c3fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c3fc:	687b      	ldr	r3, [r7, #4]
 810c3fe:	681b      	ldr	r3, [r3, #0]
 810c400:	681a      	ldr	r2, [r3, #0]
 810c402:	687b      	ldr	r3, [r7, #4]
 810c404:	681b      	ldr	r3, [r3, #0]
 810c406:	f022 0201 	bic.w	r2, r2, #1
 810c40a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c40c:	687b      	ldr	r3, [r7, #4]
 810c40e:	681b      	ldr	r3, [r3, #0]
 810c410:	689b      	ldr	r3, [r3, #8]
 810c412:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810c416:	687b      	ldr	r3, [r7, #4]
 810c418:	681b      	ldr	r3, [r3, #0]
 810c41a:	683a      	ldr	r2, [r7, #0]
 810c41c:	430a      	orrs	r2, r1
 810c41e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c420:	6878      	ldr	r0, [r7, #4]
 810c422:	f000 f84f 	bl	810c4c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c426:	687b      	ldr	r3, [r7, #4]
 810c428:	681b      	ldr	r3, [r3, #0]
 810c42a:	68fa      	ldr	r2, [r7, #12]
 810c42c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c42e:	687b      	ldr	r3, [r7, #4]
 810c430:	2220      	movs	r2, #32
 810c432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c436:	687b      	ldr	r3, [r7, #4]
 810c438:	2200      	movs	r2, #0
 810c43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c43e:	2300      	movs	r3, #0
}
 810c440:	4618      	mov	r0, r3
 810c442:	3710      	adds	r7, #16
 810c444:	46bd      	mov	sp, r7
 810c446:	bd80      	pop	{r7, pc}

0810c448 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c448:	b580      	push	{r7, lr}
 810c44a:	b084      	sub	sp, #16
 810c44c:	af00      	add	r7, sp, #0
 810c44e:	6078      	str	r0, [r7, #4]
 810c450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c452:	687b      	ldr	r3, [r7, #4]
 810c454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c458:	2b01      	cmp	r3, #1
 810c45a:	d101      	bne.n	810c460 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c45c:	2302      	movs	r3, #2
 810c45e:	e02d      	b.n	810c4bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c460:	687b      	ldr	r3, [r7, #4]
 810c462:	2201      	movs	r2, #1
 810c464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c468:	687b      	ldr	r3, [r7, #4]
 810c46a:	2224      	movs	r2, #36	; 0x24
 810c46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c470:	687b      	ldr	r3, [r7, #4]
 810c472:	681b      	ldr	r3, [r3, #0]
 810c474:	681b      	ldr	r3, [r3, #0]
 810c476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c478:	687b      	ldr	r3, [r7, #4]
 810c47a:	681b      	ldr	r3, [r3, #0]
 810c47c:	681a      	ldr	r2, [r3, #0]
 810c47e:	687b      	ldr	r3, [r7, #4]
 810c480:	681b      	ldr	r3, [r3, #0]
 810c482:	f022 0201 	bic.w	r2, r2, #1
 810c486:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c488:	687b      	ldr	r3, [r7, #4]
 810c48a:	681b      	ldr	r3, [r3, #0]
 810c48c:	689b      	ldr	r3, [r3, #8]
 810c48e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810c492:	687b      	ldr	r3, [r7, #4]
 810c494:	681b      	ldr	r3, [r3, #0]
 810c496:	683a      	ldr	r2, [r7, #0]
 810c498:	430a      	orrs	r2, r1
 810c49a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c49c:	6878      	ldr	r0, [r7, #4]
 810c49e:	f000 f811 	bl	810c4c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c4a2:	687b      	ldr	r3, [r7, #4]
 810c4a4:	681b      	ldr	r3, [r3, #0]
 810c4a6:	68fa      	ldr	r2, [r7, #12]
 810c4a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c4aa:	687b      	ldr	r3, [r7, #4]
 810c4ac:	2220      	movs	r2, #32
 810c4ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c4b2:	687b      	ldr	r3, [r7, #4]
 810c4b4:	2200      	movs	r2, #0
 810c4b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c4ba:	2300      	movs	r3, #0
}
 810c4bc:	4618      	mov	r0, r3
 810c4be:	3710      	adds	r7, #16
 810c4c0:	46bd      	mov	sp, r7
 810c4c2:	bd80      	pop	{r7, pc}

0810c4c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c4c4:	b480      	push	{r7}
 810c4c6:	b085      	sub	sp, #20
 810c4c8:	af00      	add	r7, sp, #0
 810c4ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c4cc:	687b      	ldr	r3, [r7, #4]
 810c4ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c4d0:	2b00      	cmp	r3, #0
 810c4d2:	d108      	bne.n	810c4e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c4d4:	687b      	ldr	r3, [r7, #4]
 810c4d6:	2201      	movs	r2, #1
 810c4d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810c4dc:	687b      	ldr	r3, [r7, #4]
 810c4de:	2201      	movs	r2, #1
 810c4e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c4e4:	e031      	b.n	810c54a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c4e6:	2310      	movs	r3, #16
 810c4e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c4ea:	2310      	movs	r3, #16
 810c4ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c4ee:	687b      	ldr	r3, [r7, #4]
 810c4f0:	681b      	ldr	r3, [r3, #0]
 810c4f2:	689b      	ldr	r3, [r3, #8]
 810c4f4:	0e5b      	lsrs	r3, r3, #25
 810c4f6:	b2db      	uxtb	r3, r3
 810c4f8:	f003 0307 	and.w	r3, r3, #7
 810c4fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c4fe:	687b      	ldr	r3, [r7, #4]
 810c500:	681b      	ldr	r3, [r3, #0]
 810c502:	689b      	ldr	r3, [r3, #8]
 810c504:	0f5b      	lsrs	r3, r3, #29
 810c506:	b2db      	uxtb	r3, r3
 810c508:	f003 0307 	and.w	r3, r3, #7
 810c50c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c50e:	7bbb      	ldrb	r3, [r7, #14]
 810c510:	7b3a      	ldrb	r2, [r7, #12]
 810c512:	4911      	ldr	r1, [pc, #68]	; (810c558 <UARTEx_SetNbDataToProcess+0x94>)
 810c514:	5c8a      	ldrb	r2, [r1, r2]
 810c516:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c51a:	7b3a      	ldrb	r2, [r7, #12]
 810c51c:	490f      	ldr	r1, [pc, #60]	; (810c55c <UARTEx_SetNbDataToProcess+0x98>)
 810c51e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c520:	fb93 f3f2 	sdiv	r3, r3, r2
 810c524:	b29a      	uxth	r2, r3
 810c526:	687b      	ldr	r3, [r7, #4]
 810c528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c52c:	7bfb      	ldrb	r3, [r7, #15]
 810c52e:	7b7a      	ldrb	r2, [r7, #13]
 810c530:	4909      	ldr	r1, [pc, #36]	; (810c558 <UARTEx_SetNbDataToProcess+0x94>)
 810c532:	5c8a      	ldrb	r2, [r1, r2]
 810c534:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c538:	7b7a      	ldrb	r2, [r7, #13]
 810c53a:	4908      	ldr	r1, [pc, #32]	; (810c55c <UARTEx_SetNbDataToProcess+0x98>)
 810c53c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c53e:	fb93 f3f2 	sdiv	r3, r3, r2
 810c542:	b29a      	uxth	r2, r3
 810c544:	687b      	ldr	r3, [r7, #4]
 810c546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810c54a:	bf00      	nop
 810c54c:	3714      	adds	r7, #20
 810c54e:	46bd      	mov	sp, r7
 810c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c554:	4770      	bx	lr
 810c556:	bf00      	nop
 810c558:	0811b6c4 	.word	0x0811b6c4
 810c55c:	0811b6cc 	.word	0x0811b6cc

0810c560 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 810c560:	b480      	push	{r7}
 810c562:	b085      	sub	sp, #20
 810c564:	af00      	add	r7, sp, #0
 810c566:	4603      	mov	r3, r0
 810c568:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 810c56a:	2300      	movs	r3, #0
 810c56c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 810c56e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c572:	2b84      	cmp	r3, #132	; 0x84
 810c574:	d005      	beq.n	810c582 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 810c576:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810c57a:	68fb      	ldr	r3, [r7, #12]
 810c57c:	4413      	add	r3, r2
 810c57e:	3303      	adds	r3, #3
 810c580:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 810c582:	68fb      	ldr	r3, [r7, #12]
}
 810c584:	4618      	mov	r0, r3
 810c586:	3714      	adds	r7, #20
 810c588:	46bd      	mov	sp, r7
 810c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c58e:	4770      	bx	lr

0810c590 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 810c590:	b480      	push	{r7}
 810c592:	b083      	sub	sp, #12
 810c594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c596:	f3ef 8305 	mrs	r3, IPSR
 810c59a:	607b      	str	r3, [r7, #4]
  return(result);
 810c59c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 810c59e:	2b00      	cmp	r3, #0
 810c5a0:	bf14      	ite	ne
 810c5a2:	2301      	movne	r3, #1
 810c5a4:	2300      	moveq	r3, #0
 810c5a6:	b2db      	uxtb	r3, r3
}
 810c5a8:	4618      	mov	r0, r3
 810c5aa:	370c      	adds	r7, #12
 810c5ac:	46bd      	mov	sp, r7
 810c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5b2:	4770      	bx	lr

0810c5b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 810c5b4:	b580      	push	{r7, lr}
 810c5b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 810c5b8:	f001 ffd2 	bl	810e560 <vTaskStartScheduler>
  
  return osOK;
 810c5bc:	2300      	movs	r3, #0
}
 810c5be:	4618      	mov	r0, r3
 810c5c0:	bd80      	pop	{r7, pc}

0810c5c2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 810c5c2:	b580      	push	{r7, lr}
 810c5c4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 810c5c6:	f7ff ffe3 	bl	810c590 <inHandlerMode>
 810c5ca:	4603      	mov	r3, r0
 810c5cc:	2b00      	cmp	r3, #0
 810c5ce:	d003      	beq.n	810c5d8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 810c5d0:	f002 f8ea 	bl	810e7a8 <xTaskGetTickCountFromISR>
 810c5d4:	4603      	mov	r3, r0
 810c5d6:	e002      	b.n	810c5de <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 810c5d8:	f002 f8d6 	bl	810e788 <xTaskGetTickCount>
 810c5dc:	4603      	mov	r3, r0
  }
}
 810c5de:	4618      	mov	r0, r3
 810c5e0:	bd80      	pop	{r7, pc}

0810c5e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 810c5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c5e4:	b089      	sub	sp, #36	; 0x24
 810c5e6:	af04      	add	r7, sp, #16
 810c5e8:	6078      	str	r0, [r7, #4]
 810c5ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 810c5ec:	687b      	ldr	r3, [r7, #4]
 810c5ee:	695b      	ldr	r3, [r3, #20]
 810c5f0:	2b00      	cmp	r3, #0
 810c5f2:	d020      	beq.n	810c636 <osThreadCreate+0x54>
 810c5f4:	687b      	ldr	r3, [r7, #4]
 810c5f6:	699b      	ldr	r3, [r3, #24]
 810c5f8:	2b00      	cmp	r3, #0
 810c5fa:	d01c      	beq.n	810c636 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810c5fc:	687b      	ldr	r3, [r7, #4]
 810c5fe:	685c      	ldr	r4, [r3, #4]
 810c600:	687b      	ldr	r3, [r7, #4]
 810c602:	681d      	ldr	r5, [r3, #0]
 810c604:	687b      	ldr	r3, [r7, #4]
 810c606:	691e      	ldr	r6, [r3, #16]
 810c608:	687b      	ldr	r3, [r7, #4]
 810c60a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810c60e:	4618      	mov	r0, r3
 810c610:	f7ff ffa6 	bl	810c560 <makeFreeRtosPriority>
 810c614:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 810c616:	687b      	ldr	r3, [r7, #4]
 810c618:	695b      	ldr	r3, [r3, #20]
 810c61a:	687a      	ldr	r2, [r7, #4]
 810c61c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810c61e:	9202      	str	r2, [sp, #8]
 810c620:	9301      	str	r3, [sp, #4]
 810c622:	9100      	str	r1, [sp, #0]
 810c624:	683b      	ldr	r3, [r7, #0]
 810c626:	4632      	mov	r2, r6
 810c628:	4629      	mov	r1, r5
 810c62a:	4620      	mov	r0, r4
 810c62c:	f001 fdba 	bl	810e1a4 <xTaskCreateStatic>
 810c630:	4603      	mov	r3, r0
 810c632:	60fb      	str	r3, [r7, #12]
 810c634:	e01c      	b.n	810c670 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810c636:	687b      	ldr	r3, [r7, #4]
 810c638:	685c      	ldr	r4, [r3, #4]
 810c63a:	687b      	ldr	r3, [r7, #4]
 810c63c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 810c63e:	687b      	ldr	r3, [r7, #4]
 810c640:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810c642:	b29e      	uxth	r6, r3
 810c644:	687b      	ldr	r3, [r7, #4]
 810c646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810c64a:	4618      	mov	r0, r3
 810c64c:	f7ff ff88 	bl	810c560 <makeFreeRtosPriority>
 810c650:	4602      	mov	r2, r0
 810c652:	f107 030c 	add.w	r3, r7, #12
 810c656:	9301      	str	r3, [sp, #4]
 810c658:	9200      	str	r2, [sp, #0]
 810c65a:	683b      	ldr	r3, [r7, #0]
 810c65c:	4632      	mov	r2, r6
 810c65e:	4629      	mov	r1, r5
 810c660:	4620      	mov	r0, r4
 810c662:	f001 fdfc 	bl	810e25e <xTaskCreate>
 810c666:	4603      	mov	r3, r0
 810c668:	2b01      	cmp	r3, #1
 810c66a:	d001      	beq.n	810c670 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 810c66c:	2300      	movs	r3, #0
 810c66e:	e000      	b.n	810c672 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 810c670:	68fb      	ldr	r3, [r7, #12]
}
 810c672:	4618      	mov	r0, r3
 810c674:	3714      	adds	r7, #20
 810c676:	46bd      	mov	sp, r7
 810c678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810c67a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 810c67a:	b580      	push	{r7, lr}
 810c67c:	b084      	sub	sp, #16
 810c67e:	af00      	add	r7, sp, #0
 810c680:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 810c682:	687b      	ldr	r3, [r7, #4]
 810c684:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 810c686:	68fb      	ldr	r3, [r7, #12]
 810c688:	2b00      	cmp	r3, #0
 810c68a:	d001      	beq.n	810c690 <osDelay+0x16>
 810c68c:	68fb      	ldr	r3, [r7, #12]
 810c68e:	e000      	b.n	810c692 <osDelay+0x18>
 810c690:	2301      	movs	r3, #1
 810c692:	4618      	mov	r0, r3
 810c694:	f001 ff30 	bl	810e4f8 <vTaskDelay>
  
  return osOK;
 810c698:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 810c69a:	4618      	mov	r0, r3
 810c69c:	3710      	adds	r7, #16
 810c69e:	46bd      	mov	sp, r7
 810c6a0:	bd80      	pop	{r7, pc}

0810c6a2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 810c6a2:	b580      	push	{r7, lr}
 810c6a4:	b082      	sub	sp, #8
 810c6a6:	af00      	add	r7, sp, #0
 810c6a8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 810c6aa:	687b      	ldr	r3, [r7, #4]
 810c6ac:	685b      	ldr	r3, [r3, #4]
 810c6ae:	2b00      	cmp	r3, #0
 810c6b0:	d007      	beq.n	810c6c2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 810c6b2:	687b      	ldr	r3, [r7, #4]
 810c6b4:	685b      	ldr	r3, [r3, #4]
 810c6b6:	4619      	mov	r1, r3
 810c6b8:	2001      	movs	r0, #1
 810c6ba:	f001 f838 	bl	810d72e <xQueueCreateMutexStatic>
 810c6be:	4603      	mov	r3, r0
 810c6c0:	e003      	b.n	810c6ca <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 810c6c2:	2001      	movs	r0, #1
 810c6c4:	f001 f81b 	bl	810d6fe <xQueueCreateMutex>
 810c6c8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 810c6ca:	4618      	mov	r0, r3
 810c6cc:	3708      	adds	r7, #8
 810c6ce:	46bd      	mov	sp, r7
 810c6d0:	bd80      	pop	{r7, pc}
	...

0810c6d4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 810c6d4:	b580      	push	{r7, lr}
 810c6d6:	b084      	sub	sp, #16
 810c6d8:	af00      	add	r7, sp, #0
 810c6da:	6078      	str	r0, [r7, #4]
 810c6dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 810c6de:	2300      	movs	r3, #0
 810c6e0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 810c6e2:	687b      	ldr	r3, [r7, #4]
 810c6e4:	2b00      	cmp	r3, #0
 810c6e6:	d101      	bne.n	810c6ec <osMutexWait+0x18>
    return osErrorParameter;
 810c6e8:	2380      	movs	r3, #128	; 0x80
 810c6ea:	e03a      	b.n	810c762 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 810c6ec:	2300      	movs	r3, #0
 810c6ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 810c6f0:	683b      	ldr	r3, [r7, #0]
 810c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c6f6:	d103      	bne.n	810c700 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 810c6f8:	f04f 33ff 	mov.w	r3, #4294967295
 810c6fc:	60fb      	str	r3, [r7, #12]
 810c6fe:	e009      	b.n	810c714 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 810c700:	683b      	ldr	r3, [r7, #0]
 810c702:	2b00      	cmp	r3, #0
 810c704:	d006      	beq.n	810c714 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 810c706:	683b      	ldr	r3, [r7, #0]
 810c708:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 810c70a:	68fb      	ldr	r3, [r7, #12]
 810c70c:	2b00      	cmp	r3, #0
 810c70e:	d101      	bne.n	810c714 <osMutexWait+0x40>
      ticks = 1;
 810c710:	2301      	movs	r3, #1
 810c712:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 810c714:	f7ff ff3c 	bl	810c590 <inHandlerMode>
 810c718:	4603      	mov	r3, r0
 810c71a:	2b00      	cmp	r3, #0
 810c71c:	d017      	beq.n	810c74e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 810c71e:	f107 0308 	add.w	r3, r7, #8
 810c722:	461a      	mov	r2, r3
 810c724:	2100      	movs	r1, #0
 810c726:	6878      	ldr	r0, [r7, #4]
 810c728:	f001 fb94 	bl	810de54 <xQueueReceiveFromISR>
 810c72c:	4603      	mov	r3, r0
 810c72e:	2b01      	cmp	r3, #1
 810c730:	d001      	beq.n	810c736 <osMutexWait+0x62>
      return osErrorOS;
 810c732:	23ff      	movs	r3, #255	; 0xff
 810c734:	e015      	b.n	810c762 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 810c736:	68bb      	ldr	r3, [r7, #8]
 810c738:	2b00      	cmp	r3, #0
 810c73a:	d011      	beq.n	810c760 <osMutexWait+0x8c>
 810c73c:	4b0b      	ldr	r3, [pc, #44]	; (810c76c <osMutexWait+0x98>)
 810c73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c742:	601a      	str	r2, [r3, #0]
 810c744:	f3bf 8f4f 	dsb	sy
 810c748:	f3bf 8f6f 	isb	sy
 810c74c:	e008      	b.n	810c760 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 810c74e:	68f9      	ldr	r1, [r7, #12]
 810c750:	6878      	ldr	r0, [r7, #4]
 810c752:	f001 fa73 	bl	810dc3c <xQueueSemaphoreTake>
 810c756:	4603      	mov	r3, r0
 810c758:	2b01      	cmp	r3, #1
 810c75a:	d001      	beq.n	810c760 <osMutexWait+0x8c>
    return osErrorOS;
 810c75c:	23ff      	movs	r3, #255	; 0xff
 810c75e:	e000      	b.n	810c762 <osMutexWait+0x8e>
  }
  
  return osOK;
 810c760:	2300      	movs	r3, #0
}
 810c762:	4618      	mov	r0, r3
 810c764:	3710      	adds	r7, #16
 810c766:	46bd      	mov	sp, r7
 810c768:	bd80      	pop	{r7, pc}
 810c76a:	bf00      	nop
 810c76c:	e000ed04 	.word	0xe000ed04

0810c770 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 810c770:	b580      	push	{r7, lr}
 810c772:	b084      	sub	sp, #16
 810c774:	af00      	add	r7, sp, #0
 810c776:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 810c778:	2300      	movs	r3, #0
 810c77a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 810c77c:	2300      	movs	r3, #0
 810c77e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 810c780:	f7ff ff06 	bl	810c590 <inHandlerMode>
 810c784:	4603      	mov	r3, r0
 810c786:	2b00      	cmp	r3, #0
 810c788:	d016      	beq.n	810c7b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 810c78a:	f107 0308 	add.w	r3, r7, #8
 810c78e:	4619      	mov	r1, r3
 810c790:	6878      	ldr	r0, [r7, #4]
 810c792:	f001 f8e5 	bl	810d960 <xQueueGiveFromISR>
 810c796:	4603      	mov	r3, r0
 810c798:	2b01      	cmp	r3, #1
 810c79a:	d001      	beq.n	810c7a0 <osMutexRelease+0x30>
      return osErrorOS;
 810c79c:	23ff      	movs	r3, #255	; 0xff
 810c79e:	e017      	b.n	810c7d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 810c7a0:	68bb      	ldr	r3, [r7, #8]
 810c7a2:	2b00      	cmp	r3, #0
 810c7a4:	d013      	beq.n	810c7ce <osMutexRelease+0x5e>
 810c7a6:	4b0c      	ldr	r3, [pc, #48]	; (810c7d8 <osMutexRelease+0x68>)
 810c7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c7ac:	601a      	str	r2, [r3, #0]
 810c7ae:	f3bf 8f4f 	dsb	sy
 810c7b2:	f3bf 8f6f 	isb	sy
 810c7b6:	e00a      	b.n	810c7ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 810c7b8:	2300      	movs	r3, #0
 810c7ba:	2200      	movs	r2, #0
 810c7bc:	2100      	movs	r1, #0
 810c7be:	6878      	ldr	r0, [r7, #4]
 810c7c0:	f000 ffd0 	bl	810d764 <xQueueGenericSend>
 810c7c4:	4603      	mov	r3, r0
 810c7c6:	2b01      	cmp	r3, #1
 810c7c8:	d001      	beq.n	810c7ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 810c7ca:	23ff      	movs	r3, #255	; 0xff
 810c7cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 810c7ce:	68fb      	ldr	r3, [r7, #12]
}
 810c7d0:	4618      	mov	r0, r3
 810c7d2:	3710      	adds	r7, #16
 810c7d4:	46bd      	mov	sp, r7
 810c7d6:	bd80      	pop	{r7, pc}
 810c7d8:	e000ed04 	.word	0xe000ed04

0810c7dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 810c7dc:	b580      	push	{r7, lr}
 810c7de:	b086      	sub	sp, #24
 810c7e0:	af02      	add	r7, sp, #8
 810c7e2:	6078      	str	r0, [r7, #4]
 810c7e4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 810c7e6:	687b      	ldr	r3, [r7, #4]
 810c7e8:	685b      	ldr	r3, [r3, #4]
 810c7ea:	2b00      	cmp	r3, #0
 810c7ec:	d00f      	beq.n	810c80e <osSemaphoreCreate+0x32>
    if (count == 1) {
 810c7ee:	683b      	ldr	r3, [r7, #0]
 810c7f0:	2b01      	cmp	r3, #1
 810c7f2:	d10a      	bne.n	810c80a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 810c7f4:	687b      	ldr	r3, [r7, #4]
 810c7f6:	685b      	ldr	r3, [r3, #4]
 810c7f8:	2203      	movs	r2, #3
 810c7fa:	9200      	str	r2, [sp, #0]
 810c7fc:	2200      	movs	r2, #0
 810c7fe:	2100      	movs	r1, #0
 810c800:	2001      	movs	r0, #1
 810c802:	f000 fe91 	bl	810d528 <xQueueGenericCreateStatic>
 810c806:	4603      	mov	r3, r0
 810c808:	e016      	b.n	810c838 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 810c80a:	2300      	movs	r3, #0
 810c80c:	e014      	b.n	810c838 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 810c80e:	683b      	ldr	r3, [r7, #0]
 810c810:	2b01      	cmp	r3, #1
 810c812:	d110      	bne.n	810c836 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 810c814:	2203      	movs	r2, #3
 810c816:	2100      	movs	r1, #0
 810c818:	2001      	movs	r0, #1
 810c81a:	f000 fefd 	bl	810d618 <xQueueGenericCreate>
 810c81e:	60f8      	str	r0, [r7, #12]
 810c820:	68fb      	ldr	r3, [r7, #12]
 810c822:	2b00      	cmp	r3, #0
 810c824:	d005      	beq.n	810c832 <osSemaphoreCreate+0x56>
 810c826:	2300      	movs	r3, #0
 810c828:	2200      	movs	r2, #0
 810c82a:	2100      	movs	r1, #0
 810c82c:	68f8      	ldr	r0, [r7, #12]
 810c82e:	f000 ff99 	bl	810d764 <xQueueGenericSend>
      return sema;
 810c832:	68fb      	ldr	r3, [r7, #12]
 810c834:	e000      	b.n	810c838 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 810c836:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 810c838:	4618      	mov	r0, r3
 810c83a:	3710      	adds	r7, #16
 810c83c:	46bd      	mov	sp, r7
 810c83e:	bd80      	pop	{r7, pc}

0810c840 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 810c840:	b580      	push	{r7, lr}
 810c842:	b084      	sub	sp, #16
 810c844:	af00      	add	r7, sp, #0
 810c846:	6078      	str	r0, [r7, #4]
 810c848:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 810c84a:	2300      	movs	r3, #0
 810c84c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 810c84e:	687b      	ldr	r3, [r7, #4]
 810c850:	2b00      	cmp	r3, #0
 810c852:	d101      	bne.n	810c858 <osSemaphoreWait+0x18>
    return osErrorParameter;
 810c854:	2380      	movs	r3, #128	; 0x80
 810c856:	e03a      	b.n	810c8ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 810c858:	2300      	movs	r3, #0
 810c85a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 810c85c:	683b      	ldr	r3, [r7, #0]
 810c85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c862:	d103      	bne.n	810c86c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 810c864:	f04f 33ff 	mov.w	r3, #4294967295
 810c868:	60fb      	str	r3, [r7, #12]
 810c86a:	e009      	b.n	810c880 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 810c86c:	683b      	ldr	r3, [r7, #0]
 810c86e:	2b00      	cmp	r3, #0
 810c870:	d006      	beq.n	810c880 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 810c872:	683b      	ldr	r3, [r7, #0]
 810c874:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 810c876:	68fb      	ldr	r3, [r7, #12]
 810c878:	2b00      	cmp	r3, #0
 810c87a:	d101      	bne.n	810c880 <osSemaphoreWait+0x40>
      ticks = 1;
 810c87c:	2301      	movs	r3, #1
 810c87e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 810c880:	f7ff fe86 	bl	810c590 <inHandlerMode>
 810c884:	4603      	mov	r3, r0
 810c886:	2b00      	cmp	r3, #0
 810c888:	d017      	beq.n	810c8ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 810c88a:	f107 0308 	add.w	r3, r7, #8
 810c88e:	461a      	mov	r2, r3
 810c890:	2100      	movs	r1, #0
 810c892:	6878      	ldr	r0, [r7, #4]
 810c894:	f001 fade 	bl	810de54 <xQueueReceiveFromISR>
 810c898:	4603      	mov	r3, r0
 810c89a:	2b01      	cmp	r3, #1
 810c89c:	d001      	beq.n	810c8a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 810c89e:	23ff      	movs	r3, #255	; 0xff
 810c8a0:	e015      	b.n	810c8ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 810c8a2:	68bb      	ldr	r3, [r7, #8]
 810c8a4:	2b00      	cmp	r3, #0
 810c8a6:	d011      	beq.n	810c8cc <osSemaphoreWait+0x8c>
 810c8a8:	4b0b      	ldr	r3, [pc, #44]	; (810c8d8 <osSemaphoreWait+0x98>)
 810c8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c8ae:	601a      	str	r2, [r3, #0]
 810c8b0:	f3bf 8f4f 	dsb	sy
 810c8b4:	f3bf 8f6f 	isb	sy
 810c8b8:	e008      	b.n	810c8cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 810c8ba:	68f9      	ldr	r1, [r7, #12]
 810c8bc:	6878      	ldr	r0, [r7, #4]
 810c8be:	f001 f9bd 	bl	810dc3c <xQueueSemaphoreTake>
 810c8c2:	4603      	mov	r3, r0
 810c8c4:	2b01      	cmp	r3, #1
 810c8c6:	d001      	beq.n	810c8cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 810c8c8:	23ff      	movs	r3, #255	; 0xff
 810c8ca:	e000      	b.n	810c8ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 810c8cc:	2300      	movs	r3, #0
}
 810c8ce:	4618      	mov	r0, r3
 810c8d0:	3710      	adds	r7, #16
 810c8d2:	46bd      	mov	sp, r7
 810c8d4:	bd80      	pop	{r7, pc}
 810c8d6:	bf00      	nop
 810c8d8:	e000ed04 	.word	0xe000ed04

0810c8dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 810c8dc:	b580      	push	{r7, lr}
 810c8de:	b084      	sub	sp, #16
 810c8e0:	af00      	add	r7, sp, #0
 810c8e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 810c8e4:	2300      	movs	r3, #0
 810c8e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 810c8e8:	2300      	movs	r3, #0
 810c8ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 810c8ec:	f7ff fe50 	bl	810c590 <inHandlerMode>
 810c8f0:	4603      	mov	r3, r0
 810c8f2:	2b00      	cmp	r3, #0
 810c8f4:	d016      	beq.n	810c924 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 810c8f6:	f107 0308 	add.w	r3, r7, #8
 810c8fa:	4619      	mov	r1, r3
 810c8fc:	6878      	ldr	r0, [r7, #4]
 810c8fe:	f001 f82f 	bl	810d960 <xQueueGiveFromISR>
 810c902:	4603      	mov	r3, r0
 810c904:	2b01      	cmp	r3, #1
 810c906:	d001      	beq.n	810c90c <osSemaphoreRelease+0x30>
      return osErrorOS;
 810c908:	23ff      	movs	r3, #255	; 0xff
 810c90a:	e017      	b.n	810c93c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 810c90c:	68bb      	ldr	r3, [r7, #8]
 810c90e:	2b00      	cmp	r3, #0
 810c910:	d013      	beq.n	810c93a <osSemaphoreRelease+0x5e>
 810c912:	4b0c      	ldr	r3, [pc, #48]	; (810c944 <osSemaphoreRelease+0x68>)
 810c914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c918:	601a      	str	r2, [r3, #0]
 810c91a:	f3bf 8f4f 	dsb	sy
 810c91e:	f3bf 8f6f 	isb	sy
 810c922:	e00a      	b.n	810c93a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 810c924:	2300      	movs	r3, #0
 810c926:	2200      	movs	r2, #0
 810c928:	2100      	movs	r1, #0
 810c92a:	6878      	ldr	r0, [r7, #4]
 810c92c:	f000 ff1a 	bl	810d764 <xQueueGenericSend>
 810c930:	4603      	mov	r3, r0
 810c932:	2b01      	cmp	r3, #1
 810c934:	d001      	beq.n	810c93a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 810c936:	23ff      	movs	r3, #255	; 0xff
 810c938:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 810c93a:	68fb      	ldr	r3, [r7, #12]
}
 810c93c:	4618      	mov	r0, r3
 810c93e:	3710      	adds	r7, #16
 810c940:	46bd      	mov	sp, r7
 810c942:	bd80      	pop	{r7, pc}
 810c944:	e000ed04 	.word	0xe000ed04

0810c948 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 810c948:	b590      	push	{r4, r7, lr}
 810c94a:	b085      	sub	sp, #20
 810c94c:	af02      	add	r7, sp, #8
 810c94e:	6078      	str	r0, [r7, #4]
 810c950:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 810c952:	687b      	ldr	r3, [r7, #4]
 810c954:	689b      	ldr	r3, [r3, #8]
 810c956:	2b00      	cmp	r3, #0
 810c958:	d011      	beq.n	810c97e <osMessageCreate+0x36>
 810c95a:	687b      	ldr	r3, [r7, #4]
 810c95c:	68db      	ldr	r3, [r3, #12]
 810c95e:	2b00      	cmp	r3, #0
 810c960:	d00d      	beq.n	810c97e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 810c962:	687b      	ldr	r3, [r7, #4]
 810c964:	6818      	ldr	r0, [r3, #0]
 810c966:	687b      	ldr	r3, [r7, #4]
 810c968:	6859      	ldr	r1, [r3, #4]
 810c96a:	687b      	ldr	r3, [r7, #4]
 810c96c:	689a      	ldr	r2, [r3, #8]
 810c96e:	687b      	ldr	r3, [r7, #4]
 810c970:	68db      	ldr	r3, [r3, #12]
 810c972:	2400      	movs	r4, #0
 810c974:	9400      	str	r4, [sp, #0]
 810c976:	f000 fdd7 	bl	810d528 <xQueueGenericCreateStatic>
 810c97a:	4603      	mov	r3, r0
 810c97c:	e008      	b.n	810c990 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 810c97e:	687b      	ldr	r3, [r7, #4]
 810c980:	6818      	ldr	r0, [r3, #0]
 810c982:	687b      	ldr	r3, [r7, #4]
 810c984:	685b      	ldr	r3, [r3, #4]
 810c986:	2200      	movs	r2, #0
 810c988:	4619      	mov	r1, r3
 810c98a:	f000 fe45 	bl	810d618 <xQueueGenericCreate>
 810c98e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 810c990:	4618      	mov	r0, r3
 810c992:	370c      	adds	r7, #12
 810c994:	46bd      	mov	sp, r7
 810c996:	bd90      	pop	{r4, r7, pc}

0810c998 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 810c998:	b590      	push	{r4, r7, lr}
 810c99a:	b08b      	sub	sp, #44	; 0x2c
 810c99c:	af00      	add	r7, sp, #0
 810c99e:	60f8      	str	r0, [r7, #12]
 810c9a0:	60b9      	str	r1, [r7, #8]
 810c9a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 810c9a4:	68bb      	ldr	r3, [r7, #8]
 810c9a6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 810c9a8:	2300      	movs	r3, #0
 810c9aa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 810c9ac:	68bb      	ldr	r3, [r7, #8]
 810c9ae:	2b00      	cmp	r3, #0
 810c9b0:	d10a      	bne.n	810c9c8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 810c9b2:	2380      	movs	r3, #128	; 0x80
 810c9b4:	617b      	str	r3, [r7, #20]
    return event;
 810c9b6:	68fb      	ldr	r3, [r7, #12]
 810c9b8:	461c      	mov	r4, r3
 810c9ba:	f107 0314 	add.w	r3, r7, #20
 810c9be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810c9c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810c9c6:	e054      	b.n	810ca72 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 810c9c8:	2300      	movs	r3, #0
 810c9ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 810c9cc:	2300      	movs	r3, #0
 810c9ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 810c9d0:	687b      	ldr	r3, [r7, #4]
 810c9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c9d6:	d103      	bne.n	810c9e0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 810c9d8:	f04f 33ff 	mov.w	r3, #4294967295
 810c9dc:	627b      	str	r3, [r7, #36]	; 0x24
 810c9de:	e009      	b.n	810c9f4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 810c9e0:	687b      	ldr	r3, [r7, #4]
 810c9e2:	2b00      	cmp	r3, #0
 810c9e4:	d006      	beq.n	810c9f4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 810c9e6:	687b      	ldr	r3, [r7, #4]
 810c9e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 810c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9ec:	2b00      	cmp	r3, #0
 810c9ee:	d101      	bne.n	810c9f4 <osMessageGet+0x5c>
      ticks = 1;
 810c9f0:	2301      	movs	r3, #1
 810c9f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 810c9f4:	f7ff fdcc 	bl	810c590 <inHandlerMode>
 810c9f8:	4603      	mov	r3, r0
 810c9fa:	2b00      	cmp	r3, #0
 810c9fc:	d01c      	beq.n	810ca38 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 810c9fe:	f107 0220 	add.w	r2, r7, #32
 810ca02:	f107 0314 	add.w	r3, r7, #20
 810ca06:	3304      	adds	r3, #4
 810ca08:	4619      	mov	r1, r3
 810ca0a:	68b8      	ldr	r0, [r7, #8]
 810ca0c:	f001 fa22 	bl	810de54 <xQueueReceiveFromISR>
 810ca10:	4603      	mov	r3, r0
 810ca12:	2b01      	cmp	r3, #1
 810ca14:	d102      	bne.n	810ca1c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 810ca16:	2310      	movs	r3, #16
 810ca18:	617b      	str	r3, [r7, #20]
 810ca1a:	e001      	b.n	810ca20 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 810ca1c:	2300      	movs	r3, #0
 810ca1e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 810ca20:	6a3b      	ldr	r3, [r7, #32]
 810ca22:	2b00      	cmp	r3, #0
 810ca24:	d01d      	beq.n	810ca62 <osMessageGet+0xca>
 810ca26:	4b15      	ldr	r3, [pc, #84]	; (810ca7c <osMessageGet+0xe4>)
 810ca28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ca2c:	601a      	str	r2, [r3, #0]
 810ca2e:	f3bf 8f4f 	dsb	sy
 810ca32:	f3bf 8f6f 	isb	sy
 810ca36:	e014      	b.n	810ca62 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 810ca38:	f107 0314 	add.w	r3, r7, #20
 810ca3c:	3304      	adds	r3, #4
 810ca3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810ca40:	4619      	mov	r1, r3
 810ca42:	68b8      	ldr	r0, [r7, #8]
 810ca44:	f001 f81a 	bl	810da7c <xQueueReceive>
 810ca48:	4603      	mov	r3, r0
 810ca4a:	2b01      	cmp	r3, #1
 810ca4c:	d102      	bne.n	810ca54 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 810ca4e:	2310      	movs	r3, #16
 810ca50:	617b      	str	r3, [r7, #20]
 810ca52:	e006      	b.n	810ca62 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 810ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ca56:	2b00      	cmp	r3, #0
 810ca58:	d101      	bne.n	810ca5e <osMessageGet+0xc6>
 810ca5a:	2300      	movs	r3, #0
 810ca5c:	e000      	b.n	810ca60 <osMessageGet+0xc8>
 810ca5e:	2340      	movs	r3, #64	; 0x40
 810ca60:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 810ca62:	68fb      	ldr	r3, [r7, #12]
 810ca64:	461c      	mov	r4, r3
 810ca66:	f107 0314 	add.w	r3, r7, #20
 810ca6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810ca6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 810ca72:	68f8      	ldr	r0, [r7, #12]
 810ca74:	372c      	adds	r7, #44	; 0x2c
 810ca76:	46bd      	mov	sp, r7
 810ca78:	bd90      	pop	{r4, r7, pc}
 810ca7a:	bf00      	nop
 810ca7c:	e000ed04 	.word	0xe000ed04

0810ca80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810ca80:	b580      	push	{r7, lr}
 810ca82:	b08a      	sub	sp, #40	; 0x28
 810ca84:	af00      	add	r7, sp, #0
 810ca86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810ca88:	2300      	movs	r3, #0
 810ca8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810ca8c:	f001 fdd2 	bl	810e634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810ca90:	4b5b      	ldr	r3, [pc, #364]	; (810cc00 <pvPortMalloc+0x180>)
 810ca92:	681b      	ldr	r3, [r3, #0]
 810ca94:	2b00      	cmp	r3, #0
 810ca96:	d101      	bne.n	810ca9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810ca98:	f000 f920 	bl	810ccdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810ca9c:	4b59      	ldr	r3, [pc, #356]	; (810cc04 <pvPortMalloc+0x184>)
 810ca9e:	681a      	ldr	r2, [r3, #0]
 810caa0:	687b      	ldr	r3, [r7, #4]
 810caa2:	4013      	ands	r3, r2
 810caa4:	2b00      	cmp	r3, #0
 810caa6:	f040 8093 	bne.w	810cbd0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810caaa:	687b      	ldr	r3, [r7, #4]
 810caac:	2b00      	cmp	r3, #0
 810caae:	d01d      	beq.n	810caec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 810cab0:	2208      	movs	r2, #8
 810cab2:	687b      	ldr	r3, [r7, #4]
 810cab4:	4413      	add	r3, r2
 810cab6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810cab8:	687b      	ldr	r3, [r7, #4]
 810caba:	f003 0307 	and.w	r3, r3, #7
 810cabe:	2b00      	cmp	r3, #0
 810cac0:	d014      	beq.n	810caec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810cac2:	687b      	ldr	r3, [r7, #4]
 810cac4:	f023 0307 	bic.w	r3, r3, #7
 810cac8:	3308      	adds	r3, #8
 810caca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810cacc:	687b      	ldr	r3, [r7, #4]
 810cace:	f003 0307 	and.w	r3, r3, #7
 810cad2:	2b00      	cmp	r3, #0
 810cad4:	d00a      	beq.n	810caec <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cada:	f383 8811 	msr	BASEPRI, r3
 810cade:	f3bf 8f6f 	isb	sy
 810cae2:	f3bf 8f4f 	dsb	sy
 810cae6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810cae8:	bf00      	nop
 810caea:	e7fe      	b.n	810caea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810caec:	687b      	ldr	r3, [r7, #4]
 810caee:	2b00      	cmp	r3, #0
 810caf0:	d06e      	beq.n	810cbd0 <pvPortMalloc+0x150>
 810caf2:	4b45      	ldr	r3, [pc, #276]	; (810cc08 <pvPortMalloc+0x188>)
 810caf4:	681b      	ldr	r3, [r3, #0]
 810caf6:	687a      	ldr	r2, [r7, #4]
 810caf8:	429a      	cmp	r2, r3
 810cafa:	d869      	bhi.n	810cbd0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810cafc:	4b43      	ldr	r3, [pc, #268]	; (810cc0c <pvPortMalloc+0x18c>)
 810cafe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810cb00:	4b42      	ldr	r3, [pc, #264]	; (810cc0c <pvPortMalloc+0x18c>)
 810cb02:	681b      	ldr	r3, [r3, #0]
 810cb04:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810cb06:	e004      	b.n	810cb12 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 810cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb0a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb0e:	681b      	ldr	r3, [r3, #0]
 810cb10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb14:	685b      	ldr	r3, [r3, #4]
 810cb16:	687a      	ldr	r2, [r7, #4]
 810cb18:	429a      	cmp	r2, r3
 810cb1a:	d903      	bls.n	810cb24 <pvPortMalloc+0xa4>
 810cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb1e:	681b      	ldr	r3, [r3, #0]
 810cb20:	2b00      	cmp	r3, #0
 810cb22:	d1f1      	bne.n	810cb08 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810cb24:	4b36      	ldr	r3, [pc, #216]	; (810cc00 <pvPortMalloc+0x180>)
 810cb26:	681b      	ldr	r3, [r3, #0]
 810cb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810cb2a:	429a      	cmp	r2, r3
 810cb2c:	d050      	beq.n	810cbd0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810cb2e:	6a3b      	ldr	r3, [r7, #32]
 810cb30:	681b      	ldr	r3, [r3, #0]
 810cb32:	2208      	movs	r2, #8
 810cb34:	4413      	add	r3, r2
 810cb36:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb3a:	681a      	ldr	r2, [r3, #0]
 810cb3c:	6a3b      	ldr	r3, [r7, #32]
 810cb3e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb42:	685a      	ldr	r2, [r3, #4]
 810cb44:	687b      	ldr	r3, [r7, #4]
 810cb46:	1ad2      	subs	r2, r2, r3
 810cb48:	2308      	movs	r3, #8
 810cb4a:	005b      	lsls	r3, r3, #1
 810cb4c:	429a      	cmp	r2, r3
 810cb4e:	d91f      	bls.n	810cb90 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810cb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	4413      	add	r3, r2
 810cb56:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810cb58:	69bb      	ldr	r3, [r7, #24]
 810cb5a:	f003 0307 	and.w	r3, r3, #7
 810cb5e:	2b00      	cmp	r3, #0
 810cb60:	d00a      	beq.n	810cb78 <pvPortMalloc+0xf8>
	__asm volatile
 810cb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cb66:	f383 8811 	msr	BASEPRI, r3
 810cb6a:	f3bf 8f6f 	isb	sy
 810cb6e:	f3bf 8f4f 	dsb	sy
 810cb72:	613b      	str	r3, [r7, #16]
}
 810cb74:	bf00      	nop
 810cb76:	e7fe      	b.n	810cb76 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb7a:	685a      	ldr	r2, [r3, #4]
 810cb7c:	687b      	ldr	r3, [r7, #4]
 810cb7e:	1ad2      	subs	r2, r2, r3
 810cb80:	69bb      	ldr	r3, [r7, #24]
 810cb82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb86:	687a      	ldr	r2, [r7, #4]
 810cb88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810cb8a:	69b8      	ldr	r0, [r7, #24]
 810cb8c:	f000 f908 	bl	810cda0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810cb90:	4b1d      	ldr	r3, [pc, #116]	; (810cc08 <pvPortMalloc+0x188>)
 810cb92:	681a      	ldr	r2, [r3, #0]
 810cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cb96:	685b      	ldr	r3, [r3, #4]
 810cb98:	1ad3      	subs	r3, r2, r3
 810cb9a:	4a1b      	ldr	r2, [pc, #108]	; (810cc08 <pvPortMalloc+0x188>)
 810cb9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810cb9e:	4b1a      	ldr	r3, [pc, #104]	; (810cc08 <pvPortMalloc+0x188>)
 810cba0:	681a      	ldr	r2, [r3, #0]
 810cba2:	4b1b      	ldr	r3, [pc, #108]	; (810cc10 <pvPortMalloc+0x190>)
 810cba4:	681b      	ldr	r3, [r3, #0]
 810cba6:	429a      	cmp	r2, r3
 810cba8:	d203      	bcs.n	810cbb2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810cbaa:	4b17      	ldr	r3, [pc, #92]	; (810cc08 <pvPortMalloc+0x188>)
 810cbac:	681b      	ldr	r3, [r3, #0]
 810cbae:	4a18      	ldr	r2, [pc, #96]	; (810cc10 <pvPortMalloc+0x190>)
 810cbb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cbb4:	685a      	ldr	r2, [r3, #4]
 810cbb6:	4b13      	ldr	r3, [pc, #76]	; (810cc04 <pvPortMalloc+0x184>)
 810cbb8:	681b      	ldr	r3, [r3, #0]
 810cbba:	431a      	orrs	r2, r3
 810cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cbbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cbc2:	2200      	movs	r2, #0
 810cbc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810cbc6:	4b13      	ldr	r3, [pc, #76]	; (810cc14 <pvPortMalloc+0x194>)
 810cbc8:	681b      	ldr	r3, [r3, #0]
 810cbca:	3301      	adds	r3, #1
 810cbcc:	4a11      	ldr	r2, [pc, #68]	; (810cc14 <pvPortMalloc+0x194>)
 810cbce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810cbd0:	f001 fd3e 	bl	810e650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810cbd4:	69fb      	ldr	r3, [r7, #28]
 810cbd6:	f003 0307 	and.w	r3, r3, #7
 810cbda:	2b00      	cmp	r3, #0
 810cbdc:	d00a      	beq.n	810cbf4 <pvPortMalloc+0x174>
	__asm volatile
 810cbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cbe2:	f383 8811 	msr	BASEPRI, r3
 810cbe6:	f3bf 8f6f 	isb	sy
 810cbea:	f3bf 8f4f 	dsb	sy
 810cbee:	60fb      	str	r3, [r7, #12]
}
 810cbf0:	bf00      	nop
 810cbf2:	e7fe      	b.n	810cbf2 <pvPortMalloc+0x172>
	return pvReturn;
 810cbf4:	69fb      	ldr	r3, [r7, #28]
}
 810cbf6:	4618      	mov	r0, r3
 810cbf8:	3728      	adds	r7, #40	; 0x28
 810cbfa:	46bd      	mov	sp, r7
 810cbfc:	bd80      	pop	{r7, pc}
 810cbfe:	bf00      	nop
 810cc00:	100056c4 	.word	0x100056c4
 810cc04:	100056d8 	.word	0x100056d8
 810cc08:	100056c8 	.word	0x100056c8
 810cc0c:	100056bc 	.word	0x100056bc
 810cc10:	100056cc 	.word	0x100056cc
 810cc14:	100056d0 	.word	0x100056d0

0810cc18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810cc18:	b580      	push	{r7, lr}
 810cc1a:	b086      	sub	sp, #24
 810cc1c:	af00      	add	r7, sp, #0
 810cc1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810cc20:	687b      	ldr	r3, [r7, #4]
 810cc22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810cc24:	687b      	ldr	r3, [r7, #4]
 810cc26:	2b00      	cmp	r3, #0
 810cc28:	d04d      	beq.n	810ccc6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810cc2a:	2308      	movs	r3, #8
 810cc2c:	425b      	negs	r3, r3
 810cc2e:	697a      	ldr	r2, [r7, #20]
 810cc30:	4413      	add	r3, r2
 810cc32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810cc34:	697b      	ldr	r3, [r7, #20]
 810cc36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810cc38:	693b      	ldr	r3, [r7, #16]
 810cc3a:	685a      	ldr	r2, [r3, #4]
 810cc3c:	4b24      	ldr	r3, [pc, #144]	; (810ccd0 <vPortFree+0xb8>)
 810cc3e:	681b      	ldr	r3, [r3, #0]
 810cc40:	4013      	ands	r3, r2
 810cc42:	2b00      	cmp	r3, #0
 810cc44:	d10a      	bne.n	810cc5c <vPortFree+0x44>
	__asm volatile
 810cc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cc4a:	f383 8811 	msr	BASEPRI, r3
 810cc4e:	f3bf 8f6f 	isb	sy
 810cc52:	f3bf 8f4f 	dsb	sy
 810cc56:	60fb      	str	r3, [r7, #12]
}
 810cc58:	bf00      	nop
 810cc5a:	e7fe      	b.n	810cc5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810cc5c:	693b      	ldr	r3, [r7, #16]
 810cc5e:	681b      	ldr	r3, [r3, #0]
 810cc60:	2b00      	cmp	r3, #0
 810cc62:	d00a      	beq.n	810cc7a <vPortFree+0x62>
	__asm volatile
 810cc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cc68:	f383 8811 	msr	BASEPRI, r3
 810cc6c:	f3bf 8f6f 	isb	sy
 810cc70:	f3bf 8f4f 	dsb	sy
 810cc74:	60bb      	str	r3, [r7, #8]
}
 810cc76:	bf00      	nop
 810cc78:	e7fe      	b.n	810cc78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810cc7a:	693b      	ldr	r3, [r7, #16]
 810cc7c:	685a      	ldr	r2, [r3, #4]
 810cc7e:	4b14      	ldr	r3, [pc, #80]	; (810ccd0 <vPortFree+0xb8>)
 810cc80:	681b      	ldr	r3, [r3, #0]
 810cc82:	4013      	ands	r3, r2
 810cc84:	2b00      	cmp	r3, #0
 810cc86:	d01e      	beq.n	810ccc6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810cc88:	693b      	ldr	r3, [r7, #16]
 810cc8a:	681b      	ldr	r3, [r3, #0]
 810cc8c:	2b00      	cmp	r3, #0
 810cc8e:	d11a      	bne.n	810ccc6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810cc90:	693b      	ldr	r3, [r7, #16]
 810cc92:	685a      	ldr	r2, [r3, #4]
 810cc94:	4b0e      	ldr	r3, [pc, #56]	; (810ccd0 <vPortFree+0xb8>)
 810cc96:	681b      	ldr	r3, [r3, #0]
 810cc98:	43db      	mvns	r3, r3
 810cc9a:	401a      	ands	r2, r3
 810cc9c:	693b      	ldr	r3, [r7, #16]
 810cc9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810cca0:	f001 fcc8 	bl	810e634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810cca4:	693b      	ldr	r3, [r7, #16]
 810cca6:	685a      	ldr	r2, [r3, #4]
 810cca8:	4b0a      	ldr	r3, [pc, #40]	; (810ccd4 <vPortFree+0xbc>)
 810ccaa:	681b      	ldr	r3, [r3, #0]
 810ccac:	4413      	add	r3, r2
 810ccae:	4a09      	ldr	r2, [pc, #36]	; (810ccd4 <vPortFree+0xbc>)
 810ccb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810ccb2:	6938      	ldr	r0, [r7, #16]
 810ccb4:	f000 f874 	bl	810cda0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810ccb8:	4b07      	ldr	r3, [pc, #28]	; (810ccd8 <vPortFree+0xc0>)
 810ccba:	681b      	ldr	r3, [r3, #0]
 810ccbc:	3301      	adds	r3, #1
 810ccbe:	4a06      	ldr	r2, [pc, #24]	; (810ccd8 <vPortFree+0xc0>)
 810ccc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810ccc2:	f001 fcc5 	bl	810e650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810ccc6:	bf00      	nop
 810ccc8:	3718      	adds	r7, #24
 810ccca:	46bd      	mov	sp, r7
 810cccc:	bd80      	pop	{r7, pc}
 810ccce:	bf00      	nop
 810ccd0:	100056d8 	.word	0x100056d8
 810ccd4:	100056c8 	.word	0x100056c8
 810ccd8:	100056d4 	.word	0x100056d4

0810ccdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810ccdc:	b480      	push	{r7}
 810ccde:	b085      	sub	sp, #20
 810cce0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810cce2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810cce6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810cce8:	4b27      	ldr	r3, [pc, #156]	; (810cd88 <prvHeapInit+0xac>)
 810ccea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810ccec:	68fb      	ldr	r3, [r7, #12]
 810ccee:	f003 0307 	and.w	r3, r3, #7
 810ccf2:	2b00      	cmp	r3, #0
 810ccf4:	d00c      	beq.n	810cd10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810ccf6:	68fb      	ldr	r3, [r7, #12]
 810ccf8:	3307      	adds	r3, #7
 810ccfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810ccfc:	68fb      	ldr	r3, [r7, #12]
 810ccfe:	f023 0307 	bic.w	r3, r3, #7
 810cd02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810cd04:	68ba      	ldr	r2, [r7, #8]
 810cd06:	68fb      	ldr	r3, [r7, #12]
 810cd08:	1ad3      	subs	r3, r2, r3
 810cd0a:	4a1f      	ldr	r2, [pc, #124]	; (810cd88 <prvHeapInit+0xac>)
 810cd0c:	4413      	add	r3, r2
 810cd0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810cd10:	68fb      	ldr	r3, [r7, #12]
 810cd12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810cd14:	4a1d      	ldr	r2, [pc, #116]	; (810cd8c <prvHeapInit+0xb0>)
 810cd16:	687b      	ldr	r3, [r7, #4]
 810cd18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810cd1a:	4b1c      	ldr	r3, [pc, #112]	; (810cd8c <prvHeapInit+0xb0>)
 810cd1c:	2200      	movs	r2, #0
 810cd1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810cd20:	687b      	ldr	r3, [r7, #4]
 810cd22:	68ba      	ldr	r2, [r7, #8]
 810cd24:	4413      	add	r3, r2
 810cd26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810cd28:	2208      	movs	r2, #8
 810cd2a:	68fb      	ldr	r3, [r7, #12]
 810cd2c:	1a9b      	subs	r3, r3, r2
 810cd2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810cd30:	68fb      	ldr	r3, [r7, #12]
 810cd32:	f023 0307 	bic.w	r3, r3, #7
 810cd36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810cd38:	68fb      	ldr	r3, [r7, #12]
 810cd3a:	4a15      	ldr	r2, [pc, #84]	; (810cd90 <prvHeapInit+0xb4>)
 810cd3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810cd3e:	4b14      	ldr	r3, [pc, #80]	; (810cd90 <prvHeapInit+0xb4>)
 810cd40:	681b      	ldr	r3, [r3, #0]
 810cd42:	2200      	movs	r2, #0
 810cd44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810cd46:	4b12      	ldr	r3, [pc, #72]	; (810cd90 <prvHeapInit+0xb4>)
 810cd48:	681b      	ldr	r3, [r3, #0]
 810cd4a:	2200      	movs	r2, #0
 810cd4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810cd4e:	687b      	ldr	r3, [r7, #4]
 810cd50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810cd52:	683b      	ldr	r3, [r7, #0]
 810cd54:	68fa      	ldr	r2, [r7, #12]
 810cd56:	1ad2      	subs	r2, r2, r3
 810cd58:	683b      	ldr	r3, [r7, #0]
 810cd5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810cd5c:	4b0c      	ldr	r3, [pc, #48]	; (810cd90 <prvHeapInit+0xb4>)
 810cd5e:	681a      	ldr	r2, [r3, #0]
 810cd60:	683b      	ldr	r3, [r7, #0]
 810cd62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810cd64:	683b      	ldr	r3, [r7, #0]
 810cd66:	685b      	ldr	r3, [r3, #4]
 810cd68:	4a0a      	ldr	r2, [pc, #40]	; (810cd94 <prvHeapInit+0xb8>)
 810cd6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810cd6c:	683b      	ldr	r3, [r7, #0]
 810cd6e:	685b      	ldr	r3, [r3, #4]
 810cd70:	4a09      	ldr	r2, [pc, #36]	; (810cd98 <prvHeapInit+0xbc>)
 810cd72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810cd74:	4b09      	ldr	r3, [pc, #36]	; (810cd9c <prvHeapInit+0xc0>)
 810cd76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810cd7a:	601a      	str	r2, [r3, #0]
}
 810cd7c:	bf00      	nop
 810cd7e:	3714      	adds	r7, #20
 810cd80:	46bd      	mov	sp, r7
 810cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd86:	4770      	bx	lr
 810cd88:	10001abc 	.word	0x10001abc
 810cd8c:	100056bc 	.word	0x100056bc
 810cd90:	100056c4 	.word	0x100056c4
 810cd94:	100056cc 	.word	0x100056cc
 810cd98:	100056c8 	.word	0x100056c8
 810cd9c:	100056d8 	.word	0x100056d8

0810cda0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810cda0:	b480      	push	{r7}
 810cda2:	b085      	sub	sp, #20
 810cda4:	af00      	add	r7, sp, #0
 810cda6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810cda8:	4b28      	ldr	r3, [pc, #160]	; (810ce4c <prvInsertBlockIntoFreeList+0xac>)
 810cdaa:	60fb      	str	r3, [r7, #12]
 810cdac:	e002      	b.n	810cdb4 <prvInsertBlockIntoFreeList+0x14>
 810cdae:	68fb      	ldr	r3, [r7, #12]
 810cdb0:	681b      	ldr	r3, [r3, #0]
 810cdb2:	60fb      	str	r3, [r7, #12]
 810cdb4:	68fb      	ldr	r3, [r7, #12]
 810cdb6:	681b      	ldr	r3, [r3, #0]
 810cdb8:	687a      	ldr	r2, [r7, #4]
 810cdba:	429a      	cmp	r2, r3
 810cdbc:	d8f7      	bhi.n	810cdae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810cdbe:	68fb      	ldr	r3, [r7, #12]
 810cdc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810cdc2:	68fb      	ldr	r3, [r7, #12]
 810cdc4:	685b      	ldr	r3, [r3, #4]
 810cdc6:	68ba      	ldr	r2, [r7, #8]
 810cdc8:	4413      	add	r3, r2
 810cdca:	687a      	ldr	r2, [r7, #4]
 810cdcc:	429a      	cmp	r2, r3
 810cdce:	d108      	bne.n	810cde2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810cdd0:	68fb      	ldr	r3, [r7, #12]
 810cdd2:	685a      	ldr	r2, [r3, #4]
 810cdd4:	687b      	ldr	r3, [r7, #4]
 810cdd6:	685b      	ldr	r3, [r3, #4]
 810cdd8:	441a      	add	r2, r3
 810cdda:	68fb      	ldr	r3, [r7, #12]
 810cddc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810cdde:	68fb      	ldr	r3, [r7, #12]
 810cde0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810cde2:	687b      	ldr	r3, [r7, #4]
 810cde4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810cde6:	687b      	ldr	r3, [r7, #4]
 810cde8:	685b      	ldr	r3, [r3, #4]
 810cdea:	68ba      	ldr	r2, [r7, #8]
 810cdec:	441a      	add	r2, r3
 810cdee:	68fb      	ldr	r3, [r7, #12]
 810cdf0:	681b      	ldr	r3, [r3, #0]
 810cdf2:	429a      	cmp	r2, r3
 810cdf4:	d118      	bne.n	810ce28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810cdf6:	68fb      	ldr	r3, [r7, #12]
 810cdf8:	681a      	ldr	r2, [r3, #0]
 810cdfa:	4b15      	ldr	r3, [pc, #84]	; (810ce50 <prvInsertBlockIntoFreeList+0xb0>)
 810cdfc:	681b      	ldr	r3, [r3, #0]
 810cdfe:	429a      	cmp	r2, r3
 810ce00:	d00d      	beq.n	810ce1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810ce02:	687b      	ldr	r3, [r7, #4]
 810ce04:	685a      	ldr	r2, [r3, #4]
 810ce06:	68fb      	ldr	r3, [r7, #12]
 810ce08:	681b      	ldr	r3, [r3, #0]
 810ce0a:	685b      	ldr	r3, [r3, #4]
 810ce0c:	441a      	add	r2, r3
 810ce0e:	687b      	ldr	r3, [r7, #4]
 810ce10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810ce12:	68fb      	ldr	r3, [r7, #12]
 810ce14:	681b      	ldr	r3, [r3, #0]
 810ce16:	681a      	ldr	r2, [r3, #0]
 810ce18:	687b      	ldr	r3, [r7, #4]
 810ce1a:	601a      	str	r2, [r3, #0]
 810ce1c:	e008      	b.n	810ce30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810ce1e:	4b0c      	ldr	r3, [pc, #48]	; (810ce50 <prvInsertBlockIntoFreeList+0xb0>)
 810ce20:	681a      	ldr	r2, [r3, #0]
 810ce22:	687b      	ldr	r3, [r7, #4]
 810ce24:	601a      	str	r2, [r3, #0]
 810ce26:	e003      	b.n	810ce30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810ce28:	68fb      	ldr	r3, [r7, #12]
 810ce2a:	681a      	ldr	r2, [r3, #0]
 810ce2c:	687b      	ldr	r3, [r7, #4]
 810ce2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810ce30:	68fa      	ldr	r2, [r7, #12]
 810ce32:	687b      	ldr	r3, [r7, #4]
 810ce34:	429a      	cmp	r2, r3
 810ce36:	d002      	beq.n	810ce3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810ce38:	68fb      	ldr	r3, [r7, #12]
 810ce3a:	687a      	ldr	r2, [r7, #4]
 810ce3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810ce3e:	bf00      	nop
 810ce40:	3714      	adds	r7, #20
 810ce42:	46bd      	mov	sp, r7
 810ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce48:	4770      	bx	lr
 810ce4a:	bf00      	nop
 810ce4c:	100056bc 	.word	0x100056bc
 810ce50:	100056c4 	.word	0x100056c4

0810ce54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810ce54:	b480      	push	{r7}
 810ce56:	b083      	sub	sp, #12
 810ce58:	af00      	add	r7, sp, #0
 810ce5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810ce5c:	687b      	ldr	r3, [r7, #4]
 810ce5e:	f103 0208 	add.w	r2, r3, #8
 810ce62:	687b      	ldr	r3, [r7, #4]
 810ce64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810ce66:	687b      	ldr	r3, [r7, #4]
 810ce68:	f04f 32ff 	mov.w	r2, #4294967295
 810ce6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810ce6e:	687b      	ldr	r3, [r7, #4]
 810ce70:	f103 0208 	add.w	r2, r3, #8
 810ce74:	687b      	ldr	r3, [r7, #4]
 810ce76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810ce78:	687b      	ldr	r3, [r7, #4]
 810ce7a:	f103 0208 	add.w	r2, r3, #8
 810ce7e:	687b      	ldr	r3, [r7, #4]
 810ce80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810ce82:	687b      	ldr	r3, [r7, #4]
 810ce84:	2200      	movs	r2, #0
 810ce86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810ce88:	bf00      	nop
 810ce8a:	370c      	adds	r7, #12
 810ce8c:	46bd      	mov	sp, r7
 810ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce92:	4770      	bx	lr

0810ce94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810ce94:	b480      	push	{r7}
 810ce96:	b083      	sub	sp, #12
 810ce98:	af00      	add	r7, sp, #0
 810ce9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810ce9c:	687b      	ldr	r3, [r7, #4]
 810ce9e:	2200      	movs	r2, #0
 810cea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810cea2:	bf00      	nop
 810cea4:	370c      	adds	r7, #12
 810cea6:	46bd      	mov	sp, r7
 810cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ceac:	4770      	bx	lr

0810ceae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810ceae:	b480      	push	{r7}
 810ceb0:	b085      	sub	sp, #20
 810ceb2:	af00      	add	r7, sp, #0
 810ceb4:	6078      	str	r0, [r7, #4]
 810ceb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810ceb8:	687b      	ldr	r3, [r7, #4]
 810ceba:	685b      	ldr	r3, [r3, #4]
 810cebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810cebe:	683b      	ldr	r3, [r7, #0]
 810cec0:	68fa      	ldr	r2, [r7, #12]
 810cec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810cec4:	68fb      	ldr	r3, [r7, #12]
 810cec6:	689a      	ldr	r2, [r3, #8]
 810cec8:	683b      	ldr	r3, [r7, #0]
 810ceca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810cecc:	68fb      	ldr	r3, [r7, #12]
 810cece:	689b      	ldr	r3, [r3, #8]
 810ced0:	683a      	ldr	r2, [r7, #0]
 810ced2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810ced4:	68fb      	ldr	r3, [r7, #12]
 810ced6:	683a      	ldr	r2, [r7, #0]
 810ced8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810ceda:	683b      	ldr	r3, [r7, #0]
 810cedc:	687a      	ldr	r2, [r7, #4]
 810cede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810cee0:	687b      	ldr	r3, [r7, #4]
 810cee2:	681b      	ldr	r3, [r3, #0]
 810cee4:	1c5a      	adds	r2, r3, #1
 810cee6:	687b      	ldr	r3, [r7, #4]
 810cee8:	601a      	str	r2, [r3, #0]
}
 810ceea:	bf00      	nop
 810ceec:	3714      	adds	r7, #20
 810ceee:	46bd      	mov	sp, r7
 810cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cef4:	4770      	bx	lr

0810cef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810cef6:	b480      	push	{r7}
 810cef8:	b085      	sub	sp, #20
 810cefa:	af00      	add	r7, sp, #0
 810cefc:	6078      	str	r0, [r7, #4]
 810cefe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810cf00:	683b      	ldr	r3, [r7, #0]
 810cf02:	681b      	ldr	r3, [r3, #0]
 810cf04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810cf06:	68bb      	ldr	r3, [r7, #8]
 810cf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf0c:	d103      	bne.n	810cf16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810cf0e:	687b      	ldr	r3, [r7, #4]
 810cf10:	691b      	ldr	r3, [r3, #16]
 810cf12:	60fb      	str	r3, [r7, #12]
 810cf14:	e00c      	b.n	810cf30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810cf16:	687b      	ldr	r3, [r7, #4]
 810cf18:	3308      	adds	r3, #8
 810cf1a:	60fb      	str	r3, [r7, #12]
 810cf1c:	e002      	b.n	810cf24 <vListInsert+0x2e>
 810cf1e:	68fb      	ldr	r3, [r7, #12]
 810cf20:	685b      	ldr	r3, [r3, #4]
 810cf22:	60fb      	str	r3, [r7, #12]
 810cf24:	68fb      	ldr	r3, [r7, #12]
 810cf26:	685b      	ldr	r3, [r3, #4]
 810cf28:	681b      	ldr	r3, [r3, #0]
 810cf2a:	68ba      	ldr	r2, [r7, #8]
 810cf2c:	429a      	cmp	r2, r3
 810cf2e:	d2f6      	bcs.n	810cf1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810cf30:	68fb      	ldr	r3, [r7, #12]
 810cf32:	685a      	ldr	r2, [r3, #4]
 810cf34:	683b      	ldr	r3, [r7, #0]
 810cf36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810cf38:	683b      	ldr	r3, [r7, #0]
 810cf3a:	685b      	ldr	r3, [r3, #4]
 810cf3c:	683a      	ldr	r2, [r7, #0]
 810cf3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810cf40:	683b      	ldr	r3, [r7, #0]
 810cf42:	68fa      	ldr	r2, [r7, #12]
 810cf44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810cf46:	68fb      	ldr	r3, [r7, #12]
 810cf48:	683a      	ldr	r2, [r7, #0]
 810cf4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810cf4c:	683b      	ldr	r3, [r7, #0]
 810cf4e:	687a      	ldr	r2, [r7, #4]
 810cf50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810cf52:	687b      	ldr	r3, [r7, #4]
 810cf54:	681b      	ldr	r3, [r3, #0]
 810cf56:	1c5a      	adds	r2, r3, #1
 810cf58:	687b      	ldr	r3, [r7, #4]
 810cf5a:	601a      	str	r2, [r3, #0]
}
 810cf5c:	bf00      	nop
 810cf5e:	3714      	adds	r7, #20
 810cf60:	46bd      	mov	sp, r7
 810cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf66:	4770      	bx	lr

0810cf68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810cf68:	b480      	push	{r7}
 810cf6a:	b085      	sub	sp, #20
 810cf6c:	af00      	add	r7, sp, #0
 810cf6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810cf70:	687b      	ldr	r3, [r7, #4]
 810cf72:	691b      	ldr	r3, [r3, #16]
 810cf74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810cf76:	687b      	ldr	r3, [r7, #4]
 810cf78:	685b      	ldr	r3, [r3, #4]
 810cf7a:	687a      	ldr	r2, [r7, #4]
 810cf7c:	6892      	ldr	r2, [r2, #8]
 810cf7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810cf80:	687b      	ldr	r3, [r7, #4]
 810cf82:	689b      	ldr	r3, [r3, #8]
 810cf84:	687a      	ldr	r2, [r7, #4]
 810cf86:	6852      	ldr	r2, [r2, #4]
 810cf88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810cf8a:	68fb      	ldr	r3, [r7, #12]
 810cf8c:	685b      	ldr	r3, [r3, #4]
 810cf8e:	687a      	ldr	r2, [r7, #4]
 810cf90:	429a      	cmp	r2, r3
 810cf92:	d103      	bne.n	810cf9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810cf94:	687b      	ldr	r3, [r7, #4]
 810cf96:	689a      	ldr	r2, [r3, #8]
 810cf98:	68fb      	ldr	r3, [r7, #12]
 810cf9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810cf9c:	687b      	ldr	r3, [r7, #4]
 810cf9e:	2200      	movs	r2, #0
 810cfa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810cfa2:	68fb      	ldr	r3, [r7, #12]
 810cfa4:	681b      	ldr	r3, [r3, #0]
 810cfa6:	1e5a      	subs	r2, r3, #1
 810cfa8:	68fb      	ldr	r3, [r7, #12]
 810cfaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810cfac:	68fb      	ldr	r3, [r7, #12]
 810cfae:	681b      	ldr	r3, [r3, #0]
}
 810cfb0:	4618      	mov	r0, r3
 810cfb2:	3714      	adds	r7, #20
 810cfb4:	46bd      	mov	sp, r7
 810cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfba:	4770      	bx	lr

0810cfbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810cfbc:	b480      	push	{r7}
 810cfbe:	b085      	sub	sp, #20
 810cfc0:	af00      	add	r7, sp, #0
 810cfc2:	60f8      	str	r0, [r7, #12]
 810cfc4:	60b9      	str	r1, [r7, #8]
 810cfc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810cfc8:	68fb      	ldr	r3, [r7, #12]
 810cfca:	3b04      	subs	r3, #4
 810cfcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810cfce:	68fb      	ldr	r3, [r7, #12]
 810cfd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810cfd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810cfd6:	68fb      	ldr	r3, [r7, #12]
 810cfd8:	3b04      	subs	r3, #4
 810cfda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810cfdc:	68bb      	ldr	r3, [r7, #8]
 810cfde:	f023 0201 	bic.w	r2, r3, #1
 810cfe2:	68fb      	ldr	r3, [r7, #12]
 810cfe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810cfe6:	68fb      	ldr	r3, [r7, #12]
 810cfe8:	3b04      	subs	r3, #4
 810cfea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810cfec:	4a0c      	ldr	r2, [pc, #48]	; (810d020 <pxPortInitialiseStack+0x64>)
 810cfee:	68fb      	ldr	r3, [r7, #12]
 810cff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810cff2:	68fb      	ldr	r3, [r7, #12]
 810cff4:	3b14      	subs	r3, #20
 810cff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810cff8:	687a      	ldr	r2, [r7, #4]
 810cffa:	68fb      	ldr	r3, [r7, #12]
 810cffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810cffe:	68fb      	ldr	r3, [r7, #12]
 810d000:	3b04      	subs	r3, #4
 810d002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810d004:	68fb      	ldr	r3, [r7, #12]
 810d006:	f06f 0202 	mvn.w	r2, #2
 810d00a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810d00c:	68fb      	ldr	r3, [r7, #12]
 810d00e:	3b20      	subs	r3, #32
 810d010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810d012:	68fb      	ldr	r3, [r7, #12]
}
 810d014:	4618      	mov	r0, r3
 810d016:	3714      	adds	r7, #20
 810d018:	46bd      	mov	sp, r7
 810d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d01e:	4770      	bx	lr
 810d020:	0810d025 	.word	0x0810d025

0810d024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810d024:	b480      	push	{r7}
 810d026:	b085      	sub	sp, #20
 810d028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810d02a:	2300      	movs	r3, #0
 810d02c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810d02e:	4b12      	ldr	r3, [pc, #72]	; (810d078 <prvTaskExitError+0x54>)
 810d030:	681b      	ldr	r3, [r3, #0]
 810d032:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d036:	d00a      	beq.n	810d04e <prvTaskExitError+0x2a>
	__asm volatile
 810d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d03c:	f383 8811 	msr	BASEPRI, r3
 810d040:	f3bf 8f6f 	isb	sy
 810d044:	f3bf 8f4f 	dsb	sy
 810d048:	60fb      	str	r3, [r7, #12]
}
 810d04a:	bf00      	nop
 810d04c:	e7fe      	b.n	810d04c <prvTaskExitError+0x28>
	__asm volatile
 810d04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d052:	f383 8811 	msr	BASEPRI, r3
 810d056:	f3bf 8f6f 	isb	sy
 810d05a:	f3bf 8f4f 	dsb	sy
 810d05e:	60bb      	str	r3, [r7, #8]
}
 810d060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810d062:	bf00      	nop
 810d064:	687b      	ldr	r3, [r7, #4]
 810d066:	2b00      	cmp	r3, #0
 810d068:	d0fc      	beq.n	810d064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810d06a:	bf00      	nop
 810d06c:	bf00      	nop
 810d06e:	3714      	adds	r7, #20
 810d070:	46bd      	mov	sp, r7
 810d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d076:	4770      	bx	lr
 810d078:	10000010 	.word	0x10000010
 810d07c:	00000000 	.word	0x00000000

0810d080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810d080:	4b07      	ldr	r3, [pc, #28]	; (810d0a0 <pxCurrentTCBConst2>)
 810d082:	6819      	ldr	r1, [r3, #0]
 810d084:	6808      	ldr	r0, [r1, #0]
 810d086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d08a:	f380 8809 	msr	PSP, r0
 810d08e:	f3bf 8f6f 	isb	sy
 810d092:	f04f 0000 	mov.w	r0, #0
 810d096:	f380 8811 	msr	BASEPRI, r0
 810d09a:	4770      	bx	lr
 810d09c:	f3af 8000 	nop.w

0810d0a0 <pxCurrentTCBConst2>:
 810d0a0:	100056e4 	.word	0x100056e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810d0a4:	bf00      	nop
 810d0a6:	bf00      	nop

0810d0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810d0a8:	4808      	ldr	r0, [pc, #32]	; (810d0cc <prvPortStartFirstTask+0x24>)
 810d0aa:	6800      	ldr	r0, [r0, #0]
 810d0ac:	6800      	ldr	r0, [r0, #0]
 810d0ae:	f380 8808 	msr	MSP, r0
 810d0b2:	f04f 0000 	mov.w	r0, #0
 810d0b6:	f380 8814 	msr	CONTROL, r0
 810d0ba:	b662      	cpsie	i
 810d0bc:	b661      	cpsie	f
 810d0be:	f3bf 8f4f 	dsb	sy
 810d0c2:	f3bf 8f6f 	isb	sy
 810d0c6:	df00      	svc	0
 810d0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810d0ca:	bf00      	nop
 810d0cc:	e000ed08 	.word	0xe000ed08

0810d0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810d0d0:	b580      	push	{r7, lr}
 810d0d2:	b086      	sub	sp, #24
 810d0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810d0d6:	4b46      	ldr	r3, [pc, #280]	; (810d1f0 <xPortStartScheduler+0x120>)
 810d0d8:	681b      	ldr	r3, [r3, #0]
 810d0da:	4a46      	ldr	r2, [pc, #280]	; (810d1f4 <xPortStartScheduler+0x124>)
 810d0dc:	4293      	cmp	r3, r2
 810d0de:	d10a      	bne.n	810d0f6 <xPortStartScheduler+0x26>
	__asm volatile
 810d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d0e4:	f383 8811 	msr	BASEPRI, r3
 810d0e8:	f3bf 8f6f 	isb	sy
 810d0ec:	f3bf 8f4f 	dsb	sy
 810d0f0:	613b      	str	r3, [r7, #16]
}
 810d0f2:	bf00      	nop
 810d0f4:	e7fe      	b.n	810d0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810d0f6:	4b3e      	ldr	r3, [pc, #248]	; (810d1f0 <xPortStartScheduler+0x120>)
 810d0f8:	681b      	ldr	r3, [r3, #0]
 810d0fa:	4a3f      	ldr	r2, [pc, #252]	; (810d1f8 <xPortStartScheduler+0x128>)
 810d0fc:	4293      	cmp	r3, r2
 810d0fe:	d10a      	bne.n	810d116 <xPortStartScheduler+0x46>
	__asm volatile
 810d100:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d104:	f383 8811 	msr	BASEPRI, r3
 810d108:	f3bf 8f6f 	isb	sy
 810d10c:	f3bf 8f4f 	dsb	sy
 810d110:	60fb      	str	r3, [r7, #12]
}
 810d112:	bf00      	nop
 810d114:	e7fe      	b.n	810d114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810d116:	4b39      	ldr	r3, [pc, #228]	; (810d1fc <xPortStartScheduler+0x12c>)
 810d118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810d11a:	697b      	ldr	r3, [r7, #20]
 810d11c:	781b      	ldrb	r3, [r3, #0]
 810d11e:	b2db      	uxtb	r3, r3
 810d120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810d122:	697b      	ldr	r3, [r7, #20]
 810d124:	22ff      	movs	r2, #255	; 0xff
 810d126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810d128:	697b      	ldr	r3, [r7, #20]
 810d12a:	781b      	ldrb	r3, [r3, #0]
 810d12c:	b2db      	uxtb	r3, r3
 810d12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810d130:	78fb      	ldrb	r3, [r7, #3]
 810d132:	b2db      	uxtb	r3, r3
 810d134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 810d138:	b2da      	uxtb	r2, r3
 810d13a:	4b31      	ldr	r3, [pc, #196]	; (810d200 <xPortStartScheduler+0x130>)
 810d13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810d13e:	4b31      	ldr	r3, [pc, #196]	; (810d204 <xPortStartScheduler+0x134>)
 810d140:	2207      	movs	r2, #7
 810d142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d144:	e009      	b.n	810d15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 810d146:	4b2f      	ldr	r3, [pc, #188]	; (810d204 <xPortStartScheduler+0x134>)
 810d148:	681b      	ldr	r3, [r3, #0]
 810d14a:	3b01      	subs	r3, #1
 810d14c:	4a2d      	ldr	r2, [pc, #180]	; (810d204 <xPortStartScheduler+0x134>)
 810d14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810d150:	78fb      	ldrb	r3, [r7, #3]
 810d152:	b2db      	uxtb	r3, r3
 810d154:	005b      	lsls	r3, r3, #1
 810d156:	b2db      	uxtb	r3, r3
 810d158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d15a:	78fb      	ldrb	r3, [r7, #3]
 810d15c:	b2db      	uxtb	r3, r3
 810d15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d162:	2b80      	cmp	r3, #128	; 0x80
 810d164:	d0ef      	beq.n	810d146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810d166:	4b27      	ldr	r3, [pc, #156]	; (810d204 <xPortStartScheduler+0x134>)
 810d168:	681b      	ldr	r3, [r3, #0]
 810d16a:	f1c3 0307 	rsb	r3, r3, #7
 810d16e:	2b04      	cmp	r3, #4
 810d170:	d00a      	beq.n	810d188 <xPortStartScheduler+0xb8>
	__asm volatile
 810d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d176:	f383 8811 	msr	BASEPRI, r3
 810d17a:	f3bf 8f6f 	isb	sy
 810d17e:	f3bf 8f4f 	dsb	sy
 810d182:	60bb      	str	r3, [r7, #8]
}
 810d184:	bf00      	nop
 810d186:	e7fe      	b.n	810d186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810d188:	4b1e      	ldr	r3, [pc, #120]	; (810d204 <xPortStartScheduler+0x134>)
 810d18a:	681b      	ldr	r3, [r3, #0]
 810d18c:	021b      	lsls	r3, r3, #8
 810d18e:	4a1d      	ldr	r2, [pc, #116]	; (810d204 <xPortStartScheduler+0x134>)
 810d190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810d192:	4b1c      	ldr	r3, [pc, #112]	; (810d204 <xPortStartScheduler+0x134>)
 810d194:	681b      	ldr	r3, [r3, #0]
 810d196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810d19a:	4a1a      	ldr	r2, [pc, #104]	; (810d204 <xPortStartScheduler+0x134>)
 810d19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810d19e:	687b      	ldr	r3, [r7, #4]
 810d1a0:	b2da      	uxtb	r2, r3
 810d1a2:	697b      	ldr	r3, [r7, #20]
 810d1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810d1a6:	4b18      	ldr	r3, [pc, #96]	; (810d208 <xPortStartScheduler+0x138>)
 810d1a8:	681b      	ldr	r3, [r3, #0]
 810d1aa:	4a17      	ldr	r2, [pc, #92]	; (810d208 <xPortStartScheduler+0x138>)
 810d1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810d1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810d1b2:	4b15      	ldr	r3, [pc, #84]	; (810d208 <xPortStartScheduler+0x138>)
 810d1b4:	681b      	ldr	r3, [r3, #0]
 810d1b6:	4a14      	ldr	r2, [pc, #80]	; (810d208 <xPortStartScheduler+0x138>)
 810d1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810d1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810d1be:	f000 f8dd 	bl	810d37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810d1c2:	4b12      	ldr	r3, [pc, #72]	; (810d20c <xPortStartScheduler+0x13c>)
 810d1c4:	2200      	movs	r2, #0
 810d1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810d1c8:	f000 f8fc 	bl	810d3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810d1cc:	4b10      	ldr	r3, [pc, #64]	; (810d210 <xPortStartScheduler+0x140>)
 810d1ce:	681b      	ldr	r3, [r3, #0]
 810d1d0:	4a0f      	ldr	r2, [pc, #60]	; (810d210 <xPortStartScheduler+0x140>)
 810d1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 810d1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810d1d8:	f7ff ff66 	bl	810d0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810d1dc:	f001 fbae 	bl	810e93c <vTaskSwitchContext>
	prvTaskExitError();
 810d1e0:	f7ff ff20 	bl	810d024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810d1e4:	2300      	movs	r3, #0
}
 810d1e6:	4618      	mov	r0, r3
 810d1e8:	3718      	adds	r7, #24
 810d1ea:	46bd      	mov	sp, r7
 810d1ec:	bd80      	pop	{r7, pc}
 810d1ee:	bf00      	nop
 810d1f0:	e000ed00 	.word	0xe000ed00
 810d1f4:	410fc271 	.word	0x410fc271
 810d1f8:	410fc270 	.word	0x410fc270
 810d1fc:	e000e400 	.word	0xe000e400
 810d200:	100056dc 	.word	0x100056dc
 810d204:	100056e0 	.word	0x100056e0
 810d208:	e000ed20 	.word	0xe000ed20
 810d20c:	10000010 	.word	0x10000010
 810d210:	e000ef34 	.word	0xe000ef34

0810d214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810d214:	b480      	push	{r7}
 810d216:	b083      	sub	sp, #12
 810d218:	af00      	add	r7, sp, #0
	__asm volatile
 810d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d21e:	f383 8811 	msr	BASEPRI, r3
 810d222:	f3bf 8f6f 	isb	sy
 810d226:	f3bf 8f4f 	dsb	sy
 810d22a:	607b      	str	r3, [r7, #4]
}
 810d22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810d22e:	4b0f      	ldr	r3, [pc, #60]	; (810d26c <vPortEnterCritical+0x58>)
 810d230:	681b      	ldr	r3, [r3, #0]
 810d232:	3301      	adds	r3, #1
 810d234:	4a0d      	ldr	r2, [pc, #52]	; (810d26c <vPortEnterCritical+0x58>)
 810d236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810d238:	4b0c      	ldr	r3, [pc, #48]	; (810d26c <vPortEnterCritical+0x58>)
 810d23a:	681b      	ldr	r3, [r3, #0]
 810d23c:	2b01      	cmp	r3, #1
 810d23e:	d10f      	bne.n	810d260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810d240:	4b0b      	ldr	r3, [pc, #44]	; (810d270 <vPortEnterCritical+0x5c>)
 810d242:	681b      	ldr	r3, [r3, #0]
 810d244:	b2db      	uxtb	r3, r3
 810d246:	2b00      	cmp	r3, #0
 810d248:	d00a      	beq.n	810d260 <vPortEnterCritical+0x4c>
	__asm volatile
 810d24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d24e:	f383 8811 	msr	BASEPRI, r3
 810d252:	f3bf 8f6f 	isb	sy
 810d256:	f3bf 8f4f 	dsb	sy
 810d25a:	603b      	str	r3, [r7, #0]
}
 810d25c:	bf00      	nop
 810d25e:	e7fe      	b.n	810d25e <vPortEnterCritical+0x4a>
	}
}
 810d260:	bf00      	nop
 810d262:	370c      	adds	r7, #12
 810d264:	46bd      	mov	sp, r7
 810d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d26a:	4770      	bx	lr
 810d26c:	10000010 	.word	0x10000010
 810d270:	e000ed04 	.word	0xe000ed04

0810d274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810d274:	b480      	push	{r7}
 810d276:	b083      	sub	sp, #12
 810d278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810d27a:	4b12      	ldr	r3, [pc, #72]	; (810d2c4 <vPortExitCritical+0x50>)
 810d27c:	681b      	ldr	r3, [r3, #0]
 810d27e:	2b00      	cmp	r3, #0
 810d280:	d10a      	bne.n	810d298 <vPortExitCritical+0x24>
	__asm volatile
 810d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d286:	f383 8811 	msr	BASEPRI, r3
 810d28a:	f3bf 8f6f 	isb	sy
 810d28e:	f3bf 8f4f 	dsb	sy
 810d292:	607b      	str	r3, [r7, #4]
}
 810d294:	bf00      	nop
 810d296:	e7fe      	b.n	810d296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810d298:	4b0a      	ldr	r3, [pc, #40]	; (810d2c4 <vPortExitCritical+0x50>)
 810d29a:	681b      	ldr	r3, [r3, #0]
 810d29c:	3b01      	subs	r3, #1
 810d29e:	4a09      	ldr	r2, [pc, #36]	; (810d2c4 <vPortExitCritical+0x50>)
 810d2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810d2a2:	4b08      	ldr	r3, [pc, #32]	; (810d2c4 <vPortExitCritical+0x50>)
 810d2a4:	681b      	ldr	r3, [r3, #0]
 810d2a6:	2b00      	cmp	r3, #0
 810d2a8:	d105      	bne.n	810d2b6 <vPortExitCritical+0x42>
 810d2aa:	2300      	movs	r3, #0
 810d2ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810d2ae:	683b      	ldr	r3, [r7, #0]
 810d2b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810d2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810d2b6:	bf00      	nop
 810d2b8:	370c      	adds	r7, #12
 810d2ba:	46bd      	mov	sp, r7
 810d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2c0:	4770      	bx	lr
 810d2c2:	bf00      	nop
 810d2c4:	10000010 	.word	0x10000010
	...

0810d2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810d2d0:	f3ef 8009 	mrs	r0, PSP
 810d2d4:	f3bf 8f6f 	isb	sy
 810d2d8:	4b15      	ldr	r3, [pc, #84]	; (810d330 <pxCurrentTCBConst>)
 810d2da:	681a      	ldr	r2, [r3, #0]
 810d2dc:	f01e 0f10 	tst.w	lr, #16
 810d2e0:	bf08      	it	eq
 810d2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810d2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d2ea:	6010      	str	r0, [r2, #0]
 810d2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 810d2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 810d2f4:	f380 8811 	msr	BASEPRI, r0
 810d2f8:	f3bf 8f4f 	dsb	sy
 810d2fc:	f3bf 8f6f 	isb	sy
 810d300:	f001 fb1c 	bl	810e93c <vTaskSwitchContext>
 810d304:	f04f 0000 	mov.w	r0, #0
 810d308:	f380 8811 	msr	BASEPRI, r0
 810d30c:	bc09      	pop	{r0, r3}
 810d30e:	6819      	ldr	r1, [r3, #0]
 810d310:	6808      	ldr	r0, [r1, #0]
 810d312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d316:	f01e 0f10 	tst.w	lr, #16
 810d31a:	bf08      	it	eq
 810d31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810d320:	f380 8809 	msr	PSP, r0
 810d324:	f3bf 8f6f 	isb	sy
 810d328:	4770      	bx	lr
 810d32a:	bf00      	nop
 810d32c:	f3af 8000 	nop.w

0810d330 <pxCurrentTCBConst>:
 810d330:	100056e4 	.word	0x100056e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810d334:	bf00      	nop
 810d336:	bf00      	nop

0810d338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810d338:	b580      	push	{r7, lr}
 810d33a:	b082      	sub	sp, #8
 810d33c:	af00      	add	r7, sp, #0
	__asm volatile
 810d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d342:	f383 8811 	msr	BASEPRI, r3
 810d346:	f3bf 8f6f 	isb	sy
 810d34a:	f3bf 8f4f 	dsb	sy
 810d34e:	607b      	str	r3, [r7, #4]
}
 810d350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810d352:	f001 fa3b 	bl	810e7cc <xTaskIncrementTick>
 810d356:	4603      	mov	r3, r0
 810d358:	2b00      	cmp	r3, #0
 810d35a:	d003      	beq.n	810d364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810d35c:	4b06      	ldr	r3, [pc, #24]	; (810d378 <SysTick_Handler+0x40>)
 810d35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d362:	601a      	str	r2, [r3, #0]
 810d364:	2300      	movs	r3, #0
 810d366:	603b      	str	r3, [r7, #0]
	__asm volatile
 810d368:	683b      	ldr	r3, [r7, #0]
 810d36a:	f383 8811 	msr	BASEPRI, r3
}
 810d36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810d370:	bf00      	nop
 810d372:	3708      	adds	r7, #8
 810d374:	46bd      	mov	sp, r7
 810d376:	bd80      	pop	{r7, pc}
 810d378:	e000ed04 	.word	0xe000ed04

0810d37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810d37c:	b480      	push	{r7}
 810d37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810d380:	4b0b      	ldr	r3, [pc, #44]	; (810d3b0 <vPortSetupTimerInterrupt+0x34>)
 810d382:	2200      	movs	r2, #0
 810d384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810d386:	4b0b      	ldr	r3, [pc, #44]	; (810d3b4 <vPortSetupTimerInterrupt+0x38>)
 810d388:	2200      	movs	r2, #0
 810d38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810d38c:	4b0a      	ldr	r3, [pc, #40]	; (810d3b8 <vPortSetupTimerInterrupt+0x3c>)
 810d38e:	681b      	ldr	r3, [r3, #0]
 810d390:	4a0a      	ldr	r2, [pc, #40]	; (810d3bc <vPortSetupTimerInterrupt+0x40>)
 810d392:	fba2 2303 	umull	r2, r3, r2, r3
 810d396:	099b      	lsrs	r3, r3, #6
 810d398:	4a09      	ldr	r2, [pc, #36]	; (810d3c0 <vPortSetupTimerInterrupt+0x44>)
 810d39a:	3b01      	subs	r3, #1
 810d39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810d39e:	4b04      	ldr	r3, [pc, #16]	; (810d3b0 <vPortSetupTimerInterrupt+0x34>)
 810d3a0:	2207      	movs	r2, #7
 810d3a2:	601a      	str	r2, [r3, #0]
}
 810d3a4:	bf00      	nop
 810d3a6:	46bd      	mov	sp, r7
 810d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3ac:	4770      	bx	lr
 810d3ae:	bf00      	nop
 810d3b0:	e000e010 	.word	0xe000e010
 810d3b4:	e000e018 	.word	0xe000e018
 810d3b8:	10000004 	.word	0x10000004
 810d3bc:	10624dd3 	.word	0x10624dd3
 810d3c0:	e000e014 	.word	0xe000e014

0810d3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810d3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810d3d4 <vPortEnableVFP+0x10>
 810d3c8:	6801      	ldr	r1, [r0, #0]
 810d3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810d3ce:	6001      	str	r1, [r0, #0]
 810d3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810d3d2:	bf00      	nop
 810d3d4:	e000ed88 	.word	0xe000ed88

0810d3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810d3d8:	b480      	push	{r7}
 810d3da:	b085      	sub	sp, #20
 810d3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810d3de:	f3ef 8305 	mrs	r3, IPSR
 810d3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810d3e4:	68fb      	ldr	r3, [r7, #12]
 810d3e6:	2b0f      	cmp	r3, #15
 810d3e8:	d914      	bls.n	810d414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810d3ea:	4a17      	ldr	r2, [pc, #92]	; (810d448 <vPortValidateInterruptPriority+0x70>)
 810d3ec:	68fb      	ldr	r3, [r7, #12]
 810d3ee:	4413      	add	r3, r2
 810d3f0:	781b      	ldrb	r3, [r3, #0]
 810d3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810d3f4:	4b15      	ldr	r3, [pc, #84]	; (810d44c <vPortValidateInterruptPriority+0x74>)
 810d3f6:	781b      	ldrb	r3, [r3, #0]
 810d3f8:	7afa      	ldrb	r2, [r7, #11]
 810d3fa:	429a      	cmp	r2, r3
 810d3fc:	d20a      	bcs.n	810d414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810d3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d402:	f383 8811 	msr	BASEPRI, r3
 810d406:	f3bf 8f6f 	isb	sy
 810d40a:	f3bf 8f4f 	dsb	sy
 810d40e:	607b      	str	r3, [r7, #4]
}
 810d410:	bf00      	nop
 810d412:	e7fe      	b.n	810d412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810d414:	4b0e      	ldr	r3, [pc, #56]	; (810d450 <vPortValidateInterruptPriority+0x78>)
 810d416:	681b      	ldr	r3, [r3, #0]
 810d418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810d41c:	4b0d      	ldr	r3, [pc, #52]	; (810d454 <vPortValidateInterruptPriority+0x7c>)
 810d41e:	681b      	ldr	r3, [r3, #0]
 810d420:	429a      	cmp	r2, r3
 810d422:	d90a      	bls.n	810d43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 810d424:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d428:	f383 8811 	msr	BASEPRI, r3
 810d42c:	f3bf 8f6f 	isb	sy
 810d430:	f3bf 8f4f 	dsb	sy
 810d434:	603b      	str	r3, [r7, #0]
}
 810d436:	bf00      	nop
 810d438:	e7fe      	b.n	810d438 <vPortValidateInterruptPriority+0x60>
	}
 810d43a:	bf00      	nop
 810d43c:	3714      	adds	r7, #20
 810d43e:	46bd      	mov	sp, r7
 810d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d444:	4770      	bx	lr
 810d446:	bf00      	nop
 810d448:	e000e3f0 	.word	0xe000e3f0
 810d44c:	100056dc 	.word	0x100056dc
 810d450:	e000ed0c 	.word	0xe000ed0c
 810d454:	100056e0 	.word	0x100056e0

0810d458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810d458:	b580      	push	{r7, lr}
 810d45a:	b084      	sub	sp, #16
 810d45c:	af00      	add	r7, sp, #0
 810d45e:	6078      	str	r0, [r7, #4]
 810d460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810d462:	687b      	ldr	r3, [r7, #4]
 810d464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810d466:	68fb      	ldr	r3, [r7, #12]
 810d468:	2b00      	cmp	r3, #0
 810d46a:	d10a      	bne.n	810d482 <xQueueGenericReset+0x2a>
	__asm volatile
 810d46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d470:	f383 8811 	msr	BASEPRI, r3
 810d474:	f3bf 8f6f 	isb	sy
 810d478:	f3bf 8f4f 	dsb	sy
 810d47c:	60bb      	str	r3, [r7, #8]
}
 810d47e:	bf00      	nop
 810d480:	e7fe      	b.n	810d480 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810d482:	f7ff fec7 	bl	810d214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d486:	68fb      	ldr	r3, [r7, #12]
 810d488:	681a      	ldr	r2, [r3, #0]
 810d48a:	68fb      	ldr	r3, [r7, #12]
 810d48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d48e:	68f9      	ldr	r1, [r7, #12]
 810d490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810d492:	fb01 f303 	mul.w	r3, r1, r3
 810d496:	441a      	add	r2, r3
 810d498:	68fb      	ldr	r3, [r7, #12]
 810d49a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810d49c:	68fb      	ldr	r3, [r7, #12]
 810d49e:	2200      	movs	r2, #0
 810d4a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810d4a2:	68fb      	ldr	r3, [r7, #12]
 810d4a4:	681a      	ldr	r2, [r3, #0]
 810d4a6:	68fb      	ldr	r3, [r7, #12]
 810d4a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d4aa:	68fb      	ldr	r3, [r7, #12]
 810d4ac:	681a      	ldr	r2, [r3, #0]
 810d4ae:	68fb      	ldr	r3, [r7, #12]
 810d4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d4b2:	3b01      	subs	r3, #1
 810d4b4:	68f9      	ldr	r1, [r7, #12]
 810d4b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810d4b8:	fb01 f303 	mul.w	r3, r1, r3
 810d4bc:	441a      	add	r2, r3
 810d4be:	68fb      	ldr	r3, [r7, #12]
 810d4c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810d4c2:	68fb      	ldr	r3, [r7, #12]
 810d4c4:	22ff      	movs	r2, #255	; 0xff
 810d4c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810d4ca:	68fb      	ldr	r3, [r7, #12]
 810d4cc:	22ff      	movs	r2, #255	; 0xff
 810d4ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810d4d2:	683b      	ldr	r3, [r7, #0]
 810d4d4:	2b00      	cmp	r3, #0
 810d4d6:	d114      	bne.n	810d502 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d4d8:	68fb      	ldr	r3, [r7, #12]
 810d4da:	691b      	ldr	r3, [r3, #16]
 810d4dc:	2b00      	cmp	r3, #0
 810d4de:	d01a      	beq.n	810d516 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d4e0:	68fb      	ldr	r3, [r7, #12]
 810d4e2:	3310      	adds	r3, #16
 810d4e4:	4618      	mov	r0, r3
 810d4e6:	f001 faaf 	bl	810ea48 <xTaskRemoveFromEventList>
 810d4ea:	4603      	mov	r3, r0
 810d4ec:	2b00      	cmp	r3, #0
 810d4ee:	d012      	beq.n	810d516 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810d4f0:	4b0c      	ldr	r3, [pc, #48]	; (810d524 <xQueueGenericReset+0xcc>)
 810d4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d4f6:	601a      	str	r2, [r3, #0]
 810d4f8:	f3bf 8f4f 	dsb	sy
 810d4fc:	f3bf 8f6f 	isb	sy
 810d500:	e009      	b.n	810d516 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810d502:	68fb      	ldr	r3, [r7, #12]
 810d504:	3310      	adds	r3, #16
 810d506:	4618      	mov	r0, r3
 810d508:	f7ff fca4 	bl	810ce54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810d50c:	68fb      	ldr	r3, [r7, #12]
 810d50e:	3324      	adds	r3, #36	; 0x24
 810d510:	4618      	mov	r0, r3
 810d512:	f7ff fc9f 	bl	810ce54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810d516:	f7ff fead 	bl	810d274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810d51a:	2301      	movs	r3, #1
}
 810d51c:	4618      	mov	r0, r3
 810d51e:	3710      	adds	r7, #16
 810d520:	46bd      	mov	sp, r7
 810d522:	bd80      	pop	{r7, pc}
 810d524:	e000ed04 	.word	0xe000ed04

0810d528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810d528:	b580      	push	{r7, lr}
 810d52a:	b08e      	sub	sp, #56	; 0x38
 810d52c:	af02      	add	r7, sp, #8
 810d52e:	60f8      	str	r0, [r7, #12]
 810d530:	60b9      	str	r1, [r7, #8]
 810d532:	607a      	str	r2, [r7, #4]
 810d534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810d536:	68fb      	ldr	r3, [r7, #12]
 810d538:	2b00      	cmp	r3, #0
 810d53a:	d10a      	bne.n	810d552 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d540:	f383 8811 	msr	BASEPRI, r3
 810d544:	f3bf 8f6f 	isb	sy
 810d548:	f3bf 8f4f 	dsb	sy
 810d54c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810d54e:	bf00      	nop
 810d550:	e7fe      	b.n	810d550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810d552:	683b      	ldr	r3, [r7, #0]
 810d554:	2b00      	cmp	r3, #0
 810d556:	d10a      	bne.n	810d56e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 810d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d55c:	f383 8811 	msr	BASEPRI, r3
 810d560:	f3bf 8f6f 	isb	sy
 810d564:	f3bf 8f4f 	dsb	sy
 810d568:	627b      	str	r3, [r7, #36]	; 0x24
}
 810d56a:	bf00      	nop
 810d56c:	e7fe      	b.n	810d56c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810d56e:	687b      	ldr	r3, [r7, #4]
 810d570:	2b00      	cmp	r3, #0
 810d572:	d002      	beq.n	810d57a <xQueueGenericCreateStatic+0x52>
 810d574:	68bb      	ldr	r3, [r7, #8]
 810d576:	2b00      	cmp	r3, #0
 810d578:	d001      	beq.n	810d57e <xQueueGenericCreateStatic+0x56>
 810d57a:	2301      	movs	r3, #1
 810d57c:	e000      	b.n	810d580 <xQueueGenericCreateStatic+0x58>
 810d57e:	2300      	movs	r3, #0
 810d580:	2b00      	cmp	r3, #0
 810d582:	d10a      	bne.n	810d59a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 810d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d588:	f383 8811 	msr	BASEPRI, r3
 810d58c:	f3bf 8f6f 	isb	sy
 810d590:	f3bf 8f4f 	dsb	sy
 810d594:	623b      	str	r3, [r7, #32]
}
 810d596:	bf00      	nop
 810d598:	e7fe      	b.n	810d598 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810d59a:	687b      	ldr	r3, [r7, #4]
 810d59c:	2b00      	cmp	r3, #0
 810d59e:	d102      	bne.n	810d5a6 <xQueueGenericCreateStatic+0x7e>
 810d5a0:	68bb      	ldr	r3, [r7, #8]
 810d5a2:	2b00      	cmp	r3, #0
 810d5a4:	d101      	bne.n	810d5aa <xQueueGenericCreateStatic+0x82>
 810d5a6:	2301      	movs	r3, #1
 810d5a8:	e000      	b.n	810d5ac <xQueueGenericCreateStatic+0x84>
 810d5aa:	2300      	movs	r3, #0
 810d5ac:	2b00      	cmp	r3, #0
 810d5ae:	d10a      	bne.n	810d5c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 810d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d5b4:	f383 8811 	msr	BASEPRI, r3
 810d5b8:	f3bf 8f6f 	isb	sy
 810d5bc:	f3bf 8f4f 	dsb	sy
 810d5c0:	61fb      	str	r3, [r7, #28]
}
 810d5c2:	bf00      	nop
 810d5c4:	e7fe      	b.n	810d5c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810d5c6:	2348      	movs	r3, #72	; 0x48
 810d5c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810d5ca:	697b      	ldr	r3, [r7, #20]
 810d5cc:	2b48      	cmp	r3, #72	; 0x48
 810d5ce:	d00a      	beq.n	810d5e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 810d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d5d4:	f383 8811 	msr	BASEPRI, r3
 810d5d8:	f3bf 8f6f 	isb	sy
 810d5dc:	f3bf 8f4f 	dsb	sy
 810d5e0:	61bb      	str	r3, [r7, #24]
}
 810d5e2:	bf00      	nop
 810d5e4:	e7fe      	b.n	810d5e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810d5e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810d5e8:	683b      	ldr	r3, [r7, #0]
 810d5ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810d5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d5ee:	2b00      	cmp	r3, #0
 810d5f0:	d00d      	beq.n	810d60e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d5f4:	2201      	movs	r2, #1
 810d5f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810d5fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d600:	9300      	str	r3, [sp, #0]
 810d602:	4613      	mov	r3, r2
 810d604:	687a      	ldr	r2, [r7, #4]
 810d606:	68b9      	ldr	r1, [r7, #8]
 810d608:	68f8      	ldr	r0, [r7, #12]
 810d60a:	f000 f83f 	bl	810d68c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810d60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810d610:	4618      	mov	r0, r3
 810d612:	3730      	adds	r7, #48	; 0x30
 810d614:	46bd      	mov	sp, r7
 810d616:	bd80      	pop	{r7, pc}

0810d618 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810d618:	b580      	push	{r7, lr}
 810d61a:	b08a      	sub	sp, #40	; 0x28
 810d61c:	af02      	add	r7, sp, #8
 810d61e:	60f8      	str	r0, [r7, #12]
 810d620:	60b9      	str	r1, [r7, #8]
 810d622:	4613      	mov	r3, r2
 810d624:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810d626:	68fb      	ldr	r3, [r7, #12]
 810d628:	2b00      	cmp	r3, #0
 810d62a:	d10a      	bne.n	810d642 <xQueueGenericCreate+0x2a>
	__asm volatile
 810d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d630:	f383 8811 	msr	BASEPRI, r3
 810d634:	f3bf 8f6f 	isb	sy
 810d638:	f3bf 8f4f 	dsb	sy
 810d63c:	613b      	str	r3, [r7, #16]
}
 810d63e:	bf00      	nop
 810d640:	e7fe      	b.n	810d640 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d642:	68fb      	ldr	r3, [r7, #12]
 810d644:	68ba      	ldr	r2, [r7, #8]
 810d646:	fb02 f303 	mul.w	r3, r2, r3
 810d64a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810d64c:	69fb      	ldr	r3, [r7, #28]
 810d64e:	3348      	adds	r3, #72	; 0x48
 810d650:	4618      	mov	r0, r3
 810d652:	f7ff fa15 	bl	810ca80 <pvPortMalloc>
 810d656:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810d658:	69bb      	ldr	r3, [r7, #24]
 810d65a:	2b00      	cmp	r3, #0
 810d65c:	d011      	beq.n	810d682 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810d65e:	69bb      	ldr	r3, [r7, #24]
 810d660:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d662:	697b      	ldr	r3, [r7, #20]
 810d664:	3348      	adds	r3, #72	; 0x48
 810d666:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810d668:	69bb      	ldr	r3, [r7, #24]
 810d66a:	2200      	movs	r2, #0
 810d66c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810d670:	79fa      	ldrb	r2, [r7, #7]
 810d672:	69bb      	ldr	r3, [r7, #24]
 810d674:	9300      	str	r3, [sp, #0]
 810d676:	4613      	mov	r3, r2
 810d678:	697a      	ldr	r2, [r7, #20]
 810d67a:	68b9      	ldr	r1, [r7, #8]
 810d67c:	68f8      	ldr	r0, [r7, #12]
 810d67e:	f000 f805 	bl	810d68c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810d682:	69bb      	ldr	r3, [r7, #24]
	}
 810d684:	4618      	mov	r0, r3
 810d686:	3720      	adds	r7, #32
 810d688:	46bd      	mov	sp, r7
 810d68a:	bd80      	pop	{r7, pc}

0810d68c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810d68c:	b580      	push	{r7, lr}
 810d68e:	b084      	sub	sp, #16
 810d690:	af00      	add	r7, sp, #0
 810d692:	60f8      	str	r0, [r7, #12]
 810d694:	60b9      	str	r1, [r7, #8]
 810d696:	607a      	str	r2, [r7, #4]
 810d698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810d69a:	68bb      	ldr	r3, [r7, #8]
 810d69c:	2b00      	cmp	r3, #0
 810d69e:	d103      	bne.n	810d6a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810d6a0:	69bb      	ldr	r3, [r7, #24]
 810d6a2:	69ba      	ldr	r2, [r7, #24]
 810d6a4:	601a      	str	r2, [r3, #0]
 810d6a6:	e002      	b.n	810d6ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810d6a8:	69bb      	ldr	r3, [r7, #24]
 810d6aa:	687a      	ldr	r2, [r7, #4]
 810d6ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810d6ae:	69bb      	ldr	r3, [r7, #24]
 810d6b0:	68fa      	ldr	r2, [r7, #12]
 810d6b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810d6b4:	69bb      	ldr	r3, [r7, #24]
 810d6b6:	68ba      	ldr	r2, [r7, #8]
 810d6b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810d6ba:	2101      	movs	r1, #1
 810d6bc:	69b8      	ldr	r0, [r7, #24]
 810d6be:	f7ff fecb 	bl	810d458 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810d6c2:	bf00      	nop
 810d6c4:	3710      	adds	r7, #16
 810d6c6:	46bd      	mov	sp, r7
 810d6c8:	bd80      	pop	{r7, pc}

0810d6ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 810d6ca:	b580      	push	{r7, lr}
 810d6cc:	b082      	sub	sp, #8
 810d6ce:	af00      	add	r7, sp, #0
 810d6d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 810d6d2:	687b      	ldr	r3, [r7, #4]
 810d6d4:	2b00      	cmp	r3, #0
 810d6d6:	d00e      	beq.n	810d6f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 810d6d8:	687b      	ldr	r3, [r7, #4]
 810d6da:	2200      	movs	r2, #0
 810d6dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 810d6de:	687b      	ldr	r3, [r7, #4]
 810d6e0:	2200      	movs	r2, #0
 810d6e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 810d6e4:	687b      	ldr	r3, [r7, #4]
 810d6e6:	2200      	movs	r2, #0
 810d6e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 810d6ea:	2300      	movs	r3, #0
 810d6ec:	2200      	movs	r2, #0
 810d6ee:	2100      	movs	r1, #0
 810d6f0:	6878      	ldr	r0, [r7, #4]
 810d6f2:	f000 f837 	bl	810d764 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 810d6f6:	bf00      	nop
 810d6f8:	3708      	adds	r7, #8
 810d6fa:	46bd      	mov	sp, r7
 810d6fc:	bd80      	pop	{r7, pc}

0810d6fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810d6fe:	b580      	push	{r7, lr}
 810d700:	b086      	sub	sp, #24
 810d702:	af00      	add	r7, sp, #0
 810d704:	4603      	mov	r3, r0
 810d706:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810d708:	2301      	movs	r3, #1
 810d70a:	617b      	str	r3, [r7, #20]
 810d70c:	2300      	movs	r3, #0
 810d70e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810d710:	79fb      	ldrb	r3, [r7, #7]
 810d712:	461a      	mov	r2, r3
 810d714:	6939      	ldr	r1, [r7, #16]
 810d716:	6978      	ldr	r0, [r7, #20]
 810d718:	f7ff ff7e 	bl	810d618 <xQueueGenericCreate>
 810d71c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810d71e:	68f8      	ldr	r0, [r7, #12]
 810d720:	f7ff ffd3 	bl	810d6ca <prvInitialiseMutex>

		return xNewQueue;
 810d724:	68fb      	ldr	r3, [r7, #12]
	}
 810d726:	4618      	mov	r0, r3
 810d728:	3718      	adds	r7, #24
 810d72a:	46bd      	mov	sp, r7
 810d72c:	bd80      	pop	{r7, pc}

0810d72e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810d72e:	b580      	push	{r7, lr}
 810d730:	b088      	sub	sp, #32
 810d732:	af02      	add	r7, sp, #8
 810d734:	4603      	mov	r3, r0
 810d736:	6039      	str	r1, [r7, #0]
 810d738:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810d73a:	2301      	movs	r3, #1
 810d73c:	617b      	str	r3, [r7, #20]
 810d73e:	2300      	movs	r3, #0
 810d740:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 810d742:	79fb      	ldrb	r3, [r7, #7]
 810d744:	9300      	str	r3, [sp, #0]
 810d746:	683b      	ldr	r3, [r7, #0]
 810d748:	2200      	movs	r2, #0
 810d74a:	6939      	ldr	r1, [r7, #16]
 810d74c:	6978      	ldr	r0, [r7, #20]
 810d74e:	f7ff feeb 	bl	810d528 <xQueueGenericCreateStatic>
 810d752:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810d754:	68f8      	ldr	r0, [r7, #12]
 810d756:	f7ff ffb8 	bl	810d6ca <prvInitialiseMutex>

		return xNewQueue;
 810d75a:	68fb      	ldr	r3, [r7, #12]
	}
 810d75c:	4618      	mov	r0, r3
 810d75e:	3718      	adds	r7, #24
 810d760:	46bd      	mov	sp, r7
 810d762:	bd80      	pop	{r7, pc}

0810d764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810d764:	b580      	push	{r7, lr}
 810d766:	b08e      	sub	sp, #56	; 0x38
 810d768:	af00      	add	r7, sp, #0
 810d76a:	60f8      	str	r0, [r7, #12]
 810d76c:	60b9      	str	r1, [r7, #8]
 810d76e:	607a      	str	r2, [r7, #4]
 810d770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810d772:	2300      	movs	r3, #0
 810d774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d776:	68fb      	ldr	r3, [r7, #12]
 810d778:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d77c:	2b00      	cmp	r3, #0
 810d77e:	d10a      	bne.n	810d796 <xQueueGenericSend+0x32>
	__asm volatile
 810d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d784:	f383 8811 	msr	BASEPRI, r3
 810d788:	f3bf 8f6f 	isb	sy
 810d78c:	f3bf 8f4f 	dsb	sy
 810d790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810d792:	bf00      	nop
 810d794:	e7fe      	b.n	810d794 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d796:	68bb      	ldr	r3, [r7, #8]
 810d798:	2b00      	cmp	r3, #0
 810d79a:	d103      	bne.n	810d7a4 <xQueueGenericSend+0x40>
 810d79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d7a0:	2b00      	cmp	r3, #0
 810d7a2:	d101      	bne.n	810d7a8 <xQueueGenericSend+0x44>
 810d7a4:	2301      	movs	r3, #1
 810d7a6:	e000      	b.n	810d7aa <xQueueGenericSend+0x46>
 810d7a8:	2300      	movs	r3, #0
 810d7aa:	2b00      	cmp	r3, #0
 810d7ac:	d10a      	bne.n	810d7c4 <xQueueGenericSend+0x60>
	__asm volatile
 810d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d7b2:	f383 8811 	msr	BASEPRI, r3
 810d7b6:	f3bf 8f6f 	isb	sy
 810d7ba:	f3bf 8f4f 	dsb	sy
 810d7be:	627b      	str	r3, [r7, #36]	; 0x24
}
 810d7c0:	bf00      	nop
 810d7c2:	e7fe      	b.n	810d7c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810d7c4:	683b      	ldr	r3, [r7, #0]
 810d7c6:	2b02      	cmp	r3, #2
 810d7c8:	d103      	bne.n	810d7d2 <xQueueGenericSend+0x6e>
 810d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d7ce:	2b01      	cmp	r3, #1
 810d7d0:	d101      	bne.n	810d7d6 <xQueueGenericSend+0x72>
 810d7d2:	2301      	movs	r3, #1
 810d7d4:	e000      	b.n	810d7d8 <xQueueGenericSend+0x74>
 810d7d6:	2300      	movs	r3, #0
 810d7d8:	2b00      	cmp	r3, #0
 810d7da:	d10a      	bne.n	810d7f2 <xQueueGenericSend+0x8e>
	__asm volatile
 810d7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d7e0:	f383 8811 	msr	BASEPRI, r3
 810d7e4:	f3bf 8f6f 	isb	sy
 810d7e8:	f3bf 8f4f 	dsb	sy
 810d7ec:	623b      	str	r3, [r7, #32]
}
 810d7ee:	bf00      	nop
 810d7f0:	e7fe      	b.n	810d7f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d7f2:	f001 fae9 	bl	810edc8 <xTaskGetSchedulerState>
 810d7f6:	4603      	mov	r3, r0
 810d7f8:	2b00      	cmp	r3, #0
 810d7fa:	d102      	bne.n	810d802 <xQueueGenericSend+0x9e>
 810d7fc:	687b      	ldr	r3, [r7, #4]
 810d7fe:	2b00      	cmp	r3, #0
 810d800:	d101      	bne.n	810d806 <xQueueGenericSend+0xa2>
 810d802:	2301      	movs	r3, #1
 810d804:	e000      	b.n	810d808 <xQueueGenericSend+0xa4>
 810d806:	2300      	movs	r3, #0
 810d808:	2b00      	cmp	r3, #0
 810d80a:	d10a      	bne.n	810d822 <xQueueGenericSend+0xbe>
	__asm volatile
 810d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d810:	f383 8811 	msr	BASEPRI, r3
 810d814:	f3bf 8f6f 	isb	sy
 810d818:	f3bf 8f4f 	dsb	sy
 810d81c:	61fb      	str	r3, [r7, #28]
}
 810d81e:	bf00      	nop
 810d820:	e7fe      	b.n	810d820 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d822:	f7ff fcf7 	bl	810d214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d82e:	429a      	cmp	r2, r3
 810d830:	d302      	bcc.n	810d838 <xQueueGenericSend+0xd4>
 810d832:	683b      	ldr	r3, [r7, #0]
 810d834:	2b02      	cmp	r3, #2
 810d836:	d129      	bne.n	810d88c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810d838:	683a      	ldr	r2, [r7, #0]
 810d83a:	68b9      	ldr	r1, [r7, #8]
 810d83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d83e:	f000 fba1 	bl	810df84 <prvCopyDataToQueue>
 810d842:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d848:	2b00      	cmp	r3, #0
 810d84a:	d010      	beq.n	810d86e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d84e:	3324      	adds	r3, #36	; 0x24
 810d850:	4618      	mov	r0, r3
 810d852:	f001 f8f9 	bl	810ea48 <xTaskRemoveFromEventList>
 810d856:	4603      	mov	r3, r0
 810d858:	2b00      	cmp	r3, #0
 810d85a:	d013      	beq.n	810d884 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810d85c:	4b3f      	ldr	r3, [pc, #252]	; (810d95c <xQueueGenericSend+0x1f8>)
 810d85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d862:	601a      	str	r2, [r3, #0]
 810d864:	f3bf 8f4f 	dsb	sy
 810d868:	f3bf 8f6f 	isb	sy
 810d86c:	e00a      	b.n	810d884 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d870:	2b00      	cmp	r3, #0
 810d872:	d007      	beq.n	810d884 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810d874:	4b39      	ldr	r3, [pc, #228]	; (810d95c <xQueueGenericSend+0x1f8>)
 810d876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d87a:	601a      	str	r2, [r3, #0]
 810d87c:	f3bf 8f4f 	dsb	sy
 810d880:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810d884:	f7ff fcf6 	bl	810d274 <vPortExitCritical>
				return pdPASS;
 810d888:	2301      	movs	r3, #1
 810d88a:	e063      	b.n	810d954 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d88c:	687b      	ldr	r3, [r7, #4]
 810d88e:	2b00      	cmp	r3, #0
 810d890:	d103      	bne.n	810d89a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810d892:	f7ff fcef 	bl	810d274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810d896:	2300      	movs	r3, #0
 810d898:	e05c      	b.n	810d954 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d89c:	2b00      	cmp	r3, #0
 810d89e:	d106      	bne.n	810d8ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d8a0:	f107 0314 	add.w	r3, r7, #20
 810d8a4:	4618      	mov	r0, r3
 810d8a6:	f001 f931 	bl	810eb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d8aa:	2301      	movs	r3, #1
 810d8ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d8ae:	f7ff fce1 	bl	810d274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d8b2:	f000 febf 	bl	810e634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d8b6:	f7ff fcad 	bl	810d214 <vPortEnterCritical>
 810d8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d8bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810d8c0:	b25b      	sxtb	r3, r3
 810d8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d8c6:	d103      	bne.n	810d8d0 <xQueueGenericSend+0x16c>
 810d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d8ca:	2200      	movs	r2, #0
 810d8cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d8d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810d8d6:	b25b      	sxtb	r3, r3
 810d8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d8dc:	d103      	bne.n	810d8e6 <xQueueGenericSend+0x182>
 810d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d8e0:	2200      	movs	r2, #0
 810d8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810d8e6:	f7ff fcc5 	bl	810d274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d8ea:	1d3a      	adds	r2, r7, #4
 810d8ec:	f107 0314 	add.w	r3, r7, #20
 810d8f0:	4611      	mov	r1, r2
 810d8f2:	4618      	mov	r0, r3
 810d8f4:	f001 f920 	bl	810eb38 <xTaskCheckForTimeOut>
 810d8f8:	4603      	mov	r3, r0
 810d8fa:	2b00      	cmp	r3, #0
 810d8fc:	d124      	bne.n	810d948 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810d8fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d900:	f000 fc38 	bl	810e174 <prvIsQueueFull>
 810d904:	4603      	mov	r3, r0
 810d906:	2b00      	cmp	r3, #0
 810d908:	d018      	beq.n	810d93c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d90c:	3310      	adds	r3, #16
 810d90e:	687a      	ldr	r2, [r7, #4]
 810d910:	4611      	mov	r1, r2
 810d912:	4618      	mov	r0, r3
 810d914:	f001 f874 	bl	810ea00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810d918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d91a:	f000 fbc3 	bl	810e0a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810d91e:	f000 fe97 	bl	810e650 <xTaskResumeAll>
 810d922:	4603      	mov	r3, r0
 810d924:	2b00      	cmp	r3, #0
 810d926:	f47f af7c 	bne.w	810d822 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810d92a:	4b0c      	ldr	r3, [pc, #48]	; (810d95c <xQueueGenericSend+0x1f8>)
 810d92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d930:	601a      	str	r2, [r3, #0]
 810d932:	f3bf 8f4f 	dsb	sy
 810d936:	f3bf 8f6f 	isb	sy
 810d93a:	e772      	b.n	810d822 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810d93c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d93e:	f000 fbb1 	bl	810e0a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d942:	f000 fe85 	bl	810e650 <xTaskResumeAll>
 810d946:	e76c      	b.n	810d822 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810d948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d94a:	f000 fbab 	bl	810e0a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d94e:	f000 fe7f 	bl	810e650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810d952:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810d954:	4618      	mov	r0, r3
 810d956:	3738      	adds	r7, #56	; 0x38
 810d958:	46bd      	mov	sp, r7
 810d95a:	bd80      	pop	{r7, pc}
 810d95c:	e000ed04 	.word	0xe000ed04

0810d960 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810d960:	b580      	push	{r7, lr}
 810d962:	b08e      	sub	sp, #56	; 0x38
 810d964:	af00      	add	r7, sp, #0
 810d966:	6078      	str	r0, [r7, #4]
 810d968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810d96a:	687b      	ldr	r3, [r7, #4]
 810d96c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d970:	2b00      	cmp	r3, #0
 810d972:	d10a      	bne.n	810d98a <xQueueGiveFromISR+0x2a>
	__asm volatile
 810d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d978:	f383 8811 	msr	BASEPRI, r3
 810d97c:	f3bf 8f6f 	isb	sy
 810d980:	f3bf 8f4f 	dsb	sy
 810d984:	623b      	str	r3, [r7, #32]
}
 810d986:	bf00      	nop
 810d988:	e7fe      	b.n	810d988 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d98e:	2b00      	cmp	r3, #0
 810d990:	d00a      	beq.n	810d9a8 <xQueueGiveFromISR+0x48>
	__asm volatile
 810d992:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d996:	f383 8811 	msr	BASEPRI, r3
 810d99a:	f3bf 8f6f 	isb	sy
 810d99e:	f3bf 8f4f 	dsb	sy
 810d9a2:	61fb      	str	r3, [r7, #28]
}
 810d9a4:	bf00      	nop
 810d9a6:	e7fe      	b.n	810d9a6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810d9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d9aa:	681b      	ldr	r3, [r3, #0]
 810d9ac:	2b00      	cmp	r3, #0
 810d9ae:	d103      	bne.n	810d9b8 <xQueueGiveFromISR+0x58>
 810d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d9b2:	689b      	ldr	r3, [r3, #8]
 810d9b4:	2b00      	cmp	r3, #0
 810d9b6:	d101      	bne.n	810d9bc <xQueueGiveFromISR+0x5c>
 810d9b8:	2301      	movs	r3, #1
 810d9ba:	e000      	b.n	810d9be <xQueueGiveFromISR+0x5e>
 810d9bc:	2300      	movs	r3, #0
 810d9be:	2b00      	cmp	r3, #0
 810d9c0:	d10a      	bne.n	810d9d8 <xQueueGiveFromISR+0x78>
	__asm volatile
 810d9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d9c6:	f383 8811 	msr	BASEPRI, r3
 810d9ca:	f3bf 8f6f 	isb	sy
 810d9ce:	f3bf 8f4f 	dsb	sy
 810d9d2:	61bb      	str	r3, [r7, #24]
}
 810d9d4:	bf00      	nop
 810d9d6:	e7fe      	b.n	810d9d6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d9d8:	f7ff fcfe 	bl	810d3d8 <vPortValidateInterruptPriority>
	__asm volatile
 810d9dc:	f3ef 8211 	mrs	r2, BASEPRI
 810d9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d9e4:	f383 8811 	msr	BASEPRI, r3
 810d9e8:	f3bf 8f6f 	isb	sy
 810d9ec:	f3bf 8f4f 	dsb	sy
 810d9f0:	617a      	str	r2, [r7, #20]
 810d9f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810d9f4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d9fc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810da00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810da02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810da04:	429a      	cmp	r2, r3
 810da06:	d22b      	bcs.n	810da60 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810da08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810da0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810da0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810da14:	1c5a      	adds	r2, r3, #1
 810da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810da18:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810da1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810da1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810da22:	d112      	bne.n	810da4a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810da24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810da26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810da28:	2b00      	cmp	r3, #0
 810da2a:	d016      	beq.n	810da5a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810da2e:	3324      	adds	r3, #36	; 0x24
 810da30:	4618      	mov	r0, r3
 810da32:	f001 f809 	bl	810ea48 <xTaskRemoveFromEventList>
 810da36:	4603      	mov	r3, r0
 810da38:	2b00      	cmp	r3, #0
 810da3a:	d00e      	beq.n	810da5a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810da3c:	683b      	ldr	r3, [r7, #0]
 810da3e:	2b00      	cmp	r3, #0
 810da40:	d00b      	beq.n	810da5a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810da42:	683b      	ldr	r3, [r7, #0]
 810da44:	2201      	movs	r2, #1
 810da46:	601a      	str	r2, [r3, #0]
 810da48:	e007      	b.n	810da5a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810da4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810da4e:	3301      	adds	r3, #1
 810da50:	b2db      	uxtb	r3, r3
 810da52:	b25a      	sxtb	r2, r3
 810da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810da56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810da5a:	2301      	movs	r3, #1
 810da5c:	637b      	str	r3, [r7, #52]	; 0x34
 810da5e:	e001      	b.n	810da64 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810da60:	2300      	movs	r3, #0
 810da62:	637b      	str	r3, [r7, #52]	; 0x34
 810da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810da66:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810da68:	68fb      	ldr	r3, [r7, #12]
 810da6a:	f383 8811 	msr	BASEPRI, r3
}
 810da6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810da70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810da72:	4618      	mov	r0, r3
 810da74:	3738      	adds	r7, #56	; 0x38
 810da76:	46bd      	mov	sp, r7
 810da78:	bd80      	pop	{r7, pc}
	...

0810da7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810da7c:	b580      	push	{r7, lr}
 810da7e:	b08c      	sub	sp, #48	; 0x30
 810da80:	af00      	add	r7, sp, #0
 810da82:	60f8      	str	r0, [r7, #12]
 810da84:	60b9      	str	r1, [r7, #8]
 810da86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810da88:	2300      	movs	r3, #0
 810da8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810da8c:	68fb      	ldr	r3, [r7, #12]
 810da8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810da90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810da92:	2b00      	cmp	r3, #0
 810da94:	d10a      	bne.n	810daac <xQueueReceive+0x30>
	__asm volatile
 810da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 810da9a:	f383 8811 	msr	BASEPRI, r3
 810da9e:	f3bf 8f6f 	isb	sy
 810daa2:	f3bf 8f4f 	dsb	sy
 810daa6:	623b      	str	r3, [r7, #32]
}
 810daa8:	bf00      	nop
 810daaa:	e7fe      	b.n	810daaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810daac:	68bb      	ldr	r3, [r7, #8]
 810daae:	2b00      	cmp	r3, #0
 810dab0:	d103      	bne.n	810daba <xQueueReceive+0x3e>
 810dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810dab6:	2b00      	cmp	r3, #0
 810dab8:	d101      	bne.n	810dabe <xQueueReceive+0x42>
 810daba:	2301      	movs	r3, #1
 810dabc:	e000      	b.n	810dac0 <xQueueReceive+0x44>
 810dabe:	2300      	movs	r3, #0
 810dac0:	2b00      	cmp	r3, #0
 810dac2:	d10a      	bne.n	810dada <xQueueReceive+0x5e>
	__asm volatile
 810dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dac8:	f383 8811 	msr	BASEPRI, r3
 810dacc:	f3bf 8f6f 	isb	sy
 810dad0:	f3bf 8f4f 	dsb	sy
 810dad4:	61fb      	str	r3, [r7, #28]
}
 810dad6:	bf00      	nop
 810dad8:	e7fe      	b.n	810dad8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810dada:	f001 f975 	bl	810edc8 <xTaskGetSchedulerState>
 810dade:	4603      	mov	r3, r0
 810dae0:	2b00      	cmp	r3, #0
 810dae2:	d102      	bne.n	810daea <xQueueReceive+0x6e>
 810dae4:	687b      	ldr	r3, [r7, #4]
 810dae6:	2b00      	cmp	r3, #0
 810dae8:	d101      	bne.n	810daee <xQueueReceive+0x72>
 810daea:	2301      	movs	r3, #1
 810daec:	e000      	b.n	810daf0 <xQueueReceive+0x74>
 810daee:	2300      	movs	r3, #0
 810daf0:	2b00      	cmp	r3, #0
 810daf2:	d10a      	bne.n	810db0a <xQueueReceive+0x8e>
	__asm volatile
 810daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810daf8:	f383 8811 	msr	BASEPRI, r3
 810dafc:	f3bf 8f6f 	isb	sy
 810db00:	f3bf 8f4f 	dsb	sy
 810db04:	61bb      	str	r3, [r7, #24]
}
 810db06:	bf00      	nop
 810db08:	e7fe      	b.n	810db08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810db0a:	f7ff fb83 	bl	810d214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810db12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810db16:	2b00      	cmp	r3, #0
 810db18:	d01f      	beq.n	810db5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810db1a:	68b9      	ldr	r1, [r7, #8]
 810db1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810db1e:	f000 fa9b 	bl	810e058 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810db24:	1e5a      	subs	r2, r3, #1
 810db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810db28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810db2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810db2c:	691b      	ldr	r3, [r3, #16]
 810db2e:	2b00      	cmp	r3, #0
 810db30:	d00f      	beq.n	810db52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810db34:	3310      	adds	r3, #16
 810db36:	4618      	mov	r0, r3
 810db38:	f000 ff86 	bl	810ea48 <xTaskRemoveFromEventList>
 810db3c:	4603      	mov	r3, r0
 810db3e:	2b00      	cmp	r3, #0
 810db40:	d007      	beq.n	810db52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810db42:	4b3d      	ldr	r3, [pc, #244]	; (810dc38 <xQueueReceive+0x1bc>)
 810db44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810db48:	601a      	str	r2, [r3, #0]
 810db4a:	f3bf 8f4f 	dsb	sy
 810db4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810db52:	f7ff fb8f 	bl	810d274 <vPortExitCritical>
				return pdPASS;
 810db56:	2301      	movs	r3, #1
 810db58:	e069      	b.n	810dc2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810db5a:	687b      	ldr	r3, [r7, #4]
 810db5c:	2b00      	cmp	r3, #0
 810db5e:	d103      	bne.n	810db68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810db60:	f7ff fb88 	bl	810d274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810db64:	2300      	movs	r3, #0
 810db66:	e062      	b.n	810dc2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 810db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810db6a:	2b00      	cmp	r3, #0
 810db6c:	d106      	bne.n	810db7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810db6e:	f107 0310 	add.w	r3, r7, #16
 810db72:	4618      	mov	r0, r3
 810db74:	f000 ffca 	bl	810eb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810db78:	2301      	movs	r3, #1
 810db7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810db7c:	f7ff fb7a 	bl	810d274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810db80:	f000 fd58 	bl	810e634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810db84:	f7ff fb46 	bl	810d214 <vPortEnterCritical>
 810db88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810db8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810db8e:	b25b      	sxtb	r3, r3
 810db90:	f1b3 3fff 	cmp.w	r3, #4294967295
 810db94:	d103      	bne.n	810db9e <xQueueReceive+0x122>
 810db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810db98:	2200      	movs	r2, #0
 810db9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810dba4:	b25b      	sxtb	r3, r3
 810dba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dbaa:	d103      	bne.n	810dbb4 <xQueueReceive+0x138>
 810dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dbae:	2200      	movs	r2, #0
 810dbb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810dbb4:	f7ff fb5e 	bl	810d274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810dbb8:	1d3a      	adds	r2, r7, #4
 810dbba:	f107 0310 	add.w	r3, r7, #16
 810dbbe:	4611      	mov	r1, r2
 810dbc0:	4618      	mov	r0, r3
 810dbc2:	f000 ffb9 	bl	810eb38 <xTaskCheckForTimeOut>
 810dbc6:	4603      	mov	r3, r0
 810dbc8:	2b00      	cmp	r3, #0
 810dbca:	d123      	bne.n	810dc14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810dbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810dbce:	f000 fabb 	bl	810e148 <prvIsQueueEmpty>
 810dbd2:	4603      	mov	r3, r0
 810dbd4:	2b00      	cmp	r3, #0
 810dbd6:	d017      	beq.n	810dc08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810dbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dbda:	3324      	adds	r3, #36	; 0x24
 810dbdc:	687a      	ldr	r2, [r7, #4]
 810dbde:	4611      	mov	r1, r2
 810dbe0:	4618      	mov	r0, r3
 810dbe2:	f000 ff0d 	bl	810ea00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810dbe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810dbe8:	f000 fa5c 	bl	810e0a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810dbec:	f000 fd30 	bl	810e650 <xTaskResumeAll>
 810dbf0:	4603      	mov	r3, r0
 810dbf2:	2b00      	cmp	r3, #0
 810dbf4:	d189      	bne.n	810db0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 810dbf6:	4b10      	ldr	r3, [pc, #64]	; (810dc38 <xQueueReceive+0x1bc>)
 810dbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810dbfc:	601a      	str	r2, [r3, #0]
 810dbfe:	f3bf 8f4f 	dsb	sy
 810dc02:	f3bf 8f6f 	isb	sy
 810dc06:	e780      	b.n	810db0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810dc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810dc0a:	f000 fa4b 	bl	810e0a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810dc0e:	f000 fd1f 	bl	810e650 <xTaskResumeAll>
 810dc12:	e77a      	b.n	810db0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810dc14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810dc16:	f000 fa45 	bl	810e0a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810dc1a:	f000 fd19 	bl	810e650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810dc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810dc20:	f000 fa92 	bl	810e148 <prvIsQueueEmpty>
 810dc24:	4603      	mov	r3, r0
 810dc26:	2b00      	cmp	r3, #0
 810dc28:	f43f af6f 	beq.w	810db0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810dc2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810dc2e:	4618      	mov	r0, r3
 810dc30:	3730      	adds	r7, #48	; 0x30
 810dc32:	46bd      	mov	sp, r7
 810dc34:	bd80      	pop	{r7, pc}
 810dc36:	bf00      	nop
 810dc38:	e000ed04 	.word	0xe000ed04

0810dc3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810dc3c:	b580      	push	{r7, lr}
 810dc3e:	b08e      	sub	sp, #56	; 0x38
 810dc40:	af00      	add	r7, sp, #0
 810dc42:	6078      	str	r0, [r7, #4]
 810dc44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810dc46:	2300      	movs	r3, #0
 810dc48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810dc4a:	687b      	ldr	r3, [r7, #4]
 810dc4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810dc4e:	2300      	movs	r3, #0
 810dc50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810dc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dc54:	2b00      	cmp	r3, #0
 810dc56:	d10a      	bne.n	810dc6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 810dc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dc5c:	f383 8811 	msr	BASEPRI, r3
 810dc60:	f3bf 8f6f 	isb	sy
 810dc64:	f3bf 8f4f 	dsb	sy
 810dc68:	623b      	str	r3, [r7, #32]
}
 810dc6a:	bf00      	nop
 810dc6c:	e7fe      	b.n	810dc6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810dc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810dc72:	2b00      	cmp	r3, #0
 810dc74:	d00a      	beq.n	810dc8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 810dc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dc7a:	f383 8811 	msr	BASEPRI, r3
 810dc7e:	f3bf 8f6f 	isb	sy
 810dc82:	f3bf 8f4f 	dsb	sy
 810dc86:	61fb      	str	r3, [r7, #28]
}
 810dc88:	bf00      	nop
 810dc8a:	e7fe      	b.n	810dc8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810dc8c:	f001 f89c 	bl	810edc8 <xTaskGetSchedulerState>
 810dc90:	4603      	mov	r3, r0
 810dc92:	2b00      	cmp	r3, #0
 810dc94:	d102      	bne.n	810dc9c <xQueueSemaphoreTake+0x60>
 810dc96:	683b      	ldr	r3, [r7, #0]
 810dc98:	2b00      	cmp	r3, #0
 810dc9a:	d101      	bne.n	810dca0 <xQueueSemaphoreTake+0x64>
 810dc9c:	2301      	movs	r3, #1
 810dc9e:	e000      	b.n	810dca2 <xQueueSemaphoreTake+0x66>
 810dca0:	2300      	movs	r3, #0
 810dca2:	2b00      	cmp	r3, #0
 810dca4:	d10a      	bne.n	810dcbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 810dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dcaa:	f383 8811 	msr	BASEPRI, r3
 810dcae:	f3bf 8f6f 	isb	sy
 810dcb2:	f3bf 8f4f 	dsb	sy
 810dcb6:	61bb      	str	r3, [r7, #24]
}
 810dcb8:	bf00      	nop
 810dcba:	e7fe      	b.n	810dcba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810dcbc:	f7ff faaa 	bl	810d214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810dcc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dcc8:	2b00      	cmp	r3, #0
 810dcca:	d024      	beq.n	810dd16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dcce:	1e5a      	subs	r2, r3, #1
 810dcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dcd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dcd6:	681b      	ldr	r3, [r3, #0]
 810dcd8:	2b00      	cmp	r3, #0
 810dcda:	d104      	bne.n	810dce6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810dcdc:	f001 fa1c 	bl	810f118 <pvTaskIncrementMutexHeldCount>
 810dce0:	4602      	mov	r2, r0
 810dce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dce4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810dce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dce8:	691b      	ldr	r3, [r3, #16]
 810dcea:	2b00      	cmp	r3, #0
 810dcec:	d00f      	beq.n	810dd0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dcf0:	3310      	adds	r3, #16
 810dcf2:	4618      	mov	r0, r3
 810dcf4:	f000 fea8 	bl	810ea48 <xTaskRemoveFromEventList>
 810dcf8:	4603      	mov	r3, r0
 810dcfa:	2b00      	cmp	r3, #0
 810dcfc:	d007      	beq.n	810dd0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810dcfe:	4b54      	ldr	r3, [pc, #336]	; (810de50 <xQueueSemaphoreTake+0x214>)
 810dd00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810dd04:	601a      	str	r2, [r3, #0]
 810dd06:	f3bf 8f4f 	dsb	sy
 810dd0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810dd0e:	f7ff fab1 	bl	810d274 <vPortExitCritical>
				return pdPASS;
 810dd12:	2301      	movs	r3, #1
 810dd14:	e097      	b.n	810de46 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810dd16:	683b      	ldr	r3, [r7, #0]
 810dd18:	2b00      	cmp	r3, #0
 810dd1a:	d111      	bne.n	810dd40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810dd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dd1e:	2b00      	cmp	r3, #0
 810dd20:	d00a      	beq.n	810dd38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 810dd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dd26:	f383 8811 	msr	BASEPRI, r3
 810dd2a:	f3bf 8f6f 	isb	sy
 810dd2e:	f3bf 8f4f 	dsb	sy
 810dd32:	617b      	str	r3, [r7, #20]
}
 810dd34:	bf00      	nop
 810dd36:	e7fe      	b.n	810dd36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810dd38:	f7ff fa9c 	bl	810d274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810dd3c:	2300      	movs	r3, #0
 810dd3e:	e082      	b.n	810de46 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 810dd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810dd42:	2b00      	cmp	r3, #0
 810dd44:	d106      	bne.n	810dd54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810dd46:	f107 030c 	add.w	r3, r7, #12
 810dd4a:	4618      	mov	r0, r3
 810dd4c:	f000 fede 	bl	810eb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810dd50:	2301      	movs	r3, #1
 810dd52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810dd54:	f7ff fa8e 	bl	810d274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810dd58:	f000 fc6c 	bl	810e634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810dd5c:	f7ff fa5a 	bl	810d214 <vPortEnterCritical>
 810dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dd62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810dd66:	b25b      	sxtb	r3, r3
 810dd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dd6c:	d103      	bne.n	810dd76 <xQueueSemaphoreTake+0x13a>
 810dd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dd70:	2200      	movs	r2, #0
 810dd72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810dd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dd78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810dd7c:	b25b      	sxtb	r3, r3
 810dd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dd82:	d103      	bne.n	810dd8c <xQueueSemaphoreTake+0x150>
 810dd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dd86:	2200      	movs	r2, #0
 810dd88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810dd8c:	f7ff fa72 	bl	810d274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810dd90:	463a      	mov	r2, r7
 810dd92:	f107 030c 	add.w	r3, r7, #12
 810dd96:	4611      	mov	r1, r2
 810dd98:	4618      	mov	r0, r3
 810dd9a:	f000 fecd 	bl	810eb38 <xTaskCheckForTimeOut>
 810dd9e:	4603      	mov	r3, r0
 810dda0:	2b00      	cmp	r3, #0
 810dda2:	d132      	bne.n	810de0a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810dda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810dda6:	f000 f9cf 	bl	810e148 <prvIsQueueEmpty>
 810ddaa:	4603      	mov	r3, r0
 810ddac:	2b00      	cmp	r3, #0
 810ddae:	d026      	beq.n	810ddfe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810ddb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ddb2:	681b      	ldr	r3, [r3, #0]
 810ddb4:	2b00      	cmp	r3, #0
 810ddb6:	d109      	bne.n	810ddcc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 810ddb8:	f7ff fa2c 	bl	810d214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ddbe:	689b      	ldr	r3, [r3, #8]
 810ddc0:	4618      	mov	r0, r3
 810ddc2:	f001 f81f 	bl	810ee04 <xTaskPriorityInherit>
 810ddc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 810ddc8:	f7ff fa54 	bl	810d274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ddce:	3324      	adds	r3, #36	; 0x24
 810ddd0:	683a      	ldr	r2, [r7, #0]
 810ddd2:	4611      	mov	r1, r2
 810ddd4:	4618      	mov	r0, r3
 810ddd6:	f000 fe13 	bl	810ea00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810ddda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810dddc:	f000 f962 	bl	810e0a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810dde0:	f000 fc36 	bl	810e650 <xTaskResumeAll>
 810dde4:	4603      	mov	r3, r0
 810dde6:	2b00      	cmp	r3, #0
 810dde8:	f47f af68 	bne.w	810dcbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 810ddec:	4b18      	ldr	r3, [pc, #96]	; (810de50 <xQueueSemaphoreTake+0x214>)
 810ddee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ddf2:	601a      	str	r2, [r3, #0]
 810ddf4:	f3bf 8f4f 	dsb	sy
 810ddf8:	f3bf 8f6f 	isb	sy
 810ddfc:	e75e      	b.n	810dcbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810ddfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810de00:	f000 f950 	bl	810e0a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810de04:	f000 fc24 	bl	810e650 <xTaskResumeAll>
 810de08:	e758      	b.n	810dcbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810de0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810de0c:	f000 f94a 	bl	810e0a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810de10:	f000 fc1e 	bl	810e650 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810de14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810de16:	f000 f997 	bl	810e148 <prvIsQueueEmpty>
 810de1a:	4603      	mov	r3, r0
 810de1c:	2b00      	cmp	r3, #0
 810de1e:	f43f af4d 	beq.w	810dcbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810de24:	2b00      	cmp	r3, #0
 810de26:	d00d      	beq.n	810de44 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 810de28:	f7ff f9f4 	bl	810d214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810de2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810de2e:	f000 f891 	bl	810df54 <prvGetDisinheritPriorityAfterTimeout>
 810de32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810de34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810de36:	689b      	ldr	r3, [r3, #8]
 810de38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810de3a:	4618      	mov	r0, r3
 810de3c:	f001 f8de 	bl	810effc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810de40:	f7ff fa18 	bl	810d274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810de44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810de46:	4618      	mov	r0, r3
 810de48:	3738      	adds	r7, #56	; 0x38
 810de4a:	46bd      	mov	sp, r7
 810de4c:	bd80      	pop	{r7, pc}
 810de4e:	bf00      	nop
 810de50:	e000ed04 	.word	0xe000ed04

0810de54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810de54:	b580      	push	{r7, lr}
 810de56:	b08e      	sub	sp, #56	; 0x38
 810de58:	af00      	add	r7, sp, #0
 810de5a:	60f8      	str	r0, [r7, #12]
 810de5c:	60b9      	str	r1, [r7, #8]
 810de5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810de60:	68fb      	ldr	r3, [r7, #12]
 810de62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810de66:	2b00      	cmp	r3, #0
 810de68:	d10a      	bne.n	810de80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 810de6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810de6e:	f383 8811 	msr	BASEPRI, r3
 810de72:	f3bf 8f6f 	isb	sy
 810de76:	f3bf 8f4f 	dsb	sy
 810de7a:	623b      	str	r3, [r7, #32]
}
 810de7c:	bf00      	nop
 810de7e:	e7fe      	b.n	810de7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810de80:	68bb      	ldr	r3, [r7, #8]
 810de82:	2b00      	cmp	r3, #0
 810de84:	d103      	bne.n	810de8e <xQueueReceiveFromISR+0x3a>
 810de86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810de88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810de8a:	2b00      	cmp	r3, #0
 810de8c:	d101      	bne.n	810de92 <xQueueReceiveFromISR+0x3e>
 810de8e:	2301      	movs	r3, #1
 810de90:	e000      	b.n	810de94 <xQueueReceiveFromISR+0x40>
 810de92:	2300      	movs	r3, #0
 810de94:	2b00      	cmp	r3, #0
 810de96:	d10a      	bne.n	810deae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 810de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 810de9c:	f383 8811 	msr	BASEPRI, r3
 810dea0:	f3bf 8f6f 	isb	sy
 810dea4:	f3bf 8f4f 	dsb	sy
 810dea8:	61fb      	str	r3, [r7, #28]
}
 810deaa:	bf00      	nop
 810deac:	e7fe      	b.n	810deac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810deae:	f7ff fa93 	bl	810d3d8 <vPortValidateInterruptPriority>
	__asm volatile
 810deb2:	f3ef 8211 	mrs	r2, BASEPRI
 810deb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810deba:	f383 8811 	msr	BASEPRI, r3
 810debe:	f3bf 8f6f 	isb	sy
 810dec2:	f3bf 8f4f 	dsb	sy
 810dec6:	61ba      	str	r2, [r7, #24]
 810dec8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810deca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810decc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810dece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ded0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ded2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ded6:	2b00      	cmp	r3, #0
 810ded8:	d02f      	beq.n	810df3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810deda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dedc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810dee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810dee4:	68b9      	ldr	r1, [r7, #8]
 810dee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810dee8:	f000 f8b6 	bl	810e058 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810deec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810deee:	1e5a      	subs	r2, r3, #1
 810def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810def2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810def4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810def8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810defc:	d112      	bne.n	810df24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810defe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810df00:	691b      	ldr	r3, [r3, #16]
 810df02:	2b00      	cmp	r3, #0
 810df04:	d016      	beq.n	810df34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810df06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810df08:	3310      	adds	r3, #16
 810df0a:	4618      	mov	r0, r3
 810df0c:	f000 fd9c 	bl	810ea48 <xTaskRemoveFromEventList>
 810df10:	4603      	mov	r3, r0
 810df12:	2b00      	cmp	r3, #0
 810df14:	d00e      	beq.n	810df34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810df16:	687b      	ldr	r3, [r7, #4]
 810df18:	2b00      	cmp	r3, #0
 810df1a:	d00b      	beq.n	810df34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810df1c:	687b      	ldr	r3, [r7, #4]
 810df1e:	2201      	movs	r2, #1
 810df20:	601a      	str	r2, [r3, #0]
 810df22:	e007      	b.n	810df34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810df24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810df28:	3301      	adds	r3, #1
 810df2a:	b2db      	uxtb	r3, r3
 810df2c:	b25a      	sxtb	r2, r3
 810df2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810df30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 810df34:	2301      	movs	r3, #1
 810df36:	637b      	str	r3, [r7, #52]	; 0x34
 810df38:	e001      	b.n	810df3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 810df3a:	2300      	movs	r3, #0
 810df3c:	637b      	str	r3, [r7, #52]	; 0x34
 810df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810df40:	613b      	str	r3, [r7, #16]
	__asm volatile
 810df42:	693b      	ldr	r3, [r7, #16]
 810df44:	f383 8811 	msr	BASEPRI, r3
}
 810df48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810df4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810df4c:	4618      	mov	r0, r3
 810df4e:	3738      	adds	r7, #56	; 0x38
 810df50:	46bd      	mov	sp, r7
 810df52:	bd80      	pop	{r7, pc}

0810df54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810df54:	b480      	push	{r7}
 810df56:	b085      	sub	sp, #20
 810df58:	af00      	add	r7, sp, #0
 810df5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810df5c:	687b      	ldr	r3, [r7, #4]
 810df5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810df60:	2b00      	cmp	r3, #0
 810df62:	d006      	beq.n	810df72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810df64:	687b      	ldr	r3, [r7, #4]
 810df66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810df68:	681b      	ldr	r3, [r3, #0]
 810df6a:	f1c3 0307 	rsb	r3, r3, #7
 810df6e:	60fb      	str	r3, [r7, #12]
 810df70:	e001      	b.n	810df76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810df72:	2300      	movs	r3, #0
 810df74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810df76:	68fb      	ldr	r3, [r7, #12]
	}
 810df78:	4618      	mov	r0, r3
 810df7a:	3714      	adds	r7, #20
 810df7c:	46bd      	mov	sp, r7
 810df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df82:	4770      	bx	lr

0810df84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810df84:	b580      	push	{r7, lr}
 810df86:	b086      	sub	sp, #24
 810df88:	af00      	add	r7, sp, #0
 810df8a:	60f8      	str	r0, [r7, #12]
 810df8c:	60b9      	str	r1, [r7, #8]
 810df8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810df90:	2300      	movs	r3, #0
 810df92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810df94:	68fb      	ldr	r3, [r7, #12]
 810df96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810df98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810df9a:	68fb      	ldr	r3, [r7, #12]
 810df9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810df9e:	2b00      	cmp	r3, #0
 810dfa0:	d10d      	bne.n	810dfbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810dfa2:	68fb      	ldr	r3, [r7, #12]
 810dfa4:	681b      	ldr	r3, [r3, #0]
 810dfa6:	2b00      	cmp	r3, #0
 810dfa8:	d14d      	bne.n	810e046 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810dfaa:	68fb      	ldr	r3, [r7, #12]
 810dfac:	689b      	ldr	r3, [r3, #8]
 810dfae:	4618      	mov	r0, r3
 810dfb0:	f000 ff9e 	bl	810eef0 <xTaskPriorityDisinherit>
 810dfb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810dfb6:	68fb      	ldr	r3, [r7, #12]
 810dfb8:	2200      	movs	r2, #0
 810dfba:	609a      	str	r2, [r3, #8]
 810dfbc:	e043      	b.n	810e046 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810dfbe:	687b      	ldr	r3, [r7, #4]
 810dfc0:	2b00      	cmp	r3, #0
 810dfc2:	d119      	bne.n	810dff8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810dfc4:	68fb      	ldr	r3, [r7, #12]
 810dfc6:	6858      	ldr	r0, [r3, #4]
 810dfc8:	68fb      	ldr	r3, [r7, #12]
 810dfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810dfcc:	461a      	mov	r2, r3
 810dfce:	68b9      	ldr	r1, [r7, #8]
 810dfd0:	f008 ff1f 	bl	8116e12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810dfd4:	68fb      	ldr	r3, [r7, #12]
 810dfd6:	685a      	ldr	r2, [r3, #4]
 810dfd8:	68fb      	ldr	r3, [r7, #12]
 810dfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810dfdc:	441a      	add	r2, r3
 810dfde:	68fb      	ldr	r3, [r7, #12]
 810dfe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810dfe2:	68fb      	ldr	r3, [r7, #12]
 810dfe4:	685a      	ldr	r2, [r3, #4]
 810dfe6:	68fb      	ldr	r3, [r7, #12]
 810dfe8:	689b      	ldr	r3, [r3, #8]
 810dfea:	429a      	cmp	r2, r3
 810dfec:	d32b      	bcc.n	810e046 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810dfee:	68fb      	ldr	r3, [r7, #12]
 810dff0:	681a      	ldr	r2, [r3, #0]
 810dff2:	68fb      	ldr	r3, [r7, #12]
 810dff4:	605a      	str	r2, [r3, #4]
 810dff6:	e026      	b.n	810e046 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810dff8:	68fb      	ldr	r3, [r7, #12]
 810dffa:	68d8      	ldr	r0, [r3, #12]
 810dffc:	68fb      	ldr	r3, [r7, #12]
 810dffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e000:	461a      	mov	r2, r3
 810e002:	68b9      	ldr	r1, [r7, #8]
 810e004:	f008 ff05 	bl	8116e12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810e008:	68fb      	ldr	r3, [r7, #12]
 810e00a:	68da      	ldr	r2, [r3, #12]
 810e00c:	68fb      	ldr	r3, [r7, #12]
 810e00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e010:	425b      	negs	r3, r3
 810e012:	441a      	add	r2, r3
 810e014:	68fb      	ldr	r3, [r7, #12]
 810e016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e018:	68fb      	ldr	r3, [r7, #12]
 810e01a:	68da      	ldr	r2, [r3, #12]
 810e01c:	68fb      	ldr	r3, [r7, #12]
 810e01e:	681b      	ldr	r3, [r3, #0]
 810e020:	429a      	cmp	r2, r3
 810e022:	d207      	bcs.n	810e034 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810e024:	68fb      	ldr	r3, [r7, #12]
 810e026:	689a      	ldr	r2, [r3, #8]
 810e028:	68fb      	ldr	r3, [r7, #12]
 810e02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e02c:	425b      	negs	r3, r3
 810e02e:	441a      	add	r2, r3
 810e030:	68fb      	ldr	r3, [r7, #12]
 810e032:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810e034:	687b      	ldr	r3, [r7, #4]
 810e036:	2b02      	cmp	r3, #2
 810e038:	d105      	bne.n	810e046 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e03a:	693b      	ldr	r3, [r7, #16]
 810e03c:	2b00      	cmp	r3, #0
 810e03e:	d002      	beq.n	810e046 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810e040:	693b      	ldr	r3, [r7, #16]
 810e042:	3b01      	subs	r3, #1
 810e044:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810e046:	693b      	ldr	r3, [r7, #16]
 810e048:	1c5a      	adds	r2, r3, #1
 810e04a:	68fb      	ldr	r3, [r7, #12]
 810e04c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810e04e:	697b      	ldr	r3, [r7, #20]
}
 810e050:	4618      	mov	r0, r3
 810e052:	3718      	adds	r7, #24
 810e054:	46bd      	mov	sp, r7
 810e056:	bd80      	pop	{r7, pc}

0810e058 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810e058:	b580      	push	{r7, lr}
 810e05a:	b082      	sub	sp, #8
 810e05c:	af00      	add	r7, sp, #0
 810e05e:	6078      	str	r0, [r7, #4]
 810e060:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810e062:	687b      	ldr	r3, [r7, #4]
 810e064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e066:	2b00      	cmp	r3, #0
 810e068:	d018      	beq.n	810e09c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e06a:	687b      	ldr	r3, [r7, #4]
 810e06c:	68da      	ldr	r2, [r3, #12]
 810e06e:	687b      	ldr	r3, [r7, #4]
 810e070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e072:	441a      	add	r2, r3
 810e074:	687b      	ldr	r3, [r7, #4]
 810e076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810e078:	687b      	ldr	r3, [r7, #4]
 810e07a:	68da      	ldr	r2, [r3, #12]
 810e07c:	687b      	ldr	r3, [r7, #4]
 810e07e:	689b      	ldr	r3, [r3, #8]
 810e080:	429a      	cmp	r2, r3
 810e082:	d303      	bcc.n	810e08c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810e084:	687b      	ldr	r3, [r7, #4]
 810e086:	681a      	ldr	r2, [r3, #0]
 810e088:	687b      	ldr	r3, [r7, #4]
 810e08a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e08c:	687b      	ldr	r3, [r7, #4]
 810e08e:	68d9      	ldr	r1, [r3, #12]
 810e090:	687b      	ldr	r3, [r7, #4]
 810e092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e094:	461a      	mov	r2, r3
 810e096:	6838      	ldr	r0, [r7, #0]
 810e098:	f008 febb 	bl	8116e12 <memcpy>
	}
}
 810e09c:	bf00      	nop
 810e09e:	3708      	adds	r7, #8
 810e0a0:	46bd      	mov	sp, r7
 810e0a2:	bd80      	pop	{r7, pc}

0810e0a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810e0a4:	b580      	push	{r7, lr}
 810e0a6:	b084      	sub	sp, #16
 810e0a8:	af00      	add	r7, sp, #0
 810e0aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810e0ac:	f7ff f8b2 	bl	810d214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810e0b0:	687b      	ldr	r3, [r7, #4]
 810e0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810e0b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e0b8:	e011      	b.n	810e0de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e0ba:	687b      	ldr	r3, [r7, #4]
 810e0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e0be:	2b00      	cmp	r3, #0
 810e0c0:	d012      	beq.n	810e0e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e0c2:	687b      	ldr	r3, [r7, #4]
 810e0c4:	3324      	adds	r3, #36	; 0x24
 810e0c6:	4618      	mov	r0, r3
 810e0c8:	f000 fcbe 	bl	810ea48 <xTaskRemoveFromEventList>
 810e0cc:	4603      	mov	r3, r0
 810e0ce:	2b00      	cmp	r3, #0
 810e0d0:	d001      	beq.n	810e0d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810e0d2:	f000 fd93 	bl	810ebfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810e0d6:	7bfb      	ldrb	r3, [r7, #15]
 810e0d8:	3b01      	subs	r3, #1
 810e0da:	b2db      	uxtb	r3, r3
 810e0dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e0e2:	2b00      	cmp	r3, #0
 810e0e4:	dce9      	bgt.n	810e0ba <prvUnlockQueue+0x16>
 810e0e6:	e000      	b.n	810e0ea <prvUnlockQueue+0x46>
					break;
 810e0e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810e0ea:	687b      	ldr	r3, [r7, #4]
 810e0ec:	22ff      	movs	r2, #255	; 0xff
 810e0ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810e0f2:	f7ff f8bf 	bl	810d274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810e0f6:	f7ff f88d 	bl	810d214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810e0fa:	687b      	ldr	r3, [r7, #4]
 810e0fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810e100:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e102:	e011      	b.n	810e128 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e104:	687b      	ldr	r3, [r7, #4]
 810e106:	691b      	ldr	r3, [r3, #16]
 810e108:	2b00      	cmp	r3, #0
 810e10a:	d012      	beq.n	810e132 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e10c:	687b      	ldr	r3, [r7, #4]
 810e10e:	3310      	adds	r3, #16
 810e110:	4618      	mov	r0, r3
 810e112:	f000 fc99 	bl	810ea48 <xTaskRemoveFromEventList>
 810e116:	4603      	mov	r3, r0
 810e118:	2b00      	cmp	r3, #0
 810e11a:	d001      	beq.n	810e120 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810e11c:	f000 fd6e 	bl	810ebfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810e120:	7bbb      	ldrb	r3, [r7, #14]
 810e122:	3b01      	subs	r3, #1
 810e124:	b2db      	uxtb	r3, r3
 810e126:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810e12c:	2b00      	cmp	r3, #0
 810e12e:	dce9      	bgt.n	810e104 <prvUnlockQueue+0x60>
 810e130:	e000      	b.n	810e134 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810e132:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810e134:	687b      	ldr	r3, [r7, #4]
 810e136:	22ff      	movs	r2, #255	; 0xff
 810e138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810e13c:	f7ff f89a 	bl	810d274 <vPortExitCritical>
}
 810e140:	bf00      	nop
 810e142:	3710      	adds	r7, #16
 810e144:	46bd      	mov	sp, r7
 810e146:	bd80      	pop	{r7, pc}

0810e148 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810e148:	b580      	push	{r7, lr}
 810e14a:	b084      	sub	sp, #16
 810e14c:	af00      	add	r7, sp, #0
 810e14e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e150:	f7ff f860 	bl	810d214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810e154:	687b      	ldr	r3, [r7, #4]
 810e156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e158:	2b00      	cmp	r3, #0
 810e15a:	d102      	bne.n	810e162 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810e15c:	2301      	movs	r3, #1
 810e15e:	60fb      	str	r3, [r7, #12]
 810e160:	e001      	b.n	810e166 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810e162:	2300      	movs	r3, #0
 810e164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e166:	f7ff f885 	bl	810d274 <vPortExitCritical>

	return xReturn;
 810e16a:	68fb      	ldr	r3, [r7, #12]
}
 810e16c:	4618      	mov	r0, r3
 810e16e:	3710      	adds	r7, #16
 810e170:	46bd      	mov	sp, r7
 810e172:	bd80      	pop	{r7, pc}

0810e174 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810e174:	b580      	push	{r7, lr}
 810e176:	b084      	sub	sp, #16
 810e178:	af00      	add	r7, sp, #0
 810e17a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e17c:	f7ff f84a 	bl	810d214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810e180:	687b      	ldr	r3, [r7, #4]
 810e182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810e184:	687b      	ldr	r3, [r7, #4]
 810e186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810e188:	429a      	cmp	r2, r3
 810e18a:	d102      	bne.n	810e192 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810e18c:	2301      	movs	r3, #1
 810e18e:	60fb      	str	r3, [r7, #12]
 810e190:	e001      	b.n	810e196 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810e192:	2300      	movs	r3, #0
 810e194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e196:	f7ff f86d 	bl	810d274 <vPortExitCritical>

	return xReturn;
 810e19a:	68fb      	ldr	r3, [r7, #12]
}
 810e19c:	4618      	mov	r0, r3
 810e19e:	3710      	adds	r7, #16
 810e1a0:	46bd      	mov	sp, r7
 810e1a2:	bd80      	pop	{r7, pc}

0810e1a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810e1a4:	b580      	push	{r7, lr}
 810e1a6:	b08e      	sub	sp, #56	; 0x38
 810e1a8:	af04      	add	r7, sp, #16
 810e1aa:	60f8      	str	r0, [r7, #12]
 810e1ac:	60b9      	str	r1, [r7, #8]
 810e1ae:	607a      	str	r2, [r7, #4]
 810e1b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810e1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810e1b4:	2b00      	cmp	r3, #0
 810e1b6:	d10a      	bne.n	810e1ce <xTaskCreateStatic+0x2a>
	__asm volatile
 810e1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e1bc:	f383 8811 	msr	BASEPRI, r3
 810e1c0:	f3bf 8f6f 	isb	sy
 810e1c4:	f3bf 8f4f 	dsb	sy
 810e1c8:	623b      	str	r3, [r7, #32]
}
 810e1ca:	bf00      	nop
 810e1cc:	e7fe      	b.n	810e1cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810e1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e1d0:	2b00      	cmp	r3, #0
 810e1d2:	d10a      	bne.n	810e1ea <xTaskCreateStatic+0x46>
	__asm volatile
 810e1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e1d8:	f383 8811 	msr	BASEPRI, r3
 810e1dc:	f3bf 8f6f 	isb	sy
 810e1e0:	f3bf 8f4f 	dsb	sy
 810e1e4:	61fb      	str	r3, [r7, #28]
}
 810e1e6:	bf00      	nop
 810e1e8:	e7fe      	b.n	810e1e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810e1ea:	23b4      	movs	r3, #180	; 0xb4
 810e1ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810e1ee:	693b      	ldr	r3, [r7, #16]
 810e1f0:	2bb4      	cmp	r3, #180	; 0xb4
 810e1f2:	d00a      	beq.n	810e20a <xTaskCreateStatic+0x66>
	__asm volatile
 810e1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e1f8:	f383 8811 	msr	BASEPRI, r3
 810e1fc:	f3bf 8f6f 	isb	sy
 810e200:	f3bf 8f4f 	dsb	sy
 810e204:	61bb      	str	r3, [r7, #24]
}
 810e206:	bf00      	nop
 810e208:	e7fe      	b.n	810e208 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810e20a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810e20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e20e:	2b00      	cmp	r3, #0
 810e210:	d01e      	beq.n	810e250 <xTaskCreateStatic+0xac>
 810e212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810e214:	2b00      	cmp	r3, #0
 810e216:	d01b      	beq.n	810e250 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e21a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810e220:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e224:	2202      	movs	r2, #2
 810e226:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810e22a:	2300      	movs	r3, #0
 810e22c:	9303      	str	r3, [sp, #12]
 810e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e230:	9302      	str	r3, [sp, #8]
 810e232:	f107 0314 	add.w	r3, r7, #20
 810e236:	9301      	str	r3, [sp, #4]
 810e238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e23a:	9300      	str	r3, [sp, #0]
 810e23c:	683b      	ldr	r3, [r7, #0]
 810e23e:	687a      	ldr	r2, [r7, #4]
 810e240:	68b9      	ldr	r1, [r7, #8]
 810e242:	68f8      	ldr	r0, [r7, #12]
 810e244:	f000 f850 	bl	810e2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810e248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810e24a:	f000 f8eb 	bl	810e424 <prvAddNewTaskToReadyList>
 810e24e:	e001      	b.n	810e254 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810e250:	2300      	movs	r3, #0
 810e252:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810e254:	697b      	ldr	r3, [r7, #20]
	}
 810e256:	4618      	mov	r0, r3
 810e258:	3728      	adds	r7, #40	; 0x28
 810e25a:	46bd      	mov	sp, r7
 810e25c:	bd80      	pop	{r7, pc}

0810e25e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810e25e:	b580      	push	{r7, lr}
 810e260:	b08c      	sub	sp, #48	; 0x30
 810e262:	af04      	add	r7, sp, #16
 810e264:	60f8      	str	r0, [r7, #12]
 810e266:	60b9      	str	r1, [r7, #8]
 810e268:	603b      	str	r3, [r7, #0]
 810e26a:	4613      	mov	r3, r2
 810e26c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810e26e:	88fb      	ldrh	r3, [r7, #6]
 810e270:	009b      	lsls	r3, r3, #2
 810e272:	4618      	mov	r0, r3
 810e274:	f7fe fc04 	bl	810ca80 <pvPortMalloc>
 810e278:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810e27a:	697b      	ldr	r3, [r7, #20]
 810e27c:	2b00      	cmp	r3, #0
 810e27e:	d00e      	beq.n	810e29e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810e280:	20b4      	movs	r0, #180	; 0xb4
 810e282:	f7fe fbfd 	bl	810ca80 <pvPortMalloc>
 810e286:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810e288:	69fb      	ldr	r3, [r7, #28]
 810e28a:	2b00      	cmp	r3, #0
 810e28c:	d003      	beq.n	810e296 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810e28e:	69fb      	ldr	r3, [r7, #28]
 810e290:	697a      	ldr	r2, [r7, #20]
 810e292:	631a      	str	r2, [r3, #48]	; 0x30
 810e294:	e005      	b.n	810e2a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810e296:	6978      	ldr	r0, [r7, #20]
 810e298:	f7fe fcbe 	bl	810cc18 <vPortFree>
 810e29c:	e001      	b.n	810e2a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810e29e:	2300      	movs	r3, #0
 810e2a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810e2a2:	69fb      	ldr	r3, [r7, #28]
 810e2a4:	2b00      	cmp	r3, #0
 810e2a6:	d017      	beq.n	810e2d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810e2a8:	69fb      	ldr	r3, [r7, #28]
 810e2aa:	2200      	movs	r2, #0
 810e2ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810e2b0:	88fa      	ldrh	r2, [r7, #6]
 810e2b2:	2300      	movs	r3, #0
 810e2b4:	9303      	str	r3, [sp, #12]
 810e2b6:	69fb      	ldr	r3, [r7, #28]
 810e2b8:	9302      	str	r3, [sp, #8]
 810e2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e2bc:	9301      	str	r3, [sp, #4]
 810e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e2c0:	9300      	str	r3, [sp, #0]
 810e2c2:	683b      	ldr	r3, [r7, #0]
 810e2c4:	68b9      	ldr	r1, [r7, #8]
 810e2c6:	68f8      	ldr	r0, [r7, #12]
 810e2c8:	f000 f80e 	bl	810e2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810e2cc:	69f8      	ldr	r0, [r7, #28]
 810e2ce:	f000 f8a9 	bl	810e424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810e2d2:	2301      	movs	r3, #1
 810e2d4:	61bb      	str	r3, [r7, #24]
 810e2d6:	e002      	b.n	810e2de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810e2d8:	f04f 33ff 	mov.w	r3, #4294967295
 810e2dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810e2de:	69bb      	ldr	r3, [r7, #24]
	}
 810e2e0:	4618      	mov	r0, r3
 810e2e2:	3720      	adds	r7, #32
 810e2e4:	46bd      	mov	sp, r7
 810e2e6:	bd80      	pop	{r7, pc}

0810e2e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810e2e8:	b580      	push	{r7, lr}
 810e2ea:	b088      	sub	sp, #32
 810e2ec:	af00      	add	r7, sp, #0
 810e2ee:	60f8      	str	r0, [r7, #12]
 810e2f0:	60b9      	str	r1, [r7, #8]
 810e2f2:	607a      	str	r2, [r7, #4]
 810e2f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810e2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e2f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810e2fa:	687b      	ldr	r3, [r7, #4]
 810e2fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810e300:	3b01      	subs	r3, #1
 810e302:	009b      	lsls	r3, r3, #2
 810e304:	4413      	add	r3, r2
 810e306:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810e308:	69bb      	ldr	r3, [r7, #24]
 810e30a:	f023 0307 	bic.w	r3, r3, #7
 810e30e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810e310:	69bb      	ldr	r3, [r7, #24]
 810e312:	f003 0307 	and.w	r3, r3, #7
 810e316:	2b00      	cmp	r3, #0
 810e318:	d00a      	beq.n	810e330 <prvInitialiseNewTask+0x48>
	__asm volatile
 810e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e31e:	f383 8811 	msr	BASEPRI, r3
 810e322:	f3bf 8f6f 	isb	sy
 810e326:	f3bf 8f4f 	dsb	sy
 810e32a:	617b      	str	r3, [r7, #20]
}
 810e32c:	bf00      	nop
 810e32e:	e7fe      	b.n	810e32e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810e330:	68bb      	ldr	r3, [r7, #8]
 810e332:	2b00      	cmp	r3, #0
 810e334:	d01f      	beq.n	810e376 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810e336:	2300      	movs	r3, #0
 810e338:	61fb      	str	r3, [r7, #28]
 810e33a:	e012      	b.n	810e362 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810e33c:	68ba      	ldr	r2, [r7, #8]
 810e33e:	69fb      	ldr	r3, [r7, #28]
 810e340:	4413      	add	r3, r2
 810e342:	7819      	ldrb	r1, [r3, #0]
 810e344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e346:	69fb      	ldr	r3, [r7, #28]
 810e348:	4413      	add	r3, r2
 810e34a:	3334      	adds	r3, #52	; 0x34
 810e34c:	460a      	mov	r2, r1
 810e34e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810e350:	68ba      	ldr	r2, [r7, #8]
 810e352:	69fb      	ldr	r3, [r7, #28]
 810e354:	4413      	add	r3, r2
 810e356:	781b      	ldrb	r3, [r3, #0]
 810e358:	2b00      	cmp	r3, #0
 810e35a:	d006      	beq.n	810e36a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810e35c:	69fb      	ldr	r3, [r7, #28]
 810e35e:	3301      	adds	r3, #1
 810e360:	61fb      	str	r3, [r7, #28]
 810e362:	69fb      	ldr	r3, [r7, #28]
 810e364:	2b0f      	cmp	r3, #15
 810e366:	d9e9      	bls.n	810e33c <prvInitialiseNewTask+0x54>
 810e368:	e000      	b.n	810e36c <prvInitialiseNewTask+0x84>
			{
				break;
 810e36a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e36e:	2200      	movs	r2, #0
 810e370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810e374:	e003      	b.n	810e37e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e378:	2200      	movs	r2, #0
 810e37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810e37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e380:	2b06      	cmp	r3, #6
 810e382:	d901      	bls.n	810e388 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810e384:	2306      	movs	r3, #6
 810e386:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e38a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810e38c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810e38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810e392:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 810e394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e396:	2200      	movs	r2, #0
 810e398:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e39c:	3304      	adds	r3, #4
 810e39e:	4618      	mov	r0, r3
 810e3a0:	f7fe fd78 	bl	810ce94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3a6:	3318      	adds	r3, #24
 810e3a8:	4618      	mov	r0, r3
 810e3aa:	f7fe fd73 	bl	810ce94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810e3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e3b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e3b6:	f1c3 0207 	rsb	r2, r3, #7
 810e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e3c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810e3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3c6:	2200      	movs	r2, #0
 810e3c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3ce:	2200      	movs	r2, #0
 810e3d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810e3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3d6:	334c      	adds	r3, #76	; 0x4c
 810e3d8:	2260      	movs	r2, #96	; 0x60
 810e3da:	2100      	movs	r1, #0
 810e3dc:	4618      	mov	r0, r3
 810e3de:	f008 fd26 	bl	8116e2e <memset>
 810e3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3e4:	4a0c      	ldr	r2, [pc, #48]	; (810e418 <prvInitialiseNewTask+0x130>)
 810e3e6:	651a      	str	r2, [r3, #80]	; 0x50
 810e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3ea:	4a0c      	ldr	r2, [pc, #48]	; (810e41c <prvInitialiseNewTask+0x134>)
 810e3ec:	655a      	str	r2, [r3, #84]	; 0x54
 810e3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e3f0:	4a0b      	ldr	r2, [pc, #44]	; (810e420 <prvInitialiseNewTask+0x138>)
 810e3f2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810e3f4:	683a      	ldr	r2, [r7, #0]
 810e3f6:	68f9      	ldr	r1, [r7, #12]
 810e3f8:	69b8      	ldr	r0, [r7, #24]
 810e3fa:	f7fe fddf 	bl	810cfbc <pxPortInitialiseStack>
 810e3fe:	4602      	mov	r2, r0
 810e400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e402:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e406:	2b00      	cmp	r3, #0
 810e408:	d002      	beq.n	810e410 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810e40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e40e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e410:	bf00      	nop
 810e412:	3720      	adds	r7, #32
 810e414:	46bd      	mov	sp, r7
 810e416:	bd80      	pop	{r7, pc}
 810e418:	0811b8d0 	.word	0x0811b8d0
 810e41c:	0811b8f0 	.word	0x0811b8f0
 810e420:	0811b8b0 	.word	0x0811b8b0

0810e424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810e424:	b580      	push	{r7, lr}
 810e426:	b082      	sub	sp, #8
 810e428:	af00      	add	r7, sp, #0
 810e42a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810e42c:	f7fe fef2 	bl	810d214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810e430:	4b2a      	ldr	r3, [pc, #168]	; (810e4dc <prvAddNewTaskToReadyList+0xb8>)
 810e432:	681b      	ldr	r3, [r3, #0]
 810e434:	3301      	adds	r3, #1
 810e436:	4a29      	ldr	r2, [pc, #164]	; (810e4dc <prvAddNewTaskToReadyList+0xb8>)
 810e438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810e43a:	4b29      	ldr	r3, [pc, #164]	; (810e4e0 <prvAddNewTaskToReadyList+0xbc>)
 810e43c:	681b      	ldr	r3, [r3, #0]
 810e43e:	2b00      	cmp	r3, #0
 810e440:	d109      	bne.n	810e456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810e442:	4a27      	ldr	r2, [pc, #156]	; (810e4e0 <prvAddNewTaskToReadyList+0xbc>)
 810e444:	687b      	ldr	r3, [r7, #4]
 810e446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810e448:	4b24      	ldr	r3, [pc, #144]	; (810e4dc <prvAddNewTaskToReadyList+0xb8>)
 810e44a:	681b      	ldr	r3, [r3, #0]
 810e44c:	2b01      	cmp	r3, #1
 810e44e:	d110      	bne.n	810e472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810e450:	f000 fbf8 	bl	810ec44 <prvInitialiseTaskLists>
 810e454:	e00d      	b.n	810e472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810e456:	4b23      	ldr	r3, [pc, #140]	; (810e4e4 <prvAddNewTaskToReadyList+0xc0>)
 810e458:	681b      	ldr	r3, [r3, #0]
 810e45a:	2b00      	cmp	r3, #0
 810e45c:	d109      	bne.n	810e472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810e45e:	4b20      	ldr	r3, [pc, #128]	; (810e4e0 <prvAddNewTaskToReadyList+0xbc>)
 810e460:	681b      	ldr	r3, [r3, #0]
 810e462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e464:	687b      	ldr	r3, [r7, #4]
 810e466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e468:	429a      	cmp	r2, r3
 810e46a:	d802      	bhi.n	810e472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810e46c:	4a1c      	ldr	r2, [pc, #112]	; (810e4e0 <prvAddNewTaskToReadyList+0xbc>)
 810e46e:	687b      	ldr	r3, [r7, #4]
 810e470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810e472:	4b1d      	ldr	r3, [pc, #116]	; (810e4e8 <prvAddNewTaskToReadyList+0xc4>)
 810e474:	681b      	ldr	r3, [r3, #0]
 810e476:	3301      	adds	r3, #1
 810e478:	4a1b      	ldr	r2, [pc, #108]	; (810e4e8 <prvAddNewTaskToReadyList+0xc4>)
 810e47a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810e47c:	687b      	ldr	r3, [r7, #4]
 810e47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e480:	2201      	movs	r2, #1
 810e482:	409a      	lsls	r2, r3
 810e484:	4b19      	ldr	r3, [pc, #100]	; (810e4ec <prvAddNewTaskToReadyList+0xc8>)
 810e486:	681b      	ldr	r3, [r3, #0]
 810e488:	4313      	orrs	r3, r2
 810e48a:	4a18      	ldr	r2, [pc, #96]	; (810e4ec <prvAddNewTaskToReadyList+0xc8>)
 810e48c:	6013      	str	r3, [r2, #0]
 810e48e:	687b      	ldr	r3, [r7, #4]
 810e490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e492:	4613      	mov	r3, r2
 810e494:	009b      	lsls	r3, r3, #2
 810e496:	4413      	add	r3, r2
 810e498:	009b      	lsls	r3, r3, #2
 810e49a:	4a15      	ldr	r2, [pc, #84]	; (810e4f0 <prvAddNewTaskToReadyList+0xcc>)
 810e49c:	441a      	add	r2, r3
 810e49e:	687b      	ldr	r3, [r7, #4]
 810e4a0:	3304      	adds	r3, #4
 810e4a2:	4619      	mov	r1, r3
 810e4a4:	4610      	mov	r0, r2
 810e4a6:	f7fe fd02 	bl	810ceae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810e4aa:	f7fe fee3 	bl	810d274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810e4ae:	4b0d      	ldr	r3, [pc, #52]	; (810e4e4 <prvAddNewTaskToReadyList+0xc0>)
 810e4b0:	681b      	ldr	r3, [r3, #0]
 810e4b2:	2b00      	cmp	r3, #0
 810e4b4:	d00e      	beq.n	810e4d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810e4b6:	4b0a      	ldr	r3, [pc, #40]	; (810e4e0 <prvAddNewTaskToReadyList+0xbc>)
 810e4b8:	681b      	ldr	r3, [r3, #0]
 810e4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e4bc:	687b      	ldr	r3, [r7, #4]
 810e4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e4c0:	429a      	cmp	r2, r3
 810e4c2:	d207      	bcs.n	810e4d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810e4c4:	4b0b      	ldr	r3, [pc, #44]	; (810e4f4 <prvAddNewTaskToReadyList+0xd0>)
 810e4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e4ca:	601a      	str	r2, [r3, #0]
 810e4cc:	f3bf 8f4f 	dsb	sy
 810e4d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e4d4:	bf00      	nop
 810e4d6:	3708      	adds	r7, #8
 810e4d8:	46bd      	mov	sp, r7
 810e4da:	bd80      	pop	{r7, pc}
 810e4dc:	100057e4 	.word	0x100057e4
 810e4e0:	100056e4 	.word	0x100056e4
 810e4e4:	100057f0 	.word	0x100057f0
 810e4e8:	10005800 	.word	0x10005800
 810e4ec:	100057ec 	.word	0x100057ec
 810e4f0:	100056e8 	.word	0x100056e8
 810e4f4:	e000ed04 	.word	0xe000ed04

0810e4f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810e4f8:	b580      	push	{r7, lr}
 810e4fa:	b084      	sub	sp, #16
 810e4fc:	af00      	add	r7, sp, #0
 810e4fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810e500:	2300      	movs	r3, #0
 810e502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810e504:	687b      	ldr	r3, [r7, #4]
 810e506:	2b00      	cmp	r3, #0
 810e508:	d017      	beq.n	810e53a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810e50a:	4b13      	ldr	r3, [pc, #76]	; (810e558 <vTaskDelay+0x60>)
 810e50c:	681b      	ldr	r3, [r3, #0]
 810e50e:	2b00      	cmp	r3, #0
 810e510:	d00a      	beq.n	810e528 <vTaskDelay+0x30>
	__asm volatile
 810e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e516:	f383 8811 	msr	BASEPRI, r3
 810e51a:	f3bf 8f6f 	isb	sy
 810e51e:	f3bf 8f4f 	dsb	sy
 810e522:	60bb      	str	r3, [r7, #8]
}
 810e524:	bf00      	nop
 810e526:	e7fe      	b.n	810e526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810e528:	f000 f884 	bl	810e634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810e52c:	2100      	movs	r1, #0
 810e52e:	6878      	ldr	r0, [r7, #4]
 810e530:	f000 fe06 	bl	810f140 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810e534:	f000 f88c 	bl	810e650 <xTaskResumeAll>
 810e538:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810e53a:	68fb      	ldr	r3, [r7, #12]
 810e53c:	2b00      	cmp	r3, #0
 810e53e:	d107      	bne.n	810e550 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 810e540:	4b06      	ldr	r3, [pc, #24]	; (810e55c <vTaskDelay+0x64>)
 810e542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e546:	601a      	str	r2, [r3, #0]
 810e548:	f3bf 8f4f 	dsb	sy
 810e54c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810e550:	bf00      	nop
 810e552:	3710      	adds	r7, #16
 810e554:	46bd      	mov	sp, r7
 810e556:	bd80      	pop	{r7, pc}
 810e558:	1000580c 	.word	0x1000580c
 810e55c:	e000ed04 	.word	0xe000ed04

0810e560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810e560:	b580      	push	{r7, lr}
 810e562:	b08a      	sub	sp, #40	; 0x28
 810e564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810e566:	2300      	movs	r3, #0
 810e568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810e56a:	2300      	movs	r3, #0
 810e56c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810e56e:	463a      	mov	r2, r7
 810e570:	1d39      	adds	r1, r7, #4
 810e572:	f107 0308 	add.w	r3, r7, #8
 810e576:	4618      	mov	r0, r3
 810e578:	f006 fcee 	bl	8114f58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810e57c:	6839      	ldr	r1, [r7, #0]
 810e57e:	687b      	ldr	r3, [r7, #4]
 810e580:	68ba      	ldr	r2, [r7, #8]
 810e582:	9202      	str	r2, [sp, #8]
 810e584:	9301      	str	r3, [sp, #4]
 810e586:	2300      	movs	r3, #0
 810e588:	9300      	str	r3, [sp, #0]
 810e58a:	2300      	movs	r3, #0
 810e58c:	460a      	mov	r2, r1
 810e58e:	4921      	ldr	r1, [pc, #132]	; (810e614 <vTaskStartScheduler+0xb4>)
 810e590:	4821      	ldr	r0, [pc, #132]	; (810e618 <vTaskStartScheduler+0xb8>)
 810e592:	f7ff fe07 	bl	810e1a4 <xTaskCreateStatic>
 810e596:	4603      	mov	r3, r0
 810e598:	4a20      	ldr	r2, [pc, #128]	; (810e61c <vTaskStartScheduler+0xbc>)
 810e59a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810e59c:	4b1f      	ldr	r3, [pc, #124]	; (810e61c <vTaskStartScheduler+0xbc>)
 810e59e:	681b      	ldr	r3, [r3, #0]
 810e5a0:	2b00      	cmp	r3, #0
 810e5a2:	d002      	beq.n	810e5aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810e5a4:	2301      	movs	r3, #1
 810e5a6:	617b      	str	r3, [r7, #20]
 810e5a8:	e001      	b.n	810e5ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810e5aa:	2300      	movs	r3, #0
 810e5ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810e5ae:	697b      	ldr	r3, [r7, #20]
 810e5b0:	2b01      	cmp	r3, #1
 810e5b2:	d11b      	bne.n	810e5ec <vTaskStartScheduler+0x8c>
	__asm volatile
 810e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e5b8:	f383 8811 	msr	BASEPRI, r3
 810e5bc:	f3bf 8f6f 	isb	sy
 810e5c0:	f3bf 8f4f 	dsb	sy
 810e5c4:	613b      	str	r3, [r7, #16]
}
 810e5c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810e5c8:	4b15      	ldr	r3, [pc, #84]	; (810e620 <vTaskStartScheduler+0xc0>)
 810e5ca:	681b      	ldr	r3, [r3, #0]
 810e5cc:	334c      	adds	r3, #76	; 0x4c
 810e5ce:	4a15      	ldr	r2, [pc, #84]	; (810e624 <vTaskStartScheduler+0xc4>)
 810e5d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810e5d2:	4b15      	ldr	r3, [pc, #84]	; (810e628 <vTaskStartScheduler+0xc8>)
 810e5d4:	f04f 32ff 	mov.w	r2, #4294967295
 810e5d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810e5da:	4b14      	ldr	r3, [pc, #80]	; (810e62c <vTaskStartScheduler+0xcc>)
 810e5dc:	2201      	movs	r2, #1
 810e5de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810e5e0:	4b13      	ldr	r3, [pc, #76]	; (810e630 <vTaskStartScheduler+0xd0>)
 810e5e2:	2200      	movs	r2, #0
 810e5e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810e5e6:	f7fe fd73 	bl	810d0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810e5ea:	e00e      	b.n	810e60a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810e5ec:	697b      	ldr	r3, [r7, #20]
 810e5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e5f2:	d10a      	bne.n	810e60a <vTaskStartScheduler+0xaa>
	__asm volatile
 810e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e5f8:	f383 8811 	msr	BASEPRI, r3
 810e5fc:	f3bf 8f6f 	isb	sy
 810e600:	f3bf 8f4f 	dsb	sy
 810e604:	60fb      	str	r3, [r7, #12]
}
 810e606:	bf00      	nop
 810e608:	e7fe      	b.n	810e608 <vTaskStartScheduler+0xa8>
}
 810e60a:	bf00      	nop
 810e60c:	3718      	adds	r7, #24
 810e60e:	46bd      	mov	sp, r7
 810e610:	bd80      	pop	{r7, pc}
 810e612:	bf00      	nop
 810e614:	08119a30 	.word	0x08119a30
 810e618:	0810ec15 	.word	0x0810ec15
 810e61c:	10005808 	.word	0x10005808
 810e620:	100056e4 	.word	0x100056e4
 810e624:	1000002c 	.word	0x1000002c
 810e628:	10005804 	.word	0x10005804
 810e62c:	100057f0 	.word	0x100057f0
 810e630:	100057e8 	.word	0x100057e8

0810e634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810e634:	b480      	push	{r7}
 810e636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810e638:	4b04      	ldr	r3, [pc, #16]	; (810e64c <vTaskSuspendAll+0x18>)
 810e63a:	681b      	ldr	r3, [r3, #0]
 810e63c:	3301      	adds	r3, #1
 810e63e:	4a03      	ldr	r2, [pc, #12]	; (810e64c <vTaskSuspendAll+0x18>)
 810e640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810e642:	bf00      	nop
 810e644:	46bd      	mov	sp, r7
 810e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e64a:	4770      	bx	lr
 810e64c:	1000580c 	.word	0x1000580c

0810e650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810e650:	b580      	push	{r7, lr}
 810e652:	b084      	sub	sp, #16
 810e654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810e656:	2300      	movs	r3, #0
 810e658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810e65a:	2300      	movs	r3, #0
 810e65c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810e65e:	4b41      	ldr	r3, [pc, #260]	; (810e764 <xTaskResumeAll+0x114>)
 810e660:	681b      	ldr	r3, [r3, #0]
 810e662:	2b00      	cmp	r3, #0
 810e664:	d10a      	bne.n	810e67c <xTaskResumeAll+0x2c>
	__asm volatile
 810e666:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e66a:	f383 8811 	msr	BASEPRI, r3
 810e66e:	f3bf 8f6f 	isb	sy
 810e672:	f3bf 8f4f 	dsb	sy
 810e676:	603b      	str	r3, [r7, #0]
}
 810e678:	bf00      	nop
 810e67a:	e7fe      	b.n	810e67a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810e67c:	f7fe fdca 	bl	810d214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810e680:	4b38      	ldr	r3, [pc, #224]	; (810e764 <xTaskResumeAll+0x114>)
 810e682:	681b      	ldr	r3, [r3, #0]
 810e684:	3b01      	subs	r3, #1
 810e686:	4a37      	ldr	r2, [pc, #220]	; (810e764 <xTaskResumeAll+0x114>)
 810e688:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e68a:	4b36      	ldr	r3, [pc, #216]	; (810e764 <xTaskResumeAll+0x114>)
 810e68c:	681b      	ldr	r3, [r3, #0]
 810e68e:	2b00      	cmp	r3, #0
 810e690:	d161      	bne.n	810e756 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810e692:	4b35      	ldr	r3, [pc, #212]	; (810e768 <xTaskResumeAll+0x118>)
 810e694:	681b      	ldr	r3, [r3, #0]
 810e696:	2b00      	cmp	r3, #0
 810e698:	d05d      	beq.n	810e756 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810e69a:	e02e      	b.n	810e6fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e69c:	4b33      	ldr	r3, [pc, #204]	; (810e76c <xTaskResumeAll+0x11c>)
 810e69e:	68db      	ldr	r3, [r3, #12]
 810e6a0:	68db      	ldr	r3, [r3, #12]
 810e6a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810e6a4:	68fb      	ldr	r3, [r7, #12]
 810e6a6:	3318      	adds	r3, #24
 810e6a8:	4618      	mov	r0, r3
 810e6aa:	f7fe fc5d 	bl	810cf68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e6ae:	68fb      	ldr	r3, [r7, #12]
 810e6b0:	3304      	adds	r3, #4
 810e6b2:	4618      	mov	r0, r3
 810e6b4:	f7fe fc58 	bl	810cf68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810e6b8:	68fb      	ldr	r3, [r7, #12]
 810e6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e6bc:	2201      	movs	r2, #1
 810e6be:	409a      	lsls	r2, r3
 810e6c0:	4b2b      	ldr	r3, [pc, #172]	; (810e770 <xTaskResumeAll+0x120>)
 810e6c2:	681b      	ldr	r3, [r3, #0]
 810e6c4:	4313      	orrs	r3, r2
 810e6c6:	4a2a      	ldr	r2, [pc, #168]	; (810e770 <xTaskResumeAll+0x120>)
 810e6c8:	6013      	str	r3, [r2, #0]
 810e6ca:	68fb      	ldr	r3, [r7, #12]
 810e6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e6ce:	4613      	mov	r3, r2
 810e6d0:	009b      	lsls	r3, r3, #2
 810e6d2:	4413      	add	r3, r2
 810e6d4:	009b      	lsls	r3, r3, #2
 810e6d6:	4a27      	ldr	r2, [pc, #156]	; (810e774 <xTaskResumeAll+0x124>)
 810e6d8:	441a      	add	r2, r3
 810e6da:	68fb      	ldr	r3, [r7, #12]
 810e6dc:	3304      	adds	r3, #4
 810e6de:	4619      	mov	r1, r3
 810e6e0:	4610      	mov	r0, r2
 810e6e2:	f7fe fbe4 	bl	810ceae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e6e6:	68fb      	ldr	r3, [r7, #12]
 810e6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e6ea:	4b23      	ldr	r3, [pc, #140]	; (810e778 <xTaskResumeAll+0x128>)
 810e6ec:	681b      	ldr	r3, [r3, #0]
 810e6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e6f0:	429a      	cmp	r2, r3
 810e6f2:	d302      	bcc.n	810e6fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 810e6f4:	4b21      	ldr	r3, [pc, #132]	; (810e77c <xTaskResumeAll+0x12c>)
 810e6f6:	2201      	movs	r2, #1
 810e6f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810e6fa:	4b1c      	ldr	r3, [pc, #112]	; (810e76c <xTaskResumeAll+0x11c>)
 810e6fc:	681b      	ldr	r3, [r3, #0]
 810e6fe:	2b00      	cmp	r3, #0
 810e700:	d1cc      	bne.n	810e69c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810e702:	68fb      	ldr	r3, [r7, #12]
 810e704:	2b00      	cmp	r3, #0
 810e706:	d001      	beq.n	810e70c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810e708:	f000 fb3e 	bl	810ed88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810e70c:	4b1c      	ldr	r3, [pc, #112]	; (810e780 <xTaskResumeAll+0x130>)
 810e70e:	681b      	ldr	r3, [r3, #0]
 810e710:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810e712:	687b      	ldr	r3, [r7, #4]
 810e714:	2b00      	cmp	r3, #0
 810e716:	d010      	beq.n	810e73a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810e718:	f000 f858 	bl	810e7cc <xTaskIncrementTick>
 810e71c:	4603      	mov	r3, r0
 810e71e:	2b00      	cmp	r3, #0
 810e720:	d002      	beq.n	810e728 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 810e722:	4b16      	ldr	r3, [pc, #88]	; (810e77c <xTaskResumeAll+0x12c>)
 810e724:	2201      	movs	r2, #1
 810e726:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810e728:	687b      	ldr	r3, [r7, #4]
 810e72a:	3b01      	subs	r3, #1
 810e72c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810e72e:	687b      	ldr	r3, [r7, #4]
 810e730:	2b00      	cmp	r3, #0
 810e732:	d1f1      	bne.n	810e718 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 810e734:	4b12      	ldr	r3, [pc, #72]	; (810e780 <xTaskResumeAll+0x130>)
 810e736:	2200      	movs	r2, #0
 810e738:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810e73a:	4b10      	ldr	r3, [pc, #64]	; (810e77c <xTaskResumeAll+0x12c>)
 810e73c:	681b      	ldr	r3, [r3, #0]
 810e73e:	2b00      	cmp	r3, #0
 810e740:	d009      	beq.n	810e756 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810e742:	2301      	movs	r3, #1
 810e744:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810e746:	4b0f      	ldr	r3, [pc, #60]	; (810e784 <xTaskResumeAll+0x134>)
 810e748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e74c:	601a      	str	r2, [r3, #0]
 810e74e:	f3bf 8f4f 	dsb	sy
 810e752:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810e756:	f7fe fd8d 	bl	810d274 <vPortExitCritical>

	return xAlreadyYielded;
 810e75a:	68bb      	ldr	r3, [r7, #8]
}
 810e75c:	4618      	mov	r0, r3
 810e75e:	3710      	adds	r7, #16
 810e760:	46bd      	mov	sp, r7
 810e762:	bd80      	pop	{r7, pc}
 810e764:	1000580c 	.word	0x1000580c
 810e768:	100057e4 	.word	0x100057e4
 810e76c:	100057a4 	.word	0x100057a4
 810e770:	100057ec 	.word	0x100057ec
 810e774:	100056e8 	.word	0x100056e8
 810e778:	100056e4 	.word	0x100056e4
 810e77c:	100057f8 	.word	0x100057f8
 810e780:	100057f4 	.word	0x100057f4
 810e784:	e000ed04 	.word	0xe000ed04

0810e788 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810e788:	b480      	push	{r7}
 810e78a:	b083      	sub	sp, #12
 810e78c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810e78e:	4b05      	ldr	r3, [pc, #20]	; (810e7a4 <xTaskGetTickCount+0x1c>)
 810e790:	681b      	ldr	r3, [r3, #0]
 810e792:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810e794:	687b      	ldr	r3, [r7, #4]
}
 810e796:	4618      	mov	r0, r3
 810e798:	370c      	adds	r7, #12
 810e79a:	46bd      	mov	sp, r7
 810e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e7a0:	4770      	bx	lr
 810e7a2:	bf00      	nop
 810e7a4:	100057e8 	.word	0x100057e8

0810e7a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810e7a8:	b580      	push	{r7, lr}
 810e7aa:	b082      	sub	sp, #8
 810e7ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810e7ae:	f7fe fe13 	bl	810d3d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810e7b2:	2300      	movs	r3, #0
 810e7b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810e7b6:	4b04      	ldr	r3, [pc, #16]	; (810e7c8 <xTaskGetTickCountFromISR+0x20>)
 810e7b8:	681b      	ldr	r3, [r3, #0]
 810e7ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810e7bc:	683b      	ldr	r3, [r7, #0]
}
 810e7be:	4618      	mov	r0, r3
 810e7c0:	3708      	adds	r7, #8
 810e7c2:	46bd      	mov	sp, r7
 810e7c4:	bd80      	pop	{r7, pc}
 810e7c6:	bf00      	nop
 810e7c8:	100057e8 	.word	0x100057e8

0810e7cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810e7cc:	b580      	push	{r7, lr}
 810e7ce:	b086      	sub	sp, #24
 810e7d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810e7d2:	2300      	movs	r3, #0
 810e7d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e7d6:	4b4e      	ldr	r3, [pc, #312]	; (810e910 <xTaskIncrementTick+0x144>)
 810e7d8:	681b      	ldr	r3, [r3, #0]
 810e7da:	2b00      	cmp	r3, #0
 810e7dc:	f040 808e 	bne.w	810e8fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810e7e0:	4b4c      	ldr	r3, [pc, #304]	; (810e914 <xTaskIncrementTick+0x148>)
 810e7e2:	681b      	ldr	r3, [r3, #0]
 810e7e4:	3301      	adds	r3, #1
 810e7e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810e7e8:	4a4a      	ldr	r2, [pc, #296]	; (810e914 <xTaskIncrementTick+0x148>)
 810e7ea:	693b      	ldr	r3, [r7, #16]
 810e7ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810e7ee:	693b      	ldr	r3, [r7, #16]
 810e7f0:	2b00      	cmp	r3, #0
 810e7f2:	d120      	bne.n	810e836 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 810e7f4:	4b48      	ldr	r3, [pc, #288]	; (810e918 <xTaskIncrementTick+0x14c>)
 810e7f6:	681b      	ldr	r3, [r3, #0]
 810e7f8:	681b      	ldr	r3, [r3, #0]
 810e7fa:	2b00      	cmp	r3, #0
 810e7fc:	d00a      	beq.n	810e814 <xTaskIncrementTick+0x48>
	__asm volatile
 810e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e802:	f383 8811 	msr	BASEPRI, r3
 810e806:	f3bf 8f6f 	isb	sy
 810e80a:	f3bf 8f4f 	dsb	sy
 810e80e:	603b      	str	r3, [r7, #0]
}
 810e810:	bf00      	nop
 810e812:	e7fe      	b.n	810e812 <xTaskIncrementTick+0x46>
 810e814:	4b40      	ldr	r3, [pc, #256]	; (810e918 <xTaskIncrementTick+0x14c>)
 810e816:	681b      	ldr	r3, [r3, #0]
 810e818:	60fb      	str	r3, [r7, #12]
 810e81a:	4b40      	ldr	r3, [pc, #256]	; (810e91c <xTaskIncrementTick+0x150>)
 810e81c:	681b      	ldr	r3, [r3, #0]
 810e81e:	4a3e      	ldr	r2, [pc, #248]	; (810e918 <xTaskIncrementTick+0x14c>)
 810e820:	6013      	str	r3, [r2, #0]
 810e822:	4a3e      	ldr	r2, [pc, #248]	; (810e91c <xTaskIncrementTick+0x150>)
 810e824:	68fb      	ldr	r3, [r7, #12]
 810e826:	6013      	str	r3, [r2, #0]
 810e828:	4b3d      	ldr	r3, [pc, #244]	; (810e920 <xTaskIncrementTick+0x154>)
 810e82a:	681b      	ldr	r3, [r3, #0]
 810e82c:	3301      	adds	r3, #1
 810e82e:	4a3c      	ldr	r2, [pc, #240]	; (810e920 <xTaskIncrementTick+0x154>)
 810e830:	6013      	str	r3, [r2, #0]
 810e832:	f000 faa9 	bl	810ed88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810e836:	4b3b      	ldr	r3, [pc, #236]	; (810e924 <xTaskIncrementTick+0x158>)
 810e838:	681b      	ldr	r3, [r3, #0]
 810e83a:	693a      	ldr	r2, [r7, #16]
 810e83c:	429a      	cmp	r2, r3
 810e83e:	d348      	bcc.n	810e8d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e840:	4b35      	ldr	r3, [pc, #212]	; (810e918 <xTaskIncrementTick+0x14c>)
 810e842:	681b      	ldr	r3, [r3, #0]
 810e844:	681b      	ldr	r3, [r3, #0]
 810e846:	2b00      	cmp	r3, #0
 810e848:	d104      	bne.n	810e854 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e84a:	4b36      	ldr	r3, [pc, #216]	; (810e924 <xTaskIncrementTick+0x158>)
 810e84c:	f04f 32ff 	mov.w	r2, #4294967295
 810e850:	601a      	str	r2, [r3, #0]
					break;
 810e852:	e03e      	b.n	810e8d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e854:	4b30      	ldr	r3, [pc, #192]	; (810e918 <xTaskIncrementTick+0x14c>)
 810e856:	681b      	ldr	r3, [r3, #0]
 810e858:	68db      	ldr	r3, [r3, #12]
 810e85a:	68db      	ldr	r3, [r3, #12]
 810e85c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810e85e:	68bb      	ldr	r3, [r7, #8]
 810e860:	685b      	ldr	r3, [r3, #4]
 810e862:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810e864:	693a      	ldr	r2, [r7, #16]
 810e866:	687b      	ldr	r3, [r7, #4]
 810e868:	429a      	cmp	r2, r3
 810e86a:	d203      	bcs.n	810e874 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810e86c:	4a2d      	ldr	r2, [pc, #180]	; (810e924 <xTaskIncrementTick+0x158>)
 810e86e:	687b      	ldr	r3, [r7, #4]
 810e870:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810e872:	e02e      	b.n	810e8d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e874:	68bb      	ldr	r3, [r7, #8]
 810e876:	3304      	adds	r3, #4
 810e878:	4618      	mov	r0, r3
 810e87a:	f7fe fb75 	bl	810cf68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810e87e:	68bb      	ldr	r3, [r7, #8]
 810e880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e882:	2b00      	cmp	r3, #0
 810e884:	d004      	beq.n	810e890 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810e886:	68bb      	ldr	r3, [r7, #8]
 810e888:	3318      	adds	r3, #24
 810e88a:	4618      	mov	r0, r3
 810e88c:	f7fe fb6c 	bl	810cf68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810e890:	68bb      	ldr	r3, [r7, #8]
 810e892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e894:	2201      	movs	r2, #1
 810e896:	409a      	lsls	r2, r3
 810e898:	4b23      	ldr	r3, [pc, #140]	; (810e928 <xTaskIncrementTick+0x15c>)
 810e89a:	681b      	ldr	r3, [r3, #0]
 810e89c:	4313      	orrs	r3, r2
 810e89e:	4a22      	ldr	r2, [pc, #136]	; (810e928 <xTaskIncrementTick+0x15c>)
 810e8a0:	6013      	str	r3, [r2, #0]
 810e8a2:	68bb      	ldr	r3, [r7, #8]
 810e8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8a6:	4613      	mov	r3, r2
 810e8a8:	009b      	lsls	r3, r3, #2
 810e8aa:	4413      	add	r3, r2
 810e8ac:	009b      	lsls	r3, r3, #2
 810e8ae:	4a1f      	ldr	r2, [pc, #124]	; (810e92c <xTaskIncrementTick+0x160>)
 810e8b0:	441a      	add	r2, r3
 810e8b2:	68bb      	ldr	r3, [r7, #8]
 810e8b4:	3304      	adds	r3, #4
 810e8b6:	4619      	mov	r1, r3
 810e8b8:	4610      	mov	r0, r2
 810e8ba:	f7fe faf8 	bl	810ceae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e8be:	68bb      	ldr	r3, [r7, #8]
 810e8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8c2:	4b1b      	ldr	r3, [pc, #108]	; (810e930 <xTaskIncrementTick+0x164>)
 810e8c4:	681b      	ldr	r3, [r3, #0]
 810e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e8c8:	429a      	cmp	r2, r3
 810e8ca:	d3b9      	bcc.n	810e840 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 810e8cc:	2301      	movs	r3, #1
 810e8ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e8d0:	e7b6      	b.n	810e840 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810e8d2:	4b17      	ldr	r3, [pc, #92]	; (810e930 <xTaskIncrementTick+0x164>)
 810e8d4:	681b      	ldr	r3, [r3, #0]
 810e8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8d8:	4914      	ldr	r1, [pc, #80]	; (810e92c <xTaskIncrementTick+0x160>)
 810e8da:	4613      	mov	r3, r2
 810e8dc:	009b      	lsls	r3, r3, #2
 810e8de:	4413      	add	r3, r2
 810e8e0:	009b      	lsls	r3, r3, #2
 810e8e2:	440b      	add	r3, r1
 810e8e4:	681b      	ldr	r3, [r3, #0]
 810e8e6:	2b01      	cmp	r3, #1
 810e8e8:	d901      	bls.n	810e8ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 810e8ea:	2301      	movs	r3, #1
 810e8ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810e8ee:	4b11      	ldr	r3, [pc, #68]	; (810e934 <xTaskIncrementTick+0x168>)
 810e8f0:	681b      	ldr	r3, [r3, #0]
 810e8f2:	2b00      	cmp	r3, #0
 810e8f4:	d007      	beq.n	810e906 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 810e8f6:	2301      	movs	r3, #1
 810e8f8:	617b      	str	r3, [r7, #20]
 810e8fa:	e004      	b.n	810e906 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810e8fc:	4b0e      	ldr	r3, [pc, #56]	; (810e938 <xTaskIncrementTick+0x16c>)
 810e8fe:	681b      	ldr	r3, [r3, #0]
 810e900:	3301      	adds	r3, #1
 810e902:	4a0d      	ldr	r2, [pc, #52]	; (810e938 <xTaskIncrementTick+0x16c>)
 810e904:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810e906:	697b      	ldr	r3, [r7, #20]
}
 810e908:	4618      	mov	r0, r3
 810e90a:	3718      	adds	r7, #24
 810e90c:	46bd      	mov	sp, r7
 810e90e:	bd80      	pop	{r7, pc}
 810e910:	1000580c 	.word	0x1000580c
 810e914:	100057e8 	.word	0x100057e8
 810e918:	1000579c 	.word	0x1000579c
 810e91c:	100057a0 	.word	0x100057a0
 810e920:	100057fc 	.word	0x100057fc
 810e924:	10005804 	.word	0x10005804
 810e928:	100057ec 	.word	0x100057ec
 810e92c:	100056e8 	.word	0x100056e8
 810e930:	100056e4 	.word	0x100056e4
 810e934:	100057f8 	.word	0x100057f8
 810e938:	100057f4 	.word	0x100057f4

0810e93c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810e93c:	b480      	push	{r7}
 810e93e:	b087      	sub	sp, #28
 810e940:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810e942:	4b29      	ldr	r3, [pc, #164]	; (810e9e8 <vTaskSwitchContext+0xac>)
 810e944:	681b      	ldr	r3, [r3, #0]
 810e946:	2b00      	cmp	r3, #0
 810e948:	d003      	beq.n	810e952 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810e94a:	4b28      	ldr	r3, [pc, #160]	; (810e9ec <vTaskSwitchContext+0xb0>)
 810e94c:	2201      	movs	r2, #1
 810e94e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810e950:	e044      	b.n	810e9dc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 810e952:	4b26      	ldr	r3, [pc, #152]	; (810e9ec <vTaskSwitchContext+0xb0>)
 810e954:	2200      	movs	r2, #0
 810e956:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e958:	4b25      	ldr	r3, [pc, #148]	; (810e9f0 <vTaskSwitchContext+0xb4>)
 810e95a:	681b      	ldr	r3, [r3, #0]
 810e95c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 810e95e:	68fb      	ldr	r3, [r7, #12]
 810e960:	fab3 f383 	clz	r3, r3
 810e964:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810e966:	7afb      	ldrb	r3, [r7, #11]
 810e968:	f1c3 031f 	rsb	r3, r3, #31
 810e96c:	617b      	str	r3, [r7, #20]
 810e96e:	4921      	ldr	r1, [pc, #132]	; (810e9f4 <vTaskSwitchContext+0xb8>)
 810e970:	697a      	ldr	r2, [r7, #20]
 810e972:	4613      	mov	r3, r2
 810e974:	009b      	lsls	r3, r3, #2
 810e976:	4413      	add	r3, r2
 810e978:	009b      	lsls	r3, r3, #2
 810e97a:	440b      	add	r3, r1
 810e97c:	681b      	ldr	r3, [r3, #0]
 810e97e:	2b00      	cmp	r3, #0
 810e980:	d10a      	bne.n	810e998 <vTaskSwitchContext+0x5c>
	__asm volatile
 810e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e986:	f383 8811 	msr	BASEPRI, r3
 810e98a:	f3bf 8f6f 	isb	sy
 810e98e:	f3bf 8f4f 	dsb	sy
 810e992:	607b      	str	r3, [r7, #4]
}
 810e994:	bf00      	nop
 810e996:	e7fe      	b.n	810e996 <vTaskSwitchContext+0x5a>
 810e998:	697a      	ldr	r2, [r7, #20]
 810e99a:	4613      	mov	r3, r2
 810e99c:	009b      	lsls	r3, r3, #2
 810e99e:	4413      	add	r3, r2
 810e9a0:	009b      	lsls	r3, r3, #2
 810e9a2:	4a14      	ldr	r2, [pc, #80]	; (810e9f4 <vTaskSwitchContext+0xb8>)
 810e9a4:	4413      	add	r3, r2
 810e9a6:	613b      	str	r3, [r7, #16]
 810e9a8:	693b      	ldr	r3, [r7, #16]
 810e9aa:	685b      	ldr	r3, [r3, #4]
 810e9ac:	685a      	ldr	r2, [r3, #4]
 810e9ae:	693b      	ldr	r3, [r7, #16]
 810e9b0:	605a      	str	r2, [r3, #4]
 810e9b2:	693b      	ldr	r3, [r7, #16]
 810e9b4:	685a      	ldr	r2, [r3, #4]
 810e9b6:	693b      	ldr	r3, [r7, #16]
 810e9b8:	3308      	adds	r3, #8
 810e9ba:	429a      	cmp	r2, r3
 810e9bc:	d104      	bne.n	810e9c8 <vTaskSwitchContext+0x8c>
 810e9be:	693b      	ldr	r3, [r7, #16]
 810e9c0:	685b      	ldr	r3, [r3, #4]
 810e9c2:	685a      	ldr	r2, [r3, #4]
 810e9c4:	693b      	ldr	r3, [r7, #16]
 810e9c6:	605a      	str	r2, [r3, #4]
 810e9c8:	693b      	ldr	r3, [r7, #16]
 810e9ca:	685b      	ldr	r3, [r3, #4]
 810e9cc:	68db      	ldr	r3, [r3, #12]
 810e9ce:	4a0a      	ldr	r2, [pc, #40]	; (810e9f8 <vTaskSwitchContext+0xbc>)
 810e9d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810e9d2:	4b09      	ldr	r3, [pc, #36]	; (810e9f8 <vTaskSwitchContext+0xbc>)
 810e9d4:	681b      	ldr	r3, [r3, #0]
 810e9d6:	334c      	adds	r3, #76	; 0x4c
 810e9d8:	4a08      	ldr	r2, [pc, #32]	; (810e9fc <vTaskSwitchContext+0xc0>)
 810e9da:	6013      	str	r3, [r2, #0]
}
 810e9dc:	bf00      	nop
 810e9de:	371c      	adds	r7, #28
 810e9e0:	46bd      	mov	sp, r7
 810e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e9e6:	4770      	bx	lr
 810e9e8:	1000580c 	.word	0x1000580c
 810e9ec:	100057f8 	.word	0x100057f8
 810e9f0:	100057ec 	.word	0x100057ec
 810e9f4:	100056e8 	.word	0x100056e8
 810e9f8:	100056e4 	.word	0x100056e4
 810e9fc:	1000002c 	.word	0x1000002c

0810ea00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810ea00:	b580      	push	{r7, lr}
 810ea02:	b084      	sub	sp, #16
 810ea04:	af00      	add	r7, sp, #0
 810ea06:	6078      	str	r0, [r7, #4]
 810ea08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810ea0a:	687b      	ldr	r3, [r7, #4]
 810ea0c:	2b00      	cmp	r3, #0
 810ea0e:	d10a      	bne.n	810ea26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810ea10:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ea14:	f383 8811 	msr	BASEPRI, r3
 810ea18:	f3bf 8f6f 	isb	sy
 810ea1c:	f3bf 8f4f 	dsb	sy
 810ea20:	60fb      	str	r3, [r7, #12]
}
 810ea22:	bf00      	nop
 810ea24:	e7fe      	b.n	810ea24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810ea26:	4b07      	ldr	r3, [pc, #28]	; (810ea44 <vTaskPlaceOnEventList+0x44>)
 810ea28:	681b      	ldr	r3, [r3, #0]
 810ea2a:	3318      	adds	r3, #24
 810ea2c:	4619      	mov	r1, r3
 810ea2e:	6878      	ldr	r0, [r7, #4]
 810ea30:	f7fe fa61 	bl	810cef6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810ea34:	2101      	movs	r1, #1
 810ea36:	6838      	ldr	r0, [r7, #0]
 810ea38:	f000 fb82 	bl	810f140 <prvAddCurrentTaskToDelayedList>
}
 810ea3c:	bf00      	nop
 810ea3e:	3710      	adds	r7, #16
 810ea40:	46bd      	mov	sp, r7
 810ea42:	bd80      	pop	{r7, pc}
 810ea44:	100056e4 	.word	0x100056e4

0810ea48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810ea48:	b580      	push	{r7, lr}
 810ea4a:	b086      	sub	sp, #24
 810ea4c:	af00      	add	r7, sp, #0
 810ea4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ea50:	687b      	ldr	r3, [r7, #4]
 810ea52:	68db      	ldr	r3, [r3, #12]
 810ea54:	68db      	ldr	r3, [r3, #12]
 810ea56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810ea58:	693b      	ldr	r3, [r7, #16]
 810ea5a:	2b00      	cmp	r3, #0
 810ea5c:	d10a      	bne.n	810ea74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 810ea5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ea62:	f383 8811 	msr	BASEPRI, r3
 810ea66:	f3bf 8f6f 	isb	sy
 810ea6a:	f3bf 8f4f 	dsb	sy
 810ea6e:	60fb      	str	r3, [r7, #12]
}
 810ea70:	bf00      	nop
 810ea72:	e7fe      	b.n	810ea72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810ea74:	693b      	ldr	r3, [r7, #16]
 810ea76:	3318      	adds	r3, #24
 810ea78:	4618      	mov	r0, r3
 810ea7a:	f7fe fa75 	bl	810cf68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ea7e:	4b1d      	ldr	r3, [pc, #116]	; (810eaf4 <xTaskRemoveFromEventList+0xac>)
 810ea80:	681b      	ldr	r3, [r3, #0]
 810ea82:	2b00      	cmp	r3, #0
 810ea84:	d11c      	bne.n	810eac0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810ea86:	693b      	ldr	r3, [r7, #16]
 810ea88:	3304      	adds	r3, #4
 810ea8a:	4618      	mov	r0, r3
 810ea8c:	f7fe fa6c 	bl	810cf68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810ea90:	693b      	ldr	r3, [r7, #16]
 810ea92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ea94:	2201      	movs	r2, #1
 810ea96:	409a      	lsls	r2, r3
 810ea98:	4b17      	ldr	r3, [pc, #92]	; (810eaf8 <xTaskRemoveFromEventList+0xb0>)
 810ea9a:	681b      	ldr	r3, [r3, #0]
 810ea9c:	4313      	orrs	r3, r2
 810ea9e:	4a16      	ldr	r2, [pc, #88]	; (810eaf8 <xTaskRemoveFromEventList+0xb0>)
 810eaa0:	6013      	str	r3, [r2, #0]
 810eaa2:	693b      	ldr	r3, [r7, #16]
 810eaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810eaa6:	4613      	mov	r3, r2
 810eaa8:	009b      	lsls	r3, r3, #2
 810eaaa:	4413      	add	r3, r2
 810eaac:	009b      	lsls	r3, r3, #2
 810eaae:	4a13      	ldr	r2, [pc, #76]	; (810eafc <xTaskRemoveFromEventList+0xb4>)
 810eab0:	441a      	add	r2, r3
 810eab2:	693b      	ldr	r3, [r7, #16]
 810eab4:	3304      	adds	r3, #4
 810eab6:	4619      	mov	r1, r3
 810eab8:	4610      	mov	r0, r2
 810eaba:	f7fe f9f8 	bl	810ceae <vListInsertEnd>
 810eabe:	e005      	b.n	810eacc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810eac0:	693b      	ldr	r3, [r7, #16]
 810eac2:	3318      	adds	r3, #24
 810eac4:	4619      	mov	r1, r3
 810eac6:	480e      	ldr	r0, [pc, #56]	; (810eb00 <xTaskRemoveFromEventList+0xb8>)
 810eac8:	f7fe f9f1 	bl	810ceae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810eacc:	693b      	ldr	r3, [r7, #16]
 810eace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ead0:	4b0c      	ldr	r3, [pc, #48]	; (810eb04 <xTaskRemoveFromEventList+0xbc>)
 810ead2:	681b      	ldr	r3, [r3, #0]
 810ead4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ead6:	429a      	cmp	r2, r3
 810ead8:	d905      	bls.n	810eae6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810eada:	2301      	movs	r3, #1
 810eadc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810eade:	4b0a      	ldr	r3, [pc, #40]	; (810eb08 <xTaskRemoveFromEventList+0xc0>)
 810eae0:	2201      	movs	r2, #1
 810eae2:	601a      	str	r2, [r3, #0]
 810eae4:	e001      	b.n	810eaea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810eae6:	2300      	movs	r3, #0
 810eae8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810eaea:	697b      	ldr	r3, [r7, #20]
}
 810eaec:	4618      	mov	r0, r3
 810eaee:	3718      	adds	r7, #24
 810eaf0:	46bd      	mov	sp, r7
 810eaf2:	bd80      	pop	{r7, pc}
 810eaf4:	1000580c 	.word	0x1000580c
 810eaf8:	100057ec 	.word	0x100057ec
 810eafc:	100056e8 	.word	0x100056e8
 810eb00:	100057a4 	.word	0x100057a4
 810eb04:	100056e4 	.word	0x100056e4
 810eb08:	100057f8 	.word	0x100057f8

0810eb0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810eb0c:	b480      	push	{r7}
 810eb0e:	b083      	sub	sp, #12
 810eb10:	af00      	add	r7, sp, #0
 810eb12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810eb14:	4b06      	ldr	r3, [pc, #24]	; (810eb30 <vTaskInternalSetTimeOutState+0x24>)
 810eb16:	681a      	ldr	r2, [r3, #0]
 810eb18:	687b      	ldr	r3, [r7, #4]
 810eb1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810eb1c:	4b05      	ldr	r3, [pc, #20]	; (810eb34 <vTaskInternalSetTimeOutState+0x28>)
 810eb1e:	681a      	ldr	r2, [r3, #0]
 810eb20:	687b      	ldr	r3, [r7, #4]
 810eb22:	605a      	str	r2, [r3, #4]
}
 810eb24:	bf00      	nop
 810eb26:	370c      	adds	r7, #12
 810eb28:	46bd      	mov	sp, r7
 810eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb2e:	4770      	bx	lr
 810eb30:	100057fc 	.word	0x100057fc
 810eb34:	100057e8 	.word	0x100057e8

0810eb38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810eb38:	b580      	push	{r7, lr}
 810eb3a:	b088      	sub	sp, #32
 810eb3c:	af00      	add	r7, sp, #0
 810eb3e:	6078      	str	r0, [r7, #4]
 810eb40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810eb42:	687b      	ldr	r3, [r7, #4]
 810eb44:	2b00      	cmp	r3, #0
 810eb46:	d10a      	bne.n	810eb5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 810eb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eb4c:	f383 8811 	msr	BASEPRI, r3
 810eb50:	f3bf 8f6f 	isb	sy
 810eb54:	f3bf 8f4f 	dsb	sy
 810eb58:	613b      	str	r3, [r7, #16]
}
 810eb5a:	bf00      	nop
 810eb5c:	e7fe      	b.n	810eb5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810eb5e:	683b      	ldr	r3, [r7, #0]
 810eb60:	2b00      	cmp	r3, #0
 810eb62:	d10a      	bne.n	810eb7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810eb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eb68:	f383 8811 	msr	BASEPRI, r3
 810eb6c:	f3bf 8f6f 	isb	sy
 810eb70:	f3bf 8f4f 	dsb	sy
 810eb74:	60fb      	str	r3, [r7, #12]
}
 810eb76:	bf00      	nop
 810eb78:	e7fe      	b.n	810eb78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 810eb7a:	f7fe fb4b 	bl	810d214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810eb7e:	4b1d      	ldr	r3, [pc, #116]	; (810ebf4 <xTaskCheckForTimeOut+0xbc>)
 810eb80:	681b      	ldr	r3, [r3, #0]
 810eb82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810eb84:	687b      	ldr	r3, [r7, #4]
 810eb86:	685b      	ldr	r3, [r3, #4]
 810eb88:	69ba      	ldr	r2, [r7, #24]
 810eb8a:	1ad3      	subs	r3, r2, r3
 810eb8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810eb8e:	683b      	ldr	r3, [r7, #0]
 810eb90:	681b      	ldr	r3, [r3, #0]
 810eb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 810eb96:	d102      	bne.n	810eb9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810eb98:	2300      	movs	r3, #0
 810eb9a:	61fb      	str	r3, [r7, #28]
 810eb9c:	e023      	b.n	810ebe6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810eb9e:	687b      	ldr	r3, [r7, #4]
 810eba0:	681a      	ldr	r2, [r3, #0]
 810eba2:	4b15      	ldr	r3, [pc, #84]	; (810ebf8 <xTaskCheckForTimeOut+0xc0>)
 810eba4:	681b      	ldr	r3, [r3, #0]
 810eba6:	429a      	cmp	r2, r3
 810eba8:	d007      	beq.n	810ebba <xTaskCheckForTimeOut+0x82>
 810ebaa:	687b      	ldr	r3, [r7, #4]
 810ebac:	685b      	ldr	r3, [r3, #4]
 810ebae:	69ba      	ldr	r2, [r7, #24]
 810ebb0:	429a      	cmp	r2, r3
 810ebb2:	d302      	bcc.n	810ebba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810ebb4:	2301      	movs	r3, #1
 810ebb6:	61fb      	str	r3, [r7, #28]
 810ebb8:	e015      	b.n	810ebe6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810ebba:	683b      	ldr	r3, [r7, #0]
 810ebbc:	681b      	ldr	r3, [r3, #0]
 810ebbe:	697a      	ldr	r2, [r7, #20]
 810ebc0:	429a      	cmp	r2, r3
 810ebc2:	d20b      	bcs.n	810ebdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810ebc4:	683b      	ldr	r3, [r7, #0]
 810ebc6:	681a      	ldr	r2, [r3, #0]
 810ebc8:	697b      	ldr	r3, [r7, #20]
 810ebca:	1ad2      	subs	r2, r2, r3
 810ebcc:	683b      	ldr	r3, [r7, #0]
 810ebce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810ebd0:	6878      	ldr	r0, [r7, #4]
 810ebd2:	f7ff ff9b 	bl	810eb0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810ebd6:	2300      	movs	r3, #0
 810ebd8:	61fb      	str	r3, [r7, #28]
 810ebda:	e004      	b.n	810ebe6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 810ebdc:	683b      	ldr	r3, [r7, #0]
 810ebde:	2200      	movs	r2, #0
 810ebe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810ebe2:	2301      	movs	r3, #1
 810ebe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810ebe6:	f7fe fb45 	bl	810d274 <vPortExitCritical>

	return xReturn;
 810ebea:	69fb      	ldr	r3, [r7, #28]
}
 810ebec:	4618      	mov	r0, r3
 810ebee:	3720      	adds	r7, #32
 810ebf0:	46bd      	mov	sp, r7
 810ebf2:	bd80      	pop	{r7, pc}
 810ebf4:	100057e8 	.word	0x100057e8
 810ebf8:	100057fc 	.word	0x100057fc

0810ebfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810ebfc:	b480      	push	{r7}
 810ebfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810ec00:	4b03      	ldr	r3, [pc, #12]	; (810ec10 <vTaskMissedYield+0x14>)
 810ec02:	2201      	movs	r2, #1
 810ec04:	601a      	str	r2, [r3, #0]
}
 810ec06:	bf00      	nop
 810ec08:	46bd      	mov	sp, r7
 810ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ec0e:	4770      	bx	lr
 810ec10:	100057f8 	.word	0x100057f8

0810ec14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810ec14:	b580      	push	{r7, lr}
 810ec16:	b082      	sub	sp, #8
 810ec18:	af00      	add	r7, sp, #0
 810ec1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810ec1c:	f000 f852 	bl	810ecc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810ec20:	4b06      	ldr	r3, [pc, #24]	; (810ec3c <prvIdleTask+0x28>)
 810ec22:	681b      	ldr	r3, [r3, #0]
 810ec24:	2b01      	cmp	r3, #1
 810ec26:	d9f9      	bls.n	810ec1c <prvIdleTask+0x8>
			{
				taskYIELD();
 810ec28:	4b05      	ldr	r3, [pc, #20]	; (810ec40 <prvIdleTask+0x2c>)
 810ec2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ec2e:	601a      	str	r2, [r3, #0]
 810ec30:	f3bf 8f4f 	dsb	sy
 810ec34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810ec38:	e7f0      	b.n	810ec1c <prvIdleTask+0x8>
 810ec3a:	bf00      	nop
 810ec3c:	100056e8 	.word	0x100056e8
 810ec40:	e000ed04 	.word	0xe000ed04

0810ec44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810ec44:	b580      	push	{r7, lr}
 810ec46:	b082      	sub	sp, #8
 810ec48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ec4a:	2300      	movs	r3, #0
 810ec4c:	607b      	str	r3, [r7, #4]
 810ec4e:	e00c      	b.n	810ec6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810ec50:	687a      	ldr	r2, [r7, #4]
 810ec52:	4613      	mov	r3, r2
 810ec54:	009b      	lsls	r3, r3, #2
 810ec56:	4413      	add	r3, r2
 810ec58:	009b      	lsls	r3, r3, #2
 810ec5a:	4a12      	ldr	r2, [pc, #72]	; (810eca4 <prvInitialiseTaskLists+0x60>)
 810ec5c:	4413      	add	r3, r2
 810ec5e:	4618      	mov	r0, r3
 810ec60:	f7fe f8f8 	bl	810ce54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ec64:	687b      	ldr	r3, [r7, #4]
 810ec66:	3301      	adds	r3, #1
 810ec68:	607b      	str	r3, [r7, #4]
 810ec6a:	687b      	ldr	r3, [r7, #4]
 810ec6c:	2b06      	cmp	r3, #6
 810ec6e:	d9ef      	bls.n	810ec50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810ec70:	480d      	ldr	r0, [pc, #52]	; (810eca8 <prvInitialiseTaskLists+0x64>)
 810ec72:	f7fe f8ef 	bl	810ce54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810ec76:	480d      	ldr	r0, [pc, #52]	; (810ecac <prvInitialiseTaskLists+0x68>)
 810ec78:	f7fe f8ec 	bl	810ce54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810ec7c:	480c      	ldr	r0, [pc, #48]	; (810ecb0 <prvInitialiseTaskLists+0x6c>)
 810ec7e:	f7fe f8e9 	bl	810ce54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810ec82:	480c      	ldr	r0, [pc, #48]	; (810ecb4 <prvInitialiseTaskLists+0x70>)
 810ec84:	f7fe f8e6 	bl	810ce54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810ec88:	480b      	ldr	r0, [pc, #44]	; (810ecb8 <prvInitialiseTaskLists+0x74>)
 810ec8a:	f7fe f8e3 	bl	810ce54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810ec8e:	4b0b      	ldr	r3, [pc, #44]	; (810ecbc <prvInitialiseTaskLists+0x78>)
 810ec90:	4a05      	ldr	r2, [pc, #20]	; (810eca8 <prvInitialiseTaskLists+0x64>)
 810ec92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810ec94:	4b0a      	ldr	r3, [pc, #40]	; (810ecc0 <prvInitialiseTaskLists+0x7c>)
 810ec96:	4a05      	ldr	r2, [pc, #20]	; (810ecac <prvInitialiseTaskLists+0x68>)
 810ec98:	601a      	str	r2, [r3, #0]
}
 810ec9a:	bf00      	nop
 810ec9c:	3708      	adds	r7, #8
 810ec9e:	46bd      	mov	sp, r7
 810eca0:	bd80      	pop	{r7, pc}
 810eca2:	bf00      	nop
 810eca4:	100056e8 	.word	0x100056e8
 810eca8:	10005774 	.word	0x10005774
 810ecac:	10005788 	.word	0x10005788
 810ecb0:	100057a4 	.word	0x100057a4
 810ecb4:	100057b8 	.word	0x100057b8
 810ecb8:	100057d0 	.word	0x100057d0
 810ecbc:	1000579c 	.word	0x1000579c
 810ecc0:	100057a0 	.word	0x100057a0

0810ecc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810ecc4:	b580      	push	{r7, lr}
 810ecc6:	b082      	sub	sp, #8
 810ecc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810ecca:	e019      	b.n	810ed00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810eccc:	f7fe faa2 	bl	810d214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ecd0:	4b10      	ldr	r3, [pc, #64]	; (810ed14 <prvCheckTasksWaitingTermination+0x50>)
 810ecd2:	68db      	ldr	r3, [r3, #12]
 810ecd4:	68db      	ldr	r3, [r3, #12]
 810ecd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ecd8:	687b      	ldr	r3, [r7, #4]
 810ecda:	3304      	adds	r3, #4
 810ecdc:	4618      	mov	r0, r3
 810ecde:	f7fe f943 	bl	810cf68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810ece2:	4b0d      	ldr	r3, [pc, #52]	; (810ed18 <prvCheckTasksWaitingTermination+0x54>)
 810ece4:	681b      	ldr	r3, [r3, #0]
 810ece6:	3b01      	subs	r3, #1
 810ece8:	4a0b      	ldr	r2, [pc, #44]	; (810ed18 <prvCheckTasksWaitingTermination+0x54>)
 810ecea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810ecec:	4b0b      	ldr	r3, [pc, #44]	; (810ed1c <prvCheckTasksWaitingTermination+0x58>)
 810ecee:	681b      	ldr	r3, [r3, #0]
 810ecf0:	3b01      	subs	r3, #1
 810ecf2:	4a0a      	ldr	r2, [pc, #40]	; (810ed1c <prvCheckTasksWaitingTermination+0x58>)
 810ecf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810ecf6:	f7fe fabd 	bl	810d274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810ecfa:	6878      	ldr	r0, [r7, #4]
 810ecfc:	f000 f810 	bl	810ed20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810ed00:	4b06      	ldr	r3, [pc, #24]	; (810ed1c <prvCheckTasksWaitingTermination+0x58>)
 810ed02:	681b      	ldr	r3, [r3, #0]
 810ed04:	2b00      	cmp	r3, #0
 810ed06:	d1e1      	bne.n	810eccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810ed08:	bf00      	nop
 810ed0a:	bf00      	nop
 810ed0c:	3708      	adds	r7, #8
 810ed0e:	46bd      	mov	sp, r7
 810ed10:	bd80      	pop	{r7, pc}
 810ed12:	bf00      	nop
 810ed14:	100057b8 	.word	0x100057b8
 810ed18:	100057e4 	.word	0x100057e4
 810ed1c:	100057cc 	.word	0x100057cc

0810ed20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810ed20:	b580      	push	{r7, lr}
 810ed22:	b084      	sub	sp, #16
 810ed24:	af00      	add	r7, sp, #0
 810ed26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810ed28:	687b      	ldr	r3, [r7, #4]
 810ed2a:	334c      	adds	r3, #76	; 0x4c
 810ed2c:	4618      	mov	r0, r3
 810ed2e:	f008 fe27 	bl	8117980 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810ed32:	687b      	ldr	r3, [r7, #4]
 810ed34:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 810ed38:	2b00      	cmp	r3, #0
 810ed3a:	d108      	bne.n	810ed4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810ed3c:	687b      	ldr	r3, [r7, #4]
 810ed3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ed40:	4618      	mov	r0, r3
 810ed42:	f7fd ff69 	bl	810cc18 <vPortFree>
				vPortFree( pxTCB );
 810ed46:	6878      	ldr	r0, [r7, #4]
 810ed48:	f7fd ff66 	bl	810cc18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810ed4c:	e018      	b.n	810ed80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810ed4e:	687b      	ldr	r3, [r7, #4]
 810ed50:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 810ed54:	2b01      	cmp	r3, #1
 810ed56:	d103      	bne.n	810ed60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810ed58:	6878      	ldr	r0, [r7, #4]
 810ed5a:	f7fd ff5d 	bl	810cc18 <vPortFree>
	}
 810ed5e:	e00f      	b.n	810ed80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810ed60:	687b      	ldr	r3, [r7, #4]
 810ed62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 810ed66:	2b02      	cmp	r3, #2
 810ed68:	d00a      	beq.n	810ed80 <prvDeleteTCB+0x60>
	__asm volatile
 810ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ed6e:	f383 8811 	msr	BASEPRI, r3
 810ed72:	f3bf 8f6f 	isb	sy
 810ed76:	f3bf 8f4f 	dsb	sy
 810ed7a:	60fb      	str	r3, [r7, #12]
}
 810ed7c:	bf00      	nop
 810ed7e:	e7fe      	b.n	810ed7e <prvDeleteTCB+0x5e>
	}
 810ed80:	bf00      	nop
 810ed82:	3710      	adds	r7, #16
 810ed84:	46bd      	mov	sp, r7
 810ed86:	bd80      	pop	{r7, pc}

0810ed88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810ed88:	b480      	push	{r7}
 810ed8a:	b083      	sub	sp, #12
 810ed8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ed8e:	4b0c      	ldr	r3, [pc, #48]	; (810edc0 <prvResetNextTaskUnblockTime+0x38>)
 810ed90:	681b      	ldr	r3, [r3, #0]
 810ed92:	681b      	ldr	r3, [r3, #0]
 810ed94:	2b00      	cmp	r3, #0
 810ed96:	d104      	bne.n	810eda2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810ed98:	4b0a      	ldr	r3, [pc, #40]	; (810edc4 <prvResetNextTaskUnblockTime+0x3c>)
 810ed9a:	f04f 32ff 	mov.w	r2, #4294967295
 810ed9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810eda0:	e008      	b.n	810edb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810eda2:	4b07      	ldr	r3, [pc, #28]	; (810edc0 <prvResetNextTaskUnblockTime+0x38>)
 810eda4:	681b      	ldr	r3, [r3, #0]
 810eda6:	68db      	ldr	r3, [r3, #12]
 810eda8:	68db      	ldr	r3, [r3, #12]
 810edaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810edac:	687b      	ldr	r3, [r7, #4]
 810edae:	685b      	ldr	r3, [r3, #4]
 810edb0:	4a04      	ldr	r2, [pc, #16]	; (810edc4 <prvResetNextTaskUnblockTime+0x3c>)
 810edb2:	6013      	str	r3, [r2, #0]
}
 810edb4:	bf00      	nop
 810edb6:	370c      	adds	r7, #12
 810edb8:	46bd      	mov	sp, r7
 810edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810edbe:	4770      	bx	lr
 810edc0:	1000579c 	.word	0x1000579c
 810edc4:	10005804 	.word	0x10005804

0810edc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810edc8:	b480      	push	{r7}
 810edca:	b083      	sub	sp, #12
 810edcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810edce:	4b0b      	ldr	r3, [pc, #44]	; (810edfc <xTaskGetSchedulerState+0x34>)
 810edd0:	681b      	ldr	r3, [r3, #0]
 810edd2:	2b00      	cmp	r3, #0
 810edd4:	d102      	bne.n	810eddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810edd6:	2301      	movs	r3, #1
 810edd8:	607b      	str	r3, [r7, #4]
 810edda:	e008      	b.n	810edee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810eddc:	4b08      	ldr	r3, [pc, #32]	; (810ee00 <xTaskGetSchedulerState+0x38>)
 810edde:	681b      	ldr	r3, [r3, #0]
 810ede0:	2b00      	cmp	r3, #0
 810ede2:	d102      	bne.n	810edea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810ede4:	2302      	movs	r3, #2
 810ede6:	607b      	str	r3, [r7, #4]
 810ede8:	e001      	b.n	810edee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810edea:	2300      	movs	r3, #0
 810edec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810edee:	687b      	ldr	r3, [r7, #4]
	}
 810edf0:	4618      	mov	r0, r3
 810edf2:	370c      	adds	r7, #12
 810edf4:	46bd      	mov	sp, r7
 810edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810edfa:	4770      	bx	lr
 810edfc:	100057f0 	.word	0x100057f0
 810ee00:	1000580c 	.word	0x1000580c

0810ee04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810ee04:	b580      	push	{r7, lr}
 810ee06:	b084      	sub	sp, #16
 810ee08:	af00      	add	r7, sp, #0
 810ee0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810ee0c:	687b      	ldr	r3, [r7, #4]
 810ee0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810ee10:	2300      	movs	r3, #0
 810ee12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810ee14:	687b      	ldr	r3, [r7, #4]
 810ee16:	2b00      	cmp	r3, #0
 810ee18:	d05e      	beq.n	810eed8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810ee1a:	68bb      	ldr	r3, [r7, #8]
 810ee1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ee1e:	4b31      	ldr	r3, [pc, #196]	; (810eee4 <xTaskPriorityInherit+0xe0>)
 810ee20:	681b      	ldr	r3, [r3, #0]
 810ee22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ee24:	429a      	cmp	r2, r3
 810ee26:	d24e      	bcs.n	810eec6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810ee28:	68bb      	ldr	r3, [r7, #8]
 810ee2a:	699b      	ldr	r3, [r3, #24]
 810ee2c:	2b00      	cmp	r3, #0
 810ee2e:	db06      	blt.n	810ee3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ee30:	4b2c      	ldr	r3, [pc, #176]	; (810eee4 <xTaskPriorityInherit+0xe0>)
 810ee32:	681b      	ldr	r3, [r3, #0]
 810ee34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ee36:	f1c3 0207 	rsb	r2, r3, #7
 810ee3a:	68bb      	ldr	r3, [r7, #8]
 810ee3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810ee3e:	68bb      	ldr	r3, [r7, #8]
 810ee40:	6959      	ldr	r1, [r3, #20]
 810ee42:	68bb      	ldr	r3, [r7, #8]
 810ee44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ee46:	4613      	mov	r3, r2
 810ee48:	009b      	lsls	r3, r3, #2
 810ee4a:	4413      	add	r3, r2
 810ee4c:	009b      	lsls	r3, r3, #2
 810ee4e:	4a26      	ldr	r2, [pc, #152]	; (810eee8 <xTaskPriorityInherit+0xe4>)
 810ee50:	4413      	add	r3, r2
 810ee52:	4299      	cmp	r1, r3
 810ee54:	d12f      	bne.n	810eeb6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ee56:	68bb      	ldr	r3, [r7, #8]
 810ee58:	3304      	adds	r3, #4
 810ee5a:	4618      	mov	r0, r3
 810ee5c:	f7fe f884 	bl	810cf68 <uxListRemove>
 810ee60:	4603      	mov	r3, r0
 810ee62:	2b00      	cmp	r3, #0
 810ee64:	d10a      	bne.n	810ee7c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 810ee66:	68bb      	ldr	r3, [r7, #8]
 810ee68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ee6a:	2201      	movs	r2, #1
 810ee6c:	fa02 f303 	lsl.w	r3, r2, r3
 810ee70:	43da      	mvns	r2, r3
 810ee72:	4b1e      	ldr	r3, [pc, #120]	; (810eeec <xTaskPriorityInherit+0xe8>)
 810ee74:	681b      	ldr	r3, [r3, #0]
 810ee76:	4013      	ands	r3, r2
 810ee78:	4a1c      	ldr	r2, [pc, #112]	; (810eeec <xTaskPriorityInherit+0xe8>)
 810ee7a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810ee7c:	4b19      	ldr	r3, [pc, #100]	; (810eee4 <xTaskPriorityInherit+0xe0>)
 810ee7e:	681b      	ldr	r3, [r3, #0]
 810ee80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ee82:	68bb      	ldr	r3, [r7, #8]
 810ee84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810ee86:	68bb      	ldr	r3, [r7, #8]
 810ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ee8a:	2201      	movs	r2, #1
 810ee8c:	409a      	lsls	r2, r3
 810ee8e:	4b17      	ldr	r3, [pc, #92]	; (810eeec <xTaskPriorityInherit+0xe8>)
 810ee90:	681b      	ldr	r3, [r3, #0]
 810ee92:	4313      	orrs	r3, r2
 810ee94:	4a15      	ldr	r2, [pc, #84]	; (810eeec <xTaskPriorityInherit+0xe8>)
 810ee96:	6013      	str	r3, [r2, #0]
 810ee98:	68bb      	ldr	r3, [r7, #8]
 810ee9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ee9c:	4613      	mov	r3, r2
 810ee9e:	009b      	lsls	r3, r3, #2
 810eea0:	4413      	add	r3, r2
 810eea2:	009b      	lsls	r3, r3, #2
 810eea4:	4a10      	ldr	r2, [pc, #64]	; (810eee8 <xTaskPriorityInherit+0xe4>)
 810eea6:	441a      	add	r2, r3
 810eea8:	68bb      	ldr	r3, [r7, #8]
 810eeaa:	3304      	adds	r3, #4
 810eeac:	4619      	mov	r1, r3
 810eeae:	4610      	mov	r0, r2
 810eeb0:	f7fd fffd 	bl	810ceae <vListInsertEnd>
 810eeb4:	e004      	b.n	810eec0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810eeb6:	4b0b      	ldr	r3, [pc, #44]	; (810eee4 <xTaskPriorityInherit+0xe0>)
 810eeb8:	681b      	ldr	r3, [r3, #0]
 810eeba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810eebc:	68bb      	ldr	r3, [r7, #8]
 810eebe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810eec0:	2301      	movs	r3, #1
 810eec2:	60fb      	str	r3, [r7, #12]
 810eec4:	e008      	b.n	810eed8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810eec6:	68bb      	ldr	r3, [r7, #8]
 810eec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810eeca:	4b06      	ldr	r3, [pc, #24]	; (810eee4 <xTaskPriorityInherit+0xe0>)
 810eecc:	681b      	ldr	r3, [r3, #0]
 810eece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810eed0:	429a      	cmp	r2, r3
 810eed2:	d201      	bcs.n	810eed8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810eed4:	2301      	movs	r3, #1
 810eed6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810eed8:	68fb      	ldr	r3, [r7, #12]
	}
 810eeda:	4618      	mov	r0, r3
 810eedc:	3710      	adds	r7, #16
 810eede:	46bd      	mov	sp, r7
 810eee0:	bd80      	pop	{r7, pc}
 810eee2:	bf00      	nop
 810eee4:	100056e4 	.word	0x100056e4
 810eee8:	100056e8 	.word	0x100056e8
 810eeec:	100057ec 	.word	0x100057ec

0810eef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810eef0:	b580      	push	{r7, lr}
 810eef2:	b086      	sub	sp, #24
 810eef4:	af00      	add	r7, sp, #0
 810eef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810eef8:	687b      	ldr	r3, [r7, #4]
 810eefa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810eefc:	2300      	movs	r3, #0
 810eefe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810ef00:	687b      	ldr	r3, [r7, #4]
 810ef02:	2b00      	cmp	r3, #0
 810ef04:	d06e      	beq.n	810efe4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810ef06:	4b3a      	ldr	r3, [pc, #232]	; (810eff0 <xTaskPriorityDisinherit+0x100>)
 810ef08:	681b      	ldr	r3, [r3, #0]
 810ef0a:	693a      	ldr	r2, [r7, #16]
 810ef0c:	429a      	cmp	r2, r3
 810ef0e:	d00a      	beq.n	810ef26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810ef10:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef14:	f383 8811 	msr	BASEPRI, r3
 810ef18:	f3bf 8f6f 	isb	sy
 810ef1c:	f3bf 8f4f 	dsb	sy
 810ef20:	60fb      	str	r3, [r7, #12]
}
 810ef22:	bf00      	nop
 810ef24:	e7fe      	b.n	810ef24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810ef26:	693b      	ldr	r3, [r7, #16]
 810ef28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810ef2a:	2b00      	cmp	r3, #0
 810ef2c:	d10a      	bne.n	810ef44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810ef2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef32:	f383 8811 	msr	BASEPRI, r3
 810ef36:	f3bf 8f6f 	isb	sy
 810ef3a:	f3bf 8f4f 	dsb	sy
 810ef3e:	60bb      	str	r3, [r7, #8]
}
 810ef40:	bf00      	nop
 810ef42:	e7fe      	b.n	810ef42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 810ef44:	693b      	ldr	r3, [r7, #16]
 810ef46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810ef48:	1e5a      	subs	r2, r3, #1
 810ef4a:	693b      	ldr	r3, [r7, #16]
 810ef4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810ef4e:	693b      	ldr	r3, [r7, #16]
 810ef50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ef52:	693b      	ldr	r3, [r7, #16]
 810ef54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810ef56:	429a      	cmp	r2, r3
 810ef58:	d044      	beq.n	810efe4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810ef5a:	693b      	ldr	r3, [r7, #16]
 810ef5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810ef5e:	2b00      	cmp	r3, #0
 810ef60:	d140      	bne.n	810efe4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ef62:	693b      	ldr	r3, [r7, #16]
 810ef64:	3304      	adds	r3, #4
 810ef66:	4618      	mov	r0, r3
 810ef68:	f7fd fffe 	bl	810cf68 <uxListRemove>
 810ef6c:	4603      	mov	r3, r0
 810ef6e:	2b00      	cmp	r3, #0
 810ef70:	d115      	bne.n	810ef9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810ef72:	693b      	ldr	r3, [r7, #16]
 810ef74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ef76:	491f      	ldr	r1, [pc, #124]	; (810eff4 <xTaskPriorityDisinherit+0x104>)
 810ef78:	4613      	mov	r3, r2
 810ef7a:	009b      	lsls	r3, r3, #2
 810ef7c:	4413      	add	r3, r2
 810ef7e:	009b      	lsls	r3, r3, #2
 810ef80:	440b      	add	r3, r1
 810ef82:	681b      	ldr	r3, [r3, #0]
 810ef84:	2b00      	cmp	r3, #0
 810ef86:	d10a      	bne.n	810ef9e <xTaskPriorityDisinherit+0xae>
 810ef88:	693b      	ldr	r3, [r7, #16]
 810ef8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ef8c:	2201      	movs	r2, #1
 810ef8e:	fa02 f303 	lsl.w	r3, r2, r3
 810ef92:	43da      	mvns	r2, r3
 810ef94:	4b18      	ldr	r3, [pc, #96]	; (810eff8 <xTaskPriorityDisinherit+0x108>)
 810ef96:	681b      	ldr	r3, [r3, #0]
 810ef98:	4013      	ands	r3, r2
 810ef9a:	4a17      	ldr	r2, [pc, #92]	; (810eff8 <xTaskPriorityDisinherit+0x108>)
 810ef9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810ef9e:	693b      	ldr	r3, [r7, #16]
 810efa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810efa2:	693b      	ldr	r3, [r7, #16]
 810efa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810efa6:	693b      	ldr	r3, [r7, #16]
 810efa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810efaa:	f1c3 0207 	rsb	r2, r3, #7
 810efae:	693b      	ldr	r3, [r7, #16]
 810efb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810efb2:	693b      	ldr	r3, [r7, #16]
 810efb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810efb6:	2201      	movs	r2, #1
 810efb8:	409a      	lsls	r2, r3
 810efba:	4b0f      	ldr	r3, [pc, #60]	; (810eff8 <xTaskPriorityDisinherit+0x108>)
 810efbc:	681b      	ldr	r3, [r3, #0]
 810efbe:	4313      	orrs	r3, r2
 810efc0:	4a0d      	ldr	r2, [pc, #52]	; (810eff8 <xTaskPriorityDisinherit+0x108>)
 810efc2:	6013      	str	r3, [r2, #0]
 810efc4:	693b      	ldr	r3, [r7, #16]
 810efc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810efc8:	4613      	mov	r3, r2
 810efca:	009b      	lsls	r3, r3, #2
 810efcc:	4413      	add	r3, r2
 810efce:	009b      	lsls	r3, r3, #2
 810efd0:	4a08      	ldr	r2, [pc, #32]	; (810eff4 <xTaskPriorityDisinherit+0x104>)
 810efd2:	441a      	add	r2, r3
 810efd4:	693b      	ldr	r3, [r7, #16]
 810efd6:	3304      	adds	r3, #4
 810efd8:	4619      	mov	r1, r3
 810efda:	4610      	mov	r0, r2
 810efdc:	f7fd ff67 	bl	810ceae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810efe0:	2301      	movs	r3, #1
 810efe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810efe4:	697b      	ldr	r3, [r7, #20]
	}
 810efe6:	4618      	mov	r0, r3
 810efe8:	3718      	adds	r7, #24
 810efea:	46bd      	mov	sp, r7
 810efec:	bd80      	pop	{r7, pc}
 810efee:	bf00      	nop
 810eff0:	100056e4 	.word	0x100056e4
 810eff4:	100056e8 	.word	0x100056e8
 810eff8:	100057ec 	.word	0x100057ec

0810effc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810effc:	b580      	push	{r7, lr}
 810effe:	b088      	sub	sp, #32
 810f000:	af00      	add	r7, sp, #0
 810f002:	6078      	str	r0, [r7, #4]
 810f004:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810f006:	687b      	ldr	r3, [r7, #4]
 810f008:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810f00a:	2301      	movs	r3, #1
 810f00c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810f00e:	687b      	ldr	r3, [r7, #4]
 810f010:	2b00      	cmp	r3, #0
 810f012:	d077      	beq.n	810f104 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810f014:	69bb      	ldr	r3, [r7, #24]
 810f016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810f018:	2b00      	cmp	r3, #0
 810f01a:	d10a      	bne.n	810f032 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 810f01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f020:	f383 8811 	msr	BASEPRI, r3
 810f024:	f3bf 8f6f 	isb	sy
 810f028:	f3bf 8f4f 	dsb	sy
 810f02c:	60fb      	str	r3, [r7, #12]
}
 810f02e:	bf00      	nop
 810f030:	e7fe      	b.n	810f030 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810f032:	69bb      	ldr	r3, [r7, #24]
 810f034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810f036:	683a      	ldr	r2, [r7, #0]
 810f038:	429a      	cmp	r2, r3
 810f03a:	d902      	bls.n	810f042 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810f03c:	683b      	ldr	r3, [r7, #0]
 810f03e:	61fb      	str	r3, [r7, #28]
 810f040:	e002      	b.n	810f048 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810f042:	69bb      	ldr	r3, [r7, #24]
 810f044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810f046:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810f048:	69bb      	ldr	r3, [r7, #24]
 810f04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f04c:	69fa      	ldr	r2, [r7, #28]
 810f04e:	429a      	cmp	r2, r3
 810f050:	d058      	beq.n	810f104 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810f052:	69bb      	ldr	r3, [r7, #24]
 810f054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810f056:	697a      	ldr	r2, [r7, #20]
 810f058:	429a      	cmp	r2, r3
 810f05a:	d153      	bne.n	810f104 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810f05c:	4b2b      	ldr	r3, [pc, #172]	; (810f10c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 810f05e:	681b      	ldr	r3, [r3, #0]
 810f060:	69ba      	ldr	r2, [r7, #24]
 810f062:	429a      	cmp	r2, r3
 810f064:	d10a      	bne.n	810f07c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 810f066:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f06a:	f383 8811 	msr	BASEPRI, r3
 810f06e:	f3bf 8f6f 	isb	sy
 810f072:	f3bf 8f4f 	dsb	sy
 810f076:	60bb      	str	r3, [r7, #8]
}
 810f078:	bf00      	nop
 810f07a:	e7fe      	b.n	810f07a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810f07c:	69bb      	ldr	r3, [r7, #24]
 810f07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f080:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810f082:	69bb      	ldr	r3, [r7, #24]
 810f084:	69fa      	ldr	r2, [r7, #28]
 810f086:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810f088:	69bb      	ldr	r3, [r7, #24]
 810f08a:	699b      	ldr	r3, [r3, #24]
 810f08c:	2b00      	cmp	r3, #0
 810f08e:	db04      	blt.n	810f09a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f090:	69fb      	ldr	r3, [r7, #28]
 810f092:	f1c3 0207 	rsb	r2, r3, #7
 810f096:	69bb      	ldr	r3, [r7, #24]
 810f098:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810f09a:	69bb      	ldr	r3, [r7, #24]
 810f09c:	6959      	ldr	r1, [r3, #20]
 810f09e:	693a      	ldr	r2, [r7, #16]
 810f0a0:	4613      	mov	r3, r2
 810f0a2:	009b      	lsls	r3, r3, #2
 810f0a4:	4413      	add	r3, r2
 810f0a6:	009b      	lsls	r3, r3, #2
 810f0a8:	4a19      	ldr	r2, [pc, #100]	; (810f110 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 810f0aa:	4413      	add	r3, r2
 810f0ac:	4299      	cmp	r1, r3
 810f0ae:	d129      	bne.n	810f104 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810f0b0:	69bb      	ldr	r3, [r7, #24]
 810f0b2:	3304      	adds	r3, #4
 810f0b4:	4618      	mov	r0, r3
 810f0b6:	f7fd ff57 	bl	810cf68 <uxListRemove>
 810f0ba:	4603      	mov	r3, r0
 810f0bc:	2b00      	cmp	r3, #0
 810f0be:	d10a      	bne.n	810f0d6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 810f0c0:	69bb      	ldr	r3, [r7, #24]
 810f0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f0c4:	2201      	movs	r2, #1
 810f0c6:	fa02 f303 	lsl.w	r3, r2, r3
 810f0ca:	43da      	mvns	r2, r3
 810f0cc:	4b11      	ldr	r3, [pc, #68]	; (810f114 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810f0ce:	681b      	ldr	r3, [r3, #0]
 810f0d0:	4013      	ands	r3, r2
 810f0d2:	4a10      	ldr	r2, [pc, #64]	; (810f114 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810f0d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810f0d6:	69bb      	ldr	r3, [r7, #24]
 810f0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f0da:	2201      	movs	r2, #1
 810f0dc:	409a      	lsls	r2, r3
 810f0de:	4b0d      	ldr	r3, [pc, #52]	; (810f114 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810f0e0:	681b      	ldr	r3, [r3, #0]
 810f0e2:	4313      	orrs	r3, r2
 810f0e4:	4a0b      	ldr	r2, [pc, #44]	; (810f114 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 810f0e6:	6013      	str	r3, [r2, #0]
 810f0e8:	69bb      	ldr	r3, [r7, #24]
 810f0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810f0ec:	4613      	mov	r3, r2
 810f0ee:	009b      	lsls	r3, r3, #2
 810f0f0:	4413      	add	r3, r2
 810f0f2:	009b      	lsls	r3, r3, #2
 810f0f4:	4a06      	ldr	r2, [pc, #24]	; (810f110 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 810f0f6:	441a      	add	r2, r3
 810f0f8:	69bb      	ldr	r3, [r7, #24]
 810f0fa:	3304      	adds	r3, #4
 810f0fc:	4619      	mov	r1, r3
 810f0fe:	4610      	mov	r0, r2
 810f100:	f7fd fed5 	bl	810ceae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810f104:	bf00      	nop
 810f106:	3720      	adds	r7, #32
 810f108:	46bd      	mov	sp, r7
 810f10a:	bd80      	pop	{r7, pc}
 810f10c:	100056e4 	.word	0x100056e4
 810f110:	100056e8 	.word	0x100056e8
 810f114:	100057ec 	.word	0x100057ec

0810f118 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810f118:	b480      	push	{r7}
 810f11a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810f11c:	4b07      	ldr	r3, [pc, #28]	; (810f13c <pvTaskIncrementMutexHeldCount+0x24>)
 810f11e:	681b      	ldr	r3, [r3, #0]
 810f120:	2b00      	cmp	r3, #0
 810f122:	d004      	beq.n	810f12e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810f124:	4b05      	ldr	r3, [pc, #20]	; (810f13c <pvTaskIncrementMutexHeldCount+0x24>)
 810f126:	681b      	ldr	r3, [r3, #0]
 810f128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810f12a:	3201      	adds	r2, #1
 810f12c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 810f12e:	4b03      	ldr	r3, [pc, #12]	; (810f13c <pvTaskIncrementMutexHeldCount+0x24>)
 810f130:	681b      	ldr	r3, [r3, #0]
	}
 810f132:	4618      	mov	r0, r3
 810f134:	46bd      	mov	sp, r7
 810f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f13a:	4770      	bx	lr
 810f13c:	100056e4 	.word	0x100056e4

0810f140 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810f140:	b580      	push	{r7, lr}
 810f142:	b084      	sub	sp, #16
 810f144:	af00      	add	r7, sp, #0
 810f146:	6078      	str	r0, [r7, #4]
 810f148:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810f14a:	4b29      	ldr	r3, [pc, #164]	; (810f1f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 810f14c:	681b      	ldr	r3, [r3, #0]
 810f14e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810f150:	4b28      	ldr	r3, [pc, #160]	; (810f1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810f152:	681b      	ldr	r3, [r3, #0]
 810f154:	3304      	adds	r3, #4
 810f156:	4618      	mov	r0, r3
 810f158:	f7fd ff06 	bl	810cf68 <uxListRemove>
 810f15c:	4603      	mov	r3, r0
 810f15e:	2b00      	cmp	r3, #0
 810f160:	d10b      	bne.n	810f17a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810f162:	4b24      	ldr	r3, [pc, #144]	; (810f1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810f164:	681b      	ldr	r3, [r3, #0]
 810f166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f168:	2201      	movs	r2, #1
 810f16a:	fa02 f303 	lsl.w	r3, r2, r3
 810f16e:	43da      	mvns	r2, r3
 810f170:	4b21      	ldr	r3, [pc, #132]	; (810f1f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 810f172:	681b      	ldr	r3, [r3, #0]
 810f174:	4013      	ands	r3, r2
 810f176:	4a20      	ldr	r2, [pc, #128]	; (810f1f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 810f178:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810f17a:	687b      	ldr	r3, [r7, #4]
 810f17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f180:	d10a      	bne.n	810f198 <prvAddCurrentTaskToDelayedList+0x58>
 810f182:	683b      	ldr	r3, [r7, #0]
 810f184:	2b00      	cmp	r3, #0
 810f186:	d007      	beq.n	810f198 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f188:	4b1a      	ldr	r3, [pc, #104]	; (810f1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810f18a:	681b      	ldr	r3, [r3, #0]
 810f18c:	3304      	adds	r3, #4
 810f18e:	4619      	mov	r1, r3
 810f190:	481a      	ldr	r0, [pc, #104]	; (810f1fc <prvAddCurrentTaskToDelayedList+0xbc>)
 810f192:	f7fd fe8c 	bl	810ceae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810f196:	e026      	b.n	810f1e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810f198:	68fa      	ldr	r2, [r7, #12]
 810f19a:	687b      	ldr	r3, [r7, #4]
 810f19c:	4413      	add	r3, r2
 810f19e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810f1a0:	4b14      	ldr	r3, [pc, #80]	; (810f1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810f1a2:	681b      	ldr	r3, [r3, #0]
 810f1a4:	68ba      	ldr	r2, [r7, #8]
 810f1a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810f1a8:	68ba      	ldr	r2, [r7, #8]
 810f1aa:	68fb      	ldr	r3, [r7, #12]
 810f1ac:	429a      	cmp	r2, r3
 810f1ae:	d209      	bcs.n	810f1c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f1b0:	4b13      	ldr	r3, [pc, #76]	; (810f200 <prvAddCurrentTaskToDelayedList+0xc0>)
 810f1b2:	681a      	ldr	r2, [r3, #0]
 810f1b4:	4b0f      	ldr	r3, [pc, #60]	; (810f1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810f1b6:	681b      	ldr	r3, [r3, #0]
 810f1b8:	3304      	adds	r3, #4
 810f1ba:	4619      	mov	r1, r3
 810f1bc:	4610      	mov	r0, r2
 810f1be:	f7fd fe9a 	bl	810cef6 <vListInsert>
}
 810f1c2:	e010      	b.n	810f1e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f1c4:	4b0f      	ldr	r3, [pc, #60]	; (810f204 <prvAddCurrentTaskToDelayedList+0xc4>)
 810f1c6:	681a      	ldr	r2, [r3, #0]
 810f1c8:	4b0a      	ldr	r3, [pc, #40]	; (810f1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 810f1ca:	681b      	ldr	r3, [r3, #0]
 810f1cc:	3304      	adds	r3, #4
 810f1ce:	4619      	mov	r1, r3
 810f1d0:	4610      	mov	r0, r2
 810f1d2:	f7fd fe90 	bl	810cef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810f1d6:	4b0c      	ldr	r3, [pc, #48]	; (810f208 <prvAddCurrentTaskToDelayedList+0xc8>)
 810f1d8:	681b      	ldr	r3, [r3, #0]
 810f1da:	68ba      	ldr	r2, [r7, #8]
 810f1dc:	429a      	cmp	r2, r3
 810f1de:	d202      	bcs.n	810f1e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 810f1e0:	4a09      	ldr	r2, [pc, #36]	; (810f208 <prvAddCurrentTaskToDelayedList+0xc8>)
 810f1e2:	68bb      	ldr	r3, [r7, #8]
 810f1e4:	6013      	str	r3, [r2, #0]
}
 810f1e6:	bf00      	nop
 810f1e8:	3710      	adds	r7, #16
 810f1ea:	46bd      	mov	sp, r7
 810f1ec:	bd80      	pop	{r7, pc}
 810f1ee:	bf00      	nop
 810f1f0:	100057e8 	.word	0x100057e8
 810f1f4:	100056e4 	.word	0x100056e4
 810f1f8:	100057ec 	.word	0x100057ec
 810f1fc:	100057d0 	.word	0x100057d0
 810f200:	100057a0 	.word	0x100057a0
 810f204:	1000579c 	.word	0x1000579c
 810f208:	10005804 	.word	0x10005804

0810f20c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 810f20c:	b480      	push	{r7}
 810f20e:	b083      	sub	sp, #12
 810f210:	af00      	add	r7, sp, #0
 810f212:	4603      	mov	r3, r0
 810f214:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 810f216:	88fb      	ldrh	r3, [r7, #6]
 810f218:	021b      	lsls	r3, r3, #8
 810f21a:	b21a      	sxth	r2, r3
 810f21c:	88fb      	ldrh	r3, [r7, #6]
 810f21e:	0a1b      	lsrs	r3, r3, #8
 810f220:	b29b      	uxth	r3, r3
 810f222:	b21b      	sxth	r3, r3
 810f224:	4313      	orrs	r3, r2
 810f226:	b21b      	sxth	r3, r3
 810f228:	b29b      	uxth	r3, r3
}
 810f22a:	4618      	mov	r0, r3
 810f22c:	370c      	adds	r7, #12
 810f22e:	46bd      	mov	sp, r7
 810f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f234:	4770      	bx	lr
	...

0810f238 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 810f238:	b580      	push	{r7, lr}
 810f23a:	b082      	sub	sp, #8
 810f23c:	af00      	add	r7, sp, #0
 810f23e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 810f240:	4915      	ldr	r1, [pc, #84]	; (810f298 <etharp_free_entry+0x60>)
 810f242:	687a      	ldr	r2, [r7, #4]
 810f244:	4613      	mov	r3, r2
 810f246:	005b      	lsls	r3, r3, #1
 810f248:	4413      	add	r3, r2
 810f24a:	00db      	lsls	r3, r3, #3
 810f24c:	440b      	add	r3, r1
 810f24e:	681b      	ldr	r3, [r3, #0]
 810f250:	2b00      	cmp	r3, #0
 810f252:	d013      	beq.n	810f27c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 810f254:	4910      	ldr	r1, [pc, #64]	; (810f298 <etharp_free_entry+0x60>)
 810f256:	687a      	ldr	r2, [r7, #4]
 810f258:	4613      	mov	r3, r2
 810f25a:	005b      	lsls	r3, r3, #1
 810f25c:	4413      	add	r3, r2
 810f25e:	00db      	lsls	r3, r3, #3
 810f260:	440b      	add	r3, r1
 810f262:	681b      	ldr	r3, [r3, #0]
 810f264:	4618      	mov	r0, r3
 810f266:	f003 feed 	bl	8113044 <pbuf_free>
    arp_table[i].q = NULL;
 810f26a:	490b      	ldr	r1, [pc, #44]	; (810f298 <etharp_free_entry+0x60>)
 810f26c:	687a      	ldr	r2, [r7, #4]
 810f26e:	4613      	mov	r3, r2
 810f270:	005b      	lsls	r3, r3, #1
 810f272:	4413      	add	r3, r2
 810f274:	00db      	lsls	r3, r3, #3
 810f276:	440b      	add	r3, r1
 810f278:	2200      	movs	r2, #0
 810f27a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 810f27c:	4906      	ldr	r1, [pc, #24]	; (810f298 <etharp_free_entry+0x60>)
 810f27e:	687a      	ldr	r2, [r7, #4]
 810f280:	4613      	mov	r3, r2
 810f282:	005b      	lsls	r3, r3, #1
 810f284:	4413      	add	r3, r2
 810f286:	00db      	lsls	r3, r3, #3
 810f288:	440b      	add	r3, r1
 810f28a:	3314      	adds	r3, #20
 810f28c:	2200      	movs	r2, #0
 810f28e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 810f290:	bf00      	nop
 810f292:	3708      	adds	r7, #8
 810f294:	46bd      	mov	sp, r7
 810f296:	bd80      	pop	{r7, pc}
 810f298:	10005810 	.word	0x10005810

0810f29c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 810f29c:	b580      	push	{r7, lr}
 810f29e:	b082      	sub	sp, #8
 810f2a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810f2a2:	2300      	movs	r3, #0
 810f2a4:	607b      	str	r3, [r7, #4]
 810f2a6:	e096      	b.n	810f3d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 810f2a8:	494f      	ldr	r1, [pc, #316]	; (810f3e8 <etharp_tmr+0x14c>)
 810f2aa:	687a      	ldr	r2, [r7, #4]
 810f2ac:	4613      	mov	r3, r2
 810f2ae:	005b      	lsls	r3, r3, #1
 810f2b0:	4413      	add	r3, r2
 810f2b2:	00db      	lsls	r3, r3, #3
 810f2b4:	440b      	add	r3, r1
 810f2b6:	3314      	adds	r3, #20
 810f2b8:	781b      	ldrb	r3, [r3, #0]
 810f2ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 810f2bc:	78fb      	ldrb	r3, [r7, #3]
 810f2be:	2b00      	cmp	r3, #0
 810f2c0:	f000 8086 	beq.w	810f3d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 810f2c4:	4948      	ldr	r1, [pc, #288]	; (810f3e8 <etharp_tmr+0x14c>)
 810f2c6:	687a      	ldr	r2, [r7, #4]
 810f2c8:	4613      	mov	r3, r2
 810f2ca:	005b      	lsls	r3, r3, #1
 810f2cc:	4413      	add	r3, r2
 810f2ce:	00db      	lsls	r3, r3, #3
 810f2d0:	440b      	add	r3, r1
 810f2d2:	3312      	adds	r3, #18
 810f2d4:	881b      	ldrh	r3, [r3, #0]
 810f2d6:	3301      	adds	r3, #1
 810f2d8:	b298      	uxth	r0, r3
 810f2da:	4943      	ldr	r1, [pc, #268]	; (810f3e8 <etharp_tmr+0x14c>)
 810f2dc:	687a      	ldr	r2, [r7, #4]
 810f2de:	4613      	mov	r3, r2
 810f2e0:	005b      	lsls	r3, r3, #1
 810f2e2:	4413      	add	r3, r2
 810f2e4:	00db      	lsls	r3, r3, #3
 810f2e6:	440b      	add	r3, r1
 810f2e8:	3312      	adds	r3, #18
 810f2ea:	4602      	mov	r2, r0
 810f2ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810f2ee:	493e      	ldr	r1, [pc, #248]	; (810f3e8 <etharp_tmr+0x14c>)
 810f2f0:	687a      	ldr	r2, [r7, #4]
 810f2f2:	4613      	mov	r3, r2
 810f2f4:	005b      	lsls	r3, r3, #1
 810f2f6:	4413      	add	r3, r2
 810f2f8:	00db      	lsls	r3, r3, #3
 810f2fa:	440b      	add	r3, r1
 810f2fc:	3312      	adds	r3, #18
 810f2fe:	881b      	ldrh	r3, [r3, #0]
 810f300:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 810f304:	d215      	bcs.n	810f332 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810f306:	4938      	ldr	r1, [pc, #224]	; (810f3e8 <etharp_tmr+0x14c>)
 810f308:	687a      	ldr	r2, [r7, #4]
 810f30a:	4613      	mov	r3, r2
 810f30c:	005b      	lsls	r3, r3, #1
 810f30e:	4413      	add	r3, r2
 810f310:	00db      	lsls	r3, r3, #3
 810f312:	440b      	add	r3, r1
 810f314:	3314      	adds	r3, #20
 810f316:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810f318:	2b01      	cmp	r3, #1
 810f31a:	d10e      	bne.n	810f33a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 810f31c:	4932      	ldr	r1, [pc, #200]	; (810f3e8 <etharp_tmr+0x14c>)
 810f31e:	687a      	ldr	r2, [r7, #4]
 810f320:	4613      	mov	r3, r2
 810f322:	005b      	lsls	r3, r3, #1
 810f324:	4413      	add	r3, r2
 810f326:	00db      	lsls	r3, r3, #3
 810f328:	440b      	add	r3, r1
 810f32a:	3312      	adds	r3, #18
 810f32c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810f32e:	2b04      	cmp	r3, #4
 810f330:	d903      	bls.n	810f33a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 810f332:	6878      	ldr	r0, [r7, #4]
 810f334:	f7ff ff80 	bl	810f238 <etharp_free_entry>
 810f338:	e04a      	b.n	810f3d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 810f33a:	492b      	ldr	r1, [pc, #172]	; (810f3e8 <etharp_tmr+0x14c>)
 810f33c:	687a      	ldr	r2, [r7, #4]
 810f33e:	4613      	mov	r3, r2
 810f340:	005b      	lsls	r3, r3, #1
 810f342:	4413      	add	r3, r2
 810f344:	00db      	lsls	r3, r3, #3
 810f346:	440b      	add	r3, r1
 810f348:	3314      	adds	r3, #20
 810f34a:	781b      	ldrb	r3, [r3, #0]
 810f34c:	2b03      	cmp	r3, #3
 810f34e:	d10a      	bne.n	810f366 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 810f350:	4925      	ldr	r1, [pc, #148]	; (810f3e8 <etharp_tmr+0x14c>)
 810f352:	687a      	ldr	r2, [r7, #4]
 810f354:	4613      	mov	r3, r2
 810f356:	005b      	lsls	r3, r3, #1
 810f358:	4413      	add	r3, r2
 810f35a:	00db      	lsls	r3, r3, #3
 810f35c:	440b      	add	r3, r1
 810f35e:	3314      	adds	r3, #20
 810f360:	2204      	movs	r2, #4
 810f362:	701a      	strb	r2, [r3, #0]
 810f364:	e034      	b.n	810f3d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 810f366:	4920      	ldr	r1, [pc, #128]	; (810f3e8 <etharp_tmr+0x14c>)
 810f368:	687a      	ldr	r2, [r7, #4]
 810f36a:	4613      	mov	r3, r2
 810f36c:	005b      	lsls	r3, r3, #1
 810f36e:	4413      	add	r3, r2
 810f370:	00db      	lsls	r3, r3, #3
 810f372:	440b      	add	r3, r1
 810f374:	3314      	adds	r3, #20
 810f376:	781b      	ldrb	r3, [r3, #0]
 810f378:	2b04      	cmp	r3, #4
 810f37a:	d10a      	bne.n	810f392 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 810f37c:	491a      	ldr	r1, [pc, #104]	; (810f3e8 <etharp_tmr+0x14c>)
 810f37e:	687a      	ldr	r2, [r7, #4]
 810f380:	4613      	mov	r3, r2
 810f382:	005b      	lsls	r3, r3, #1
 810f384:	4413      	add	r3, r2
 810f386:	00db      	lsls	r3, r3, #3
 810f388:	440b      	add	r3, r1
 810f38a:	3314      	adds	r3, #20
 810f38c:	2202      	movs	r2, #2
 810f38e:	701a      	strb	r2, [r3, #0]
 810f390:	e01e      	b.n	810f3d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810f392:	4915      	ldr	r1, [pc, #84]	; (810f3e8 <etharp_tmr+0x14c>)
 810f394:	687a      	ldr	r2, [r7, #4]
 810f396:	4613      	mov	r3, r2
 810f398:	005b      	lsls	r3, r3, #1
 810f39a:	4413      	add	r3, r2
 810f39c:	00db      	lsls	r3, r3, #3
 810f39e:	440b      	add	r3, r1
 810f3a0:	3314      	adds	r3, #20
 810f3a2:	781b      	ldrb	r3, [r3, #0]
 810f3a4:	2b01      	cmp	r3, #1
 810f3a6:	d113      	bne.n	810f3d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 810f3a8:	490f      	ldr	r1, [pc, #60]	; (810f3e8 <etharp_tmr+0x14c>)
 810f3aa:	687a      	ldr	r2, [r7, #4]
 810f3ac:	4613      	mov	r3, r2
 810f3ae:	005b      	lsls	r3, r3, #1
 810f3b0:	4413      	add	r3, r2
 810f3b2:	00db      	lsls	r3, r3, #3
 810f3b4:	440b      	add	r3, r1
 810f3b6:	3308      	adds	r3, #8
 810f3b8:	6818      	ldr	r0, [r3, #0]
 810f3ba:	687a      	ldr	r2, [r7, #4]
 810f3bc:	4613      	mov	r3, r2
 810f3be:	005b      	lsls	r3, r3, #1
 810f3c0:	4413      	add	r3, r2
 810f3c2:	00db      	lsls	r3, r3, #3
 810f3c4:	4a08      	ldr	r2, [pc, #32]	; (810f3e8 <etharp_tmr+0x14c>)
 810f3c6:	4413      	add	r3, r2
 810f3c8:	3304      	adds	r3, #4
 810f3ca:	4619      	mov	r1, r3
 810f3cc:	f000 fe6e 	bl	81100ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810f3d0:	687b      	ldr	r3, [r7, #4]
 810f3d2:	3301      	adds	r3, #1
 810f3d4:	607b      	str	r3, [r7, #4]
 810f3d6:	687b      	ldr	r3, [r7, #4]
 810f3d8:	2b09      	cmp	r3, #9
 810f3da:	f77f af65 	ble.w	810f2a8 <etharp_tmr+0xc>
      }
    }
  }
}
 810f3de:	bf00      	nop
 810f3e0:	bf00      	nop
 810f3e2:	3708      	adds	r7, #8
 810f3e4:	46bd      	mov	sp, r7
 810f3e6:	bd80      	pop	{r7, pc}
 810f3e8:	10005810 	.word	0x10005810

0810f3ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 810f3ec:	b580      	push	{r7, lr}
 810f3ee:	b08a      	sub	sp, #40	; 0x28
 810f3f0:	af00      	add	r7, sp, #0
 810f3f2:	60f8      	str	r0, [r7, #12]
 810f3f4:	460b      	mov	r3, r1
 810f3f6:	607a      	str	r2, [r7, #4]
 810f3f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 810f3fa:	230a      	movs	r3, #10
 810f3fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 810f3fe:	230a      	movs	r3, #10
 810f400:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 810f402:	230a      	movs	r3, #10
 810f404:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 810f406:	2300      	movs	r3, #0
 810f408:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 810f40a:	230a      	movs	r3, #10
 810f40c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 810f40e:	2300      	movs	r3, #0
 810f410:	83bb      	strh	r3, [r7, #28]
 810f412:	2300      	movs	r3, #0
 810f414:	837b      	strh	r3, [r7, #26]
 810f416:	2300      	movs	r3, #0
 810f418:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810f41a:	2300      	movs	r3, #0
 810f41c:	843b      	strh	r3, [r7, #32]
 810f41e:	e0ae      	b.n	810f57e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 810f420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f424:	49a6      	ldr	r1, [pc, #664]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f426:	4613      	mov	r3, r2
 810f428:	005b      	lsls	r3, r3, #1
 810f42a:	4413      	add	r3, r2
 810f42c:	00db      	lsls	r3, r3, #3
 810f42e:	440b      	add	r3, r1
 810f430:	3314      	adds	r3, #20
 810f432:	781b      	ldrb	r3, [r3, #0]
 810f434:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 810f436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 810f43a:	2b0a      	cmp	r3, #10
 810f43c:	d105      	bne.n	810f44a <etharp_find_entry+0x5e>
 810f43e:	7dfb      	ldrb	r3, [r7, #23]
 810f440:	2b00      	cmp	r3, #0
 810f442:	d102      	bne.n	810f44a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 810f444:	8c3b      	ldrh	r3, [r7, #32]
 810f446:	847b      	strh	r3, [r7, #34]	; 0x22
 810f448:	e095      	b.n	810f576 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 810f44a:	7dfb      	ldrb	r3, [r7, #23]
 810f44c:	2b00      	cmp	r3, #0
 810f44e:	f000 8092 	beq.w	810f576 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 810f452:	7dfb      	ldrb	r3, [r7, #23]
 810f454:	2b01      	cmp	r3, #1
 810f456:	d009      	beq.n	810f46c <etharp_find_entry+0x80>
 810f458:	7dfb      	ldrb	r3, [r7, #23]
 810f45a:	2b01      	cmp	r3, #1
 810f45c:	d806      	bhi.n	810f46c <etharp_find_entry+0x80>
 810f45e:	4b99      	ldr	r3, [pc, #612]	; (810f6c4 <etharp_find_entry+0x2d8>)
 810f460:	f240 1223 	movw	r2, #291	; 0x123
 810f464:	4998      	ldr	r1, [pc, #608]	; (810f6c8 <etharp_find_entry+0x2dc>)
 810f466:	4899      	ldr	r0, [pc, #612]	; (810f6cc <etharp_find_entry+0x2e0>)
 810f468:	f008 f9ae 	bl	81177c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 810f46c:	68fb      	ldr	r3, [r7, #12]
 810f46e:	2b00      	cmp	r3, #0
 810f470:	d020      	beq.n	810f4b4 <etharp_find_entry+0xc8>
 810f472:	68fb      	ldr	r3, [r7, #12]
 810f474:	6819      	ldr	r1, [r3, #0]
 810f476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f47a:	4891      	ldr	r0, [pc, #580]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f47c:	4613      	mov	r3, r2
 810f47e:	005b      	lsls	r3, r3, #1
 810f480:	4413      	add	r3, r2
 810f482:	00db      	lsls	r3, r3, #3
 810f484:	4403      	add	r3, r0
 810f486:	3304      	adds	r3, #4
 810f488:	681b      	ldr	r3, [r3, #0]
 810f48a:	4299      	cmp	r1, r3
 810f48c:	d112      	bne.n	810f4b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 810f48e:	687b      	ldr	r3, [r7, #4]
 810f490:	2b00      	cmp	r3, #0
 810f492:	d00c      	beq.n	810f4ae <etharp_find_entry+0xc2>
 810f494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f498:	4989      	ldr	r1, [pc, #548]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f49a:	4613      	mov	r3, r2
 810f49c:	005b      	lsls	r3, r3, #1
 810f49e:	4413      	add	r3, r2
 810f4a0:	00db      	lsls	r3, r3, #3
 810f4a2:	440b      	add	r3, r1
 810f4a4:	3308      	adds	r3, #8
 810f4a6:	681b      	ldr	r3, [r3, #0]
 810f4a8:	687a      	ldr	r2, [r7, #4]
 810f4aa:	429a      	cmp	r2, r3
 810f4ac:	d102      	bne.n	810f4b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 810f4ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810f4b2:	e100      	b.n	810f6b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 810f4b4:	7dfb      	ldrb	r3, [r7, #23]
 810f4b6:	2b01      	cmp	r3, #1
 810f4b8:	d140      	bne.n	810f53c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 810f4ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f4be:	4980      	ldr	r1, [pc, #512]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f4c0:	4613      	mov	r3, r2
 810f4c2:	005b      	lsls	r3, r3, #1
 810f4c4:	4413      	add	r3, r2
 810f4c6:	00db      	lsls	r3, r3, #3
 810f4c8:	440b      	add	r3, r1
 810f4ca:	681b      	ldr	r3, [r3, #0]
 810f4cc:	2b00      	cmp	r3, #0
 810f4ce:	d01a      	beq.n	810f506 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 810f4d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f4d4:	497a      	ldr	r1, [pc, #488]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f4d6:	4613      	mov	r3, r2
 810f4d8:	005b      	lsls	r3, r3, #1
 810f4da:	4413      	add	r3, r2
 810f4dc:	00db      	lsls	r3, r3, #3
 810f4de:	440b      	add	r3, r1
 810f4e0:	3312      	adds	r3, #18
 810f4e2:	881b      	ldrh	r3, [r3, #0]
 810f4e4:	8bba      	ldrh	r2, [r7, #28]
 810f4e6:	429a      	cmp	r2, r3
 810f4e8:	d845      	bhi.n	810f576 <etharp_find_entry+0x18a>
            old_queue = i;
 810f4ea:	8c3b      	ldrh	r3, [r7, #32]
 810f4ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 810f4ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f4f2:	4973      	ldr	r1, [pc, #460]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f4f4:	4613      	mov	r3, r2
 810f4f6:	005b      	lsls	r3, r3, #1
 810f4f8:	4413      	add	r3, r2
 810f4fa:	00db      	lsls	r3, r3, #3
 810f4fc:	440b      	add	r3, r1
 810f4fe:	3312      	adds	r3, #18
 810f500:	881b      	ldrh	r3, [r3, #0]
 810f502:	83bb      	strh	r3, [r7, #28]
 810f504:	e037      	b.n	810f576 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 810f506:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f50a:	496d      	ldr	r1, [pc, #436]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f50c:	4613      	mov	r3, r2
 810f50e:	005b      	lsls	r3, r3, #1
 810f510:	4413      	add	r3, r2
 810f512:	00db      	lsls	r3, r3, #3
 810f514:	440b      	add	r3, r1
 810f516:	3312      	adds	r3, #18
 810f518:	881b      	ldrh	r3, [r3, #0]
 810f51a:	8b7a      	ldrh	r2, [r7, #26]
 810f51c:	429a      	cmp	r2, r3
 810f51e:	d82a      	bhi.n	810f576 <etharp_find_entry+0x18a>
            old_pending = i;
 810f520:	8c3b      	ldrh	r3, [r7, #32]
 810f522:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 810f524:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f528:	4965      	ldr	r1, [pc, #404]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f52a:	4613      	mov	r3, r2
 810f52c:	005b      	lsls	r3, r3, #1
 810f52e:	4413      	add	r3, r2
 810f530:	00db      	lsls	r3, r3, #3
 810f532:	440b      	add	r3, r1
 810f534:	3312      	adds	r3, #18
 810f536:	881b      	ldrh	r3, [r3, #0]
 810f538:	837b      	strh	r3, [r7, #26]
 810f53a:	e01c      	b.n	810f576 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 810f53c:	7dfb      	ldrb	r3, [r7, #23]
 810f53e:	2b01      	cmp	r3, #1
 810f540:	d919      	bls.n	810f576 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 810f542:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f546:	495e      	ldr	r1, [pc, #376]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f548:	4613      	mov	r3, r2
 810f54a:	005b      	lsls	r3, r3, #1
 810f54c:	4413      	add	r3, r2
 810f54e:	00db      	lsls	r3, r3, #3
 810f550:	440b      	add	r3, r1
 810f552:	3312      	adds	r3, #18
 810f554:	881b      	ldrh	r3, [r3, #0]
 810f556:	8b3a      	ldrh	r2, [r7, #24]
 810f558:	429a      	cmp	r2, r3
 810f55a:	d80c      	bhi.n	810f576 <etharp_find_entry+0x18a>
            old_stable = i;
 810f55c:	8c3b      	ldrh	r3, [r7, #32]
 810f55e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 810f560:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f564:	4956      	ldr	r1, [pc, #344]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f566:	4613      	mov	r3, r2
 810f568:	005b      	lsls	r3, r3, #1
 810f56a:	4413      	add	r3, r2
 810f56c:	00db      	lsls	r3, r3, #3
 810f56e:	440b      	add	r3, r1
 810f570:	3312      	adds	r3, #18
 810f572:	881b      	ldrh	r3, [r3, #0]
 810f574:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810f576:	8c3b      	ldrh	r3, [r7, #32]
 810f578:	3301      	adds	r3, #1
 810f57a:	b29b      	uxth	r3, r3
 810f57c:	843b      	strh	r3, [r7, #32]
 810f57e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810f582:	2b09      	cmp	r3, #9
 810f584:	f77f af4c 	ble.w	810f420 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 810f588:	7afb      	ldrb	r3, [r7, #11]
 810f58a:	f003 0302 	and.w	r3, r3, #2
 810f58e:	2b00      	cmp	r3, #0
 810f590:	d108      	bne.n	810f5a4 <etharp_find_entry+0x1b8>
 810f592:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 810f596:	2b0a      	cmp	r3, #10
 810f598:	d107      	bne.n	810f5aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 810f59a:	7afb      	ldrb	r3, [r7, #11]
 810f59c:	f003 0301 	and.w	r3, r3, #1
 810f5a0:	2b00      	cmp	r3, #0
 810f5a2:	d102      	bne.n	810f5aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 810f5a4:	f04f 33ff 	mov.w	r3, #4294967295
 810f5a8:	e085      	b.n	810f6b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 810f5aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 810f5ae:	2b09      	cmp	r3, #9
 810f5b0:	dc02      	bgt.n	810f5b8 <etharp_find_entry+0x1cc>
    i = empty;
 810f5b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810f5b4:	843b      	strh	r3, [r7, #32]
 810f5b6:	e039      	b.n	810f62c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 810f5b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 810f5bc:	2b09      	cmp	r3, #9
 810f5be:	dc14      	bgt.n	810f5ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 810f5c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810f5c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 810f5c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f5c8:	493d      	ldr	r1, [pc, #244]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f5ca:	4613      	mov	r3, r2
 810f5cc:	005b      	lsls	r3, r3, #1
 810f5ce:	4413      	add	r3, r2
 810f5d0:	00db      	lsls	r3, r3, #3
 810f5d2:	440b      	add	r3, r1
 810f5d4:	681b      	ldr	r3, [r3, #0]
 810f5d6:	2b00      	cmp	r3, #0
 810f5d8:	d018      	beq.n	810f60c <etharp_find_entry+0x220>
 810f5da:	4b3a      	ldr	r3, [pc, #232]	; (810f6c4 <etharp_find_entry+0x2d8>)
 810f5dc:	f240 126d 	movw	r2, #365	; 0x16d
 810f5e0:	493b      	ldr	r1, [pc, #236]	; (810f6d0 <etharp_find_entry+0x2e4>)
 810f5e2:	483a      	ldr	r0, [pc, #232]	; (810f6cc <etharp_find_entry+0x2e0>)
 810f5e4:	f008 f8f0 	bl	81177c8 <iprintf>
 810f5e8:	e010      	b.n	810f60c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 810f5ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 810f5ee:	2b09      	cmp	r3, #9
 810f5f0:	dc02      	bgt.n	810f5f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 810f5f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810f5f4:	843b      	strh	r3, [r7, #32]
 810f5f6:	e009      	b.n	810f60c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 810f5f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 810f5fc:	2b09      	cmp	r3, #9
 810f5fe:	dc02      	bgt.n	810f606 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 810f600:	8bfb      	ldrh	r3, [r7, #30]
 810f602:	843b      	strh	r3, [r7, #32]
 810f604:	e002      	b.n	810f60c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 810f606:	f04f 33ff 	mov.w	r3, #4294967295
 810f60a:	e054      	b.n	810f6b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810f60c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810f610:	2b09      	cmp	r3, #9
 810f612:	dd06      	ble.n	810f622 <etharp_find_entry+0x236>
 810f614:	4b2b      	ldr	r3, [pc, #172]	; (810f6c4 <etharp_find_entry+0x2d8>)
 810f616:	f240 127f 	movw	r2, #383	; 0x17f
 810f61a:	492e      	ldr	r1, [pc, #184]	; (810f6d4 <etharp_find_entry+0x2e8>)
 810f61c:	482b      	ldr	r0, [pc, #172]	; (810f6cc <etharp_find_entry+0x2e0>)
 810f61e:	f008 f8d3 	bl	81177c8 <iprintf>
    etharp_free_entry(i);
 810f622:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810f626:	4618      	mov	r0, r3
 810f628:	f7ff fe06 	bl	810f238 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810f62c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810f630:	2b09      	cmp	r3, #9
 810f632:	dd06      	ble.n	810f642 <etharp_find_entry+0x256>
 810f634:	4b23      	ldr	r3, [pc, #140]	; (810f6c4 <etharp_find_entry+0x2d8>)
 810f636:	f240 1283 	movw	r2, #387	; 0x183
 810f63a:	4926      	ldr	r1, [pc, #152]	; (810f6d4 <etharp_find_entry+0x2e8>)
 810f63c:	4823      	ldr	r0, [pc, #140]	; (810f6cc <etharp_find_entry+0x2e0>)
 810f63e:	f008 f8c3 	bl	81177c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 810f642:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f646:	491e      	ldr	r1, [pc, #120]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f648:	4613      	mov	r3, r2
 810f64a:	005b      	lsls	r3, r3, #1
 810f64c:	4413      	add	r3, r2
 810f64e:	00db      	lsls	r3, r3, #3
 810f650:	440b      	add	r3, r1
 810f652:	3314      	adds	r3, #20
 810f654:	781b      	ldrb	r3, [r3, #0]
 810f656:	2b00      	cmp	r3, #0
 810f658:	d006      	beq.n	810f668 <etharp_find_entry+0x27c>
 810f65a:	4b1a      	ldr	r3, [pc, #104]	; (810f6c4 <etharp_find_entry+0x2d8>)
 810f65c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 810f660:	491d      	ldr	r1, [pc, #116]	; (810f6d8 <etharp_find_entry+0x2ec>)
 810f662:	481a      	ldr	r0, [pc, #104]	; (810f6cc <etharp_find_entry+0x2e0>)
 810f664:	f008 f8b0 	bl	81177c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 810f668:	68fb      	ldr	r3, [r7, #12]
 810f66a:	2b00      	cmp	r3, #0
 810f66c:	d00b      	beq.n	810f686 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 810f66e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f672:	68fb      	ldr	r3, [r7, #12]
 810f674:	6819      	ldr	r1, [r3, #0]
 810f676:	4812      	ldr	r0, [pc, #72]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f678:	4613      	mov	r3, r2
 810f67a:	005b      	lsls	r3, r3, #1
 810f67c:	4413      	add	r3, r2
 810f67e:	00db      	lsls	r3, r3, #3
 810f680:	4403      	add	r3, r0
 810f682:	3304      	adds	r3, #4
 810f684:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 810f686:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f68a:	490d      	ldr	r1, [pc, #52]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f68c:	4613      	mov	r3, r2
 810f68e:	005b      	lsls	r3, r3, #1
 810f690:	4413      	add	r3, r2
 810f692:	00db      	lsls	r3, r3, #3
 810f694:	440b      	add	r3, r1
 810f696:	3312      	adds	r3, #18
 810f698:	2200      	movs	r2, #0
 810f69a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 810f69c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810f6a0:	4907      	ldr	r1, [pc, #28]	; (810f6c0 <etharp_find_entry+0x2d4>)
 810f6a2:	4613      	mov	r3, r2
 810f6a4:	005b      	lsls	r3, r3, #1
 810f6a6:	4413      	add	r3, r2
 810f6a8:	00db      	lsls	r3, r3, #3
 810f6aa:	440b      	add	r3, r1
 810f6ac:	3308      	adds	r3, #8
 810f6ae:	687a      	ldr	r2, [r7, #4]
 810f6b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 810f6b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 810f6b6:	4618      	mov	r0, r3
 810f6b8:	3728      	adds	r7, #40	; 0x28
 810f6ba:	46bd      	mov	sp, r7
 810f6bc:	bd80      	pop	{r7, pc}
 810f6be:	bf00      	nop
 810f6c0:	10005810 	.word	0x10005810
 810f6c4:	08119a38 	.word	0x08119a38
 810f6c8:	08119aa8 	.word	0x08119aa8
 810f6cc:	08119ae8 	.word	0x08119ae8
 810f6d0:	08119b10 	.word	0x08119b10
 810f6d4:	08119b28 	.word	0x08119b28
 810f6d8:	08119b3c 	.word	0x08119b3c

0810f6dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 810f6dc:	b580      	push	{r7, lr}
 810f6de:	b088      	sub	sp, #32
 810f6e0:	af02      	add	r7, sp, #8
 810f6e2:	60f8      	str	r0, [r7, #12]
 810f6e4:	60b9      	str	r1, [r7, #8]
 810f6e6:	607a      	str	r2, [r7, #4]
 810f6e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 810f6ea:	68fb      	ldr	r3, [r7, #12]
 810f6ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810f6f0:	2b06      	cmp	r3, #6
 810f6f2:	d006      	beq.n	810f702 <etharp_update_arp_entry+0x26>
 810f6f4:	4b48      	ldr	r3, [pc, #288]	; (810f818 <etharp_update_arp_entry+0x13c>)
 810f6f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 810f6fa:	4948      	ldr	r1, [pc, #288]	; (810f81c <etharp_update_arp_entry+0x140>)
 810f6fc:	4848      	ldr	r0, [pc, #288]	; (810f820 <etharp_update_arp_entry+0x144>)
 810f6fe:	f008 f863 	bl	81177c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 810f702:	68bb      	ldr	r3, [r7, #8]
 810f704:	2b00      	cmp	r3, #0
 810f706:	d012      	beq.n	810f72e <etharp_update_arp_entry+0x52>
 810f708:	68bb      	ldr	r3, [r7, #8]
 810f70a:	681b      	ldr	r3, [r3, #0]
 810f70c:	2b00      	cmp	r3, #0
 810f70e:	d00e      	beq.n	810f72e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810f710:	68bb      	ldr	r3, [r7, #8]
 810f712:	681b      	ldr	r3, [r3, #0]
 810f714:	68f9      	ldr	r1, [r7, #12]
 810f716:	4618      	mov	r0, r3
 810f718:	f001 fac2 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 810f71c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 810f71e:	2b00      	cmp	r3, #0
 810f720:	d105      	bne.n	810f72e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 810f722:	68bb      	ldr	r3, [r7, #8]
 810f724:	681b      	ldr	r3, [r3, #0]
 810f726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810f72a:	2be0      	cmp	r3, #224	; 0xe0
 810f72c:	d102      	bne.n	810f734 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810f72e:	f06f 030f 	mvn.w	r3, #15
 810f732:	e06c      	b.n	810f80e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 810f734:	78fb      	ldrb	r3, [r7, #3]
 810f736:	68fa      	ldr	r2, [r7, #12]
 810f738:	4619      	mov	r1, r3
 810f73a:	68b8      	ldr	r0, [r7, #8]
 810f73c:	f7ff fe56 	bl	810f3ec <etharp_find_entry>
 810f740:	4603      	mov	r3, r0
 810f742:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 810f744:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810f748:	2b00      	cmp	r3, #0
 810f74a:	da02      	bge.n	810f752 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 810f74c:	8afb      	ldrh	r3, [r7, #22]
 810f74e:	b25b      	sxtb	r3, r3
 810f750:	e05d      	b.n	810f80e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 810f752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810f756:	4933      	ldr	r1, [pc, #204]	; (810f824 <etharp_update_arp_entry+0x148>)
 810f758:	4613      	mov	r3, r2
 810f75a:	005b      	lsls	r3, r3, #1
 810f75c:	4413      	add	r3, r2
 810f75e:	00db      	lsls	r3, r3, #3
 810f760:	440b      	add	r3, r1
 810f762:	3314      	adds	r3, #20
 810f764:	2202      	movs	r2, #2
 810f766:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 810f768:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810f76c:	492d      	ldr	r1, [pc, #180]	; (810f824 <etharp_update_arp_entry+0x148>)
 810f76e:	4613      	mov	r3, r2
 810f770:	005b      	lsls	r3, r3, #1
 810f772:	4413      	add	r3, r2
 810f774:	00db      	lsls	r3, r3, #3
 810f776:	440b      	add	r3, r1
 810f778:	3308      	adds	r3, #8
 810f77a:	68fa      	ldr	r2, [r7, #12]
 810f77c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 810f77e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810f782:	4613      	mov	r3, r2
 810f784:	005b      	lsls	r3, r3, #1
 810f786:	4413      	add	r3, r2
 810f788:	00db      	lsls	r3, r3, #3
 810f78a:	3308      	adds	r3, #8
 810f78c:	4a25      	ldr	r2, [pc, #148]	; (810f824 <etharp_update_arp_entry+0x148>)
 810f78e:	4413      	add	r3, r2
 810f790:	3304      	adds	r3, #4
 810f792:	2206      	movs	r2, #6
 810f794:	6879      	ldr	r1, [r7, #4]
 810f796:	4618      	mov	r0, r3
 810f798:	f007 fb3b 	bl	8116e12 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 810f79c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810f7a0:	4920      	ldr	r1, [pc, #128]	; (810f824 <etharp_update_arp_entry+0x148>)
 810f7a2:	4613      	mov	r3, r2
 810f7a4:	005b      	lsls	r3, r3, #1
 810f7a6:	4413      	add	r3, r2
 810f7a8:	00db      	lsls	r3, r3, #3
 810f7aa:	440b      	add	r3, r1
 810f7ac:	3312      	adds	r3, #18
 810f7ae:	2200      	movs	r2, #0
 810f7b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 810f7b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810f7b6:	491b      	ldr	r1, [pc, #108]	; (810f824 <etharp_update_arp_entry+0x148>)
 810f7b8:	4613      	mov	r3, r2
 810f7ba:	005b      	lsls	r3, r3, #1
 810f7bc:	4413      	add	r3, r2
 810f7be:	00db      	lsls	r3, r3, #3
 810f7c0:	440b      	add	r3, r1
 810f7c2:	681b      	ldr	r3, [r3, #0]
 810f7c4:	2b00      	cmp	r3, #0
 810f7c6:	d021      	beq.n	810f80c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 810f7c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810f7cc:	4915      	ldr	r1, [pc, #84]	; (810f824 <etharp_update_arp_entry+0x148>)
 810f7ce:	4613      	mov	r3, r2
 810f7d0:	005b      	lsls	r3, r3, #1
 810f7d2:	4413      	add	r3, r2
 810f7d4:	00db      	lsls	r3, r3, #3
 810f7d6:	440b      	add	r3, r1
 810f7d8:	681b      	ldr	r3, [r3, #0]
 810f7da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 810f7dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810f7e0:	4910      	ldr	r1, [pc, #64]	; (810f824 <etharp_update_arp_entry+0x148>)
 810f7e2:	4613      	mov	r3, r2
 810f7e4:	005b      	lsls	r3, r3, #1
 810f7e6:	4413      	add	r3, r2
 810f7e8:	00db      	lsls	r3, r3, #3
 810f7ea:	440b      	add	r3, r1
 810f7ec:	2200      	movs	r2, #0
 810f7ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 810f7f0:	68fb      	ldr	r3, [r7, #12]
 810f7f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 810f7f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810f7fa:	9300      	str	r3, [sp, #0]
 810f7fc:	687b      	ldr	r3, [r7, #4]
 810f7fe:	6939      	ldr	r1, [r7, #16]
 810f800:	68f8      	ldr	r0, [r7, #12]
 810f802:	f000 fcf3 	bl	81101ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 810f806:	6938      	ldr	r0, [r7, #16]
 810f808:	f003 fc1c 	bl	8113044 <pbuf_free>
  }
  return ERR_OK;
 810f80c:	2300      	movs	r3, #0
}
 810f80e:	4618      	mov	r0, r3
 810f810:	3718      	adds	r7, #24
 810f812:	46bd      	mov	sp, r7
 810f814:	bd80      	pop	{r7, pc}
 810f816:	bf00      	nop
 810f818:	08119a38 	.word	0x08119a38
 810f81c:	08119b68 	.word	0x08119b68
 810f820:	08119ae8 	.word	0x08119ae8
 810f824:	10005810 	.word	0x10005810

0810f828 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 810f828:	b580      	push	{r7, lr}
 810f82a:	b084      	sub	sp, #16
 810f82c:	af00      	add	r7, sp, #0
 810f82e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810f830:	2300      	movs	r3, #0
 810f832:	60fb      	str	r3, [r7, #12]
 810f834:	e01e      	b.n	810f874 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 810f836:	4913      	ldr	r1, [pc, #76]	; (810f884 <etharp_cleanup_netif+0x5c>)
 810f838:	68fa      	ldr	r2, [r7, #12]
 810f83a:	4613      	mov	r3, r2
 810f83c:	005b      	lsls	r3, r3, #1
 810f83e:	4413      	add	r3, r2
 810f840:	00db      	lsls	r3, r3, #3
 810f842:	440b      	add	r3, r1
 810f844:	3314      	adds	r3, #20
 810f846:	781b      	ldrb	r3, [r3, #0]
 810f848:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 810f84a:	7afb      	ldrb	r3, [r7, #11]
 810f84c:	2b00      	cmp	r3, #0
 810f84e:	d00e      	beq.n	810f86e <etharp_cleanup_netif+0x46>
 810f850:	490c      	ldr	r1, [pc, #48]	; (810f884 <etharp_cleanup_netif+0x5c>)
 810f852:	68fa      	ldr	r2, [r7, #12]
 810f854:	4613      	mov	r3, r2
 810f856:	005b      	lsls	r3, r3, #1
 810f858:	4413      	add	r3, r2
 810f85a:	00db      	lsls	r3, r3, #3
 810f85c:	440b      	add	r3, r1
 810f85e:	3308      	adds	r3, #8
 810f860:	681b      	ldr	r3, [r3, #0]
 810f862:	687a      	ldr	r2, [r7, #4]
 810f864:	429a      	cmp	r2, r3
 810f866:	d102      	bne.n	810f86e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 810f868:	68f8      	ldr	r0, [r7, #12]
 810f86a:	f7ff fce5 	bl	810f238 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810f86e:	68fb      	ldr	r3, [r7, #12]
 810f870:	3301      	adds	r3, #1
 810f872:	60fb      	str	r3, [r7, #12]
 810f874:	68fb      	ldr	r3, [r7, #12]
 810f876:	2b09      	cmp	r3, #9
 810f878:	dddd      	ble.n	810f836 <etharp_cleanup_netif+0xe>
    }
  }
}
 810f87a:	bf00      	nop
 810f87c:	bf00      	nop
 810f87e:	3710      	adds	r7, #16
 810f880:	46bd      	mov	sp, r7
 810f882:	bd80      	pop	{r7, pc}
 810f884:	10005810 	.word	0x10005810

0810f888 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 810f888:	b5b0      	push	{r4, r5, r7, lr}
 810f88a:	b08a      	sub	sp, #40	; 0x28
 810f88c:	af04      	add	r7, sp, #16
 810f88e:	6078      	str	r0, [r7, #4]
 810f890:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 810f892:	683b      	ldr	r3, [r7, #0]
 810f894:	2b00      	cmp	r3, #0
 810f896:	d107      	bne.n	810f8a8 <etharp_input+0x20>
 810f898:	4b3d      	ldr	r3, [pc, #244]	; (810f990 <etharp_input+0x108>)
 810f89a:	f240 228a 	movw	r2, #650	; 0x28a
 810f89e:	493d      	ldr	r1, [pc, #244]	; (810f994 <etharp_input+0x10c>)
 810f8a0:	483d      	ldr	r0, [pc, #244]	; (810f998 <etharp_input+0x110>)
 810f8a2:	f007 ff91 	bl	81177c8 <iprintf>
 810f8a6:	e06f      	b.n	810f988 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 810f8a8:	687b      	ldr	r3, [r7, #4]
 810f8aa:	685b      	ldr	r3, [r3, #4]
 810f8ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810f8ae:	693b      	ldr	r3, [r7, #16]
 810f8b0:	881b      	ldrh	r3, [r3, #0]
 810f8b2:	b29b      	uxth	r3, r3
 810f8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f8b8:	d10c      	bne.n	810f8d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810f8ba:	693b      	ldr	r3, [r7, #16]
 810f8bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810f8be:	2b06      	cmp	r3, #6
 810f8c0:	d108      	bne.n	810f8d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810f8c2:	693b      	ldr	r3, [r7, #16]
 810f8c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810f8c6:	2b04      	cmp	r3, #4
 810f8c8:	d104      	bne.n	810f8d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 810f8ca:	693b      	ldr	r3, [r7, #16]
 810f8cc:	885b      	ldrh	r3, [r3, #2]
 810f8ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810f8d0:	2b08      	cmp	r3, #8
 810f8d2:	d003      	beq.n	810f8dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 810f8d4:	6878      	ldr	r0, [r7, #4]
 810f8d6:	f003 fbb5 	bl	8113044 <pbuf_free>
    return;
 810f8da:	e055      	b.n	810f988 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 810f8dc:	693b      	ldr	r3, [r7, #16]
 810f8de:	330e      	adds	r3, #14
 810f8e0:	681b      	ldr	r3, [r3, #0]
 810f8e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 810f8e4:	693b      	ldr	r3, [r7, #16]
 810f8e6:	3318      	adds	r3, #24
 810f8e8:	681b      	ldr	r3, [r3, #0]
 810f8ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810f8ec:	683b      	ldr	r3, [r7, #0]
 810f8ee:	3304      	adds	r3, #4
 810f8f0:	681b      	ldr	r3, [r3, #0]
 810f8f2:	2b00      	cmp	r3, #0
 810f8f4:	d102      	bne.n	810f8fc <etharp_input+0x74>
    for_us = 0;
 810f8f6:	2300      	movs	r3, #0
 810f8f8:	75fb      	strb	r3, [r7, #23]
 810f8fa:	e009      	b.n	810f910 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 810f8fc:	68ba      	ldr	r2, [r7, #8]
 810f8fe:	683b      	ldr	r3, [r7, #0]
 810f900:	3304      	adds	r3, #4
 810f902:	681b      	ldr	r3, [r3, #0]
 810f904:	429a      	cmp	r2, r3
 810f906:	bf0c      	ite	eq
 810f908:	2301      	moveq	r3, #1
 810f90a:	2300      	movne	r3, #0
 810f90c:	b2db      	uxtb	r3, r3
 810f90e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 810f910:	693b      	ldr	r3, [r7, #16]
 810f912:	f103 0208 	add.w	r2, r3, #8
 810f916:	7dfb      	ldrb	r3, [r7, #23]
 810f918:	2b00      	cmp	r3, #0
 810f91a:	d001      	beq.n	810f920 <etharp_input+0x98>
 810f91c:	2301      	movs	r3, #1
 810f91e:	e000      	b.n	810f922 <etharp_input+0x9a>
 810f920:	2302      	movs	r3, #2
 810f922:	f107 010c 	add.w	r1, r7, #12
 810f926:	6838      	ldr	r0, [r7, #0]
 810f928:	f7ff fed8 	bl	810f6dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 810f92c:	693b      	ldr	r3, [r7, #16]
 810f92e:	88db      	ldrh	r3, [r3, #6]
 810f930:	b29b      	uxth	r3, r3
 810f932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f936:	d003      	beq.n	810f940 <etharp_input+0xb8>
 810f938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810f93c:	d01e      	beq.n	810f97c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 810f93e:	e020      	b.n	810f982 <etharp_input+0xfa>
      if (for_us) {
 810f940:	7dfb      	ldrb	r3, [r7, #23]
 810f942:	2b00      	cmp	r3, #0
 810f944:	d01c      	beq.n	810f980 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 810f946:	683b      	ldr	r3, [r7, #0]
 810f948:	f103 0026 	add.w	r0, r3, #38	; 0x26
 810f94c:	693b      	ldr	r3, [r7, #16]
 810f94e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 810f952:	683b      	ldr	r3, [r7, #0]
 810f954:	f103 0526 	add.w	r5, r3, #38	; 0x26
 810f958:	683b      	ldr	r3, [r7, #0]
 810f95a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 810f95c:	693a      	ldr	r2, [r7, #16]
 810f95e:	3208      	adds	r2, #8
        etharp_raw(netif,
 810f960:	2102      	movs	r1, #2
 810f962:	9103      	str	r1, [sp, #12]
 810f964:	f107 010c 	add.w	r1, r7, #12
 810f968:	9102      	str	r1, [sp, #8]
 810f96a:	9201      	str	r2, [sp, #4]
 810f96c:	9300      	str	r3, [sp, #0]
 810f96e:	462b      	mov	r3, r5
 810f970:	4622      	mov	r2, r4
 810f972:	4601      	mov	r1, r0
 810f974:	6838      	ldr	r0, [r7, #0]
 810f976:	f000 faeb 	bl	810ff50 <etharp_raw>
      break;
 810f97a:	e001      	b.n	810f980 <etharp_input+0xf8>
      break;
 810f97c:	bf00      	nop
 810f97e:	e000      	b.n	810f982 <etharp_input+0xfa>
      break;
 810f980:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 810f982:	6878      	ldr	r0, [r7, #4]
 810f984:	f003 fb5e 	bl	8113044 <pbuf_free>
}
 810f988:	3718      	adds	r7, #24
 810f98a:	46bd      	mov	sp, r7
 810f98c:	bdb0      	pop	{r4, r5, r7, pc}
 810f98e:	bf00      	nop
 810f990:	08119a38 	.word	0x08119a38
 810f994:	08119bc0 	.word	0x08119bc0
 810f998:	08119ae8 	.word	0x08119ae8

0810f99c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 810f99c:	b580      	push	{r7, lr}
 810f99e:	b086      	sub	sp, #24
 810f9a0:	af02      	add	r7, sp, #8
 810f9a2:	60f8      	str	r0, [r7, #12]
 810f9a4:	60b9      	str	r1, [r7, #8]
 810f9a6:	4613      	mov	r3, r2
 810f9a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 810f9aa:	79fa      	ldrb	r2, [r7, #7]
 810f9ac:	4944      	ldr	r1, [pc, #272]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810f9ae:	4613      	mov	r3, r2
 810f9b0:	005b      	lsls	r3, r3, #1
 810f9b2:	4413      	add	r3, r2
 810f9b4:	00db      	lsls	r3, r3, #3
 810f9b6:	440b      	add	r3, r1
 810f9b8:	3314      	adds	r3, #20
 810f9ba:	781b      	ldrb	r3, [r3, #0]
 810f9bc:	2b01      	cmp	r3, #1
 810f9be:	d806      	bhi.n	810f9ce <etharp_output_to_arp_index+0x32>
 810f9c0:	4b40      	ldr	r3, [pc, #256]	; (810fac4 <etharp_output_to_arp_index+0x128>)
 810f9c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 810f9c6:	4940      	ldr	r1, [pc, #256]	; (810fac8 <etharp_output_to_arp_index+0x12c>)
 810f9c8:	4840      	ldr	r0, [pc, #256]	; (810facc <etharp_output_to_arp_index+0x130>)
 810f9ca:	f007 fefd 	bl	81177c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 810f9ce:	79fa      	ldrb	r2, [r7, #7]
 810f9d0:	493b      	ldr	r1, [pc, #236]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810f9d2:	4613      	mov	r3, r2
 810f9d4:	005b      	lsls	r3, r3, #1
 810f9d6:	4413      	add	r3, r2
 810f9d8:	00db      	lsls	r3, r3, #3
 810f9da:	440b      	add	r3, r1
 810f9dc:	3314      	adds	r3, #20
 810f9de:	781b      	ldrb	r3, [r3, #0]
 810f9e0:	2b02      	cmp	r3, #2
 810f9e2:	d153      	bne.n	810fa8c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 810f9e4:	79fa      	ldrb	r2, [r7, #7]
 810f9e6:	4936      	ldr	r1, [pc, #216]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810f9e8:	4613      	mov	r3, r2
 810f9ea:	005b      	lsls	r3, r3, #1
 810f9ec:	4413      	add	r3, r2
 810f9ee:	00db      	lsls	r3, r3, #3
 810f9f0:	440b      	add	r3, r1
 810f9f2:	3312      	adds	r3, #18
 810f9f4:	881b      	ldrh	r3, [r3, #0]
 810f9f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 810f9fa:	d919      	bls.n	810fa30 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 810f9fc:	79fa      	ldrb	r2, [r7, #7]
 810f9fe:	4613      	mov	r3, r2
 810fa00:	005b      	lsls	r3, r3, #1
 810fa02:	4413      	add	r3, r2
 810fa04:	00db      	lsls	r3, r3, #3
 810fa06:	4a2e      	ldr	r2, [pc, #184]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810fa08:	4413      	add	r3, r2
 810fa0a:	3304      	adds	r3, #4
 810fa0c:	4619      	mov	r1, r3
 810fa0e:	68f8      	ldr	r0, [r7, #12]
 810fa10:	f000 fb4c 	bl	81100ac <etharp_request>
 810fa14:	4603      	mov	r3, r0
 810fa16:	2b00      	cmp	r3, #0
 810fa18:	d138      	bne.n	810fa8c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810fa1a:	79fa      	ldrb	r2, [r7, #7]
 810fa1c:	4928      	ldr	r1, [pc, #160]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810fa1e:	4613      	mov	r3, r2
 810fa20:	005b      	lsls	r3, r3, #1
 810fa22:	4413      	add	r3, r2
 810fa24:	00db      	lsls	r3, r3, #3
 810fa26:	440b      	add	r3, r1
 810fa28:	3314      	adds	r3, #20
 810fa2a:	2203      	movs	r2, #3
 810fa2c:	701a      	strb	r2, [r3, #0]
 810fa2e:	e02d      	b.n	810fa8c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 810fa30:	79fa      	ldrb	r2, [r7, #7]
 810fa32:	4923      	ldr	r1, [pc, #140]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810fa34:	4613      	mov	r3, r2
 810fa36:	005b      	lsls	r3, r3, #1
 810fa38:	4413      	add	r3, r2
 810fa3a:	00db      	lsls	r3, r3, #3
 810fa3c:	440b      	add	r3, r1
 810fa3e:	3312      	adds	r3, #18
 810fa40:	881b      	ldrh	r3, [r3, #0]
 810fa42:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 810fa46:	d321      	bcc.n	810fa8c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 810fa48:	79fa      	ldrb	r2, [r7, #7]
 810fa4a:	4613      	mov	r3, r2
 810fa4c:	005b      	lsls	r3, r3, #1
 810fa4e:	4413      	add	r3, r2
 810fa50:	00db      	lsls	r3, r3, #3
 810fa52:	4a1b      	ldr	r2, [pc, #108]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810fa54:	4413      	add	r3, r2
 810fa56:	1d19      	adds	r1, r3, #4
 810fa58:	79fa      	ldrb	r2, [r7, #7]
 810fa5a:	4613      	mov	r3, r2
 810fa5c:	005b      	lsls	r3, r3, #1
 810fa5e:	4413      	add	r3, r2
 810fa60:	00db      	lsls	r3, r3, #3
 810fa62:	3308      	adds	r3, #8
 810fa64:	4a16      	ldr	r2, [pc, #88]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810fa66:	4413      	add	r3, r2
 810fa68:	3304      	adds	r3, #4
 810fa6a:	461a      	mov	r2, r3
 810fa6c:	68f8      	ldr	r0, [r7, #12]
 810fa6e:	f000 fafb 	bl	8110068 <etharp_request_dst>
 810fa72:	4603      	mov	r3, r0
 810fa74:	2b00      	cmp	r3, #0
 810fa76:	d109      	bne.n	810fa8c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810fa78:	79fa      	ldrb	r2, [r7, #7]
 810fa7a:	4911      	ldr	r1, [pc, #68]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810fa7c:	4613      	mov	r3, r2
 810fa7e:	005b      	lsls	r3, r3, #1
 810fa80:	4413      	add	r3, r2
 810fa82:	00db      	lsls	r3, r3, #3
 810fa84:	440b      	add	r3, r1
 810fa86:	3314      	adds	r3, #20
 810fa88:	2203      	movs	r2, #3
 810fa8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 810fa8c:	68fb      	ldr	r3, [r7, #12]
 810fa8e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 810fa92:	79fa      	ldrb	r2, [r7, #7]
 810fa94:	4613      	mov	r3, r2
 810fa96:	005b      	lsls	r3, r3, #1
 810fa98:	4413      	add	r3, r2
 810fa9a:	00db      	lsls	r3, r3, #3
 810fa9c:	3308      	adds	r3, #8
 810fa9e:	4a08      	ldr	r2, [pc, #32]	; (810fac0 <etharp_output_to_arp_index+0x124>)
 810faa0:	4413      	add	r3, r2
 810faa2:	3304      	adds	r3, #4
 810faa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810faa8:	9200      	str	r2, [sp, #0]
 810faaa:	460a      	mov	r2, r1
 810faac:	68b9      	ldr	r1, [r7, #8]
 810faae:	68f8      	ldr	r0, [r7, #12]
 810fab0:	f000 fb9c 	bl	81101ec <ethernet_output>
 810fab4:	4603      	mov	r3, r0
}
 810fab6:	4618      	mov	r0, r3
 810fab8:	3710      	adds	r7, #16
 810faba:	46bd      	mov	sp, r7
 810fabc:	bd80      	pop	{r7, pc}
 810fabe:	bf00      	nop
 810fac0:	10005810 	.word	0x10005810
 810fac4:	08119a38 	.word	0x08119a38
 810fac8:	08119be0 	.word	0x08119be0
 810facc:	08119ae8 	.word	0x08119ae8

0810fad0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 810fad0:	b580      	push	{r7, lr}
 810fad2:	b08a      	sub	sp, #40	; 0x28
 810fad4:	af02      	add	r7, sp, #8
 810fad6:	60f8      	str	r0, [r7, #12]
 810fad8:	60b9      	str	r1, [r7, #8]
 810fada:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 810fadc:	687b      	ldr	r3, [r7, #4]
 810fade:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 810fae0:	68fb      	ldr	r3, [r7, #12]
 810fae2:	2b00      	cmp	r3, #0
 810fae4:	d106      	bne.n	810faf4 <etharp_output+0x24>
 810fae6:	4b73      	ldr	r3, [pc, #460]	; (810fcb4 <etharp_output+0x1e4>)
 810fae8:	f240 321e 	movw	r2, #798	; 0x31e
 810faec:	4972      	ldr	r1, [pc, #456]	; (810fcb8 <etharp_output+0x1e8>)
 810faee:	4873      	ldr	r0, [pc, #460]	; (810fcbc <etharp_output+0x1ec>)
 810faf0:	f007 fe6a 	bl	81177c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 810faf4:	68bb      	ldr	r3, [r7, #8]
 810faf6:	2b00      	cmp	r3, #0
 810faf8:	d106      	bne.n	810fb08 <etharp_output+0x38>
 810fafa:	4b6e      	ldr	r3, [pc, #440]	; (810fcb4 <etharp_output+0x1e4>)
 810fafc:	f240 321f 	movw	r2, #799	; 0x31f
 810fb00:	496f      	ldr	r1, [pc, #444]	; (810fcc0 <etharp_output+0x1f0>)
 810fb02:	486e      	ldr	r0, [pc, #440]	; (810fcbc <etharp_output+0x1ec>)
 810fb04:	f007 fe60 	bl	81177c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 810fb08:	687b      	ldr	r3, [r7, #4]
 810fb0a:	2b00      	cmp	r3, #0
 810fb0c:	d106      	bne.n	810fb1c <etharp_output+0x4c>
 810fb0e:	4b69      	ldr	r3, [pc, #420]	; (810fcb4 <etharp_output+0x1e4>)
 810fb10:	f44f 7248 	mov.w	r2, #800	; 0x320
 810fb14:	496b      	ldr	r1, [pc, #428]	; (810fcc4 <etharp_output+0x1f4>)
 810fb16:	4869      	ldr	r0, [pc, #420]	; (810fcbc <etharp_output+0x1ec>)
 810fb18:	f007 fe56 	bl	81177c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 810fb1c:	687b      	ldr	r3, [r7, #4]
 810fb1e:	681b      	ldr	r3, [r3, #0]
 810fb20:	68f9      	ldr	r1, [r7, #12]
 810fb22:	4618      	mov	r0, r3
 810fb24:	f001 f8bc 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 810fb28:	4603      	mov	r3, r0
 810fb2a:	2b00      	cmp	r3, #0
 810fb2c:	d002      	beq.n	810fb34 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 810fb2e:	4b66      	ldr	r3, [pc, #408]	; (810fcc8 <etharp_output+0x1f8>)
 810fb30:	61fb      	str	r3, [r7, #28]
 810fb32:	e0af      	b.n	810fc94 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 810fb34:	687b      	ldr	r3, [r7, #4]
 810fb36:	681b      	ldr	r3, [r3, #0]
 810fb38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 810fb3c:	2be0      	cmp	r3, #224	; 0xe0
 810fb3e:	d118      	bne.n	810fb72 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 810fb40:	2301      	movs	r3, #1
 810fb42:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 810fb44:	2300      	movs	r3, #0
 810fb46:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 810fb48:	235e      	movs	r3, #94	; 0x5e
 810fb4a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 810fb4c:	687b      	ldr	r3, [r7, #4]
 810fb4e:	3301      	adds	r3, #1
 810fb50:	781b      	ldrb	r3, [r3, #0]
 810fb52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810fb56:	b2db      	uxtb	r3, r3
 810fb58:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 810fb5a:	687b      	ldr	r3, [r7, #4]
 810fb5c:	3302      	adds	r3, #2
 810fb5e:	781b      	ldrb	r3, [r3, #0]
 810fb60:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 810fb62:	687b      	ldr	r3, [r7, #4]
 810fb64:	3303      	adds	r3, #3
 810fb66:	781b      	ldrb	r3, [r3, #0]
 810fb68:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 810fb6a:	f107 0310 	add.w	r3, r7, #16
 810fb6e:	61fb      	str	r3, [r7, #28]
 810fb70:	e090      	b.n	810fc94 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810fb72:	687b      	ldr	r3, [r7, #4]
 810fb74:	681a      	ldr	r2, [r3, #0]
 810fb76:	68fb      	ldr	r3, [r7, #12]
 810fb78:	3304      	adds	r3, #4
 810fb7a:	681b      	ldr	r3, [r3, #0]
 810fb7c:	405a      	eors	r2, r3
 810fb7e:	68fb      	ldr	r3, [r7, #12]
 810fb80:	3308      	adds	r3, #8
 810fb82:	681b      	ldr	r3, [r3, #0]
 810fb84:	4013      	ands	r3, r2
 810fb86:	2b00      	cmp	r3, #0
 810fb88:	d012      	beq.n	810fbb0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 810fb8a:	687b      	ldr	r3, [r7, #4]
 810fb8c:	681b      	ldr	r3, [r3, #0]
 810fb8e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810fb90:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 810fb94:	4293      	cmp	r3, r2
 810fb96:	d00b      	beq.n	810fbb0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 810fb98:	68fb      	ldr	r3, [r7, #12]
 810fb9a:	330c      	adds	r3, #12
 810fb9c:	681b      	ldr	r3, [r3, #0]
 810fb9e:	2b00      	cmp	r3, #0
 810fba0:	d003      	beq.n	810fbaa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 810fba2:	68fb      	ldr	r3, [r7, #12]
 810fba4:	330c      	adds	r3, #12
 810fba6:	61bb      	str	r3, [r7, #24]
 810fba8:	e002      	b.n	810fbb0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 810fbaa:	f06f 0303 	mvn.w	r3, #3
 810fbae:	e07d      	b.n	810fcac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810fbb0:	4b46      	ldr	r3, [pc, #280]	; (810fccc <etharp_output+0x1fc>)
 810fbb2:	781b      	ldrb	r3, [r3, #0]
 810fbb4:	4619      	mov	r1, r3
 810fbb6:	4a46      	ldr	r2, [pc, #280]	; (810fcd0 <etharp_output+0x200>)
 810fbb8:	460b      	mov	r3, r1
 810fbba:	005b      	lsls	r3, r3, #1
 810fbbc:	440b      	add	r3, r1
 810fbbe:	00db      	lsls	r3, r3, #3
 810fbc0:	4413      	add	r3, r2
 810fbc2:	3314      	adds	r3, #20
 810fbc4:	781b      	ldrb	r3, [r3, #0]
 810fbc6:	2b01      	cmp	r3, #1
 810fbc8:	d925      	bls.n	810fc16 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 810fbca:	4b40      	ldr	r3, [pc, #256]	; (810fccc <etharp_output+0x1fc>)
 810fbcc:	781b      	ldrb	r3, [r3, #0]
 810fbce:	4619      	mov	r1, r3
 810fbd0:	4a3f      	ldr	r2, [pc, #252]	; (810fcd0 <etharp_output+0x200>)
 810fbd2:	460b      	mov	r3, r1
 810fbd4:	005b      	lsls	r3, r3, #1
 810fbd6:	440b      	add	r3, r1
 810fbd8:	00db      	lsls	r3, r3, #3
 810fbda:	4413      	add	r3, r2
 810fbdc:	3308      	adds	r3, #8
 810fbde:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810fbe0:	68fa      	ldr	r2, [r7, #12]
 810fbe2:	429a      	cmp	r2, r3
 810fbe4:	d117      	bne.n	810fc16 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 810fbe6:	69bb      	ldr	r3, [r7, #24]
 810fbe8:	681a      	ldr	r2, [r3, #0]
 810fbea:	4b38      	ldr	r3, [pc, #224]	; (810fccc <etharp_output+0x1fc>)
 810fbec:	781b      	ldrb	r3, [r3, #0]
 810fbee:	4618      	mov	r0, r3
 810fbf0:	4937      	ldr	r1, [pc, #220]	; (810fcd0 <etharp_output+0x200>)
 810fbf2:	4603      	mov	r3, r0
 810fbf4:	005b      	lsls	r3, r3, #1
 810fbf6:	4403      	add	r3, r0
 810fbf8:	00db      	lsls	r3, r3, #3
 810fbfa:	440b      	add	r3, r1
 810fbfc:	3304      	adds	r3, #4
 810fbfe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 810fc00:	429a      	cmp	r2, r3
 810fc02:	d108      	bne.n	810fc16 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 810fc04:	4b31      	ldr	r3, [pc, #196]	; (810fccc <etharp_output+0x1fc>)
 810fc06:	781b      	ldrb	r3, [r3, #0]
 810fc08:	461a      	mov	r2, r3
 810fc0a:	68b9      	ldr	r1, [r7, #8]
 810fc0c:	68f8      	ldr	r0, [r7, #12]
 810fc0e:	f7ff fec5 	bl	810f99c <etharp_output_to_arp_index>
 810fc12:	4603      	mov	r3, r0
 810fc14:	e04a      	b.n	810fcac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810fc16:	2300      	movs	r3, #0
 810fc18:	75fb      	strb	r3, [r7, #23]
 810fc1a:	e031      	b.n	810fc80 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810fc1c:	7dfa      	ldrb	r2, [r7, #23]
 810fc1e:	492c      	ldr	r1, [pc, #176]	; (810fcd0 <etharp_output+0x200>)
 810fc20:	4613      	mov	r3, r2
 810fc22:	005b      	lsls	r3, r3, #1
 810fc24:	4413      	add	r3, r2
 810fc26:	00db      	lsls	r3, r3, #3
 810fc28:	440b      	add	r3, r1
 810fc2a:	3314      	adds	r3, #20
 810fc2c:	781b      	ldrb	r3, [r3, #0]
 810fc2e:	2b01      	cmp	r3, #1
 810fc30:	d923      	bls.n	810fc7a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 810fc32:	7dfa      	ldrb	r2, [r7, #23]
 810fc34:	4926      	ldr	r1, [pc, #152]	; (810fcd0 <etharp_output+0x200>)
 810fc36:	4613      	mov	r3, r2
 810fc38:	005b      	lsls	r3, r3, #1
 810fc3a:	4413      	add	r3, r2
 810fc3c:	00db      	lsls	r3, r3, #3
 810fc3e:	440b      	add	r3, r1
 810fc40:	3308      	adds	r3, #8
 810fc42:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810fc44:	68fa      	ldr	r2, [r7, #12]
 810fc46:	429a      	cmp	r2, r3
 810fc48:	d117      	bne.n	810fc7a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 810fc4a:	69bb      	ldr	r3, [r7, #24]
 810fc4c:	6819      	ldr	r1, [r3, #0]
 810fc4e:	7dfa      	ldrb	r2, [r7, #23]
 810fc50:	481f      	ldr	r0, [pc, #124]	; (810fcd0 <etharp_output+0x200>)
 810fc52:	4613      	mov	r3, r2
 810fc54:	005b      	lsls	r3, r3, #1
 810fc56:	4413      	add	r3, r2
 810fc58:	00db      	lsls	r3, r3, #3
 810fc5a:	4403      	add	r3, r0
 810fc5c:	3304      	adds	r3, #4
 810fc5e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 810fc60:	4299      	cmp	r1, r3
 810fc62:	d10a      	bne.n	810fc7a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 810fc64:	4a19      	ldr	r2, [pc, #100]	; (810fccc <etharp_output+0x1fc>)
 810fc66:	7dfb      	ldrb	r3, [r7, #23]
 810fc68:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 810fc6a:	7dfb      	ldrb	r3, [r7, #23]
 810fc6c:	461a      	mov	r2, r3
 810fc6e:	68b9      	ldr	r1, [r7, #8]
 810fc70:	68f8      	ldr	r0, [r7, #12]
 810fc72:	f7ff fe93 	bl	810f99c <etharp_output_to_arp_index>
 810fc76:	4603      	mov	r3, r0
 810fc78:	e018      	b.n	810fcac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810fc7a:	7dfb      	ldrb	r3, [r7, #23]
 810fc7c:	3301      	adds	r3, #1
 810fc7e:	75fb      	strb	r3, [r7, #23]
 810fc80:	7dfb      	ldrb	r3, [r7, #23]
 810fc82:	2b09      	cmp	r3, #9
 810fc84:	d9ca      	bls.n	810fc1c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 810fc86:	68ba      	ldr	r2, [r7, #8]
 810fc88:	69b9      	ldr	r1, [r7, #24]
 810fc8a:	68f8      	ldr	r0, [r7, #12]
 810fc8c:	f000 f822 	bl	810fcd4 <etharp_query>
 810fc90:	4603      	mov	r3, r0
 810fc92:	e00b      	b.n	810fcac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 810fc94:	68fb      	ldr	r3, [r7, #12]
 810fc96:	f103 0226 	add.w	r2, r3, #38	; 0x26
 810fc9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810fc9e:	9300      	str	r3, [sp, #0]
 810fca0:	69fb      	ldr	r3, [r7, #28]
 810fca2:	68b9      	ldr	r1, [r7, #8]
 810fca4:	68f8      	ldr	r0, [r7, #12]
 810fca6:	f000 faa1 	bl	81101ec <ethernet_output>
 810fcaa:	4603      	mov	r3, r0
}
 810fcac:	4618      	mov	r0, r3
 810fcae:	3720      	adds	r7, #32
 810fcb0:	46bd      	mov	sp, r7
 810fcb2:	bd80      	pop	{r7, pc}
 810fcb4:	08119a38 	.word	0x08119a38
 810fcb8:	08119bc0 	.word	0x08119bc0
 810fcbc:	08119ae8 	.word	0x08119ae8
 810fcc0:	08119c10 	.word	0x08119c10
 810fcc4:	08119bb0 	.word	0x08119bb0
 810fcc8:	0811b6d4 	.word	0x0811b6d4
 810fccc:	10005900 	.word	0x10005900
 810fcd0:	10005810 	.word	0x10005810

0810fcd4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 810fcd4:	b580      	push	{r7, lr}
 810fcd6:	b08c      	sub	sp, #48	; 0x30
 810fcd8:	af02      	add	r7, sp, #8
 810fcda:	60f8      	str	r0, [r7, #12]
 810fcdc:	60b9      	str	r1, [r7, #8]
 810fcde:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 810fce0:	68fb      	ldr	r3, [r7, #12]
 810fce2:	3326      	adds	r3, #38	; 0x26
 810fce4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 810fce6:	23ff      	movs	r3, #255	; 0xff
 810fce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 810fcec:	2300      	movs	r3, #0
 810fcee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810fcf0:	68bb      	ldr	r3, [r7, #8]
 810fcf2:	681b      	ldr	r3, [r3, #0]
 810fcf4:	68f9      	ldr	r1, [r7, #12]
 810fcf6:	4618      	mov	r0, r3
 810fcf8:	f000 ffd2 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 810fcfc:	4603      	mov	r3, r0
 810fcfe:	2b00      	cmp	r3, #0
 810fd00:	d10c      	bne.n	810fd1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810fd02:	68bb      	ldr	r3, [r7, #8]
 810fd04:	681b      	ldr	r3, [r3, #0]
 810fd06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810fd0a:	2be0      	cmp	r3, #224	; 0xe0
 810fd0c:	d006      	beq.n	810fd1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810fd0e:	68bb      	ldr	r3, [r7, #8]
 810fd10:	2b00      	cmp	r3, #0
 810fd12:	d003      	beq.n	810fd1c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 810fd14:	68bb      	ldr	r3, [r7, #8]
 810fd16:	681b      	ldr	r3, [r3, #0]
 810fd18:	2b00      	cmp	r3, #0
 810fd1a:	d102      	bne.n	810fd22 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810fd1c:	f06f 030f 	mvn.w	r3, #15
 810fd20:	e101      	b.n	810ff26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 810fd22:	68fa      	ldr	r2, [r7, #12]
 810fd24:	2101      	movs	r1, #1
 810fd26:	68b8      	ldr	r0, [r7, #8]
 810fd28:	f7ff fb60 	bl	810f3ec <etharp_find_entry>
 810fd2c:	4603      	mov	r3, r0
 810fd2e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 810fd30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810fd34:	2b00      	cmp	r3, #0
 810fd36:	da02      	bge.n	810fd3e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 810fd38:	8a7b      	ldrh	r3, [r7, #18]
 810fd3a:	b25b      	sxtb	r3, r3
 810fd3c:	e0f3      	b.n	810ff26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 810fd3e:	8a7b      	ldrh	r3, [r7, #18]
 810fd40:	2b7e      	cmp	r3, #126	; 0x7e
 810fd42:	d906      	bls.n	810fd52 <etharp_query+0x7e>
 810fd44:	4b7a      	ldr	r3, [pc, #488]	; (810ff30 <etharp_query+0x25c>)
 810fd46:	f240 32c1 	movw	r2, #961	; 0x3c1
 810fd4a:	497a      	ldr	r1, [pc, #488]	; (810ff34 <etharp_query+0x260>)
 810fd4c:	487a      	ldr	r0, [pc, #488]	; (810ff38 <etharp_query+0x264>)
 810fd4e:	f007 fd3b 	bl	81177c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 810fd52:	8a7b      	ldrh	r3, [r7, #18]
 810fd54:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 810fd56:	7c7a      	ldrb	r2, [r7, #17]
 810fd58:	4978      	ldr	r1, [pc, #480]	; (810ff3c <etharp_query+0x268>)
 810fd5a:	4613      	mov	r3, r2
 810fd5c:	005b      	lsls	r3, r3, #1
 810fd5e:	4413      	add	r3, r2
 810fd60:	00db      	lsls	r3, r3, #3
 810fd62:	440b      	add	r3, r1
 810fd64:	3314      	adds	r3, #20
 810fd66:	781b      	ldrb	r3, [r3, #0]
 810fd68:	2b00      	cmp	r3, #0
 810fd6a:	d115      	bne.n	810fd98 <etharp_query+0xc4>
    is_new_entry = 1;
 810fd6c:	2301      	movs	r3, #1
 810fd6e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 810fd70:	7c7a      	ldrb	r2, [r7, #17]
 810fd72:	4972      	ldr	r1, [pc, #456]	; (810ff3c <etharp_query+0x268>)
 810fd74:	4613      	mov	r3, r2
 810fd76:	005b      	lsls	r3, r3, #1
 810fd78:	4413      	add	r3, r2
 810fd7a:	00db      	lsls	r3, r3, #3
 810fd7c:	440b      	add	r3, r1
 810fd7e:	3314      	adds	r3, #20
 810fd80:	2201      	movs	r2, #1
 810fd82:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 810fd84:	7c7a      	ldrb	r2, [r7, #17]
 810fd86:	496d      	ldr	r1, [pc, #436]	; (810ff3c <etharp_query+0x268>)
 810fd88:	4613      	mov	r3, r2
 810fd8a:	005b      	lsls	r3, r3, #1
 810fd8c:	4413      	add	r3, r2
 810fd8e:	00db      	lsls	r3, r3, #3
 810fd90:	440b      	add	r3, r1
 810fd92:	3308      	adds	r3, #8
 810fd94:	68fa      	ldr	r2, [r7, #12]
 810fd96:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 810fd98:	7c7a      	ldrb	r2, [r7, #17]
 810fd9a:	4968      	ldr	r1, [pc, #416]	; (810ff3c <etharp_query+0x268>)
 810fd9c:	4613      	mov	r3, r2
 810fd9e:	005b      	lsls	r3, r3, #1
 810fda0:	4413      	add	r3, r2
 810fda2:	00db      	lsls	r3, r3, #3
 810fda4:	440b      	add	r3, r1
 810fda6:	3314      	adds	r3, #20
 810fda8:	781b      	ldrb	r3, [r3, #0]
 810fdaa:	2b01      	cmp	r3, #1
 810fdac:	d011      	beq.n	810fdd2 <etharp_query+0xfe>
 810fdae:	7c7a      	ldrb	r2, [r7, #17]
 810fdb0:	4962      	ldr	r1, [pc, #392]	; (810ff3c <etharp_query+0x268>)
 810fdb2:	4613      	mov	r3, r2
 810fdb4:	005b      	lsls	r3, r3, #1
 810fdb6:	4413      	add	r3, r2
 810fdb8:	00db      	lsls	r3, r3, #3
 810fdba:	440b      	add	r3, r1
 810fdbc:	3314      	adds	r3, #20
 810fdbe:	781b      	ldrb	r3, [r3, #0]
 810fdc0:	2b01      	cmp	r3, #1
 810fdc2:	d806      	bhi.n	810fdd2 <etharp_query+0xfe>
 810fdc4:	4b5a      	ldr	r3, [pc, #360]	; (810ff30 <etharp_query+0x25c>)
 810fdc6:	f240 32cd 	movw	r2, #973	; 0x3cd
 810fdca:	495d      	ldr	r1, [pc, #372]	; (810ff40 <etharp_query+0x26c>)
 810fdcc:	485a      	ldr	r0, [pc, #360]	; (810ff38 <etharp_query+0x264>)
 810fdce:	f007 fcfb 	bl	81177c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 810fdd2:	6a3b      	ldr	r3, [r7, #32]
 810fdd4:	2b00      	cmp	r3, #0
 810fdd6:	d102      	bne.n	810fdde <etharp_query+0x10a>
 810fdd8:	687b      	ldr	r3, [r7, #4]
 810fdda:	2b00      	cmp	r3, #0
 810fddc:	d10c      	bne.n	810fdf8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 810fdde:	68b9      	ldr	r1, [r7, #8]
 810fde0:	68f8      	ldr	r0, [r7, #12]
 810fde2:	f000 f963 	bl	81100ac <etharp_request>
 810fde6:	4603      	mov	r3, r0
 810fde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 810fdec:	687b      	ldr	r3, [r7, #4]
 810fdee:	2b00      	cmp	r3, #0
 810fdf0:	d102      	bne.n	810fdf8 <etharp_query+0x124>
      return result;
 810fdf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810fdf6:	e096      	b.n	810ff26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 810fdf8:	687b      	ldr	r3, [r7, #4]
 810fdfa:	2b00      	cmp	r3, #0
 810fdfc:	d106      	bne.n	810fe0c <etharp_query+0x138>
 810fdfe:	4b4c      	ldr	r3, [pc, #304]	; (810ff30 <etharp_query+0x25c>)
 810fe00:	f240 32e1 	movw	r2, #993	; 0x3e1
 810fe04:	494f      	ldr	r1, [pc, #316]	; (810ff44 <etharp_query+0x270>)
 810fe06:	484c      	ldr	r0, [pc, #304]	; (810ff38 <etharp_query+0x264>)
 810fe08:	f007 fcde 	bl	81177c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 810fe0c:	7c7a      	ldrb	r2, [r7, #17]
 810fe0e:	494b      	ldr	r1, [pc, #300]	; (810ff3c <etharp_query+0x268>)
 810fe10:	4613      	mov	r3, r2
 810fe12:	005b      	lsls	r3, r3, #1
 810fe14:	4413      	add	r3, r2
 810fe16:	00db      	lsls	r3, r3, #3
 810fe18:	440b      	add	r3, r1
 810fe1a:	3314      	adds	r3, #20
 810fe1c:	781b      	ldrb	r3, [r3, #0]
 810fe1e:	2b01      	cmp	r3, #1
 810fe20:	d917      	bls.n	810fe52 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 810fe22:	4a49      	ldr	r2, [pc, #292]	; (810ff48 <etharp_query+0x274>)
 810fe24:	7c7b      	ldrb	r3, [r7, #17]
 810fe26:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 810fe28:	7c7a      	ldrb	r2, [r7, #17]
 810fe2a:	4613      	mov	r3, r2
 810fe2c:	005b      	lsls	r3, r3, #1
 810fe2e:	4413      	add	r3, r2
 810fe30:	00db      	lsls	r3, r3, #3
 810fe32:	3308      	adds	r3, #8
 810fe34:	4a41      	ldr	r2, [pc, #260]	; (810ff3c <etharp_query+0x268>)
 810fe36:	4413      	add	r3, r2
 810fe38:	3304      	adds	r3, #4
 810fe3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810fe3e:	9200      	str	r2, [sp, #0]
 810fe40:	697a      	ldr	r2, [r7, #20]
 810fe42:	6879      	ldr	r1, [r7, #4]
 810fe44:	68f8      	ldr	r0, [r7, #12]
 810fe46:	f000 f9d1 	bl	81101ec <ethernet_output>
 810fe4a:	4603      	mov	r3, r0
 810fe4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 810fe50:	e067      	b.n	810ff22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810fe52:	7c7a      	ldrb	r2, [r7, #17]
 810fe54:	4939      	ldr	r1, [pc, #228]	; (810ff3c <etharp_query+0x268>)
 810fe56:	4613      	mov	r3, r2
 810fe58:	005b      	lsls	r3, r3, #1
 810fe5a:	4413      	add	r3, r2
 810fe5c:	00db      	lsls	r3, r3, #3
 810fe5e:	440b      	add	r3, r1
 810fe60:	3314      	adds	r3, #20
 810fe62:	781b      	ldrb	r3, [r3, #0]
 810fe64:	2b01      	cmp	r3, #1
 810fe66:	d15c      	bne.n	810ff22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 810fe68:	2300      	movs	r3, #0
 810fe6a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 810fe6c:	687b      	ldr	r3, [r7, #4]
 810fe6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 810fe70:	e01c      	b.n	810feac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 810fe72:	69fb      	ldr	r3, [r7, #28]
 810fe74:	895a      	ldrh	r2, [r3, #10]
 810fe76:	69fb      	ldr	r3, [r7, #28]
 810fe78:	891b      	ldrh	r3, [r3, #8]
 810fe7a:	429a      	cmp	r2, r3
 810fe7c:	d10a      	bne.n	810fe94 <etharp_query+0x1c0>
 810fe7e:	69fb      	ldr	r3, [r7, #28]
 810fe80:	681b      	ldr	r3, [r3, #0]
 810fe82:	2b00      	cmp	r3, #0
 810fe84:	d006      	beq.n	810fe94 <etharp_query+0x1c0>
 810fe86:	4b2a      	ldr	r3, [pc, #168]	; (810ff30 <etharp_query+0x25c>)
 810fe88:	f240 32f1 	movw	r2, #1009	; 0x3f1
 810fe8c:	492f      	ldr	r1, [pc, #188]	; (810ff4c <etharp_query+0x278>)
 810fe8e:	482a      	ldr	r0, [pc, #168]	; (810ff38 <etharp_query+0x264>)
 810fe90:	f007 fc9a 	bl	81177c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 810fe94:	69fb      	ldr	r3, [r7, #28]
 810fe96:	7b1b      	ldrb	r3, [r3, #12]
 810fe98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810fe9c:	2b00      	cmp	r3, #0
 810fe9e:	d002      	beq.n	810fea6 <etharp_query+0x1d2>
        copy_needed = 1;
 810fea0:	2301      	movs	r3, #1
 810fea2:	61bb      	str	r3, [r7, #24]
        break;
 810fea4:	e005      	b.n	810feb2 <etharp_query+0x1de>
      }
      p = p->next;
 810fea6:	69fb      	ldr	r3, [r7, #28]
 810fea8:	681b      	ldr	r3, [r3, #0]
 810feaa:	61fb      	str	r3, [r7, #28]
    while (p) {
 810feac:	69fb      	ldr	r3, [r7, #28]
 810feae:	2b00      	cmp	r3, #0
 810feb0:	d1df      	bne.n	810fe72 <etharp_query+0x19e>
    }
    if (copy_needed) {
 810feb2:	69bb      	ldr	r3, [r7, #24]
 810feb4:	2b00      	cmp	r3, #0
 810feb6:	d007      	beq.n	810fec8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 810feb8:	687a      	ldr	r2, [r7, #4]
 810feba:	f44f 7120 	mov.w	r1, #640	; 0x280
 810febe:	200e      	movs	r0, #14
 810fec0:	f003 fb58 	bl	8113574 <pbuf_clone>
 810fec4:	61f8      	str	r0, [r7, #28]
 810fec6:	e004      	b.n	810fed2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 810fec8:	687b      	ldr	r3, [r7, #4]
 810feca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 810fecc:	69f8      	ldr	r0, [r7, #28]
 810fece:	f003 f95f 	bl	8113190 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 810fed2:	69fb      	ldr	r3, [r7, #28]
 810fed4:	2b00      	cmp	r3, #0
 810fed6:	d021      	beq.n	810ff1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 810fed8:	7c7a      	ldrb	r2, [r7, #17]
 810feda:	4918      	ldr	r1, [pc, #96]	; (810ff3c <etharp_query+0x268>)
 810fedc:	4613      	mov	r3, r2
 810fede:	005b      	lsls	r3, r3, #1
 810fee0:	4413      	add	r3, r2
 810fee2:	00db      	lsls	r3, r3, #3
 810fee4:	440b      	add	r3, r1
 810fee6:	681b      	ldr	r3, [r3, #0]
 810fee8:	2b00      	cmp	r3, #0
 810feea:	d00a      	beq.n	810ff02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 810feec:	7c7a      	ldrb	r2, [r7, #17]
 810feee:	4913      	ldr	r1, [pc, #76]	; (810ff3c <etharp_query+0x268>)
 810fef0:	4613      	mov	r3, r2
 810fef2:	005b      	lsls	r3, r3, #1
 810fef4:	4413      	add	r3, r2
 810fef6:	00db      	lsls	r3, r3, #3
 810fef8:	440b      	add	r3, r1
 810fefa:	681b      	ldr	r3, [r3, #0]
 810fefc:	4618      	mov	r0, r3
 810fefe:	f003 f8a1 	bl	8113044 <pbuf_free>
      }
      arp_table[i].q = p;
 810ff02:	7c7a      	ldrb	r2, [r7, #17]
 810ff04:	490d      	ldr	r1, [pc, #52]	; (810ff3c <etharp_query+0x268>)
 810ff06:	4613      	mov	r3, r2
 810ff08:	005b      	lsls	r3, r3, #1
 810ff0a:	4413      	add	r3, r2
 810ff0c:	00db      	lsls	r3, r3, #3
 810ff0e:	440b      	add	r3, r1
 810ff10:	69fa      	ldr	r2, [r7, #28]
 810ff12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 810ff14:	2300      	movs	r3, #0
 810ff16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 810ff1a:	e002      	b.n	810ff22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 810ff1c:	23ff      	movs	r3, #255	; 0xff
 810ff1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 810ff22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 810ff26:	4618      	mov	r0, r3
 810ff28:	3728      	adds	r7, #40	; 0x28
 810ff2a:	46bd      	mov	sp, r7
 810ff2c:	bd80      	pop	{r7, pc}
 810ff2e:	bf00      	nop
 810ff30:	08119a38 	.word	0x08119a38
 810ff34:	08119c1c 	.word	0x08119c1c
 810ff38:	08119ae8 	.word	0x08119ae8
 810ff3c:	10005810 	.word	0x10005810
 810ff40:	08119c2c 	.word	0x08119c2c
 810ff44:	08119c10 	.word	0x08119c10
 810ff48:	10005900 	.word	0x10005900
 810ff4c:	08119c54 	.word	0x08119c54

0810ff50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 810ff50:	b580      	push	{r7, lr}
 810ff52:	b08a      	sub	sp, #40	; 0x28
 810ff54:	af02      	add	r7, sp, #8
 810ff56:	60f8      	str	r0, [r7, #12]
 810ff58:	60b9      	str	r1, [r7, #8]
 810ff5a:	607a      	str	r2, [r7, #4]
 810ff5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 810ff5e:	2300      	movs	r3, #0
 810ff60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 810ff62:	68fb      	ldr	r3, [r7, #12]
 810ff64:	2b00      	cmp	r3, #0
 810ff66:	d106      	bne.n	810ff76 <etharp_raw+0x26>
 810ff68:	4b3a      	ldr	r3, [pc, #232]	; (8110054 <etharp_raw+0x104>)
 810ff6a:	f240 4257 	movw	r2, #1111	; 0x457
 810ff6e:	493a      	ldr	r1, [pc, #232]	; (8110058 <etharp_raw+0x108>)
 810ff70:	483a      	ldr	r0, [pc, #232]	; (811005c <etharp_raw+0x10c>)
 810ff72:	f007 fc29 	bl	81177c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 810ff76:	f44f 7220 	mov.w	r2, #640	; 0x280
 810ff7a:	211c      	movs	r1, #28
 810ff7c:	200e      	movs	r0, #14
 810ff7e:	f002 fd7f 	bl	8112a80 <pbuf_alloc>
 810ff82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 810ff84:	69bb      	ldr	r3, [r7, #24]
 810ff86:	2b00      	cmp	r3, #0
 810ff88:	d102      	bne.n	810ff90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 810ff8a:	f04f 33ff 	mov.w	r3, #4294967295
 810ff8e:	e05d      	b.n	811004c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 810ff90:	69bb      	ldr	r3, [r7, #24]
 810ff92:	895b      	ldrh	r3, [r3, #10]
 810ff94:	2b1b      	cmp	r3, #27
 810ff96:	d806      	bhi.n	810ffa6 <etharp_raw+0x56>
 810ff98:	4b2e      	ldr	r3, [pc, #184]	; (8110054 <etharp_raw+0x104>)
 810ff9a:	f240 4262 	movw	r2, #1122	; 0x462
 810ff9e:	4930      	ldr	r1, [pc, #192]	; (8110060 <etharp_raw+0x110>)
 810ffa0:	482e      	ldr	r0, [pc, #184]	; (811005c <etharp_raw+0x10c>)
 810ffa2:	f007 fc11 	bl	81177c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 810ffa6:	69bb      	ldr	r3, [r7, #24]
 810ffa8:	685b      	ldr	r3, [r3, #4]
 810ffaa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 810ffac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 810ffae:	4618      	mov	r0, r3
 810ffb0:	f7ff f92c 	bl	810f20c <lwip_htons>
 810ffb4:	4603      	mov	r3, r0
 810ffb6:	461a      	mov	r2, r3
 810ffb8:	697b      	ldr	r3, [r7, #20]
 810ffba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 810ffbc:	68fb      	ldr	r3, [r7, #12]
 810ffbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810ffc2:	2b06      	cmp	r3, #6
 810ffc4:	d006      	beq.n	810ffd4 <etharp_raw+0x84>
 810ffc6:	4b23      	ldr	r3, [pc, #140]	; (8110054 <etharp_raw+0x104>)
 810ffc8:	f240 4269 	movw	r2, #1129	; 0x469
 810ffcc:	4925      	ldr	r1, [pc, #148]	; (8110064 <etharp_raw+0x114>)
 810ffce:	4823      	ldr	r0, [pc, #140]	; (811005c <etharp_raw+0x10c>)
 810ffd0:	f007 fbfa 	bl	81177c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 810ffd4:	697b      	ldr	r3, [r7, #20]
 810ffd6:	3308      	adds	r3, #8
 810ffd8:	2206      	movs	r2, #6
 810ffda:	6839      	ldr	r1, [r7, #0]
 810ffdc:	4618      	mov	r0, r3
 810ffde:	f006 ff18 	bl	8116e12 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 810ffe2:	697b      	ldr	r3, [r7, #20]
 810ffe4:	3312      	adds	r3, #18
 810ffe6:	2206      	movs	r2, #6
 810ffe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810ffea:	4618      	mov	r0, r3
 810ffec:	f006 ff11 	bl	8116e12 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 810fff0:	697b      	ldr	r3, [r7, #20]
 810fff2:	330e      	adds	r3, #14
 810fff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810fff6:	6812      	ldr	r2, [r2, #0]
 810fff8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 810fffa:	697b      	ldr	r3, [r7, #20]
 810fffc:	3318      	adds	r3, #24
 810fffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8110000:	6812      	ldr	r2, [r2, #0]
 8110002:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8110004:	697b      	ldr	r3, [r7, #20]
 8110006:	2200      	movs	r2, #0
 8110008:	701a      	strb	r2, [r3, #0]
 811000a:	2200      	movs	r2, #0
 811000c:	f042 0201 	orr.w	r2, r2, #1
 8110010:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8110012:	697b      	ldr	r3, [r7, #20]
 8110014:	2200      	movs	r2, #0
 8110016:	f042 0208 	orr.w	r2, r2, #8
 811001a:	709a      	strb	r2, [r3, #2]
 811001c:	2200      	movs	r2, #0
 811001e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8110020:	697b      	ldr	r3, [r7, #20]
 8110022:	2206      	movs	r2, #6
 8110024:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8110026:	697b      	ldr	r3, [r7, #20]
 8110028:	2204      	movs	r2, #4
 811002a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 811002c:	f640 0306 	movw	r3, #2054	; 0x806
 8110030:	9300      	str	r3, [sp, #0]
 8110032:	687b      	ldr	r3, [r7, #4]
 8110034:	68ba      	ldr	r2, [r7, #8]
 8110036:	69b9      	ldr	r1, [r7, #24]
 8110038:	68f8      	ldr	r0, [r7, #12]
 811003a:	f000 f8d7 	bl	81101ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 811003e:	69b8      	ldr	r0, [r7, #24]
 8110040:	f003 f800 	bl	8113044 <pbuf_free>
  p = NULL;
 8110044:	2300      	movs	r3, #0
 8110046:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8110048:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 811004c:	4618      	mov	r0, r3
 811004e:	3720      	adds	r7, #32
 8110050:	46bd      	mov	sp, r7
 8110052:	bd80      	pop	{r7, pc}
 8110054:	08119a38 	.word	0x08119a38
 8110058:	08119bc0 	.word	0x08119bc0
 811005c:	08119ae8 	.word	0x08119ae8
 8110060:	08119c70 	.word	0x08119c70
 8110064:	08119ca4 	.word	0x08119ca4

08110068 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8110068:	b580      	push	{r7, lr}
 811006a:	b088      	sub	sp, #32
 811006c:	af04      	add	r7, sp, #16
 811006e:	60f8      	str	r0, [r7, #12]
 8110070:	60b9      	str	r1, [r7, #8]
 8110072:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8110074:	68fb      	ldr	r3, [r7, #12]
 8110076:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 811007a:	68fb      	ldr	r3, [r7, #12]
 811007c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8110080:	68fb      	ldr	r3, [r7, #12]
 8110082:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8110084:	2201      	movs	r2, #1
 8110086:	9203      	str	r2, [sp, #12]
 8110088:	68ba      	ldr	r2, [r7, #8]
 811008a:	9202      	str	r2, [sp, #8]
 811008c:	4a06      	ldr	r2, [pc, #24]	; (81100a8 <etharp_request_dst+0x40>)
 811008e:	9201      	str	r2, [sp, #4]
 8110090:	9300      	str	r3, [sp, #0]
 8110092:	4603      	mov	r3, r0
 8110094:	687a      	ldr	r2, [r7, #4]
 8110096:	68f8      	ldr	r0, [r7, #12]
 8110098:	f7ff ff5a 	bl	810ff50 <etharp_raw>
 811009c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 811009e:	4618      	mov	r0, r3
 81100a0:	3710      	adds	r7, #16
 81100a2:	46bd      	mov	sp, r7
 81100a4:	bd80      	pop	{r7, pc}
 81100a6:	bf00      	nop
 81100a8:	0811b6dc 	.word	0x0811b6dc

081100ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 81100ac:	b580      	push	{r7, lr}
 81100ae:	b082      	sub	sp, #8
 81100b0:	af00      	add	r7, sp, #0
 81100b2:	6078      	str	r0, [r7, #4]
 81100b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 81100b6:	4a05      	ldr	r2, [pc, #20]	; (81100cc <etharp_request+0x20>)
 81100b8:	6839      	ldr	r1, [r7, #0]
 81100ba:	6878      	ldr	r0, [r7, #4]
 81100bc:	f7ff ffd4 	bl	8110068 <etharp_request_dst>
 81100c0:	4603      	mov	r3, r0
}
 81100c2:	4618      	mov	r0, r3
 81100c4:	3708      	adds	r7, #8
 81100c6:	46bd      	mov	sp, r7
 81100c8:	bd80      	pop	{r7, pc}
 81100ca:	bf00      	nop
 81100cc:	0811b6d4 	.word	0x0811b6d4

081100d0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 81100d0:	b580      	push	{r7, lr}
 81100d2:	b086      	sub	sp, #24
 81100d4:	af00      	add	r7, sp, #0
 81100d6:	6078      	str	r0, [r7, #4]
 81100d8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 81100da:	230e      	movs	r3, #14
 81100dc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 81100de:	687b      	ldr	r3, [r7, #4]
 81100e0:	895b      	ldrh	r3, [r3, #10]
 81100e2:	2b0e      	cmp	r3, #14
 81100e4:	d96e      	bls.n	81101c4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 81100e6:	687b      	ldr	r3, [r7, #4]
 81100e8:	7bdb      	ldrb	r3, [r3, #15]
 81100ea:	2b00      	cmp	r3, #0
 81100ec:	d106      	bne.n	81100fc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 81100ee:	683b      	ldr	r3, [r7, #0]
 81100f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81100f4:	3301      	adds	r3, #1
 81100f6:	b2da      	uxtb	r2, r3
 81100f8:	687b      	ldr	r3, [r7, #4]
 81100fa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 81100fc:	687b      	ldr	r3, [r7, #4]
 81100fe:	685b      	ldr	r3, [r3, #4]
 8110100:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8110102:	693b      	ldr	r3, [r7, #16]
 8110104:	7b1a      	ldrb	r2, [r3, #12]
 8110106:	7b5b      	ldrb	r3, [r3, #13]
 8110108:	021b      	lsls	r3, r3, #8
 811010a:	4313      	orrs	r3, r2
 811010c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 811010e:	693b      	ldr	r3, [r7, #16]
 8110110:	781b      	ldrb	r3, [r3, #0]
 8110112:	f003 0301 	and.w	r3, r3, #1
 8110116:	2b00      	cmp	r3, #0
 8110118:	d023      	beq.n	8110162 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 811011a:	693b      	ldr	r3, [r7, #16]
 811011c:	781b      	ldrb	r3, [r3, #0]
 811011e:	2b01      	cmp	r3, #1
 8110120:	d10f      	bne.n	8110142 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8110122:	693b      	ldr	r3, [r7, #16]
 8110124:	785b      	ldrb	r3, [r3, #1]
 8110126:	2b00      	cmp	r3, #0
 8110128:	d11b      	bne.n	8110162 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 811012a:	693b      	ldr	r3, [r7, #16]
 811012c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 811012e:	2b5e      	cmp	r3, #94	; 0x5e
 8110130:	d117      	bne.n	8110162 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8110132:	687b      	ldr	r3, [r7, #4]
 8110134:	7b5b      	ldrb	r3, [r3, #13]
 8110136:	f043 0310 	orr.w	r3, r3, #16
 811013a:	b2da      	uxtb	r2, r3
 811013c:	687b      	ldr	r3, [r7, #4]
 811013e:	735a      	strb	r2, [r3, #13]
 8110140:	e00f      	b.n	8110162 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8110142:	693b      	ldr	r3, [r7, #16]
 8110144:	2206      	movs	r2, #6
 8110146:	4928      	ldr	r1, [pc, #160]	; (81101e8 <ethernet_input+0x118>)
 8110148:	4618      	mov	r0, r3
 811014a:	f006 fe54 	bl	8116df6 <memcmp>
 811014e:	4603      	mov	r3, r0
 8110150:	2b00      	cmp	r3, #0
 8110152:	d106      	bne.n	8110162 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8110154:	687b      	ldr	r3, [r7, #4]
 8110156:	7b5b      	ldrb	r3, [r3, #13]
 8110158:	f043 0308 	orr.w	r3, r3, #8
 811015c:	b2da      	uxtb	r2, r3
 811015e:	687b      	ldr	r3, [r7, #4]
 8110160:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8110162:	89fb      	ldrh	r3, [r7, #14]
 8110164:	2b08      	cmp	r3, #8
 8110166:	d003      	beq.n	8110170 <ethernet_input+0xa0>
 8110168:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 811016c:	d014      	beq.n	8110198 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 811016e:	e032      	b.n	81101d6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8110170:	683b      	ldr	r3, [r7, #0]
 8110172:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8110176:	f003 0308 	and.w	r3, r3, #8
 811017a:	2b00      	cmp	r3, #0
 811017c:	d024      	beq.n	81101c8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 811017e:	8afb      	ldrh	r3, [r7, #22]
 8110180:	4619      	mov	r1, r3
 8110182:	6878      	ldr	r0, [r7, #4]
 8110184:	f002 fed8 	bl	8112f38 <pbuf_remove_header>
 8110188:	4603      	mov	r3, r0
 811018a:	2b00      	cmp	r3, #0
 811018c:	d11e      	bne.n	81101cc <ethernet_input+0xfc>
        ip4_input(p, netif);
 811018e:	6839      	ldr	r1, [r7, #0]
 8110190:	6878      	ldr	r0, [r7, #4]
 8110192:	f000 fb93 	bl	81108bc <ip4_input>
      break;
 8110196:	e013      	b.n	81101c0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8110198:	683b      	ldr	r3, [r7, #0]
 811019a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811019e:	f003 0308 	and.w	r3, r3, #8
 81101a2:	2b00      	cmp	r3, #0
 81101a4:	d014      	beq.n	81101d0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 81101a6:	8afb      	ldrh	r3, [r7, #22]
 81101a8:	4619      	mov	r1, r3
 81101aa:	6878      	ldr	r0, [r7, #4]
 81101ac:	f002 fec4 	bl	8112f38 <pbuf_remove_header>
 81101b0:	4603      	mov	r3, r0
 81101b2:	2b00      	cmp	r3, #0
 81101b4:	d10e      	bne.n	81101d4 <ethernet_input+0x104>
        etharp_input(p, netif);
 81101b6:	6839      	ldr	r1, [r7, #0]
 81101b8:	6878      	ldr	r0, [r7, #4]
 81101ba:	f7ff fb65 	bl	810f888 <etharp_input>
      break;
 81101be:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 81101c0:	2300      	movs	r3, #0
 81101c2:	e00c      	b.n	81101de <ethernet_input+0x10e>
    goto free_and_return;
 81101c4:	bf00      	nop
 81101c6:	e006      	b.n	81101d6 <ethernet_input+0x106>
        goto free_and_return;
 81101c8:	bf00      	nop
 81101ca:	e004      	b.n	81101d6 <ethernet_input+0x106>
        goto free_and_return;
 81101cc:	bf00      	nop
 81101ce:	e002      	b.n	81101d6 <ethernet_input+0x106>
        goto free_and_return;
 81101d0:	bf00      	nop
 81101d2:	e000      	b.n	81101d6 <ethernet_input+0x106>
        goto free_and_return;
 81101d4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 81101d6:	6878      	ldr	r0, [r7, #4]
 81101d8:	f002 ff34 	bl	8113044 <pbuf_free>
  return ERR_OK;
 81101dc:	2300      	movs	r3, #0
}
 81101de:	4618      	mov	r0, r3
 81101e0:	3718      	adds	r7, #24
 81101e2:	46bd      	mov	sp, r7
 81101e4:	bd80      	pop	{r7, pc}
 81101e6:	bf00      	nop
 81101e8:	0811b6d4 	.word	0x0811b6d4

081101ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 81101ec:	b580      	push	{r7, lr}
 81101ee:	b086      	sub	sp, #24
 81101f0:	af00      	add	r7, sp, #0
 81101f2:	60f8      	str	r0, [r7, #12]
 81101f4:	60b9      	str	r1, [r7, #8]
 81101f6:	607a      	str	r2, [r7, #4]
 81101f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 81101fa:	8c3b      	ldrh	r3, [r7, #32]
 81101fc:	4618      	mov	r0, r3
 81101fe:	f7ff f805 	bl	810f20c <lwip_htons>
 8110202:	4603      	mov	r3, r0
 8110204:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8110206:	210e      	movs	r1, #14
 8110208:	68b8      	ldr	r0, [r7, #8]
 811020a:	f002 fe85 	bl	8112f18 <pbuf_add_header>
 811020e:	4603      	mov	r3, r0
 8110210:	2b00      	cmp	r3, #0
 8110212:	d125      	bne.n	8110260 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8110214:	68bb      	ldr	r3, [r7, #8]
 8110216:	685b      	ldr	r3, [r3, #4]
 8110218:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 811021a:	693b      	ldr	r3, [r7, #16]
 811021c:	8afa      	ldrh	r2, [r7, #22]
 811021e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8110220:	693b      	ldr	r3, [r7, #16]
 8110222:	2206      	movs	r2, #6
 8110224:	6839      	ldr	r1, [r7, #0]
 8110226:	4618      	mov	r0, r3
 8110228:	f006 fdf3 	bl	8116e12 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 811022c:	693b      	ldr	r3, [r7, #16]
 811022e:	3306      	adds	r3, #6
 8110230:	2206      	movs	r2, #6
 8110232:	6879      	ldr	r1, [r7, #4]
 8110234:	4618      	mov	r0, r3
 8110236:	f006 fdec 	bl	8116e12 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 811023a:	68fb      	ldr	r3, [r7, #12]
 811023c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8110240:	2b06      	cmp	r3, #6
 8110242:	d006      	beq.n	8110252 <ethernet_output+0x66>
 8110244:	4b0a      	ldr	r3, [pc, #40]	; (8110270 <ethernet_output+0x84>)
 8110246:	f44f 7299 	mov.w	r2, #306	; 0x132
 811024a:	490a      	ldr	r1, [pc, #40]	; (8110274 <ethernet_output+0x88>)
 811024c:	480a      	ldr	r0, [pc, #40]	; (8110278 <ethernet_output+0x8c>)
 811024e:	f007 fabb 	bl	81177c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8110252:	68fb      	ldr	r3, [r7, #12]
 8110254:	699b      	ldr	r3, [r3, #24]
 8110256:	68b9      	ldr	r1, [r7, #8]
 8110258:	68f8      	ldr	r0, [r7, #12]
 811025a:	4798      	blx	r3
 811025c:	4603      	mov	r3, r0
 811025e:	e002      	b.n	8110266 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8110260:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8110262:	f06f 0301 	mvn.w	r3, #1
}
 8110266:	4618      	mov	r0, r3
 8110268:	3718      	adds	r7, #24
 811026a:	46bd      	mov	sp, r7
 811026c:	bd80      	pop	{r7, pc}
 811026e:	bf00      	nop
 8110270:	08119ce8 	.word	0x08119ce8
 8110274:	08119d58 	.word	0x08119d58
 8110278:	08119d8c 	.word	0x08119d8c

0811027c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 811027c:	b580      	push	{r7, lr}
 811027e:	b08e      	sub	sp, #56	; 0x38
 8110280:	af04      	add	r7, sp, #16
 8110282:	6078      	str	r0, [r7, #4]
 8110284:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8110286:	4b87      	ldr	r3, [pc, #540]	; (81104a4 <icmp_input+0x228>)
 8110288:	689b      	ldr	r3, [r3, #8]
 811028a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 811028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811028e:	781b      	ldrb	r3, [r3, #0]
 8110290:	f003 030f 	and.w	r3, r3, #15
 8110294:	b2db      	uxtb	r3, r3
 8110296:	009b      	lsls	r3, r3, #2
 8110298:	b2db      	uxtb	r3, r3
 811029a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 811029c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 811029e:	2b13      	cmp	r3, #19
 81102a0:	f240 80e8 	bls.w	8110474 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 81102a4:	687b      	ldr	r3, [r7, #4]
 81102a6:	895b      	ldrh	r3, [r3, #10]
 81102a8:	2b03      	cmp	r3, #3
 81102aa:	f240 80e5 	bls.w	8110478 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 81102ae:	687b      	ldr	r3, [r7, #4]
 81102b0:	685b      	ldr	r3, [r3, #4]
 81102b2:	781b      	ldrb	r3, [r3, #0]
 81102b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 81102b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 81102bc:	2b00      	cmp	r3, #0
 81102be:	f000 80d2 	beq.w	8110466 <icmp_input+0x1ea>
 81102c2:	2b08      	cmp	r3, #8
 81102c4:	f040 80d2 	bne.w	811046c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 81102c8:	4b77      	ldr	r3, [pc, #476]	; (81104a8 <icmp_input+0x22c>)
 81102ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 81102cc:	4b75      	ldr	r3, [pc, #468]	; (81104a4 <icmp_input+0x228>)
 81102ce:	695b      	ldr	r3, [r3, #20]
 81102d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 81102d4:	2be0      	cmp	r3, #224	; 0xe0
 81102d6:	f000 80d6 	beq.w	8110486 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 81102da:	4b72      	ldr	r3, [pc, #456]	; (81104a4 <icmp_input+0x228>)
 81102dc:	695b      	ldr	r3, [r3, #20]
 81102de:	4a71      	ldr	r2, [pc, #452]	; (81104a4 <icmp_input+0x228>)
 81102e0:	6812      	ldr	r2, [r2, #0]
 81102e2:	4611      	mov	r1, r2
 81102e4:	4618      	mov	r0, r3
 81102e6:	f000 fcdb 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 81102ea:	4603      	mov	r3, r0
 81102ec:	2b00      	cmp	r3, #0
 81102ee:	f040 80cc 	bne.w	811048a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 81102f2:	687b      	ldr	r3, [r7, #4]
 81102f4:	891b      	ldrh	r3, [r3, #8]
 81102f6:	2b07      	cmp	r3, #7
 81102f8:	f240 80c0 	bls.w	811047c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 81102fc:	6878      	ldr	r0, [r7, #4]
 81102fe:	f000 f9e0 	bl	81106c2 <inet_chksum_pbuf>
 8110302:	4603      	mov	r3, r0
 8110304:	2b00      	cmp	r3, #0
 8110306:	d003      	beq.n	8110310 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8110308:	6878      	ldr	r0, [r7, #4]
 811030a:	f002 fe9b 	bl	8113044 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 811030e:	e0c5      	b.n	811049c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8110310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8110312:	330e      	adds	r3, #14
 8110314:	4619      	mov	r1, r3
 8110316:	6878      	ldr	r0, [r7, #4]
 8110318:	f002 fdfe 	bl	8112f18 <pbuf_add_header>
 811031c:	4603      	mov	r3, r0
 811031e:	2b00      	cmp	r3, #0
 8110320:	d04b      	beq.n	81103ba <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8110322:	687b      	ldr	r3, [r7, #4]
 8110324:	891a      	ldrh	r2, [r3, #8]
 8110326:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8110328:	4413      	add	r3, r2
 811032a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 811032c:	687b      	ldr	r3, [r7, #4]
 811032e:	891b      	ldrh	r3, [r3, #8]
 8110330:	8b7a      	ldrh	r2, [r7, #26]
 8110332:	429a      	cmp	r2, r3
 8110334:	f0c0 80ab 	bcc.w	811048e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8110338:	8b7b      	ldrh	r3, [r7, #26]
 811033a:	f44f 7220 	mov.w	r2, #640	; 0x280
 811033e:	4619      	mov	r1, r3
 8110340:	200e      	movs	r0, #14
 8110342:	f002 fb9d 	bl	8112a80 <pbuf_alloc>
 8110346:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8110348:	697b      	ldr	r3, [r7, #20]
 811034a:	2b00      	cmp	r3, #0
 811034c:	f000 80a1 	beq.w	8110492 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8110350:	697b      	ldr	r3, [r7, #20]
 8110352:	895b      	ldrh	r3, [r3, #10]
 8110354:	461a      	mov	r2, r3
 8110356:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8110358:	3308      	adds	r3, #8
 811035a:	429a      	cmp	r2, r3
 811035c:	d203      	bcs.n	8110366 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 811035e:	6978      	ldr	r0, [r7, #20]
 8110360:	f002 fe70 	bl	8113044 <pbuf_free>
          goto icmperr;
 8110364:	e096      	b.n	8110494 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8110366:	697b      	ldr	r3, [r7, #20]
 8110368:	685b      	ldr	r3, [r3, #4]
 811036a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 811036c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 811036e:	4618      	mov	r0, r3
 8110370:	f006 fd4f 	bl	8116e12 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8110374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8110376:	4619      	mov	r1, r3
 8110378:	6978      	ldr	r0, [r7, #20]
 811037a:	f002 fddd 	bl	8112f38 <pbuf_remove_header>
 811037e:	4603      	mov	r3, r0
 8110380:	2b00      	cmp	r3, #0
 8110382:	d009      	beq.n	8110398 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8110384:	4b49      	ldr	r3, [pc, #292]	; (81104ac <icmp_input+0x230>)
 8110386:	22b6      	movs	r2, #182	; 0xb6
 8110388:	4949      	ldr	r1, [pc, #292]	; (81104b0 <icmp_input+0x234>)
 811038a:	484a      	ldr	r0, [pc, #296]	; (81104b4 <icmp_input+0x238>)
 811038c:	f007 fa1c 	bl	81177c8 <iprintf>
          pbuf_free(r);
 8110390:	6978      	ldr	r0, [r7, #20]
 8110392:	f002 fe57 	bl	8113044 <pbuf_free>
          goto icmperr;
 8110396:	e07d      	b.n	8110494 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8110398:	6879      	ldr	r1, [r7, #4]
 811039a:	6978      	ldr	r0, [r7, #20]
 811039c:	f002 ff86 	bl	81132ac <pbuf_copy>
 81103a0:	4603      	mov	r3, r0
 81103a2:	2b00      	cmp	r3, #0
 81103a4:	d003      	beq.n	81103ae <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 81103a6:	6978      	ldr	r0, [r7, #20]
 81103a8:	f002 fe4c 	bl	8113044 <pbuf_free>
          goto icmperr;
 81103ac:	e072      	b.n	8110494 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 81103ae:	6878      	ldr	r0, [r7, #4]
 81103b0:	f002 fe48 	bl	8113044 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 81103b4:	697b      	ldr	r3, [r7, #20]
 81103b6:	607b      	str	r3, [r7, #4]
 81103b8:	e00f      	b.n	81103da <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 81103ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81103bc:	330e      	adds	r3, #14
 81103be:	4619      	mov	r1, r3
 81103c0:	6878      	ldr	r0, [r7, #4]
 81103c2:	f002 fdb9 	bl	8112f38 <pbuf_remove_header>
 81103c6:	4603      	mov	r3, r0
 81103c8:	2b00      	cmp	r3, #0
 81103ca:	d006      	beq.n	81103da <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 81103cc:	4b37      	ldr	r3, [pc, #220]	; (81104ac <icmp_input+0x230>)
 81103ce:	22c7      	movs	r2, #199	; 0xc7
 81103d0:	4939      	ldr	r1, [pc, #228]	; (81104b8 <icmp_input+0x23c>)
 81103d2:	4838      	ldr	r0, [pc, #224]	; (81104b4 <icmp_input+0x238>)
 81103d4:	f007 f9f8 	bl	81177c8 <iprintf>
          goto icmperr;
 81103d8:	e05c      	b.n	8110494 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 81103da:	687b      	ldr	r3, [r7, #4]
 81103dc:	685b      	ldr	r3, [r3, #4]
 81103de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 81103e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81103e2:	4619      	mov	r1, r3
 81103e4:	6878      	ldr	r0, [r7, #4]
 81103e6:	f002 fd97 	bl	8112f18 <pbuf_add_header>
 81103ea:	4603      	mov	r3, r0
 81103ec:	2b00      	cmp	r3, #0
 81103ee:	d13c      	bne.n	811046a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 81103f0:	687b      	ldr	r3, [r7, #4]
 81103f2:	685b      	ldr	r3, [r3, #4]
 81103f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 81103f6:	69fb      	ldr	r3, [r7, #28]
 81103f8:	681a      	ldr	r2, [r3, #0]
 81103fa:	68fb      	ldr	r3, [r7, #12]
 81103fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 81103fe:	4b29      	ldr	r3, [pc, #164]	; (81104a4 <icmp_input+0x228>)
 8110400:	691a      	ldr	r2, [r3, #16]
 8110402:	68fb      	ldr	r3, [r7, #12]
 8110404:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8110406:	693b      	ldr	r3, [r7, #16]
 8110408:	2200      	movs	r2, #0
 811040a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 811040c:	693b      	ldr	r3, [r7, #16]
 811040e:	885b      	ldrh	r3, [r3, #2]
 8110410:	b29b      	uxth	r3, r3
 8110412:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8110416:	4293      	cmp	r3, r2
 8110418:	d907      	bls.n	811042a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 811041a:	693b      	ldr	r3, [r7, #16]
 811041c:	885b      	ldrh	r3, [r3, #2]
 811041e:	b29b      	uxth	r3, r3
 8110420:	3309      	adds	r3, #9
 8110422:	b29a      	uxth	r2, r3
 8110424:	693b      	ldr	r3, [r7, #16]
 8110426:	805a      	strh	r2, [r3, #2]
 8110428:	e006      	b.n	8110438 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 811042a:	693b      	ldr	r3, [r7, #16]
 811042c:	885b      	ldrh	r3, [r3, #2]
 811042e:	b29b      	uxth	r3, r3
 8110430:	3308      	adds	r3, #8
 8110432:	b29a      	uxth	r2, r3
 8110434:	693b      	ldr	r3, [r7, #16]
 8110436:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8110438:	68fb      	ldr	r3, [r7, #12]
 811043a:	22ff      	movs	r2, #255	; 0xff
 811043c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 811043e:	68fb      	ldr	r3, [r7, #12]
 8110440:	2200      	movs	r2, #0
 8110442:	729a      	strb	r2, [r3, #10]
 8110444:	2200      	movs	r2, #0
 8110446:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8110448:	683b      	ldr	r3, [r7, #0]
 811044a:	9302      	str	r3, [sp, #8]
 811044c:	2301      	movs	r3, #1
 811044e:	9301      	str	r3, [sp, #4]
 8110450:	2300      	movs	r3, #0
 8110452:	9300      	str	r3, [sp, #0]
 8110454:	23ff      	movs	r3, #255	; 0xff
 8110456:	2200      	movs	r2, #0
 8110458:	69f9      	ldr	r1, [r7, #28]
 811045a:	6878      	ldr	r0, [r7, #4]
 811045c:	f000 fb48 	bl	8110af0 <ip4_output_if>
 8110460:	4603      	mov	r3, r0
 8110462:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8110464:	e001      	b.n	811046a <icmp_input+0x1ee>
      break;
 8110466:	bf00      	nop
 8110468:	e000      	b.n	811046c <icmp_input+0x1f0>
      break;
 811046a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 811046c:	6878      	ldr	r0, [r7, #4]
 811046e:	f002 fde9 	bl	8113044 <pbuf_free>
  return;
 8110472:	e013      	b.n	811049c <icmp_input+0x220>
    goto lenerr;
 8110474:	bf00      	nop
 8110476:	e002      	b.n	811047e <icmp_input+0x202>
    goto lenerr;
 8110478:	bf00      	nop
 811047a:	e000      	b.n	811047e <icmp_input+0x202>
        goto lenerr;
 811047c:	bf00      	nop
lenerr:
  pbuf_free(p);
 811047e:	6878      	ldr	r0, [r7, #4]
 8110480:	f002 fde0 	bl	8113044 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8110484:	e00a      	b.n	811049c <icmp_input+0x220>
        goto icmperr;
 8110486:	bf00      	nop
 8110488:	e004      	b.n	8110494 <icmp_input+0x218>
        goto icmperr;
 811048a:	bf00      	nop
 811048c:	e002      	b.n	8110494 <icmp_input+0x218>
          goto icmperr;
 811048e:	bf00      	nop
 8110490:	e000      	b.n	8110494 <icmp_input+0x218>
          goto icmperr;
 8110492:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8110494:	6878      	ldr	r0, [r7, #4]
 8110496:	f002 fdd5 	bl	8113044 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 811049a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 811049c:	3728      	adds	r7, #40	; 0x28
 811049e:	46bd      	mov	sp, r7
 81104a0:	bd80      	pop	{r7, pc}
 81104a2:	bf00      	nop
 81104a4:	10005c44 	.word	0x10005c44
 81104a8:	10005c58 	.word	0x10005c58
 81104ac:	08119db4 	.word	0x08119db4
 81104b0:	08119e24 	.word	0x08119e24
 81104b4:	08119e5c 	.word	0x08119e5c
 81104b8:	08119e84 	.word	0x08119e84

081104bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 81104bc:	b580      	push	{r7, lr}
 81104be:	b082      	sub	sp, #8
 81104c0:	af00      	add	r7, sp, #0
 81104c2:	6078      	str	r0, [r7, #4]
 81104c4:	460b      	mov	r3, r1
 81104c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 81104c8:	78fb      	ldrb	r3, [r7, #3]
 81104ca:	461a      	mov	r2, r3
 81104cc:	2103      	movs	r1, #3
 81104ce:	6878      	ldr	r0, [r7, #4]
 81104d0:	f000 f814 	bl	81104fc <icmp_send_response>
}
 81104d4:	bf00      	nop
 81104d6:	3708      	adds	r7, #8
 81104d8:	46bd      	mov	sp, r7
 81104da:	bd80      	pop	{r7, pc}

081104dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 81104dc:	b580      	push	{r7, lr}
 81104de:	b082      	sub	sp, #8
 81104e0:	af00      	add	r7, sp, #0
 81104e2:	6078      	str	r0, [r7, #4]
 81104e4:	460b      	mov	r3, r1
 81104e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 81104e8:	78fb      	ldrb	r3, [r7, #3]
 81104ea:	461a      	mov	r2, r3
 81104ec:	210b      	movs	r1, #11
 81104ee:	6878      	ldr	r0, [r7, #4]
 81104f0:	f000 f804 	bl	81104fc <icmp_send_response>
}
 81104f4:	bf00      	nop
 81104f6:	3708      	adds	r7, #8
 81104f8:	46bd      	mov	sp, r7
 81104fa:	bd80      	pop	{r7, pc}

081104fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 81104fc:	b580      	push	{r7, lr}
 81104fe:	b08c      	sub	sp, #48	; 0x30
 8110500:	af04      	add	r7, sp, #16
 8110502:	6078      	str	r0, [r7, #4]
 8110504:	460b      	mov	r3, r1
 8110506:	70fb      	strb	r3, [r7, #3]
 8110508:	4613      	mov	r3, r2
 811050a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 811050c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8110510:	2124      	movs	r1, #36	; 0x24
 8110512:	2022      	movs	r0, #34	; 0x22
 8110514:	f002 fab4 	bl	8112a80 <pbuf_alloc>
 8110518:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 811051a:	69fb      	ldr	r3, [r7, #28]
 811051c:	2b00      	cmp	r3, #0
 811051e:	d056      	beq.n	81105ce <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8110520:	69fb      	ldr	r3, [r7, #28]
 8110522:	895b      	ldrh	r3, [r3, #10]
 8110524:	2b23      	cmp	r3, #35	; 0x23
 8110526:	d806      	bhi.n	8110536 <icmp_send_response+0x3a>
 8110528:	4b2b      	ldr	r3, [pc, #172]	; (81105d8 <icmp_send_response+0xdc>)
 811052a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 811052e:	492b      	ldr	r1, [pc, #172]	; (81105dc <icmp_send_response+0xe0>)
 8110530:	482b      	ldr	r0, [pc, #172]	; (81105e0 <icmp_send_response+0xe4>)
 8110532:	f007 f949 	bl	81177c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8110536:	687b      	ldr	r3, [r7, #4]
 8110538:	685b      	ldr	r3, [r3, #4]
 811053a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 811053c:	69fb      	ldr	r3, [r7, #28]
 811053e:	685b      	ldr	r3, [r3, #4]
 8110540:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8110542:	697b      	ldr	r3, [r7, #20]
 8110544:	78fa      	ldrb	r2, [r7, #3]
 8110546:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8110548:	697b      	ldr	r3, [r7, #20]
 811054a:	78ba      	ldrb	r2, [r7, #2]
 811054c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 811054e:	697b      	ldr	r3, [r7, #20]
 8110550:	2200      	movs	r2, #0
 8110552:	711a      	strb	r2, [r3, #4]
 8110554:	2200      	movs	r2, #0
 8110556:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8110558:	697b      	ldr	r3, [r7, #20]
 811055a:	2200      	movs	r2, #0
 811055c:	719a      	strb	r2, [r3, #6]
 811055e:	2200      	movs	r2, #0
 8110560:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8110562:	69fb      	ldr	r3, [r7, #28]
 8110564:	685b      	ldr	r3, [r3, #4]
 8110566:	f103 0008 	add.w	r0, r3, #8
 811056a:	687b      	ldr	r3, [r7, #4]
 811056c:	685b      	ldr	r3, [r3, #4]
 811056e:	221c      	movs	r2, #28
 8110570:	4619      	mov	r1, r3
 8110572:	f006 fc4e 	bl	8116e12 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8110576:	69bb      	ldr	r3, [r7, #24]
 8110578:	68db      	ldr	r3, [r3, #12]
 811057a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 811057c:	f107 030c 	add.w	r3, r7, #12
 8110580:	4618      	mov	r0, r3
 8110582:	f000 f901 	bl	8110788 <ip4_route>
 8110586:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8110588:	693b      	ldr	r3, [r7, #16]
 811058a:	2b00      	cmp	r3, #0
 811058c:	d01b      	beq.n	81105c6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 811058e:	697b      	ldr	r3, [r7, #20]
 8110590:	2200      	movs	r2, #0
 8110592:	709a      	strb	r2, [r3, #2]
 8110594:	2200      	movs	r2, #0
 8110596:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8110598:	69fb      	ldr	r3, [r7, #28]
 811059a:	895b      	ldrh	r3, [r3, #10]
 811059c:	4619      	mov	r1, r3
 811059e:	6978      	ldr	r0, [r7, #20]
 81105a0:	f000 f87d 	bl	811069e <inet_chksum>
 81105a4:	4603      	mov	r3, r0
 81105a6:	461a      	mov	r2, r3
 81105a8:	697b      	ldr	r3, [r7, #20]
 81105aa:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 81105ac:	f107 020c 	add.w	r2, r7, #12
 81105b0:	693b      	ldr	r3, [r7, #16]
 81105b2:	9302      	str	r3, [sp, #8]
 81105b4:	2301      	movs	r3, #1
 81105b6:	9301      	str	r3, [sp, #4]
 81105b8:	2300      	movs	r3, #0
 81105ba:	9300      	str	r3, [sp, #0]
 81105bc:	23ff      	movs	r3, #255	; 0xff
 81105be:	2100      	movs	r1, #0
 81105c0:	69f8      	ldr	r0, [r7, #28]
 81105c2:	f000 fa95 	bl	8110af0 <ip4_output_if>
  }
  pbuf_free(q);
 81105c6:	69f8      	ldr	r0, [r7, #28]
 81105c8:	f002 fd3c 	bl	8113044 <pbuf_free>
 81105cc:	e000      	b.n	81105d0 <icmp_send_response+0xd4>
    return;
 81105ce:	bf00      	nop
}
 81105d0:	3720      	adds	r7, #32
 81105d2:	46bd      	mov	sp, r7
 81105d4:	bd80      	pop	{r7, pc}
 81105d6:	bf00      	nop
 81105d8:	08119db4 	.word	0x08119db4
 81105dc:	08119eb8 	.word	0x08119eb8
 81105e0:	08119e5c 	.word	0x08119e5c

081105e4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 81105e4:	b480      	push	{r7}
 81105e6:	b089      	sub	sp, #36	; 0x24
 81105e8:	af00      	add	r7, sp, #0
 81105ea:	6078      	str	r0, [r7, #4]
 81105ec:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 81105ee:	687b      	ldr	r3, [r7, #4]
 81105f0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 81105f2:	2300      	movs	r3, #0
 81105f4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 81105f6:	2300      	movs	r3, #0
 81105f8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 81105fa:	69fb      	ldr	r3, [r7, #28]
 81105fc:	f003 0301 	and.w	r3, r3, #1
 8110600:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8110602:	693b      	ldr	r3, [r7, #16]
 8110604:	2b00      	cmp	r3, #0
 8110606:	d00d      	beq.n	8110624 <lwip_standard_chksum+0x40>
 8110608:	683b      	ldr	r3, [r7, #0]
 811060a:	2b00      	cmp	r3, #0
 811060c:	dd0a      	ble.n	8110624 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 811060e:	69fa      	ldr	r2, [r7, #28]
 8110610:	1c53      	adds	r3, r2, #1
 8110612:	61fb      	str	r3, [r7, #28]
 8110614:	f107 030e 	add.w	r3, r7, #14
 8110618:	3301      	adds	r3, #1
 811061a:	7812      	ldrb	r2, [r2, #0]
 811061c:	701a      	strb	r2, [r3, #0]
    len--;
 811061e:	683b      	ldr	r3, [r7, #0]
 8110620:	3b01      	subs	r3, #1
 8110622:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8110624:	69fb      	ldr	r3, [r7, #28]
 8110626:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8110628:	e00a      	b.n	8110640 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 811062a:	69bb      	ldr	r3, [r7, #24]
 811062c:	1c9a      	adds	r2, r3, #2
 811062e:	61ba      	str	r2, [r7, #24]
 8110630:	881b      	ldrh	r3, [r3, #0]
 8110632:	461a      	mov	r2, r3
 8110634:	697b      	ldr	r3, [r7, #20]
 8110636:	4413      	add	r3, r2
 8110638:	617b      	str	r3, [r7, #20]
    len -= 2;
 811063a:	683b      	ldr	r3, [r7, #0]
 811063c:	3b02      	subs	r3, #2
 811063e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8110640:	683b      	ldr	r3, [r7, #0]
 8110642:	2b01      	cmp	r3, #1
 8110644:	dcf1      	bgt.n	811062a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8110646:	683b      	ldr	r3, [r7, #0]
 8110648:	2b00      	cmp	r3, #0
 811064a:	dd04      	ble.n	8110656 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 811064c:	f107 030e 	add.w	r3, r7, #14
 8110650:	69ba      	ldr	r2, [r7, #24]
 8110652:	7812      	ldrb	r2, [r2, #0]
 8110654:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8110656:	89fb      	ldrh	r3, [r7, #14]
 8110658:	461a      	mov	r2, r3
 811065a:	697b      	ldr	r3, [r7, #20]
 811065c:	4413      	add	r3, r2
 811065e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8110660:	697b      	ldr	r3, [r7, #20]
 8110662:	0c1a      	lsrs	r2, r3, #16
 8110664:	697b      	ldr	r3, [r7, #20]
 8110666:	b29b      	uxth	r3, r3
 8110668:	4413      	add	r3, r2
 811066a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 811066c:	697b      	ldr	r3, [r7, #20]
 811066e:	0c1a      	lsrs	r2, r3, #16
 8110670:	697b      	ldr	r3, [r7, #20]
 8110672:	b29b      	uxth	r3, r3
 8110674:	4413      	add	r3, r2
 8110676:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8110678:	693b      	ldr	r3, [r7, #16]
 811067a:	2b00      	cmp	r3, #0
 811067c:	d007      	beq.n	811068e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 811067e:	697b      	ldr	r3, [r7, #20]
 8110680:	021b      	lsls	r3, r3, #8
 8110682:	b29a      	uxth	r2, r3
 8110684:	697b      	ldr	r3, [r7, #20]
 8110686:	0a1b      	lsrs	r3, r3, #8
 8110688:	b2db      	uxtb	r3, r3
 811068a:	4313      	orrs	r3, r2
 811068c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 811068e:	697b      	ldr	r3, [r7, #20]
 8110690:	b29b      	uxth	r3, r3
}
 8110692:	4618      	mov	r0, r3
 8110694:	3724      	adds	r7, #36	; 0x24
 8110696:	46bd      	mov	sp, r7
 8110698:	f85d 7b04 	ldr.w	r7, [sp], #4
 811069c:	4770      	bx	lr

0811069e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 811069e:	b580      	push	{r7, lr}
 81106a0:	b082      	sub	sp, #8
 81106a2:	af00      	add	r7, sp, #0
 81106a4:	6078      	str	r0, [r7, #4]
 81106a6:	460b      	mov	r3, r1
 81106a8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 81106aa:	887b      	ldrh	r3, [r7, #2]
 81106ac:	4619      	mov	r1, r3
 81106ae:	6878      	ldr	r0, [r7, #4]
 81106b0:	f7ff ff98 	bl	81105e4 <lwip_standard_chksum>
 81106b4:	4603      	mov	r3, r0
 81106b6:	43db      	mvns	r3, r3
 81106b8:	b29b      	uxth	r3, r3
}
 81106ba:	4618      	mov	r0, r3
 81106bc:	3708      	adds	r7, #8
 81106be:	46bd      	mov	sp, r7
 81106c0:	bd80      	pop	{r7, pc}

081106c2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 81106c2:	b580      	push	{r7, lr}
 81106c4:	b086      	sub	sp, #24
 81106c6:	af00      	add	r7, sp, #0
 81106c8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 81106ca:	2300      	movs	r3, #0
 81106cc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 81106ce:	2300      	movs	r3, #0
 81106d0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 81106d2:	687b      	ldr	r3, [r7, #4]
 81106d4:	613b      	str	r3, [r7, #16]
 81106d6:	e02b      	b.n	8110730 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 81106d8:	693b      	ldr	r3, [r7, #16]
 81106da:	685a      	ldr	r2, [r3, #4]
 81106dc:	693b      	ldr	r3, [r7, #16]
 81106de:	895b      	ldrh	r3, [r3, #10]
 81106e0:	4619      	mov	r1, r3
 81106e2:	4610      	mov	r0, r2
 81106e4:	f7ff ff7e 	bl	81105e4 <lwip_standard_chksum>
 81106e8:	4603      	mov	r3, r0
 81106ea:	461a      	mov	r2, r3
 81106ec:	697b      	ldr	r3, [r7, #20]
 81106ee:	4413      	add	r3, r2
 81106f0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 81106f2:	697b      	ldr	r3, [r7, #20]
 81106f4:	0c1a      	lsrs	r2, r3, #16
 81106f6:	697b      	ldr	r3, [r7, #20]
 81106f8:	b29b      	uxth	r3, r3
 81106fa:	4413      	add	r3, r2
 81106fc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 81106fe:	693b      	ldr	r3, [r7, #16]
 8110700:	895b      	ldrh	r3, [r3, #10]
 8110702:	f003 0301 	and.w	r3, r3, #1
 8110706:	b29b      	uxth	r3, r3
 8110708:	2b00      	cmp	r3, #0
 811070a:	d00e      	beq.n	811072a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 811070c:	68fb      	ldr	r3, [r7, #12]
 811070e:	2b00      	cmp	r3, #0
 8110710:	bf0c      	ite	eq
 8110712:	2301      	moveq	r3, #1
 8110714:	2300      	movne	r3, #0
 8110716:	b2db      	uxtb	r3, r3
 8110718:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 811071a:	697b      	ldr	r3, [r7, #20]
 811071c:	021b      	lsls	r3, r3, #8
 811071e:	b29a      	uxth	r2, r3
 8110720:	697b      	ldr	r3, [r7, #20]
 8110722:	0a1b      	lsrs	r3, r3, #8
 8110724:	b2db      	uxtb	r3, r3
 8110726:	4313      	orrs	r3, r2
 8110728:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 811072a:	693b      	ldr	r3, [r7, #16]
 811072c:	681b      	ldr	r3, [r3, #0]
 811072e:	613b      	str	r3, [r7, #16]
 8110730:	693b      	ldr	r3, [r7, #16]
 8110732:	2b00      	cmp	r3, #0
 8110734:	d1d0      	bne.n	81106d8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8110736:	68fb      	ldr	r3, [r7, #12]
 8110738:	2b00      	cmp	r3, #0
 811073a:	d007      	beq.n	811074c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 811073c:	697b      	ldr	r3, [r7, #20]
 811073e:	021b      	lsls	r3, r3, #8
 8110740:	b29a      	uxth	r2, r3
 8110742:	697b      	ldr	r3, [r7, #20]
 8110744:	0a1b      	lsrs	r3, r3, #8
 8110746:	b2db      	uxtb	r3, r3
 8110748:	4313      	orrs	r3, r2
 811074a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 811074c:	697b      	ldr	r3, [r7, #20]
 811074e:	b29b      	uxth	r3, r3
 8110750:	43db      	mvns	r3, r3
 8110752:	b29b      	uxth	r3, r3
}
 8110754:	4618      	mov	r0, r3
 8110756:	3718      	adds	r7, #24
 8110758:	46bd      	mov	sp, r7
 811075a:	bd80      	pop	{r7, pc}

0811075c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 811075c:	b580      	push	{r7, lr}
 811075e:	b082      	sub	sp, #8
 8110760:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8110762:	2300      	movs	r3, #0
 8110764:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8110766:	f002 ff99 	bl	811369c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 811076a:	f001 f9dd 	bl	8111b28 <mem_init>
  memp_init();
 811076e:	f001 fd41 	bl	81121f4 <memp_init>
  pbuf_init();
  netif_init();
 8110772:	f001 fe4d 	bl	8112410 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8110776:	f003 fa71 	bl	8113c5c <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 811077a:	f003 f9b5 	bl	8113ae8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 811077e:	bf00      	nop
 8110780:	3708      	adds	r7, #8
 8110782:	46bd      	mov	sp, r7
 8110784:	bd80      	pop	{r7, pc}
	...

08110788 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8110788:	b480      	push	{r7}
 811078a:	b085      	sub	sp, #20
 811078c:	af00      	add	r7, sp, #0
 811078e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8110790:	4b33      	ldr	r3, [pc, #204]	; (8110860 <ip4_route+0xd8>)
 8110792:	681b      	ldr	r3, [r3, #0]
 8110794:	60fb      	str	r3, [r7, #12]
 8110796:	e036      	b.n	8110806 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8110798:	68fb      	ldr	r3, [r7, #12]
 811079a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811079e:	f003 0301 	and.w	r3, r3, #1
 81107a2:	b2db      	uxtb	r3, r3
 81107a4:	2b00      	cmp	r3, #0
 81107a6:	d02b      	beq.n	8110800 <ip4_route+0x78>
 81107a8:	68fb      	ldr	r3, [r7, #12]
 81107aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81107ae:	089b      	lsrs	r3, r3, #2
 81107b0:	f003 0301 	and.w	r3, r3, #1
 81107b4:	b2db      	uxtb	r3, r3
 81107b6:	2b00      	cmp	r3, #0
 81107b8:	d022      	beq.n	8110800 <ip4_route+0x78>
 81107ba:	68fb      	ldr	r3, [r7, #12]
 81107bc:	3304      	adds	r3, #4
 81107be:	681b      	ldr	r3, [r3, #0]
 81107c0:	2b00      	cmp	r3, #0
 81107c2:	d01d      	beq.n	8110800 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 81107c4:	687b      	ldr	r3, [r7, #4]
 81107c6:	681a      	ldr	r2, [r3, #0]
 81107c8:	68fb      	ldr	r3, [r7, #12]
 81107ca:	3304      	adds	r3, #4
 81107cc:	681b      	ldr	r3, [r3, #0]
 81107ce:	405a      	eors	r2, r3
 81107d0:	68fb      	ldr	r3, [r7, #12]
 81107d2:	3308      	adds	r3, #8
 81107d4:	681b      	ldr	r3, [r3, #0]
 81107d6:	4013      	ands	r3, r2
 81107d8:	2b00      	cmp	r3, #0
 81107da:	d101      	bne.n	81107e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 81107dc:	68fb      	ldr	r3, [r7, #12]
 81107de:	e038      	b.n	8110852 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 81107e0:	68fb      	ldr	r3, [r7, #12]
 81107e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81107e6:	f003 0302 	and.w	r3, r3, #2
 81107ea:	2b00      	cmp	r3, #0
 81107ec:	d108      	bne.n	8110800 <ip4_route+0x78>
 81107ee:	687b      	ldr	r3, [r7, #4]
 81107f0:	681a      	ldr	r2, [r3, #0]
 81107f2:	68fb      	ldr	r3, [r7, #12]
 81107f4:	330c      	adds	r3, #12
 81107f6:	681b      	ldr	r3, [r3, #0]
 81107f8:	429a      	cmp	r2, r3
 81107fa:	d101      	bne.n	8110800 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 81107fc:	68fb      	ldr	r3, [r7, #12]
 81107fe:	e028      	b.n	8110852 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8110800:	68fb      	ldr	r3, [r7, #12]
 8110802:	681b      	ldr	r3, [r3, #0]
 8110804:	60fb      	str	r3, [r7, #12]
 8110806:	68fb      	ldr	r3, [r7, #12]
 8110808:	2b00      	cmp	r3, #0
 811080a:	d1c5      	bne.n	8110798 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 811080c:	4b15      	ldr	r3, [pc, #84]	; (8110864 <ip4_route+0xdc>)
 811080e:	681b      	ldr	r3, [r3, #0]
 8110810:	2b00      	cmp	r3, #0
 8110812:	d01a      	beq.n	811084a <ip4_route+0xc2>
 8110814:	4b13      	ldr	r3, [pc, #76]	; (8110864 <ip4_route+0xdc>)
 8110816:	681b      	ldr	r3, [r3, #0]
 8110818:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811081c:	f003 0301 	and.w	r3, r3, #1
 8110820:	2b00      	cmp	r3, #0
 8110822:	d012      	beq.n	811084a <ip4_route+0xc2>
 8110824:	4b0f      	ldr	r3, [pc, #60]	; (8110864 <ip4_route+0xdc>)
 8110826:	681b      	ldr	r3, [r3, #0]
 8110828:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811082c:	f003 0304 	and.w	r3, r3, #4
 8110830:	2b00      	cmp	r3, #0
 8110832:	d00a      	beq.n	811084a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8110834:	4b0b      	ldr	r3, [pc, #44]	; (8110864 <ip4_route+0xdc>)
 8110836:	681b      	ldr	r3, [r3, #0]
 8110838:	3304      	adds	r3, #4
 811083a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 811083c:	2b00      	cmp	r3, #0
 811083e:	d004      	beq.n	811084a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8110840:	687b      	ldr	r3, [r7, #4]
 8110842:	681b      	ldr	r3, [r3, #0]
 8110844:	b2db      	uxtb	r3, r3
 8110846:	2b7f      	cmp	r3, #127	; 0x7f
 8110848:	d101      	bne.n	811084e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 811084a:	2300      	movs	r3, #0
 811084c:	e001      	b.n	8110852 <ip4_route+0xca>
  }

  return netif_default;
 811084e:	4b05      	ldr	r3, [pc, #20]	; (8110864 <ip4_route+0xdc>)
 8110850:	681b      	ldr	r3, [r3, #0]
}
 8110852:	4618      	mov	r0, r3
 8110854:	3714      	adds	r7, #20
 8110856:	46bd      	mov	sp, r7
 8110858:	f85d 7b04 	ldr.w	r7, [sp], #4
 811085c:	4770      	bx	lr
 811085e:	bf00      	nop
 8110860:	100087cc 	.word	0x100087cc
 8110864:	100087d0 	.word	0x100087d0

08110868 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8110868:	b580      	push	{r7, lr}
 811086a:	b082      	sub	sp, #8
 811086c:	af00      	add	r7, sp, #0
 811086e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8110870:	687b      	ldr	r3, [r7, #4]
 8110872:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8110876:	f003 0301 	and.w	r3, r3, #1
 811087a:	b2db      	uxtb	r3, r3
 811087c:	2b00      	cmp	r3, #0
 811087e:	d016      	beq.n	81108ae <ip4_input_accept+0x46>
 8110880:	687b      	ldr	r3, [r7, #4]
 8110882:	3304      	adds	r3, #4
 8110884:	681b      	ldr	r3, [r3, #0]
 8110886:	2b00      	cmp	r3, #0
 8110888:	d011      	beq.n	81108ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811088a:	4b0b      	ldr	r3, [pc, #44]	; (81108b8 <ip4_input_accept+0x50>)
 811088c:	695a      	ldr	r2, [r3, #20]
 811088e:	687b      	ldr	r3, [r7, #4]
 8110890:	3304      	adds	r3, #4
 8110892:	681b      	ldr	r3, [r3, #0]
 8110894:	429a      	cmp	r2, r3
 8110896:	d008      	beq.n	81108aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8110898:	4b07      	ldr	r3, [pc, #28]	; (81108b8 <ip4_input_accept+0x50>)
 811089a:	695b      	ldr	r3, [r3, #20]
 811089c:	6879      	ldr	r1, [r7, #4]
 811089e:	4618      	mov	r0, r3
 81108a0:	f000 f9fe 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 81108a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 81108a6:	2b00      	cmp	r3, #0
 81108a8:	d001      	beq.n	81108ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 81108aa:	2301      	movs	r3, #1
 81108ac:	e000      	b.n	81108b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 81108ae:	2300      	movs	r3, #0
}
 81108b0:	4618      	mov	r0, r3
 81108b2:	3708      	adds	r7, #8
 81108b4:	46bd      	mov	sp, r7
 81108b6:	bd80      	pop	{r7, pc}
 81108b8:	10005c44 	.word	0x10005c44

081108bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 81108bc:	b580      	push	{r7, lr}
 81108be:	b086      	sub	sp, #24
 81108c0:	af00      	add	r7, sp, #0
 81108c2:	6078      	str	r0, [r7, #4]
 81108c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 81108c6:	687b      	ldr	r3, [r7, #4]
 81108c8:	685b      	ldr	r3, [r3, #4]
 81108ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 81108cc:	697b      	ldr	r3, [r7, #20]
 81108ce:	781b      	ldrb	r3, [r3, #0]
 81108d0:	091b      	lsrs	r3, r3, #4
 81108d2:	b2db      	uxtb	r3, r3
 81108d4:	2b04      	cmp	r3, #4
 81108d6:	d004      	beq.n	81108e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 81108d8:	6878      	ldr	r0, [r7, #4]
 81108da:	f002 fbb3 	bl	8113044 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 81108de:	2300      	movs	r3, #0
 81108e0:	e0fd      	b.n	8110ade <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 81108e2:	697b      	ldr	r3, [r7, #20]
 81108e4:	781b      	ldrb	r3, [r3, #0]
 81108e6:	f003 030f 	and.w	r3, r3, #15
 81108ea:	b2db      	uxtb	r3, r3
 81108ec:	009b      	lsls	r3, r3, #2
 81108ee:	b2db      	uxtb	r3, r3
 81108f0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 81108f2:	697b      	ldr	r3, [r7, #20]
 81108f4:	885b      	ldrh	r3, [r3, #2]
 81108f6:	b29b      	uxth	r3, r3
 81108f8:	4618      	mov	r0, r3
 81108fa:	f7fe fc87 	bl	810f20c <lwip_htons>
 81108fe:	4603      	mov	r3, r0
 8110900:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8110902:	687b      	ldr	r3, [r7, #4]
 8110904:	891b      	ldrh	r3, [r3, #8]
 8110906:	89ba      	ldrh	r2, [r7, #12]
 8110908:	429a      	cmp	r2, r3
 811090a:	d204      	bcs.n	8110916 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 811090c:	89bb      	ldrh	r3, [r7, #12]
 811090e:	4619      	mov	r1, r3
 8110910:	6878      	ldr	r0, [r7, #4]
 8110912:	f002 fa11 	bl	8112d38 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8110916:	687b      	ldr	r3, [r7, #4]
 8110918:	895b      	ldrh	r3, [r3, #10]
 811091a:	89fa      	ldrh	r2, [r7, #14]
 811091c:	429a      	cmp	r2, r3
 811091e:	d807      	bhi.n	8110930 <ip4_input+0x74>
 8110920:	687b      	ldr	r3, [r7, #4]
 8110922:	891b      	ldrh	r3, [r3, #8]
 8110924:	89ba      	ldrh	r2, [r7, #12]
 8110926:	429a      	cmp	r2, r3
 8110928:	d802      	bhi.n	8110930 <ip4_input+0x74>
 811092a:	89fb      	ldrh	r3, [r7, #14]
 811092c:	2b13      	cmp	r3, #19
 811092e:	d804      	bhi.n	811093a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8110930:	6878      	ldr	r0, [r7, #4]
 8110932:	f002 fb87 	bl	8113044 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8110936:	2300      	movs	r3, #0
 8110938:	e0d1      	b.n	8110ade <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 811093a:	697b      	ldr	r3, [r7, #20]
 811093c:	691b      	ldr	r3, [r3, #16]
 811093e:	4a6a      	ldr	r2, [pc, #424]	; (8110ae8 <ip4_input+0x22c>)
 8110940:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8110942:	697b      	ldr	r3, [r7, #20]
 8110944:	68db      	ldr	r3, [r3, #12]
 8110946:	4a68      	ldr	r2, [pc, #416]	; (8110ae8 <ip4_input+0x22c>)
 8110948:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811094a:	4b67      	ldr	r3, [pc, #412]	; (8110ae8 <ip4_input+0x22c>)
 811094c:	695b      	ldr	r3, [r3, #20]
 811094e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8110952:	2be0      	cmp	r3, #224	; 0xe0
 8110954:	d112      	bne.n	811097c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8110956:	683b      	ldr	r3, [r7, #0]
 8110958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811095c:	f003 0301 	and.w	r3, r3, #1
 8110960:	b2db      	uxtb	r3, r3
 8110962:	2b00      	cmp	r3, #0
 8110964:	d007      	beq.n	8110976 <ip4_input+0xba>
 8110966:	683b      	ldr	r3, [r7, #0]
 8110968:	3304      	adds	r3, #4
 811096a:	681b      	ldr	r3, [r3, #0]
 811096c:	2b00      	cmp	r3, #0
 811096e:	d002      	beq.n	8110976 <ip4_input+0xba>
      netif = inp;
 8110970:	683b      	ldr	r3, [r7, #0]
 8110972:	613b      	str	r3, [r7, #16]
 8110974:	e02a      	b.n	81109cc <ip4_input+0x110>
    } else {
      netif = NULL;
 8110976:	2300      	movs	r3, #0
 8110978:	613b      	str	r3, [r7, #16]
 811097a:	e027      	b.n	81109cc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 811097c:	6838      	ldr	r0, [r7, #0]
 811097e:	f7ff ff73 	bl	8110868 <ip4_input_accept>
 8110982:	4603      	mov	r3, r0
 8110984:	2b00      	cmp	r3, #0
 8110986:	d002      	beq.n	811098e <ip4_input+0xd2>
      netif = inp;
 8110988:	683b      	ldr	r3, [r7, #0]
 811098a:	613b      	str	r3, [r7, #16]
 811098c:	e01e      	b.n	81109cc <ip4_input+0x110>
    } else {
      netif = NULL;
 811098e:	2300      	movs	r3, #0
 8110990:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8110992:	4b55      	ldr	r3, [pc, #340]	; (8110ae8 <ip4_input+0x22c>)
 8110994:	695b      	ldr	r3, [r3, #20]
 8110996:	b2db      	uxtb	r3, r3
 8110998:	2b7f      	cmp	r3, #127	; 0x7f
 811099a:	d017      	beq.n	81109cc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 811099c:	4b53      	ldr	r3, [pc, #332]	; (8110aec <ip4_input+0x230>)
 811099e:	681b      	ldr	r3, [r3, #0]
 81109a0:	613b      	str	r3, [r7, #16]
 81109a2:	e00e      	b.n	81109c2 <ip4_input+0x106>
          if (netif == inp) {
 81109a4:	693a      	ldr	r2, [r7, #16]
 81109a6:	683b      	ldr	r3, [r7, #0]
 81109a8:	429a      	cmp	r2, r3
 81109aa:	d006      	beq.n	81109ba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 81109ac:	6938      	ldr	r0, [r7, #16]
 81109ae:	f7ff ff5b 	bl	8110868 <ip4_input_accept>
 81109b2:	4603      	mov	r3, r0
 81109b4:	2b00      	cmp	r3, #0
 81109b6:	d108      	bne.n	81109ca <ip4_input+0x10e>
 81109b8:	e000      	b.n	81109bc <ip4_input+0x100>
            continue;
 81109ba:	bf00      	nop
        NETIF_FOREACH(netif) {
 81109bc:	693b      	ldr	r3, [r7, #16]
 81109be:	681b      	ldr	r3, [r3, #0]
 81109c0:	613b      	str	r3, [r7, #16]
 81109c2:	693b      	ldr	r3, [r7, #16]
 81109c4:	2b00      	cmp	r3, #0
 81109c6:	d1ed      	bne.n	81109a4 <ip4_input+0xe8>
 81109c8:	e000      	b.n	81109cc <ip4_input+0x110>
            break;
 81109ca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 81109cc:	4b46      	ldr	r3, [pc, #280]	; (8110ae8 <ip4_input+0x22c>)
 81109ce:	691b      	ldr	r3, [r3, #16]
 81109d0:	6839      	ldr	r1, [r7, #0]
 81109d2:	4618      	mov	r0, r3
 81109d4:	f000 f964 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 81109d8:	4603      	mov	r3, r0
 81109da:	2b00      	cmp	r3, #0
 81109dc:	d105      	bne.n	81109ea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 81109de:	4b42      	ldr	r3, [pc, #264]	; (8110ae8 <ip4_input+0x22c>)
 81109e0:	691b      	ldr	r3, [r3, #16]
 81109e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 81109e6:	2be0      	cmp	r3, #224	; 0xe0
 81109e8:	d104      	bne.n	81109f4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 81109ea:	6878      	ldr	r0, [r7, #4]
 81109ec:	f002 fb2a 	bl	8113044 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 81109f0:	2300      	movs	r3, #0
 81109f2:	e074      	b.n	8110ade <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 81109f4:	693b      	ldr	r3, [r7, #16]
 81109f6:	2b00      	cmp	r3, #0
 81109f8:	d104      	bne.n	8110a04 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 81109fa:	6878      	ldr	r0, [r7, #4]
 81109fc:	f002 fb22 	bl	8113044 <pbuf_free>
    return ERR_OK;
 8110a00:	2300      	movs	r3, #0
 8110a02:	e06c      	b.n	8110ade <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8110a04:	697b      	ldr	r3, [r7, #20]
 8110a06:	88db      	ldrh	r3, [r3, #6]
 8110a08:	b29b      	uxth	r3, r3
 8110a0a:	461a      	mov	r2, r3
 8110a0c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8110a10:	4013      	ands	r3, r2
 8110a12:	2b00      	cmp	r3, #0
 8110a14:	d00b      	beq.n	8110a2e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8110a16:	6878      	ldr	r0, [r7, #4]
 8110a18:	f000 fc88 	bl	811132c <ip4_reass>
 8110a1c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8110a1e:	687b      	ldr	r3, [r7, #4]
 8110a20:	2b00      	cmp	r3, #0
 8110a22:	d101      	bne.n	8110a28 <ip4_input+0x16c>
      return ERR_OK;
 8110a24:	2300      	movs	r3, #0
 8110a26:	e05a      	b.n	8110ade <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8110a28:	687b      	ldr	r3, [r7, #4]
 8110a2a:	685b      	ldr	r3, [r3, #4]
 8110a2c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8110a2e:	4a2e      	ldr	r2, [pc, #184]	; (8110ae8 <ip4_input+0x22c>)
 8110a30:	693b      	ldr	r3, [r7, #16]
 8110a32:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8110a34:	4a2c      	ldr	r2, [pc, #176]	; (8110ae8 <ip4_input+0x22c>)
 8110a36:	683b      	ldr	r3, [r7, #0]
 8110a38:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8110a3a:	4a2b      	ldr	r2, [pc, #172]	; (8110ae8 <ip4_input+0x22c>)
 8110a3c:	697b      	ldr	r3, [r7, #20]
 8110a3e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8110a40:	697b      	ldr	r3, [r7, #20]
 8110a42:	781b      	ldrb	r3, [r3, #0]
 8110a44:	f003 030f 	and.w	r3, r3, #15
 8110a48:	b2db      	uxtb	r3, r3
 8110a4a:	009b      	lsls	r3, r3, #2
 8110a4c:	b2db      	uxtb	r3, r3
 8110a4e:	b29a      	uxth	r2, r3
 8110a50:	4b25      	ldr	r3, [pc, #148]	; (8110ae8 <ip4_input+0x22c>)
 8110a52:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8110a54:	89fb      	ldrh	r3, [r7, #14]
 8110a56:	4619      	mov	r1, r3
 8110a58:	6878      	ldr	r0, [r7, #4]
 8110a5a:	f002 fa6d 	bl	8112f38 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8110a5e:	697b      	ldr	r3, [r7, #20]
 8110a60:	7a5b      	ldrb	r3, [r3, #9]
 8110a62:	2b01      	cmp	r3, #1
 8110a64:	d006      	beq.n	8110a74 <ip4_input+0x1b8>
 8110a66:	2b11      	cmp	r3, #17
 8110a68:	d109      	bne.n	8110a7e <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8110a6a:	6839      	ldr	r1, [r7, #0]
 8110a6c:	6878      	ldr	r0, [r7, #4]
 8110a6e:	f003 f9a3 	bl	8113db8 <udp_input>
        break;
 8110a72:	e021      	b.n	8110ab8 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8110a74:	6839      	ldr	r1, [r7, #0]
 8110a76:	6878      	ldr	r0, [r7, #4]
 8110a78:	f7ff fc00 	bl	811027c <icmp_input>
        break;
 8110a7c:	e01c      	b.n	8110ab8 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8110a7e:	4b1a      	ldr	r3, [pc, #104]	; (8110ae8 <ip4_input+0x22c>)
 8110a80:	695b      	ldr	r3, [r3, #20]
 8110a82:	6939      	ldr	r1, [r7, #16]
 8110a84:	4618      	mov	r0, r3
 8110a86:	f000 f90b 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 8110a8a:	4603      	mov	r3, r0
 8110a8c:	2b00      	cmp	r3, #0
 8110a8e:	d10f      	bne.n	8110ab0 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8110a90:	4b15      	ldr	r3, [pc, #84]	; (8110ae8 <ip4_input+0x22c>)
 8110a92:	695b      	ldr	r3, [r3, #20]
 8110a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8110a98:	2be0      	cmp	r3, #224	; 0xe0
 8110a9a:	d009      	beq.n	8110ab0 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8110a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8110aa0:	4619      	mov	r1, r3
 8110aa2:	6878      	ldr	r0, [r7, #4]
 8110aa4:	f002 fabb 	bl	811301e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8110aa8:	2102      	movs	r1, #2
 8110aaa:	6878      	ldr	r0, [r7, #4]
 8110aac:	f7ff fd06 	bl	81104bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8110ab0:	6878      	ldr	r0, [r7, #4]
 8110ab2:	f002 fac7 	bl	8113044 <pbuf_free>
        break;
 8110ab6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8110ab8:	4b0b      	ldr	r3, [pc, #44]	; (8110ae8 <ip4_input+0x22c>)
 8110aba:	2200      	movs	r2, #0
 8110abc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8110abe:	4b0a      	ldr	r3, [pc, #40]	; (8110ae8 <ip4_input+0x22c>)
 8110ac0:	2200      	movs	r2, #0
 8110ac2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8110ac4:	4b08      	ldr	r3, [pc, #32]	; (8110ae8 <ip4_input+0x22c>)
 8110ac6:	2200      	movs	r2, #0
 8110ac8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8110aca:	4b07      	ldr	r3, [pc, #28]	; (8110ae8 <ip4_input+0x22c>)
 8110acc:	2200      	movs	r2, #0
 8110ace:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8110ad0:	4b05      	ldr	r3, [pc, #20]	; (8110ae8 <ip4_input+0x22c>)
 8110ad2:	2200      	movs	r2, #0
 8110ad4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8110ad6:	4b04      	ldr	r3, [pc, #16]	; (8110ae8 <ip4_input+0x22c>)
 8110ad8:	2200      	movs	r2, #0
 8110ada:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8110adc:	2300      	movs	r3, #0
}
 8110ade:	4618      	mov	r0, r3
 8110ae0:	3718      	adds	r7, #24
 8110ae2:	46bd      	mov	sp, r7
 8110ae4:	bd80      	pop	{r7, pc}
 8110ae6:	bf00      	nop
 8110ae8:	10005c44 	.word	0x10005c44
 8110aec:	100087cc 	.word	0x100087cc

08110af0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8110af0:	b580      	push	{r7, lr}
 8110af2:	b08a      	sub	sp, #40	; 0x28
 8110af4:	af04      	add	r7, sp, #16
 8110af6:	60f8      	str	r0, [r7, #12]
 8110af8:	60b9      	str	r1, [r7, #8]
 8110afa:	607a      	str	r2, [r7, #4]
 8110afc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8110afe:	68bb      	ldr	r3, [r7, #8]
 8110b00:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8110b02:	687b      	ldr	r3, [r7, #4]
 8110b04:	2b00      	cmp	r3, #0
 8110b06:	d009      	beq.n	8110b1c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8110b08:	68bb      	ldr	r3, [r7, #8]
 8110b0a:	2b00      	cmp	r3, #0
 8110b0c:	d003      	beq.n	8110b16 <ip4_output_if+0x26>
 8110b0e:	68bb      	ldr	r3, [r7, #8]
 8110b10:	681b      	ldr	r3, [r3, #0]
 8110b12:	2b00      	cmp	r3, #0
 8110b14:	d102      	bne.n	8110b1c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8110b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110b18:	3304      	adds	r3, #4
 8110b1a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8110b1c:	78fa      	ldrb	r2, [r7, #3]
 8110b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110b20:	9302      	str	r3, [sp, #8]
 8110b22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8110b26:	9301      	str	r3, [sp, #4]
 8110b28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8110b2c:	9300      	str	r3, [sp, #0]
 8110b2e:	4613      	mov	r3, r2
 8110b30:	687a      	ldr	r2, [r7, #4]
 8110b32:	6979      	ldr	r1, [r7, #20]
 8110b34:	68f8      	ldr	r0, [r7, #12]
 8110b36:	f000 f805 	bl	8110b44 <ip4_output_if_src>
 8110b3a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8110b3c:	4618      	mov	r0, r3
 8110b3e:	3718      	adds	r7, #24
 8110b40:	46bd      	mov	sp, r7
 8110b42:	bd80      	pop	{r7, pc}

08110b44 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8110b44:	b580      	push	{r7, lr}
 8110b46:	b088      	sub	sp, #32
 8110b48:	af00      	add	r7, sp, #0
 8110b4a:	60f8      	str	r0, [r7, #12]
 8110b4c:	60b9      	str	r1, [r7, #8]
 8110b4e:	607a      	str	r2, [r7, #4]
 8110b50:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8110b52:	68fb      	ldr	r3, [r7, #12]
 8110b54:	7b9b      	ldrb	r3, [r3, #14]
 8110b56:	2b01      	cmp	r3, #1
 8110b58:	d006      	beq.n	8110b68 <ip4_output_if_src+0x24>
 8110b5a:	4b4b      	ldr	r3, [pc, #300]	; (8110c88 <ip4_output_if_src+0x144>)
 8110b5c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8110b60:	494a      	ldr	r1, [pc, #296]	; (8110c8c <ip4_output_if_src+0x148>)
 8110b62:	484b      	ldr	r0, [pc, #300]	; (8110c90 <ip4_output_if_src+0x14c>)
 8110b64:	f006 fe30 	bl	81177c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8110b68:	687b      	ldr	r3, [r7, #4]
 8110b6a:	2b00      	cmp	r3, #0
 8110b6c:	d060      	beq.n	8110c30 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8110b6e:	2314      	movs	r3, #20
 8110b70:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8110b72:	2114      	movs	r1, #20
 8110b74:	68f8      	ldr	r0, [r7, #12]
 8110b76:	f002 f9cf 	bl	8112f18 <pbuf_add_header>
 8110b7a:	4603      	mov	r3, r0
 8110b7c:	2b00      	cmp	r3, #0
 8110b7e:	d002      	beq.n	8110b86 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8110b80:	f06f 0301 	mvn.w	r3, #1
 8110b84:	e07c      	b.n	8110c80 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8110b86:	68fb      	ldr	r3, [r7, #12]
 8110b88:	685b      	ldr	r3, [r3, #4]
 8110b8a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8110b8c:	68fb      	ldr	r3, [r7, #12]
 8110b8e:	895b      	ldrh	r3, [r3, #10]
 8110b90:	2b13      	cmp	r3, #19
 8110b92:	d806      	bhi.n	8110ba2 <ip4_output_if_src+0x5e>
 8110b94:	4b3c      	ldr	r3, [pc, #240]	; (8110c88 <ip4_output_if_src+0x144>)
 8110b96:	f44f 7262 	mov.w	r2, #904	; 0x388
 8110b9a:	493e      	ldr	r1, [pc, #248]	; (8110c94 <ip4_output_if_src+0x150>)
 8110b9c:	483c      	ldr	r0, [pc, #240]	; (8110c90 <ip4_output_if_src+0x14c>)
 8110b9e:	f006 fe13 	bl	81177c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8110ba2:	69fb      	ldr	r3, [r7, #28]
 8110ba4:	78fa      	ldrb	r2, [r7, #3]
 8110ba6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8110ba8:	69fb      	ldr	r3, [r7, #28]
 8110baa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8110bae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8110bb0:	687b      	ldr	r3, [r7, #4]
 8110bb2:	681a      	ldr	r2, [r3, #0]
 8110bb4:	69fb      	ldr	r3, [r7, #28]
 8110bb6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8110bb8:	8b7b      	ldrh	r3, [r7, #26]
 8110bba:	089b      	lsrs	r3, r3, #2
 8110bbc:	b29b      	uxth	r3, r3
 8110bbe:	b2db      	uxtb	r3, r3
 8110bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8110bc4:	b2da      	uxtb	r2, r3
 8110bc6:	69fb      	ldr	r3, [r7, #28]
 8110bc8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8110bca:	69fb      	ldr	r3, [r7, #28]
 8110bcc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8110bd0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8110bd2:	68fb      	ldr	r3, [r7, #12]
 8110bd4:	891b      	ldrh	r3, [r3, #8]
 8110bd6:	4618      	mov	r0, r3
 8110bd8:	f7fe fb18 	bl	810f20c <lwip_htons>
 8110bdc:	4603      	mov	r3, r0
 8110bde:	461a      	mov	r2, r3
 8110be0:	69fb      	ldr	r3, [r7, #28]
 8110be2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8110be4:	69fb      	ldr	r3, [r7, #28]
 8110be6:	2200      	movs	r2, #0
 8110be8:	719a      	strb	r2, [r3, #6]
 8110bea:	2200      	movs	r2, #0
 8110bec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8110bee:	4b2a      	ldr	r3, [pc, #168]	; (8110c98 <ip4_output_if_src+0x154>)
 8110bf0:	881b      	ldrh	r3, [r3, #0]
 8110bf2:	4618      	mov	r0, r3
 8110bf4:	f7fe fb0a 	bl	810f20c <lwip_htons>
 8110bf8:	4603      	mov	r3, r0
 8110bfa:	461a      	mov	r2, r3
 8110bfc:	69fb      	ldr	r3, [r7, #28]
 8110bfe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8110c00:	4b25      	ldr	r3, [pc, #148]	; (8110c98 <ip4_output_if_src+0x154>)
 8110c02:	881b      	ldrh	r3, [r3, #0]
 8110c04:	3301      	adds	r3, #1
 8110c06:	b29a      	uxth	r2, r3
 8110c08:	4b23      	ldr	r3, [pc, #140]	; (8110c98 <ip4_output_if_src+0x154>)
 8110c0a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8110c0c:	68bb      	ldr	r3, [r7, #8]
 8110c0e:	2b00      	cmp	r3, #0
 8110c10:	d104      	bne.n	8110c1c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8110c12:	4b22      	ldr	r3, [pc, #136]	; (8110c9c <ip4_output_if_src+0x158>)
 8110c14:	681a      	ldr	r2, [r3, #0]
 8110c16:	69fb      	ldr	r3, [r7, #28]
 8110c18:	60da      	str	r2, [r3, #12]
 8110c1a:	e003      	b.n	8110c24 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8110c1c:	68bb      	ldr	r3, [r7, #8]
 8110c1e:	681a      	ldr	r2, [r3, #0]
 8110c20:	69fb      	ldr	r3, [r7, #28]
 8110c22:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8110c24:	69fb      	ldr	r3, [r7, #28]
 8110c26:	2200      	movs	r2, #0
 8110c28:	729a      	strb	r2, [r3, #10]
 8110c2a:	2200      	movs	r2, #0
 8110c2c:	72da      	strb	r2, [r3, #11]
 8110c2e:	e00f      	b.n	8110c50 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8110c30:	68fb      	ldr	r3, [r7, #12]
 8110c32:	895b      	ldrh	r3, [r3, #10]
 8110c34:	2b13      	cmp	r3, #19
 8110c36:	d802      	bhi.n	8110c3e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8110c38:	f06f 0301 	mvn.w	r3, #1
 8110c3c:	e020      	b.n	8110c80 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8110c3e:	68fb      	ldr	r3, [r7, #12]
 8110c40:	685b      	ldr	r3, [r3, #4]
 8110c42:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8110c44:	69fb      	ldr	r3, [r7, #28]
 8110c46:	691b      	ldr	r3, [r3, #16]
 8110c48:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8110c4a:	f107 0314 	add.w	r3, r7, #20
 8110c4e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8110c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8110c52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8110c54:	2b00      	cmp	r3, #0
 8110c56:	d00c      	beq.n	8110c72 <ip4_output_if_src+0x12e>
 8110c58:	68fb      	ldr	r3, [r7, #12]
 8110c5a:	891a      	ldrh	r2, [r3, #8]
 8110c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8110c5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8110c60:	429a      	cmp	r2, r3
 8110c62:	d906      	bls.n	8110c72 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8110c64:	687a      	ldr	r2, [r7, #4]
 8110c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8110c68:	68f8      	ldr	r0, [r7, #12]
 8110c6a:	f000 fd4d 	bl	8111708 <ip4_frag>
 8110c6e:	4603      	mov	r3, r0
 8110c70:	e006      	b.n	8110c80 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8110c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8110c74:	695b      	ldr	r3, [r3, #20]
 8110c76:	687a      	ldr	r2, [r7, #4]
 8110c78:	68f9      	ldr	r1, [r7, #12]
 8110c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8110c7c:	4798      	blx	r3
 8110c7e:	4603      	mov	r3, r0
}
 8110c80:	4618      	mov	r0, r3
 8110c82:	3720      	adds	r7, #32
 8110c84:	46bd      	mov	sp, r7
 8110c86:	bd80      	pop	{r7, pc}
 8110c88:	08119ee4 	.word	0x08119ee4
 8110c8c:	08119f54 	.word	0x08119f54
 8110c90:	08119f60 	.word	0x08119f60
 8110c94:	08119f88 	.word	0x08119f88
 8110c98:	10005902 	.word	0x10005902
 8110c9c:	0811b6e4 	.word	0x0811b6e4

08110ca0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8110ca0:	b480      	push	{r7}
 8110ca2:	b085      	sub	sp, #20
 8110ca4:	af00      	add	r7, sp, #0
 8110ca6:	6078      	str	r0, [r7, #4]
 8110ca8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8110caa:	687b      	ldr	r3, [r7, #4]
 8110cac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8110cae:	687b      	ldr	r3, [r7, #4]
 8110cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110cb4:	d002      	beq.n	8110cbc <ip4_addr_isbroadcast_u32+0x1c>
 8110cb6:	687b      	ldr	r3, [r7, #4]
 8110cb8:	2b00      	cmp	r3, #0
 8110cba:	d101      	bne.n	8110cc0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8110cbc:	2301      	movs	r3, #1
 8110cbe:	e02a      	b.n	8110d16 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8110cc0:	683b      	ldr	r3, [r7, #0]
 8110cc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8110cc6:	f003 0302 	and.w	r3, r3, #2
 8110cca:	2b00      	cmp	r3, #0
 8110ccc:	d101      	bne.n	8110cd2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8110cce:	2300      	movs	r3, #0
 8110cd0:	e021      	b.n	8110d16 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8110cd2:	683b      	ldr	r3, [r7, #0]
 8110cd4:	3304      	adds	r3, #4
 8110cd6:	681b      	ldr	r3, [r3, #0]
 8110cd8:	687a      	ldr	r2, [r7, #4]
 8110cda:	429a      	cmp	r2, r3
 8110cdc:	d101      	bne.n	8110ce2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8110cde:	2300      	movs	r3, #0
 8110ce0:	e019      	b.n	8110d16 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8110ce2:	68fa      	ldr	r2, [r7, #12]
 8110ce4:	683b      	ldr	r3, [r7, #0]
 8110ce6:	3304      	adds	r3, #4
 8110ce8:	681b      	ldr	r3, [r3, #0]
 8110cea:	405a      	eors	r2, r3
 8110cec:	683b      	ldr	r3, [r7, #0]
 8110cee:	3308      	adds	r3, #8
 8110cf0:	681b      	ldr	r3, [r3, #0]
 8110cf2:	4013      	ands	r3, r2
 8110cf4:	2b00      	cmp	r3, #0
 8110cf6:	d10d      	bne.n	8110d14 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8110cf8:	683b      	ldr	r3, [r7, #0]
 8110cfa:	3308      	adds	r3, #8
 8110cfc:	681b      	ldr	r3, [r3, #0]
 8110cfe:	43da      	mvns	r2, r3
 8110d00:	687b      	ldr	r3, [r7, #4]
 8110d02:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8110d04:	683b      	ldr	r3, [r7, #0]
 8110d06:	3308      	adds	r3, #8
 8110d08:	681b      	ldr	r3, [r3, #0]
 8110d0a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8110d0c:	429a      	cmp	r2, r3
 8110d0e:	d101      	bne.n	8110d14 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8110d10:	2301      	movs	r3, #1
 8110d12:	e000      	b.n	8110d16 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8110d14:	2300      	movs	r3, #0
  }
}
 8110d16:	4618      	mov	r0, r3
 8110d18:	3714      	adds	r7, #20
 8110d1a:	46bd      	mov	sp, r7
 8110d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d20:	4770      	bx	lr
	...

08110d24 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8110d24:	b580      	push	{r7, lr}
 8110d26:	b084      	sub	sp, #16
 8110d28:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8110d2a:	2300      	movs	r3, #0
 8110d2c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8110d2e:	4b12      	ldr	r3, [pc, #72]	; (8110d78 <ip_reass_tmr+0x54>)
 8110d30:	681b      	ldr	r3, [r3, #0]
 8110d32:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8110d34:	e018      	b.n	8110d68 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8110d36:	68fb      	ldr	r3, [r7, #12]
 8110d38:	7fdb      	ldrb	r3, [r3, #31]
 8110d3a:	2b00      	cmp	r3, #0
 8110d3c:	d00b      	beq.n	8110d56 <ip_reass_tmr+0x32>
      r->timer--;
 8110d3e:	68fb      	ldr	r3, [r7, #12]
 8110d40:	7fdb      	ldrb	r3, [r3, #31]
 8110d42:	3b01      	subs	r3, #1
 8110d44:	b2da      	uxtb	r2, r3
 8110d46:	68fb      	ldr	r3, [r7, #12]
 8110d48:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8110d4a:	68fb      	ldr	r3, [r7, #12]
 8110d4c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8110d4e:	68fb      	ldr	r3, [r7, #12]
 8110d50:	681b      	ldr	r3, [r3, #0]
 8110d52:	60fb      	str	r3, [r7, #12]
 8110d54:	e008      	b.n	8110d68 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8110d56:	68fb      	ldr	r3, [r7, #12]
 8110d58:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8110d5a:	68fb      	ldr	r3, [r7, #12]
 8110d5c:	681b      	ldr	r3, [r3, #0]
 8110d5e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8110d60:	68b9      	ldr	r1, [r7, #8]
 8110d62:	6878      	ldr	r0, [r7, #4]
 8110d64:	f000 f80a 	bl	8110d7c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8110d68:	68fb      	ldr	r3, [r7, #12]
 8110d6a:	2b00      	cmp	r3, #0
 8110d6c:	d1e3      	bne.n	8110d36 <ip_reass_tmr+0x12>
    }
  }
}
 8110d6e:	bf00      	nop
 8110d70:	bf00      	nop
 8110d72:	3710      	adds	r7, #16
 8110d74:	46bd      	mov	sp, r7
 8110d76:	bd80      	pop	{r7, pc}
 8110d78:	10005904 	.word	0x10005904

08110d7c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8110d7c:	b580      	push	{r7, lr}
 8110d7e:	b088      	sub	sp, #32
 8110d80:	af00      	add	r7, sp, #0
 8110d82:	6078      	str	r0, [r7, #4]
 8110d84:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8110d86:	2300      	movs	r3, #0
 8110d88:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8110d8a:	683a      	ldr	r2, [r7, #0]
 8110d8c:	687b      	ldr	r3, [r7, #4]
 8110d8e:	429a      	cmp	r2, r3
 8110d90:	d105      	bne.n	8110d9e <ip_reass_free_complete_datagram+0x22>
 8110d92:	4b45      	ldr	r3, [pc, #276]	; (8110ea8 <ip_reass_free_complete_datagram+0x12c>)
 8110d94:	22ab      	movs	r2, #171	; 0xab
 8110d96:	4945      	ldr	r1, [pc, #276]	; (8110eac <ip_reass_free_complete_datagram+0x130>)
 8110d98:	4845      	ldr	r0, [pc, #276]	; (8110eb0 <ip_reass_free_complete_datagram+0x134>)
 8110d9a:	f006 fd15 	bl	81177c8 <iprintf>
  if (prev != NULL) {
 8110d9e:	683b      	ldr	r3, [r7, #0]
 8110da0:	2b00      	cmp	r3, #0
 8110da2:	d00a      	beq.n	8110dba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8110da4:	683b      	ldr	r3, [r7, #0]
 8110da6:	681b      	ldr	r3, [r3, #0]
 8110da8:	687a      	ldr	r2, [r7, #4]
 8110daa:	429a      	cmp	r2, r3
 8110dac:	d005      	beq.n	8110dba <ip_reass_free_complete_datagram+0x3e>
 8110dae:	4b3e      	ldr	r3, [pc, #248]	; (8110ea8 <ip_reass_free_complete_datagram+0x12c>)
 8110db0:	22ad      	movs	r2, #173	; 0xad
 8110db2:	4940      	ldr	r1, [pc, #256]	; (8110eb4 <ip_reass_free_complete_datagram+0x138>)
 8110db4:	483e      	ldr	r0, [pc, #248]	; (8110eb0 <ip_reass_free_complete_datagram+0x134>)
 8110db6:	f006 fd07 	bl	81177c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8110dba:	687b      	ldr	r3, [r7, #4]
 8110dbc:	685b      	ldr	r3, [r3, #4]
 8110dbe:	685b      	ldr	r3, [r3, #4]
 8110dc0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8110dc2:	697b      	ldr	r3, [r7, #20]
 8110dc4:	889b      	ldrh	r3, [r3, #4]
 8110dc6:	b29b      	uxth	r3, r3
 8110dc8:	2b00      	cmp	r3, #0
 8110dca:	d12a      	bne.n	8110e22 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8110dcc:	687b      	ldr	r3, [r7, #4]
 8110dce:	685b      	ldr	r3, [r3, #4]
 8110dd0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8110dd2:	697b      	ldr	r3, [r7, #20]
 8110dd4:	681a      	ldr	r2, [r3, #0]
 8110dd6:	687b      	ldr	r3, [r7, #4]
 8110dd8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8110dda:	69bb      	ldr	r3, [r7, #24]
 8110ddc:	6858      	ldr	r0, [r3, #4]
 8110dde:	687b      	ldr	r3, [r7, #4]
 8110de0:	3308      	adds	r3, #8
 8110de2:	2214      	movs	r2, #20
 8110de4:	4619      	mov	r1, r3
 8110de6:	f006 f814 	bl	8116e12 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8110dea:	2101      	movs	r1, #1
 8110dec:	69b8      	ldr	r0, [r7, #24]
 8110dee:	f7ff fb75 	bl	81104dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8110df2:	69b8      	ldr	r0, [r7, #24]
 8110df4:	f002 f9b4 	bl	8113160 <pbuf_clen>
 8110df8:	4603      	mov	r3, r0
 8110dfa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8110dfc:	8bfa      	ldrh	r2, [r7, #30]
 8110dfe:	8a7b      	ldrh	r3, [r7, #18]
 8110e00:	4413      	add	r3, r2
 8110e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8110e06:	db05      	blt.n	8110e14 <ip_reass_free_complete_datagram+0x98>
 8110e08:	4b27      	ldr	r3, [pc, #156]	; (8110ea8 <ip_reass_free_complete_datagram+0x12c>)
 8110e0a:	22bc      	movs	r2, #188	; 0xbc
 8110e0c:	492a      	ldr	r1, [pc, #168]	; (8110eb8 <ip_reass_free_complete_datagram+0x13c>)
 8110e0e:	4828      	ldr	r0, [pc, #160]	; (8110eb0 <ip_reass_free_complete_datagram+0x134>)
 8110e10:	f006 fcda 	bl	81177c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8110e14:	8bfa      	ldrh	r2, [r7, #30]
 8110e16:	8a7b      	ldrh	r3, [r7, #18]
 8110e18:	4413      	add	r3, r2
 8110e1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8110e1c:	69b8      	ldr	r0, [r7, #24]
 8110e1e:	f002 f911 	bl	8113044 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8110e22:	687b      	ldr	r3, [r7, #4]
 8110e24:	685b      	ldr	r3, [r3, #4]
 8110e26:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8110e28:	e01f      	b.n	8110e6a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8110e2a:	69bb      	ldr	r3, [r7, #24]
 8110e2c:	685b      	ldr	r3, [r3, #4]
 8110e2e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8110e30:	69bb      	ldr	r3, [r7, #24]
 8110e32:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8110e34:	697b      	ldr	r3, [r7, #20]
 8110e36:	681b      	ldr	r3, [r3, #0]
 8110e38:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8110e3a:	68f8      	ldr	r0, [r7, #12]
 8110e3c:	f002 f990 	bl	8113160 <pbuf_clen>
 8110e40:	4603      	mov	r3, r0
 8110e42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8110e44:	8bfa      	ldrh	r2, [r7, #30]
 8110e46:	8a7b      	ldrh	r3, [r7, #18]
 8110e48:	4413      	add	r3, r2
 8110e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8110e4e:	db05      	blt.n	8110e5c <ip_reass_free_complete_datagram+0xe0>
 8110e50:	4b15      	ldr	r3, [pc, #84]	; (8110ea8 <ip_reass_free_complete_datagram+0x12c>)
 8110e52:	22cc      	movs	r2, #204	; 0xcc
 8110e54:	4918      	ldr	r1, [pc, #96]	; (8110eb8 <ip_reass_free_complete_datagram+0x13c>)
 8110e56:	4816      	ldr	r0, [pc, #88]	; (8110eb0 <ip_reass_free_complete_datagram+0x134>)
 8110e58:	f006 fcb6 	bl	81177c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8110e5c:	8bfa      	ldrh	r2, [r7, #30]
 8110e5e:	8a7b      	ldrh	r3, [r7, #18]
 8110e60:	4413      	add	r3, r2
 8110e62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8110e64:	68f8      	ldr	r0, [r7, #12]
 8110e66:	f002 f8ed 	bl	8113044 <pbuf_free>
  while (p != NULL) {
 8110e6a:	69bb      	ldr	r3, [r7, #24]
 8110e6c:	2b00      	cmp	r3, #0
 8110e6e:	d1dc      	bne.n	8110e2a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8110e70:	6839      	ldr	r1, [r7, #0]
 8110e72:	6878      	ldr	r0, [r7, #4]
 8110e74:	f000 f8c2 	bl	8110ffc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8110e78:	4b10      	ldr	r3, [pc, #64]	; (8110ebc <ip_reass_free_complete_datagram+0x140>)
 8110e7a:	881b      	ldrh	r3, [r3, #0]
 8110e7c:	8bfa      	ldrh	r2, [r7, #30]
 8110e7e:	429a      	cmp	r2, r3
 8110e80:	d905      	bls.n	8110e8e <ip_reass_free_complete_datagram+0x112>
 8110e82:	4b09      	ldr	r3, [pc, #36]	; (8110ea8 <ip_reass_free_complete_datagram+0x12c>)
 8110e84:	22d2      	movs	r2, #210	; 0xd2
 8110e86:	490e      	ldr	r1, [pc, #56]	; (8110ec0 <ip_reass_free_complete_datagram+0x144>)
 8110e88:	4809      	ldr	r0, [pc, #36]	; (8110eb0 <ip_reass_free_complete_datagram+0x134>)
 8110e8a:	f006 fc9d 	bl	81177c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8110e8e:	4b0b      	ldr	r3, [pc, #44]	; (8110ebc <ip_reass_free_complete_datagram+0x140>)
 8110e90:	881a      	ldrh	r2, [r3, #0]
 8110e92:	8bfb      	ldrh	r3, [r7, #30]
 8110e94:	1ad3      	subs	r3, r2, r3
 8110e96:	b29a      	uxth	r2, r3
 8110e98:	4b08      	ldr	r3, [pc, #32]	; (8110ebc <ip_reass_free_complete_datagram+0x140>)
 8110e9a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8110e9c:	8bfb      	ldrh	r3, [r7, #30]
}
 8110e9e:	4618      	mov	r0, r3
 8110ea0:	3720      	adds	r7, #32
 8110ea2:	46bd      	mov	sp, r7
 8110ea4:	bd80      	pop	{r7, pc}
 8110ea6:	bf00      	nop
 8110ea8:	08119fb8 	.word	0x08119fb8
 8110eac:	0811a02c 	.word	0x0811a02c
 8110eb0:	0811a038 	.word	0x0811a038
 8110eb4:	0811a060 	.word	0x0811a060
 8110eb8:	0811a074 	.word	0x0811a074
 8110ebc:	10005908 	.word	0x10005908
 8110ec0:	0811a094 	.word	0x0811a094

08110ec4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8110ec4:	b580      	push	{r7, lr}
 8110ec6:	b08a      	sub	sp, #40	; 0x28
 8110ec8:	af00      	add	r7, sp, #0
 8110eca:	6078      	str	r0, [r7, #4]
 8110ecc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8110ece:	2300      	movs	r3, #0
 8110ed0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8110ed2:	2300      	movs	r3, #0
 8110ed4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8110ed6:	2300      	movs	r3, #0
 8110ed8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8110eda:	2300      	movs	r3, #0
 8110edc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8110ede:	2300      	movs	r3, #0
 8110ee0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8110ee2:	4b28      	ldr	r3, [pc, #160]	; (8110f84 <ip_reass_remove_oldest_datagram+0xc0>)
 8110ee4:	681b      	ldr	r3, [r3, #0]
 8110ee6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8110ee8:	e030      	b.n	8110f4c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8110eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110eec:	695a      	ldr	r2, [r3, #20]
 8110eee:	687b      	ldr	r3, [r7, #4]
 8110ef0:	68db      	ldr	r3, [r3, #12]
 8110ef2:	429a      	cmp	r2, r3
 8110ef4:	d10c      	bne.n	8110f10 <ip_reass_remove_oldest_datagram+0x4c>
 8110ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110ef8:	699a      	ldr	r2, [r3, #24]
 8110efa:	687b      	ldr	r3, [r7, #4]
 8110efc:	691b      	ldr	r3, [r3, #16]
 8110efe:	429a      	cmp	r2, r3
 8110f00:	d106      	bne.n	8110f10 <ip_reass_remove_oldest_datagram+0x4c>
 8110f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f04:	899a      	ldrh	r2, [r3, #12]
 8110f06:	687b      	ldr	r3, [r7, #4]
 8110f08:	889b      	ldrh	r3, [r3, #4]
 8110f0a:	b29b      	uxth	r3, r3
 8110f0c:	429a      	cmp	r2, r3
 8110f0e:	d014      	beq.n	8110f3a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8110f10:	693b      	ldr	r3, [r7, #16]
 8110f12:	3301      	adds	r3, #1
 8110f14:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8110f16:	6a3b      	ldr	r3, [r7, #32]
 8110f18:	2b00      	cmp	r3, #0
 8110f1a:	d104      	bne.n	8110f26 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8110f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f1e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8110f20:	69fb      	ldr	r3, [r7, #28]
 8110f22:	61bb      	str	r3, [r7, #24]
 8110f24:	e009      	b.n	8110f3a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8110f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f28:	7fda      	ldrb	r2, [r3, #31]
 8110f2a:	6a3b      	ldr	r3, [r7, #32]
 8110f2c:	7fdb      	ldrb	r3, [r3, #31]
 8110f2e:	429a      	cmp	r2, r3
 8110f30:	d803      	bhi.n	8110f3a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8110f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f34:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8110f36:	69fb      	ldr	r3, [r7, #28]
 8110f38:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8110f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f3c:	681b      	ldr	r3, [r3, #0]
 8110f3e:	2b00      	cmp	r3, #0
 8110f40:	d001      	beq.n	8110f46 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8110f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f44:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8110f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f48:	681b      	ldr	r3, [r3, #0]
 8110f4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8110f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110f4e:	2b00      	cmp	r3, #0
 8110f50:	d1cb      	bne.n	8110eea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8110f52:	6a3b      	ldr	r3, [r7, #32]
 8110f54:	2b00      	cmp	r3, #0
 8110f56:	d008      	beq.n	8110f6a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8110f58:	69b9      	ldr	r1, [r7, #24]
 8110f5a:	6a38      	ldr	r0, [r7, #32]
 8110f5c:	f7ff ff0e 	bl	8110d7c <ip_reass_free_complete_datagram>
 8110f60:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8110f62:	697a      	ldr	r2, [r7, #20]
 8110f64:	68fb      	ldr	r3, [r7, #12]
 8110f66:	4413      	add	r3, r2
 8110f68:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8110f6a:	697a      	ldr	r2, [r7, #20]
 8110f6c:	683b      	ldr	r3, [r7, #0]
 8110f6e:	429a      	cmp	r2, r3
 8110f70:	da02      	bge.n	8110f78 <ip_reass_remove_oldest_datagram+0xb4>
 8110f72:	693b      	ldr	r3, [r7, #16]
 8110f74:	2b01      	cmp	r3, #1
 8110f76:	dcac      	bgt.n	8110ed2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8110f78:	697b      	ldr	r3, [r7, #20]
}
 8110f7a:	4618      	mov	r0, r3
 8110f7c:	3728      	adds	r7, #40	; 0x28
 8110f7e:	46bd      	mov	sp, r7
 8110f80:	bd80      	pop	{r7, pc}
 8110f82:	bf00      	nop
 8110f84:	10005904 	.word	0x10005904

08110f88 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8110f88:	b580      	push	{r7, lr}
 8110f8a:	b084      	sub	sp, #16
 8110f8c:	af00      	add	r7, sp, #0
 8110f8e:	6078      	str	r0, [r7, #4]
 8110f90:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8110f92:	2001      	movs	r0, #1
 8110f94:	f001 f99c 	bl	81122d0 <memp_malloc>
 8110f98:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8110f9a:	68fb      	ldr	r3, [r7, #12]
 8110f9c:	2b00      	cmp	r3, #0
 8110f9e:	d110      	bne.n	8110fc2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8110fa0:	6839      	ldr	r1, [r7, #0]
 8110fa2:	6878      	ldr	r0, [r7, #4]
 8110fa4:	f7ff ff8e 	bl	8110ec4 <ip_reass_remove_oldest_datagram>
 8110fa8:	4602      	mov	r2, r0
 8110faa:	683b      	ldr	r3, [r7, #0]
 8110fac:	4293      	cmp	r3, r2
 8110fae:	dc03      	bgt.n	8110fb8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8110fb0:	2001      	movs	r0, #1
 8110fb2:	f001 f98d 	bl	81122d0 <memp_malloc>
 8110fb6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8110fb8:	68fb      	ldr	r3, [r7, #12]
 8110fba:	2b00      	cmp	r3, #0
 8110fbc:	d101      	bne.n	8110fc2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8110fbe:	2300      	movs	r3, #0
 8110fc0:	e016      	b.n	8110ff0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8110fc2:	2220      	movs	r2, #32
 8110fc4:	2100      	movs	r1, #0
 8110fc6:	68f8      	ldr	r0, [r7, #12]
 8110fc8:	f005 ff31 	bl	8116e2e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8110fcc:	68fb      	ldr	r3, [r7, #12]
 8110fce:	220f      	movs	r2, #15
 8110fd0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8110fd2:	4b09      	ldr	r3, [pc, #36]	; (8110ff8 <ip_reass_enqueue_new_datagram+0x70>)
 8110fd4:	681a      	ldr	r2, [r3, #0]
 8110fd6:	68fb      	ldr	r3, [r7, #12]
 8110fd8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8110fda:	4a07      	ldr	r2, [pc, #28]	; (8110ff8 <ip_reass_enqueue_new_datagram+0x70>)
 8110fdc:	68fb      	ldr	r3, [r7, #12]
 8110fde:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8110fe0:	68fb      	ldr	r3, [r7, #12]
 8110fe2:	3308      	adds	r3, #8
 8110fe4:	2214      	movs	r2, #20
 8110fe6:	6879      	ldr	r1, [r7, #4]
 8110fe8:	4618      	mov	r0, r3
 8110fea:	f005 ff12 	bl	8116e12 <memcpy>
  return ipr;
 8110fee:	68fb      	ldr	r3, [r7, #12]
}
 8110ff0:	4618      	mov	r0, r3
 8110ff2:	3710      	adds	r7, #16
 8110ff4:	46bd      	mov	sp, r7
 8110ff6:	bd80      	pop	{r7, pc}
 8110ff8:	10005904 	.word	0x10005904

08110ffc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8110ffc:	b580      	push	{r7, lr}
 8110ffe:	b082      	sub	sp, #8
 8111000:	af00      	add	r7, sp, #0
 8111002:	6078      	str	r0, [r7, #4]
 8111004:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8111006:	4b10      	ldr	r3, [pc, #64]	; (8111048 <ip_reass_dequeue_datagram+0x4c>)
 8111008:	681b      	ldr	r3, [r3, #0]
 811100a:	687a      	ldr	r2, [r7, #4]
 811100c:	429a      	cmp	r2, r3
 811100e:	d104      	bne.n	811101a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8111010:	687b      	ldr	r3, [r7, #4]
 8111012:	681b      	ldr	r3, [r3, #0]
 8111014:	4a0c      	ldr	r2, [pc, #48]	; (8111048 <ip_reass_dequeue_datagram+0x4c>)
 8111016:	6013      	str	r3, [r2, #0]
 8111018:	e00d      	b.n	8111036 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 811101a:	683b      	ldr	r3, [r7, #0]
 811101c:	2b00      	cmp	r3, #0
 811101e:	d106      	bne.n	811102e <ip_reass_dequeue_datagram+0x32>
 8111020:	4b0a      	ldr	r3, [pc, #40]	; (811104c <ip_reass_dequeue_datagram+0x50>)
 8111022:	f240 1245 	movw	r2, #325	; 0x145
 8111026:	490a      	ldr	r1, [pc, #40]	; (8111050 <ip_reass_dequeue_datagram+0x54>)
 8111028:	480a      	ldr	r0, [pc, #40]	; (8111054 <ip_reass_dequeue_datagram+0x58>)
 811102a:	f006 fbcd 	bl	81177c8 <iprintf>
    prev->next = ipr->next;
 811102e:	687b      	ldr	r3, [r7, #4]
 8111030:	681a      	ldr	r2, [r3, #0]
 8111032:	683b      	ldr	r3, [r7, #0]
 8111034:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8111036:	6879      	ldr	r1, [r7, #4]
 8111038:	2001      	movs	r0, #1
 811103a:	f001 f9bf 	bl	81123bc <memp_free>
}
 811103e:	bf00      	nop
 8111040:	3708      	adds	r7, #8
 8111042:	46bd      	mov	sp, r7
 8111044:	bd80      	pop	{r7, pc}
 8111046:	bf00      	nop
 8111048:	10005904 	.word	0x10005904
 811104c:	08119fb8 	.word	0x08119fb8
 8111050:	0811a0b8 	.word	0x0811a0b8
 8111054:	0811a038 	.word	0x0811a038

08111058 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8111058:	b580      	push	{r7, lr}
 811105a:	b08c      	sub	sp, #48	; 0x30
 811105c:	af00      	add	r7, sp, #0
 811105e:	60f8      	str	r0, [r7, #12]
 8111060:	60b9      	str	r1, [r7, #8]
 8111062:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8111064:	2300      	movs	r3, #0
 8111066:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8111068:	2301      	movs	r3, #1
 811106a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 811106c:	68bb      	ldr	r3, [r7, #8]
 811106e:	685b      	ldr	r3, [r3, #4]
 8111070:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8111072:	69fb      	ldr	r3, [r7, #28]
 8111074:	885b      	ldrh	r3, [r3, #2]
 8111076:	b29b      	uxth	r3, r3
 8111078:	4618      	mov	r0, r3
 811107a:	f7fe f8c7 	bl	810f20c <lwip_htons>
 811107e:	4603      	mov	r3, r0
 8111080:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8111082:	69fb      	ldr	r3, [r7, #28]
 8111084:	781b      	ldrb	r3, [r3, #0]
 8111086:	f003 030f 	and.w	r3, r3, #15
 811108a:	b2db      	uxtb	r3, r3
 811108c:	009b      	lsls	r3, r3, #2
 811108e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8111090:	7e7b      	ldrb	r3, [r7, #25]
 8111092:	b29b      	uxth	r3, r3
 8111094:	8b7a      	ldrh	r2, [r7, #26]
 8111096:	429a      	cmp	r2, r3
 8111098:	d202      	bcs.n	81110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 811109a:	f04f 33ff 	mov.w	r3, #4294967295
 811109e:	e135      	b.n	811130c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 81110a0:	7e7b      	ldrb	r3, [r7, #25]
 81110a2:	b29b      	uxth	r3, r3
 81110a4:	8b7a      	ldrh	r2, [r7, #26]
 81110a6:	1ad3      	subs	r3, r2, r3
 81110a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 81110aa:	69fb      	ldr	r3, [r7, #28]
 81110ac:	88db      	ldrh	r3, [r3, #6]
 81110ae:	b29b      	uxth	r3, r3
 81110b0:	4618      	mov	r0, r3
 81110b2:	f7fe f8ab 	bl	810f20c <lwip_htons>
 81110b6:	4603      	mov	r3, r0
 81110b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81110bc:	b29b      	uxth	r3, r3
 81110be:	00db      	lsls	r3, r3, #3
 81110c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 81110c2:	68bb      	ldr	r3, [r7, #8]
 81110c4:	685b      	ldr	r3, [r3, #4]
 81110c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 81110c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81110ca:	2200      	movs	r2, #0
 81110cc:	701a      	strb	r2, [r3, #0]
 81110ce:	2200      	movs	r2, #0
 81110d0:	705a      	strb	r2, [r3, #1]
 81110d2:	2200      	movs	r2, #0
 81110d4:	709a      	strb	r2, [r3, #2]
 81110d6:	2200      	movs	r2, #0
 81110d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 81110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81110dc:	8afa      	ldrh	r2, [r7, #22]
 81110de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 81110e0:	8afa      	ldrh	r2, [r7, #22]
 81110e2:	8b7b      	ldrh	r3, [r7, #26]
 81110e4:	4413      	add	r3, r2
 81110e6:	b29a      	uxth	r2, r3
 81110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81110ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 81110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81110ee:	88db      	ldrh	r3, [r3, #6]
 81110f0:	b29b      	uxth	r3, r3
 81110f2:	8afa      	ldrh	r2, [r7, #22]
 81110f4:	429a      	cmp	r2, r3
 81110f6:	d902      	bls.n	81110fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 81110f8:	f04f 33ff 	mov.w	r3, #4294967295
 81110fc:	e106      	b.n	811130c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 81110fe:	68fb      	ldr	r3, [r7, #12]
 8111100:	685b      	ldr	r3, [r3, #4]
 8111102:	627b      	str	r3, [r7, #36]	; 0x24
 8111104:	e068      	b.n	81111d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8111106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8111108:	685b      	ldr	r3, [r3, #4]
 811110a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 811110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811110e:	889b      	ldrh	r3, [r3, #4]
 8111110:	b29a      	uxth	r2, r3
 8111112:	693b      	ldr	r3, [r7, #16]
 8111114:	889b      	ldrh	r3, [r3, #4]
 8111116:	b29b      	uxth	r3, r3
 8111118:	429a      	cmp	r2, r3
 811111a:	d235      	bcs.n	8111188 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 811111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811111e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8111120:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8111122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111124:	2b00      	cmp	r3, #0
 8111126:	d020      	beq.n	811116a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8111128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811112a:	889b      	ldrh	r3, [r3, #4]
 811112c:	b29a      	uxth	r2, r3
 811112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111130:	88db      	ldrh	r3, [r3, #6]
 8111132:	b29b      	uxth	r3, r3
 8111134:	429a      	cmp	r2, r3
 8111136:	d307      	bcc.n	8111148 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8111138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811113a:	88db      	ldrh	r3, [r3, #6]
 811113c:	b29a      	uxth	r2, r3
 811113e:	693b      	ldr	r3, [r7, #16]
 8111140:	889b      	ldrh	r3, [r3, #4]
 8111142:	b29b      	uxth	r3, r3
 8111144:	429a      	cmp	r2, r3
 8111146:	d902      	bls.n	811114e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8111148:	f04f 33ff 	mov.w	r3, #4294967295
 811114c:	e0de      	b.n	811130c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 811114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111150:	68ba      	ldr	r2, [r7, #8]
 8111152:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8111154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111156:	88db      	ldrh	r3, [r3, #6]
 8111158:	b29a      	uxth	r2, r3
 811115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811115c:	889b      	ldrh	r3, [r3, #4]
 811115e:	b29b      	uxth	r3, r3
 8111160:	429a      	cmp	r2, r3
 8111162:	d03d      	beq.n	81111e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8111164:	2300      	movs	r3, #0
 8111166:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8111168:	e03a      	b.n	81111e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 811116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811116c:	88db      	ldrh	r3, [r3, #6]
 811116e:	b29a      	uxth	r2, r3
 8111170:	693b      	ldr	r3, [r7, #16]
 8111172:	889b      	ldrh	r3, [r3, #4]
 8111174:	b29b      	uxth	r3, r3
 8111176:	429a      	cmp	r2, r3
 8111178:	d902      	bls.n	8111180 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 811117a:	f04f 33ff 	mov.w	r3, #4294967295
 811117e:	e0c5      	b.n	811130c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8111180:	68fb      	ldr	r3, [r7, #12]
 8111182:	68ba      	ldr	r2, [r7, #8]
 8111184:	605a      	str	r2, [r3, #4]
      break;
 8111186:	e02b      	b.n	81111e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8111188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811118a:	889b      	ldrh	r3, [r3, #4]
 811118c:	b29a      	uxth	r2, r3
 811118e:	693b      	ldr	r3, [r7, #16]
 8111190:	889b      	ldrh	r3, [r3, #4]
 8111192:	b29b      	uxth	r3, r3
 8111194:	429a      	cmp	r2, r3
 8111196:	d102      	bne.n	811119e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8111198:	f04f 33ff 	mov.w	r3, #4294967295
 811119c:	e0b6      	b.n	811130c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 811119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81111a0:	889b      	ldrh	r3, [r3, #4]
 81111a2:	b29a      	uxth	r2, r3
 81111a4:	693b      	ldr	r3, [r7, #16]
 81111a6:	88db      	ldrh	r3, [r3, #6]
 81111a8:	b29b      	uxth	r3, r3
 81111aa:	429a      	cmp	r2, r3
 81111ac:	d202      	bcs.n	81111b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 81111ae:	f04f 33ff 	mov.w	r3, #4294967295
 81111b2:	e0ab      	b.n	811130c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 81111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81111b6:	2b00      	cmp	r3, #0
 81111b8:	d009      	beq.n	81111ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 81111ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81111bc:	88db      	ldrh	r3, [r3, #6]
 81111be:	b29a      	uxth	r2, r3
 81111c0:	693b      	ldr	r3, [r7, #16]
 81111c2:	889b      	ldrh	r3, [r3, #4]
 81111c4:	b29b      	uxth	r3, r3
 81111c6:	429a      	cmp	r2, r3
 81111c8:	d001      	beq.n	81111ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 81111ca:	2300      	movs	r3, #0
 81111cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 81111ce:	693b      	ldr	r3, [r7, #16]
 81111d0:	681b      	ldr	r3, [r3, #0]
 81111d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 81111d4:	693b      	ldr	r3, [r7, #16]
 81111d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 81111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81111da:	2b00      	cmp	r3, #0
 81111dc:	d193      	bne.n	8111106 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 81111de:	e000      	b.n	81111e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 81111e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 81111e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81111e4:	2b00      	cmp	r3, #0
 81111e6:	d12d      	bne.n	8111244 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 81111e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81111ea:	2b00      	cmp	r3, #0
 81111ec:	d01c      	beq.n	8111228 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 81111ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81111f0:	88db      	ldrh	r3, [r3, #6]
 81111f2:	b29a      	uxth	r2, r3
 81111f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81111f6:	889b      	ldrh	r3, [r3, #4]
 81111f8:	b29b      	uxth	r3, r3
 81111fa:	429a      	cmp	r2, r3
 81111fc:	d906      	bls.n	811120c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 81111fe:	4b45      	ldr	r3, [pc, #276]	; (8111314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8111200:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8111204:	4944      	ldr	r1, [pc, #272]	; (8111318 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8111206:	4845      	ldr	r0, [pc, #276]	; (811131c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8111208:	f006 fade 	bl	81177c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 811120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811120e:	68ba      	ldr	r2, [r7, #8]
 8111210:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8111212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111214:	88db      	ldrh	r3, [r3, #6]
 8111216:	b29a      	uxth	r2, r3
 8111218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811121a:	889b      	ldrh	r3, [r3, #4]
 811121c:	b29b      	uxth	r3, r3
 811121e:	429a      	cmp	r2, r3
 8111220:	d010      	beq.n	8111244 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8111222:	2300      	movs	r3, #0
 8111224:	623b      	str	r3, [r7, #32]
 8111226:	e00d      	b.n	8111244 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8111228:	68fb      	ldr	r3, [r7, #12]
 811122a:	685b      	ldr	r3, [r3, #4]
 811122c:	2b00      	cmp	r3, #0
 811122e:	d006      	beq.n	811123e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8111230:	4b38      	ldr	r3, [pc, #224]	; (8111314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8111232:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8111236:	493a      	ldr	r1, [pc, #232]	; (8111320 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8111238:	4838      	ldr	r0, [pc, #224]	; (811131c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811123a:	f006 fac5 	bl	81177c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 811123e:	68fb      	ldr	r3, [r7, #12]
 8111240:	68ba      	ldr	r2, [r7, #8]
 8111242:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8111244:	687b      	ldr	r3, [r7, #4]
 8111246:	2b00      	cmp	r3, #0
 8111248:	d105      	bne.n	8111256 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 811124a:	68fb      	ldr	r3, [r7, #12]
 811124c:	7f9b      	ldrb	r3, [r3, #30]
 811124e:	f003 0301 	and.w	r3, r3, #1
 8111252:	2b00      	cmp	r3, #0
 8111254:	d059      	beq.n	811130a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8111256:	6a3b      	ldr	r3, [r7, #32]
 8111258:	2b00      	cmp	r3, #0
 811125a:	d04f      	beq.n	81112fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 811125c:	68fb      	ldr	r3, [r7, #12]
 811125e:	685b      	ldr	r3, [r3, #4]
 8111260:	2b00      	cmp	r3, #0
 8111262:	d006      	beq.n	8111272 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8111264:	68fb      	ldr	r3, [r7, #12]
 8111266:	685b      	ldr	r3, [r3, #4]
 8111268:	685b      	ldr	r3, [r3, #4]
 811126a:	889b      	ldrh	r3, [r3, #4]
 811126c:	b29b      	uxth	r3, r3
 811126e:	2b00      	cmp	r3, #0
 8111270:	d002      	beq.n	8111278 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8111272:	2300      	movs	r3, #0
 8111274:	623b      	str	r3, [r7, #32]
 8111276:	e041      	b.n	81112fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8111278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811127a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 811127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811127e:	681b      	ldr	r3, [r3, #0]
 8111280:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8111282:	e012      	b.n	81112aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8111284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8111286:	685b      	ldr	r3, [r3, #4]
 8111288:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 811128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811128c:	88db      	ldrh	r3, [r3, #6]
 811128e:	b29a      	uxth	r2, r3
 8111290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8111292:	889b      	ldrh	r3, [r3, #4]
 8111294:	b29b      	uxth	r3, r3
 8111296:	429a      	cmp	r2, r3
 8111298:	d002      	beq.n	81112a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 811129a:	2300      	movs	r3, #0
 811129c:	623b      	str	r3, [r7, #32]
            break;
 811129e:	e007      	b.n	81112b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 81112a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81112a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 81112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81112a6:	681b      	ldr	r3, [r3, #0]
 81112a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 81112aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81112ac:	2b00      	cmp	r3, #0
 81112ae:	d1e9      	bne.n	8111284 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 81112b0:	6a3b      	ldr	r3, [r7, #32]
 81112b2:	2b00      	cmp	r3, #0
 81112b4:	d022      	beq.n	81112fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 81112b6:	68fb      	ldr	r3, [r7, #12]
 81112b8:	685b      	ldr	r3, [r3, #4]
 81112ba:	2b00      	cmp	r3, #0
 81112bc:	d106      	bne.n	81112cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 81112be:	4b15      	ldr	r3, [pc, #84]	; (8111314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81112c0:	f240 12df 	movw	r2, #479	; 0x1df
 81112c4:	4917      	ldr	r1, [pc, #92]	; (8111324 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 81112c6:	4815      	ldr	r0, [pc, #84]	; (811131c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81112c8:	f006 fa7e 	bl	81177c8 <iprintf>
          LWIP_ASSERT("sanity check",
 81112cc:	68fb      	ldr	r3, [r7, #12]
 81112ce:	685b      	ldr	r3, [r3, #4]
 81112d0:	685b      	ldr	r3, [r3, #4]
 81112d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81112d4:	429a      	cmp	r2, r3
 81112d6:	d106      	bne.n	81112e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 81112d8:	4b0e      	ldr	r3, [pc, #56]	; (8111314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81112da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 81112de:	4911      	ldr	r1, [pc, #68]	; (8111324 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 81112e0:	480e      	ldr	r0, [pc, #56]	; (811131c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81112e2:	f006 fa71 	bl	81177c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 81112e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81112e8:	681b      	ldr	r3, [r3, #0]
 81112ea:	2b00      	cmp	r3, #0
 81112ec:	d006      	beq.n	81112fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 81112ee:	4b09      	ldr	r3, [pc, #36]	; (8111314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81112f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 81112f4:	490c      	ldr	r1, [pc, #48]	; (8111328 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 81112f6:	4809      	ldr	r0, [pc, #36]	; (811131c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81112f8:	f006 fa66 	bl	81177c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 81112fc:	6a3b      	ldr	r3, [r7, #32]
 81112fe:	2b00      	cmp	r3, #0
 8111300:	bf14      	ite	ne
 8111302:	2301      	movne	r3, #1
 8111304:	2300      	moveq	r3, #0
 8111306:	b2db      	uxtb	r3, r3
 8111308:	e000      	b.n	811130c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 811130a:	2300      	movs	r3, #0
}
 811130c:	4618      	mov	r0, r3
 811130e:	3730      	adds	r7, #48	; 0x30
 8111310:	46bd      	mov	sp, r7
 8111312:	bd80      	pop	{r7, pc}
 8111314:	08119fb8 	.word	0x08119fb8
 8111318:	0811a0d4 	.word	0x0811a0d4
 811131c:	0811a038 	.word	0x0811a038
 8111320:	0811a0f4 	.word	0x0811a0f4
 8111324:	0811a12c 	.word	0x0811a12c
 8111328:	0811a13c 	.word	0x0811a13c

0811132c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 811132c:	b580      	push	{r7, lr}
 811132e:	b08e      	sub	sp, #56	; 0x38
 8111330:	af00      	add	r7, sp, #0
 8111332:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8111334:	687b      	ldr	r3, [r7, #4]
 8111336:	685b      	ldr	r3, [r3, #4]
 8111338:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 811133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811133c:	781b      	ldrb	r3, [r3, #0]
 811133e:	f003 030f 	and.w	r3, r3, #15
 8111342:	b2db      	uxtb	r3, r3
 8111344:	009b      	lsls	r3, r3, #2
 8111346:	b2db      	uxtb	r3, r3
 8111348:	2b14      	cmp	r3, #20
 811134a:	f040 8167 	bne.w	811161c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 811134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111350:	88db      	ldrh	r3, [r3, #6]
 8111352:	b29b      	uxth	r3, r3
 8111354:	4618      	mov	r0, r3
 8111356:	f7fd ff59 	bl	810f20c <lwip_htons>
 811135a:	4603      	mov	r3, r0
 811135c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8111360:	b29b      	uxth	r3, r3
 8111362:	00db      	lsls	r3, r3, #3
 8111364:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8111366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111368:	885b      	ldrh	r3, [r3, #2]
 811136a:	b29b      	uxth	r3, r3
 811136c:	4618      	mov	r0, r3
 811136e:	f7fd ff4d 	bl	810f20c <lwip_htons>
 8111372:	4603      	mov	r3, r0
 8111374:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8111376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111378:	781b      	ldrb	r3, [r3, #0]
 811137a:	f003 030f 	and.w	r3, r3, #15
 811137e:	b2db      	uxtb	r3, r3
 8111380:	009b      	lsls	r3, r3, #2
 8111382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8111386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 811138a:	b29b      	uxth	r3, r3
 811138c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 811138e:	429a      	cmp	r2, r3
 8111390:	f0c0 8146 	bcc.w	8111620 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8111394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8111398:	b29b      	uxth	r3, r3
 811139a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 811139c:	1ad3      	subs	r3, r2, r3
 811139e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 81113a0:	6878      	ldr	r0, [r7, #4]
 81113a2:	f001 fedd 	bl	8113160 <pbuf_clen>
 81113a6:	4603      	mov	r3, r0
 81113a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 81113aa:	4b9f      	ldr	r3, [pc, #636]	; (8111628 <ip4_reass+0x2fc>)
 81113ac:	881b      	ldrh	r3, [r3, #0]
 81113ae:	461a      	mov	r2, r3
 81113b0:	8c3b      	ldrh	r3, [r7, #32]
 81113b2:	4413      	add	r3, r2
 81113b4:	2b0a      	cmp	r3, #10
 81113b6:	dd10      	ble.n	81113da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 81113b8:	8c3b      	ldrh	r3, [r7, #32]
 81113ba:	4619      	mov	r1, r3
 81113bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81113be:	f7ff fd81 	bl	8110ec4 <ip_reass_remove_oldest_datagram>
 81113c2:	4603      	mov	r3, r0
 81113c4:	2b00      	cmp	r3, #0
 81113c6:	f000 812d 	beq.w	8111624 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 81113ca:	4b97      	ldr	r3, [pc, #604]	; (8111628 <ip4_reass+0x2fc>)
 81113cc:	881b      	ldrh	r3, [r3, #0]
 81113ce:	461a      	mov	r2, r3
 81113d0:	8c3b      	ldrh	r3, [r7, #32]
 81113d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 81113d4:	2b0a      	cmp	r3, #10
 81113d6:	f300 8125 	bgt.w	8111624 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 81113da:	4b94      	ldr	r3, [pc, #592]	; (811162c <ip4_reass+0x300>)
 81113dc:	681b      	ldr	r3, [r3, #0]
 81113de:	633b      	str	r3, [r7, #48]	; 0x30
 81113e0:	e015      	b.n	811140e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 81113e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81113e4:	695a      	ldr	r2, [r3, #20]
 81113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81113e8:	68db      	ldr	r3, [r3, #12]
 81113ea:	429a      	cmp	r2, r3
 81113ec:	d10c      	bne.n	8111408 <ip4_reass+0xdc>
 81113ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81113f0:	699a      	ldr	r2, [r3, #24]
 81113f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81113f4:	691b      	ldr	r3, [r3, #16]
 81113f6:	429a      	cmp	r2, r3
 81113f8:	d106      	bne.n	8111408 <ip4_reass+0xdc>
 81113fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81113fc:	899a      	ldrh	r2, [r3, #12]
 81113fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111400:	889b      	ldrh	r3, [r3, #4]
 8111402:	b29b      	uxth	r3, r3
 8111404:	429a      	cmp	r2, r3
 8111406:	d006      	beq.n	8111416 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8111408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811140a:	681b      	ldr	r3, [r3, #0]
 811140c:	633b      	str	r3, [r7, #48]	; 0x30
 811140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8111410:	2b00      	cmp	r3, #0
 8111412:	d1e6      	bne.n	81113e2 <ip4_reass+0xb6>
 8111414:	e000      	b.n	8111418 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8111416:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8111418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811141a:	2b00      	cmp	r3, #0
 811141c:	d109      	bne.n	8111432 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 811141e:	8c3b      	ldrh	r3, [r7, #32]
 8111420:	4619      	mov	r1, r3
 8111422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8111424:	f7ff fdb0 	bl	8110f88 <ip_reass_enqueue_new_datagram>
 8111428:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 811142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811142c:	2b00      	cmp	r3, #0
 811142e:	d11c      	bne.n	811146a <ip4_reass+0x13e>
      goto nullreturn;
 8111430:	e109      	b.n	8111646 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8111432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111434:	88db      	ldrh	r3, [r3, #6]
 8111436:	b29b      	uxth	r3, r3
 8111438:	4618      	mov	r0, r3
 811143a:	f7fd fee7 	bl	810f20c <lwip_htons>
 811143e:	4603      	mov	r3, r0
 8111440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8111444:	2b00      	cmp	r3, #0
 8111446:	d110      	bne.n	811146a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8111448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811144a:	89db      	ldrh	r3, [r3, #14]
 811144c:	4618      	mov	r0, r3
 811144e:	f7fd fedd 	bl	810f20c <lwip_htons>
 8111452:	4603      	mov	r3, r0
 8111454:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8111458:	2b00      	cmp	r3, #0
 811145a:	d006      	beq.n	811146a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 811145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811145e:	3308      	adds	r3, #8
 8111460:	2214      	movs	r2, #20
 8111462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8111464:	4618      	mov	r0, r3
 8111466:	f005 fcd4 	bl	8116e12 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 811146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811146c:	88db      	ldrh	r3, [r3, #6]
 811146e:	b29b      	uxth	r3, r3
 8111470:	f003 0320 	and.w	r3, r3, #32
 8111474:	2b00      	cmp	r3, #0
 8111476:	bf0c      	ite	eq
 8111478:	2301      	moveq	r3, #1
 811147a:	2300      	movne	r3, #0
 811147c:	b2db      	uxtb	r3, r3
 811147e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8111480:	69fb      	ldr	r3, [r7, #28]
 8111482:	2b00      	cmp	r3, #0
 8111484:	d00e      	beq.n	81114a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8111486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8111488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 811148a:	4413      	add	r3, r2
 811148c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 811148e:	8b7a      	ldrh	r2, [r7, #26]
 8111490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8111492:	429a      	cmp	r2, r3
 8111494:	f0c0 80a0 	bcc.w	81115d8 <ip4_reass+0x2ac>
 8111498:	8b7b      	ldrh	r3, [r7, #26]
 811149a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 811149e:	4293      	cmp	r3, r2
 81114a0:	f200 809a 	bhi.w	81115d8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 81114a4:	69fa      	ldr	r2, [r7, #28]
 81114a6:	6879      	ldr	r1, [r7, #4]
 81114a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81114aa:	f7ff fdd5 	bl	8111058 <ip_reass_chain_frag_into_datagram_and_validate>
 81114ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 81114b0:	697b      	ldr	r3, [r7, #20]
 81114b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81114b6:	f000 8091 	beq.w	81115dc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 81114ba:	4b5b      	ldr	r3, [pc, #364]	; (8111628 <ip4_reass+0x2fc>)
 81114bc:	881a      	ldrh	r2, [r3, #0]
 81114be:	8c3b      	ldrh	r3, [r7, #32]
 81114c0:	4413      	add	r3, r2
 81114c2:	b29a      	uxth	r2, r3
 81114c4:	4b58      	ldr	r3, [pc, #352]	; (8111628 <ip4_reass+0x2fc>)
 81114c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 81114c8:	69fb      	ldr	r3, [r7, #28]
 81114ca:	2b00      	cmp	r3, #0
 81114cc:	d00d      	beq.n	81114ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 81114ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81114d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81114d2:	4413      	add	r3, r2
 81114d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 81114d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81114d8:	8a7a      	ldrh	r2, [r7, #18]
 81114da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 81114dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81114de:	7f9b      	ldrb	r3, [r3, #30]
 81114e0:	f043 0301 	orr.w	r3, r3, #1
 81114e4:	b2da      	uxtb	r2, r3
 81114e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81114e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 81114ea:	697b      	ldr	r3, [r7, #20]
 81114ec:	2b01      	cmp	r3, #1
 81114ee:	d171      	bne.n	81115d4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 81114f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81114f2:	8b9b      	ldrh	r3, [r3, #28]
 81114f4:	3314      	adds	r3, #20
 81114f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 81114f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81114fa:	685b      	ldr	r3, [r3, #4]
 81114fc:	685b      	ldr	r3, [r3, #4]
 81114fe:	681b      	ldr	r3, [r3, #0]
 8111500:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8111502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8111504:	685b      	ldr	r3, [r3, #4]
 8111506:	685b      	ldr	r3, [r3, #4]
 8111508:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 811150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811150c:	3308      	adds	r3, #8
 811150e:	2214      	movs	r2, #20
 8111510:	4619      	mov	r1, r3
 8111512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8111514:	f005 fc7d 	bl	8116e12 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8111518:	8a3b      	ldrh	r3, [r7, #16]
 811151a:	4618      	mov	r0, r3
 811151c:	f7fd fe76 	bl	810f20c <lwip_htons>
 8111520:	4603      	mov	r3, r0
 8111522:	461a      	mov	r2, r3
 8111524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111526:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8111528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811152a:	2200      	movs	r2, #0
 811152c:	719a      	strb	r2, [r3, #6]
 811152e:	2200      	movs	r2, #0
 8111530:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8111532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111534:	2200      	movs	r2, #0
 8111536:	729a      	strb	r2, [r3, #10]
 8111538:	2200      	movs	r2, #0
 811153a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 811153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811153e:	685b      	ldr	r3, [r3, #4]
 8111540:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8111542:	e00d      	b.n	8111560 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8111544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8111546:	685b      	ldr	r3, [r3, #4]
 8111548:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 811154a:	2114      	movs	r1, #20
 811154c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 811154e:	f001 fcf3 	bl	8112f38 <pbuf_remove_header>
      pbuf_cat(p, r);
 8111552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8111554:	6878      	ldr	r0, [r7, #4]
 8111556:	f001 fe43 	bl	81131e0 <pbuf_cat>
      r = iprh->next_pbuf;
 811155a:	68fb      	ldr	r3, [r7, #12]
 811155c:	681b      	ldr	r3, [r3, #0]
 811155e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8111560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8111562:	2b00      	cmp	r3, #0
 8111564:	d1ee      	bne.n	8111544 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8111566:	4b31      	ldr	r3, [pc, #196]	; (811162c <ip4_reass+0x300>)
 8111568:	681b      	ldr	r3, [r3, #0]
 811156a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 811156c:	429a      	cmp	r2, r3
 811156e:	d102      	bne.n	8111576 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8111570:	2300      	movs	r3, #0
 8111572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8111574:	e010      	b.n	8111598 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8111576:	4b2d      	ldr	r3, [pc, #180]	; (811162c <ip4_reass+0x300>)
 8111578:	681b      	ldr	r3, [r3, #0]
 811157a:	62fb      	str	r3, [r7, #44]	; 0x2c
 811157c:	e007      	b.n	811158e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 811157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8111580:	681b      	ldr	r3, [r3, #0]
 8111582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8111584:	429a      	cmp	r2, r3
 8111586:	d006      	beq.n	8111596 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8111588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811158a:	681b      	ldr	r3, [r3, #0]
 811158c:	62fb      	str	r3, [r7, #44]	; 0x2c
 811158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8111590:	2b00      	cmp	r3, #0
 8111592:	d1f4      	bne.n	811157e <ip4_reass+0x252>
 8111594:	e000      	b.n	8111598 <ip4_reass+0x26c>
          break;
 8111596:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8111598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 811159a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811159c:	f7ff fd2e 	bl	8110ffc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 81115a0:	6878      	ldr	r0, [r7, #4]
 81115a2:	f001 fddd 	bl	8113160 <pbuf_clen>
 81115a6:	4603      	mov	r3, r0
 81115a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 81115aa:	4b1f      	ldr	r3, [pc, #124]	; (8111628 <ip4_reass+0x2fc>)
 81115ac:	881b      	ldrh	r3, [r3, #0]
 81115ae:	8c3a      	ldrh	r2, [r7, #32]
 81115b0:	429a      	cmp	r2, r3
 81115b2:	d906      	bls.n	81115c2 <ip4_reass+0x296>
 81115b4:	4b1e      	ldr	r3, [pc, #120]	; (8111630 <ip4_reass+0x304>)
 81115b6:	f240 229b 	movw	r2, #667	; 0x29b
 81115ba:	491e      	ldr	r1, [pc, #120]	; (8111634 <ip4_reass+0x308>)
 81115bc:	481e      	ldr	r0, [pc, #120]	; (8111638 <ip4_reass+0x30c>)
 81115be:	f006 f903 	bl	81177c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 81115c2:	4b19      	ldr	r3, [pc, #100]	; (8111628 <ip4_reass+0x2fc>)
 81115c4:	881a      	ldrh	r2, [r3, #0]
 81115c6:	8c3b      	ldrh	r3, [r7, #32]
 81115c8:	1ad3      	subs	r3, r2, r3
 81115ca:	b29a      	uxth	r2, r3
 81115cc:	4b16      	ldr	r3, [pc, #88]	; (8111628 <ip4_reass+0x2fc>)
 81115ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 81115d0:	687b      	ldr	r3, [r7, #4]
 81115d2:	e03c      	b.n	811164e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 81115d4:	2300      	movs	r3, #0
 81115d6:	e03a      	b.n	811164e <ip4_reass+0x322>
      goto nullreturn_ipr;
 81115d8:	bf00      	nop
 81115da:	e000      	b.n	81115de <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 81115dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 81115de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81115e0:	2b00      	cmp	r3, #0
 81115e2:	d106      	bne.n	81115f2 <ip4_reass+0x2c6>
 81115e4:	4b12      	ldr	r3, [pc, #72]	; (8111630 <ip4_reass+0x304>)
 81115e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 81115ea:	4914      	ldr	r1, [pc, #80]	; (811163c <ip4_reass+0x310>)
 81115ec:	4812      	ldr	r0, [pc, #72]	; (8111638 <ip4_reass+0x30c>)
 81115ee:	f006 f8eb 	bl	81177c8 <iprintf>
  if (ipr->p == NULL) {
 81115f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81115f4:	685b      	ldr	r3, [r3, #4]
 81115f6:	2b00      	cmp	r3, #0
 81115f8:	d124      	bne.n	8111644 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 81115fa:	4b0c      	ldr	r3, [pc, #48]	; (811162c <ip4_reass+0x300>)
 81115fc:	681b      	ldr	r3, [r3, #0]
 81115fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8111600:	429a      	cmp	r2, r3
 8111602:	d006      	beq.n	8111612 <ip4_reass+0x2e6>
 8111604:	4b0a      	ldr	r3, [pc, #40]	; (8111630 <ip4_reass+0x304>)
 8111606:	f240 22ab 	movw	r2, #683	; 0x2ab
 811160a:	490d      	ldr	r1, [pc, #52]	; (8111640 <ip4_reass+0x314>)
 811160c:	480a      	ldr	r0, [pc, #40]	; (8111638 <ip4_reass+0x30c>)
 811160e:	f006 f8db 	bl	81177c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8111612:	2100      	movs	r1, #0
 8111614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8111616:	f7ff fcf1 	bl	8110ffc <ip_reass_dequeue_datagram>
 811161a:	e014      	b.n	8111646 <ip4_reass+0x31a>
    goto nullreturn;
 811161c:	bf00      	nop
 811161e:	e012      	b.n	8111646 <ip4_reass+0x31a>
    goto nullreturn;
 8111620:	bf00      	nop
 8111622:	e010      	b.n	8111646 <ip4_reass+0x31a>
      goto nullreturn;
 8111624:	bf00      	nop
 8111626:	e00e      	b.n	8111646 <ip4_reass+0x31a>
 8111628:	10005908 	.word	0x10005908
 811162c:	10005904 	.word	0x10005904
 8111630:	08119fb8 	.word	0x08119fb8
 8111634:	0811a160 	.word	0x0811a160
 8111638:	0811a038 	.word	0x0811a038
 811163c:	0811a17c 	.word	0x0811a17c
 8111640:	0811a188 	.word	0x0811a188
  }

nullreturn:
 8111644:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8111646:	6878      	ldr	r0, [r7, #4]
 8111648:	f001 fcfc 	bl	8113044 <pbuf_free>
  return NULL;
 811164c:	2300      	movs	r3, #0
}
 811164e:	4618      	mov	r0, r3
 8111650:	3738      	adds	r7, #56	; 0x38
 8111652:	46bd      	mov	sp, r7
 8111654:	bd80      	pop	{r7, pc}
 8111656:	bf00      	nop

08111658 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8111658:	b580      	push	{r7, lr}
 811165a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 811165c:	2002      	movs	r0, #2
 811165e:	f000 fe37 	bl	81122d0 <memp_malloc>
 8111662:	4603      	mov	r3, r0
}
 8111664:	4618      	mov	r0, r3
 8111666:	bd80      	pop	{r7, pc}

08111668 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8111668:	b580      	push	{r7, lr}
 811166a:	b082      	sub	sp, #8
 811166c:	af00      	add	r7, sp, #0
 811166e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8111670:	687b      	ldr	r3, [r7, #4]
 8111672:	2b00      	cmp	r3, #0
 8111674:	d106      	bne.n	8111684 <ip_frag_free_pbuf_custom_ref+0x1c>
 8111676:	4b07      	ldr	r3, [pc, #28]	; (8111694 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8111678:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 811167c:	4906      	ldr	r1, [pc, #24]	; (8111698 <ip_frag_free_pbuf_custom_ref+0x30>)
 811167e:	4807      	ldr	r0, [pc, #28]	; (811169c <ip_frag_free_pbuf_custom_ref+0x34>)
 8111680:	f006 f8a2 	bl	81177c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8111684:	6879      	ldr	r1, [r7, #4]
 8111686:	2002      	movs	r0, #2
 8111688:	f000 fe98 	bl	81123bc <memp_free>
}
 811168c:	bf00      	nop
 811168e:	3708      	adds	r7, #8
 8111690:	46bd      	mov	sp, r7
 8111692:	bd80      	pop	{r7, pc}
 8111694:	08119fb8 	.word	0x08119fb8
 8111698:	0811a1a8 	.word	0x0811a1a8
 811169c:	0811a038 	.word	0x0811a038

081116a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 81116a0:	b580      	push	{r7, lr}
 81116a2:	b084      	sub	sp, #16
 81116a4:	af00      	add	r7, sp, #0
 81116a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 81116a8:	687b      	ldr	r3, [r7, #4]
 81116aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 81116ac:	68fb      	ldr	r3, [r7, #12]
 81116ae:	2b00      	cmp	r3, #0
 81116b0:	d106      	bne.n	81116c0 <ipfrag_free_pbuf_custom+0x20>
 81116b2:	4b11      	ldr	r3, [pc, #68]	; (81116f8 <ipfrag_free_pbuf_custom+0x58>)
 81116b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 81116b8:	4910      	ldr	r1, [pc, #64]	; (81116fc <ipfrag_free_pbuf_custom+0x5c>)
 81116ba:	4811      	ldr	r0, [pc, #68]	; (8111700 <ipfrag_free_pbuf_custom+0x60>)
 81116bc:	f006 f884 	bl	81177c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 81116c0:	68fa      	ldr	r2, [r7, #12]
 81116c2:	687b      	ldr	r3, [r7, #4]
 81116c4:	429a      	cmp	r2, r3
 81116c6:	d006      	beq.n	81116d6 <ipfrag_free_pbuf_custom+0x36>
 81116c8:	4b0b      	ldr	r3, [pc, #44]	; (81116f8 <ipfrag_free_pbuf_custom+0x58>)
 81116ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 81116ce:	490d      	ldr	r1, [pc, #52]	; (8111704 <ipfrag_free_pbuf_custom+0x64>)
 81116d0:	480b      	ldr	r0, [pc, #44]	; (8111700 <ipfrag_free_pbuf_custom+0x60>)
 81116d2:	f006 f879 	bl	81177c8 <iprintf>
  if (pcr->original != NULL) {
 81116d6:	68fb      	ldr	r3, [r7, #12]
 81116d8:	695b      	ldr	r3, [r3, #20]
 81116da:	2b00      	cmp	r3, #0
 81116dc:	d004      	beq.n	81116e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 81116de:	68fb      	ldr	r3, [r7, #12]
 81116e0:	695b      	ldr	r3, [r3, #20]
 81116e2:	4618      	mov	r0, r3
 81116e4:	f001 fcae 	bl	8113044 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 81116e8:	68f8      	ldr	r0, [r7, #12]
 81116ea:	f7ff ffbd 	bl	8111668 <ip_frag_free_pbuf_custom_ref>
}
 81116ee:	bf00      	nop
 81116f0:	3710      	adds	r7, #16
 81116f2:	46bd      	mov	sp, r7
 81116f4:	bd80      	pop	{r7, pc}
 81116f6:	bf00      	nop
 81116f8:	08119fb8 	.word	0x08119fb8
 81116fc:	0811a1b4 	.word	0x0811a1b4
 8111700:	0811a038 	.word	0x0811a038
 8111704:	0811a1c0 	.word	0x0811a1c0

08111708 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8111708:	b580      	push	{r7, lr}
 811170a:	b094      	sub	sp, #80	; 0x50
 811170c:	af02      	add	r7, sp, #8
 811170e:	60f8      	str	r0, [r7, #12]
 8111710:	60b9      	str	r1, [r7, #8]
 8111712:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8111714:	2300      	movs	r3, #0
 8111716:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 811171a:	68bb      	ldr	r3, [r7, #8]
 811171c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 811171e:	3b14      	subs	r3, #20
 8111720:	2b00      	cmp	r3, #0
 8111722:	da00      	bge.n	8111726 <ip4_frag+0x1e>
 8111724:	3307      	adds	r3, #7
 8111726:	10db      	asrs	r3, r3, #3
 8111728:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 811172a:	2314      	movs	r3, #20
 811172c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 811172e:	68fb      	ldr	r3, [r7, #12]
 8111730:	685b      	ldr	r3, [r3, #4]
 8111732:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8111734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8111736:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8111738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811173a:	781b      	ldrb	r3, [r3, #0]
 811173c:	f003 030f 	and.w	r3, r3, #15
 8111740:	b2db      	uxtb	r3, r3
 8111742:	009b      	lsls	r3, r3, #2
 8111744:	b2db      	uxtb	r3, r3
 8111746:	2b14      	cmp	r3, #20
 8111748:	d002      	beq.n	8111750 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 811174a:	f06f 0305 	mvn.w	r3, #5
 811174e:	e110      	b.n	8111972 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8111750:	68fb      	ldr	r3, [r7, #12]
 8111752:	895b      	ldrh	r3, [r3, #10]
 8111754:	2b13      	cmp	r3, #19
 8111756:	d809      	bhi.n	811176c <ip4_frag+0x64>
 8111758:	4b88      	ldr	r3, [pc, #544]	; (811197c <ip4_frag+0x274>)
 811175a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 811175e:	4988      	ldr	r1, [pc, #544]	; (8111980 <ip4_frag+0x278>)
 8111760:	4888      	ldr	r0, [pc, #544]	; (8111984 <ip4_frag+0x27c>)
 8111762:	f006 f831 	bl	81177c8 <iprintf>
 8111766:	f06f 0305 	mvn.w	r3, #5
 811176a:	e102      	b.n	8111972 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 811176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811176e:	88db      	ldrh	r3, [r3, #6]
 8111770:	b29b      	uxth	r3, r3
 8111772:	4618      	mov	r0, r3
 8111774:	f7fd fd4a 	bl	810f20c <lwip_htons>
 8111778:	4603      	mov	r3, r0
 811177a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 811177c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 811177e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8111782:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8111786:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8111788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 811178c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 811178e:	68fb      	ldr	r3, [r7, #12]
 8111790:	891b      	ldrh	r3, [r3, #8]
 8111792:	3b14      	subs	r3, #20
 8111794:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8111798:	e0e1      	b.n	811195e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 811179a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 811179c:	00db      	lsls	r3, r3, #3
 811179e:	b29b      	uxth	r3, r3
 81117a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 81117a4:	4293      	cmp	r3, r2
 81117a6:	bf28      	it	cs
 81117a8:	4613      	movcs	r3, r2
 81117aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 81117ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 81117b0:	2114      	movs	r1, #20
 81117b2:	200e      	movs	r0, #14
 81117b4:	f001 f964 	bl	8112a80 <pbuf_alloc>
 81117b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 81117ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81117bc:	2b00      	cmp	r3, #0
 81117be:	f000 80d5 	beq.w	811196c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 81117c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81117c4:	895b      	ldrh	r3, [r3, #10]
 81117c6:	2b13      	cmp	r3, #19
 81117c8:	d806      	bhi.n	81117d8 <ip4_frag+0xd0>
 81117ca:	4b6c      	ldr	r3, [pc, #432]	; (811197c <ip4_frag+0x274>)
 81117cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 81117d0:	496d      	ldr	r1, [pc, #436]	; (8111988 <ip4_frag+0x280>)
 81117d2:	486c      	ldr	r0, [pc, #432]	; (8111984 <ip4_frag+0x27c>)
 81117d4:	f005 fff8 	bl	81177c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 81117d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81117da:	685b      	ldr	r3, [r3, #4]
 81117dc:	2214      	movs	r2, #20
 81117de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81117e0:	4618      	mov	r0, r3
 81117e2:	f005 fb16 	bl	8116e12 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 81117e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81117e8:	685b      	ldr	r3, [r3, #4]
 81117ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 81117ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 81117ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 81117f2:	e064      	b.n	81118be <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 81117f4:	68fb      	ldr	r3, [r7, #12]
 81117f6:	895a      	ldrh	r2, [r3, #10]
 81117f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 81117fa:	1ad3      	subs	r3, r2, r3
 81117fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 81117fe:	68fb      	ldr	r3, [r7, #12]
 8111800:	895b      	ldrh	r3, [r3, #10]
 8111802:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8111804:	429a      	cmp	r2, r3
 8111806:	d906      	bls.n	8111816 <ip4_frag+0x10e>
 8111808:	4b5c      	ldr	r3, [pc, #368]	; (811197c <ip4_frag+0x274>)
 811180a:	f240 322d 	movw	r2, #813	; 0x32d
 811180e:	495f      	ldr	r1, [pc, #380]	; (811198c <ip4_frag+0x284>)
 8111810:	485c      	ldr	r0, [pc, #368]	; (8111984 <ip4_frag+0x27c>)
 8111812:	f005 ffd9 	bl	81177c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8111816:	8bfa      	ldrh	r2, [r7, #30]
 8111818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 811181c:	4293      	cmp	r3, r2
 811181e:	bf28      	it	cs
 8111820:	4613      	movcs	r3, r2
 8111822:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8111826:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 811182a:	2b00      	cmp	r3, #0
 811182c:	d105      	bne.n	811183a <ip4_frag+0x132>
        poff = 0;
 811182e:	2300      	movs	r3, #0
 8111830:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8111832:	68fb      	ldr	r3, [r7, #12]
 8111834:	681b      	ldr	r3, [r3, #0]
 8111836:	60fb      	str	r3, [r7, #12]
        continue;
 8111838:	e041      	b.n	81118be <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 811183a:	f7ff ff0d 	bl	8111658 <ip_frag_alloc_pbuf_custom_ref>
 811183e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8111840:	69bb      	ldr	r3, [r7, #24]
 8111842:	2b00      	cmp	r3, #0
 8111844:	d103      	bne.n	811184e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8111846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8111848:	f001 fbfc 	bl	8113044 <pbuf_free>
        goto memerr;
 811184c:	e08f      	b.n	811196e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 811184e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8111850:	68fb      	ldr	r3, [r7, #12]
 8111852:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8111854:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8111856:	4413      	add	r3, r2
 8111858:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 811185c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8111860:	9201      	str	r2, [sp, #4]
 8111862:	9300      	str	r3, [sp, #0]
 8111864:	4603      	mov	r3, r0
 8111866:	2241      	movs	r2, #65	; 0x41
 8111868:	2000      	movs	r0, #0
 811186a:	f001 fa31 	bl	8112cd0 <pbuf_alloced_custom>
 811186e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8111870:	697b      	ldr	r3, [r7, #20]
 8111872:	2b00      	cmp	r3, #0
 8111874:	d106      	bne.n	8111884 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8111876:	69b8      	ldr	r0, [r7, #24]
 8111878:	f7ff fef6 	bl	8111668 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 811187c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 811187e:	f001 fbe1 	bl	8113044 <pbuf_free>
        goto memerr;
 8111882:	e074      	b.n	811196e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8111884:	68f8      	ldr	r0, [r7, #12]
 8111886:	f001 fc83 	bl	8113190 <pbuf_ref>
      pcr->original = p;
 811188a:	69bb      	ldr	r3, [r7, #24]
 811188c:	68fa      	ldr	r2, [r7, #12]
 811188e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8111890:	69bb      	ldr	r3, [r7, #24]
 8111892:	4a3f      	ldr	r2, [pc, #252]	; (8111990 <ip4_frag+0x288>)
 8111894:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8111896:	6979      	ldr	r1, [r7, #20]
 8111898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 811189a:	f001 fca1 	bl	81131e0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 811189e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 81118a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 81118a6:	1ad3      	subs	r3, r2, r3
 81118a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 81118ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 81118b0:	2b00      	cmp	r3, #0
 81118b2:	d004      	beq.n	81118be <ip4_frag+0x1b6>
        poff = 0;
 81118b4:	2300      	movs	r3, #0
 81118b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 81118b8:	68fb      	ldr	r3, [r7, #12]
 81118ba:	681b      	ldr	r3, [r3, #0]
 81118bc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 81118be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 81118c2:	2b00      	cmp	r3, #0
 81118c4:	d196      	bne.n	81117f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 81118c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 81118c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 81118cc:	4413      	add	r3, r2
 81118ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 81118d0:	68bb      	ldr	r3, [r7, #8]
 81118d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 81118d4:	f1a3 0213 	sub.w	r2, r3, #19
 81118d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 81118dc:	429a      	cmp	r2, r3
 81118de:	bfcc      	ite	gt
 81118e0:	2301      	movgt	r3, #1
 81118e2:	2300      	movle	r3, #0
 81118e4:	b2db      	uxtb	r3, r3
 81118e6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 81118e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 81118ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81118f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 81118f2:	6a3b      	ldr	r3, [r7, #32]
 81118f4:	2b00      	cmp	r3, #0
 81118f6:	d002      	beq.n	81118fe <ip4_frag+0x1f6>
 81118f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81118fa:	2b00      	cmp	r3, #0
 81118fc:	d003      	beq.n	8111906 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 81118fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8111900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8111904:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8111906:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8111908:	4618      	mov	r0, r3
 811190a:	f7fd fc7f 	bl	810f20c <lwip_htons>
 811190e:	4603      	mov	r3, r0
 8111910:	461a      	mov	r2, r3
 8111912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8111914:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8111916:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8111918:	3314      	adds	r3, #20
 811191a:	b29b      	uxth	r3, r3
 811191c:	4618      	mov	r0, r3
 811191e:	f7fd fc75 	bl	810f20c <lwip_htons>
 8111922:	4603      	mov	r3, r0
 8111924:	461a      	mov	r2, r3
 8111926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8111928:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 811192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811192c:	2200      	movs	r2, #0
 811192e:	729a      	strb	r2, [r3, #10]
 8111930:	2200      	movs	r2, #0
 8111932:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8111934:	68bb      	ldr	r3, [r7, #8]
 8111936:	695b      	ldr	r3, [r3, #20]
 8111938:	687a      	ldr	r2, [r7, #4]
 811193a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 811193c:	68b8      	ldr	r0, [r7, #8]
 811193e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8111940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8111942:	f001 fb7f 	bl	8113044 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8111946:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 811194a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 811194c:	1ad3      	subs	r3, r2, r3
 811194e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8111952:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8111956:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8111958:	4413      	add	r3, r2
 811195a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 811195e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8111962:	2b00      	cmp	r3, #0
 8111964:	f47f af19 	bne.w	811179a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8111968:	2300      	movs	r3, #0
 811196a:	e002      	b.n	8111972 <ip4_frag+0x26a>
      goto memerr;
 811196c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 811196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8111972:	4618      	mov	r0, r3
 8111974:	3748      	adds	r7, #72	; 0x48
 8111976:	46bd      	mov	sp, r7
 8111978:	bd80      	pop	{r7, pc}
 811197a:	bf00      	nop
 811197c:	08119fb8 	.word	0x08119fb8
 8111980:	0811a1cc 	.word	0x0811a1cc
 8111984:	0811a038 	.word	0x0811a038
 8111988:	0811a1e8 	.word	0x0811a1e8
 811198c:	0811a208 	.word	0x0811a208
 8111990:	081116a1 	.word	0x081116a1

08111994 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8111994:	b480      	push	{r7}
 8111996:	b083      	sub	sp, #12
 8111998:	af00      	add	r7, sp, #0
 811199a:	4603      	mov	r3, r0
 811199c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 811199e:	4b05      	ldr	r3, [pc, #20]	; (81119b4 <ptr_to_mem+0x20>)
 81119a0:	681a      	ldr	r2, [r3, #0]
 81119a2:	88fb      	ldrh	r3, [r7, #6]
 81119a4:	4413      	add	r3, r2
}
 81119a6:	4618      	mov	r0, r3
 81119a8:	370c      	adds	r7, #12
 81119aa:	46bd      	mov	sp, r7
 81119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81119b0:	4770      	bx	lr
 81119b2:	bf00      	nop
 81119b4:	1000590c 	.word	0x1000590c

081119b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 81119b8:	b480      	push	{r7}
 81119ba:	b083      	sub	sp, #12
 81119bc:	af00      	add	r7, sp, #0
 81119be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 81119c0:	4b05      	ldr	r3, [pc, #20]	; (81119d8 <mem_to_ptr+0x20>)
 81119c2:	681b      	ldr	r3, [r3, #0]
 81119c4:	687a      	ldr	r2, [r7, #4]
 81119c6:	1ad3      	subs	r3, r2, r3
 81119c8:	b29b      	uxth	r3, r3
}
 81119ca:	4618      	mov	r0, r3
 81119cc:	370c      	adds	r7, #12
 81119ce:	46bd      	mov	sp, r7
 81119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81119d4:	4770      	bx	lr
 81119d6:	bf00      	nop
 81119d8:	1000590c 	.word	0x1000590c

081119dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 81119dc:	b590      	push	{r4, r7, lr}
 81119de:	b085      	sub	sp, #20
 81119e0:	af00      	add	r7, sp, #0
 81119e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 81119e4:	4b47      	ldr	r3, [pc, #284]	; (8111b04 <plug_holes+0x128>)
 81119e6:	681b      	ldr	r3, [r3, #0]
 81119e8:	687a      	ldr	r2, [r7, #4]
 81119ea:	429a      	cmp	r2, r3
 81119ec:	d206      	bcs.n	81119fc <plug_holes+0x20>
 81119ee:	4b46      	ldr	r3, [pc, #280]	; (8111b08 <plug_holes+0x12c>)
 81119f0:	f240 12df 	movw	r2, #479	; 0x1df
 81119f4:	4945      	ldr	r1, [pc, #276]	; (8111b0c <plug_holes+0x130>)
 81119f6:	4846      	ldr	r0, [pc, #280]	; (8111b10 <plug_holes+0x134>)
 81119f8:	f005 fee6 	bl	81177c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 81119fc:	4b45      	ldr	r3, [pc, #276]	; (8111b14 <plug_holes+0x138>)
 81119fe:	681b      	ldr	r3, [r3, #0]
 8111a00:	687a      	ldr	r2, [r7, #4]
 8111a02:	429a      	cmp	r2, r3
 8111a04:	d306      	bcc.n	8111a14 <plug_holes+0x38>
 8111a06:	4b40      	ldr	r3, [pc, #256]	; (8111b08 <plug_holes+0x12c>)
 8111a08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8111a0c:	4942      	ldr	r1, [pc, #264]	; (8111b18 <plug_holes+0x13c>)
 8111a0e:	4840      	ldr	r0, [pc, #256]	; (8111b10 <plug_holes+0x134>)
 8111a10:	f005 feda 	bl	81177c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8111a14:	687b      	ldr	r3, [r7, #4]
 8111a16:	791b      	ldrb	r3, [r3, #4]
 8111a18:	2b00      	cmp	r3, #0
 8111a1a:	d006      	beq.n	8111a2a <plug_holes+0x4e>
 8111a1c:	4b3a      	ldr	r3, [pc, #232]	; (8111b08 <plug_holes+0x12c>)
 8111a1e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8111a22:	493e      	ldr	r1, [pc, #248]	; (8111b1c <plug_holes+0x140>)
 8111a24:	483a      	ldr	r0, [pc, #232]	; (8111b10 <plug_holes+0x134>)
 8111a26:	f005 fecf 	bl	81177c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8111a2a:	687b      	ldr	r3, [r7, #4]
 8111a2c:	881b      	ldrh	r3, [r3, #0]
 8111a2e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111a32:	4293      	cmp	r3, r2
 8111a34:	d906      	bls.n	8111a44 <plug_holes+0x68>
 8111a36:	4b34      	ldr	r3, [pc, #208]	; (8111b08 <plug_holes+0x12c>)
 8111a38:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8111a3c:	4938      	ldr	r1, [pc, #224]	; (8111b20 <plug_holes+0x144>)
 8111a3e:	4834      	ldr	r0, [pc, #208]	; (8111b10 <plug_holes+0x134>)
 8111a40:	f005 fec2 	bl	81177c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8111a44:	687b      	ldr	r3, [r7, #4]
 8111a46:	881b      	ldrh	r3, [r3, #0]
 8111a48:	4618      	mov	r0, r3
 8111a4a:	f7ff ffa3 	bl	8111994 <ptr_to_mem>
 8111a4e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8111a50:	687a      	ldr	r2, [r7, #4]
 8111a52:	68fb      	ldr	r3, [r7, #12]
 8111a54:	429a      	cmp	r2, r3
 8111a56:	d025      	beq.n	8111aa4 <plug_holes+0xc8>
 8111a58:	68fb      	ldr	r3, [r7, #12]
 8111a5a:	791b      	ldrb	r3, [r3, #4]
 8111a5c:	2b00      	cmp	r3, #0
 8111a5e:	d121      	bne.n	8111aa4 <plug_holes+0xc8>
 8111a60:	4b2c      	ldr	r3, [pc, #176]	; (8111b14 <plug_holes+0x138>)
 8111a62:	681b      	ldr	r3, [r3, #0]
 8111a64:	68fa      	ldr	r2, [r7, #12]
 8111a66:	429a      	cmp	r2, r3
 8111a68:	d01c      	beq.n	8111aa4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8111a6a:	4b2e      	ldr	r3, [pc, #184]	; (8111b24 <plug_holes+0x148>)
 8111a6c:	681b      	ldr	r3, [r3, #0]
 8111a6e:	68fa      	ldr	r2, [r7, #12]
 8111a70:	429a      	cmp	r2, r3
 8111a72:	d102      	bne.n	8111a7a <plug_holes+0x9e>
      lfree = mem;
 8111a74:	4a2b      	ldr	r2, [pc, #172]	; (8111b24 <plug_holes+0x148>)
 8111a76:	687b      	ldr	r3, [r7, #4]
 8111a78:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8111a7a:	68fb      	ldr	r3, [r7, #12]
 8111a7c:	881a      	ldrh	r2, [r3, #0]
 8111a7e:	687b      	ldr	r3, [r7, #4]
 8111a80:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8111a82:	68fb      	ldr	r3, [r7, #12]
 8111a84:	881b      	ldrh	r3, [r3, #0]
 8111a86:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111a8a:	4293      	cmp	r3, r2
 8111a8c:	d00a      	beq.n	8111aa4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8111a8e:	68fb      	ldr	r3, [r7, #12]
 8111a90:	881b      	ldrh	r3, [r3, #0]
 8111a92:	4618      	mov	r0, r3
 8111a94:	f7ff ff7e 	bl	8111994 <ptr_to_mem>
 8111a98:	4604      	mov	r4, r0
 8111a9a:	6878      	ldr	r0, [r7, #4]
 8111a9c:	f7ff ff8c 	bl	81119b8 <mem_to_ptr>
 8111aa0:	4603      	mov	r3, r0
 8111aa2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8111aa4:	687b      	ldr	r3, [r7, #4]
 8111aa6:	885b      	ldrh	r3, [r3, #2]
 8111aa8:	4618      	mov	r0, r3
 8111aaa:	f7ff ff73 	bl	8111994 <ptr_to_mem>
 8111aae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8111ab0:	68ba      	ldr	r2, [r7, #8]
 8111ab2:	687b      	ldr	r3, [r7, #4]
 8111ab4:	429a      	cmp	r2, r3
 8111ab6:	d020      	beq.n	8111afa <plug_holes+0x11e>
 8111ab8:	68bb      	ldr	r3, [r7, #8]
 8111aba:	791b      	ldrb	r3, [r3, #4]
 8111abc:	2b00      	cmp	r3, #0
 8111abe:	d11c      	bne.n	8111afa <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8111ac0:	4b18      	ldr	r3, [pc, #96]	; (8111b24 <plug_holes+0x148>)
 8111ac2:	681b      	ldr	r3, [r3, #0]
 8111ac4:	687a      	ldr	r2, [r7, #4]
 8111ac6:	429a      	cmp	r2, r3
 8111ac8:	d102      	bne.n	8111ad0 <plug_holes+0xf4>
      lfree = pmem;
 8111aca:	4a16      	ldr	r2, [pc, #88]	; (8111b24 <plug_holes+0x148>)
 8111acc:	68bb      	ldr	r3, [r7, #8]
 8111ace:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8111ad0:	687b      	ldr	r3, [r7, #4]
 8111ad2:	881a      	ldrh	r2, [r3, #0]
 8111ad4:	68bb      	ldr	r3, [r7, #8]
 8111ad6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8111ad8:	687b      	ldr	r3, [r7, #4]
 8111ada:	881b      	ldrh	r3, [r3, #0]
 8111adc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111ae0:	4293      	cmp	r3, r2
 8111ae2:	d00a      	beq.n	8111afa <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8111ae4:	687b      	ldr	r3, [r7, #4]
 8111ae6:	881b      	ldrh	r3, [r3, #0]
 8111ae8:	4618      	mov	r0, r3
 8111aea:	f7ff ff53 	bl	8111994 <ptr_to_mem>
 8111aee:	4604      	mov	r4, r0
 8111af0:	68b8      	ldr	r0, [r7, #8]
 8111af2:	f7ff ff61 	bl	81119b8 <mem_to_ptr>
 8111af6:	4603      	mov	r3, r0
 8111af8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8111afa:	bf00      	nop
 8111afc:	3714      	adds	r7, #20
 8111afe:	46bd      	mov	sp, r7
 8111b00:	bd90      	pop	{r4, r7, pc}
 8111b02:	bf00      	nop
 8111b04:	1000590c 	.word	0x1000590c
 8111b08:	0811a218 	.word	0x0811a218
 8111b0c:	0811a280 	.word	0x0811a280
 8111b10:	0811a298 	.word	0x0811a298
 8111b14:	10005910 	.word	0x10005910
 8111b18:	0811a2c0 	.word	0x0811a2c0
 8111b1c:	0811a2dc 	.word	0x0811a2dc
 8111b20:	0811a2f8 	.word	0x0811a2f8
 8111b24:	10005918 	.word	0x10005918

08111b28 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8111b28:	b580      	push	{r7, lr}
 8111b2a:	b082      	sub	sp, #8
 8111b2c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8111b2e:	4b1d      	ldr	r3, [pc, #116]	; (8111ba4 <mem_init+0x7c>)
 8111b30:	4a1d      	ldr	r2, [pc, #116]	; (8111ba8 <mem_init+0x80>)
 8111b32:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8111b34:	4b1b      	ldr	r3, [pc, #108]	; (8111ba4 <mem_init+0x7c>)
 8111b36:	681b      	ldr	r3, [r3, #0]
 8111b38:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8111b3a:	687b      	ldr	r3, [r7, #4]
 8111b3c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111b40:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8111b42:	687b      	ldr	r3, [r7, #4]
 8111b44:	2200      	movs	r2, #0
 8111b46:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8111b48:	687b      	ldr	r3, [r7, #4]
 8111b4a:	2200      	movs	r2, #0
 8111b4c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8111b4e:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8111b52:	f7ff ff1f 	bl	8111994 <ptr_to_mem>
 8111b56:	4603      	mov	r3, r0
 8111b58:	4a14      	ldr	r2, [pc, #80]	; (8111bac <mem_init+0x84>)
 8111b5a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8111b5c:	4b13      	ldr	r3, [pc, #76]	; (8111bac <mem_init+0x84>)
 8111b5e:	681b      	ldr	r3, [r3, #0]
 8111b60:	2201      	movs	r2, #1
 8111b62:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8111b64:	4b11      	ldr	r3, [pc, #68]	; (8111bac <mem_init+0x84>)
 8111b66:	681b      	ldr	r3, [r3, #0]
 8111b68:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111b6c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8111b6e:	4b0f      	ldr	r3, [pc, #60]	; (8111bac <mem_init+0x84>)
 8111b70:	681b      	ldr	r3, [r3, #0]
 8111b72:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111b76:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8111b78:	4b0a      	ldr	r3, [pc, #40]	; (8111ba4 <mem_init+0x7c>)
 8111b7a:	681b      	ldr	r3, [r3, #0]
 8111b7c:	4a0c      	ldr	r2, [pc, #48]	; (8111bb0 <mem_init+0x88>)
 8111b7e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8111b80:	480c      	ldr	r0, [pc, #48]	; (8111bb4 <mem_init+0x8c>)
 8111b82:	f001 fd99 	bl	81136b8 <sys_mutex_new>
 8111b86:	4603      	mov	r3, r0
 8111b88:	2b00      	cmp	r3, #0
 8111b8a:	d006      	beq.n	8111b9a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8111b8c:	4b0a      	ldr	r3, [pc, #40]	; (8111bb8 <mem_init+0x90>)
 8111b8e:	f240 221f 	movw	r2, #543	; 0x21f
 8111b92:	490a      	ldr	r1, [pc, #40]	; (8111bbc <mem_init+0x94>)
 8111b94:	480a      	ldr	r0, [pc, #40]	; (8111bc0 <mem_init+0x98>)
 8111b96:	f005 fe17 	bl	81177c8 <iprintf>
  }
}
 8111b9a:	bf00      	nop
 8111b9c:	3708      	adds	r7, #8
 8111b9e:	46bd      	mov	sp, r7
 8111ba0:	bd80      	pop	{r7, pc}
 8111ba2:	bf00      	nop
 8111ba4:	1000590c 	.word	0x1000590c
 8111ba8:	30044000 	.word	0x30044000
 8111bac:	10005910 	.word	0x10005910
 8111bb0:	10005918 	.word	0x10005918
 8111bb4:	10005914 	.word	0x10005914
 8111bb8:	0811a218 	.word	0x0811a218
 8111bbc:	0811a324 	.word	0x0811a324
 8111bc0:	0811a298 	.word	0x0811a298

08111bc4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8111bc4:	b580      	push	{r7, lr}
 8111bc6:	b086      	sub	sp, #24
 8111bc8:	af00      	add	r7, sp, #0
 8111bca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8111bcc:	6878      	ldr	r0, [r7, #4]
 8111bce:	f7ff fef3 	bl	81119b8 <mem_to_ptr>
 8111bd2:	4603      	mov	r3, r0
 8111bd4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8111bd6:	687b      	ldr	r3, [r7, #4]
 8111bd8:	881b      	ldrh	r3, [r3, #0]
 8111bda:	4618      	mov	r0, r3
 8111bdc:	f7ff feda 	bl	8111994 <ptr_to_mem>
 8111be0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8111be2:	687b      	ldr	r3, [r7, #4]
 8111be4:	885b      	ldrh	r3, [r3, #2]
 8111be6:	4618      	mov	r0, r3
 8111be8:	f7ff fed4 	bl	8111994 <ptr_to_mem>
 8111bec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8111bee:	687b      	ldr	r3, [r7, #4]
 8111bf0:	881b      	ldrh	r3, [r3, #0]
 8111bf2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111bf6:	4293      	cmp	r3, r2
 8111bf8:	d819      	bhi.n	8111c2e <mem_link_valid+0x6a>
 8111bfa:	687b      	ldr	r3, [r7, #4]
 8111bfc:	885b      	ldrh	r3, [r3, #2]
 8111bfe:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111c02:	4293      	cmp	r3, r2
 8111c04:	d813      	bhi.n	8111c2e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8111c06:	687b      	ldr	r3, [r7, #4]
 8111c08:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8111c0a:	8afa      	ldrh	r2, [r7, #22]
 8111c0c:	429a      	cmp	r2, r3
 8111c0e:	d004      	beq.n	8111c1a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8111c10:	68fb      	ldr	r3, [r7, #12]
 8111c12:	881b      	ldrh	r3, [r3, #0]
 8111c14:	8afa      	ldrh	r2, [r7, #22]
 8111c16:	429a      	cmp	r2, r3
 8111c18:	d109      	bne.n	8111c2e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8111c1a:	4b08      	ldr	r3, [pc, #32]	; (8111c3c <mem_link_valid+0x78>)
 8111c1c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8111c1e:	693a      	ldr	r2, [r7, #16]
 8111c20:	429a      	cmp	r2, r3
 8111c22:	d006      	beq.n	8111c32 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8111c24:	693b      	ldr	r3, [r7, #16]
 8111c26:	885b      	ldrh	r3, [r3, #2]
 8111c28:	8afa      	ldrh	r2, [r7, #22]
 8111c2a:	429a      	cmp	r2, r3
 8111c2c:	d001      	beq.n	8111c32 <mem_link_valid+0x6e>
    return 0;
 8111c2e:	2300      	movs	r3, #0
 8111c30:	e000      	b.n	8111c34 <mem_link_valid+0x70>
  }
  return 1;
 8111c32:	2301      	movs	r3, #1
}
 8111c34:	4618      	mov	r0, r3
 8111c36:	3718      	adds	r7, #24
 8111c38:	46bd      	mov	sp, r7
 8111c3a:	bd80      	pop	{r7, pc}
 8111c3c:	10005910 	.word	0x10005910

08111c40 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8111c40:	b580      	push	{r7, lr}
 8111c42:	b088      	sub	sp, #32
 8111c44:	af00      	add	r7, sp, #0
 8111c46:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8111c48:	687b      	ldr	r3, [r7, #4]
 8111c4a:	2b00      	cmp	r3, #0
 8111c4c:	d070      	beq.n	8111d30 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8111c4e:	687b      	ldr	r3, [r7, #4]
 8111c50:	f003 0303 	and.w	r3, r3, #3
 8111c54:	2b00      	cmp	r3, #0
 8111c56:	d00d      	beq.n	8111c74 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8111c58:	4b37      	ldr	r3, [pc, #220]	; (8111d38 <mem_free+0xf8>)
 8111c5a:	f240 2273 	movw	r2, #627	; 0x273
 8111c5e:	4937      	ldr	r1, [pc, #220]	; (8111d3c <mem_free+0xfc>)
 8111c60:	4837      	ldr	r0, [pc, #220]	; (8111d40 <mem_free+0x100>)
 8111c62:	f005 fdb1 	bl	81177c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8111c66:	f001 fd85 	bl	8113774 <sys_arch_protect>
 8111c6a:	60f8      	str	r0, [r7, #12]
 8111c6c:	68f8      	ldr	r0, [r7, #12]
 8111c6e:	f001 fd8f 	bl	8113790 <sys_arch_unprotect>
    return;
 8111c72:	e05e      	b.n	8111d32 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8111c74:	687b      	ldr	r3, [r7, #4]
 8111c76:	3b08      	subs	r3, #8
 8111c78:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8111c7a:	4b32      	ldr	r3, [pc, #200]	; (8111d44 <mem_free+0x104>)
 8111c7c:	681b      	ldr	r3, [r3, #0]
 8111c7e:	69fa      	ldr	r2, [r7, #28]
 8111c80:	429a      	cmp	r2, r3
 8111c82:	d306      	bcc.n	8111c92 <mem_free+0x52>
 8111c84:	687b      	ldr	r3, [r7, #4]
 8111c86:	f103 020c 	add.w	r2, r3, #12
 8111c8a:	4b2f      	ldr	r3, [pc, #188]	; (8111d48 <mem_free+0x108>)
 8111c8c:	681b      	ldr	r3, [r3, #0]
 8111c8e:	429a      	cmp	r2, r3
 8111c90:	d90d      	bls.n	8111cae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8111c92:	4b29      	ldr	r3, [pc, #164]	; (8111d38 <mem_free+0xf8>)
 8111c94:	f240 227f 	movw	r2, #639	; 0x27f
 8111c98:	492c      	ldr	r1, [pc, #176]	; (8111d4c <mem_free+0x10c>)
 8111c9a:	4829      	ldr	r0, [pc, #164]	; (8111d40 <mem_free+0x100>)
 8111c9c:	f005 fd94 	bl	81177c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8111ca0:	f001 fd68 	bl	8113774 <sys_arch_protect>
 8111ca4:	6138      	str	r0, [r7, #16]
 8111ca6:	6938      	ldr	r0, [r7, #16]
 8111ca8:	f001 fd72 	bl	8113790 <sys_arch_unprotect>
    return;
 8111cac:	e041      	b.n	8111d32 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8111cae:	4828      	ldr	r0, [pc, #160]	; (8111d50 <mem_free+0x110>)
 8111cb0:	f001 fd1e 	bl	81136f0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8111cb4:	69fb      	ldr	r3, [r7, #28]
 8111cb6:	791b      	ldrb	r3, [r3, #4]
 8111cb8:	2b00      	cmp	r3, #0
 8111cba:	d110      	bne.n	8111cde <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8111cbc:	4b1e      	ldr	r3, [pc, #120]	; (8111d38 <mem_free+0xf8>)
 8111cbe:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8111cc2:	4924      	ldr	r1, [pc, #144]	; (8111d54 <mem_free+0x114>)
 8111cc4:	481e      	ldr	r0, [pc, #120]	; (8111d40 <mem_free+0x100>)
 8111cc6:	f005 fd7f 	bl	81177c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8111cca:	4821      	ldr	r0, [pc, #132]	; (8111d50 <mem_free+0x110>)
 8111ccc:	f001 fd1f 	bl	811370e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8111cd0:	f001 fd50 	bl	8113774 <sys_arch_protect>
 8111cd4:	6178      	str	r0, [r7, #20]
 8111cd6:	6978      	ldr	r0, [r7, #20]
 8111cd8:	f001 fd5a 	bl	8113790 <sys_arch_unprotect>
    return;
 8111cdc:	e029      	b.n	8111d32 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8111cde:	69f8      	ldr	r0, [r7, #28]
 8111ce0:	f7ff ff70 	bl	8111bc4 <mem_link_valid>
 8111ce4:	4603      	mov	r3, r0
 8111ce6:	2b00      	cmp	r3, #0
 8111ce8:	d110      	bne.n	8111d0c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8111cea:	4b13      	ldr	r3, [pc, #76]	; (8111d38 <mem_free+0xf8>)
 8111cec:	f240 2295 	movw	r2, #661	; 0x295
 8111cf0:	4919      	ldr	r1, [pc, #100]	; (8111d58 <mem_free+0x118>)
 8111cf2:	4813      	ldr	r0, [pc, #76]	; (8111d40 <mem_free+0x100>)
 8111cf4:	f005 fd68 	bl	81177c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8111cf8:	4815      	ldr	r0, [pc, #84]	; (8111d50 <mem_free+0x110>)
 8111cfa:	f001 fd08 	bl	811370e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8111cfe:	f001 fd39 	bl	8113774 <sys_arch_protect>
 8111d02:	61b8      	str	r0, [r7, #24]
 8111d04:	69b8      	ldr	r0, [r7, #24]
 8111d06:	f001 fd43 	bl	8113790 <sys_arch_unprotect>
    return;
 8111d0a:	e012      	b.n	8111d32 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8111d0c:	69fb      	ldr	r3, [r7, #28]
 8111d0e:	2200      	movs	r2, #0
 8111d10:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8111d12:	4b12      	ldr	r3, [pc, #72]	; (8111d5c <mem_free+0x11c>)
 8111d14:	681b      	ldr	r3, [r3, #0]
 8111d16:	69fa      	ldr	r2, [r7, #28]
 8111d18:	429a      	cmp	r2, r3
 8111d1a:	d202      	bcs.n	8111d22 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8111d1c:	4a0f      	ldr	r2, [pc, #60]	; (8111d5c <mem_free+0x11c>)
 8111d1e:	69fb      	ldr	r3, [r7, #28]
 8111d20:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8111d22:	69f8      	ldr	r0, [r7, #28]
 8111d24:	f7ff fe5a 	bl	81119dc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8111d28:	4809      	ldr	r0, [pc, #36]	; (8111d50 <mem_free+0x110>)
 8111d2a:	f001 fcf0 	bl	811370e <sys_mutex_unlock>
 8111d2e:	e000      	b.n	8111d32 <mem_free+0xf2>
    return;
 8111d30:	bf00      	nop
}
 8111d32:	3720      	adds	r7, #32
 8111d34:	46bd      	mov	sp, r7
 8111d36:	bd80      	pop	{r7, pc}
 8111d38:	0811a218 	.word	0x0811a218
 8111d3c:	0811a340 	.word	0x0811a340
 8111d40:	0811a298 	.word	0x0811a298
 8111d44:	1000590c 	.word	0x1000590c
 8111d48:	10005910 	.word	0x10005910
 8111d4c:	0811a364 	.word	0x0811a364
 8111d50:	10005914 	.word	0x10005914
 8111d54:	0811a380 	.word	0x0811a380
 8111d58:	0811a3a8 	.word	0x0811a3a8
 8111d5c:	10005918 	.word	0x10005918

08111d60 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8111d60:	b580      	push	{r7, lr}
 8111d62:	b088      	sub	sp, #32
 8111d64:	af00      	add	r7, sp, #0
 8111d66:	6078      	str	r0, [r7, #4]
 8111d68:	460b      	mov	r3, r1
 8111d6a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8111d6c:	887b      	ldrh	r3, [r7, #2]
 8111d6e:	3303      	adds	r3, #3
 8111d70:	b29b      	uxth	r3, r3
 8111d72:	f023 0303 	bic.w	r3, r3, #3
 8111d76:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8111d78:	8bfb      	ldrh	r3, [r7, #30]
 8111d7a:	2b0b      	cmp	r3, #11
 8111d7c:	d801      	bhi.n	8111d82 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8111d7e:	230c      	movs	r3, #12
 8111d80:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8111d82:	8bfb      	ldrh	r3, [r7, #30]
 8111d84:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111d88:	4293      	cmp	r3, r2
 8111d8a:	d803      	bhi.n	8111d94 <mem_trim+0x34>
 8111d8c:	8bfa      	ldrh	r2, [r7, #30]
 8111d8e:	887b      	ldrh	r3, [r7, #2]
 8111d90:	429a      	cmp	r2, r3
 8111d92:	d201      	bcs.n	8111d98 <mem_trim+0x38>
    return NULL;
 8111d94:	2300      	movs	r3, #0
 8111d96:	e0dc      	b.n	8111f52 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8111d98:	4b70      	ldr	r3, [pc, #448]	; (8111f5c <mem_trim+0x1fc>)
 8111d9a:	681b      	ldr	r3, [r3, #0]
 8111d9c:	687a      	ldr	r2, [r7, #4]
 8111d9e:	429a      	cmp	r2, r3
 8111da0:	d304      	bcc.n	8111dac <mem_trim+0x4c>
 8111da2:	4b6f      	ldr	r3, [pc, #444]	; (8111f60 <mem_trim+0x200>)
 8111da4:	681b      	ldr	r3, [r3, #0]
 8111da6:	687a      	ldr	r2, [r7, #4]
 8111da8:	429a      	cmp	r2, r3
 8111daa:	d306      	bcc.n	8111dba <mem_trim+0x5a>
 8111dac:	4b6d      	ldr	r3, [pc, #436]	; (8111f64 <mem_trim+0x204>)
 8111dae:	f240 22d1 	movw	r2, #721	; 0x2d1
 8111db2:	496d      	ldr	r1, [pc, #436]	; (8111f68 <mem_trim+0x208>)
 8111db4:	486d      	ldr	r0, [pc, #436]	; (8111f6c <mem_trim+0x20c>)
 8111db6:	f005 fd07 	bl	81177c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8111dba:	4b68      	ldr	r3, [pc, #416]	; (8111f5c <mem_trim+0x1fc>)
 8111dbc:	681b      	ldr	r3, [r3, #0]
 8111dbe:	687a      	ldr	r2, [r7, #4]
 8111dc0:	429a      	cmp	r2, r3
 8111dc2:	d304      	bcc.n	8111dce <mem_trim+0x6e>
 8111dc4:	4b66      	ldr	r3, [pc, #408]	; (8111f60 <mem_trim+0x200>)
 8111dc6:	681b      	ldr	r3, [r3, #0]
 8111dc8:	687a      	ldr	r2, [r7, #4]
 8111dca:	429a      	cmp	r2, r3
 8111dcc:	d307      	bcc.n	8111dde <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8111dce:	f001 fcd1 	bl	8113774 <sys_arch_protect>
 8111dd2:	60b8      	str	r0, [r7, #8]
 8111dd4:	68b8      	ldr	r0, [r7, #8]
 8111dd6:	f001 fcdb 	bl	8113790 <sys_arch_unprotect>
    return rmem;
 8111dda:	687b      	ldr	r3, [r7, #4]
 8111ddc:	e0b9      	b.n	8111f52 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8111dde:	687b      	ldr	r3, [r7, #4]
 8111de0:	3b08      	subs	r3, #8
 8111de2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8111de4:	69b8      	ldr	r0, [r7, #24]
 8111de6:	f7ff fde7 	bl	81119b8 <mem_to_ptr>
 8111dea:	4603      	mov	r3, r0
 8111dec:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8111dee:	69bb      	ldr	r3, [r7, #24]
 8111df0:	881a      	ldrh	r2, [r3, #0]
 8111df2:	8afb      	ldrh	r3, [r7, #22]
 8111df4:	1ad3      	subs	r3, r2, r3
 8111df6:	b29b      	uxth	r3, r3
 8111df8:	3b08      	subs	r3, #8
 8111dfa:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8111dfc:	8bfa      	ldrh	r2, [r7, #30]
 8111dfe:	8abb      	ldrh	r3, [r7, #20]
 8111e00:	429a      	cmp	r2, r3
 8111e02:	d906      	bls.n	8111e12 <mem_trim+0xb2>
 8111e04:	4b57      	ldr	r3, [pc, #348]	; (8111f64 <mem_trim+0x204>)
 8111e06:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8111e0a:	4959      	ldr	r1, [pc, #356]	; (8111f70 <mem_trim+0x210>)
 8111e0c:	4857      	ldr	r0, [pc, #348]	; (8111f6c <mem_trim+0x20c>)
 8111e0e:	f005 fcdb 	bl	81177c8 <iprintf>
  if (newsize > size) {
 8111e12:	8bfa      	ldrh	r2, [r7, #30]
 8111e14:	8abb      	ldrh	r3, [r7, #20]
 8111e16:	429a      	cmp	r2, r3
 8111e18:	d901      	bls.n	8111e1e <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8111e1a:	2300      	movs	r3, #0
 8111e1c:	e099      	b.n	8111f52 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8111e1e:	8bfa      	ldrh	r2, [r7, #30]
 8111e20:	8abb      	ldrh	r3, [r7, #20]
 8111e22:	429a      	cmp	r2, r3
 8111e24:	d101      	bne.n	8111e2a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8111e26:	687b      	ldr	r3, [r7, #4]
 8111e28:	e093      	b.n	8111f52 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8111e2a:	4852      	ldr	r0, [pc, #328]	; (8111f74 <mem_trim+0x214>)
 8111e2c:	f001 fc60 	bl	81136f0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8111e30:	69bb      	ldr	r3, [r7, #24]
 8111e32:	881b      	ldrh	r3, [r3, #0]
 8111e34:	4618      	mov	r0, r3
 8111e36:	f7ff fdad 	bl	8111994 <ptr_to_mem>
 8111e3a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8111e3c:	693b      	ldr	r3, [r7, #16]
 8111e3e:	791b      	ldrb	r3, [r3, #4]
 8111e40:	2b00      	cmp	r3, #0
 8111e42:	d141      	bne.n	8111ec8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8111e44:	69bb      	ldr	r3, [r7, #24]
 8111e46:	881b      	ldrh	r3, [r3, #0]
 8111e48:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111e4c:	4293      	cmp	r3, r2
 8111e4e:	d106      	bne.n	8111e5e <mem_trim+0xfe>
 8111e50:	4b44      	ldr	r3, [pc, #272]	; (8111f64 <mem_trim+0x204>)
 8111e52:	f240 22f5 	movw	r2, #757	; 0x2f5
 8111e56:	4948      	ldr	r1, [pc, #288]	; (8111f78 <mem_trim+0x218>)
 8111e58:	4844      	ldr	r0, [pc, #272]	; (8111f6c <mem_trim+0x20c>)
 8111e5a:	f005 fcb5 	bl	81177c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8111e5e:	693b      	ldr	r3, [r7, #16]
 8111e60:	881b      	ldrh	r3, [r3, #0]
 8111e62:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8111e64:	8afa      	ldrh	r2, [r7, #22]
 8111e66:	8bfb      	ldrh	r3, [r7, #30]
 8111e68:	4413      	add	r3, r2
 8111e6a:	b29b      	uxth	r3, r3
 8111e6c:	3308      	adds	r3, #8
 8111e6e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8111e70:	4b42      	ldr	r3, [pc, #264]	; (8111f7c <mem_trim+0x21c>)
 8111e72:	681b      	ldr	r3, [r3, #0]
 8111e74:	693a      	ldr	r2, [r7, #16]
 8111e76:	429a      	cmp	r2, r3
 8111e78:	d106      	bne.n	8111e88 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8111e7a:	89fb      	ldrh	r3, [r7, #14]
 8111e7c:	4618      	mov	r0, r3
 8111e7e:	f7ff fd89 	bl	8111994 <ptr_to_mem>
 8111e82:	4603      	mov	r3, r0
 8111e84:	4a3d      	ldr	r2, [pc, #244]	; (8111f7c <mem_trim+0x21c>)
 8111e86:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8111e88:	89fb      	ldrh	r3, [r7, #14]
 8111e8a:	4618      	mov	r0, r3
 8111e8c:	f7ff fd82 	bl	8111994 <ptr_to_mem>
 8111e90:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8111e92:	693b      	ldr	r3, [r7, #16]
 8111e94:	2200      	movs	r2, #0
 8111e96:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8111e98:	693b      	ldr	r3, [r7, #16]
 8111e9a:	89ba      	ldrh	r2, [r7, #12]
 8111e9c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8111e9e:	693b      	ldr	r3, [r7, #16]
 8111ea0:	8afa      	ldrh	r2, [r7, #22]
 8111ea2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8111ea4:	69bb      	ldr	r3, [r7, #24]
 8111ea6:	89fa      	ldrh	r2, [r7, #14]
 8111ea8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8111eaa:	693b      	ldr	r3, [r7, #16]
 8111eac:	881b      	ldrh	r3, [r3, #0]
 8111eae:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111eb2:	4293      	cmp	r3, r2
 8111eb4:	d049      	beq.n	8111f4a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8111eb6:	693b      	ldr	r3, [r7, #16]
 8111eb8:	881b      	ldrh	r3, [r3, #0]
 8111eba:	4618      	mov	r0, r3
 8111ebc:	f7ff fd6a 	bl	8111994 <ptr_to_mem>
 8111ec0:	4602      	mov	r2, r0
 8111ec2:	89fb      	ldrh	r3, [r7, #14]
 8111ec4:	8053      	strh	r3, [r2, #2]
 8111ec6:	e040      	b.n	8111f4a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8111ec8:	8bfb      	ldrh	r3, [r7, #30]
 8111eca:	f103 0214 	add.w	r2, r3, #20
 8111ece:	8abb      	ldrh	r3, [r7, #20]
 8111ed0:	429a      	cmp	r2, r3
 8111ed2:	d83a      	bhi.n	8111f4a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8111ed4:	8afa      	ldrh	r2, [r7, #22]
 8111ed6:	8bfb      	ldrh	r3, [r7, #30]
 8111ed8:	4413      	add	r3, r2
 8111eda:	b29b      	uxth	r3, r3
 8111edc:	3308      	adds	r3, #8
 8111ede:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8111ee0:	69bb      	ldr	r3, [r7, #24]
 8111ee2:	881b      	ldrh	r3, [r3, #0]
 8111ee4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111ee8:	4293      	cmp	r3, r2
 8111eea:	d106      	bne.n	8111efa <mem_trim+0x19a>
 8111eec:	4b1d      	ldr	r3, [pc, #116]	; (8111f64 <mem_trim+0x204>)
 8111eee:	f240 3216 	movw	r2, #790	; 0x316
 8111ef2:	4921      	ldr	r1, [pc, #132]	; (8111f78 <mem_trim+0x218>)
 8111ef4:	481d      	ldr	r0, [pc, #116]	; (8111f6c <mem_trim+0x20c>)
 8111ef6:	f005 fc67 	bl	81177c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8111efa:	89fb      	ldrh	r3, [r7, #14]
 8111efc:	4618      	mov	r0, r3
 8111efe:	f7ff fd49 	bl	8111994 <ptr_to_mem>
 8111f02:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8111f04:	4b1d      	ldr	r3, [pc, #116]	; (8111f7c <mem_trim+0x21c>)
 8111f06:	681b      	ldr	r3, [r3, #0]
 8111f08:	693a      	ldr	r2, [r7, #16]
 8111f0a:	429a      	cmp	r2, r3
 8111f0c:	d202      	bcs.n	8111f14 <mem_trim+0x1b4>
      lfree = mem2;
 8111f0e:	4a1b      	ldr	r2, [pc, #108]	; (8111f7c <mem_trim+0x21c>)
 8111f10:	693b      	ldr	r3, [r7, #16]
 8111f12:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8111f14:	693b      	ldr	r3, [r7, #16]
 8111f16:	2200      	movs	r2, #0
 8111f18:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8111f1a:	69bb      	ldr	r3, [r7, #24]
 8111f1c:	881a      	ldrh	r2, [r3, #0]
 8111f1e:	693b      	ldr	r3, [r7, #16]
 8111f20:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8111f22:	693b      	ldr	r3, [r7, #16]
 8111f24:	8afa      	ldrh	r2, [r7, #22]
 8111f26:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8111f28:	69bb      	ldr	r3, [r7, #24]
 8111f2a:	89fa      	ldrh	r2, [r7, #14]
 8111f2c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8111f2e:	693b      	ldr	r3, [r7, #16]
 8111f30:	881b      	ldrh	r3, [r3, #0]
 8111f32:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111f36:	4293      	cmp	r3, r2
 8111f38:	d007      	beq.n	8111f4a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8111f3a:	693b      	ldr	r3, [r7, #16]
 8111f3c:	881b      	ldrh	r3, [r3, #0]
 8111f3e:	4618      	mov	r0, r3
 8111f40:	f7ff fd28 	bl	8111994 <ptr_to_mem>
 8111f44:	4602      	mov	r2, r0
 8111f46:	89fb      	ldrh	r3, [r7, #14]
 8111f48:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8111f4a:	480a      	ldr	r0, [pc, #40]	; (8111f74 <mem_trim+0x214>)
 8111f4c:	f001 fbdf 	bl	811370e <sys_mutex_unlock>
  return rmem;
 8111f50:	687b      	ldr	r3, [r7, #4]
}
 8111f52:	4618      	mov	r0, r3
 8111f54:	3720      	adds	r7, #32
 8111f56:	46bd      	mov	sp, r7
 8111f58:	bd80      	pop	{r7, pc}
 8111f5a:	bf00      	nop
 8111f5c:	1000590c 	.word	0x1000590c
 8111f60:	10005910 	.word	0x10005910
 8111f64:	0811a218 	.word	0x0811a218
 8111f68:	0811a3dc 	.word	0x0811a3dc
 8111f6c:	0811a298 	.word	0x0811a298
 8111f70:	0811a3f4 	.word	0x0811a3f4
 8111f74:	10005914 	.word	0x10005914
 8111f78:	0811a414 	.word	0x0811a414
 8111f7c:	10005918 	.word	0x10005918

08111f80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8111f80:	b580      	push	{r7, lr}
 8111f82:	b088      	sub	sp, #32
 8111f84:	af00      	add	r7, sp, #0
 8111f86:	4603      	mov	r3, r0
 8111f88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8111f8a:	88fb      	ldrh	r3, [r7, #6]
 8111f8c:	2b00      	cmp	r3, #0
 8111f8e:	d101      	bne.n	8111f94 <mem_malloc+0x14>
    return NULL;
 8111f90:	2300      	movs	r3, #0
 8111f92:	e0e6      	b.n	8112162 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8111f94:	88fb      	ldrh	r3, [r7, #6]
 8111f96:	3303      	adds	r3, #3
 8111f98:	b29b      	uxth	r3, r3
 8111f9a:	f023 0303 	bic.w	r3, r3, #3
 8111f9e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8111fa0:	8bbb      	ldrh	r3, [r7, #28]
 8111fa2:	2b0b      	cmp	r3, #11
 8111fa4:	d801      	bhi.n	8111faa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8111fa6:	230c      	movs	r3, #12
 8111fa8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8111faa:	8bbb      	ldrh	r3, [r7, #28]
 8111fac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8111fb0:	4293      	cmp	r3, r2
 8111fb2:	d803      	bhi.n	8111fbc <mem_malloc+0x3c>
 8111fb4:	8bba      	ldrh	r2, [r7, #28]
 8111fb6:	88fb      	ldrh	r3, [r7, #6]
 8111fb8:	429a      	cmp	r2, r3
 8111fba:	d201      	bcs.n	8111fc0 <mem_malloc+0x40>
    return NULL;
 8111fbc:	2300      	movs	r3, #0
 8111fbe:	e0d0      	b.n	8112162 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8111fc0:	486a      	ldr	r0, [pc, #424]	; (811216c <mem_malloc+0x1ec>)
 8111fc2:	f001 fb95 	bl	81136f0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8111fc6:	4b6a      	ldr	r3, [pc, #424]	; (8112170 <mem_malloc+0x1f0>)
 8111fc8:	681b      	ldr	r3, [r3, #0]
 8111fca:	4618      	mov	r0, r3
 8111fcc:	f7ff fcf4 	bl	81119b8 <mem_to_ptr>
 8111fd0:	4603      	mov	r3, r0
 8111fd2:	83fb      	strh	r3, [r7, #30]
 8111fd4:	e0b9      	b.n	811214a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8111fd6:	8bfb      	ldrh	r3, [r7, #30]
 8111fd8:	4618      	mov	r0, r3
 8111fda:	f7ff fcdb 	bl	8111994 <ptr_to_mem>
 8111fde:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8111fe0:	697b      	ldr	r3, [r7, #20]
 8111fe2:	791b      	ldrb	r3, [r3, #4]
 8111fe4:	2b00      	cmp	r3, #0
 8111fe6:	f040 80a9 	bne.w	811213c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8111fea:	697b      	ldr	r3, [r7, #20]
 8111fec:	881b      	ldrh	r3, [r3, #0]
 8111fee:	461a      	mov	r2, r3
 8111ff0:	8bfb      	ldrh	r3, [r7, #30]
 8111ff2:	1ad3      	subs	r3, r2, r3
 8111ff4:	f1a3 0208 	sub.w	r2, r3, #8
 8111ff8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8111ffa:	429a      	cmp	r2, r3
 8111ffc:	f0c0 809e 	bcc.w	811213c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8112000:	697b      	ldr	r3, [r7, #20]
 8112002:	881b      	ldrh	r3, [r3, #0]
 8112004:	461a      	mov	r2, r3
 8112006:	8bfb      	ldrh	r3, [r7, #30]
 8112008:	1ad3      	subs	r3, r2, r3
 811200a:	f1a3 0208 	sub.w	r2, r3, #8
 811200e:	8bbb      	ldrh	r3, [r7, #28]
 8112010:	3314      	adds	r3, #20
 8112012:	429a      	cmp	r2, r3
 8112014:	d335      	bcc.n	8112082 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8112016:	8bfa      	ldrh	r2, [r7, #30]
 8112018:	8bbb      	ldrh	r3, [r7, #28]
 811201a:	4413      	add	r3, r2
 811201c:	b29b      	uxth	r3, r3
 811201e:	3308      	adds	r3, #8
 8112020:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8112022:	8a7b      	ldrh	r3, [r7, #18]
 8112024:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8112028:	4293      	cmp	r3, r2
 811202a:	d106      	bne.n	811203a <mem_malloc+0xba>
 811202c:	4b51      	ldr	r3, [pc, #324]	; (8112174 <mem_malloc+0x1f4>)
 811202e:	f240 3287 	movw	r2, #903	; 0x387
 8112032:	4951      	ldr	r1, [pc, #324]	; (8112178 <mem_malloc+0x1f8>)
 8112034:	4851      	ldr	r0, [pc, #324]	; (811217c <mem_malloc+0x1fc>)
 8112036:	f005 fbc7 	bl	81177c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 811203a:	8a7b      	ldrh	r3, [r7, #18]
 811203c:	4618      	mov	r0, r3
 811203e:	f7ff fca9 	bl	8111994 <ptr_to_mem>
 8112042:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8112044:	68fb      	ldr	r3, [r7, #12]
 8112046:	2200      	movs	r2, #0
 8112048:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 811204a:	697b      	ldr	r3, [r7, #20]
 811204c:	881a      	ldrh	r2, [r3, #0]
 811204e:	68fb      	ldr	r3, [r7, #12]
 8112050:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8112052:	68fb      	ldr	r3, [r7, #12]
 8112054:	8bfa      	ldrh	r2, [r7, #30]
 8112056:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8112058:	697b      	ldr	r3, [r7, #20]
 811205a:	8a7a      	ldrh	r2, [r7, #18]
 811205c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 811205e:	697b      	ldr	r3, [r7, #20]
 8112060:	2201      	movs	r2, #1
 8112062:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8112064:	68fb      	ldr	r3, [r7, #12]
 8112066:	881b      	ldrh	r3, [r3, #0]
 8112068:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 811206c:	4293      	cmp	r3, r2
 811206e:	d00b      	beq.n	8112088 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8112070:	68fb      	ldr	r3, [r7, #12]
 8112072:	881b      	ldrh	r3, [r3, #0]
 8112074:	4618      	mov	r0, r3
 8112076:	f7ff fc8d 	bl	8111994 <ptr_to_mem>
 811207a:	4602      	mov	r2, r0
 811207c:	8a7b      	ldrh	r3, [r7, #18]
 811207e:	8053      	strh	r3, [r2, #2]
 8112080:	e002      	b.n	8112088 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8112082:	697b      	ldr	r3, [r7, #20]
 8112084:	2201      	movs	r2, #1
 8112086:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8112088:	4b39      	ldr	r3, [pc, #228]	; (8112170 <mem_malloc+0x1f0>)
 811208a:	681b      	ldr	r3, [r3, #0]
 811208c:	697a      	ldr	r2, [r7, #20]
 811208e:	429a      	cmp	r2, r3
 8112090:	d127      	bne.n	81120e2 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8112092:	4b37      	ldr	r3, [pc, #220]	; (8112170 <mem_malloc+0x1f0>)
 8112094:	681b      	ldr	r3, [r3, #0]
 8112096:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8112098:	e005      	b.n	81120a6 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 811209a:	69bb      	ldr	r3, [r7, #24]
 811209c:	881b      	ldrh	r3, [r3, #0]
 811209e:	4618      	mov	r0, r3
 81120a0:	f7ff fc78 	bl	8111994 <ptr_to_mem>
 81120a4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 81120a6:	69bb      	ldr	r3, [r7, #24]
 81120a8:	791b      	ldrb	r3, [r3, #4]
 81120aa:	2b00      	cmp	r3, #0
 81120ac:	d004      	beq.n	81120b8 <mem_malloc+0x138>
 81120ae:	4b34      	ldr	r3, [pc, #208]	; (8112180 <mem_malloc+0x200>)
 81120b0:	681b      	ldr	r3, [r3, #0]
 81120b2:	69ba      	ldr	r2, [r7, #24]
 81120b4:	429a      	cmp	r2, r3
 81120b6:	d1f0      	bne.n	811209a <mem_malloc+0x11a>
          }
          lfree = cur;
 81120b8:	4a2d      	ldr	r2, [pc, #180]	; (8112170 <mem_malloc+0x1f0>)
 81120ba:	69bb      	ldr	r3, [r7, #24]
 81120bc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 81120be:	4b2c      	ldr	r3, [pc, #176]	; (8112170 <mem_malloc+0x1f0>)
 81120c0:	681a      	ldr	r2, [r3, #0]
 81120c2:	4b2f      	ldr	r3, [pc, #188]	; (8112180 <mem_malloc+0x200>)
 81120c4:	681b      	ldr	r3, [r3, #0]
 81120c6:	429a      	cmp	r2, r3
 81120c8:	d00b      	beq.n	81120e2 <mem_malloc+0x162>
 81120ca:	4b29      	ldr	r3, [pc, #164]	; (8112170 <mem_malloc+0x1f0>)
 81120cc:	681b      	ldr	r3, [r3, #0]
 81120ce:	791b      	ldrb	r3, [r3, #4]
 81120d0:	2b00      	cmp	r3, #0
 81120d2:	d006      	beq.n	81120e2 <mem_malloc+0x162>
 81120d4:	4b27      	ldr	r3, [pc, #156]	; (8112174 <mem_malloc+0x1f4>)
 81120d6:	f240 32b5 	movw	r2, #949	; 0x3b5
 81120da:	492a      	ldr	r1, [pc, #168]	; (8112184 <mem_malloc+0x204>)
 81120dc:	4827      	ldr	r0, [pc, #156]	; (811217c <mem_malloc+0x1fc>)
 81120de:	f005 fb73 	bl	81177c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 81120e2:	4822      	ldr	r0, [pc, #136]	; (811216c <mem_malloc+0x1ec>)
 81120e4:	f001 fb13 	bl	811370e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 81120e8:	8bba      	ldrh	r2, [r7, #28]
 81120ea:	697b      	ldr	r3, [r7, #20]
 81120ec:	4413      	add	r3, r2
 81120ee:	3308      	adds	r3, #8
 81120f0:	4a23      	ldr	r2, [pc, #140]	; (8112180 <mem_malloc+0x200>)
 81120f2:	6812      	ldr	r2, [r2, #0]
 81120f4:	4293      	cmp	r3, r2
 81120f6:	d906      	bls.n	8112106 <mem_malloc+0x186>
 81120f8:	4b1e      	ldr	r3, [pc, #120]	; (8112174 <mem_malloc+0x1f4>)
 81120fa:	f240 32b9 	movw	r2, #953	; 0x3b9
 81120fe:	4922      	ldr	r1, [pc, #136]	; (8112188 <mem_malloc+0x208>)
 8112100:	481e      	ldr	r0, [pc, #120]	; (811217c <mem_malloc+0x1fc>)
 8112102:	f005 fb61 	bl	81177c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8112106:	697b      	ldr	r3, [r7, #20]
 8112108:	f003 0303 	and.w	r3, r3, #3
 811210c:	2b00      	cmp	r3, #0
 811210e:	d006      	beq.n	811211e <mem_malloc+0x19e>
 8112110:	4b18      	ldr	r3, [pc, #96]	; (8112174 <mem_malloc+0x1f4>)
 8112112:	f240 32bb 	movw	r2, #955	; 0x3bb
 8112116:	491d      	ldr	r1, [pc, #116]	; (811218c <mem_malloc+0x20c>)
 8112118:	4818      	ldr	r0, [pc, #96]	; (811217c <mem_malloc+0x1fc>)
 811211a:	f005 fb55 	bl	81177c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 811211e:	697b      	ldr	r3, [r7, #20]
 8112120:	f003 0303 	and.w	r3, r3, #3
 8112124:	2b00      	cmp	r3, #0
 8112126:	d006      	beq.n	8112136 <mem_malloc+0x1b6>
 8112128:	4b12      	ldr	r3, [pc, #72]	; (8112174 <mem_malloc+0x1f4>)
 811212a:	f240 32bd 	movw	r2, #957	; 0x3bd
 811212e:	4918      	ldr	r1, [pc, #96]	; (8112190 <mem_malloc+0x210>)
 8112130:	4812      	ldr	r0, [pc, #72]	; (811217c <mem_malloc+0x1fc>)
 8112132:	f005 fb49 	bl	81177c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8112136:	697b      	ldr	r3, [r7, #20]
 8112138:	3308      	adds	r3, #8
 811213a:	e012      	b.n	8112162 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 811213c:	8bfb      	ldrh	r3, [r7, #30]
 811213e:	4618      	mov	r0, r3
 8112140:	f7ff fc28 	bl	8111994 <ptr_to_mem>
 8112144:	4603      	mov	r3, r0
 8112146:	881b      	ldrh	r3, [r3, #0]
 8112148:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 811214a:	8bfa      	ldrh	r2, [r7, #30]
 811214c:	8bbb      	ldrh	r3, [r7, #28]
 811214e:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 8112152:	3328      	adds	r3, #40	; 0x28
 8112154:	429a      	cmp	r2, r3
 8112156:	f4ff af3e 	bcc.w	8111fd6 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 811215a:	4804      	ldr	r0, [pc, #16]	; (811216c <mem_malloc+0x1ec>)
 811215c:	f001 fad7 	bl	811370e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8112160:	2300      	movs	r3, #0
}
 8112162:	4618      	mov	r0, r3
 8112164:	3720      	adds	r7, #32
 8112166:	46bd      	mov	sp, r7
 8112168:	bd80      	pop	{r7, pc}
 811216a:	bf00      	nop
 811216c:	10005914 	.word	0x10005914
 8112170:	10005918 	.word	0x10005918
 8112174:	0811a218 	.word	0x0811a218
 8112178:	0811a414 	.word	0x0811a414
 811217c:	0811a298 	.word	0x0811a298
 8112180:	10005910 	.word	0x10005910
 8112184:	0811a428 	.word	0x0811a428
 8112188:	0811a444 	.word	0x0811a444
 811218c:	0811a474 	.word	0x0811a474
 8112190:	0811a4a4 	.word	0x0811a4a4

08112194 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8112194:	b480      	push	{r7}
 8112196:	b085      	sub	sp, #20
 8112198:	af00      	add	r7, sp, #0
 811219a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 811219c:	687b      	ldr	r3, [r7, #4]
 811219e:	689b      	ldr	r3, [r3, #8]
 81121a0:	2200      	movs	r2, #0
 81121a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 81121a4:	687b      	ldr	r3, [r7, #4]
 81121a6:	685b      	ldr	r3, [r3, #4]
 81121a8:	3303      	adds	r3, #3
 81121aa:	f023 0303 	bic.w	r3, r3, #3
 81121ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 81121b0:	2300      	movs	r3, #0
 81121b2:	60fb      	str	r3, [r7, #12]
 81121b4:	e011      	b.n	81121da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 81121b6:	687b      	ldr	r3, [r7, #4]
 81121b8:	689b      	ldr	r3, [r3, #8]
 81121ba:	681a      	ldr	r2, [r3, #0]
 81121bc:	68bb      	ldr	r3, [r7, #8]
 81121be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 81121c0:	687b      	ldr	r3, [r7, #4]
 81121c2:	689b      	ldr	r3, [r3, #8]
 81121c4:	68ba      	ldr	r2, [r7, #8]
 81121c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 81121c8:	687b      	ldr	r3, [r7, #4]
 81121ca:	881b      	ldrh	r3, [r3, #0]
 81121cc:	461a      	mov	r2, r3
 81121ce:	68bb      	ldr	r3, [r7, #8]
 81121d0:	4413      	add	r3, r2
 81121d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 81121d4:	68fb      	ldr	r3, [r7, #12]
 81121d6:	3301      	adds	r3, #1
 81121d8:	60fb      	str	r3, [r7, #12]
 81121da:	687b      	ldr	r3, [r7, #4]
 81121dc:	885b      	ldrh	r3, [r3, #2]
 81121de:	461a      	mov	r2, r3
 81121e0:	68fb      	ldr	r3, [r7, #12]
 81121e2:	4293      	cmp	r3, r2
 81121e4:	dbe7      	blt.n	81121b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 81121e6:	bf00      	nop
 81121e8:	bf00      	nop
 81121ea:	3714      	adds	r7, #20
 81121ec:	46bd      	mov	sp, r7
 81121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81121f2:	4770      	bx	lr

081121f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 81121f4:	b580      	push	{r7, lr}
 81121f6:	b082      	sub	sp, #8
 81121f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 81121fa:	2300      	movs	r3, #0
 81121fc:	80fb      	strh	r3, [r7, #6]
 81121fe:	e009      	b.n	8112214 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8112200:	88fb      	ldrh	r3, [r7, #6]
 8112202:	4a08      	ldr	r2, [pc, #32]	; (8112224 <memp_init+0x30>)
 8112204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8112208:	4618      	mov	r0, r3
 811220a:	f7ff ffc3 	bl	8112194 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811220e:	88fb      	ldrh	r3, [r7, #6]
 8112210:	3301      	adds	r3, #1
 8112212:	80fb      	strh	r3, [r7, #6]
 8112214:	88fb      	ldrh	r3, [r7, #6]
 8112216:	2b09      	cmp	r3, #9
 8112218:	d9f2      	bls.n	8112200 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 811221a:	bf00      	nop
 811221c:	bf00      	nop
 811221e:	3708      	adds	r7, #8
 8112220:	46bd      	mov	sp, r7
 8112222:	bd80      	pop	{r7, pc}
 8112224:	0811b760 	.word	0x0811b760

08112228 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8112228:	b580      	push	{r7, lr}
 811222a:	b084      	sub	sp, #16
 811222c:	af00      	add	r7, sp, #0
 811222e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8112230:	f001 faa0 	bl	8113774 <sys_arch_protect>
 8112234:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8112236:	687b      	ldr	r3, [r7, #4]
 8112238:	689b      	ldr	r3, [r3, #8]
 811223a:	681b      	ldr	r3, [r3, #0]
 811223c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 811223e:	68bb      	ldr	r3, [r7, #8]
 8112240:	2b00      	cmp	r3, #0
 8112242:	d015      	beq.n	8112270 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8112244:	687b      	ldr	r3, [r7, #4]
 8112246:	689b      	ldr	r3, [r3, #8]
 8112248:	68ba      	ldr	r2, [r7, #8]
 811224a:	6812      	ldr	r2, [r2, #0]
 811224c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 811224e:	68bb      	ldr	r3, [r7, #8]
 8112250:	f003 0303 	and.w	r3, r3, #3
 8112254:	2b00      	cmp	r3, #0
 8112256:	d006      	beq.n	8112266 <do_memp_malloc_pool+0x3e>
 8112258:	4b09      	ldr	r3, [pc, #36]	; (8112280 <do_memp_malloc_pool+0x58>)
 811225a:	f44f 728c 	mov.w	r2, #280	; 0x118
 811225e:	4909      	ldr	r1, [pc, #36]	; (8112284 <do_memp_malloc_pool+0x5c>)
 8112260:	4809      	ldr	r0, [pc, #36]	; (8112288 <do_memp_malloc_pool+0x60>)
 8112262:	f005 fab1 	bl	81177c8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8112266:	68f8      	ldr	r0, [r7, #12]
 8112268:	f001 fa92 	bl	8113790 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 811226c:	68bb      	ldr	r3, [r7, #8]
 811226e:	e003      	b.n	8112278 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8112270:	68f8      	ldr	r0, [r7, #12]
 8112272:	f001 fa8d 	bl	8113790 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8112276:	2300      	movs	r3, #0
}
 8112278:	4618      	mov	r0, r3
 811227a:	3710      	adds	r7, #16
 811227c:	46bd      	mov	sp, r7
 811227e:	bd80      	pop	{r7, pc}
 8112280:	0811a4c8 	.word	0x0811a4c8
 8112284:	0811a534 	.word	0x0811a534
 8112288:	0811a558 	.word	0x0811a558

0811228c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 811228c:	b580      	push	{r7, lr}
 811228e:	b082      	sub	sp, #8
 8112290:	af00      	add	r7, sp, #0
 8112292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8112294:	687b      	ldr	r3, [r7, #4]
 8112296:	2b00      	cmp	r3, #0
 8112298:	d106      	bne.n	81122a8 <memp_malloc_pool+0x1c>
 811229a:	4b0a      	ldr	r3, [pc, #40]	; (81122c4 <memp_malloc_pool+0x38>)
 811229c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 81122a0:	4909      	ldr	r1, [pc, #36]	; (81122c8 <memp_malloc_pool+0x3c>)
 81122a2:	480a      	ldr	r0, [pc, #40]	; (81122cc <memp_malloc_pool+0x40>)
 81122a4:	f005 fa90 	bl	81177c8 <iprintf>
  if (desc == NULL) {
 81122a8:	687b      	ldr	r3, [r7, #4]
 81122aa:	2b00      	cmp	r3, #0
 81122ac:	d101      	bne.n	81122b2 <memp_malloc_pool+0x26>
    return NULL;
 81122ae:	2300      	movs	r3, #0
 81122b0:	e003      	b.n	81122ba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 81122b2:	6878      	ldr	r0, [r7, #4]
 81122b4:	f7ff ffb8 	bl	8112228 <do_memp_malloc_pool>
 81122b8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 81122ba:	4618      	mov	r0, r3
 81122bc:	3708      	adds	r7, #8
 81122be:	46bd      	mov	sp, r7
 81122c0:	bd80      	pop	{r7, pc}
 81122c2:	bf00      	nop
 81122c4:	0811a4c8 	.word	0x0811a4c8
 81122c8:	0811a580 	.word	0x0811a580
 81122cc:	0811a558 	.word	0x0811a558

081122d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 81122d0:	b580      	push	{r7, lr}
 81122d2:	b084      	sub	sp, #16
 81122d4:	af00      	add	r7, sp, #0
 81122d6:	4603      	mov	r3, r0
 81122d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 81122da:	79fb      	ldrb	r3, [r7, #7]
 81122dc:	2b09      	cmp	r3, #9
 81122de:	d908      	bls.n	81122f2 <memp_malloc+0x22>
 81122e0:	4b0a      	ldr	r3, [pc, #40]	; (811230c <memp_malloc+0x3c>)
 81122e2:	f240 1257 	movw	r2, #343	; 0x157
 81122e6:	490a      	ldr	r1, [pc, #40]	; (8112310 <memp_malloc+0x40>)
 81122e8:	480a      	ldr	r0, [pc, #40]	; (8112314 <memp_malloc+0x44>)
 81122ea:	f005 fa6d 	bl	81177c8 <iprintf>
 81122ee:	2300      	movs	r3, #0
 81122f0:	e008      	b.n	8112304 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 81122f2:	79fb      	ldrb	r3, [r7, #7]
 81122f4:	4a08      	ldr	r2, [pc, #32]	; (8112318 <memp_malloc+0x48>)
 81122f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81122fa:	4618      	mov	r0, r3
 81122fc:	f7ff ff94 	bl	8112228 <do_memp_malloc_pool>
 8112300:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8112302:	68fb      	ldr	r3, [r7, #12]
}
 8112304:	4618      	mov	r0, r3
 8112306:	3710      	adds	r7, #16
 8112308:	46bd      	mov	sp, r7
 811230a:	bd80      	pop	{r7, pc}
 811230c:	0811a4c8 	.word	0x0811a4c8
 8112310:	0811a594 	.word	0x0811a594
 8112314:	0811a558 	.word	0x0811a558
 8112318:	0811b760 	.word	0x0811b760

0811231c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 811231c:	b580      	push	{r7, lr}
 811231e:	b084      	sub	sp, #16
 8112320:	af00      	add	r7, sp, #0
 8112322:	6078      	str	r0, [r7, #4]
 8112324:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8112326:	683b      	ldr	r3, [r7, #0]
 8112328:	f003 0303 	and.w	r3, r3, #3
 811232c:	2b00      	cmp	r3, #0
 811232e:	d006      	beq.n	811233e <do_memp_free_pool+0x22>
 8112330:	4b0d      	ldr	r3, [pc, #52]	; (8112368 <do_memp_free_pool+0x4c>)
 8112332:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8112336:	490d      	ldr	r1, [pc, #52]	; (811236c <do_memp_free_pool+0x50>)
 8112338:	480d      	ldr	r0, [pc, #52]	; (8112370 <do_memp_free_pool+0x54>)
 811233a:	f005 fa45 	bl	81177c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 811233e:	683b      	ldr	r3, [r7, #0]
 8112340:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8112342:	f001 fa17 	bl	8113774 <sys_arch_protect>
 8112346:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8112348:	687b      	ldr	r3, [r7, #4]
 811234a:	689b      	ldr	r3, [r3, #8]
 811234c:	681a      	ldr	r2, [r3, #0]
 811234e:	68fb      	ldr	r3, [r7, #12]
 8112350:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8112352:	687b      	ldr	r3, [r7, #4]
 8112354:	689b      	ldr	r3, [r3, #8]
 8112356:	68fa      	ldr	r2, [r7, #12]
 8112358:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 811235a:	68b8      	ldr	r0, [r7, #8]
 811235c:	f001 fa18 	bl	8113790 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8112360:	bf00      	nop
 8112362:	3710      	adds	r7, #16
 8112364:	46bd      	mov	sp, r7
 8112366:	bd80      	pop	{r7, pc}
 8112368:	0811a4c8 	.word	0x0811a4c8
 811236c:	0811a5b4 	.word	0x0811a5b4
 8112370:	0811a558 	.word	0x0811a558

08112374 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8112374:	b580      	push	{r7, lr}
 8112376:	b082      	sub	sp, #8
 8112378:	af00      	add	r7, sp, #0
 811237a:	6078      	str	r0, [r7, #4]
 811237c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811237e:	687b      	ldr	r3, [r7, #4]
 8112380:	2b00      	cmp	r3, #0
 8112382:	d106      	bne.n	8112392 <memp_free_pool+0x1e>
 8112384:	4b0a      	ldr	r3, [pc, #40]	; (81123b0 <memp_free_pool+0x3c>)
 8112386:	f240 1295 	movw	r2, #405	; 0x195
 811238a:	490a      	ldr	r1, [pc, #40]	; (81123b4 <memp_free_pool+0x40>)
 811238c:	480a      	ldr	r0, [pc, #40]	; (81123b8 <memp_free_pool+0x44>)
 811238e:	f005 fa1b 	bl	81177c8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8112392:	687b      	ldr	r3, [r7, #4]
 8112394:	2b00      	cmp	r3, #0
 8112396:	d007      	beq.n	81123a8 <memp_free_pool+0x34>
 8112398:	683b      	ldr	r3, [r7, #0]
 811239a:	2b00      	cmp	r3, #0
 811239c:	d004      	beq.n	81123a8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 811239e:	6839      	ldr	r1, [r7, #0]
 81123a0:	6878      	ldr	r0, [r7, #4]
 81123a2:	f7ff ffbb 	bl	811231c <do_memp_free_pool>
 81123a6:	e000      	b.n	81123aa <memp_free_pool+0x36>
    return;
 81123a8:	bf00      	nop
}
 81123aa:	3708      	adds	r7, #8
 81123ac:	46bd      	mov	sp, r7
 81123ae:	bd80      	pop	{r7, pc}
 81123b0:	0811a4c8 	.word	0x0811a4c8
 81123b4:	0811a580 	.word	0x0811a580
 81123b8:	0811a558 	.word	0x0811a558

081123bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 81123bc:	b580      	push	{r7, lr}
 81123be:	b082      	sub	sp, #8
 81123c0:	af00      	add	r7, sp, #0
 81123c2:	4603      	mov	r3, r0
 81123c4:	6039      	str	r1, [r7, #0]
 81123c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 81123c8:	79fb      	ldrb	r3, [r7, #7]
 81123ca:	2b09      	cmp	r3, #9
 81123cc:	d907      	bls.n	81123de <memp_free+0x22>
 81123ce:	4b0c      	ldr	r3, [pc, #48]	; (8112400 <memp_free+0x44>)
 81123d0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 81123d4:	490b      	ldr	r1, [pc, #44]	; (8112404 <memp_free+0x48>)
 81123d6:	480c      	ldr	r0, [pc, #48]	; (8112408 <memp_free+0x4c>)
 81123d8:	f005 f9f6 	bl	81177c8 <iprintf>
 81123dc:	e00c      	b.n	81123f8 <memp_free+0x3c>

  if (mem == NULL) {
 81123de:	683b      	ldr	r3, [r7, #0]
 81123e0:	2b00      	cmp	r3, #0
 81123e2:	d008      	beq.n	81123f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 81123e4:	79fb      	ldrb	r3, [r7, #7]
 81123e6:	4a09      	ldr	r2, [pc, #36]	; (811240c <memp_free+0x50>)
 81123e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81123ec:	6839      	ldr	r1, [r7, #0]
 81123ee:	4618      	mov	r0, r3
 81123f0:	f7ff ff94 	bl	811231c <do_memp_free_pool>
 81123f4:	e000      	b.n	81123f8 <memp_free+0x3c>
    return;
 81123f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 81123f8:	3708      	adds	r7, #8
 81123fa:	46bd      	mov	sp, r7
 81123fc:	bd80      	pop	{r7, pc}
 81123fe:	bf00      	nop
 8112400:	0811a4c8 	.word	0x0811a4c8
 8112404:	0811a5d4 	.word	0x0811a5d4
 8112408:	0811a558 	.word	0x0811a558
 811240c:	0811b760 	.word	0x0811b760

08112410 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8112410:	b480      	push	{r7}
 8112412:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8112414:	bf00      	nop
 8112416:	46bd      	mov	sp, r7
 8112418:	f85d 7b04 	ldr.w	r7, [sp], #4
 811241c:	4770      	bx	lr
	...

08112420 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8112420:	b580      	push	{r7, lr}
 8112422:	b086      	sub	sp, #24
 8112424:	af00      	add	r7, sp, #0
 8112426:	60f8      	str	r0, [r7, #12]
 8112428:	60b9      	str	r1, [r7, #8]
 811242a:	607a      	str	r2, [r7, #4]
 811242c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 811242e:	68fb      	ldr	r3, [r7, #12]
 8112430:	2b00      	cmp	r3, #0
 8112432:	d108      	bne.n	8112446 <netif_add+0x26>
 8112434:	4b57      	ldr	r3, [pc, #348]	; (8112594 <netif_add+0x174>)
 8112436:	f240 1227 	movw	r2, #295	; 0x127
 811243a:	4957      	ldr	r1, [pc, #348]	; (8112598 <netif_add+0x178>)
 811243c:	4857      	ldr	r0, [pc, #348]	; (811259c <netif_add+0x17c>)
 811243e:	f005 f9c3 	bl	81177c8 <iprintf>
 8112442:	2300      	movs	r3, #0
 8112444:	e0a2      	b.n	811258c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8112446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112448:	2b00      	cmp	r3, #0
 811244a:	d108      	bne.n	811245e <netif_add+0x3e>
 811244c:	4b51      	ldr	r3, [pc, #324]	; (8112594 <netif_add+0x174>)
 811244e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8112452:	4953      	ldr	r1, [pc, #332]	; (81125a0 <netif_add+0x180>)
 8112454:	4851      	ldr	r0, [pc, #324]	; (811259c <netif_add+0x17c>)
 8112456:	f005 f9b7 	bl	81177c8 <iprintf>
 811245a:	2300      	movs	r3, #0
 811245c:	e096      	b.n	811258c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 811245e:	68bb      	ldr	r3, [r7, #8]
 8112460:	2b00      	cmp	r3, #0
 8112462:	d101      	bne.n	8112468 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8112464:	4b4f      	ldr	r3, [pc, #316]	; (81125a4 <netif_add+0x184>)
 8112466:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8112468:	687b      	ldr	r3, [r7, #4]
 811246a:	2b00      	cmp	r3, #0
 811246c:	d101      	bne.n	8112472 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 811246e:	4b4d      	ldr	r3, [pc, #308]	; (81125a4 <netif_add+0x184>)
 8112470:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8112472:	683b      	ldr	r3, [r7, #0]
 8112474:	2b00      	cmp	r3, #0
 8112476:	d101      	bne.n	811247c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8112478:	4b4a      	ldr	r3, [pc, #296]	; (81125a4 <netif_add+0x184>)
 811247a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 811247c:	68fb      	ldr	r3, [r7, #12]
 811247e:	2200      	movs	r2, #0
 8112480:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8112482:	68fb      	ldr	r3, [r7, #12]
 8112484:	2200      	movs	r2, #0
 8112486:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8112488:	68fb      	ldr	r3, [r7, #12]
 811248a:	2200      	movs	r2, #0
 811248c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 811248e:	68fb      	ldr	r3, [r7, #12]
 8112490:	4a45      	ldr	r2, [pc, #276]	; (81125a8 <netif_add+0x188>)
 8112492:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8112494:	68fb      	ldr	r3, [r7, #12]
 8112496:	2200      	movs	r2, #0
 8112498:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 811249a:	68fb      	ldr	r3, [r7, #12]
 811249c:	2200      	movs	r2, #0
 811249e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 81124a2:	68fb      	ldr	r3, [r7, #12]
 81124a4:	2200      	movs	r2, #0
 81124a6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 81124a8:	68fb      	ldr	r3, [r7, #12]
 81124aa:	6a3a      	ldr	r2, [r7, #32]
 81124ac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 81124ae:	4b3f      	ldr	r3, [pc, #252]	; (81125ac <netif_add+0x18c>)
 81124b0:	781a      	ldrb	r2, [r3, #0]
 81124b2:	68fb      	ldr	r3, [r7, #12]
 81124b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 81124b8:	68fb      	ldr	r3, [r7, #12]
 81124ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81124bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 81124be:	683b      	ldr	r3, [r7, #0]
 81124c0:	687a      	ldr	r2, [r7, #4]
 81124c2:	68b9      	ldr	r1, [r7, #8]
 81124c4:	68f8      	ldr	r0, [r7, #12]
 81124c6:	f000 f90f 	bl	81126e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 81124ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81124cc:	68f8      	ldr	r0, [r7, #12]
 81124ce:	4798      	blx	r3
 81124d0:	4603      	mov	r3, r0
 81124d2:	2b00      	cmp	r3, #0
 81124d4:	d001      	beq.n	81124da <netif_add+0xba>
    return NULL;
 81124d6:	2300      	movs	r3, #0
 81124d8:	e058      	b.n	811258c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 81124da:	68fb      	ldr	r3, [r7, #12]
 81124dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81124e0:	2bff      	cmp	r3, #255	; 0xff
 81124e2:	d103      	bne.n	81124ec <netif_add+0xcc>
        netif->num = 0;
 81124e4:	68fb      	ldr	r3, [r7, #12]
 81124e6:	2200      	movs	r2, #0
 81124e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 81124ec:	2300      	movs	r3, #0
 81124ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 81124f0:	4b2f      	ldr	r3, [pc, #188]	; (81125b0 <netif_add+0x190>)
 81124f2:	681b      	ldr	r3, [r3, #0]
 81124f4:	617b      	str	r3, [r7, #20]
 81124f6:	e02b      	b.n	8112550 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 81124f8:	697a      	ldr	r2, [r7, #20]
 81124fa:	68fb      	ldr	r3, [r7, #12]
 81124fc:	429a      	cmp	r2, r3
 81124fe:	d106      	bne.n	811250e <netif_add+0xee>
 8112500:	4b24      	ldr	r3, [pc, #144]	; (8112594 <netif_add+0x174>)
 8112502:	f240 128b 	movw	r2, #395	; 0x18b
 8112506:	492b      	ldr	r1, [pc, #172]	; (81125b4 <netif_add+0x194>)
 8112508:	4824      	ldr	r0, [pc, #144]	; (811259c <netif_add+0x17c>)
 811250a:	f005 f95d 	bl	81177c8 <iprintf>
        num_netifs++;
 811250e:	693b      	ldr	r3, [r7, #16]
 8112510:	3301      	adds	r3, #1
 8112512:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8112514:	693b      	ldr	r3, [r7, #16]
 8112516:	2bff      	cmp	r3, #255	; 0xff
 8112518:	dd06      	ble.n	8112528 <netif_add+0x108>
 811251a:	4b1e      	ldr	r3, [pc, #120]	; (8112594 <netif_add+0x174>)
 811251c:	f240 128d 	movw	r2, #397	; 0x18d
 8112520:	4925      	ldr	r1, [pc, #148]	; (81125b8 <netif_add+0x198>)
 8112522:	481e      	ldr	r0, [pc, #120]	; (811259c <netif_add+0x17c>)
 8112524:	f005 f950 	bl	81177c8 <iprintf>
        if (netif2->num == netif->num) {
 8112528:	697b      	ldr	r3, [r7, #20]
 811252a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 811252e:	68fb      	ldr	r3, [r7, #12]
 8112530:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8112534:	429a      	cmp	r2, r3
 8112536:	d108      	bne.n	811254a <netif_add+0x12a>
          netif->num++;
 8112538:	68fb      	ldr	r3, [r7, #12]
 811253a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 811253e:	3301      	adds	r3, #1
 8112540:	b2da      	uxtb	r2, r3
 8112542:	68fb      	ldr	r3, [r7, #12]
 8112544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8112548:	e005      	b.n	8112556 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811254a:	697b      	ldr	r3, [r7, #20]
 811254c:	681b      	ldr	r3, [r3, #0]
 811254e:	617b      	str	r3, [r7, #20]
 8112550:	697b      	ldr	r3, [r7, #20]
 8112552:	2b00      	cmp	r3, #0
 8112554:	d1d0      	bne.n	81124f8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8112556:	697b      	ldr	r3, [r7, #20]
 8112558:	2b00      	cmp	r3, #0
 811255a:	d1be      	bne.n	81124da <netif_add+0xba>
  }
  if (netif->num == 254) {
 811255c:	68fb      	ldr	r3, [r7, #12]
 811255e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8112562:	2bfe      	cmp	r3, #254	; 0xfe
 8112564:	d103      	bne.n	811256e <netif_add+0x14e>
    netif_num = 0;
 8112566:	4b11      	ldr	r3, [pc, #68]	; (81125ac <netif_add+0x18c>)
 8112568:	2200      	movs	r2, #0
 811256a:	701a      	strb	r2, [r3, #0]
 811256c:	e006      	b.n	811257c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 811256e:	68fb      	ldr	r3, [r7, #12]
 8112570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8112574:	3301      	adds	r3, #1
 8112576:	b2da      	uxtb	r2, r3
 8112578:	4b0c      	ldr	r3, [pc, #48]	; (81125ac <netif_add+0x18c>)
 811257a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 811257c:	4b0c      	ldr	r3, [pc, #48]	; (81125b0 <netif_add+0x190>)
 811257e:	681a      	ldr	r2, [r3, #0]
 8112580:	68fb      	ldr	r3, [r7, #12]
 8112582:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8112584:	4a0a      	ldr	r2, [pc, #40]	; (81125b0 <netif_add+0x190>)
 8112586:	68fb      	ldr	r3, [r7, #12]
 8112588:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 811258a:	68fb      	ldr	r3, [r7, #12]
}
 811258c:	4618      	mov	r0, r3
 811258e:	3718      	adds	r7, #24
 8112590:	46bd      	mov	sp, r7
 8112592:	bd80      	pop	{r7, pc}
 8112594:	0811a5f0 	.word	0x0811a5f0
 8112598:	0811a6bc 	.word	0x0811a6bc
 811259c:	0811a678 	.word	0x0811a678
 81125a0:	0811a6d8 	.word	0x0811a6d8
 81125a4:	0811b6e4 	.word	0x0811b6e4
 81125a8:	081129c3 	.word	0x081129c3
 81125ac:	10005944 	.word	0x10005944
 81125b0:	100087cc 	.word	0x100087cc
 81125b4:	0811a6fc 	.word	0x0811a6fc
 81125b8:	0811a710 	.word	0x0811a710

081125bc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 81125bc:	b580      	push	{r7, lr}
 81125be:	b082      	sub	sp, #8
 81125c0:	af00      	add	r7, sp, #0
 81125c2:	6078      	str	r0, [r7, #4]
 81125c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 81125c6:	6839      	ldr	r1, [r7, #0]
 81125c8:	6878      	ldr	r0, [r7, #4]
 81125ca:	f002 f821 	bl	8114610 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 81125ce:	bf00      	nop
 81125d0:	3708      	adds	r7, #8
 81125d2:	46bd      	mov	sp, r7
 81125d4:	bd80      	pop	{r7, pc}
	...

081125d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 81125d8:	b580      	push	{r7, lr}
 81125da:	b086      	sub	sp, #24
 81125dc:	af00      	add	r7, sp, #0
 81125de:	60f8      	str	r0, [r7, #12]
 81125e0:	60b9      	str	r1, [r7, #8]
 81125e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 81125e4:	68bb      	ldr	r3, [r7, #8]
 81125e6:	2b00      	cmp	r3, #0
 81125e8:	d106      	bne.n	81125f8 <netif_do_set_ipaddr+0x20>
 81125ea:	4b1d      	ldr	r3, [pc, #116]	; (8112660 <netif_do_set_ipaddr+0x88>)
 81125ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 81125f0:	491c      	ldr	r1, [pc, #112]	; (8112664 <netif_do_set_ipaddr+0x8c>)
 81125f2:	481d      	ldr	r0, [pc, #116]	; (8112668 <netif_do_set_ipaddr+0x90>)
 81125f4:	f005 f8e8 	bl	81177c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 81125f8:	687b      	ldr	r3, [r7, #4]
 81125fa:	2b00      	cmp	r3, #0
 81125fc:	d106      	bne.n	811260c <netif_do_set_ipaddr+0x34>
 81125fe:	4b18      	ldr	r3, [pc, #96]	; (8112660 <netif_do_set_ipaddr+0x88>)
 8112600:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8112604:	4917      	ldr	r1, [pc, #92]	; (8112664 <netif_do_set_ipaddr+0x8c>)
 8112606:	4818      	ldr	r0, [pc, #96]	; (8112668 <netif_do_set_ipaddr+0x90>)
 8112608:	f005 f8de 	bl	81177c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 811260c:	68bb      	ldr	r3, [r7, #8]
 811260e:	681a      	ldr	r2, [r3, #0]
 8112610:	68fb      	ldr	r3, [r7, #12]
 8112612:	3304      	adds	r3, #4
 8112614:	681b      	ldr	r3, [r3, #0]
 8112616:	429a      	cmp	r2, r3
 8112618:	d01c      	beq.n	8112654 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 811261a:	68bb      	ldr	r3, [r7, #8]
 811261c:	681b      	ldr	r3, [r3, #0]
 811261e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8112620:	68fb      	ldr	r3, [r7, #12]
 8112622:	3304      	adds	r3, #4
 8112624:	681a      	ldr	r2, [r3, #0]
 8112626:	687b      	ldr	r3, [r7, #4]
 8112628:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 811262a:	f107 0314 	add.w	r3, r7, #20
 811262e:	4619      	mov	r1, r3
 8112630:	6878      	ldr	r0, [r7, #4]
 8112632:	f7ff ffc3 	bl	81125bc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8112636:	68bb      	ldr	r3, [r7, #8]
 8112638:	2b00      	cmp	r3, #0
 811263a:	d002      	beq.n	8112642 <netif_do_set_ipaddr+0x6a>
 811263c:	68bb      	ldr	r3, [r7, #8]
 811263e:	681b      	ldr	r3, [r3, #0]
 8112640:	e000      	b.n	8112644 <netif_do_set_ipaddr+0x6c>
 8112642:	2300      	movs	r3, #0
 8112644:	68fa      	ldr	r2, [r7, #12]
 8112646:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8112648:	2101      	movs	r1, #1
 811264a:	68f8      	ldr	r0, [r7, #12]
 811264c:	f000 f8d2 	bl	81127f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8112650:	2301      	movs	r3, #1
 8112652:	e000      	b.n	8112656 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8112654:	2300      	movs	r3, #0
}
 8112656:	4618      	mov	r0, r3
 8112658:	3718      	adds	r7, #24
 811265a:	46bd      	mov	sp, r7
 811265c:	bd80      	pop	{r7, pc}
 811265e:	bf00      	nop
 8112660:	0811a5f0 	.word	0x0811a5f0
 8112664:	0811a740 	.word	0x0811a740
 8112668:	0811a678 	.word	0x0811a678

0811266c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 811266c:	b480      	push	{r7}
 811266e:	b085      	sub	sp, #20
 8112670:	af00      	add	r7, sp, #0
 8112672:	60f8      	str	r0, [r7, #12]
 8112674:	60b9      	str	r1, [r7, #8]
 8112676:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8112678:	68bb      	ldr	r3, [r7, #8]
 811267a:	681a      	ldr	r2, [r3, #0]
 811267c:	68fb      	ldr	r3, [r7, #12]
 811267e:	3308      	adds	r3, #8
 8112680:	681b      	ldr	r3, [r3, #0]
 8112682:	429a      	cmp	r2, r3
 8112684:	d00a      	beq.n	811269c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8112686:	68bb      	ldr	r3, [r7, #8]
 8112688:	2b00      	cmp	r3, #0
 811268a:	d002      	beq.n	8112692 <netif_do_set_netmask+0x26>
 811268c:	68bb      	ldr	r3, [r7, #8]
 811268e:	681b      	ldr	r3, [r3, #0]
 8112690:	e000      	b.n	8112694 <netif_do_set_netmask+0x28>
 8112692:	2300      	movs	r3, #0
 8112694:	68fa      	ldr	r2, [r7, #12]
 8112696:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8112698:	2301      	movs	r3, #1
 811269a:	e000      	b.n	811269e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 811269c:	2300      	movs	r3, #0
}
 811269e:	4618      	mov	r0, r3
 81126a0:	3714      	adds	r7, #20
 81126a2:	46bd      	mov	sp, r7
 81126a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81126a8:	4770      	bx	lr

081126aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 81126aa:	b480      	push	{r7}
 81126ac:	b085      	sub	sp, #20
 81126ae:	af00      	add	r7, sp, #0
 81126b0:	60f8      	str	r0, [r7, #12]
 81126b2:	60b9      	str	r1, [r7, #8]
 81126b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 81126b6:	68bb      	ldr	r3, [r7, #8]
 81126b8:	681a      	ldr	r2, [r3, #0]
 81126ba:	68fb      	ldr	r3, [r7, #12]
 81126bc:	330c      	adds	r3, #12
 81126be:	681b      	ldr	r3, [r3, #0]
 81126c0:	429a      	cmp	r2, r3
 81126c2:	d00a      	beq.n	81126da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 81126c4:	68bb      	ldr	r3, [r7, #8]
 81126c6:	2b00      	cmp	r3, #0
 81126c8:	d002      	beq.n	81126d0 <netif_do_set_gw+0x26>
 81126ca:	68bb      	ldr	r3, [r7, #8]
 81126cc:	681b      	ldr	r3, [r3, #0]
 81126ce:	e000      	b.n	81126d2 <netif_do_set_gw+0x28>
 81126d0:	2300      	movs	r3, #0
 81126d2:	68fa      	ldr	r2, [r7, #12]
 81126d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 81126d6:	2301      	movs	r3, #1
 81126d8:	e000      	b.n	81126dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 81126da:	2300      	movs	r3, #0
}
 81126dc:	4618      	mov	r0, r3
 81126de:	3714      	adds	r7, #20
 81126e0:	46bd      	mov	sp, r7
 81126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81126e6:	4770      	bx	lr

081126e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 81126e8:	b580      	push	{r7, lr}
 81126ea:	b088      	sub	sp, #32
 81126ec:	af00      	add	r7, sp, #0
 81126ee:	60f8      	str	r0, [r7, #12]
 81126f0:	60b9      	str	r1, [r7, #8]
 81126f2:	607a      	str	r2, [r7, #4]
 81126f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 81126f6:	2300      	movs	r3, #0
 81126f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 81126fa:	2300      	movs	r3, #0
 81126fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 81126fe:	68bb      	ldr	r3, [r7, #8]
 8112700:	2b00      	cmp	r3, #0
 8112702:	d101      	bne.n	8112708 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8112704:	4b1c      	ldr	r3, [pc, #112]	; (8112778 <netif_set_addr+0x90>)
 8112706:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8112708:	687b      	ldr	r3, [r7, #4]
 811270a:	2b00      	cmp	r3, #0
 811270c:	d101      	bne.n	8112712 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 811270e:	4b1a      	ldr	r3, [pc, #104]	; (8112778 <netif_set_addr+0x90>)
 8112710:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8112712:	683b      	ldr	r3, [r7, #0]
 8112714:	2b00      	cmp	r3, #0
 8112716:	d101      	bne.n	811271c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8112718:	4b17      	ldr	r3, [pc, #92]	; (8112778 <netif_set_addr+0x90>)
 811271a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 811271c:	68bb      	ldr	r3, [r7, #8]
 811271e:	2b00      	cmp	r3, #0
 8112720:	d003      	beq.n	811272a <netif_set_addr+0x42>
 8112722:	68bb      	ldr	r3, [r7, #8]
 8112724:	681b      	ldr	r3, [r3, #0]
 8112726:	2b00      	cmp	r3, #0
 8112728:	d101      	bne.n	811272e <netif_set_addr+0x46>
 811272a:	2301      	movs	r3, #1
 811272c:	e000      	b.n	8112730 <netif_set_addr+0x48>
 811272e:	2300      	movs	r3, #0
 8112730:	617b      	str	r3, [r7, #20]
  if (remove) {
 8112732:	697b      	ldr	r3, [r7, #20]
 8112734:	2b00      	cmp	r3, #0
 8112736:	d006      	beq.n	8112746 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8112738:	f107 0310 	add.w	r3, r7, #16
 811273c:	461a      	mov	r2, r3
 811273e:	68b9      	ldr	r1, [r7, #8]
 8112740:	68f8      	ldr	r0, [r7, #12]
 8112742:	f7ff ff49 	bl	81125d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8112746:	69fa      	ldr	r2, [r7, #28]
 8112748:	6879      	ldr	r1, [r7, #4]
 811274a:	68f8      	ldr	r0, [r7, #12]
 811274c:	f7ff ff8e 	bl	811266c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8112750:	69ba      	ldr	r2, [r7, #24]
 8112752:	6839      	ldr	r1, [r7, #0]
 8112754:	68f8      	ldr	r0, [r7, #12]
 8112756:	f7ff ffa8 	bl	81126aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 811275a:	697b      	ldr	r3, [r7, #20]
 811275c:	2b00      	cmp	r3, #0
 811275e:	d106      	bne.n	811276e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8112760:	f107 0310 	add.w	r3, r7, #16
 8112764:	461a      	mov	r2, r3
 8112766:	68b9      	ldr	r1, [r7, #8]
 8112768:	68f8      	ldr	r0, [r7, #12]
 811276a:	f7ff ff35 	bl	81125d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 811276e:	bf00      	nop
 8112770:	3720      	adds	r7, #32
 8112772:	46bd      	mov	sp, r7
 8112774:	bd80      	pop	{r7, pc}
 8112776:	bf00      	nop
 8112778:	0811b6e4 	.word	0x0811b6e4

0811277c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 811277c:	b480      	push	{r7}
 811277e:	b083      	sub	sp, #12
 8112780:	af00      	add	r7, sp, #0
 8112782:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8112784:	4a04      	ldr	r2, [pc, #16]	; (8112798 <netif_set_default+0x1c>)
 8112786:	687b      	ldr	r3, [r7, #4]
 8112788:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 811278a:	bf00      	nop
 811278c:	370c      	adds	r7, #12
 811278e:	46bd      	mov	sp, r7
 8112790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112794:	4770      	bx	lr
 8112796:	bf00      	nop
 8112798:	100087d0 	.word	0x100087d0

0811279c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 811279c:	b580      	push	{r7, lr}
 811279e:	b082      	sub	sp, #8
 81127a0:	af00      	add	r7, sp, #0
 81127a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 81127a4:	687b      	ldr	r3, [r7, #4]
 81127a6:	2b00      	cmp	r3, #0
 81127a8:	d107      	bne.n	81127ba <netif_set_up+0x1e>
 81127aa:	4b0f      	ldr	r3, [pc, #60]	; (81127e8 <netif_set_up+0x4c>)
 81127ac:	f44f 7254 	mov.w	r2, #848	; 0x350
 81127b0:	490e      	ldr	r1, [pc, #56]	; (81127ec <netif_set_up+0x50>)
 81127b2:	480f      	ldr	r0, [pc, #60]	; (81127f0 <netif_set_up+0x54>)
 81127b4:	f005 f808 	bl	81177c8 <iprintf>
 81127b8:	e013      	b.n	81127e2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 81127ba:	687b      	ldr	r3, [r7, #4]
 81127bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81127c0:	f003 0301 	and.w	r3, r3, #1
 81127c4:	2b00      	cmp	r3, #0
 81127c6:	d10c      	bne.n	81127e2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 81127c8:	687b      	ldr	r3, [r7, #4]
 81127ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81127ce:	f043 0301 	orr.w	r3, r3, #1
 81127d2:	b2da      	uxtb	r2, r3
 81127d4:	687b      	ldr	r3, [r7, #4]
 81127d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 81127da:	2103      	movs	r1, #3
 81127dc:	6878      	ldr	r0, [r7, #4]
 81127de:	f000 f809 	bl	81127f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 81127e2:	3708      	adds	r7, #8
 81127e4:	46bd      	mov	sp, r7
 81127e6:	bd80      	pop	{r7, pc}
 81127e8:	0811a5f0 	.word	0x0811a5f0
 81127ec:	0811a7b0 	.word	0x0811a7b0
 81127f0:	0811a678 	.word	0x0811a678

081127f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 81127f4:	b580      	push	{r7, lr}
 81127f6:	b082      	sub	sp, #8
 81127f8:	af00      	add	r7, sp, #0
 81127fa:	6078      	str	r0, [r7, #4]
 81127fc:	460b      	mov	r3, r1
 81127fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8112800:	687b      	ldr	r3, [r7, #4]
 8112802:	2b00      	cmp	r3, #0
 8112804:	d106      	bne.n	8112814 <netif_issue_reports+0x20>
 8112806:	4b18      	ldr	r3, [pc, #96]	; (8112868 <netif_issue_reports+0x74>)
 8112808:	f240 326d 	movw	r2, #877	; 0x36d
 811280c:	4917      	ldr	r1, [pc, #92]	; (811286c <netif_issue_reports+0x78>)
 811280e:	4818      	ldr	r0, [pc, #96]	; (8112870 <netif_issue_reports+0x7c>)
 8112810:	f004 ffda 	bl	81177c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8112814:	687b      	ldr	r3, [r7, #4]
 8112816:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811281a:	f003 0304 	and.w	r3, r3, #4
 811281e:	2b00      	cmp	r3, #0
 8112820:	d01e      	beq.n	8112860 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8112822:	687b      	ldr	r3, [r7, #4]
 8112824:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8112828:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811282c:	2b00      	cmp	r3, #0
 811282e:	d017      	beq.n	8112860 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8112830:	78fb      	ldrb	r3, [r7, #3]
 8112832:	f003 0301 	and.w	r3, r3, #1
 8112836:	2b00      	cmp	r3, #0
 8112838:	d013      	beq.n	8112862 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 811283a:	687b      	ldr	r3, [r7, #4]
 811283c:	3304      	adds	r3, #4
 811283e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8112840:	2b00      	cmp	r3, #0
 8112842:	d00e      	beq.n	8112862 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8112844:	687b      	ldr	r3, [r7, #4]
 8112846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811284a:	f003 0308 	and.w	r3, r3, #8
 811284e:	2b00      	cmp	r3, #0
 8112850:	d007      	beq.n	8112862 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8112852:	687b      	ldr	r3, [r7, #4]
 8112854:	3304      	adds	r3, #4
 8112856:	4619      	mov	r1, r3
 8112858:	6878      	ldr	r0, [r7, #4]
 811285a:	f7fd fc27 	bl	81100ac <etharp_request>
 811285e:	e000      	b.n	8112862 <netif_issue_reports+0x6e>
    return;
 8112860:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8112862:	3708      	adds	r7, #8
 8112864:	46bd      	mov	sp, r7
 8112866:	bd80      	pop	{r7, pc}
 8112868:	0811a5f0 	.word	0x0811a5f0
 811286c:	0811a7cc 	.word	0x0811a7cc
 8112870:	0811a678 	.word	0x0811a678

08112874 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8112874:	b580      	push	{r7, lr}
 8112876:	b082      	sub	sp, #8
 8112878:	af00      	add	r7, sp, #0
 811287a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 811287c:	687b      	ldr	r3, [r7, #4]
 811287e:	2b00      	cmp	r3, #0
 8112880:	d107      	bne.n	8112892 <netif_set_down+0x1e>
 8112882:	4b12      	ldr	r3, [pc, #72]	; (81128cc <netif_set_down+0x58>)
 8112884:	f240 329b 	movw	r2, #923	; 0x39b
 8112888:	4911      	ldr	r1, [pc, #68]	; (81128d0 <netif_set_down+0x5c>)
 811288a:	4812      	ldr	r0, [pc, #72]	; (81128d4 <netif_set_down+0x60>)
 811288c:	f004 ff9c 	bl	81177c8 <iprintf>
 8112890:	e019      	b.n	81128c6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8112892:	687b      	ldr	r3, [r7, #4]
 8112894:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8112898:	f003 0301 	and.w	r3, r3, #1
 811289c:	2b00      	cmp	r3, #0
 811289e:	d012      	beq.n	81128c6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 81128a0:	687b      	ldr	r3, [r7, #4]
 81128a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81128a6:	f023 0301 	bic.w	r3, r3, #1
 81128aa:	b2da      	uxtb	r2, r3
 81128ac:	687b      	ldr	r3, [r7, #4]
 81128ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 81128b2:	687b      	ldr	r3, [r7, #4]
 81128b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81128b8:	f003 0308 	and.w	r3, r3, #8
 81128bc:	2b00      	cmp	r3, #0
 81128be:	d002      	beq.n	81128c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 81128c0:	6878      	ldr	r0, [r7, #4]
 81128c2:	f7fc ffb1 	bl	810f828 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 81128c6:	3708      	adds	r7, #8
 81128c8:	46bd      	mov	sp, r7
 81128ca:	bd80      	pop	{r7, pc}
 81128cc:	0811a5f0 	.word	0x0811a5f0
 81128d0:	0811a7f0 	.word	0x0811a7f0
 81128d4:	0811a678 	.word	0x0811a678

081128d8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 81128d8:	b580      	push	{r7, lr}
 81128da:	b082      	sub	sp, #8
 81128dc:	af00      	add	r7, sp, #0
 81128de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 81128e0:	687b      	ldr	r3, [r7, #4]
 81128e2:	2b00      	cmp	r3, #0
 81128e4:	d107      	bne.n	81128f6 <netif_set_link_up+0x1e>
 81128e6:	4b13      	ldr	r3, [pc, #76]	; (8112934 <netif_set_link_up+0x5c>)
 81128e8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 81128ec:	4912      	ldr	r1, [pc, #72]	; (8112938 <netif_set_link_up+0x60>)
 81128ee:	4813      	ldr	r0, [pc, #76]	; (811293c <netif_set_link_up+0x64>)
 81128f0:	f004 ff6a 	bl	81177c8 <iprintf>
 81128f4:	e01b      	b.n	811292e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 81128f6:	687b      	ldr	r3, [r7, #4]
 81128f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81128fc:	f003 0304 	and.w	r3, r3, #4
 8112900:	2b00      	cmp	r3, #0
 8112902:	d114      	bne.n	811292e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8112904:	687b      	ldr	r3, [r7, #4]
 8112906:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811290a:	f043 0304 	orr.w	r3, r3, #4
 811290e:	b2da      	uxtb	r2, r3
 8112910:	687b      	ldr	r3, [r7, #4]
 8112912:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8112916:	2103      	movs	r1, #3
 8112918:	6878      	ldr	r0, [r7, #4]
 811291a:	f7ff ff6b 	bl	81127f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 811291e:	687b      	ldr	r3, [r7, #4]
 8112920:	69db      	ldr	r3, [r3, #28]
 8112922:	2b00      	cmp	r3, #0
 8112924:	d003      	beq.n	811292e <netif_set_link_up+0x56>
 8112926:	687b      	ldr	r3, [r7, #4]
 8112928:	69db      	ldr	r3, [r3, #28]
 811292a:	6878      	ldr	r0, [r7, #4]
 811292c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811292e:	3708      	adds	r7, #8
 8112930:	46bd      	mov	sp, r7
 8112932:	bd80      	pop	{r7, pc}
 8112934:	0811a5f0 	.word	0x0811a5f0
 8112938:	0811a810 	.word	0x0811a810
 811293c:	0811a678 	.word	0x0811a678

08112940 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8112940:	b580      	push	{r7, lr}
 8112942:	b082      	sub	sp, #8
 8112944:	af00      	add	r7, sp, #0
 8112946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8112948:	687b      	ldr	r3, [r7, #4]
 811294a:	2b00      	cmp	r3, #0
 811294c:	d107      	bne.n	811295e <netif_set_link_down+0x1e>
 811294e:	4b11      	ldr	r3, [pc, #68]	; (8112994 <netif_set_link_down+0x54>)
 8112950:	f240 4206 	movw	r2, #1030	; 0x406
 8112954:	4910      	ldr	r1, [pc, #64]	; (8112998 <netif_set_link_down+0x58>)
 8112956:	4811      	ldr	r0, [pc, #68]	; (811299c <netif_set_link_down+0x5c>)
 8112958:	f004 ff36 	bl	81177c8 <iprintf>
 811295c:	e017      	b.n	811298e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 811295e:	687b      	ldr	r3, [r7, #4]
 8112960:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8112964:	f003 0304 	and.w	r3, r3, #4
 8112968:	2b00      	cmp	r3, #0
 811296a:	d010      	beq.n	811298e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 811296c:	687b      	ldr	r3, [r7, #4]
 811296e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8112972:	f023 0304 	bic.w	r3, r3, #4
 8112976:	b2da      	uxtb	r2, r3
 8112978:	687b      	ldr	r3, [r7, #4]
 811297a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 811297e:	687b      	ldr	r3, [r7, #4]
 8112980:	69db      	ldr	r3, [r3, #28]
 8112982:	2b00      	cmp	r3, #0
 8112984:	d003      	beq.n	811298e <netif_set_link_down+0x4e>
 8112986:	687b      	ldr	r3, [r7, #4]
 8112988:	69db      	ldr	r3, [r3, #28]
 811298a:	6878      	ldr	r0, [r7, #4]
 811298c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811298e:	3708      	adds	r7, #8
 8112990:	46bd      	mov	sp, r7
 8112992:	bd80      	pop	{r7, pc}
 8112994:	0811a5f0 	.word	0x0811a5f0
 8112998:	0811a834 	.word	0x0811a834
 811299c:	0811a678 	.word	0x0811a678

081129a0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 81129a0:	b480      	push	{r7}
 81129a2:	b083      	sub	sp, #12
 81129a4:	af00      	add	r7, sp, #0
 81129a6:	6078      	str	r0, [r7, #4]
 81129a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 81129aa:	687b      	ldr	r3, [r7, #4]
 81129ac:	2b00      	cmp	r3, #0
 81129ae:	d002      	beq.n	81129b6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 81129b0:	687b      	ldr	r3, [r7, #4]
 81129b2:	683a      	ldr	r2, [r7, #0]
 81129b4:	61da      	str	r2, [r3, #28]
  }
}
 81129b6:	bf00      	nop
 81129b8:	370c      	adds	r7, #12
 81129ba:	46bd      	mov	sp, r7
 81129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81129c0:	4770      	bx	lr

081129c2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 81129c2:	b480      	push	{r7}
 81129c4:	b085      	sub	sp, #20
 81129c6:	af00      	add	r7, sp, #0
 81129c8:	60f8      	str	r0, [r7, #12]
 81129ca:	60b9      	str	r1, [r7, #8]
 81129cc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 81129ce:	f06f 030b 	mvn.w	r3, #11
}
 81129d2:	4618      	mov	r0, r3
 81129d4:	3714      	adds	r7, #20
 81129d6:	46bd      	mov	sp, r7
 81129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81129dc:	4770      	bx	lr
	...

081129e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 81129e0:	b480      	push	{r7}
 81129e2:	b085      	sub	sp, #20
 81129e4:	af00      	add	r7, sp, #0
 81129e6:	4603      	mov	r3, r0
 81129e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 81129ea:	79fb      	ldrb	r3, [r7, #7]
 81129ec:	2b00      	cmp	r3, #0
 81129ee:	d013      	beq.n	8112a18 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 81129f0:	4b0d      	ldr	r3, [pc, #52]	; (8112a28 <netif_get_by_index+0x48>)
 81129f2:	681b      	ldr	r3, [r3, #0]
 81129f4:	60fb      	str	r3, [r7, #12]
 81129f6:	e00c      	b.n	8112a12 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 81129f8:	68fb      	ldr	r3, [r7, #12]
 81129fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81129fe:	3301      	adds	r3, #1
 8112a00:	b2db      	uxtb	r3, r3
 8112a02:	79fa      	ldrb	r2, [r7, #7]
 8112a04:	429a      	cmp	r2, r3
 8112a06:	d101      	bne.n	8112a0c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8112a08:	68fb      	ldr	r3, [r7, #12]
 8112a0a:	e006      	b.n	8112a1a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8112a0c:	68fb      	ldr	r3, [r7, #12]
 8112a0e:	681b      	ldr	r3, [r3, #0]
 8112a10:	60fb      	str	r3, [r7, #12]
 8112a12:	68fb      	ldr	r3, [r7, #12]
 8112a14:	2b00      	cmp	r3, #0
 8112a16:	d1ef      	bne.n	81129f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8112a18:	2300      	movs	r3, #0
}
 8112a1a:	4618      	mov	r0, r3
 8112a1c:	3714      	adds	r7, #20
 8112a1e:	46bd      	mov	sp, r7
 8112a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112a24:	4770      	bx	lr
 8112a26:	bf00      	nop
 8112a28:	100087cc 	.word	0x100087cc

08112a2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8112a2c:	b480      	push	{r7}
 8112a2e:	b085      	sub	sp, #20
 8112a30:	af00      	add	r7, sp, #0
 8112a32:	60f8      	str	r0, [r7, #12]
 8112a34:	60b9      	str	r1, [r7, #8]
 8112a36:	4611      	mov	r1, r2
 8112a38:	461a      	mov	r2, r3
 8112a3a:	460b      	mov	r3, r1
 8112a3c:	80fb      	strh	r3, [r7, #6]
 8112a3e:	4613      	mov	r3, r2
 8112a40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8112a42:	68fb      	ldr	r3, [r7, #12]
 8112a44:	2200      	movs	r2, #0
 8112a46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8112a48:	68fb      	ldr	r3, [r7, #12]
 8112a4a:	68ba      	ldr	r2, [r7, #8]
 8112a4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8112a4e:	68fb      	ldr	r3, [r7, #12]
 8112a50:	88fa      	ldrh	r2, [r7, #6]
 8112a52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8112a54:	68fb      	ldr	r3, [r7, #12]
 8112a56:	88ba      	ldrh	r2, [r7, #4]
 8112a58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8112a5a:	8b3b      	ldrh	r3, [r7, #24]
 8112a5c:	b2da      	uxtb	r2, r3
 8112a5e:	68fb      	ldr	r3, [r7, #12]
 8112a60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8112a62:	68fb      	ldr	r3, [r7, #12]
 8112a64:	7f3a      	ldrb	r2, [r7, #28]
 8112a66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8112a68:	68fb      	ldr	r3, [r7, #12]
 8112a6a:	2201      	movs	r2, #1
 8112a6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8112a6e:	68fb      	ldr	r3, [r7, #12]
 8112a70:	2200      	movs	r2, #0
 8112a72:	73da      	strb	r2, [r3, #15]
}
 8112a74:	bf00      	nop
 8112a76:	3714      	adds	r7, #20
 8112a78:	46bd      	mov	sp, r7
 8112a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112a7e:	4770      	bx	lr

08112a80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8112a80:	b580      	push	{r7, lr}
 8112a82:	b08c      	sub	sp, #48	; 0x30
 8112a84:	af02      	add	r7, sp, #8
 8112a86:	4603      	mov	r3, r0
 8112a88:	71fb      	strb	r3, [r7, #7]
 8112a8a:	460b      	mov	r3, r1
 8112a8c:	80bb      	strh	r3, [r7, #4]
 8112a8e:	4613      	mov	r3, r2
 8112a90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8112a92:	79fb      	ldrb	r3, [r7, #7]
 8112a94:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8112a96:	887b      	ldrh	r3, [r7, #2]
 8112a98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8112a9c:	d07d      	beq.n	8112b9a <pbuf_alloc+0x11a>
 8112a9e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8112aa2:	f300 80c6 	bgt.w	8112c32 <pbuf_alloc+0x1b2>
 8112aa6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8112aaa:	d010      	beq.n	8112ace <pbuf_alloc+0x4e>
 8112aac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8112ab0:	f300 80bf 	bgt.w	8112c32 <pbuf_alloc+0x1b2>
 8112ab4:	2b01      	cmp	r3, #1
 8112ab6:	d002      	beq.n	8112abe <pbuf_alloc+0x3e>
 8112ab8:	2b41      	cmp	r3, #65	; 0x41
 8112aba:	f040 80ba 	bne.w	8112c32 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8112abe:	887a      	ldrh	r2, [r7, #2]
 8112ac0:	88bb      	ldrh	r3, [r7, #4]
 8112ac2:	4619      	mov	r1, r3
 8112ac4:	2000      	movs	r0, #0
 8112ac6:	f000 f8cf 	bl	8112c68 <pbuf_alloc_reference>
 8112aca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8112acc:	e0bb      	b.n	8112c46 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8112ace:	2300      	movs	r3, #0
 8112ad0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8112ad2:	2300      	movs	r3, #0
 8112ad4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8112ad6:	88bb      	ldrh	r3, [r7, #4]
 8112ad8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8112ada:	2009      	movs	r0, #9
 8112adc:	f7ff fbf8 	bl	81122d0 <memp_malloc>
 8112ae0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8112ae2:	693b      	ldr	r3, [r7, #16]
 8112ae4:	2b00      	cmp	r3, #0
 8112ae6:	d107      	bne.n	8112af8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8112ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112aea:	2b00      	cmp	r3, #0
 8112aec:	d002      	beq.n	8112af4 <pbuf_alloc+0x74>
            pbuf_free(p);
 8112aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8112af0:	f000 faa8 	bl	8113044 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8112af4:	2300      	movs	r3, #0
 8112af6:	e0a7      	b.n	8112c48 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8112af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8112afa:	3303      	adds	r3, #3
 8112afc:	b29b      	uxth	r3, r3
 8112afe:	f023 0303 	bic.w	r3, r3, #3
 8112b02:	b29b      	uxth	r3, r3
 8112b04:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8112b08:	b29b      	uxth	r3, r3
 8112b0a:	8b7a      	ldrh	r2, [r7, #26]
 8112b0c:	4293      	cmp	r3, r2
 8112b0e:	bf28      	it	cs
 8112b10:	4613      	movcs	r3, r2
 8112b12:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8112b14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8112b16:	3310      	adds	r3, #16
 8112b18:	693a      	ldr	r2, [r7, #16]
 8112b1a:	4413      	add	r3, r2
 8112b1c:	3303      	adds	r3, #3
 8112b1e:	f023 0303 	bic.w	r3, r3, #3
 8112b22:	4618      	mov	r0, r3
 8112b24:	89f9      	ldrh	r1, [r7, #14]
 8112b26:	8b7a      	ldrh	r2, [r7, #26]
 8112b28:	2300      	movs	r3, #0
 8112b2a:	9301      	str	r3, [sp, #4]
 8112b2c:	887b      	ldrh	r3, [r7, #2]
 8112b2e:	9300      	str	r3, [sp, #0]
 8112b30:	460b      	mov	r3, r1
 8112b32:	4601      	mov	r1, r0
 8112b34:	6938      	ldr	r0, [r7, #16]
 8112b36:	f7ff ff79 	bl	8112a2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8112b3a:	693b      	ldr	r3, [r7, #16]
 8112b3c:	685b      	ldr	r3, [r3, #4]
 8112b3e:	f003 0303 	and.w	r3, r3, #3
 8112b42:	2b00      	cmp	r3, #0
 8112b44:	d006      	beq.n	8112b54 <pbuf_alloc+0xd4>
 8112b46:	4b42      	ldr	r3, [pc, #264]	; (8112c50 <pbuf_alloc+0x1d0>)
 8112b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8112b4c:	4941      	ldr	r1, [pc, #260]	; (8112c54 <pbuf_alloc+0x1d4>)
 8112b4e:	4842      	ldr	r0, [pc, #264]	; (8112c58 <pbuf_alloc+0x1d8>)
 8112b50:	f004 fe3a 	bl	81177c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8112b54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8112b56:	3303      	adds	r3, #3
 8112b58:	f023 0303 	bic.w	r3, r3, #3
 8112b5c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8112b60:	d106      	bne.n	8112b70 <pbuf_alloc+0xf0>
 8112b62:	4b3b      	ldr	r3, [pc, #236]	; (8112c50 <pbuf_alloc+0x1d0>)
 8112b64:	f44f 7281 	mov.w	r2, #258	; 0x102
 8112b68:	493c      	ldr	r1, [pc, #240]	; (8112c5c <pbuf_alloc+0x1dc>)
 8112b6a:	483b      	ldr	r0, [pc, #236]	; (8112c58 <pbuf_alloc+0x1d8>)
 8112b6c:	f004 fe2c 	bl	81177c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8112b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112b72:	2b00      	cmp	r3, #0
 8112b74:	d102      	bne.n	8112b7c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8112b76:	693b      	ldr	r3, [r7, #16]
 8112b78:	627b      	str	r3, [r7, #36]	; 0x24
 8112b7a:	e002      	b.n	8112b82 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8112b7c:	69fb      	ldr	r3, [r7, #28]
 8112b7e:	693a      	ldr	r2, [r7, #16]
 8112b80:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8112b82:	693b      	ldr	r3, [r7, #16]
 8112b84:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8112b86:	8b7a      	ldrh	r2, [r7, #26]
 8112b88:	89fb      	ldrh	r3, [r7, #14]
 8112b8a:	1ad3      	subs	r3, r2, r3
 8112b8c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8112b8e:	2300      	movs	r3, #0
 8112b90:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8112b92:	8b7b      	ldrh	r3, [r7, #26]
 8112b94:	2b00      	cmp	r3, #0
 8112b96:	d1a0      	bne.n	8112ada <pbuf_alloc+0x5a>
      break;
 8112b98:	e055      	b.n	8112c46 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8112b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8112b9c:	3303      	adds	r3, #3
 8112b9e:	b29b      	uxth	r3, r3
 8112ba0:	f023 0303 	bic.w	r3, r3, #3
 8112ba4:	b29a      	uxth	r2, r3
 8112ba6:	88bb      	ldrh	r3, [r7, #4]
 8112ba8:	3303      	adds	r3, #3
 8112baa:	b29b      	uxth	r3, r3
 8112bac:	f023 0303 	bic.w	r3, r3, #3
 8112bb0:	b29b      	uxth	r3, r3
 8112bb2:	4413      	add	r3, r2
 8112bb4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8112bb6:	8b3b      	ldrh	r3, [r7, #24]
 8112bb8:	3310      	adds	r3, #16
 8112bba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8112bbc:	8b3a      	ldrh	r2, [r7, #24]
 8112bbe:	88bb      	ldrh	r3, [r7, #4]
 8112bc0:	3303      	adds	r3, #3
 8112bc2:	f023 0303 	bic.w	r3, r3, #3
 8112bc6:	429a      	cmp	r2, r3
 8112bc8:	d306      	bcc.n	8112bd8 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8112bca:	8afa      	ldrh	r2, [r7, #22]
 8112bcc:	88bb      	ldrh	r3, [r7, #4]
 8112bce:	3303      	adds	r3, #3
 8112bd0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8112bd4:	429a      	cmp	r2, r3
 8112bd6:	d201      	bcs.n	8112bdc <pbuf_alloc+0x15c>
        return NULL;
 8112bd8:	2300      	movs	r3, #0
 8112bda:	e035      	b.n	8112c48 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8112bdc:	8afb      	ldrh	r3, [r7, #22]
 8112bde:	4618      	mov	r0, r3
 8112be0:	f7ff f9ce 	bl	8111f80 <mem_malloc>
 8112be4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8112be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112be8:	2b00      	cmp	r3, #0
 8112bea:	d101      	bne.n	8112bf0 <pbuf_alloc+0x170>
        return NULL;
 8112bec:	2300      	movs	r3, #0
 8112bee:	e02b      	b.n	8112c48 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8112bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8112bf2:	3310      	adds	r3, #16
 8112bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8112bf6:	4413      	add	r3, r2
 8112bf8:	3303      	adds	r3, #3
 8112bfa:	f023 0303 	bic.w	r3, r3, #3
 8112bfe:	4618      	mov	r0, r3
 8112c00:	88b9      	ldrh	r1, [r7, #4]
 8112c02:	88ba      	ldrh	r2, [r7, #4]
 8112c04:	2300      	movs	r3, #0
 8112c06:	9301      	str	r3, [sp, #4]
 8112c08:	887b      	ldrh	r3, [r7, #2]
 8112c0a:	9300      	str	r3, [sp, #0]
 8112c0c:	460b      	mov	r3, r1
 8112c0e:	4601      	mov	r1, r0
 8112c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8112c12:	f7ff ff0b 	bl	8112a2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8112c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112c18:	685b      	ldr	r3, [r3, #4]
 8112c1a:	f003 0303 	and.w	r3, r3, #3
 8112c1e:	2b00      	cmp	r3, #0
 8112c20:	d010      	beq.n	8112c44 <pbuf_alloc+0x1c4>
 8112c22:	4b0b      	ldr	r3, [pc, #44]	; (8112c50 <pbuf_alloc+0x1d0>)
 8112c24:	f44f 7291 	mov.w	r2, #290	; 0x122
 8112c28:	490d      	ldr	r1, [pc, #52]	; (8112c60 <pbuf_alloc+0x1e0>)
 8112c2a:	480b      	ldr	r0, [pc, #44]	; (8112c58 <pbuf_alloc+0x1d8>)
 8112c2c:	f004 fdcc 	bl	81177c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8112c30:	e008      	b.n	8112c44 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8112c32:	4b07      	ldr	r3, [pc, #28]	; (8112c50 <pbuf_alloc+0x1d0>)
 8112c34:	f240 1227 	movw	r2, #295	; 0x127
 8112c38:	490a      	ldr	r1, [pc, #40]	; (8112c64 <pbuf_alloc+0x1e4>)
 8112c3a:	4807      	ldr	r0, [pc, #28]	; (8112c58 <pbuf_alloc+0x1d8>)
 8112c3c:	f004 fdc4 	bl	81177c8 <iprintf>
      return NULL;
 8112c40:	2300      	movs	r3, #0
 8112c42:	e001      	b.n	8112c48 <pbuf_alloc+0x1c8>
      break;
 8112c44:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8112c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8112c48:	4618      	mov	r0, r3
 8112c4a:	3728      	adds	r7, #40	; 0x28
 8112c4c:	46bd      	mov	sp, r7
 8112c4e:	bd80      	pop	{r7, pc}
 8112c50:	0811a858 	.word	0x0811a858
 8112c54:	0811a8c4 	.word	0x0811a8c4
 8112c58:	0811a8f4 	.word	0x0811a8f4
 8112c5c:	0811a91c 	.word	0x0811a91c
 8112c60:	0811a950 	.word	0x0811a950
 8112c64:	0811a97c 	.word	0x0811a97c

08112c68 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8112c68:	b580      	push	{r7, lr}
 8112c6a:	b086      	sub	sp, #24
 8112c6c:	af02      	add	r7, sp, #8
 8112c6e:	6078      	str	r0, [r7, #4]
 8112c70:	460b      	mov	r3, r1
 8112c72:	807b      	strh	r3, [r7, #2]
 8112c74:	4613      	mov	r3, r2
 8112c76:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8112c78:	883b      	ldrh	r3, [r7, #0]
 8112c7a:	2b41      	cmp	r3, #65	; 0x41
 8112c7c:	d009      	beq.n	8112c92 <pbuf_alloc_reference+0x2a>
 8112c7e:	883b      	ldrh	r3, [r7, #0]
 8112c80:	2b01      	cmp	r3, #1
 8112c82:	d006      	beq.n	8112c92 <pbuf_alloc_reference+0x2a>
 8112c84:	4b0f      	ldr	r3, [pc, #60]	; (8112cc4 <pbuf_alloc_reference+0x5c>)
 8112c86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8112c8a:	490f      	ldr	r1, [pc, #60]	; (8112cc8 <pbuf_alloc_reference+0x60>)
 8112c8c:	480f      	ldr	r0, [pc, #60]	; (8112ccc <pbuf_alloc_reference+0x64>)
 8112c8e:	f004 fd9b 	bl	81177c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8112c92:	2008      	movs	r0, #8
 8112c94:	f7ff fb1c 	bl	81122d0 <memp_malloc>
 8112c98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8112c9a:	68fb      	ldr	r3, [r7, #12]
 8112c9c:	2b00      	cmp	r3, #0
 8112c9e:	d101      	bne.n	8112ca4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8112ca0:	2300      	movs	r3, #0
 8112ca2:	e00b      	b.n	8112cbc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8112ca4:	8879      	ldrh	r1, [r7, #2]
 8112ca6:	887a      	ldrh	r2, [r7, #2]
 8112ca8:	2300      	movs	r3, #0
 8112caa:	9301      	str	r3, [sp, #4]
 8112cac:	883b      	ldrh	r3, [r7, #0]
 8112cae:	9300      	str	r3, [sp, #0]
 8112cb0:	460b      	mov	r3, r1
 8112cb2:	6879      	ldr	r1, [r7, #4]
 8112cb4:	68f8      	ldr	r0, [r7, #12]
 8112cb6:	f7ff feb9 	bl	8112a2c <pbuf_init_alloced_pbuf>
  return p;
 8112cba:	68fb      	ldr	r3, [r7, #12]
}
 8112cbc:	4618      	mov	r0, r3
 8112cbe:	3710      	adds	r7, #16
 8112cc0:	46bd      	mov	sp, r7
 8112cc2:	bd80      	pop	{r7, pc}
 8112cc4:	0811a858 	.word	0x0811a858
 8112cc8:	0811a998 	.word	0x0811a998
 8112ccc:	0811a8f4 	.word	0x0811a8f4

08112cd0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8112cd0:	b580      	push	{r7, lr}
 8112cd2:	b088      	sub	sp, #32
 8112cd4:	af02      	add	r7, sp, #8
 8112cd6:	607b      	str	r3, [r7, #4]
 8112cd8:	4603      	mov	r3, r0
 8112cda:	73fb      	strb	r3, [r7, #15]
 8112cdc:	460b      	mov	r3, r1
 8112cde:	81bb      	strh	r3, [r7, #12]
 8112ce0:	4613      	mov	r3, r2
 8112ce2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8112ce4:	7bfb      	ldrb	r3, [r7, #15]
 8112ce6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8112ce8:	8a7b      	ldrh	r3, [r7, #18]
 8112cea:	3303      	adds	r3, #3
 8112cec:	f023 0203 	bic.w	r2, r3, #3
 8112cf0:	89bb      	ldrh	r3, [r7, #12]
 8112cf2:	441a      	add	r2, r3
 8112cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8112cf6:	429a      	cmp	r2, r3
 8112cf8:	d901      	bls.n	8112cfe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8112cfa:	2300      	movs	r3, #0
 8112cfc:	e018      	b.n	8112d30 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8112cfe:	6a3b      	ldr	r3, [r7, #32]
 8112d00:	2b00      	cmp	r3, #0
 8112d02:	d007      	beq.n	8112d14 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8112d04:	8a7b      	ldrh	r3, [r7, #18]
 8112d06:	3303      	adds	r3, #3
 8112d08:	f023 0303 	bic.w	r3, r3, #3
 8112d0c:	6a3a      	ldr	r2, [r7, #32]
 8112d0e:	4413      	add	r3, r2
 8112d10:	617b      	str	r3, [r7, #20]
 8112d12:	e001      	b.n	8112d18 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8112d14:	2300      	movs	r3, #0
 8112d16:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8112d18:	6878      	ldr	r0, [r7, #4]
 8112d1a:	89b9      	ldrh	r1, [r7, #12]
 8112d1c:	89ba      	ldrh	r2, [r7, #12]
 8112d1e:	2302      	movs	r3, #2
 8112d20:	9301      	str	r3, [sp, #4]
 8112d22:	897b      	ldrh	r3, [r7, #10]
 8112d24:	9300      	str	r3, [sp, #0]
 8112d26:	460b      	mov	r3, r1
 8112d28:	6979      	ldr	r1, [r7, #20]
 8112d2a:	f7ff fe7f 	bl	8112a2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8112d2e:	687b      	ldr	r3, [r7, #4]
}
 8112d30:	4618      	mov	r0, r3
 8112d32:	3718      	adds	r7, #24
 8112d34:	46bd      	mov	sp, r7
 8112d36:	bd80      	pop	{r7, pc}

08112d38 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8112d38:	b580      	push	{r7, lr}
 8112d3a:	b084      	sub	sp, #16
 8112d3c:	af00      	add	r7, sp, #0
 8112d3e:	6078      	str	r0, [r7, #4]
 8112d40:	460b      	mov	r3, r1
 8112d42:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8112d44:	687b      	ldr	r3, [r7, #4]
 8112d46:	2b00      	cmp	r3, #0
 8112d48:	d106      	bne.n	8112d58 <pbuf_realloc+0x20>
 8112d4a:	4b3a      	ldr	r3, [pc, #232]	; (8112e34 <pbuf_realloc+0xfc>)
 8112d4c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8112d50:	4939      	ldr	r1, [pc, #228]	; (8112e38 <pbuf_realloc+0x100>)
 8112d52:	483a      	ldr	r0, [pc, #232]	; (8112e3c <pbuf_realloc+0x104>)
 8112d54:	f004 fd38 	bl	81177c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8112d58:	687b      	ldr	r3, [r7, #4]
 8112d5a:	891b      	ldrh	r3, [r3, #8]
 8112d5c:	887a      	ldrh	r2, [r7, #2]
 8112d5e:	429a      	cmp	r2, r3
 8112d60:	d263      	bcs.n	8112e2a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8112d62:	687b      	ldr	r3, [r7, #4]
 8112d64:	891a      	ldrh	r2, [r3, #8]
 8112d66:	887b      	ldrh	r3, [r7, #2]
 8112d68:	1ad3      	subs	r3, r2, r3
 8112d6a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8112d6c:	887b      	ldrh	r3, [r7, #2]
 8112d6e:	817b      	strh	r3, [r7, #10]
  q = p;
 8112d70:	687b      	ldr	r3, [r7, #4]
 8112d72:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8112d74:	e018      	b.n	8112da8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8112d76:	68fb      	ldr	r3, [r7, #12]
 8112d78:	895b      	ldrh	r3, [r3, #10]
 8112d7a:	897a      	ldrh	r2, [r7, #10]
 8112d7c:	1ad3      	subs	r3, r2, r3
 8112d7e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8112d80:	68fb      	ldr	r3, [r7, #12]
 8112d82:	891a      	ldrh	r2, [r3, #8]
 8112d84:	893b      	ldrh	r3, [r7, #8]
 8112d86:	1ad3      	subs	r3, r2, r3
 8112d88:	b29a      	uxth	r2, r3
 8112d8a:	68fb      	ldr	r3, [r7, #12]
 8112d8c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8112d8e:	68fb      	ldr	r3, [r7, #12]
 8112d90:	681b      	ldr	r3, [r3, #0]
 8112d92:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8112d94:	68fb      	ldr	r3, [r7, #12]
 8112d96:	2b00      	cmp	r3, #0
 8112d98:	d106      	bne.n	8112da8 <pbuf_realloc+0x70>
 8112d9a:	4b26      	ldr	r3, [pc, #152]	; (8112e34 <pbuf_realloc+0xfc>)
 8112d9c:	f240 12af 	movw	r2, #431	; 0x1af
 8112da0:	4927      	ldr	r1, [pc, #156]	; (8112e40 <pbuf_realloc+0x108>)
 8112da2:	4826      	ldr	r0, [pc, #152]	; (8112e3c <pbuf_realloc+0x104>)
 8112da4:	f004 fd10 	bl	81177c8 <iprintf>
  while (rem_len > q->len) {
 8112da8:	68fb      	ldr	r3, [r7, #12]
 8112daa:	895b      	ldrh	r3, [r3, #10]
 8112dac:	897a      	ldrh	r2, [r7, #10]
 8112dae:	429a      	cmp	r2, r3
 8112db0:	d8e1      	bhi.n	8112d76 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8112db2:	68fb      	ldr	r3, [r7, #12]
 8112db4:	7b1b      	ldrb	r3, [r3, #12]
 8112db6:	f003 030f 	and.w	r3, r3, #15
 8112dba:	2b00      	cmp	r3, #0
 8112dbc:	d121      	bne.n	8112e02 <pbuf_realloc+0xca>
 8112dbe:	68fb      	ldr	r3, [r7, #12]
 8112dc0:	895b      	ldrh	r3, [r3, #10]
 8112dc2:	897a      	ldrh	r2, [r7, #10]
 8112dc4:	429a      	cmp	r2, r3
 8112dc6:	d01c      	beq.n	8112e02 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8112dc8:	68fb      	ldr	r3, [r7, #12]
 8112dca:	7b5b      	ldrb	r3, [r3, #13]
 8112dcc:	f003 0302 	and.w	r3, r3, #2
 8112dd0:	2b00      	cmp	r3, #0
 8112dd2:	d116      	bne.n	8112e02 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8112dd4:	68fb      	ldr	r3, [r7, #12]
 8112dd6:	685a      	ldr	r2, [r3, #4]
 8112dd8:	68fb      	ldr	r3, [r7, #12]
 8112dda:	1ad3      	subs	r3, r2, r3
 8112ddc:	b29a      	uxth	r2, r3
 8112dde:	897b      	ldrh	r3, [r7, #10]
 8112de0:	4413      	add	r3, r2
 8112de2:	b29b      	uxth	r3, r3
 8112de4:	4619      	mov	r1, r3
 8112de6:	68f8      	ldr	r0, [r7, #12]
 8112de8:	f7fe ffba 	bl	8111d60 <mem_trim>
 8112dec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8112dee:	68fb      	ldr	r3, [r7, #12]
 8112df0:	2b00      	cmp	r3, #0
 8112df2:	d106      	bne.n	8112e02 <pbuf_realloc+0xca>
 8112df4:	4b0f      	ldr	r3, [pc, #60]	; (8112e34 <pbuf_realloc+0xfc>)
 8112df6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8112dfa:	4912      	ldr	r1, [pc, #72]	; (8112e44 <pbuf_realloc+0x10c>)
 8112dfc:	480f      	ldr	r0, [pc, #60]	; (8112e3c <pbuf_realloc+0x104>)
 8112dfe:	f004 fce3 	bl	81177c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8112e02:	68fb      	ldr	r3, [r7, #12]
 8112e04:	897a      	ldrh	r2, [r7, #10]
 8112e06:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8112e08:	68fb      	ldr	r3, [r7, #12]
 8112e0a:	895a      	ldrh	r2, [r3, #10]
 8112e0c:	68fb      	ldr	r3, [r7, #12]
 8112e0e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8112e10:	68fb      	ldr	r3, [r7, #12]
 8112e12:	681b      	ldr	r3, [r3, #0]
 8112e14:	2b00      	cmp	r3, #0
 8112e16:	d004      	beq.n	8112e22 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8112e18:	68fb      	ldr	r3, [r7, #12]
 8112e1a:	681b      	ldr	r3, [r3, #0]
 8112e1c:	4618      	mov	r0, r3
 8112e1e:	f000 f911 	bl	8113044 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8112e22:	68fb      	ldr	r3, [r7, #12]
 8112e24:	2200      	movs	r2, #0
 8112e26:	601a      	str	r2, [r3, #0]
 8112e28:	e000      	b.n	8112e2c <pbuf_realloc+0xf4>
    return;
 8112e2a:	bf00      	nop

}
 8112e2c:	3710      	adds	r7, #16
 8112e2e:	46bd      	mov	sp, r7
 8112e30:	bd80      	pop	{r7, pc}
 8112e32:	bf00      	nop
 8112e34:	0811a858 	.word	0x0811a858
 8112e38:	0811a9ac 	.word	0x0811a9ac
 8112e3c:	0811a8f4 	.word	0x0811a8f4
 8112e40:	0811a9c4 	.word	0x0811a9c4
 8112e44:	0811a9dc 	.word	0x0811a9dc

08112e48 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8112e48:	b580      	push	{r7, lr}
 8112e4a:	b086      	sub	sp, #24
 8112e4c:	af00      	add	r7, sp, #0
 8112e4e:	60f8      	str	r0, [r7, #12]
 8112e50:	60b9      	str	r1, [r7, #8]
 8112e52:	4613      	mov	r3, r2
 8112e54:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8112e56:	68fb      	ldr	r3, [r7, #12]
 8112e58:	2b00      	cmp	r3, #0
 8112e5a:	d106      	bne.n	8112e6a <pbuf_add_header_impl+0x22>
 8112e5c:	4b2b      	ldr	r3, [pc, #172]	; (8112f0c <pbuf_add_header_impl+0xc4>)
 8112e5e:	f240 12df 	movw	r2, #479	; 0x1df
 8112e62:	492b      	ldr	r1, [pc, #172]	; (8112f10 <pbuf_add_header_impl+0xc8>)
 8112e64:	482b      	ldr	r0, [pc, #172]	; (8112f14 <pbuf_add_header_impl+0xcc>)
 8112e66:	f004 fcaf 	bl	81177c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8112e6a:	68fb      	ldr	r3, [r7, #12]
 8112e6c:	2b00      	cmp	r3, #0
 8112e6e:	d003      	beq.n	8112e78 <pbuf_add_header_impl+0x30>
 8112e70:	68bb      	ldr	r3, [r7, #8]
 8112e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8112e76:	d301      	bcc.n	8112e7c <pbuf_add_header_impl+0x34>
    return 1;
 8112e78:	2301      	movs	r3, #1
 8112e7a:	e043      	b.n	8112f04 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8112e7c:	68bb      	ldr	r3, [r7, #8]
 8112e7e:	2b00      	cmp	r3, #0
 8112e80:	d101      	bne.n	8112e86 <pbuf_add_header_impl+0x3e>
    return 0;
 8112e82:	2300      	movs	r3, #0
 8112e84:	e03e      	b.n	8112f04 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8112e86:	68bb      	ldr	r3, [r7, #8]
 8112e88:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8112e8a:	68fb      	ldr	r3, [r7, #12]
 8112e8c:	891a      	ldrh	r2, [r3, #8]
 8112e8e:	8a7b      	ldrh	r3, [r7, #18]
 8112e90:	4413      	add	r3, r2
 8112e92:	b29b      	uxth	r3, r3
 8112e94:	8a7a      	ldrh	r2, [r7, #18]
 8112e96:	429a      	cmp	r2, r3
 8112e98:	d901      	bls.n	8112e9e <pbuf_add_header_impl+0x56>
    return 1;
 8112e9a:	2301      	movs	r3, #1
 8112e9c:	e032      	b.n	8112f04 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8112e9e:	68fb      	ldr	r3, [r7, #12]
 8112ea0:	7b1b      	ldrb	r3, [r3, #12]
 8112ea2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8112ea4:	8a3b      	ldrh	r3, [r7, #16]
 8112ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8112eaa:	2b00      	cmp	r3, #0
 8112eac:	d00c      	beq.n	8112ec8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8112eae:	68fb      	ldr	r3, [r7, #12]
 8112eb0:	685a      	ldr	r2, [r3, #4]
 8112eb2:	68bb      	ldr	r3, [r7, #8]
 8112eb4:	425b      	negs	r3, r3
 8112eb6:	4413      	add	r3, r2
 8112eb8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8112eba:	68fb      	ldr	r3, [r7, #12]
 8112ebc:	3310      	adds	r3, #16
 8112ebe:	697a      	ldr	r2, [r7, #20]
 8112ec0:	429a      	cmp	r2, r3
 8112ec2:	d20d      	bcs.n	8112ee0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8112ec4:	2301      	movs	r3, #1
 8112ec6:	e01d      	b.n	8112f04 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8112ec8:	79fb      	ldrb	r3, [r7, #7]
 8112eca:	2b00      	cmp	r3, #0
 8112ecc:	d006      	beq.n	8112edc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8112ece:	68fb      	ldr	r3, [r7, #12]
 8112ed0:	685a      	ldr	r2, [r3, #4]
 8112ed2:	68bb      	ldr	r3, [r7, #8]
 8112ed4:	425b      	negs	r3, r3
 8112ed6:	4413      	add	r3, r2
 8112ed8:	617b      	str	r3, [r7, #20]
 8112eda:	e001      	b.n	8112ee0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8112edc:	2301      	movs	r3, #1
 8112ede:	e011      	b.n	8112f04 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8112ee0:	68fb      	ldr	r3, [r7, #12]
 8112ee2:	697a      	ldr	r2, [r7, #20]
 8112ee4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8112ee6:	68fb      	ldr	r3, [r7, #12]
 8112ee8:	895a      	ldrh	r2, [r3, #10]
 8112eea:	8a7b      	ldrh	r3, [r7, #18]
 8112eec:	4413      	add	r3, r2
 8112eee:	b29a      	uxth	r2, r3
 8112ef0:	68fb      	ldr	r3, [r7, #12]
 8112ef2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8112ef4:	68fb      	ldr	r3, [r7, #12]
 8112ef6:	891a      	ldrh	r2, [r3, #8]
 8112ef8:	8a7b      	ldrh	r3, [r7, #18]
 8112efa:	4413      	add	r3, r2
 8112efc:	b29a      	uxth	r2, r3
 8112efe:	68fb      	ldr	r3, [r7, #12]
 8112f00:	811a      	strh	r2, [r3, #8]


  return 0;
 8112f02:	2300      	movs	r3, #0
}
 8112f04:	4618      	mov	r0, r3
 8112f06:	3718      	adds	r7, #24
 8112f08:	46bd      	mov	sp, r7
 8112f0a:	bd80      	pop	{r7, pc}
 8112f0c:	0811a858 	.word	0x0811a858
 8112f10:	0811a9f8 	.word	0x0811a9f8
 8112f14:	0811a8f4 	.word	0x0811a8f4

08112f18 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8112f18:	b580      	push	{r7, lr}
 8112f1a:	b082      	sub	sp, #8
 8112f1c:	af00      	add	r7, sp, #0
 8112f1e:	6078      	str	r0, [r7, #4]
 8112f20:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8112f22:	2200      	movs	r2, #0
 8112f24:	6839      	ldr	r1, [r7, #0]
 8112f26:	6878      	ldr	r0, [r7, #4]
 8112f28:	f7ff ff8e 	bl	8112e48 <pbuf_add_header_impl>
 8112f2c:	4603      	mov	r3, r0
}
 8112f2e:	4618      	mov	r0, r3
 8112f30:	3708      	adds	r7, #8
 8112f32:	46bd      	mov	sp, r7
 8112f34:	bd80      	pop	{r7, pc}
	...

08112f38 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8112f38:	b580      	push	{r7, lr}
 8112f3a:	b084      	sub	sp, #16
 8112f3c:	af00      	add	r7, sp, #0
 8112f3e:	6078      	str	r0, [r7, #4]
 8112f40:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8112f42:	687b      	ldr	r3, [r7, #4]
 8112f44:	2b00      	cmp	r3, #0
 8112f46:	d106      	bne.n	8112f56 <pbuf_remove_header+0x1e>
 8112f48:	4b20      	ldr	r3, [pc, #128]	; (8112fcc <pbuf_remove_header+0x94>)
 8112f4a:	f240 224b 	movw	r2, #587	; 0x24b
 8112f4e:	4920      	ldr	r1, [pc, #128]	; (8112fd0 <pbuf_remove_header+0x98>)
 8112f50:	4820      	ldr	r0, [pc, #128]	; (8112fd4 <pbuf_remove_header+0x9c>)
 8112f52:	f004 fc39 	bl	81177c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8112f56:	687b      	ldr	r3, [r7, #4]
 8112f58:	2b00      	cmp	r3, #0
 8112f5a:	d003      	beq.n	8112f64 <pbuf_remove_header+0x2c>
 8112f5c:	683b      	ldr	r3, [r7, #0]
 8112f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8112f62:	d301      	bcc.n	8112f68 <pbuf_remove_header+0x30>
    return 1;
 8112f64:	2301      	movs	r3, #1
 8112f66:	e02c      	b.n	8112fc2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8112f68:	683b      	ldr	r3, [r7, #0]
 8112f6a:	2b00      	cmp	r3, #0
 8112f6c:	d101      	bne.n	8112f72 <pbuf_remove_header+0x3a>
    return 0;
 8112f6e:	2300      	movs	r3, #0
 8112f70:	e027      	b.n	8112fc2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8112f72:	683b      	ldr	r3, [r7, #0]
 8112f74:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8112f76:	687b      	ldr	r3, [r7, #4]
 8112f78:	895b      	ldrh	r3, [r3, #10]
 8112f7a:	89fa      	ldrh	r2, [r7, #14]
 8112f7c:	429a      	cmp	r2, r3
 8112f7e:	d908      	bls.n	8112f92 <pbuf_remove_header+0x5a>
 8112f80:	4b12      	ldr	r3, [pc, #72]	; (8112fcc <pbuf_remove_header+0x94>)
 8112f82:	f240 2255 	movw	r2, #597	; 0x255
 8112f86:	4914      	ldr	r1, [pc, #80]	; (8112fd8 <pbuf_remove_header+0xa0>)
 8112f88:	4812      	ldr	r0, [pc, #72]	; (8112fd4 <pbuf_remove_header+0x9c>)
 8112f8a:	f004 fc1d 	bl	81177c8 <iprintf>
 8112f8e:	2301      	movs	r3, #1
 8112f90:	e017      	b.n	8112fc2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8112f92:	687b      	ldr	r3, [r7, #4]
 8112f94:	685b      	ldr	r3, [r3, #4]
 8112f96:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8112f98:	687b      	ldr	r3, [r7, #4]
 8112f9a:	685a      	ldr	r2, [r3, #4]
 8112f9c:	683b      	ldr	r3, [r7, #0]
 8112f9e:	441a      	add	r2, r3
 8112fa0:	687b      	ldr	r3, [r7, #4]
 8112fa2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8112fa4:	687b      	ldr	r3, [r7, #4]
 8112fa6:	895a      	ldrh	r2, [r3, #10]
 8112fa8:	89fb      	ldrh	r3, [r7, #14]
 8112faa:	1ad3      	subs	r3, r2, r3
 8112fac:	b29a      	uxth	r2, r3
 8112fae:	687b      	ldr	r3, [r7, #4]
 8112fb0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8112fb2:	687b      	ldr	r3, [r7, #4]
 8112fb4:	891a      	ldrh	r2, [r3, #8]
 8112fb6:	89fb      	ldrh	r3, [r7, #14]
 8112fb8:	1ad3      	subs	r3, r2, r3
 8112fba:	b29a      	uxth	r2, r3
 8112fbc:	687b      	ldr	r3, [r7, #4]
 8112fbe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8112fc0:	2300      	movs	r3, #0
}
 8112fc2:	4618      	mov	r0, r3
 8112fc4:	3710      	adds	r7, #16
 8112fc6:	46bd      	mov	sp, r7
 8112fc8:	bd80      	pop	{r7, pc}
 8112fca:	bf00      	nop
 8112fcc:	0811a858 	.word	0x0811a858
 8112fd0:	0811a9f8 	.word	0x0811a9f8
 8112fd4:	0811a8f4 	.word	0x0811a8f4
 8112fd8:	0811aa04 	.word	0x0811aa04

08112fdc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8112fdc:	b580      	push	{r7, lr}
 8112fde:	b082      	sub	sp, #8
 8112fe0:	af00      	add	r7, sp, #0
 8112fe2:	6078      	str	r0, [r7, #4]
 8112fe4:	460b      	mov	r3, r1
 8112fe6:	807b      	strh	r3, [r7, #2]
 8112fe8:	4613      	mov	r3, r2
 8112fea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8112fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8112ff0:	2b00      	cmp	r3, #0
 8112ff2:	da08      	bge.n	8113006 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8112ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8112ff8:	425b      	negs	r3, r3
 8112ffa:	4619      	mov	r1, r3
 8112ffc:	6878      	ldr	r0, [r7, #4]
 8112ffe:	f7ff ff9b 	bl	8112f38 <pbuf_remove_header>
 8113002:	4603      	mov	r3, r0
 8113004:	e007      	b.n	8113016 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8113006:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811300a:	787a      	ldrb	r2, [r7, #1]
 811300c:	4619      	mov	r1, r3
 811300e:	6878      	ldr	r0, [r7, #4]
 8113010:	f7ff ff1a 	bl	8112e48 <pbuf_add_header_impl>
 8113014:	4603      	mov	r3, r0
  }
}
 8113016:	4618      	mov	r0, r3
 8113018:	3708      	adds	r7, #8
 811301a:	46bd      	mov	sp, r7
 811301c:	bd80      	pop	{r7, pc}

0811301e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 811301e:	b580      	push	{r7, lr}
 8113020:	b082      	sub	sp, #8
 8113022:	af00      	add	r7, sp, #0
 8113024:	6078      	str	r0, [r7, #4]
 8113026:	460b      	mov	r3, r1
 8113028:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 811302a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811302e:	2201      	movs	r2, #1
 8113030:	4619      	mov	r1, r3
 8113032:	6878      	ldr	r0, [r7, #4]
 8113034:	f7ff ffd2 	bl	8112fdc <pbuf_header_impl>
 8113038:	4603      	mov	r3, r0
}
 811303a:	4618      	mov	r0, r3
 811303c:	3708      	adds	r7, #8
 811303e:	46bd      	mov	sp, r7
 8113040:	bd80      	pop	{r7, pc}
	...

08113044 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8113044:	b580      	push	{r7, lr}
 8113046:	b088      	sub	sp, #32
 8113048:	af00      	add	r7, sp, #0
 811304a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 811304c:	687b      	ldr	r3, [r7, #4]
 811304e:	2b00      	cmp	r3, #0
 8113050:	d10b      	bne.n	811306a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8113052:	687b      	ldr	r3, [r7, #4]
 8113054:	2b00      	cmp	r3, #0
 8113056:	d106      	bne.n	8113066 <pbuf_free+0x22>
 8113058:	4b3b      	ldr	r3, [pc, #236]	; (8113148 <pbuf_free+0x104>)
 811305a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 811305e:	493b      	ldr	r1, [pc, #236]	; (811314c <pbuf_free+0x108>)
 8113060:	483b      	ldr	r0, [pc, #236]	; (8113150 <pbuf_free+0x10c>)
 8113062:	f004 fbb1 	bl	81177c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8113066:	2300      	movs	r3, #0
 8113068:	e069      	b.n	811313e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 811306a:	2300      	movs	r3, #0
 811306c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 811306e:	e062      	b.n	8113136 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8113070:	f000 fb80 	bl	8113774 <sys_arch_protect>
 8113074:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8113076:	687b      	ldr	r3, [r7, #4]
 8113078:	7b9b      	ldrb	r3, [r3, #14]
 811307a:	2b00      	cmp	r3, #0
 811307c:	d106      	bne.n	811308c <pbuf_free+0x48>
 811307e:	4b32      	ldr	r3, [pc, #200]	; (8113148 <pbuf_free+0x104>)
 8113080:	f240 22f1 	movw	r2, #753	; 0x2f1
 8113084:	4933      	ldr	r1, [pc, #204]	; (8113154 <pbuf_free+0x110>)
 8113086:	4832      	ldr	r0, [pc, #200]	; (8113150 <pbuf_free+0x10c>)
 8113088:	f004 fb9e 	bl	81177c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 811308c:	687b      	ldr	r3, [r7, #4]
 811308e:	7b9b      	ldrb	r3, [r3, #14]
 8113090:	3b01      	subs	r3, #1
 8113092:	b2da      	uxtb	r2, r3
 8113094:	687b      	ldr	r3, [r7, #4]
 8113096:	739a      	strb	r2, [r3, #14]
 8113098:	687b      	ldr	r3, [r7, #4]
 811309a:	7b9b      	ldrb	r3, [r3, #14]
 811309c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 811309e:	69b8      	ldr	r0, [r7, #24]
 81130a0:	f000 fb76 	bl	8113790 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 81130a4:	7dfb      	ldrb	r3, [r7, #23]
 81130a6:	2b00      	cmp	r3, #0
 81130a8:	d143      	bne.n	8113132 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 81130aa:	687b      	ldr	r3, [r7, #4]
 81130ac:	681b      	ldr	r3, [r3, #0]
 81130ae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 81130b0:	687b      	ldr	r3, [r7, #4]
 81130b2:	7b1b      	ldrb	r3, [r3, #12]
 81130b4:	f003 030f 	and.w	r3, r3, #15
 81130b8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 81130ba:	687b      	ldr	r3, [r7, #4]
 81130bc:	7b5b      	ldrb	r3, [r3, #13]
 81130be:	f003 0302 	and.w	r3, r3, #2
 81130c2:	2b00      	cmp	r3, #0
 81130c4:	d011      	beq.n	81130ea <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 81130c6:	687b      	ldr	r3, [r7, #4]
 81130c8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 81130ca:	68bb      	ldr	r3, [r7, #8]
 81130cc:	691b      	ldr	r3, [r3, #16]
 81130ce:	2b00      	cmp	r3, #0
 81130d0:	d106      	bne.n	81130e0 <pbuf_free+0x9c>
 81130d2:	4b1d      	ldr	r3, [pc, #116]	; (8113148 <pbuf_free+0x104>)
 81130d4:	f240 22ff 	movw	r2, #767	; 0x2ff
 81130d8:	491f      	ldr	r1, [pc, #124]	; (8113158 <pbuf_free+0x114>)
 81130da:	481d      	ldr	r0, [pc, #116]	; (8113150 <pbuf_free+0x10c>)
 81130dc:	f004 fb74 	bl	81177c8 <iprintf>
        pc->custom_free_function(p);
 81130e0:	68bb      	ldr	r3, [r7, #8]
 81130e2:	691b      	ldr	r3, [r3, #16]
 81130e4:	6878      	ldr	r0, [r7, #4]
 81130e6:	4798      	blx	r3
 81130e8:	e01d      	b.n	8113126 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 81130ea:	7bfb      	ldrb	r3, [r7, #15]
 81130ec:	2b02      	cmp	r3, #2
 81130ee:	d104      	bne.n	81130fa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 81130f0:	6879      	ldr	r1, [r7, #4]
 81130f2:	2009      	movs	r0, #9
 81130f4:	f7ff f962 	bl	81123bc <memp_free>
 81130f8:	e015      	b.n	8113126 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 81130fa:	7bfb      	ldrb	r3, [r7, #15]
 81130fc:	2b01      	cmp	r3, #1
 81130fe:	d104      	bne.n	811310a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8113100:	6879      	ldr	r1, [r7, #4]
 8113102:	2008      	movs	r0, #8
 8113104:	f7ff f95a 	bl	81123bc <memp_free>
 8113108:	e00d      	b.n	8113126 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 811310a:	7bfb      	ldrb	r3, [r7, #15]
 811310c:	2b00      	cmp	r3, #0
 811310e:	d103      	bne.n	8113118 <pbuf_free+0xd4>
          mem_free(p);
 8113110:	6878      	ldr	r0, [r7, #4]
 8113112:	f7fe fd95 	bl	8111c40 <mem_free>
 8113116:	e006      	b.n	8113126 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8113118:	4b0b      	ldr	r3, [pc, #44]	; (8113148 <pbuf_free+0x104>)
 811311a:	f240 320f 	movw	r2, #783	; 0x30f
 811311e:	490f      	ldr	r1, [pc, #60]	; (811315c <pbuf_free+0x118>)
 8113120:	480b      	ldr	r0, [pc, #44]	; (8113150 <pbuf_free+0x10c>)
 8113122:	f004 fb51 	bl	81177c8 <iprintf>
        }
      }
      count++;
 8113126:	7ffb      	ldrb	r3, [r7, #31]
 8113128:	3301      	adds	r3, #1
 811312a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 811312c:	693b      	ldr	r3, [r7, #16]
 811312e:	607b      	str	r3, [r7, #4]
 8113130:	e001      	b.n	8113136 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8113132:	2300      	movs	r3, #0
 8113134:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8113136:	687b      	ldr	r3, [r7, #4]
 8113138:	2b00      	cmp	r3, #0
 811313a:	d199      	bne.n	8113070 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 811313c:	7ffb      	ldrb	r3, [r7, #31]
}
 811313e:	4618      	mov	r0, r3
 8113140:	3720      	adds	r7, #32
 8113142:	46bd      	mov	sp, r7
 8113144:	bd80      	pop	{r7, pc}
 8113146:	bf00      	nop
 8113148:	0811a858 	.word	0x0811a858
 811314c:	0811a9f8 	.word	0x0811a9f8
 8113150:	0811a8f4 	.word	0x0811a8f4
 8113154:	0811aa24 	.word	0x0811aa24
 8113158:	0811aa3c 	.word	0x0811aa3c
 811315c:	0811aa60 	.word	0x0811aa60

08113160 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8113160:	b480      	push	{r7}
 8113162:	b085      	sub	sp, #20
 8113164:	af00      	add	r7, sp, #0
 8113166:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8113168:	2300      	movs	r3, #0
 811316a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 811316c:	e005      	b.n	811317a <pbuf_clen+0x1a>
    ++len;
 811316e:	89fb      	ldrh	r3, [r7, #14]
 8113170:	3301      	adds	r3, #1
 8113172:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8113174:	687b      	ldr	r3, [r7, #4]
 8113176:	681b      	ldr	r3, [r3, #0]
 8113178:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811317a:	687b      	ldr	r3, [r7, #4]
 811317c:	2b00      	cmp	r3, #0
 811317e:	d1f6      	bne.n	811316e <pbuf_clen+0xe>
  }
  return len;
 8113180:	89fb      	ldrh	r3, [r7, #14]
}
 8113182:	4618      	mov	r0, r3
 8113184:	3714      	adds	r7, #20
 8113186:	46bd      	mov	sp, r7
 8113188:	f85d 7b04 	ldr.w	r7, [sp], #4
 811318c:	4770      	bx	lr
	...

08113190 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8113190:	b580      	push	{r7, lr}
 8113192:	b084      	sub	sp, #16
 8113194:	af00      	add	r7, sp, #0
 8113196:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8113198:	687b      	ldr	r3, [r7, #4]
 811319a:	2b00      	cmp	r3, #0
 811319c:	d016      	beq.n	81131cc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 811319e:	f000 fae9 	bl	8113774 <sys_arch_protect>
 81131a2:	60f8      	str	r0, [r7, #12]
 81131a4:	687b      	ldr	r3, [r7, #4]
 81131a6:	7b9b      	ldrb	r3, [r3, #14]
 81131a8:	3301      	adds	r3, #1
 81131aa:	b2da      	uxtb	r2, r3
 81131ac:	687b      	ldr	r3, [r7, #4]
 81131ae:	739a      	strb	r2, [r3, #14]
 81131b0:	68f8      	ldr	r0, [r7, #12]
 81131b2:	f000 faed 	bl	8113790 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 81131b6:	687b      	ldr	r3, [r7, #4]
 81131b8:	7b9b      	ldrb	r3, [r3, #14]
 81131ba:	2b00      	cmp	r3, #0
 81131bc:	d106      	bne.n	81131cc <pbuf_ref+0x3c>
 81131be:	4b05      	ldr	r3, [pc, #20]	; (81131d4 <pbuf_ref+0x44>)
 81131c0:	f240 3242 	movw	r2, #834	; 0x342
 81131c4:	4904      	ldr	r1, [pc, #16]	; (81131d8 <pbuf_ref+0x48>)
 81131c6:	4805      	ldr	r0, [pc, #20]	; (81131dc <pbuf_ref+0x4c>)
 81131c8:	f004 fafe 	bl	81177c8 <iprintf>
  }
}
 81131cc:	bf00      	nop
 81131ce:	3710      	adds	r7, #16
 81131d0:	46bd      	mov	sp, r7
 81131d2:	bd80      	pop	{r7, pc}
 81131d4:	0811a858 	.word	0x0811a858
 81131d8:	0811aa74 	.word	0x0811aa74
 81131dc:	0811a8f4 	.word	0x0811a8f4

081131e0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 81131e0:	b580      	push	{r7, lr}
 81131e2:	b084      	sub	sp, #16
 81131e4:	af00      	add	r7, sp, #0
 81131e6:	6078      	str	r0, [r7, #4]
 81131e8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 81131ea:	687b      	ldr	r3, [r7, #4]
 81131ec:	2b00      	cmp	r3, #0
 81131ee:	d002      	beq.n	81131f6 <pbuf_cat+0x16>
 81131f0:	683b      	ldr	r3, [r7, #0]
 81131f2:	2b00      	cmp	r3, #0
 81131f4:	d107      	bne.n	8113206 <pbuf_cat+0x26>
 81131f6:	4b20      	ldr	r3, [pc, #128]	; (8113278 <pbuf_cat+0x98>)
 81131f8:	f240 3259 	movw	r2, #857	; 0x359
 81131fc:	491f      	ldr	r1, [pc, #124]	; (811327c <pbuf_cat+0x9c>)
 81131fe:	4820      	ldr	r0, [pc, #128]	; (8113280 <pbuf_cat+0xa0>)
 8113200:	f004 fae2 	bl	81177c8 <iprintf>
 8113204:	e034      	b.n	8113270 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8113206:	687b      	ldr	r3, [r7, #4]
 8113208:	60fb      	str	r3, [r7, #12]
 811320a:	e00a      	b.n	8113222 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811320c:	68fb      	ldr	r3, [r7, #12]
 811320e:	891a      	ldrh	r2, [r3, #8]
 8113210:	683b      	ldr	r3, [r7, #0]
 8113212:	891b      	ldrh	r3, [r3, #8]
 8113214:	4413      	add	r3, r2
 8113216:	b29a      	uxth	r2, r3
 8113218:	68fb      	ldr	r3, [r7, #12]
 811321a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 811321c:	68fb      	ldr	r3, [r7, #12]
 811321e:	681b      	ldr	r3, [r3, #0]
 8113220:	60fb      	str	r3, [r7, #12]
 8113222:	68fb      	ldr	r3, [r7, #12]
 8113224:	681b      	ldr	r3, [r3, #0]
 8113226:	2b00      	cmp	r3, #0
 8113228:	d1f0      	bne.n	811320c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 811322a:	68fb      	ldr	r3, [r7, #12]
 811322c:	891a      	ldrh	r2, [r3, #8]
 811322e:	68fb      	ldr	r3, [r7, #12]
 8113230:	895b      	ldrh	r3, [r3, #10]
 8113232:	429a      	cmp	r2, r3
 8113234:	d006      	beq.n	8113244 <pbuf_cat+0x64>
 8113236:	4b10      	ldr	r3, [pc, #64]	; (8113278 <pbuf_cat+0x98>)
 8113238:	f240 3262 	movw	r2, #866	; 0x362
 811323c:	4911      	ldr	r1, [pc, #68]	; (8113284 <pbuf_cat+0xa4>)
 811323e:	4810      	ldr	r0, [pc, #64]	; (8113280 <pbuf_cat+0xa0>)
 8113240:	f004 fac2 	bl	81177c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8113244:	68fb      	ldr	r3, [r7, #12]
 8113246:	681b      	ldr	r3, [r3, #0]
 8113248:	2b00      	cmp	r3, #0
 811324a:	d006      	beq.n	811325a <pbuf_cat+0x7a>
 811324c:	4b0a      	ldr	r3, [pc, #40]	; (8113278 <pbuf_cat+0x98>)
 811324e:	f240 3263 	movw	r2, #867	; 0x363
 8113252:	490d      	ldr	r1, [pc, #52]	; (8113288 <pbuf_cat+0xa8>)
 8113254:	480a      	ldr	r0, [pc, #40]	; (8113280 <pbuf_cat+0xa0>)
 8113256:	f004 fab7 	bl	81177c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811325a:	68fb      	ldr	r3, [r7, #12]
 811325c:	891a      	ldrh	r2, [r3, #8]
 811325e:	683b      	ldr	r3, [r7, #0]
 8113260:	891b      	ldrh	r3, [r3, #8]
 8113262:	4413      	add	r3, r2
 8113264:	b29a      	uxth	r2, r3
 8113266:	68fb      	ldr	r3, [r7, #12]
 8113268:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 811326a:	68fb      	ldr	r3, [r7, #12]
 811326c:	683a      	ldr	r2, [r7, #0]
 811326e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8113270:	3710      	adds	r7, #16
 8113272:	46bd      	mov	sp, r7
 8113274:	bd80      	pop	{r7, pc}
 8113276:	bf00      	nop
 8113278:	0811a858 	.word	0x0811a858
 811327c:	0811aa88 	.word	0x0811aa88
 8113280:	0811a8f4 	.word	0x0811a8f4
 8113284:	0811aac0 	.word	0x0811aac0
 8113288:	0811aaf0 	.word	0x0811aaf0

0811328c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 811328c:	b580      	push	{r7, lr}
 811328e:	b082      	sub	sp, #8
 8113290:	af00      	add	r7, sp, #0
 8113292:	6078      	str	r0, [r7, #4]
 8113294:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8113296:	6839      	ldr	r1, [r7, #0]
 8113298:	6878      	ldr	r0, [r7, #4]
 811329a:	f7ff ffa1 	bl	81131e0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 811329e:	6838      	ldr	r0, [r7, #0]
 81132a0:	f7ff ff76 	bl	8113190 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 81132a4:	bf00      	nop
 81132a6:	3708      	adds	r7, #8
 81132a8:	46bd      	mov	sp, r7
 81132aa:	bd80      	pop	{r7, pc}

081132ac <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 81132ac:	b580      	push	{r7, lr}
 81132ae:	b086      	sub	sp, #24
 81132b0:	af00      	add	r7, sp, #0
 81132b2:	6078      	str	r0, [r7, #4]
 81132b4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 81132b6:	2300      	movs	r3, #0
 81132b8:	617b      	str	r3, [r7, #20]
 81132ba:	2300      	movs	r3, #0
 81132bc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 81132be:	687b      	ldr	r3, [r7, #4]
 81132c0:	2b00      	cmp	r3, #0
 81132c2:	d008      	beq.n	81132d6 <pbuf_copy+0x2a>
 81132c4:	683b      	ldr	r3, [r7, #0]
 81132c6:	2b00      	cmp	r3, #0
 81132c8:	d005      	beq.n	81132d6 <pbuf_copy+0x2a>
 81132ca:	687b      	ldr	r3, [r7, #4]
 81132cc:	891a      	ldrh	r2, [r3, #8]
 81132ce:	683b      	ldr	r3, [r7, #0]
 81132d0:	891b      	ldrh	r3, [r3, #8]
 81132d2:	429a      	cmp	r2, r3
 81132d4:	d209      	bcs.n	81132ea <pbuf_copy+0x3e>
 81132d6:	4b57      	ldr	r3, [pc, #348]	; (8113434 <pbuf_copy+0x188>)
 81132d8:	f240 32c9 	movw	r2, #969	; 0x3c9
 81132dc:	4956      	ldr	r1, [pc, #344]	; (8113438 <pbuf_copy+0x18c>)
 81132de:	4857      	ldr	r0, [pc, #348]	; (811343c <pbuf_copy+0x190>)
 81132e0:	f004 fa72 	bl	81177c8 <iprintf>
 81132e4:	f06f 030f 	mvn.w	r3, #15
 81132e8:	e09f      	b.n	811342a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 81132ea:	687b      	ldr	r3, [r7, #4]
 81132ec:	895b      	ldrh	r3, [r3, #10]
 81132ee:	461a      	mov	r2, r3
 81132f0:	697b      	ldr	r3, [r7, #20]
 81132f2:	1ad2      	subs	r2, r2, r3
 81132f4:	683b      	ldr	r3, [r7, #0]
 81132f6:	895b      	ldrh	r3, [r3, #10]
 81132f8:	4619      	mov	r1, r3
 81132fa:	693b      	ldr	r3, [r7, #16]
 81132fc:	1acb      	subs	r3, r1, r3
 81132fe:	429a      	cmp	r2, r3
 8113300:	d306      	bcc.n	8113310 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8113302:	683b      	ldr	r3, [r7, #0]
 8113304:	895b      	ldrh	r3, [r3, #10]
 8113306:	461a      	mov	r2, r3
 8113308:	693b      	ldr	r3, [r7, #16]
 811330a:	1ad3      	subs	r3, r2, r3
 811330c:	60fb      	str	r3, [r7, #12]
 811330e:	e005      	b.n	811331c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8113310:	687b      	ldr	r3, [r7, #4]
 8113312:	895b      	ldrh	r3, [r3, #10]
 8113314:	461a      	mov	r2, r3
 8113316:	697b      	ldr	r3, [r7, #20]
 8113318:	1ad3      	subs	r3, r2, r3
 811331a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 811331c:	687b      	ldr	r3, [r7, #4]
 811331e:	685a      	ldr	r2, [r3, #4]
 8113320:	697b      	ldr	r3, [r7, #20]
 8113322:	18d0      	adds	r0, r2, r3
 8113324:	683b      	ldr	r3, [r7, #0]
 8113326:	685a      	ldr	r2, [r3, #4]
 8113328:	693b      	ldr	r3, [r7, #16]
 811332a:	4413      	add	r3, r2
 811332c:	68fa      	ldr	r2, [r7, #12]
 811332e:	4619      	mov	r1, r3
 8113330:	f003 fd6f 	bl	8116e12 <memcpy>
    offset_to += len;
 8113334:	697a      	ldr	r2, [r7, #20]
 8113336:	68fb      	ldr	r3, [r7, #12]
 8113338:	4413      	add	r3, r2
 811333a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 811333c:	693a      	ldr	r2, [r7, #16]
 811333e:	68fb      	ldr	r3, [r7, #12]
 8113340:	4413      	add	r3, r2
 8113342:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8113344:	687b      	ldr	r3, [r7, #4]
 8113346:	895b      	ldrh	r3, [r3, #10]
 8113348:	461a      	mov	r2, r3
 811334a:	697b      	ldr	r3, [r7, #20]
 811334c:	4293      	cmp	r3, r2
 811334e:	d906      	bls.n	811335e <pbuf_copy+0xb2>
 8113350:	4b38      	ldr	r3, [pc, #224]	; (8113434 <pbuf_copy+0x188>)
 8113352:	f240 32d9 	movw	r2, #985	; 0x3d9
 8113356:	493a      	ldr	r1, [pc, #232]	; (8113440 <pbuf_copy+0x194>)
 8113358:	4838      	ldr	r0, [pc, #224]	; (811343c <pbuf_copy+0x190>)
 811335a:	f004 fa35 	bl	81177c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 811335e:	683b      	ldr	r3, [r7, #0]
 8113360:	895b      	ldrh	r3, [r3, #10]
 8113362:	461a      	mov	r2, r3
 8113364:	693b      	ldr	r3, [r7, #16]
 8113366:	4293      	cmp	r3, r2
 8113368:	d906      	bls.n	8113378 <pbuf_copy+0xcc>
 811336a:	4b32      	ldr	r3, [pc, #200]	; (8113434 <pbuf_copy+0x188>)
 811336c:	f240 32da 	movw	r2, #986	; 0x3da
 8113370:	4934      	ldr	r1, [pc, #208]	; (8113444 <pbuf_copy+0x198>)
 8113372:	4832      	ldr	r0, [pc, #200]	; (811343c <pbuf_copy+0x190>)
 8113374:	f004 fa28 	bl	81177c8 <iprintf>
    if (offset_from >= p_from->len) {
 8113378:	683b      	ldr	r3, [r7, #0]
 811337a:	895b      	ldrh	r3, [r3, #10]
 811337c:	461a      	mov	r2, r3
 811337e:	693b      	ldr	r3, [r7, #16]
 8113380:	4293      	cmp	r3, r2
 8113382:	d304      	bcc.n	811338e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8113384:	2300      	movs	r3, #0
 8113386:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8113388:	683b      	ldr	r3, [r7, #0]
 811338a:	681b      	ldr	r3, [r3, #0]
 811338c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 811338e:	687b      	ldr	r3, [r7, #4]
 8113390:	895b      	ldrh	r3, [r3, #10]
 8113392:	461a      	mov	r2, r3
 8113394:	697b      	ldr	r3, [r7, #20]
 8113396:	4293      	cmp	r3, r2
 8113398:	d114      	bne.n	81133c4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 811339a:	2300      	movs	r3, #0
 811339c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 811339e:	687b      	ldr	r3, [r7, #4]
 81133a0:	681b      	ldr	r3, [r3, #0]
 81133a2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 81133a4:	687b      	ldr	r3, [r7, #4]
 81133a6:	2b00      	cmp	r3, #0
 81133a8:	d10c      	bne.n	81133c4 <pbuf_copy+0x118>
 81133aa:	683b      	ldr	r3, [r7, #0]
 81133ac:	2b00      	cmp	r3, #0
 81133ae:	d009      	beq.n	81133c4 <pbuf_copy+0x118>
 81133b0:	4b20      	ldr	r3, [pc, #128]	; (8113434 <pbuf_copy+0x188>)
 81133b2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 81133b6:	4924      	ldr	r1, [pc, #144]	; (8113448 <pbuf_copy+0x19c>)
 81133b8:	4820      	ldr	r0, [pc, #128]	; (811343c <pbuf_copy+0x190>)
 81133ba:	f004 fa05 	bl	81177c8 <iprintf>
 81133be:	f06f 030f 	mvn.w	r3, #15
 81133c2:	e032      	b.n	811342a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 81133c4:	683b      	ldr	r3, [r7, #0]
 81133c6:	2b00      	cmp	r3, #0
 81133c8:	d013      	beq.n	81133f2 <pbuf_copy+0x146>
 81133ca:	683b      	ldr	r3, [r7, #0]
 81133cc:	895a      	ldrh	r2, [r3, #10]
 81133ce:	683b      	ldr	r3, [r7, #0]
 81133d0:	891b      	ldrh	r3, [r3, #8]
 81133d2:	429a      	cmp	r2, r3
 81133d4:	d10d      	bne.n	81133f2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 81133d6:	683b      	ldr	r3, [r7, #0]
 81133d8:	681b      	ldr	r3, [r3, #0]
 81133da:	2b00      	cmp	r3, #0
 81133dc:	d009      	beq.n	81133f2 <pbuf_copy+0x146>
 81133de:	4b15      	ldr	r3, [pc, #84]	; (8113434 <pbuf_copy+0x188>)
 81133e0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 81133e4:	4919      	ldr	r1, [pc, #100]	; (811344c <pbuf_copy+0x1a0>)
 81133e6:	4815      	ldr	r0, [pc, #84]	; (811343c <pbuf_copy+0x190>)
 81133e8:	f004 f9ee 	bl	81177c8 <iprintf>
 81133ec:	f06f 0305 	mvn.w	r3, #5
 81133f0:	e01b      	b.n	811342a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 81133f2:	687b      	ldr	r3, [r7, #4]
 81133f4:	2b00      	cmp	r3, #0
 81133f6:	d013      	beq.n	8113420 <pbuf_copy+0x174>
 81133f8:	687b      	ldr	r3, [r7, #4]
 81133fa:	895a      	ldrh	r2, [r3, #10]
 81133fc:	687b      	ldr	r3, [r7, #4]
 81133fe:	891b      	ldrh	r3, [r3, #8]
 8113400:	429a      	cmp	r2, r3
 8113402:	d10d      	bne.n	8113420 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8113404:	687b      	ldr	r3, [r7, #4]
 8113406:	681b      	ldr	r3, [r3, #0]
 8113408:	2b00      	cmp	r3, #0
 811340a:	d009      	beq.n	8113420 <pbuf_copy+0x174>
 811340c:	4b09      	ldr	r3, [pc, #36]	; (8113434 <pbuf_copy+0x188>)
 811340e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8113412:	490e      	ldr	r1, [pc, #56]	; (811344c <pbuf_copy+0x1a0>)
 8113414:	4809      	ldr	r0, [pc, #36]	; (811343c <pbuf_copy+0x190>)
 8113416:	f004 f9d7 	bl	81177c8 <iprintf>
 811341a:	f06f 0305 	mvn.w	r3, #5
 811341e:	e004      	b.n	811342a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8113420:	683b      	ldr	r3, [r7, #0]
 8113422:	2b00      	cmp	r3, #0
 8113424:	f47f af61 	bne.w	81132ea <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8113428:	2300      	movs	r3, #0
}
 811342a:	4618      	mov	r0, r3
 811342c:	3718      	adds	r7, #24
 811342e:	46bd      	mov	sp, r7
 8113430:	bd80      	pop	{r7, pc}
 8113432:	bf00      	nop
 8113434:	0811a858 	.word	0x0811a858
 8113438:	0811ab3c 	.word	0x0811ab3c
 811343c:	0811a8f4 	.word	0x0811a8f4
 8113440:	0811ab6c 	.word	0x0811ab6c
 8113444:	0811ab84 	.word	0x0811ab84
 8113448:	0811aba0 	.word	0x0811aba0
 811344c:	0811abb0 	.word	0x0811abb0

08113450 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8113450:	b580      	push	{r7, lr}
 8113452:	b088      	sub	sp, #32
 8113454:	af00      	add	r7, sp, #0
 8113456:	60f8      	str	r0, [r7, #12]
 8113458:	60b9      	str	r1, [r7, #8]
 811345a:	4613      	mov	r3, r2
 811345c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 811345e:	88fb      	ldrh	r3, [r7, #6]
 8113460:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8113462:	2300      	movs	r3, #0
 8113464:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8113466:	68fb      	ldr	r3, [r7, #12]
 8113468:	2b00      	cmp	r3, #0
 811346a:	d109      	bne.n	8113480 <pbuf_take+0x30>
 811346c:	4b3a      	ldr	r3, [pc, #232]	; (8113558 <pbuf_take+0x108>)
 811346e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8113472:	493a      	ldr	r1, [pc, #232]	; (811355c <pbuf_take+0x10c>)
 8113474:	483a      	ldr	r0, [pc, #232]	; (8113560 <pbuf_take+0x110>)
 8113476:	f004 f9a7 	bl	81177c8 <iprintf>
 811347a:	f06f 030f 	mvn.w	r3, #15
 811347e:	e067      	b.n	8113550 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8113480:	68bb      	ldr	r3, [r7, #8]
 8113482:	2b00      	cmp	r3, #0
 8113484:	d109      	bne.n	811349a <pbuf_take+0x4a>
 8113486:	4b34      	ldr	r3, [pc, #208]	; (8113558 <pbuf_take+0x108>)
 8113488:	f240 42b4 	movw	r2, #1204	; 0x4b4
 811348c:	4935      	ldr	r1, [pc, #212]	; (8113564 <pbuf_take+0x114>)
 811348e:	4834      	ldr	r0, [pc, #208]	; (8113560 <pbuf_take+0x110>)
 8113490:	f004 f99a 	bl	81177c8 <iprintf>
 8113494:	f06f 030f 	mvn.w	r3, #15
 8113498:	e05a      	b.n	8113550 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 811349a:	68fb      	ldr	r3, [r7, #12]
 811349c:	891b      	ldrh	r3, [r3, #8]
 811349e:	88fa      	ldrh	r2, [r7, #6]
 81134a0:	429a      	cmp	r2, r3
 81134a2:	d909      	bls.n	81134b8 <pbuf_take+0x68>
 81134a4:	4b2c      	ldr	r3, [pc, #176]	; (8113558 <pbuf_take+0x108>)
 81134a6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 81134aa:	492f      	ldr	r1, [pc, #188]	; (8113568 <pbuf_take+0x118>)
 81134ac:	482c      	ldr	r0, [pc, #176]	; (8113560 <pbuf_take+0x110>)
 81134ae:	f004 f98b 	bl	81177c8 <iprintf>
 81134b2:	f04f 33ff 	mov.w	r3, #4294967295
 81134b6:	e04b      	b.n	8113550 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 81134b8:	68fb      	ldr	r3, [r7, #12]
 81134ba:	2b00      	cmp	r3, #0
 81134bc:	d007      	beq.n	81134ce <pbuf_take+0x7e>
 81134be:	68bb      	ldr	r3, [r7, #8]
 81134c0:	2b00      	cmp	r3, #0
 81134c2:	d004      	beq.n	81134ce <pbuf_take+0x7e>
 81134c4:	68fb      	ldr	r3, [r7, #12]
 81134c6:	891b      	ldrh	r3, [r3, #8]
 81134c8:	88fa      	ldrh	r2, [r7, #6]
 81134ca:	429a      	cmp	r2, r3
 81134cc:	d902      	bls.n	81134d4 <pbuf_take+0x84>
    return ERR_ARG;
 81134ce:	f06f 030f 	mvn.w	r3, #15
 81134d2:	e03d      	b.n	8113550 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 81134d4:	68fb      	ldr	r3, [r7, #12]
 81134d6:	61fb      	str	r3, [r7, #28]
 81134d8:	e028      	b.n	811352c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 81134da:	69fb      	ldr	r3, [r7, #28]
 81134dc:	2b00      	cmp	r3, #0
 81134de:	d106      	bne.n	81134ee <pbuf_take+0x9e>
 81134e0:	4b1d      	ldr	r3, [pc, #116]	; (8113558 <pbuf_take+0x108>)
 81134e2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 81134e6:	4921      	ldr	r1, [pc, #132]	; (811356c <pbuf_take+0x11c>)
 81134e8:	481d      	ldr	r0, [pc, #116]	; (8113560 <pbuf_take+0x110>)
 81134ea:	f004 f96d 	bl	81177c8 <iprintf>
    buf_copy_len = total_copy_len;
 81134ee:	697b      	ldr	r3, [r7, #20]
 81134f0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 81134f2:	69fb      	ldr	r3, [r7, #28]
 81134f4:	895b      	ldrh	r3, [r3, #10]
 81134f6:	461a      	mov	r2, r3
 81134f8:	69bb      	ldr	r3, [r7, #24]
 81134fa:	4293      	cmp	r3, r2
 81134fc:	d902      	bls.n	8113504 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 81134fe:	69fb      	ldr	r3, [r7, #28]
 8113500:	895b      	ldrh	r3, [r3, #10]
 8113502:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8113504:	69fb      	ldr	r3, [r7, #28]
 8113506:	6858      	ldr	r0, [r3, #4]
 8113508:	68ba      	ldr	r2, [r7, #8]
 811350a:	693b      	ldr	r3, [r7, #16]
 811350c:	4413      	add	r3, r2
 811350e:	69ba      	ldr	r2, [r7, #24]
 8113510:	4619      	mov	r1, r3
 8113512:	f003 fc7e 	bl	8116e12 <memcpy>
    total_copy_len -= buf_copy_len;
 8113516:	697a      	ldr	r2, [r7, #20]
 8113518:	69bb      	ldr	r3, [r7, #24]
 811351a:	1ad3      	subs	r3, r2, r3
 811351c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 811351e:	693a      	ldr	r2, [r7, #16]
 8113520:	69bb      	ldr	r3, [r7, #24]
 8113522:	4413      	add	r3, r2
 8113524:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8113526:	69fb      	ldr	r3, [r7, #28]
 8113528:	681b      	ldr	r3, [r3, #0]
 811352a:	61fb      	str	r3, [r7, #28]
 811352c:	697b      	ldr	r3, [r7, #20]
 811352e:	2b00      	cmp	r3, #0
 8113530:	d1d3      	bne.n	81134da <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8113532:	697b      	ldr	r3, [r7, #20]
 8113534:	2b00      	cmp	r3, #0
 8113536:	d103      	bne.n	8113540 <pbuf_take+0xf0>
 8113538:	88fb      	ldrh	r3, [r7, #6]
 811353a:	693a      	ldr	r2, [r7, #16]
 811353c:	429a      	cmp	r2, r3
 811353e:	d006      	beq.n	811354e <pbuf_take+0xfe>
 8113540:	4b05      	ldr	r3, [pc, #20]	; (8113558 <pbuf_take+0x108>)
 8113542:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8113546:	490a      	ldr	r1, [pc, #40]	; (8113570 <pbuf_take+0x120>)
 8113548:	4805      	ldr	r0, [pc, #20]	; (8113560 <pbuf_take+0x110>)
 811354a:	f004 f93d 	bl	81177c8 <iprintf>
  return ERR_OK;
 811354e:	2300      	movs	r3, #0
}
 8113550:	4618      	mov	r0, r3
 8113552:	3720      	adds	r7, #32
 8113554:	46bd      	mov	sp, r7
 8113556:	bd80      	pop	{r7, pc}
 8113558:	0811a858 	.word	0x0811a858
 811355c:	0811ac6c 	.word	0x0811ac6c
 8113560:	0811a8f4 	.word	0x0811a8f4
 8113564:	0811ac84 	.word	0x0811ac84
 8113568:	0811aca0 	.word	0x0811aca0
 811356c:	0811acc0 	.word	0x0811acc0
 8113570:	0811acd8 	.word	0x0811acd8

08113574 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8113574:	b580      	push	{r7, lr}
 8113576:	b084      	sub	sp, #16
 8113578:	af00      	add	r7, sp, #0
 811357a:	4603      	mov	r3, r0
 811357c:	603a      	str	r2, [r7, #0]
 811357e:	71fb      	strb	r3, [r7, #7]
 8113580:	460b      	mov	r3, r1
 8113582:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8113584:	683b      	ldr	r3, [r7, #0]
 8113586:	8919      	ldrh	r1, [r3, #8]
 8113588:	88ba      	ldrh	r2, [r7, #4]
 811358a:	79fb      	ldrb	r3, [r7, #7]
 811358c:	4618      	mov	r0, r3
 811358e:	f7ff fa77 	bl	8112a80 <pbuf_alloc>
 8113592:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8113594:	68fb      	ldr	r3, [r7, #12]
 8113596:	2b00      	cmp	r3, #0
 8113598:	d101      	bne.n	811359e <pbuf_clone+0x2a>
    return NULL;
 811359a:	2300      	movs	r3, #0
 811359c:	e011      	b.n	81135c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 811359e:	6839      	ldr	r1, [r7, #0]
 81135a0:	68f8      	ldr	r0, [r7, #12]
 81135a2:	f7ff fe83 	bl	81132ac <pbuf_copy>
 81135a6:	4603      	mov	r3, r0
 81135a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 81135aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 81135ae:	2b00      	cmp	r3, #0
 81135b0:	d006      	beq.n	81135c0 <pbuf_clone+0x4c>
 81135b2:	4b06      	ldr	r3, [pc, #24]	; (81135cc <pbuf_clone+0x58>)
 81135b4:	f240 5224 	movw	r2, #1316	; 0x524
 81135b8:	4905      	ldr	r1, [pc, #20]	; (81135d0 <pbuf_clone+0x5c>)
 81135ba:	4806      	ldr	r0, [pc, #24]	; (81135d4 <pbuf_clone+0x60>)
 81135bc:	f004 f904 	bl	81177c8 <iprintf>
  return q;
 81135c0:	68fb      	ldr	r3, [r7, #12]
}
 81135c2:	4618      	mov	r0, r3
 81135c4:	3710      	adds	r7, #16
 81135c6:	46bd      	mov	sp, r7
 81135c8:	bd80      	pop	{r7, pc}
 81135ca:	bf00      	nop
 81135cc:	0811a858 	.word	0x0811a858
 81135d0:	0811ad08 	.word	0x0811ad08
 81135d4:	0811a8f4 	.word	0x0811a8f4

081135d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 81135d8:	b580      	push	{r7, lr}
 81135da:	b086      	sub	sp, #24
 81135dc:	af00      	add	r7, sp, #0
 81135de:	6078      	str	r0, [r7, #4]
 81135e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 81135e2:	683b      	ldr	r3, [r7, #0]
 81135e4:	60bb      	str	r3, [r7, #8]
 81135e6:	2304      	movs	r3, #4
 81135e8:	60fb      	str	r3, [r7, #12]
 81135ea:	2300      	movs	r3, #0
 81135ec:	613b      	str	r3, [r7, #16]
 81135ee:	2300      	movs	r3, #0
 81135f0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 81135f2:	f107 0308 	add.w	r3, r7, #8
 81135f6:	2100      	movs	r1, #0
 81135f8:	4618      	mov	r0, r3
 81135fa:	f7f9 f9a5 	bl	810c948 <osMessageCreate>
 81135fe:	4602      	mov	r2, r0
 8113600:	687b      	ldr	r3, [r7, #4]
 8113602:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8113604:	687b      	ldr	r3, [r7, #4]
 8113606:	681b      	ldr	r3, [r3, #0]
 8113608:	2b00      	cmp	r3, #0
 811360a:	d102      	bne.n	8113612 <sys_mbox_new+0x3a>
    return ERR_MEM;
 811360c:	f04f 33ff 	mov.w	r3, #4294967295
 8113610:	e000      	b.n	8113614 <sys_mbox_new+0x3c>

  return ERR_OK;
 8113612:	2300      	movs	r3, #0
}
 8113614:	4618      	mov	r0, r3
 8113616:	3718      	adds	r7, #24
 8113618:	46bd      	mov	sp, r7
 811361a:	bd80      	pop	{r7, pc}

0811361c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 811361c:	b580      	push	{r7, lr}
 811361e:	b08c      	sub	sp, #48	; 0x30
 8113620:	af00      	add	r7, sp, #0
 8113622:	61f8      	str	r0, [r7, #28]
 8113624:	61b9      	str	r1, [r7, #24]
 8113626:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8113628:	f7f8 ffcb 	bl	810c5c2 <osKernelSysTick>
 811362c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 811362e:	697b      	ldr	r3, [r7, #20]
 8113630:	2b00      	cmp	r3, #0
 8113632:	d017      	beq.n	8113664 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8113634:	69fb      	ldr	r3, [r7, #28]
 8113636:	6819      	ldr	r1, [r3, #0]
 8113638:	f107 0320 	add.w	r3, r7, #32
 811363c:	697a      	ldr	r2, [r7, #20]
 811363e:	4618      	mov	r0, r3
 8113640:	f7f9 f9aa 	bl	810c998 <osMessageGet>

    if(event.status == osEventMessage)
 8113644:	6a3b      	ldr	r3, [r7, #32]
 8113646:	2b10      	cmp	r3, #16
 8113648:	d109      	bne.n	811365e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 811364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811364c:	461a      	mov	r2, r3
 811364e:	69bb      	ldr	r3, [r7, #24]
 8113650:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8113652:	f7f8 ffb6 	bl	810c5c2 <osKernelSysTick>
 8113656:	4602      	mov	r2, r0
 8113658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811365a:	1ad3      	subs	r3, r2, r3
 811365c:	e019      	b.n	8113692 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 811365e:	f04f 33ff 	mov.w	r3, #4294967295
 8113662:	e016      	b.n	8113692 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8113664:	69fb      	ldr	r3, [r7, #28]
 8113666:	6819      	ldr	r1, [r3, #0]
 8113668:	463b      	mov	r3, r7
 811366a:	f04f 32ff 	mov.w	r2, #4294967295
 811366e:	4618      	mov	r0, r3
 8113670:	f7f9 f992 	bl	810c998 <osMessageGet>
 8113674:	f107 0320 	add.w	r3, r7, #32
 8113678:	463a      	mov	r2, r7
 811367a:	ca07      	ldmia	r2, {r0, r1, r2}
 811367c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8113680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113682:	461a      	mov	r2, r3
 8113684:	69bb      	ldr	r3, [r7, #24]
 8113686:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8113688:	f7f8 ff9b 	bl	810c5c2 <osKernelSysTick>
 811368c:	4602      	mov	r2, r0
 811368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8113690:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8113692:	4618      	mov	r0, r3
 8113694:	3730      	adds	r7, #48	; 0x30
 8113696:	46bd      	mov	sp, r7
 8113698:	bd80      	pop	{r7, pc}
	...

0811369c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 811369c:	b580      	push	{r7, lr}
 811369e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 81136a0:	4803      	ldr	r0, [pc, #12]	; (81136b0 <sys_init+0x14>)
 81136a2:	f7f8 fffe 	bl	810c6a2 <osMutexCreate>
 81136a6:	4603      	mov	r3, r0
 81136a8:	4a02      	ldr	r2, [pc, #8]	; (81136b4 <sys_init+0x18>)
 81136aa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 81136ac:	bf00      	nop
 81136ae:	bd80      	pop	{r7, pc}
 81136b0:	0811b788 	.word	0x0811b788
 81136b4:	100087d8 	.word	0x100087d8

081136b8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 81136b8:	b580      	push	{r7, lr}
 81136ba:	b084      	sub	sp, #16
 81136bc:	af00      	add	r7, sp, #0
 81136be:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 81136c0:	2300      	movs	r3, #0
 81136c2:	60bb      	str	r3, [r7, #8]
 81136c4:	2300      	movs	r3, #0
 81136c6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 81136c8:	f107 0308 	add.w	r3, r7, #8
 81136cc:	4618      	mov	r0, r3
 81136ce:	f7f8 ffe8 	bl	810c6a2 <osMutexCreate>
 81136d2:	4602      	mov	r2, r0
 81136d4:	687b      	ldr	r3, [r7, #4]
 81136d6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 81136d8:	687b      	ldr	r3, [r7, #4]
 81136da:	681b      	ldr	r3, [r3, #0]
 81136dc:	2b00      	cmp	r3, #0
 81136de:	d102      	bne.n	81136e6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 81136e0:	f04f 33ff 	mov.w	r3, #4294967295
 81136e4:	e000      	b.n	81136e8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 81136e6:	2300      	movs	r3, #0
}
 81136e8:	4618      	mov	r0, r3
 81136ea:	3710      	adds	r7, #16
 81136ec:	46bd      	mov	sp, r7
 81136ee:	bd80      	pop	{r7, pc}

081136f0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 81136f0:	b580      	push	{r7, lr}
 81136f2:	b082      	sub	sp, #8
 81136f4:	af00      	add	r7, sp, #0
 81136f6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 81136f8:	687b      	ldr	r3, [r7, #4]
 81136fa:	681b      	ldr	r3, [r3, #0]
 81136fc:	f04f 31ff 	mov.w	r1, #4294967295
 8113700:	4618      	mov	r0, r3
 8113702:	f7f8 ffe7 	bl	810c6d4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8113706:	bf00      	nop
 8113708:	3708      	adds	r7, #8
 811370a:	46bd      	mov	sp, r7
 811370c:	bd80      	pop	{r7, pc}

0811370e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 811370e:	b580      	push	{r7, lr}
 8113710:	b082      	sub	sp, #8
 8113712:	af00      	add	r7, sp, #0
 8113714:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8113716:	687b      	ldr	r3, [r7, #4]
 8113718:	681b      	ldr	r3, [r3, #0]
 811371a:	4618      	mov	r0, r3
 811371c:	f7f9 f828 	bl	810c770 <osMutexRelease>
}
 8113720:	bf00      	nop
 8113722:	3708      	adds	r7, #8
 8113724:	46bd      	mov	sp, r7
 8113726:	bd80      	pop	{r7, pc}

08113728 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8113728:	b580      	push	{r7, lr}
 811372a:	b08c      	sub	sp, #48	; 0x30
 811372c:	af00      	add	r7, sp, #0
 811372e:	60f8      	str	r0, [r7, #12]
 8113730:	60b9      	str	r1, [r7, #8]
 8113732:	607a      	str	r2, [r7, #4]
 8113734:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8113736:	f107 0314 	add.w	r3, r7, #20
 811373a:	2200      	movs	r2, #0
 811373c:	601a      	str	r2, [r3, #0]
 811373e:	605a      	str	r2, [r3, #4]
 8113740:	609a      	str	r2, [r3, #8]
 8113742:	60da      	str	r2, [r3, #12]
 8113744:	611a      	str	r2, [r3, #16]
 8113746:	615a      	str	r2, [r3, #20]
 8113748:	619a      	str	r2, [r3, #24]
 811374a:	68fb      	ldr	r3, [r7, #12]
 811374c:	617b      	str	r3, [r7, #20]
 811374e:	68bb      	ldr	r3, [r7, #8]
 8113750:	61bb      	str	r3, [r7, #24]
 8113752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8113754:	b21b      	sxth	r3, r3
 8113756:	83bb      	strh	r3, [r7, #28]
 8113758:	683b      	ldr	r3, [r7, #0]
 811375a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 811375c:	f107 0314 	add.w	r3, r7, #20
 8113760:	6879      	ldr	r1, [r7, #4]
 8113762:	4618      	mov	r0, r3
 8113764:	f7f8 ff3d 	bl	810c5e2 <osThreadCreate>
 8113768:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 811376a:	4618      	mov	r0, r3
 811376c:	3730      	adds	r7, #48	; 0x30
 811376e:	46bd      	mov	sp, r7
 8113770:	bd80      	pop	{r7, pc}
	...

08113774 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8113774:	b580      	push	{r7, lr}
 8113776:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8113778:	4b04      	ldr	r3, [pc, #16]	; (811378c <sys_arch_protect+0x18>)
 811377a:	681b      	ldr	r3, [r3, #0]
 811377c:	f04f 31ff 	mov.w	r1, #4294967295
 8113780:	4618      	mov	r0, r3
 8113782:	f7f8 ffa7 	bl	810c6d4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8113786:	2301      	movs	r3, #1
}
 8113788:	4618      	mov	r0, r3
 811378a:	bd80      	pop	{r7, pc}
 811378c:	100087d8 	.word	0x100087d8

08113790 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8113790:	b580      	push	{r7, lr}
 8113792:	b082      	sub	sp, #8
 8113794:	af00      	add	r7, sp, #0
 8113796:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8113798:	4b04      	ldr	r3, [pc, #16]	; (81137ac <sys_arch_unprotect+0x1c>)
 811379a:	681b      	ldr	r3, [r3, #0]
 811379c:	4618      	mov	r0, r3
 811379e:	f7f8 ffe7 	bl	810c770 <osMutexRelease>
}
 81137a2:	bf00      	nop
 81137a4:	3708      	adds	r7, #8
 81137a6:	46bd      	mov	sp, r7
 81137a8:	bd80      	pop	{r7, pc}
 81137aa:	bf00      	nop
 81137ac:	100087d8 	.word	0x100087d8

081137b0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 81137b0:	b580      	push	{r7, lr}
 81137b2:	b084      	sub	sp, #16
 81137b4:	af00      	add	r7, sp, #0
 81137b6:	6078      	str	r0, [r7, #4]
 81137b8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 81137ba:	f000 fa17 	bl	8113bec <sys_timeouts_sleeptime>
 81137be:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 81137c0:	68fb      	ldr	r3, [r7, #12]
 81137c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81137c6:	d10b      	bne.n	81137e0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 81137c8:	4813      	ldr	r0, [pc, #76]	; (8113818 <tcpip_timeouts_mbox_fetch+0x68>)
 81137ca:	f7ff ffa0 	bl	811370e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 81137ce:	2200      	movs	r2, #0
 81137d0:	6839      	ldr	r1, [r7, #0]
 81137d2:	6878      	ldr	r0, [r7, #4]
 81137d4:	f7ff ff22 	bl	811361c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 81137d8:	480f      	ldr	r0, [pc, #60]	; (8113818 <tcpip_timeouts_mbox_fetch+0x68>)
 81137da:	f7ff ff89 	bl	81136f0 <sys_mutex_lock>
    return;
 81137de:	e018      	b.n	8113812 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 81137e0:	68fb      	ldr	r3, [r7, #12]
 81137e2:	2b00      	cmp	r3, #0
 81137e4:	d102      	bne.n	81137ec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 81137e6:	f000 f9c7 	bl	8113b78 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 81137ea:	e7e6      	b.n	81137ba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 81137ec:	480a      	ldr	r0, [pc, #40]	; (8113818 <tcpip_timeouts_mbox_fetch+0x68>)
 81137ee:	f7ff ff8e 	bl	811370e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 81137f2:	68fa      	ldr	r2, [r7, #12]
 81137f4:	6839      	ldr	r1, [r7, #0]
 81137f6:	6878      	ldr	r0, [r7, #4]
 81137f8:	f7ff ff10 	bl	811361c <sys_arch_mbox_fetch>
 81137fc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 81137fe:	4806      	ldr	r0, [pc, #24]	; (8113818 <tcpip_timeouts_mbox_fetch+0x68>)
 8113800:	f7ff ff76 	bl	81136f0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8113804:	68bb      	ldr	r3, [r7, #8]
 8113806:	f1b3 3fff 	cmp.w	r3, #4294967295
 811380a:	d102      	bne.n	8113812 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 811380c:	f000 f9b4 	bl	8113b78 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8113810:	e7d3      	b.n	81137ba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8113812:	3710      	adds	r7, #16
 8113814:	46bd      	mov	sp, r7
 8113816:	bd80      	pop	{r7, pc}
 8113818:	100087dc 	.word	0x100087dc

0811381c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 811381c:	b580      	push	{r7, lr}
 811381e:	b084      	sub	sp, #16
 8113820:	af00      	add	r7, sp, #0
 8113822:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8113824:	4810      	ldr	r0, [pc, #64]	; (8113868 <tcpip_thread+0x4c>)
 8113826:	f7ff ff63 	bl	81136f0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 811382a:	4b10      	ldr	r3, [pc, #64]	; (811386c <tcpip_thread+0x50>)
 811382c:	681b      	ldr	r3, [r3, #0]
 811382e:	2b00      	cmp	r3, #0
 8113830:	d005      	beq.n	811383e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8113832:	4b0e      	ldr	r3, [pc, #56]	; (811386c <tcpip_thread+0x50>)
 8113834:	681b      	ldr	r3, [r3, #0]
 8113836:	4a0e      	ldr	r2, [pc, #56]	; (8113870 <tcpip_thread+0x54>)
 8113838:	6812      	ldr	r2, [r2, #0]
 811383a:	4610      	mov	r0, r2
 811383c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 811383e:	f107 030c 	add.w	r3, r7, #12
 8113842:	4619      	mov	r1, r3
 8113844:	480b      	ldr	r0, [pc, #44]	; (8113874 <tcpip_thread+0x58>)
 8113846:	f7ff ffb3 	bl	81137b0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 811384a:	68fb      	ldr	r3, [r7, #12]
 811384c:	2b00      	cmp	r3, #0
 811384e:	d106      	bne.n	811385e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8113850:	4b09      	ldr	r3, [pc, #36]	; (8113878 <tcpip_thread+0x5c>)
 8113852:	2291      	movs	r2, #145	; 0x91
 8113854:	4909      	ldr	r1, [pc, #36]	; (811387c <tcpip_thread+0x60>)
 8113856:	480a      	ldr	r0, [pc, #40]	; (8113880 <tcpip_thread+0x64>)
 8113858:	f003 ffb6 	bl	81177c8 <iprintf>
      continue;
 811385c:	e003      	b.n	8113866 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 811385e:	68fb      	ldr	r3, [r7, #12]
 8113860:	4618      	mov	r0, r3
 8113862:	f000 f80f 	bl	8113884 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8113866:	e7ea      	b.n	811383e <tcpip_thread+0x22>
 8113868:	100087dc 	.word	0x100087dc
 811386c:	10005948 	.word	0x10005948
 8113870:	1000594c 	.word	0x1000594c
 8113874:	10005950 	.word	0x10005950
 8113878:	0811ad1c 	.word	0x0811ad1c
 811387c:	0811ad88 	.word	0x0811ad88
 8113880:	0811ada8 	.word	0x0811ada8

08113884 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8113884:	b580      	push	{r7, lr}
 8113886:	b082      	sub	sp, #8
 8113888:	af00      	add	r7, sp, #0
 811388a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 811388c:	687b      	ldr	r3, [r7, #4]
 811388e:	781b      	ldrb	r3, [r3, #0]
 8113890:	2b02      	cmp	r3, #2
 8113892:	d026      	beq.n	81138e2 <tcpip_thread_handle_msg+0x5e>
 8113894:	2b02      	cmp	r3, #2
 8113896:	dc2b      	bgt.n	81138f0 <tcpip_thread_handle_msg+0x6c>
 8113898:	2b00      	cmp	r3, #0
 811389a:	d002      	beq.n	81138a2 <tcpip_thread_handle_msg+0x1e>
 811389c:	2b01      	cmp	r3, #1
 811389e:	d015      	beq.n	81138cc <tcpip_thread_handle_msg+0x48>
 81138a0:	e026      	b.n	81138f0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 81138a2:	687b      	ldr	r3, [r7, #4]
 81138a4:	68db      	ldr	r3, [r3, #12]
 81138a6:	687a      	ldr	r2, [r7, #4]
 81138a8:	6850      	ldr	r0, [r2, #4]
 81138aa:	687a      	ldr	r2, [r7, #4]
 81138ac:	6892      	ldr	r2, [r2, #8]
 81138ae:	4611      	mov	r1, r2
 81138b0:	4798      	blx	r3
 81138b2:	4603      	mov	r3, r0
 81138b4:	2b00      	cmp	r3, #0
 81138b6:	d004      	beq.n	81138c2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 81138b8:	687b      	ldr	r3, [r7, #4]
 81138ba:	685b      	ldr	r3, [r3, #4]
 81138bc:	4618      	mov	r0, r3
 81138be:	f7ff fbc1 	bl	8113044 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 81138c2:	6879      	ldr	r1, [r7, #4]
 81138c4:	2006      	movs	r0, #6
 81138c6:	f7fe fd79 	bl	81123bc <memp_free>
      break;
 81138ca:	e018      	b.n	81138fe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 81138cc:	687b      	ldr	r3, [r7, #4]
 81138ce:	685b      	ldr	r3, [r3, #4]
 81138d0:	687a      	ldr	r2, [r7, #4]
 81138d2:	6892      	ldr	r2, [r2, #8]
 81138d4:	4610      	mov	r0, r2
 81138d6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 81138d8:	6879      	ldr	r1, [r7, #4]
 81138da:	2005      	movs	r0, #5
 81138dc:	f7fe fd6e 	bl	81123bc <memp_free>
      break;
 81138e0:	e00d      	b.n	81138fe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 81138e2:	687b      	ldr	r3, [r7, #4]
 81138e4:	685b      	ldr	r3, [r3, #4]
 81138e6:	687a      	ldr	r2, [r7, #4]
 81138e8:	6892      	ldr	r2, [r2, #8]
 81138ea:	4610      	mov	r0, r2
 81138ec:	4798      	blx	r3
      break;
 81138ee:	e006      	b.n	81138fe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 81138f0:	4b05      	ldr	r3, [pc, #20]	; (8113908 <tcpip_thread_handle_msg+0x84>)
 81138f2:	22cf      	movs	r2, #207	; 0xcf
 81138f4:	4905      	ldr	r1, [pc, #20]	; (811390c <tcpip_thread_handle_msg+0x88>)
 81138f6:	4806      	ldr	r0, [pc, #24]	; (8113910 <tcpip_thread_handle_msg+0x8c>)
 81138f8:	f003 ff66 	bl	81177c8 <iprintf>
      break;
 81138fc:	bf00      	nop
  }
}
 81138fe:	bf00      	nop
 8113900:	3708      	adds	r7, #8
 8113902:	46bd      	mov	sp, r7
 8113904:	bd80      	pop	{r7, pc}
 8113906:	bf00      	nop
 8113908:	0811ad1c 	.word	0x0811ad1c
 811390c:	0811ad88 	.word	0x0811ad88
 8113910:	0811ada8 	.word	0x0811ada8

08113914 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8113914:	b580      	push	{r7, lr}
 8113916:	b084      	sub	sp, #16
 8113918:	af02      	add	r7, sp, #8
 811391a:	6078      	str	r0, [r7, #4]
 811391c:	6039      	str	r1, [r7, #0]
  lwip_init();
 811391e:	f7fc ff1d 	bl	811075c <lwip_init>

  tcpip_init_done = initfunc;
 8113922:	4a17      	ldr	r2, [pc, #92]	; (8113980 <tcpip_init+0x6c>)
 8113924:	687b      	ldr	r3, [r7, #4]
 8113926:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8113928:	4a16      	ldr	r2, [pc, #88]	; (8113984 <tcpip_init+0x70>)
 811392a:	683b      	ldr	r3, [r7, #0]
 811392c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 811392e:	2106      	movs	r1, #6
 8113930:	4815      	ldr	r0, [pc, #84]	; (8113988 <tcpip_init+0x74>)
 8113932:	f7ff fe51 	bl	81135d8 <sys_mbox_new>
 8113936:	4603      	mov	r3, r0
 8113938:	2b00      	cmp	r3, #0
 811393a:	d006      	beq.n	811394a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 811393c:	4b13      	ldr	r3, [pc, #76]	; (811398c <tcpip_init+0x78>)
 811393e:	f240 2261 	movw	r2, #609	; 0x261
 8113942:	4913      	ldr	r1, [pc, #76]	; (8113990 <tcpip_init+0x7c>)
 8113944:	4813      	ldr	r0, [pc, #76]	; (8113994 <tcpip_init+0x80>)
 8113946:	f003 ff3f 	bl	81177c8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 811394a:	4813      	ldr	r0, [pc, #76]	; (8113998 <tcpip_init+0x84>)
 811394c:	f7ff feb4 	bl	81136b8 <sys_mutex_new>
 8113950:	4603      	mov	r3, r0
 8113952:	2b00      	cmp	r3, #0
 8113954:	d006      	beq.n	8113964 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8113956:	4b0d      	ldr	r3, [pc, #52]	; (811398c <tcpip_init+0x78>)
 8113958:	f240 2265 	movw	r2, #613	; 0x265
 811395c:	490f      	ldr	r1, [pc, #60]	; (811399c <tcpip_init+0x88>)
 811395e:	480d      	ldr	r0, [pc, #52]	; (8113994 <tcpip_init+0x80>)
 8113960:	f003 ff32 	bl	81177c8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8113964:	2300      	movs	r3, #0
 8113966:	9300      	str	r3, [sp, #0]
 8113968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 811396c:	2200      	movs	r2, #0
 811396e:	490c      	ldr	r1, [pc, #48]	; (81139a0 <tcpip_init+0x8c>)
 8113970:	480c      	ldr	r0, [pc, #48]	; (81139a4 <tcpip_init+0x90>)
 8113972:	f7ff fed9 	bl	8113728 <sys_thread_new>
}
 8113976:	bf00      	nop
 8113978:	3708      	adds	r7, #8
 811397a:	46bd      	mov	sp, r7
 811397c:	bd80      	pop	{r7, pc}
 811397e:	bf00      	nop
 8113980:	10005948 	.word	0x10005948
 8113984:	1000594c 	.word	0x1000594c
 8113988:	10005950 	.word	0x10005950
 811398c:	0811ad1c 	.word	0x0811ad1c
 8113990:	0811ade0 	.word	0x0811ade0
 8113994:	0811ada8 	.word	0x0811ada8
 8113998:	100087dc 	.word	0x100087dc
 811399c:	0811ae04 	.word	0x0811ae04
 81139a0:	0811381d 	.word	0x0811381d
 81139a4:	0811ae28 	.word	0x0811ae28

081139a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 81139a8:	b580      	push	{r7, lr}
 81139aa:	b086      	sub	sp, #24
 81139ac:	af00      	add	r7, sp, #0
 81139ae:	60f8      	str	r0, [r7, #12]
 81139b0:	60b9      	str	r1, [r7, #8]
 81139b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 81139b4:	2007      	movs	r0, #7
 81139b6:	f7fe fc8b 	bl	81122d0 <memp_malloc>
 81139ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 81139bc:	693b      	ldr	r3, [r7, #16]
 81139be:	2b00      	cmp	r3, #0
 81139c0:	d109      	bne.n	81139d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 81139c2:	693b      	ldr	r3, [r7, #16]
 81139c4:	2b00      	cmp	r3, #0
 81139c6:	d151      	bne.n	8113a6c <sys_timeout_abs+0xc4>
 81139c8:	4b2a      	ldr	r3, [pc, #168]	; (8113a74 <sys_timeout_abs+0xcc>)
 81139ca:	22be      	movs	r2, #190	; 0xbe
 81139cc:	492a      	ldr	r1, [pc, #168]	; (8113a78 <sys_timeout_abs+0xd0>)
 81139ce:	482b      	ldr	r0, [pc, #172]	; (8113a7c <sys_timeout_abs+0xd4>)
 81139d0:	f003 fefa 	bl	81177c8 <iprintf>
    return;
 81139d4:	e04a      	b.n	8113a6c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 81139d6:	693b      	ldr	r3, [r7, #16]
 81139d8:	2200      	movs	r2, #0
 81139da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 81139dc:	693b      	ldr	r3, [r7, #16]
 81139de:	68ba      	ldr	r2, [r7, #8]
 81139e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 81139e2:	693b      	ldr	r3, [r7, #16]
 81139e4:	687a      	ldr	r2, [r7, #4]
 81139e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 81139e8:	693b      	ldr	r3, [r7, #16]
 81139ea:	68fa      	ldr	r2, [r7, #12]
 81139ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 81139ee:	4b24      	ldr	r3, [pc, #144]	; (8113a80 <sys_timeout_abs+0xd8>)
 81139f0:	681b      	ldr	r3, [r3, #0]
 81139f2:	2b00      	cmp	r3, #0
 81139f4:	d103      	bne.n	81139fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 81139f6:	4a22      	ldr	r2, [pc, #136]	; (8113a80 <sys_timeout_abs+0xd8>)
 81139f8:	693b      	ldr	r3, [r7, #16]
 81139fa:	6013      	str	r3, [r2, #0]
    return;
 81139fc:	e037      	b.n	8113a6e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 81139fe:	693b      	ldr	r3, [r7, #16]
 8113a00:	685a      	ldr	r2, [r3, #4]
 8113a02:	4b1f      	ldr	r3, [pc, #124]	; (8113a80 <sys_timeout_abs+0xd8>)
 8113a04:	681b      	ldr	r3, [r3, #0]
 8113a06:	685b      	ldr	r3, [r3, #4]
 8113a08:	1ad3      	subs	r3, r2, r3
 8113a0a:	0fdb      	lsrs	r3, r3, #31
 8113a0c:	f003 0301 	and.w	r3, r3, #1
 8113a10:	b2db      	uxtb	r3, r3
 8113a12:	2b00      	cmp	r3, #0
 8113a14:	d007      	beq.n	8113a26 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8113a16:	4b1a      	ldr	r3, [pc, #104]	; (8113a80 <sys_timeout_abs+0xd8>)
 8113a18:	681a      	ldr	r2, [r3, #0]
 8113a1a:	693b      	ldr	r3, [r7, #16]
 8113a1c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8113a1e:	4a18      	ldr	r2, [pc, #96]	; (8113a80 <sys_timeout_abs+0xd8>)
 8113a20:	693b      	ldr	r3, [r7, #16]
 8113a22:	6013      	str	r3, [r2, #0]
 8113a24:	e023      	b.n	8113a6e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8113a26:	4b16      	ldr	r3, [pc, #88]	; (8113a80 <sys_timeout_abs+0xd8>)
 8113a28:	681b      	ldr	r3, [r3, #0]
 8113a2a:	617b      	str	r3, [r7, #20]
 8113a2c:	e01a      	b.n	8113a64 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8113a2e:	697b      	ldr	r3, [r7, #20]
 8113a30:	681b      	ldr	r3, [r3, #0]
 8113a32:	2b00      	cmp	r3, #0
 8113a34:	d00b      	beq.n	8113a4e <sys_timeout_abs+0xa6>
 8113a36:	693b      	ldr	r3, [r7, #16]
 8113a38:	685a      	ldr	r2, [r3, #4]
 8113a3a:	697b      	ldr	r3, [r7, #20]
 8113a3c:	681b      	ldr	r3, [r3, #0]
 8113a3e:	685b      	ldr	r3, [r3, #4]
 8113a40:	1ad3      	subs	r3, r2, r3
 8113a42:	0fdb      	lsrs	r3, r3, #31
 8113a44:	f003 0301 	and.w	r3, r3, #1
 8113a48:	b2db      	uxtb	r3, r3
 8113a4a:	2b00      	cmp	r3, #0
 8113a4c:	d007      	beq.n	8113a5e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8113a4e:	697b      	ldr	r3, [r7, #20]
 8113a50:	681a      	ldr	r2, [r3, #0]
 8113a52:	693b      	ldr	r3, [r7, #16]
 8113a54:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8113a56:	697b      	ldr	r3, [r7, #20]
 8113a58:	693a      	ldr	r2, [r7, #16]
 8113a5a:	601a      	str	r2, [r3, #0]
        break;
 8113a5c:	e007      	b.n	8113a6e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8113a5e:	697b      	ldr	r3, [r7, #20]
 8113a60:	681b      	ldr	r3, [r3, #0]
 8113a62:	617b      	str	r3, [r7, #20]
 8113a64:	697b      	ldr	r3, [r7, #20]
 8113a66:	2b00      	cmp	r3, #0
 8113a68:	d1e1      	bne.n	8113a2e <sys_timeout_abs+0x86>
 8113a6a:	e000      	b.n	8113a6e <sys_timeout_abs+0xc6>
    return;
 8113a6c:	bf00      	nop
      }
    }
  }
}
 8113a6e:	3718      	adds	r7, #24
 8113a70:	46bd      	mov	sp, r7
 8113a72:	bd80      	pop	{r7, pc}
 8113a74:	0811ae38 	.word	0x0811ae38
 8113a78:	0811aea8 	.word	0x0811aea8
 8113a7c:	0811aee8 	.word	0x0811aee8
 8113a80:	10005954 	.word	0x10005954

08113a84 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8113a84:	b580      	push	{r7, lr}
 8113a86:	b086      	sub	sp, #24
 8113a88:	af00      	add	r7, sp, #0
 8113a8a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8113a8c:	687b      	ldr	r3, [r7, #4]
 8113a8e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8113a90:	697b      	ldr	r3, [r7, #20]
 8113a92:	685b      	ldr	r3, [r3, #4]
 8113a94:	4798      	blx	r3

  now = sys_now();
 8113a96:	f001 f983 	bl	8114da0 <sys_now>
 8113a9a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8113a9c:	697b      	ldr	r3, [r7, #20]
 8113a9e:	681a      	ldr	r2, [r3, #0]
 8113aa0:	4b0f      	ldr	r3, [pc, #60]	; (8113ae0 <lwip_cyclic_timer+0x5c>)
 8113aa2:	681b      	ldr	r3, [r3, #0]
 8113aa4:	4413      	add	r3, r2
 8113aa6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8113aa8:	68fa      	ldr	r2, [r7, #12]
 8113aaa:	693b      	ldr	r3, [r7, #16]
 8113aac:	1ad3      	subs	r3, r2, r3
 8113aae:	0fdb      	lsrs	r3, r3, #31
 8113ab0:	f003 0301 	and.w	r3, r3, #1
 8113ab4:	b2db      	uxtb	r3, r3
 8113ab6:	2b00      	cmp	r3, #0
 8113ab8:	d009      	beq.n	8113ace <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8113aba:	697b      	ldr	r3, [r7, #20]
 8113abc:	681a      	ldr	r2, [r3, #0]
 8113abe:	693b      	ldr	r3, [r7, #16]
 8113ac0:	4413      	add	r3, r2
 8113ac2:	687a      	ldr	r2, [r7, #4]
 8113ac4:	4907      	ldr	r1, [pc, #28]	; (8113ae4 <lwip_cyclic_timer+0x60>)
 8113ac6:	4618      	mov	r0, r3
 8113ac8:	f7ff ff6e 	bl	81139a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8113acc:	e004      	b.n	8113ad8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8113ace:	687a      	ldr	r2, [r7, #4]
 8113ad0:	4904      	ldr	r1, [pc, #16]	; (8113ae4 <lwip_cyclic_timer+0x60>)
 8113ad2:	68f8      	ldr	r0, [r7, #12]
 8113ad4:	f7ff ff68 	bl	81139a8 <sys_timeout_abs>
}
 8113ad8:	bf00      	nop
 8113ada:	3718      	adds	r7, #24
 8113adc:	46bd      	mov	sp, r7
 8113ade:	bd80      	pop	{r7, pc}
 8113ae0:	10005958 	.word	0x10005958
 8113ae4:	08113a85 	.word	0x08113a85

08113ae8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8113ae8:	b580      	push	{r7, lr}
 8113aea:	b082      	sub	sp, #8
 8113aec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8113aee:	2300      	movs	r3, #0
 8113af0:	607b      	str	r3, [r7, #4]
 8113af2:	e00e      	b.n	8113b12 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8113af4:	4a0b      	ldr	r2, [pc, #44]	; (8113b24 <sys_timeouts_init+0x3c>)
 8113af6:	687b      	ldr	r3, [r7, #4]
 8113af8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8113afc:	687b      	ldr	r3, [r7, #4]
 8113afe:	00db      	lsls	r3, r3, #3
 8113b00:	4a08      	ldr	r2, [pc, #32]	; (8113b24 <sys_timeouts_init+0x3c>)
 8113b02:	4413      	add	r3, r2
 8113b04:	461a      	mov	r2, r3
 8113b06:	4908      	ldr	r1, [pc, #32]	; (8113b28 <sys_timeouts_init+0x40>)
 8113b08:	f000 f810 	bl	8113b2c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8113b0c:	687b      	ldr	r3, [r7, #4]
 8113b0e:	3301      	adds	r3, #1
 8113b10:	607b      	str	r3, [r7, #4]
 8113b12:	687b      	ldr	r3, [r7, #4]
 8113b14:	2b01      	cmp	r3, #1
 8113b16:	d9ed      	bls.n	8113af4 <sys_timeouts_init+0xc>
  }
}
 8113b18:	bf00      	nop
 8113b1a:	bf00      	nop
 8113b1c:	3708      	adds	r7, #8
 8113b1e:	46bd      	mov	sp, r7
 8113b20:	bd80      	pop	{r7, pc}
 8113b22:	bf00      	nop
 8113b24:	0811b790 	.word	0x0811b790
 8113b28:	08113a85 	.word	0x08113a85

08113b2c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8113b2c:	b580      	push	{r7, lr}
 8113b2e:	b086      	sub	sp, #24
 8113b30:	af00      	add	r7, sp, #0
 8113b32:	60f8      	str	r0, [r7, #12]
 8113b34:	60b9      	str	r1, [r7, #8]
 8113b36:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8113b38:	68fb      	ldr	r3, [r7, #12]
 8113b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8113b3e:	d306      	bcc.n	8113b4e <sys_timeout+0x22>
 8113b40:	4b0a      	ldr	r3, [pc, #40]	; (8113b6c <sys_timeout+0x40>)
 8113b42:	f240 1229 	movw	r2, #297	; 0x129
 8113b46:	490a      	ldr	r1, [pc, #40]	; (8113b70 <sys_timeout+0x44>)
 8113b48:	480a      	ldr	r0, [pc, #40]	; (8113b74 <sys_timeout+0x48>)
 8113b4a:	f003 fe3d 	bl	81177c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8113b4e:	f001 f927 	bl	8114da0 <sys_now>
 8113b52:	4602      	mov	r2, r0
 8113b54:	68fb      	ldr	r3, [r7, #12]
 8113b56:	4413      	add	r3, r2
 8113b58:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8113b5a:	687a      	ldr	r2, [r7, #4]
 8113b5c:	68b9      	ldr	r1, [r7, #8]
 8113b5e:	6978      	ldr	r0, [r7, #20]
 8113b60:	f7ff ff22 	bl	81139a8 <sys_timeout_abs>
#endif
}
 8113b64:	bf00      	nop
 8113b66:	3718      	adds	r7, #24
 8113b68:	46bd      	mov	sp, r7
 8113b6a:	bd80      	pop	{r7, pc}
 8113b6c:	0811ae38 	.word	0x0811ae38
 8113b70:	0811af10 	.word	0x0811af10
 8113b74:	0811aee8 	.word	0x0811aee8

08113b78 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8113b78:	b580      	push	{r7, lr}
 8113b7a:	b084      	sub	sp, #16
 8113b7c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8113b7e:	f001 f90f 	bl	8114da0 <sys_now>
 8113b82:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8113b84:	4b17      	ldr	r3, [pc, #92]	; (8113be4 <sys_check_timeouts+0x6c>)
 8113b86:	681b      	ldr	r3, [r3, #0]
 8113b88:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8113b8a:	68bb      	ldr	r3, [r7, #8]
 8113b8c:	2b00      	cmp	r3, #0
 8113b8e:	d022      	beq.n	8113bd6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8113b90:	68bb      	ldr	r3, [r7, #8]
 8113b92:	685b      	ldr	r3, [r3, #4]
 8113b94:	68fa      	ldr	r2, [r7, #12]
 8113b96:	1ad3      	subs	r3, r2, r3
 8113b98:	0fdb      	lsrs	r3, r3, #31
 8113b9a:	f003 0301 	and.w	r3, r3, #1
 8113b9e:	b2db      	uxtb	r3, r3
 8113ba0:	2b00      	cmp	r3, #0
 8113ba2:	d11a      	bne.n	8113bda <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8113ba4:	68bb      	ldr	r3, [r7, #8]
 8113ba6:	681b      	ldr	r3, [r3, #0]
 8113ba8:	4a0e      	ldr	r2, [pc, #56]	; (8113be4 <sys_check_timeouts+0x6c>)
 8113baa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8113bac:	68bb      	ldr	r3, [r7, #8]
 8113bae:	689b      	ldr	r3, [r3, #8]
 8113bb0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8113bb2:	68bb      	ldr	r3, [r7, #8]
 8113bb4:	68db      	ldr	r3, [r3, #12]
 8113bb6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8113bb8:	68bb      	ldr	r3, [r7, #8]
 8113bba:	685b      	ldr	r3, [r3, #4]
 8113bbc:	4a0a      	ldr	r2, [pc, #40]	; (8113be8 <sys_check_timeouts+0x70>)
 8113bbe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8113bc0:	68b9      	ldr	r1, [r7, #8]
 8113bc2:	2007      	movs	r0, #7
 8113bc4:	f7fe fbfa 	bl	81123bc <memp_free>
    if (handler != NULL) {
 8113bc8:	687b      	ldr	r3, [r7, #4]
 8113bca:	2b00      	cmp	r3, #0
 8113bcc:	d0da      	beq.n	8113b84 <sys_check_timeouts+0xc>
      handler(arg);
 8113bce:	687b      	ldr	r3, [r7, #4]
 8113bd0:	6838      	ldr	r0, [r7, #0]
 8113bd2:	4798      	blx	r3
  do {
 8113bd4:	e7d6      	b.n	8113b84 <sys_check_timeouts+0xc>
      return;
 8113bd6:	bf00      	nop
 8113bd8:	e000      	b.n	8113bdc <sys_check_timeouts+0x64>
      return;
 8113bda:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8113bdc:	3710      	adds	r7, #16
 8113bde:	46bd      	mov	sp, r7
 8113be0:	bd80      	pop	{r7, pc}
 8113be2:	bf00      	nop
 8113be4:	10005954 	.word	0x10005954
 8113be8:	10005958 	.word	0x10005958

08113bec <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8113bec:	b580      	push	{r7, lr}
 8113bee:	b082      	sub	sp, #8
 8113bf0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8113bf2:	4b16      	ldr	r3, [pc, #88]	; (8113c4c <sys_timeouts_sleeptime+0x60>)
 8113bf4:	681b      	ldr	r3, [r3, #0]
 8113bf6:	2b00      	cmp	r3, #0
 8113bf8:	d102      	bne.n	8113c00 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8113bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8113bfe:	e020      	b.n	8113c42 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8113c00:	f001 f8ce 	bl	8114da0 <sys_now>
 8113c04:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8113c06:	4b11      	ldr	r3, [pc, #68]	; (8113c4c <sys_timeouts_sleeptime+0x60>)
 8113c08:	681b      	ldr	r3, [r3, #0]
 8113c0a:	685a      	ldr	r2, [r3, #4]
 8113c0c:	687b      	ldr	r3, [r7, #4]
 8113c0e:	1ad3      	subs	r3, r2, r3
 8113c10:	0fdb      	lsrs	r3, r3, #31
 8113c12:	f003 0301 	and.w	r3, r3, #1
 8113c16:	b2db      	uxtb	r3, r3
 8113c18:	2b00      	cmp	r3, #0
 8113c1a:	d001      	beq.n	8113c20 <sys_timeouts_sleeptime+0x34>
    return 0;
 8113c1c:	2300      	movs	r3, #0
 8113c1e:	e010      	b.n	8113c42 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8113c20:	4b0a      	ldr	r3, [pc, #40]	; (8113c4c <sys_timeouts_sleeptime+0x60>)
 8113c22:	681b      	ldr	r3, [r3, #0]
 8113c24:	685a      	ldr	r2, [r3, #4]
 8113c26:	687b      	ldr	r3, [r7, #4]
 8113c28:	1ad3      	subs	r3, r2, r3
 8113c2a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8113c2c:	683b      	ldr	r3, [r7, #0]
 8113c2e:	2b00      	cmp	r3, #0
 8113c30:	da06      	bge.n	8113c40 <sys_timeouts_sleeptime+0x54>
 8113c32:	4b07      	ldr	r3, [pc, #28]	; (8113c50 <sys_timeouts_sleeptime+0x64>)
 8113c34:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8113c38:	4906      	ldr	r1, [pc, #24]	; (8113c54 <sys_timeouts_sleeptime+0x68>)
 8113c3a:	4807      	ldr	r0, [pc, #28]	; (8113c58 <sys_timeouts_sleeptime+0x6c>)
 8113c3c:	f003 fdc4 	bl	81177c8 <iprintf>
    return ret;
 8113c40:	683b      	ldr	r3, [r7, #0]
  }
}
 8113c42:	4618      	mov	r0, r3
 8113c44:	3708      	adds	r7, #8
 8113c46:	46bd      	mov	sp, r7
 8113c48:	bd80      	pop	{r7, pc}
 8113c4a:	bf00      	nop
 8113c4c:	10005954 	.word	0x10005954
 8113c50:	0811ae38 	.word	0x0811ae38
 8113c54:	0811af48 	.word	0x0811af48
 8113c58:	0811aee8 	.word	0x0811aee8

08113c5c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8113c5c:	b580      	push	{r7, lr}
 8113c5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8113c60:	f003 fe40 	bl	81178e4 <rand>
 8113c64:	4603      	mov	r3, r0
 8113c66:	b29b      	uxth	r3, r3
 8113c68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8113c6c:	b29b      	uxth	r3, r3
 8113c6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8113c72:	b29a      	uxth	r2, r3
 8113c74:	4b01      	ldr	r3, [pc, #4]	; (8113c7c <udp_init+0x20>)
 8113c76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8113c78:	bf00      	nop
 8113c7a:	bd80      	pop	{r7, pc}
 8113c7c:	10000014 	.word	0x10000014

08113c80 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8113c80:	b480      	push	{r7}
 8113c82:	b083      	sub	sp, #12
 8113c84:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8113c86:	2300      	movs	r3, #0
 8113c88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8113c8a:	4b17      	ldr	r3, [pc, #92]	; (8113ce8 <udp_new_port+0x68>)
 8113c8c:	881b      	ldrh	r3, [r3, #0]
 8113c8e:	1c5a      	adds	r2, r3, #1
 8113c90:	b291      	uxth	r1, r2
 8113c92:	4a15      	ldr	r2, [pc, #84]	; (8113ce8 <udp_new_port+0x68>)
 8113c94:	8011      	strh	r1, [r2, #0]
 8113c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8113c9a:	4293      	cmp	r3, r2
 8113c9c:	d103      	bne.n	8113ca6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8113c9e:	4b12      	ldr	r3, [pc, #72]	; (8113ce8 <udp_new_port+0x68>)
 8113ca0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8113ca4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8113ca6:	4b11      	ldr	r3, [pc, #68]	; (8113cec <udp_new_port+0x6c>)
 8113ca8:	681b      	ldr	r3, [r3, #0]
 8113caa:	603b      	str	r3, [r7, #0]
 8113cac:	e011      	b.n	8113cd2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8113cae:	683b      	ldr	r3, [r7, #0]
 8113cb0:	8a5a      	ldrh	r2, [r3, #18]
 8113cb2:	4b0d      	ldr	r3, [pc, #52]	; (8113ce8 <udp_new_port+0x68>)
 8113cb4:	881b      	ldrh	r3, [r3, #0]
 8113cb6:	429a      	cmp	r2, r3
 8113cb8:	d108      	bne.n	8113ccc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8113cba:	88fb      	ldrh	r3, [r7, #6]
 8113cbc:	3301      	adds	r3, #1
 8113cbe:	80fb      	strh	r3, [r7, #6]
 8113cc0:	88fb      	ldrh	r3, [r7, #6]
 8113cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8113cc6:	d3e0      	bcc.n	8113c8a <udp_new_port+0xa>
        return 0;
 8113cc8:	2300      	movs	r3, #0
 8113cca:	e007      	b.n	8113cdc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8113ccc:	683b      	ldr	r3, [r7, #0]
 8113cce:	68db      	ldr	r3, [r3, #12]
 8113cd0:	603b      	str	r3, [r7, #0]
 8113cd2:	683b      	ldr	r3, [r7, #0]
 8113cd4:	2b00      	cmp	r3, #0
 8113cd6:	d1ea      	bne.n	8113cae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8113cd8:	4b03      	ldr	r3, [pc, #12]	; (8113ce8 <udp_new_port+0x68>)
 8113cda:	881b      	ldrh	r3, [r3, #0]
}
 8113cdc:	4618      	mov	r0, r3
 8113cde:	370c      	adds	r7, #12
 8113ce0:	46bd      	mov	sp, r7
 8113ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113ce6:	4770      	bx	lr
 8113ce8:	10000014 	.word	0x10000014
 8113cec:	100087e0 	.word	0x100087e0

08113cf0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8113cf0:	b580      	push	{r7, lr}
 8113cf2:	b084      	sub	sp, #16
 8113cf4:	af00      	add	r7, sp, #0
 8113cf6:	60f8      	str	r0, [r7, #12]
 8113cf8:	60b9      	str	r1, [r7, #8]
 8113cfa:	4613      	mov	r3, r2
 8113cfc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8113cfe:	68fb      	ldr	r3, [r7, #12]
 8113d00:	2b00      	cmp	r3, #0
 8113d02:	d105      	bne.n	8113d10 <udp_input_local_match+0x20>
 8113d04:	4b27      	ldr	r3, [pc, #156]	; (8113da4 <udp_input_local_match+0xb4>)
 8113d06:	2287      	movs	r2, #135	; 0x87
 8113d08:	4927      	ldr	r1, [pc, #156]	; (8113da8 <udp_input_local_match+0xb8>)
 8113d0a:	4828      	ldr	r0, [pc, #160]	; (8113dac <udp_input_local_match+0xbc>)
 8113d0c:	f003 fd5c 	bl	81177c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8113d10:	68bb      	ldr	r3, [r7, #8]
 8113d12:	2b00      	cmp	r3, #0
 8113d14:	d105      	bne.n	8113d22 <udp_input_local_match+0x32>
 8113d16:	4b23      	ldr	r3, [pc, #140]	; (8113da4 <udp_input_local_match+0xb4>)
 8113d18:	2288      	movs	r2, #136	; 0x88
 8113d1a:	4925      	ldr	r1, [pc, #148]	; (8113db0 <udp_input_local_match+0xc0>)
 8113d1c:	4823      	ldr	r0, [pc, #140]	; (8113dac <udp_input_local_match+0xbc>)
 8113d1e:	f003 fd53 	bl	81177c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8113d22:	68fb      	ldr	r3, [r7, #12]
 8113d24:	7a1b      	ldrb	r3, [r3, #8]
 8113d26:	2b00      	cmp	r3, #0
 8113d28:	d00b      	beq.n	8113d42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8113d2a:	68fb      	ldr	r3, [r7, #12]
 8113d2c:	7a1a      	ldrb	r2, [r3, #8]
 8113d2e:	4b21      	ldr	r3, [pc, #132]	; (8113db4 <udp_input_local_match+0xc4>)
 8113d30:	685b      	ldr	r3, [r3, #4]
 8113d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8113d36:	3301      	adds	r3, #1
 8113d38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8113d3a:	429a      	cmp	r2, r3
 8113d3c:	d001      	beq.n	8113d42 <udp_input_local_match+0x52>
    return 0;
 8113d3e:	2300      	movs	r3, #0
 8113d40:	e02b      	b.n	8113d9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8113d42:	79fb      	ldrb	r3, [r7, #7]
 8113d44:	2b00      	cmp	r3, #0
 8113d46:	d018      	beq.n	8113d7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8113d48:	68fb      	ldr	r3, [r7, #12]
 8113d4a:	2b00      	cmp	r3, #0
 8113d4c:	d013      	beq.n	8113d76 <udp_input_local_match+0x86>
 8113d4e:	68fb      	ldr	r3, [r7, #12]
 8113d50:	681b      	ldr	r3, [r3, #0]
 8113d52:	2b00      	cmp	r3, #0
 8113d54:	d00f      	beq.n	8113d76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8113d56:	4b17      	ldr	r3, [pc, #92]	; (8113db4 <udp_input_local_match+0xc4>)
 8113d58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8113d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8113d5e:	d00a      	beq.n	8113d76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8113d60:	68fb      	ldr	r3, [r7, #12]
 8113d62:	681a      	ldr	r2, [r3, #0]
 8113d64:	4b13      	ldr	r3, [pc, #76]	; (8113db4 <udp_input_local_match+0xc4>)
 8113d66:	695b      	ldr	r3, [r3, #20]
 8113d68:	405a      	eors	r2, r3
 8113d6a:	68bb      	ldr	r3, [r7, #8]
 8113d6c:	3308      	adds	r3, #8
 8113d6e:	681b      	ldr	r3, [r3, #0]
 8113d70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8113d72:	2b00      	cmp	r3, #0
 8113d74:	d110      	bne.n	8113d98 <udp_input_local_match+0xa8>
          return 1;
 8113d76:	2301      	movs	r3, #1
 8113d78:	e00f      	b.n	8113d9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8113d7a:	68fb      	ldr	r3, [r7, #12]
 8113d7c:	2b00      	cmp	r3, #0
 8113d7e:	d009      	beq.n	8113d94 <udp_input_local_match+0xa4>
 8113d80:	68fb      	ldr	r3, [r7, #12]
 8113d82:	681b      	ldr	r3, [r3, #0]
 8113d84:	2b00      	cmp	r3, #0
 8113d86:	d005      	beq.n	8113d94 <udp_input_local_match+0xa4>
 8113d88:	68fb      	ldr	r3, [r7, #12]
 8113d8a:	681a      	ldr	r2, [r3, #0]
 8113d8c:	4b09      	ldr	r3, [pc, #36]	; (8113db4 <udp_input_local_match+0xc4>)
 8113d8e:	695b      	ldr	r3, [r3, #20]
 8113d90:	429a      	cmp	r2, r3
 8113d92:	d101      	bne.n	8113d98 <udp_input_local_match+0xa8>
        return 1;
 8113d94:	2301      	movs	r3, #1
 8113d96:	e000      	b.n	8113d9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8113d98:	2300      	movs	r3, #0
}
 8113d9a:	4618      	mov	r0, r3
 8113d9c:	3710      	adds	r7, #16
 8113d9e:	46bd      	mov	sp, r7
 8113da0:	bd80      	pop	{r7, pc}
 8113da2:	bf00      	nop
 8113da4:	0811af5c 	.word	0x0811af5c
 8113da8:	0811afc4 	.word	0x0811afc4
 8113dac:	0811afe8 	.word	0x0811afe8
 8113db0:	0811b010 	.word	0x0811b010
 8113db4:	10005c44 	.word	0x10005c44

08113db8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8113db8:	b590      	push	{r4, r7, lr}
 8113dba:	b08d      	sub	sp, #52	; 0x34
 8113dbc:	af02      	add	r7, sp, #8
 8113dbe:	6078      	str	r0, [r7, #4]
 8113dc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8113dc2:	2300      	movs	r3, #0
 8113dc4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8113dc6:	687b      	ldr	r3, [r7, #4]
 8113dc8:	2b00      	cmp	r3, #0
 8113dca:	d105      	bne.n	8113dd8 <udp_input+0x20>
 8113dcc:	4b7c      	ldr	r3, [pc, #496]	; (8113fc0 <udp_input+0x208>)
 8113dce:	22cf      	movs	r2, #207	; 0xcf
 8113dd0:	497c      	ldr	r1, [pc, #496]	; (8113fc4 <udp_input+0x20c>)
 8113dd2:	487d      	ldr	r0, [pc, #500]	; (8113fc8 <udp_input+0x210>)
 8113dd4:	f003 fcf8 	bl	81177c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8113dd8:	683b      	ldr	r3, [r7, #0]
 8113dda:	2b00      	cmp	r3, #0
 8113ddc:	d105      	bne.n	8113dea <udp_input+0x32>
 8113dde:	4b78      	ldr	r3, [pc, #480]	; (8113fc0 <udp_input+0x208>)
 8113de0:	22d0      	movs	r2, #208	; 0xd0
 8113de2:	497a      	ldr	r1, [pc, #488]	; (8113fcc <udp_input+0x214>)
 8113de4:	4878      	ldr	r0, [pc, #480]	; (8113fc8 <udp_input+0x210>)
 8113de6:	f003 fcef 	bl	81177c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8113dea:	687b      	ldr	r3, [r7, #4]
 8113dec:	895b      	ldrh	r3, [r3, #10]
 8113dee:	2b07      	cmp	r3, #7
 8113df0:	d803      	bhi.n	8113dfa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8113df2:	6878      	ldr	r0, [r7, #4]
 8113df4:	f7ff f926 	bl	8113044 <pbuf_free>
    goto end;
 8113df8:	e0de      	b.n	8113fb8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8113dfa:	687b      	ldr	r3, [r7, #4]
 8113dfc:	685b      	ldr	r3, [r3, #4]
 8113dfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8113e00:	4b73      	ldr	r3, [pc, #460]	; (8113fd0 <udp_input+0x218>)
 8113e02:	695b      	ldr	r3, [r3, #20]
 8113e04:	4a72      	ldr	r2, [pc, #456]	; (8113fd0 <udp_input+0x218>)
 8113e06:	6812      	ldr	r2, [r2, #0]
 8113e08:	4611      	mov	r1, r2
 8113e0a:	4618      	mov	r0, r3
 8113e0c:	f7fc ff48 	bl	8110ca0 <ip4_addr_isbroadcast_u32>
 8113e10:	4603      	mov	r3, r0
 8113e12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8113e14:	697b      	ldr	r3, [r7, #20]
 8113e16:	881b      	ldrh	r3, [r3, #0]
 8113e18:	b29b      	uxth	r3, r3
 8113e1a:	4618      	mov	r0, r3
 8113e1c:	f7fb f9f6 	bl	810f20c <lwip_htons>
 8113e20:	4603      	mov	r3, r0
 8113e22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8113e24:	697b      	ldr	r3, [r7, #20]
 8113e26:	885b      	ldrh	r3, [r3, #2]
 8113e28:	b29b      	uxth	r3, r3
 8113e2a:	4618      	mov	r0, r3
 8113e2c:	f7fb f9ee 	bl	810f20c <lwip_htons>
 8113e30:	4603      	mov	r3, r0
 8113e32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8113e34:	2300      	movs	r3, #0
 8113e36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8113e38:	2300      	movs	r3, #0
 8113e3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8113e3c:	2300      	movs	r3, #0
 8113e3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8113e40:	4b64      	ldr	r3, [pc, #400]	; (8113fd4 <udp_input+0x21c>)
 8113e42:	681b      	ldr	r3, [r3, #0]
 8113e44:	627b      	str	r3, [r7, #36]	; 0x24
 8113e46:	e054      	b.n	8113ef2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8113e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113e4a:	8a5b      	ldrh	r3, [r3, #18]
 8113e4c:	89fa      	ldrh	r2, [r7, #14]
 8113e4e:	429a      	cmp	r2, r3
 8113e50:	d14a      	bne.n	8113ee8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8113e52:	7cfb      	ldrb	r3, [r7, #19]
 8113e54:	461a      	mov	r2, r3
 8113e56:	6839      	ldr	r1, [r7, #0]
 8113e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8113e5a:	f7ff ff49 	bl	8113cf0 <udp_input_local_match>
 8113e5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8113e60:	2b00      	cmp	r3, #0
 8113e62:	d041      	beq.n	8113ee8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8113e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113e66:	7c1b      	ldrb	r3, [r3, #16]
 8113e68:	f003 0304 	and.w	r3, r3, #4
 8113e6c:	2b00      	cmp	r3, #0
 8113e6e:	d11d      	bne.n	8113eac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8113e70:	69fb      	ldr	r3, [r7, #28]
 8113e72:	2b00      	cmp	r3, #0
 8113e74:	d102      	bne.n	8113e7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8113e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113e78:	61fb      	str	r3, [r7, #28]
 8113e7a:	e017      	b.n	8113eac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8113e7c:	7cfb      	ldrb	r3, [r7, #19]
 8113e7e:	2b00      	cmp	r3, #0
 8113e80:	d014      	beq.n	8113eac <udp_input+0xf4>
 8113e82:	4b53      	ldr	r3, [pc, #332]	; (8113fd0 <udp_input+0x218>)
 8113e84:	695b      	ldr	r3, [r3, #20]
 8113e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8113e8a:	d10f      	bne.n	8113eac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8113e8c:	69fb      	ldr	r3, [r7, #28]
 8113e8e:	681a      	ldr	r2, [r3, #0]
 8113e90:	683b      	ldr	r3, [r7, #0]
 8113e92:	3304      	adds	r3, #4
 8113e94:	681b      	ldr	r3, [r3, #0]
 8113e96:	429a      	cmp	r2, r3
 8113e98:	d008      	beq.n	8113eac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8113e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113e9c:	681a      	ldr	r2, [r3, #0]
 8113e9e:	683b      	ldr	r3, [r7, #0]
 8113ea0:	3304      	adds	r3, #4
 8113ea2:	681b      	ldr	r3, [r3, #0]
 8113ea4:	429a      	cmp	r2, r3
 8113ea6:	d101      	bne.n	8113eac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8113ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113eaa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8113eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113eae:	8a9b      	ldrh	r3, [r3, #20]
 8113eb0:	8a3a      	ldrh	r2, [r7, #16]
 8113eb2:	429a      	cmp	r2, r3
 8113eb4:	d118      	bne.n	8113ee8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8113eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113eb8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8113eba:	2b00      	cmp	r3, #0
 8113ebc:	d005      	beq.n	8113eca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8113ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113ec0:	685a      	ldr	r2, [r3, #4]
 8113ec2:	4b43      	ldr	r3, [pc, #268]	; (8113fd0 <udp_input+0x218>)
 8113ec4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8113ec6:	429a      	cmp	r2, r3
 8113ec8:	d10e      	bne.n	8113ee8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8113eca:	6a3b      	ldr	r3, [r7, #32]
 8113ecc:	2b00      	cmp	r3, #0
 8113ece:	d014      	beq.n	8113efa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8113ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113ed2:	68da      	ldr	r2, [r3, #12]
 8113ed4:	6a3b      	ldr	r3, [r7, #32]
 8113ed6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8113ed8:	4b3e      	ldr	r3, [pc, #248]	; (8113fd4 <udp_input+0x21c>)
 8113eda:	681a      	ldr	r2, [r3, #0]
 8113edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113ede:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8113ee0:	4a3c      	ldr	r2, [pc, #240]	; (8113fd4 <udp_input+0x21c>)
 8113ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113ee4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8113ee6:	e008      	b.n	8113efa <udp_input+0x142>
      }
    }

    prev = pcb;
 8113ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113eea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8113eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113eee:	68db      	ldr	r3, [r3, #12]
 8113ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8113ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113ef4:	2b00      	cmp	r3, #0
 8113ef6:	d1a7      	bne.n	8113e48 <udp_input+0x90>
 8113ef8:	e000      	b.n	8113efc <udp_input+0x144>
        break;
 8113efa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8113efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113efe:	2b00      	cmp	r3, #0
 8113f00:	d101      	bne.n	8113f06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8113f02:	69fb      	ldr	r3, [r7, #28]
 8113f04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8113f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113f08:	2b00      	cmp	r3, #0
 8113f0a:	d002      	beq.n	8113f12 <udp_input+0x15a>
    for_us = 1;
 8113f0c:	2301      	movs	r3, #1
 8113f0e:	76fb      	strb	r3, [r7, #27]
 8113f10:	e00a      	b.n	8113f28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8113f12:	683b      	ldr	r3, [r7, #0]
 8113f14:	3304      	adds	r3, #4
 8113f16:	681a      	ldr	r2, [r3, #0]
 8113f18:	4b2d      	ldr	r3, [pc, #180]	; (8113fd0 <udp_input+0x218>)
 8113f1a:	695b      	ldr	r3, [r3, #20]
 8113f1c:	429a      	cmp	r2, r3
 8113f1e:	bf0c      	ite	eq
 8113f20:	2301      	moveq	r3, #1
 8113f22:	2300      	movne	r3, #0
 8113f24:	b2db      	uxtb	r3, r3
 8113f26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8113f28:	7efb      	ldrb	r3, [r7, #27]
 8113f2a:	2b00      	cmp	r3, #0
 8113f2c:	d041      	beq.n	8113fb2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8113f2e:	2108      	movs	r1, #8
 8113f30:	6878      	ldr	r0, [r7, #4]
 8113f32:	f7ff f801 	bl	8112f38 <pbuf_remove_header>
 8113f36:	4603      	mov	r3, r0
 8113f38:	2b00      	cmp	r3, #0
 8113f3a:	d00a      	beq.n	8113f52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8113f3c:	4b20      	ldr	r3, [pc, #128]	; (8113fc0 <udp_input+0x208>)
 8113f3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8113f42:	4925      	ldr	r1, [pc, #148]	; (8113fd8 <udp_input+0x220>)
 8113f44:	4820      	ldr	r0, [pc, #128]	; (8113fc8 <udp_input+0x210>)
 8113f46:	f003 fc3f 	bl	81177c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8113f4a:	6878      	ldr	r0, [r7, #4]
 8113f4c:	f7ff f87a 	bl	8113044 <pbuf_free>
      goto end;
 8113f50:	e032      	b.n	8113fb8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8113f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113f54:	2b00      	cmp	r3, #0
 8113f56:	d012      	beq.n	8113f7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8113f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113f5a:	699b      	ldr	r3, [r3, #24]
 8113f5c:	2b00      	cmp	r3, #0
 8113f5e:	d00a      	beq.n	8113f76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8113f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113f62:	699c      	ldr	r4, [r3, #24]
 8113f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113f66:	69d8      	ldr	r0, [r3, #28]
 8113f68:	8a3b      	ldrh	r3, [r7, #16]
 8113f6a:	9300      	str	r3, [sp, #0]
 8113f6c:	4b1b      	ldr	r3, [pc, #108]	; (8113fdc <udp_input+0x224>)
 8113f6e:	687a      	ldr	r2, [r7, #4]
 8113f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8113f72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8113f74:	e021      	b.n	8113fba <udp_input+0x202>
        pbuf_free(p);
 8113f76:	6878      	ldr	r0, [r7, #4]
 8113f78:	f7ff f864 	bl	8113044 <pbuf_free>
        goto end;
 8113f7c:	e01c      	b.n	8113fb8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8113f7e:	7cfb      	ldrb	r3, [r7, #19]
 8113f80:	2b00      	cmp	r3, #0
 8113f82:	d112      	bne.n	8113faa <udp_input+0x1f2>
 8113f84:	4b12      	ldr	r3, [pc, #72]	; (8113fd0 <udp_input+0x218>)
 8113f86:	695b      	ldr	r3, [r3, #20]
 8113f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8113f8c:	2be0      	cmp	r3, #224	; 0xe0
 8113f8e:	d00c      	beq.n	8113faa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8113f90:	4b0f      	ldr	r3, [pc, #60]	; (8113fd0 <udp_input+0x218>)
 8113f92:	899b      	ldrh	r3, [r3, #12]
 8113f94:	3308      	adds	r3, #8
 8113f96:	b29b      	uxth	r3, r3
 8113f98:	b21b      	sxth	r3, r3
 8113f9a:	4619      	mov	r1, r3
 8113f9c:	6878      	ldr	r0, [r7, #4]
 8113f9e:	f7ff f83e 	bl	811301e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8113fa2:	2103      	movs	r1, #3
 8113fa4:	6878      	ldr	r0, [r7, #4]
 8113fa6:	f7fc fa89 	bl	81104bc <icmp_dest_unreach>
      pbuf_free(p);
 8113faa:	6878      	ldr	r0, [r7, #4]
 8113fac:	f7ff f84a 	bl	8113044 <pbuf_free>
  return;
 8113fb0:	e003      	b.n	8113fba <udp_input+0x202>
    pbuf_free(p);
 8113fb2:	6878      	ldr	r0, [r7, #4]
 8113fb4:	f7ff f846 	bl	8113044 <pbuf_free>
  return;
 8113fb8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8113fba:	372c      	adds	r7, #44	; 0x2c
 8113fbc:	46bd      	mov	sp, r7
 8113fbe:	bd90      	pop	{r4, r7, pc}
 8113fc0:	0811af5c 	.word	0x0811af5c
 8113fc4:	0811b038 	.word	0x0811b038
 8113fc8:	0811afe8 	.word	0x0811afe8
 8113fcc:	0811b050 	.word	0x0811b050
 8113fd0:	10005c44 	.word	0x10005c44
 8113fd4:	100087e0 	.word	0x100087e0
 8113fd8:	0811b06c 	.word	0x0811b06c
 8113fdc:	10005c54 	.word	0x10005c54

08113fe0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8113fe0:	b580      	push	{r7, lr}
 8113fe2:	b082      	sub	sp, #8
 8113fe4:	af00      	add	r7, sp, #0
 8113fe6:	6078      	str	r0, [r7, #4]
 8113fe8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8113fea:	687b      	ldr	r3, [r7, #4]
 8113fec:	2b00      	cmp	r3, #0
 8113fee:	d109      	bne.n	8114004 <udp_send+0x24>
 8113ff0:	4b11      	ldr	r3, [pc, #68]	; (8114038 <udp_send+0x58>)
 8113ff2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8113ff6:	4911      	ldr	r1, [pc, #68]	; (811403c <udp_send+0x5c>)
 8113ff8:	4811      	ldr	r0, [pc, #68]	; (8114040 <udp_send+0x60>)
 8113ffa:	f003 fbe5 	bl	81177c8 <iprintf>
 8113ffe:	f06f 030f 	mvn.w	r3, #15
 8114002:	e015      	b.n	8114030 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8114004:	683b      	ldr	r3, [r7, #0]
 8114006:	2b00      	cmp	r3, #0
 8114008:	d109      	bne.n	811401e <udp_send+0x3e>
 811400a:	4b0b      	ldr	r3, [pc, #44]	; (8114038 <udp_send+0x58>)
 811400c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8114010:	490c      	ldr	r1, [pc, #48]	; (8114044 <udp_send+0x64>)
 8114012:	480b      	ldr	r0, [pc, #44]	; (8114040 <udp_send+0x60>)
 8114014:	f003 fbd8 	bl	81177c8 <iprintf>
 8114018:	f06f 030f 	mvn.w	r3, #15
 811401c:	e008      	b.n	8114030 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 811401e:	687b      	ldr	r3, [r7, #4]
 8114020:	1d1a      	adds	r2, r3, #4
 8114022:	687b      	ldr	r3, [r7, #4]
 8114024:	8a9b      	ldrh	r3, [r3, #20]
 8114026:	6839      	ldr	r1, [r7, #0]
 8114028:	6878      	ldr	r0, [r7, #4]
 811402a:	f000 f80d 	bl	8114048 <udp_sendto>
 811402e:	4603      	mov	r3, r0
}
 8114030:	4618      	mov	r0, r3
 8114032:	3708      	adds	r7, #8
 8114034:	46bd      	mov	sp, r7
 8114036:	bd80      	pop	{r7, pc}
 8114038:	0811af5c 	.word	0x0811af5c
 811403c:	0811b088 	.word	0x0811b088
 8114040:	0811afe8 	.word	0x0811afe8
 8114044:	0811b0a0 	.word	0x0811b0a0

08114048 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8114048:	b580      	push	{r7, lr}
 811404a:	b088      	sub	sp, #32
 811404c:	af02      	add	r7, sp, #8
 811404e:	60f8      	str	r0, [r7, #12]
 8114050:	60b9      	str	r1, [r7, #8]
 8114052:	607a      	str	r2, [r7, #4]
 8114054:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8114056:	68fb      	ldr	r3, [r7, #12]
 8114058:	2b00      	cmp	r3, #0
 811405a:	d109      	bne.n	8114070 <udp_sendto+0x28>
 811405c:	4b23      	ldr	r3, [pc, #140]	; (81140ec <udp_sendto+0xa4>)
 811405e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8114062:	4923      	ldr	r1, [pc, #140]	; (81140f0 <udp_sendto+0xa8>)
 8114064:	4823      	ldr	r0, [pc, #140]	; (81140f4 <udp_sendto+0xac>)
 8114066:	f003 fbaf 	bl	81177c8 <iprintf>
 811406a:	f06f 030f 	mvn.w	r3, #15
 811406e:	e038      	b.n	81140e2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8114070:	68bb      	ldr	r3, [r7, #8]
 8114072:	2b00      	cmp	r3, #0
 8114074:	d109      	bne.n	811408a <udp_sendto+0x42>
 8114076:	4b1d      	ldr	r3, [pc, #116]	; (81140ec <udp_sendto+0xa4>)
 8114078:	f240 2219 	movw	r2, #537	; 0x219
 811407c:	491e      	ldr	r1, [pc, #120]	; (81140f8 <udp_sendto+0xb0>)
 811407e:	481d      	ldr	r0, [pc, #116]	; (81140f4 <udp_sendto+0xac>)
 8114080:	f003 fba2 	bl	81177c8 <iprintf>
 8114084:	f06f 030f 	mvn.w	r3, #15
 8114088:	e02b      	b.n	81140e2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 811408a:	687b      	ldr	r3, [r7, #4]
 811408c:	2b00      	cmp	r3, #0
 811408e:	d109      	bne.n	81140a4 <udp_sendto+0x5c>
 8114090:	4b16      	ldr	r3, [pc, #88]	; (81140ec <udp_sendto+0xa4>)
 8114092:	f240 221a 	movw	r2, #538	; 0x21a
 8114096:	4919      	ldr	r1, [pc, #100]	; (81140fc <udp_sendto+0xb4>)
 8114098:	4816      	ldr	r0, [pc, #88]	; (81140f4 <udp_sendto+0xac>)
 811409a:	f003 fb95 	bl	81177c8 <iprintf>
 811409e:	f06f 030f 	mvn.w	r3, #15
 81140a2:	e01e      	b.n	81140e2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 81140a4:	68fb      	ldr	r3, [r7, #12]
 81140a6:	7a1b      	ldrb	r3, [r3, #8]
 81140a8:	2b00      	cmp	r3, #0
 81140aa:	d006      	beq.n	81140ba <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 81140ac:	68fb      	ldr	r3, [r7, #12]
 81140ae:	7a1b      	ldrb	r3, [r3, #8]
 81140b0:	4618      	mov	r0, r3
 81140b2:	f7fe fc95 	bl	81129e0 <netif_get_by_index>
 81140b6:	6178      	str	r0, [r7, #20]
 81140b8:	e003      	b.n	81140c2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 81140ba:	6878      	ldr	r0, [r7, #4]
 81140bc:	f7fc fb64 	bl	8110788 <ip4_route>
 81140c0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 81140c2:	697b      	ldr	r3, [r7, #20]
 81140c4:	2b00      	cmp	r3, #0
 81140c6:	d102      	bne.n	81140ce <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 81140c8:	f06f 0303 	mvn.w	r3, #3
 81140cc:	e009      	b.n	81140e2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 81140ce:	887a      	ldrh	r2, [r7, #2]
 81140d0:	697b      	ldr	r3, [r7, #20]
 81140d2:	9300      	str	r3, [sp, #0]
 81140d4:	4613      	mov	r3, r2
 81140d6:	687a      	ldr	r2, [r7, #4]
 81140d8:	68b9      	ldr	r1, [r7, #8]
 81140da:	68f8      	ldr	r0, [r7, #12]
 81140dc:	f000 f810 	bl	8114100 <udp_sendto_if>
 81140e0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 81140e2:	4618      	mov	r0, r3
 81140e4:	3718      	adds	r7, #24
 81140e6:	46bd      	mov	sp, r7
 81140e8:	bd80      	pop	{r7, pc}
 81140ea:	bf00      	nop
 81140ec:	0811af5c 	.word	0x0811af5c
 81140f0:	0811b0b8 	.word	0x0811b0b8
 81140f4:	0811afe8 	.word	0x0811afe8
 81140f8:	0811b0d0 	.word	0x0811b0d0
 81140fc:	0811b0ec 	.word	0x0811b0ec

08114100 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8114100:	b580      	push	{r7, lr}
 8114102:	b088      	sub	sp, #32
 8114104:	af02      	add	r7, sp, #8
 8114106:	60f8      	str	r0, [r7, #12]
 8114108:	60b9      	str	r1, [r7, #8]
 811410a:	607a      	str	r2, [r7, #4]
 811410c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 811410e:	68fb      	ldr	r3, [r7, #12]
 8114110:	2b00      	cmp	r3, #0
 8114112:	d109      	bne.n	8114128 <udp_sendto_if+0x28>
 8114114:	4b2e      	ldr	r3, [pc, #184]	; (81141d0 <udp_sendto_if+0xd0>)
 8114116:	f44f 7220 	mov.w	r2, #640	; 0x280
 811411a:	492e      	ldr	r1, [pc, #184]	; (81141d4 <udp_sendto_if+0xd4>)
 811411c:	482e      	ldr	r0, [pc, #184]	; (81141d8 <udp_sendto_if+0xd8>)
 811411e:	f003 fb53 	bl	81177c8 <iprintf>
 8114122:	f06f 030f 	mvn.w	r3, #15
 8114126:	e04f      	b.n	81141c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8114128:	68bb      	ldr	r3, [r7, #8]
 811412a:	2b00      	cmp	r3, #0
 811412c:	d109      	bne.n	8114142 <udp_sendto_if+0x42>
 811412e:	4b28      	ldr	r3, [pc, #160]	; (81141d0 <udp_sendto_if+0xd0>)
 8114130:	f240 2281 	movw	r2, #641	; 0x281
 8114134:	4929      	ldr	r1, [pc, #164]	; (81141dc <udp_sendto_if+0xdc>)
 8114136:	4828      	ldr	r0, [pc, #160]	; (81141d8 <udp_sendto_if+0xd8>)
 8114138:	f003 fb46 	bl	81177c8 <iprintf>
 811413c:	f06f 030f 	mvn.w	r3, #15
 8114140:	e042      	b.n	81141c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8114142:	687b      	ldr	r3, [r7, #4]
 8114144:	2b00      	cmp	r3, #0
 8114146:	d109      	bne.n	811415c <udp_sendto_if+0x5c>
 8114148:	4b21      	ldr	r3, [pc, #132]	; (81141d0 <udp_sendto_if+0xd0>)
 811414a:	f240 2282 	movw	r2, #642	; 0x282
 811414e:	4924      	ldr	r1, [pc, #144]	; (81141e0 <udp_sendto_if+0xe0>)
 8114150:	4821      	ldr	r0, [pc, #132]	; (81141d8 <udp_sendto_if+0xd8>)
 8114152:	f003 fb39 	bl	81177c8 <iprintf>
 8114156:	f06f 030f 	mvn.w	r3, #15
 811415a:	e035      	b.n	81141c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 811415c:	6a3b      	ldr	r3, [r7, #32]
 811415e:	2b00      	cmp	r3, #0
 8114160:	d109      	bne.n	8114176 <udp_sendto_if+0x76>
 8114162:	4b1b      	ldr	r3, [pc, #108]	; (81141d0 <udp_sendto_if+0xd0>)
 8114164:	f240 2283 	movw	r2, #643	; 0x283
 8114168:	491e      	ldr	r1, [pc, #120]	; (81141e4 <udp_sendto_if+0xe4>)
 811416a:	481b      	ldr	r0, [pc, #108]	; (81141d8 <udp_sendto_if+0xd8>)
 811416c:	f003 fb2c 	bl	81177c8 <iprintf>
 8114170:	f06f 030f 	mvn.w	r3, #15
 8114174:	e028      	b.n	81141c8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8114176:	68fb      	ldr	r3, [r7, #12]
 8114178:	2b00      	cmp	r3, #0
 811417a:	d009      	beq.n	8114190 <udp_sendto_if+0x90>
 811417c:	68fb      	ldr	r3, [r7, #12]
 811417e:	681b      	ldr	r3, [r3, #0]
 8114180:	2b00      	cmp	r3, #0
 8114182:	d005      	beq.n	8114190 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8114184:	68fb      	ldr	r3, [r7, #12]
 8114186:	681b      	ldr	r3, [r3, #0]
 8114188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811418c:	2be0      	cmp	r3, #224	; 0xe0
 811418e:	d103      	bne.n	8114198 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8114190:	6a3b      	ldr	r3, [r7, #32]
 8114192:	3304      	adds	r3, #4
 8114194:	617b      	str	r3, [r7, #20]
 8114196:	e00b      	b.n	81141b0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8114198:	68fb      	ldr	r3, [r7, #12]
 811419a:	681a      	ldr	r2, [r3, #0]
 811419c:	6a3b      	ldr	r3, [r7, #32]
 811419e:	3304      	adds	r3, #4
 81141a0:	681b      	ldr	r3, [r3, #0]
 81141a2:	429a      	cmp	r2, r3
 81141a4:	d002      	beq.n	81141ac <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 81141a6:	f06f 0303 	mvn.w	r3, #3
 81141aa:	e00d      	b.n	81141c8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 81141ac:	68fb      	ldr	r3, [r7, #12]
 81141ae:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 81141b0:	887a      	ldrh	r2, [r7, #2]
 81141b2:	697b      	ldr	r3, [r7, #20]
 81141b4:	9301      	str	r3, [sp, #4]
 81141b6:	6a3b      	ldr	r3, [r7, #32]
 81141b8:	9300      	str	r3, [sp, #0]
 81141ba:	4613      	mov	r3, r2
 81141bc:	687a      	ldr	r2, [r7, #4]
 81141be:	68b9      	ldr	r1, [r7, #8]
 81141c0:	68f8      	ldr	r0, [r7, #12]
 81141c2:	f000 f811 	bl	81141e8 <udp_sendto_if_src>
 81141c6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 81141c8:	4618      	mov	r0, r3
 81141ca:	3718      	adds	r7, #24
 81141cc:	46bd      	mov	sp, r7
 81141ce:	bd80      	pop	{r7, pc}
 81141d0:	0811af5c 	.word	0x0811af5c
 81141d4:	0811b108 	.word	0x0811b108
 81141d8:	0811afe8 	.word	0x0811afe8
 81141dc:	0811b124 	.word	0x0811b124
 81141e0:	0811b140 	.word	0x0811b140
 81141e4:	0811b160 	.word	0x0811b160

081141e8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 81141e8:	b580      	push	{r7, lr}
 81141ea:	b08c      	sub	sp, #48	; 0x30
 81141ec:	af04      	add	r7, sp, #16
 81141ee:	60f8      	str	r0, [r7, #12]
 81141f0:	60b9      	str	r1, [r7, #8]
 81141f2:	607a      	str	r2, [r7, #4]
 81141f4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 81141f6:	68fb      	ldr	r3, [r7, #12]
 81141f8:	2b00      	cmp	r3, #0
 81141fa:	d109      	bne.n	8114210 <udp_sendto_if_src+0x28>
 81141fc:	4b65      	ldr	r3, [pc, #404]	; (8114394 <udp_sendto_if_src+0x1ac>)
 81141fe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8114202:	4965      	ldr	r1, [pc, #404]	; (8114398 <udp_sendto_if_src+0x1b0>)
 8114204:	4865      	ldr	r0, [pc, #404]	; (811439c <udp_sendto_if_src+0x1b4>)
 8114206:	f003 fadf 	bl	81177c8 <iprintf>
 811420a:	f06f 030f 	mvn.w	r3, #15
 811420e:	e0bc      	b.n	811438a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8114210:	68bb      	ldr	r3, [r7, #8]
 8114212:	2b00      	cmp	r3, #0
 8114214:	d109      	bne.n	811422a <udp_sendto_if_src+0x42>
 8114216:	4b5f      	ldr	r3, [pc, #380]	; (8114394 <udp_sendto_if_src+0x1ac>)
 8114218:	f240 22d2 	movw	r2, #722	; 0x2d2
 811421c:	4960      	ldr	r1, [pc, #384]	; (81143a0 <udp_sendto_if_src+0x1b8>)
 811421e:	485f      	ldr	r0, [pc, #380]	; (811439c <udp_sendto_if_src+0x1b4>)
 8114220:	f003 fad2 	bl	81177c8 <iprintf>
 8114224:	f06f 030f 	mvn.w	r3, #15
 8114228:	e0af      	b.n	811438a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 811422a:	687b      	ldr	r3, [r7, #4]
 811422c:	2b00      	cmp	r3, #0
 811422e:	d109      	bne.n	8114244 <udp_sendto_if_src+0x5c>
 8114230:	4b58      	ldr	r3, [pc, #352]	; (8114394 <udp_sendto_if_src+0x1ac>)
 8114232:	f240 22d3 	movw	r2, #723	; 0x2d3
 8114236:	495b      	ldr	r1, [pc, #364]	; (81143a4 <udp_sendto_if_src+0x1bc>)
 8114238:	4858      	ldr	r0, [pc, #352]	; (811439c <udp_sendto_if_src+0x1b4>)
 811423a:	f003 fac5 	bl	81177c8 <iprintf>
 811423e:	f06f 030f 	mvn.w	r3, #15
 8114242:	e0a2      	b.n	811438a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8114244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8114246:	2b00      	cmp	r3, #0
 8114248:	d109      	bne.n	811425e <udp_sendto_if_src+0x76>
 811424a:	4b52      	ldr	r3, [pc, #328]	; (8114394 <udp_sendto_if_src+0x1ac>)
 811424c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8114250:	4955      	ldr	r1, [pc, #340]	; (81143a8 <udp_sendto_if_src+0x1c0>)
 8114252:	4852      	ldr	r0, [pc, #328]	; (811439c <udp_sendto_if_src+0x1b4>)
 8114254:	f003 fab8 	bl	81177c8 <iprintf>
 8114258:	f06f 030f 	mvn.w	r3, #15
 811425c:	e095      	b.n	811438a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 811425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8114260:	2b00      	cmp	r3, #0
 8114262:	d109      	bne.n	8114278 <udp_sendto_if_src+0x90>
 8114264:	4b4b      	ldr	r3, [pc, #300]	; (8114394 <udp_sendto_if_src+0x1ac>)
 8114266:	f240 22d5 	movw	r2, #725	; 0x2d5
 811426a:	4950      	ldr	r1, [pc, #320]	; (81143ac <udp_sendto_if_src+0x1c4>)
 811426c:	484b      	ldr	r0, [pc, #300]	; (811439c <udp_sendto_if_src+0x1b4>)
 811426e:	f003 faab 	bl	81177c8 <iprintf>
 8114272:	f06f 030f 	mvn.w	r3, #15
 8114276:	e088      	b.n	811438a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8114278:	68fb      	ldr	r3, [r7, #12]
 811427a:	8a5b      	ldrh	r3, [r3, #18]
 811427c:	2b00      	cmp	r3, #0
 811427e:	d10f      	bne.n	81142a0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8114280:	68f9      	ldr	r1, [r7, #12]
 8114282:	68fb      	ldr	r3, [r7, #12]
 8114284:	8a5b      	ldrh	r3, [r3, #18]
 8114286:	461a      	mov	r2, r3
 8114288:	68f8      	ldr	r0, [r7, #12]
 811428a:	f000 f893 	bl	81143b4 <udp_bind>
 811428e:	4603      	mov	r3, r0
 8114290:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8114292:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8114296:	2b00      	cmp	r3, #0
 8114298:	d002      	beq.n	81142a0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 811429a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 811429e:	e074      	b.n	811438a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 81142a0:	68bb      	ldr	r3, [r7, #8]
 81142a2:	891b      	ldrh	r3, [r3, #8]
 81142a4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 81142a8:	4293      	cmp	r3, r2
 81142aa:	d902      	bls.n	81142b2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 81142ac:	f04f 33ff 	mov.w	r3, #4294967295
 81142b0:	e06b      	b.n	811438a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 81142b2:	2108      	movs	r1, #8
 81142b4:	68b8      	ldr	r0, [r7, #8]
 81142b6:	f7fe fe2f 	bl	8112f18 <pbuf_add_header>
 81142ba:	4603      	mov	r3, r0
 81142bc:	2b00      	cmp	r3, #0
 81142be:	d015      	beq.n	81142ec <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 81142c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 81142c4:	2108      	movs	r1, #8
 81142c6:	2022      	movs	r0, #34	; 0x22
 81142c8:	f7fe fbda 	bl	8112a80 <pbuf_alloc>
 81142cc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 81142ce:	69fb      	ldr	r3, [r7, #28]
 81142d0:	2b00      	cmp	r3, #0
 81142d2:	d102      	bne.n	81142da <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 81142d4:	f04f 33ff 	mov.w	r3, #4294967295
 81142d8:	e057      	b.n	811438a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 81142da:	68bb      	ldr	r3, [r7, #8]
 81142dc:	891b      	ldrh	r3, [r3, #8]
 81142de:	2b00      	cmp	r3, #0
 81142e0:	d006      	beq.n	81142f0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 81142e2:	68b9      	ldr	r1, [r7, #8]
 81142e4:	69f8      	ldr	r0, [r7, #28]
 81142e6:	f7fe ffd1 	bl	811328c <pbuf_chain>
 81142ea:	e001      	b.n	81142f0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 81142ec:	68bb      	ldr	r3, [r7, #8]
 81142ee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 81142f0:	69fb      	ldr	r3, [r7, #28]
 81142f2:	895b      	ldrh	r3, [r3, #10]
 81142f4:	2b07      	cmp	r3, #7
 81142f6:	d806      	bhi.n	8114306 <udp_sendto_if_src+0x11e>
 81142f8:	4b26      	ldr	r3, [pc, #152]	; (8114394 <udp_sendto_if_src+0x1ac>)
 81142fa:	f240 320d 	movw	r2, #781	; 0x30d
 81142fe:	492c      	ldr	r1, [pc, #176]	; (81143b0 <udp_sendto_if_src+0x1c8>)
 8114300:	4826      	ldr	r0, [pc, #152]	; (811439c <udp_sendto_if_src+0x1b4>)
 8114302:	f003 fa61 	bl	81177c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8114306:	69fb      	ldr	r3, [r7, #28]
 8114308:	685b      	ldr	r3, [r3, #4]
 811430a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 811430c:	68fb      	ldr	r3, [r7, #12]
 811430e:	8a5b      	ldrh	r3, [r3, #18]
 8114310:	4618      	mov	r0, r3
 8114312:	f7fa ff7b 	bl	810f20c <lwip_htons>
 8114316:	4603      	mov	r3, r0
 8114318:	461a      	mov	r2, r3
 811431a:	697b      	ldr	r3, [r7, #20]
 811431c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 811431e:	887b      	ldrh	r3, [r7, #2]
 8114320:	4618      	mov	r0, r3
 8114322:	f7fa ff73 	bl	810f20c <lwip_htons>
 8114326:	4603      	mov	r3, r0
 8114328:	461a      	mov	r2, r3
 811432a:	697b      	ldr	r3, [r7, #20]
 811432c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 811432e:	697b      	ldr	r3, [r7, #20]
 8114330:	2200      	movs	r2, #0
 8114332:	719a      	strb	r2, [r3, #6]
 8114334:	2200      	movs	r2, #0
 8114336:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8114338:	69fb      	ldr	r3, [r7, #28]
 811433a:	891b      	ldrh	r3, [r3, #8]
 811433c:	4618      	mov	r0, r3
 811433e:	f7fa ff65 	bl	810f20c <lwip_htons>
 8114342:	4603      	mov	r3, r0
 8114344:	461a      	mov	r2, r3
 8114346:	697b      	ldr	r3, [r7, #20]
 8114348:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 811434a:	2311      	movs	r3, #17
 811434c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 811434e:	68fb      	ldr	r3, [r7, #12]
 8114350:	7adb      	ldrb	r3, [r3, #11]
 8114352:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8114354:	68fb      	ldr	r3, [r7, #12]
 8114356:	7a9b      	ldrb	r3, [r3, #10]
 8114358:	7cb9      	ldrb	r1, [r7, #18]
 811435a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 811435c:	9202      	str	r2, [sp, #8]
 811435e:	7cfa      	ldrb	r2, [r7, #19]
 8114360:	9201      	str	r2, [sp, #4]
 8114362:	9300      	str	r3, [sp, #0]
 8114364:	460b      	mov	r3, r1
 8114366:	687a      	ldr	r2, [r7, #4]
 8114368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 811436a:	69f8      	ldr	r0, [r7, #28]
 811436c:	f7fc fbea 	bl	8110b44 <ip4_output_if_src>
 8114370:	4603      	mov	r3, r0
 8114372:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8114374:	69fa      	ldr	r2, [r7, #28]
 8114376:	68bb      	ldr	r3, [r7, #8]
 8114378:	429a      	cmp	r2, r3
 811437a:	d004      	beq.n	8114386 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 811437c:	69f8      	ldr	r0, [r7, #28]
 811437e:	f7fe fe61 	bl	8113044 <pbuf_free>
    q = NULL;
 8114382:	2300      	movs	r3, #0
 8114384:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8114386:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 811438a:	4618      	mov	r0, r3
 811438c:	3720      	adds	r7, #32
 811438e:	46bd      	mov	sp, r7
 8114390:	bd80      	pop	{r7, pc}
 8114392:	bf00      	nop
 8114394:	0811af5c 	.word	0x0811af5c
 8114398:	0811b180 	.word	0x0811b180
 811439c:	0811afe8 	.word	0x0811afe8
 81143a0:	0811b1a0 	.word	0x0811b1a0
 81143a4:	0811b1c0 	.word	0x0811b1c0
 81143a8:	0811b1e4 	.word	0x0811b1e4
 81143ac:	0811b208 	.word	0x0811b208
 81143b0:	0811b22c 	.word	0x0811b22c

081143b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 81143b4:	b580      	push	{r7, lr}
 81143b6:	b086      	sub	sp, #24
 81143b8:	af00      	add	r7, sp, #0
 81143ba:	60f8      	str	r0, [r7, #12]
 81143bc:	60b9      	str	r1, [r7, #8]
 81143be:	4613      	mov	r3, r2
 81143c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 81143c2:	68bb      	ldr	r3, [r7, #8]
 81143c4:	2b00      	cmp	r3, #0
 81143c6:	d101      	bne.n	81143cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 81143c8:	4b39      	ldr	r3, [pc, #228]	; (81144b0 <udp_bind+0xfc>)
 81143ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 81143cc:	68fb      	ldr	r3, [r7, #12]
 81143ce:	2b00      	cmp	r3, #0
 81143d0:	d109      	bne.n	81143e6 <udp_bind+0x32>
 81143d2:	4b38      	ldr	r3, [pc, #224]	; (81144b4 <udp_bind+0x100>)
 81143d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 81143d8:	4937      	ldr	r1, [pc, #220]	; (81144b8 <udp_bind+0x104>)
 81143da:	4838      	ldr	r0, [pc, #224]	; (81144bc <udp_bind+0x108>)
 81143dc:	f003 f9f4 	bl	81177c8 <iprintf>
 81143e0:	f06f 030f 	mvn.w	r3, #15
 81143e4:	e060      	b.n	81144a8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 81143e6:	2300      	movs	r3, #0
 81143e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81143ea:	4b35      	ldr	r3, [pc, #212]	; (81144c0 <udp_bind+0x10c>)
 81143ec:	681b      	ldr	r3, [r3, #0]
 81143ee:	617b      	str	r3, [r7, #20]
 81143f0:	e009      	b.n	8114406 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 81143f2:	68fa      	ldr	r2, [r7, #12]
 81143f4:	697b      	ldr	r3, [r7, #20]
 81143f6:	429a      	cmp	r2, r3
 81143f8:	d102      	bne.n	8114400 <udp_bind+0x4c>
      rebind = 1;
 81143fa:	2301      	movs	r3, #1
 81143fc:	74fb      	strb	r3, [r7, #19]
      break;
 81143fe:	e005      	b.n	811440c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8114400:	697b      	ldr	r3, [r7, #20]
 8114402:	68db      	ldr	r3, [r3, #12]
 8114404:	617b      	str	r3, [r7, #20]
 8114406:	697b      	ldr	r3, [r7, #20]
 8114408:	2b00      	cmp	r3, #0
 811440a:	d1f2      	bne.n	81143f2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 811440c:	88fb      	ldrh	r3, [r7, #6]
 811440e:	2b00      	cmp	r3, #0
 8114410:	d109      	bne.n	8114426 <udp_bind+0x72>
    port = udp_new_port();
 8114412:	f7ff fc35 	bl	8113c80 <udp_new_port>
 8114416:	4603      	mov	r3, r0
 8114418:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 811441a:	88fb      	ldrh	r3, [r7, #6]
 811441c:	2b00      	cmp	r3, #0
 811441e:	d12c      	bne.n	811447a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8114420:	f06f 0307 	mvn.w	r3, #7
 8114424:	e040      	b.n	81144a8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8114426:	4b26      	ldr	r3, [pc, #152]	; (81144c0 <udp_bind+0x10c>)
 8114428:	681b      	ldr	r3, [r3, #0]
 811442a:	617b      	str	r3, [r7, #20]
 811442c:	e022      	b.n	8114474 <udp_bind+0xc0>
      if (pcb != ipcb) {
 811442e:	68fa      	ldr	r2, [r7, #12]
 8114430:	697b      	ldr	r3, [r7, #20]
 8114432:	429a      	cmp	r2, r3
 8114434:	d01b      	beq.n	811446e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8114436:	697b      	ldr	r3, [r7, #20]
 8114438:	8a5b      	ldrh	r3, [r3, #18]
 811443a:	88fa      	ldrh	r2, [r7, #6]
 811443c:	429a      	cmp	r2, r3
 811443e:	d116      	bne.n	811446e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8114440:	697b      	ldr	r3, [r7, #20]
 8114442:	681a      	ldr	r2, [r3, #0]
 8114444:	68bb      	ldr	r3, [r7, #8]
 8114446:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8114448:	429a      	cmp	r2, r3
 811444a:	d00d      	beq.n	8114468 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 811444c:	68bb      	ldr	r3, [r7, #8]
 811444e:	2b00      	cmp	r3, #0
 8114450:	d00a      	beq.n	8114468 <udp_bind+0xb4>
 8114452:	68bb      	ldr	r3, [r7, #8]
 8114454:	681b      	ldr	r3, [r3, #0]
 8114456:	2b00      	cmp	r3, #0
 8114458:	d006      	beq.n	8114468 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 811445a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 811445c:	2b00      	cmp	r3, #0
 811445e:	d003      	beq.n	8114468 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8114460:	697b      	ldr	r3, [r7, #20]
 8114462:	681b      	ldr	r3, [r3, #0]
 8114464:	2b00      	cmp	r3, #0
 8114466:	d102      	bne.n	811446e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8114468:	f06f 0307 	mvn.w	r3, #7
 811446c:	e01c      	b.n	81144a8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 811446e:	697b      	ldr	r3, [r7, #20]
 8114470:	68db      	ldr	r3, [r3, #12]
 8114472:	617b      	str	r3, [r7, #20]
 8114474:	697b      	ldr	r3, [r7, #20]
 8114476:	2b00      	cmp	r3, #0
 8114478:	d1d9      	bne.n	811442e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 811447a:	68bb      	ldr	r3, [r7, #8]
 811447c:	2b00      	cmp	r3, #0
 811447e:	d002      	beq.n	8114486 <udp_bind+0xd2>
 8114480:	68bb      	ldr	r3, [r7, #8]
 8114482:	681b      	ldr	r3, [r3, #0]
 8114484:	e000      	b.n	8114488 <udp_bind+0xd4>
 8114486:	2300      	movs	r3, #0
 8114488:	68fa      	ldr	r2, [r7, #12]
 811448a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 811448c:	68fb      	ldr	r3, [r7, #12]
 811448e:	88fa      	ldrh	r2, [r7, #6]
 8114490:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8114492:	7cfb      	ldrb	r3, [r7, #19]
 8114494:	2b00      	cmp	r3, #0
 8114496:	d106      	bne.n	81144a6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8114498:	4b09      	ldr	r3, [pc, #36]	; (81144c0 <udp_bind+0x10c>)
 811449a:	681a      	ldr	r2, [r3, #0]
 811449c:	68fb      	ldr	r3, [r7, #12]
 811449e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 81144a0:	4a07      	ldr	r2, [pc, #28]	; (81144c0 <udp_bind+0x10c>)
 81144a2:	68fb      	ldr	r3, [r7, #12]
 81144a4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 81144a6:	2300      	movs	r3, #0
}
 81144a8:	4618      	mov	r0, r3
 81144aa:	3718      	adds	r7, #24
 81144ac:	46bd      	mov	sp, r7
 81144ae:	bd80      	pop	{r7, pc}
 81144b0:	0811b6e4 	.word	0x0811b6e4
 81144b4:	0811af5c 	.word	0x0811af5c
 81144b8:	0811b25c 	.word	0x0811b25c
 81144bc:	0811afe8 	.word	0x0811afe8
 81144c0:	100087e0 	.word	0x100087e0

081144c4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 81144c4:	b580      	push	{r7, lr}
 81144c6:	b086      	sub	sp, #24
 81144c8:	af00      	add	r7, sp, #0
 81144ca:	60f8      	str	r0, [r7, #12]
 81144cc:	60b9      	str	r1, [r7, #8]
 81144ce:	4613      	mov	r3, r2
 81144d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 81144d2:	68fb      	ldr	r3, [r7, #12]
 81144d4:	2b00      	cmp	r3, #0
 81144d6:	d109      	bne.n	81144ec <udp_connect+0x28>
 81144d8:	4b2c      	ldr	r3, [pc, #176]	; (811458c <udp_connect+0xc8>)
 81144da:	f240 4235 	movw	r2, #1077	; 0x435
 81144de:	492c      	ldr	r1, [pc, #176]	; (8114590 <udp_connect+0xcc>)
 81144e0:	482c      	ldr	r0, [pc, #176]	; (8114594 <udp_connect+0xd0>)
 81144e2:	f003 f971 	bl	81177c8 <iprintf>
 81144e6:	f06f 030f 	mvn.w	r3, #15
 81144ea:	e04b      	b.n	8114584 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 81144ec:	68bb      	ldr	r3, [r7, #8]
 81144ee:	2b00      	cmp	r3, #0
 81144f0:	d109      	bne.n	8114506 <udp_connect+0x42>
 81144f2:	4b26      	ldr	r3, [pc, #152]	; (811458c <udp_connect+0xc8>)
 81144f4:	f240 4236 	movw	r2, #1078	; 0x436
 81144f8:	4927      	ldr	r1, [pc, #156]	; (8114598 <udp_connect+0xd4>)
 81144fa:	4826      	ldr	r0, [pc, #152]	; (8114594 <udp_connect+0xd0>)
 81144fc:	f003 f964 	bl	81177c8 <iprintf>
 8114500:	f06f 030f 	mvn.w	r3, #15
 8114504:	e03e      	b.n	8114584 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8114506:	68fb      	ldr	r3, [r7, #12]
 8114508:	8a5b      	ldrh	r3, [r3, #18]
 811450a:	2b00      	cmp	r3, #0
 811450c:	d10f      	bne.n	811452e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 811450e:	68f9      	ldr	r1, [r7, #12]
 8114510:	68fb      	ldr	r3, [r7, #12]
 8114512:	8a5b      	ldrh	r3, [r3, #18]
 8114514:	461a      	mov	r2, r3
 8114516:	68f8      	ldr	r0, [r7, #12]
 8114518:	f7ff ff4c 	bl	81143b4 <udp_bind>
 811451c:	4603      	mov	r3, r0
 811451e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8114520:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8114524:	2b00      	cmp	r3, #0
 8114526:	d002      	beq.n	811452e <udp_connect+0x6a>
      return err;
 8114528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811452c:	e02a      	b.n	8114584 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 811452e:	68bb      	ldr	r3, [r7, #8]
 8114530:	2b00      	cmp	r3, #0
 8114532:	d002      	beq.n	811453a <udp_connect+0x76>
 8114534:	68bb      	ldr	r3, [r7, #8]
 8114536:	681b      	ldr	r3, [r3, #0]
 8114538:	e000      	b.n	811453c <udp_connect+0x78>
 811453a:	2300      	movs	r3, #0
 811453c:	68fa      	ldr	r2, [r7, #12]
 811453e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8114540:	68fb      	ldr	r3, [r7, #12]
 8114542:	88fa      	ldrh	r2, [r7, #6]
 8114544:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8114546:	68fb      	ldr	r3, [r7, #12]
 8114548:	7c1b      	ldrb	r3, [r3, #16]
 811454a:	f043 0304 	orr.w	r3, r3, #4
 811454e:	b2da      	uxtb	r2, r3
 8114550:	68fb      	ldr	r3, [r7, #12]
 8114552:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8114554:	4b11      	ldr	r3, [pc, #68]	; (811459c <udp_connect+0xd8>)
 8114556:	681b      	ldr	r3, [r3, #0]
 8114558:	617b      	str	r3, [r7, #20]
 811455a:	e008      	b.n	811456e <udp_connect+0xaa>
    if (pcb == ipcb) {
 811455c:	68fa      	ldr	r2, [r7, #12]
 811455e:	697b      	ldr	r3, [r7, #20]
 8114560:	429a      	cmp	r2, r3
 8114562:	d101      	bne.n	8114568 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8114564:	2300      	movs	r3, #0
 8114566:	e00d      	b.n	8114584 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8114568:	697b      	ldr	r3, [r7, #20]
 811456a:	68db      	ldr	r3, [r3, #12]
 811456c:	617b      	str	r3, [r7, #20]
 811456e:	697b      	ldr	r3, [r7, #20]
 8114570:	2b00      	cmp	r3, #0
 8114572:	d1f3      	bne.n	811455c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8114574:	4b09      	ldr	r3, [pc, #36]	; (811459c <udp_connect+0xd8>)
 8114576:	681a      	ldr	r2, [r3, #0]
 8114578:	68fb      	ldr	r3, [r7, #12]
 811457a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 811457c:	4a07      	ldr	r2, [pc, #28]	; (811459c <udp_connect+0xd8>)
 811457e:	68fb      	ldr	r3, [r7, #12]
 8114580:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8114582:	2300      	movs	r3, #0
}
 8114584:	4618      	mov	r0, r3
 8114586:	3718      	adds	r7, #24
 8114588:	46bd      	mov	sp, r7
 811458a:	bd80      	pop	{r7, pc}
 811458c:	0811af5c 	.word	0x0811af5c
 8114590:	0811b274 	.word	0x0811b274
 8114594:	0811afe8 	.word	0x0811afe8
 8114598:	0811b290 	.word	0x0811b290
 811459c:	100087e0 	.word	0x100087e0

081145a0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 81145a0:	b580      	push	{r7, lr}
 81145a2:	b084      	sub	sp, #16
 81145a4:	af00      	add	r7, sp, #0
 81145a6:	60f8      	str	r0, [r7, #12]
 81145a8:	60b9      	str	r1, [r7, #8]
 81145aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 81145ac:	68fb      	ldr	r3, [r7, #12]
 81145ae:	2b00      	cmp	r3, #0
 81145b0:	d107      	bne.n	81145c2 <udp_recv+0x22>
 81145b2:	4b08      	ldr	r3, [pc, #32]	; (81145d4 <udp_recv+0x34>)
 81145b4:	f240 428a 	movw	r2, #1162	; 0x48a
 81145b8:	4907      	ldr	r1, [pc, #28]	; (81145d8 <udp_recv+0x38>)
 81145ba:	4808      	ldr	r0, [pc, #32]	; (81145dc <udp_recv+0x3c>)
 81145bc:	f003 f904 	bl	81177c8 <iprintf>
 81145c0:	e005      	b.n	81145ce <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 81145c2:	68fb      	ldr	r3, [r7, #12]
 81145c4:	68ba      	ldr	r2, [r7, #8]
 81145c6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 81145c8:	68fb      	ldr	r3, [r7, #12]
 81145ca:	687a      	ldr	r2, [r7, #4]
 81145cc:	61da      	str	r2, [r3, #28]
}
 81145ce:	3710      	adds	r7, #16
 81145d0:	46bd      	mov	sp, r7
 81145d2:	bd80      	pop	{r7, pc}
 81145d4:	0811af5c 	.word	0x0811af5c
 81145d8:	0811b2c8 	.word	0x0811b2c8
 81145dc:	0811afe8 	.word	0x0811afe8

081145e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 81145e0:	b580      	push	{r7, lr}
 81145e2:	b082      	sub	sp, #8
 81145e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 81145e6:	2000      	movs	r0, #0
 81145e8:	f7fd fe72 	bl	81122d0 <memp_malloc>
 81145ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 81145ee:	687b      	ldr	r3, [r7, #4]
 81145f0:	2b00      	cmp	r3, #0
 81145f2:	d007      	beq.n	8114604 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 81145f4:	2220      	movs	r2, #32
 81145f6:	2100      	movs	r1, #0
 81145f8:	6878      	ldr	r0, [r7, #4]
 81145fa:	f002 fc18 	bl	8116e2e <memset>
    pcb->ttl = UDP_TTL;
 81145fe:	687b      	ldr	r3, [r7, #4]
 8114600:	22ff      	movs	r2, #255	; 0xff
 8114602:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8114604:	687b      	ldr	r3, [r7, #4]
}
 8114606:	4618      	mov	r0, r3
 8114608:	3708      	adds	r7, #8
 811460a:	46bd      	mov	sp, r7
 811460c:	bd80      	pop	{r7, pc}
	...

08114610 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8114610:	b480      	push	{r7}
 8114612:	b085      	sub	sp, #20
 8114614:	af00      	add	r7, sp, #0
 8114616:	6078      	str	r0, [r7, #4]
 8114618:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 811461a:	687b      	ldr	r3, [r7, #4]
 811461c:	2b00      	cmp	r3, #0
 811461e:	d01e      	beq.n	811465e <udp_netif_ip_addr_changed+0x4e>
 8114620:	687b      	ldr	r3, [r7, #4]
 8114622:	681b      	ldr	r3, [r3, #0]
 8114624:	2b00      	cmp	r3, #0
 8114626:	d01a      	beq.n	811465e <udp_netif_ip_addr_changed+0x4e>
 8114628:	683b      	ldr	r3, [r7, #0]
 811462a:	2b00      	cmp	r3, #0
 811462c:	d017      	beq.n	811465e <udp_netif_ip_addr_changed+0x4e>
 811462e:	683b      	ldr	r3, [r7, #0]
 8114630:	681b      	ldr	r3, [r3, #0]
 8114632:	2b00      	cmp	r3, #0
 8114634:	d013      	beq.n	811465e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8114636:	4b0d      	ldr	r3, [pc, #52]	; (811466c <udp_netif_ip_addr_changed+0x5c>)
 8114638:	681b      	ldr	r3, [r3, #0]
 811463a:	60fb      	str	r3, [r7, #12]
 811463c:	e00c      	b.n	8114658 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 811463e:	68fb      	ldr	r3, [r7, #12]
 8114640:	681a      	ldr	r2, [r3, #0]
 8114642:	687b      	ldr	r3, [r7, #4]
 8114644:	681b      	ldr	r3, [r3, #0]
 8114646:	429a      	cmp	r2, r3
 8114648:	d103      	bne.n	8114652 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 811464a:	683b      	ldr	r3, [r7, #0]
 811464c:	681a      	ldr	r2, [r3, #0]
 811464e:	68fb      	ldr	r3, [r7, #12]
 8114650:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8114652:	68fb      	ldr	r3, [r7, #12]
 8114654:	68db      	ldr	r3, [r3, #12]
 8114656:	60fb      	str	r3, [r7, #12]
 8114658:	68fb      	ldr	r3, [r7, #12]
 811465a:	2b00      	cmp	r3, #0
 811465c:	d1ef      	bne.n	811463e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 811465e:	bf00      	nop
 8114660:	3714      	adds	r7, #20
 8114662:	46bd      	mov	sp, r7
 8114664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114668:	4770      	bx	lr
 811466a:	bf00      	nop
 811466c:	100087e0 	.word	0x100087e0

08114670 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 8114670:	b580      	push	{r7, lr}
 8114672:	b086      	sub	sp, #24
 8114674:	af02      	add	r7, sp, #8
 8114676:	6078      	str	r0, [r7, #4]
  if(!(netif_is_up(netif)))
 8114678:	687b      	ldr	r3, [r7, #4]
 811467a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 811467e:	f003 0301 	and.w	r3, r3, #1
 8114682:	2b00      	cmp	r3, #0
 8114684:	d103      	bne.n	811468e <ethernet_link_status_updated+0x1e>
  {
	  printf("ETH Link Down\n");
 8114686:	480d      	ldr	r0, [pc, #52]	; (81146bc <ethernet_link_status_updated+0x4c>)
 8114688:	f003 f924 	bl	81178d4 <puts>
	  int local_IP = netif->ip_addr.addr;
  //if ethernet link is up, turn off red led
	  printf("ETH Link up. IP: %d.%d.%d.%d\n",(local_IP & 0xff), ((local_IP >> 8) & 0xff), ((local_IP >> 16) & 0xff), (local_IP >> 24));

  }
}
 811468c:	e011      	b.n	81146b2 <ethernet_link_status_updated+0x42>
	  int local_IP = netif->ip_addr.addr;
 811468e:	687b      	ldr	r3, [r7, #4]
 8114690:	685b      	ldr	r3, [r3, #4]
 8114692:	60fb      	str	r3, [r7, #12]
	  printf("ETH Link up. IP: %d.%d.%d.%d\n",(local_IP & 0xff), ((local_IP >> 8) & 0xff), ((local_IP >> 16) & 0xff), (local_IP >> 24));
 8114694:	68fb      	ldr	r3, [r7, #12]
 8114696:	b2d9      	uxtb	r1, r3
 8114698:	68fb      	ldr	r3, [r7, #12]
 811469a:	121b      	asrs	r3, r3, #8
 811469c:	b2da      	uxtb	r2, r3
 811469e:	68fb      	ldr	r3, [r7, #12]
 81146a0:	141b      	asrs	r3, r3, #16
 81146a2:	b2d8      	uxtb	r0, r3
 81146a4:	68fb      	ldr	r3, [r7, #12]
 81146a6:	161b      	asrs	r3, r3, #24
 81146a8:	9300      	str	r3, [sp, #0]
 81146aa:	4603      	mov	r3, r0
 81146ac:	4804      	ldr	r0, [pc, #16]	; (81146c0 <ethernet_link_status_updated+0x50>)
 81146ae:	f003 f88b 	bl	81177c8 <iprintf>
}
 81146b2:	bf00      	nop
 81146b4:	3710      	adds	r7, #16
 81146b6:	46bd      	mov	sp, r7
 81146b8:	bd80      	pop	{r7, pc}
 81146ba:	bf00      	nop
 81146bc:	0811b2f8 	.word	0x0811b2f8
 81146c0:	0811b308 	.word	0x0811b308

081146c4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 81146c4:	b580      	push	{r7, lr}
 81146c6:	b08e      	sub	sp, #56	; 0x38
 81146c8:	af00      	add	r7, sp, #0
 81146ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81146cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81146d0:	2200      	movs	r2, #0
 81146d2:	601a      	str	r2, [r3, #0]
 81146d4:	605a      	str	r2, [r3, #4]
 81146d6:	609a      	str	r2, [r3, #8]
 81146d8:	60da      	str	r2, [r3, #12]
 81146da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 81146dc:	687b      	ldr	r3, [r7, #4]
 81146de:	681b      	ldr	r3, [r3, #0]
 81146e0:	4a5d      	ldr	r2, [pc, #372]	; (8114858 <HAL_ETH_MspInit+0x194>)
 81146e2:	4293      	cmp	r3, r2
 81146e4:	f040 80b3 	bne.w	811484e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81146e8:	4b5c      	ldr	r3, [pc, #368]	; (811485c <HAL_ETH_MspInit+0x198>)
 81146ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81146ee:	4a5b      	ldr	r2, [pc, #364]	; (811485c <HAL_ETH_MspInit+0x198>)
 81146f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81146f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81146f8:	4b58      	ldr	r3, [pc, #352]	; (811485c <HAL_ETH_MspInit+0x198>)
 81146fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81146fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8114702:	623b      	str	r3, [r7, #32]
 8114704:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8114706:	4b55      	ldr	r3, [pc, #340]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 811470c:	4a53      	ldr	r2, [pc, #332]	; (811485c <HAL_ETH_MspInit+0x198>)
 811470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8114712:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8114716:	4b51      	ldr	r3, [pc, #324]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 811471c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8114720:	61fb      	str	r3, [r7, #28]
 8114722:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8114724:	4b4d      	ldr	r3, [pc, #308]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 811472a:	4a4c      	ldr	r2, [pc, #304]	; (811485c <HAL_ETH_MspInit+0x198>)
 811472c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8114730:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8114734:	4b49      	ldr	r3, [pc, #292]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 811473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 811473e:	61bb      	str	r3, [r7, #24]
 8114740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8114742:	4b46      	ldr	r3, [pc, #280]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8114748:	4a44      	ldr	r2, [pc, #272]	; (811485c <HAL_ETH_MspInit+0x198>)
 811474a:	f043 0304 	orr.w	r3, r3, #4
 811474e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8114752:	4b42      	ldr	r3, [pc, #264]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8114758:	f003 0304 	and.w	r3, r3, #4
 811475c:	617b      	str	r3, [r7, #20]
 811475e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8114760:	4b3e      	ldr	r3, [pc, #248]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8114766:	4a3d      	ldr	r2, [pc, #244]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114768:	f043 0301 	orr.w	r3, r3, #1
 811476c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8114770:	4b3a      	ldr	r3, [pc, #232]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8114776:	f003 0301 	and.w	r3, r3, #1
 811477a:	613b      	str	r3, [r7, #16]
 811477c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 811477e:	4b37      	ldr	r3, [pc, #220]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8114784:	4a35      	ldr	r2, [pc, #212]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114786:	f043 0302 	orr.w	r3, r3, #2
 811478a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 811478e:	4b33      	ldr	r3, [pc, #204]	; (811485c <HAL_ETH_MspInit+0x198>)
 8114790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8114794:	f003 0302 	and.w	r3, r3, #2
 8114798:	60fb      	str	r3, [r7, #12]
 811479a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 811479c:	4b2f      	ldr	r3, [pc, #188]	; (811485c <HAL_ETH_MspInit+0x198>)
 811479e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81147a2:	4a2e      	ldr	r2, [pc, #184]	; (811485c <HAL_ETH_MspInit+0x198>)
 81147a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81147a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81147ac:	4b2b      	ldr	r3, [pc, #172]	; (811485c <HAL_ETH_MspInit+0x198>)
 81147ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81147b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81147b6:	60bb      	str	r3, [r7, #8]
 81147b8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 81147ba:	2332      	movs	r3, #50	; 0x32
 81147bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81147be:	2302      	movs	r3, #2
 81147c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81147c2:	2300      	movs	r3, #0
 81147c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81147c6:	2303      	movs	r3, #3
 81147c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81147ca:	230b      	movs	r3, #11
 81147cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81147ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81147d2:	4619      	mov	r1, r3
 81147d4:	4822      	ldr	r0, [pc, #136]	; (8114860 <HAL_ETH_MspInit+0x19c>)
 81147d6:	f7f2 fb0d 	bl	8106df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 81147da:	2386      	movs	r3, #134	; 0x86
 81147dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81147de:	2302      	movs	r3, #2
 81147e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81147e2:	2300      	movs	r3, #0
 81147e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81147e6:	2303      	movs	r3, #3
 81147e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81147ea:	230b      	movs	r3, #11
 81147ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81147ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81147f2:	4619      	mov	r1, r3
 81147f4:	481b      	ldr	r0, [pc, #108]	; (8114864 <HAL_ETH_MspInit+0x1a0>)
 81147f6:	f7f2 fafd 	bl	8106df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 81147fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81147fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8114800:	2302      	movs	r3, #2
 8114802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8114804:	2300      	movs	r3, #0
 8114806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8114808:	2303      	movs	r3, #3
 811480a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 811480c:	230b      	movs	r3, #11
 811480e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8114810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8114814:	4619      	mov	r1, r3
 8114816:	4814      	ldr	r0, [pc, #80]	; (8114868 <HAL_ETH_MspInit+0x1a4>)
 8114818:	f7f2 faec 	bl	8106df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 811481c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8114820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8114822:	2302      	movs	r3, #2
 8114824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8114826:	2300      	movs	r3, #0
 8114828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 811482a:	2303      	movs	r3, #3
 811482c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 811482e:	230b      	movs	r3, #11
 8114830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8114832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8114836:	4619      	mov	r1, r3
 8114838:	480c      	ldr	r0, [pc, #48]	; (811486c <HAL_ETH_MspInit+0x1a8>)
 811483a:	f7f2 fadb 	bl	8106df4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 811483e:	2200      	movs	r2, #0
 8114840:	2105      	movs	r1, #5
 8114842:	203d      	movs	r0, #61	; 0x3d
 8114844:	f7ee fb04 	bl	8102e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8114848:	203d      	movs	r0, #61	; 0x3d
 811484a:	f7ee fb1b 	bl	8102e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 811484e:	bf00      	nop
 8114850:	3738      	adds	r7, #56	; 0x38
 8114852:	46bd      	mov	sp, r7
 8114854:	bd80      	pop	{r7, pc}
 8114856:	bf00      	nop
 8114858:	40028000 	.word	0x40028000
 811485c:	58024400 	.word	0x58024400
 8114860:	58020800 	.word	0x58020800
 8114864:	58020000 	.word	0x58020000
 8114868:	58020400 	.word	0x58020400
 811486c:	58021800 	.word	0x58021800

08114870 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8114870:	b580      	push	{r7, lr}
 8114872:	b082      	sub	sp, #8
 8114874:	af00      	add	r7, sp, #0
 8114876:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8114878:	4b04      	ldr	r3, [pc, #16]	; (811488c <HAL_ETH_RxCpltCallback+0x1c>)
 811487a:	681b      	ldr	r3, [r3, #0]
 811487c:	4618      	mov	r0, r3
 811487e:	f7f8 f82d 	bl	810c8dc <osSemaphoreRelease>
}
 8114882:	bf00      	nop
 8114884:	3708      	adds	r7, #8
 8114886:	46bd      	mov	sp, r7
 8114888:	bd80      	pop	{r7, pc}
 811488a:	bf00      	nop
 811488c:	1000595c 	.word	0x1000595c

08114890 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8114890:	b5b0      	push	{r4, r5, r7, lr}
 8114892:	b0ac      	sub	sp, #176	; 0xb0
 8114894:	af00      	add	r7, sp, #0
 8114896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8114898:	2300      	movs	r3, #0
 811489a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 811489e:	2300      	movs	r3, #0
 81148a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 81148a4:	2300      	movs	r3, #0
 81148a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 81148aa:	4b91      	ldr	r3, [pc, #580]	; (8114af0 <low_level_init+0x260>)
 81148ac:	4a91      	ldr	r2, [pc, #580]	; (8114af4 <low_level_init+0x264>)
 81148ae:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81148b0:	2300      	movs	r3, #0
 81148b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 81148b6:	2380      	movs	r3, #128	; 0x80
 81148b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 81148bc:	23e1      	movs	r3, #225	; 0xe1
 81148be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 81148c2:	2300      	movs	r3, #0
 81148c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 81148c8:	2300      	movs	r3, #0
 81148ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 81148ce:	2300      	movs	r3, #0
 81148d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 81148d4:	4a86      	ldr	r2, [pc, #536]	; (8114af0 <low_level_init+0x260>)
 81148d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81148da:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81148dc:	4b84      	ldr	r3, [pc, #528]	; (8114af0 <low_level_init+0x260>)
 81148de:	2201      	movs	r2, #1
 81148e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81148e2:	4b83      	ldr	r3, [pc, #524]	; (8114af0 <low_level_init+0x260>)
 81148e4:	4a84      	ldr	r2, [pc, #528]	; (8114af8 <low_level_init+0x268>)
 81148e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81148e8:	4b81      	ldr	r3, [pc, #516]	; (8114af0 <low_level_init+0x260>)
 81148ea:	4a84      	ldr	r2, [pc, #528]	; (8114afc <low_level_init+0x26c>)
 81148ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 81148ee:	4b80      	ldr	r3, [pc, #512]	; (8114af0 <low_level_init+0x260>)
 81148f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 81148f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 81148f6:	487e      	ldr	r0, [pc, #504]	; (8114af0 <low_level_init+0x260>)
 81148f8:	f7f0 fbbc 	bl	8105074 <HAL_ETH_Init>
 81148fc:	4603      	mov	r3, r0
 81148fe:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8114902:	2234      	movs	r2, #52	; 0x34
 8114904:	2100      	movs	r1, #0
 8114906:	487e      	ldr	r0, [pc, #504]	; (8114b00 <low_level_init+0x270>)
 8114908:	f002 fa91 	bl	8116e2e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 811490c:	4b7c      	ldr	r3, [pc, #496]	; (8114b00 <low_level_init+0x270>)
 811490e:	2221      	movs	r2, #33	; 0x21
 8114910:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8114912:	4b7b      	ldr	r3, [pc, #492]	; (8114b00 <low_level_init+0x270>)
 8114914:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8114918:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 811491a:	4b79      	ldr	r3, [pc, #484]	; (8114b00 <low_level_init+0x270>)
 811491c:	2200      	movs	r2, #0
 811491e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8114920:	4878      	ldr	r0, [pc, #480]	; (8114b04 <low_level_init+0x274>)
 8114922:	f7fd fc37 	bl	8112194 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8114926:	687b      	ldr	r3, [r7, #4]
 8114928:	2206      	movs	r2, #6
 811492a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 811492e:	4b70      	ldr	r3, [pc, #448]	; (8114af0 <low_level_init+0x260>)
 8114930:	685b      	ldr	r3, [r3, #4]
 8114932:	781a      	ldrb	r2, [r3, #0]
 8114934:	687b      	ldr	r3, [r7, #4]
 8114936:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 811493a:	4b6d      	ldr	r3, [pc, #436]	; (8114af0 <low_level_init+0x260>)
 811493c:	685b      	ldr	r3, [r3, #4]
 811493e:	785a      	ldrb	r2, [r3, #1]
 8114940:	687b      	ldr	r3, [r7, #4]
 8114942:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8114946:	4b6a      	ldr	r3, [pc, #424]	; (8114af0 <low_level_init+0x260>)
 8114948:	685b      	ldr	r3, [r3, #4]
 811494a:	789a      	ldrb	r2, [r3, #2]
 811494c:	687b      	ldr	r3, [r7, #4]
 811494e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8114952:	4b67      	ldr	r3, [pc, #412]	; (8114af0 <low_level_init+0x260>)
 8114954:	685b      	ldr	r3, [r3, #4]
 8114956:	78da      	ldrb	r2, [r3, #3]
 8114958:	687b      	ldr	r3, [r7, #4]
 811495a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 811495e:	4b64      	ldr	r3, [pc, #400]	; (8114af0 <low_level_init+0x260>)
 8114960:	685b      	ldr	r3, [r3, #4]
 8114962:	791a      	ldrb	r2, [r3, #4]
 8114964:	687b      	ldr	r3, [r7, #4]
 8114966:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 811496a:	4b61      	ldr	r3, [pc, #388]	; (8114af0 <low_level_init+0x260>)
 811496c:	685b      	ldr	r3, [r3, #4]
 811496e:	795a      	ldrb	r2, [r3, #5]
 8114970:	687b      	ldr	r3, [r7, #4]
 8114972:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8114976:	687b      	ldr	r3, [r7, #4]
 8114978:	f240 52dc 	movw	r2, #1500	; 0x5dc
 811497c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 811497e:	687b      	ldr	r3, [r7, #4]
 8114980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8114984:	f043 030a 	orr.w	r3, r3, #10
 8114988:	b2da      	uxtb	r2, r3
 811498a:	687b      	ldr	r3, [r7, #4]
 811498c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8114990:	2300      	movs	r3, #0
 8114992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8114996:	e012      	b.n	81149be <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8114998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 811499c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 81149a0:	fb02 f303 	mul.w	r3, r2, r3
 81149a4:	4a58      	ldr	r2, [pc, #352]	; (8114b08 <low_level_init+0x278>)
 81149a6:	441a      	add	r2, r3
 81149a8:	2300      	movs	r3, #0
 81149aa:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 81149ae:	4850      	ldr	r0, [pc, #320]	; (8114af0 <low_level_init+0x260>)
 81149b0:	f7f0 fc3a 	bl	8105228 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 81149b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 81149b8:	3301      	adds	r3, #1
 81149ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81149be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 81149c2:	2b03      	cmp	r3, #3
 81149c4:	d9e8      	bls.n	8114998 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 81149c6:	2300      	movs	r3, #0
 81149c8:	62bb      	str	r3, [r7, #40]	; 0x28
 81149ca:	2300      	movs	r3, #0
 81149cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 81149ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81149d2:	2101      	movs	r1, #1
 81149d4:	4618      	mov	r0, r3
 81149d6:	f7f7 ff01 	bl	810c7dc <osSemaphoreCreate>
 81149da:	4603      	mov	r3, r0
 81149dc:	4a4b      	ldr	r2, [pc, #300]	; (8114b0c <low_level_init+0x27c>)
 81149de:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 81149e0:	4b4b      	ldr	r3, [pc, #300]	; (8114b10 <low_level_init+0x280>)
 81149e2:	f107 040c 	add.w	r4, r7, #12
 81149e6:	461d      	mov	r5, r3
 81149e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81149ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81149ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81149f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 81149f4:	f107 030c 	add.w	r3, r7, #12
 81149f8:	6879      	ldr	r1, [r7, #4]
 81149fa:	4618      	mov	r0, r3
 81149fc:	f7f7 fdf1 	bl	810c5e2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8114a00:	4944      	ldr	r1, [pc, #272]	; (8114b14 <low_level_init+0x284>)
 8114a02:	4845      	ldr	r0, [pc, #276]	; (8114b18 <low_level_init+0x288>)
 8114a04:	f7ec fb40 	bl	8101088 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8114a08:	4843      	ldr	r0, [pc, #268]	; (8114b18 <low_level_init+0x288>)
 8114a0a:	f7ec fb6f 	bl	81010ec <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8114a0e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8114a12:	2b00      	cmp	r3, #0
 8114a14:	d165      	bne.n	8114ae2 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8114a16:	4840      	ldr	r0, [pc, #256]	; (8114b18 <low_level_init+0x288>)
 8114a18:	f7ec fc10 	bl	810123c <LAN8742_GetLinkState>
 8114a1c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8114a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8114a24:	2b01      	cmp	r3, #1
 8114a26:	dc06      	bgt.n	8114a36 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8114a28:	6878      	ldr	r0, [r7, #4]
 8114a2a:	f7fd ff89 	bl	8112940 <netif_set_link_down>
      netif_set_down(netif);
 8114a2e:	6878      	ldr	r0, [r7, #4]
 8114a30:	f7fd ff20 	bl	8112874 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8114a34:	e057      	b.n	8114ae6 <low_level_init+0x256>
 8114a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8114a3a:	3b02      	subs	r3, #2
 8114a3c:	2b03      	cmp	r3, #3
 8114a3e:	d82b      	bhi.n	8114a98 <low_level_init+0x208>
 8114a40:	a201      	add	r2, pc, #4	; (adr r2, 8114a48 <low_level_init+0x1b8>)
 8114a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114a46:	bf00      	nop
 8114a48:	08114a59 	.word	0x08114a59
 8114a4c:	08114a6b 	.word	0x08114a6b
 8114a50:	08114a7b 	.word	0x08114a7b
 8114a54:	08114a8b 	.word	0x08114a8b
        duplex = ETH_FULLDUPLEX_MODE;
 8114a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8114a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8114a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8114a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8114a68:	e01f      	b.n	8114aaa <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8114a6a:	2300      	movs	r3, #0
 8114a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8114a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8114a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8114a78:	e017      	b.n	8114aaa <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8114a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8114a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8114a82:	2300      	movs	r3, #0
 8114a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8114a88:	e00f      	b.n	8114aaa <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8114a8a:	2300      	movs	r3, #0
 8114a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8114a90:	2300      	movs	r3, #0
 8114a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8114a96:	e008      	b.n	8114aaa <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8114a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8114a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8114aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8114aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8114aa8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8114aaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8114aae:	4619      	mov	r1, r3
 8114ab0:	480f      	ldr	r0, [pc, #60]	; (8114af0 <low_level_init+0x260>)
 8114ab2:	f7f1 f99f 	bl	8105df4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8114ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8114aba:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8114abc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8114ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8114ac2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8114ac6:	4619      	mov	r1, r3
 8114ac8:	4809      	ldr	r0, [pc, #36]	; (8114af0 <low_level_init+0x260>)
 8114aca:	f7f1 fb67 	bl	810619c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8114ace:	4808      	ldr	r0, [pc, #32]	; (8114af0 <low_level_init+0x260>)
 8114ad0:	f7f0 fbeb 	bl	81052aa <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8114ad4:	6878      	ldr	r0, [r7, #4]
 8114ad6:	f7fd fe61 	bl	811279c <netif_set_up>
    netif_set_link_up(netif);
 8114ada:	6878      	ldr	r0, [r7, #4]
 8114adc:	f7fd fefc 	bl	81128d8 <netif_set_link_up>
}
 8114ae0:	e001      	b.n	8114ae6 <low_level_init+0x256>
    Error_Handler();
 8114ae2:	f001 fad9 	bl	8116098 <Error_Handler>
}
 8114ae6:	bf00      	nop
 8114ae8:	37b0      	adds	r7, #176	; 0xb0
 8114aea:	46bd      	mov	sp, r7
 8114aec:	bdb0      	pop	{r4, r5, r7, pc}
 8114aee:	bf00      	nop
 8114af0:	100088d0 	.word	0x100088d0
 8114af4:	40028000 	.word	0x40028000
 8114af8:	1000025c 	.word	0x1000025c
 8114afc:	100001fc 	.word	0x100001fc
 8114b00:	10008958 	.word	0x10008958
 8114b04:	0811b7a0 	.word	0x0811b7a0
 8114b08:	100002bc 	.word	0x100002bc
 8114b0c:	1000595c 	.word	0x1000595c
 8114b10:	0811b330 	.word	0x0811b330
 8114b14:	10000018 	.word	0x10000018
 8114b18:	100088b0 	.word	0x100088b0

08114b1c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8114b1c:	b580      	push	{r7, lr}
 8114b1e:	b092      	sub	sp, #72	; 0x48
 8114b20:	af00      	add	r7, sp, #0
 8114b22:	6078      	str	r0, [r7, #4]
 8114b24:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8114b26:	2300      	movs	r3, #0
 8114b28:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8114b2a:	2300      	movs	r3, #0
 8114b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8114b30:	f107 030c 	add.w	r3, r7, #12
 8114b34:	2230      	movs	r2, #48	; 0x30
 8114b36:	2100      	movs	r1, #0
 8114b38:	4618      	mov	r0, r3
 8114b3a:	f002 f978 	bl	8116e2e <memset>

  for(q = p; q != NULL; q = q->next)
 8114b3e:	683b      	ldr	r3, [r7, #0]
 8114b40:	643b      	str	r3, [r7, #64]	; 0x40
 8114b42:	e049      	b.n	8114bd8 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8114b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8114b46:	2b03      	cmp	r3, #3
 8114b48:	d902      	bls.n	8114b50 <low_level_output+0x34>
      return ERR_IF;
 8114b4a:	f06f 030b 	mvn.w	r3, #11
 8114b4e:	e056      	b.n	8114bfe <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8114b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114b52:	6859      	ldr	r1, [r3, #4]
 8114b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8114b56:	4613      	mov	r3, r2
 8114b58:	005b      	lsls	r3, r3, #1
 8114b5a:	4413      	add	r3, r2
 8114b5c:	009b      	lsls	r3, r3, #2
 8114b5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8114b62:	4413      	add	r3, r2
 8114b64:	3b3c      	subs	r3, #60	; 0x3c
 8114b66:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8114b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114b6a:	895b      	ldrh	r3, [r3, #10]
 8114b6c:	4619      	mov	r1, r3
 8114b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8114b70:	4613      	mov	r3, r2
 8114b72:	005b      	lsls	r3, r3, #1
 8114b74:	4413      	add	r3, r2
 8114b76:	009b      	lsls	r3, r3, #2
 8114b78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8114b7c:	4413      	add	r3, r2
 8114b7e:	3b38      	subs	r3, #56	; 0x38
 8114b80:	6019      	str	r1, [r3, #0]

    if(i>0)
 8114b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8114b84:	2b00      	cmp	r3, #0
 8114b86:	d012      	beq.n	8114bae <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8114b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8114b8a:	1e5a      	subs	r2, r3, #1
 8114b8c:	f107 000c 	add.w	r0, r7, #12
 8114b90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8114b92:	460b      	mov	r3, r1
 8114b94:	005b      	lsls	r3, r3, #1
 8114b96:	440b      	add	r3, r1
 8114b98:	009b      	lsls	r3, r3, #2
 8114b9a:	18c1      	adds	r1, r0, r3
 8114b9c:	4613      	mov	r3, r2
 8114b9e:	005b      	lsls	r3, r3, #1
 8114ba0:	4413      	add	r3, r2
 8114ba2:	009b      	lsls	r3, r3, #2
 8114ba4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8114ba8:	4413      	add	r3, r2
 8114baa:	3b34      	subs	r3, #52	; 0x34
 8114bac:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8114bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114bb0:	681b      	ldr	r3, [r3, #0]
 8114bb2:	2b00      	cmp	r3, #0
 8114bb4:	d10a      	bne.n	8114bcc <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8114bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8114bb8:	4613      	mov	r3, r2
 8114bba:	005b      	lsls	r3, r3, #1
 8114bbc:	4413      	add	r3, r2
 8114bbe:	009b      	lsls	r3, r3, #2
 8114bc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8114bc4:	4413      	add	r3, r2
 8114bc6:	3b34      	subs	r3, #52	; 0x34
 8114bc8:	2200      	movs	r2, #0
 8114bca:	601a      	str	r2, [r3, #0]
    }

    i++;
 8114bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8114bce:	3301      	adds	r3, #1
 8114bd0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8114bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114bd4:	681b      	ldr	r3, [r3, #0]
 8114bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8114bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114bda:	2b00      	cmp	r3, #0
 8114bdc:	d1b2      	bne.n	8114b44 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8114bde:	683b      	ldr	r3, [r7, #0]
 8114be0:	891b      	ldrh	r3, [r3, #8]
 8114be2:	461a      	mov	r2, r3
 8114be4:	4b08      	ldr	r3, [pc, #32]	; (8114c08 <low_level_output+0xec>)
 8114be6:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8114be8:	4a07      	ldr	r2, [pc, #28]	; (8114c08 <low_level_output+0xec>)
 8114bea:	f107 030c 	add.w	r3, r7, #12
 8114bee:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8114bf0:	2214      	movs	r2, #20
 8114bf2:	4905      	ldr	r1, [pc, #20]	; (8114c08 <low_level_output+0xec>)
 8114bf4:	4805      	ldr	r0, [pc, #20]	; (8114c0c <low_level_output+0xf0>)
 8114bf6:	f7f0 fc56 	bl	81054a6 <HAL_ETH_Transmit>

  return errval;
 8114bfa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8114bfe:	4618      	mov	r0, r3
 8114c00:	3748      	adds	r7, #72	; 0x48
 8114c02:	46bd      	mov	sp, r7
 8114c04:	bd80      	pop	{r7, pc}
 8114c06:	bf00      	nop
 8114c08:	10008958 	.word	0x10008958
 8114c0c:	100088d0 	.word	0x100088d0

08114c10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8114c10:	b580      	push	{r7, lr}
 8114c12:	b094      	sub	sp, #80	; 0x50
 8114c14:	af02      	add	r7, sp, #8
 8114c16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8114c18:	2300      	movs	r3, #0
 8114c1a:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8114c1c:	2300      	movs	r3, #0
 8114c1e:	60bb      	str	r3, [r7, #8]
 8114c20:	2300      	movs	r3, #0
 8114c22:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8114c24:	f107 030c 	add.w	r3, r7, #12
 8114c28:	2230      	movs	r2, #48	; 0x30
 8114c2a:	2100      	movs	r1, #0
 8114c2c:	4618      	mov	r0, r3
 8114c2e:	f002 f8fe 	bl	8116e2e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8114c32:	2300      	movs	r3, #0
 8114c34:	643b      	str	r3, [r7, #64]	; 0x40
 8114c36:	e015      	b.n	8114c64 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8114c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114c3a:	1c5a      	adds	r2, r3, #1
 8114c3c:	f107 010c 	add.w	r1, r7, #12
 8114c40:	4613      	mov	r3, r2
 8114c42:	005b      	lsls	r3, r3, #1
 8114c44:	4413      	add	r3, r2
 8114c46:	009b      	lsls	r3, r3, #2
 8114c48:	4419      	add	r1, r3
 8114c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8114c4c:	4613      	mov	r3, r2
 8114c4e:	005b      	lsls	r3, r3, #1
 8114c50:	4413      	add	r3, r2
 8114c52:	009b      	lsls	r3, r3, #2
 8114c54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8114c58:	4413      	add	r3, r2
 8114c5a:	3b34      	subs	r3, #52	; 0x34
 8114c5c:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8114c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114c60:	3301      	adds	r3, #1
 8114c62:	643b      	str	r3, [r7, #64]	; 0x40
 8114c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8114c66:	2b02      	cmp	r3, #2
 8114c68:	d9e6      	bls.n	8114c38 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8114c6a:	f107 030c 	add.w	r3, r7, #12
 8114c6e:	4619      	mov	r1, r3
 8114c70:	4815      	ldr	r0, [pc, #84]	; (8114cc8 <low_level_input+0xb8>)
 8114c72:	f7f0 fd91 	bl	8105798 <HAL_ETH_GetRxDataBuffer>
 8114c76:	4603      	mov	r3, r0
 8114c78:	2b00      	cmp	r3, #0
 8114c7a:	d11f      	bne.n	8114cbc <low_level_input+0xac>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8114c7c:	f107 0308 	add.w	r3, r7, #8
 8114c80:	4619      	mov	r1, r3
 8114c82:	4811      	ldr	r0, [pc, #68]	; (8114cc8 <low_level_input+0xb8>)
 8114c84:	f7f0 fe26 	bl	81058d4 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8114c88:	480f      	ldr	r0, [pc, #60]	; (8114cc8 <low_level_input+0xb8>)
 8114c8a:	f7f0 fe56 	bl	810593a <HAL_ETH_BuildRxDescriptors>
#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8114c8e:	480f      	ldr	r0, [pc, #60]	; (8114ccc <low_level_input+0xbc>)
 8114c90:	f7fd fafc 	bl	811228c <memp_malloc_pool>
 8114c94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 8114c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8114c98:	2b00      	cmp	r3, #0
 8114c9a:	d00f      	beq.n	8114cbc <low_level_input+0xac>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8114c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8114c9e:	4a0c      	ldr	r2, [pc, #48]	; (8114cd0 <low_level_input+0xc0>)
 8114ca0:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8114ca2:	68bb      	ldr	r3, [r7, #8]
 8114ca4:	b299      	uxth	r1, r3
 8114ca6:	68fb      	ldr	r3, [r7, #12]
 8114ca8:	68ba      	ldr	r2, [r7, #8]
 8114caa:	b292      	uxth	r2, r2
 8114cac:	9201      	str	r2, [sp, #4]
 8114cae:	9300      	str	r3, [sp, #0]
 8114cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8114cb2:	2241      	movs	r2, #65	; 0x41
 8114cb4:	2000      	movs	r0, #0
 8114cb6:	f7fe f80b 	bl	8112cd0 <pbuf_alloced_custom>
 8114cba:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 8114cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8114cbe:	4618      	mov	r0, r3
 8114cc0:	3748      	adds	r7, #72	; 0x48
 8114cc2:	46bd      	mov	sp, r7
 8114cc4:	bd80      	pop	{r7, pc}
 8114cc6:	bf00      	nop
 8114cc8:	100088d0 	.word	0x100088d0
 8114ccc:	0811b7a0 	.word	0x0811b7a0
 8114cd0:	08114d81 	.word	0x08114d81

08114cd4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8114cd4:	b580      	push	{r7, lr}
 8114cd6:	b084      	sub	sp, #16
 8114cd8:	af00      	add	r7, sp, #0
 8114cda:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8114cdc:	687b      	ldr	r3, [r7, #4]
 8114cde:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8114ce0:	4b0f      	ldr	r3, [pc, #60]	; (8114d20 <ethernetif_input+0x4c>)
 8114ce2:	681b      	ldr	r3, [r3, #0]
 8114ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8114ce8:	4618      	mov	r0, r3
 8114cea:	f7f7 fda9 	bl	810c840 <osSemaphoreWait>
 8114cee:	4603      	mov	r3, r0
 8114cf0:	2b00      	cmp	r3, #0
 8114cf2:	d1f5      	bne.n	8114ce0 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8114cf4:	68f8      	ldr	r0, [r7, #12]
 8114cf6:	f7ff ff8b 	bl	8114c10 <low_level_input>
 8114cfa:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8114cfc:	68bb      	ldr	r3, [r7, #8]
 8114cfe:	2b00      	cmp	r3, #0
 8114d00:	d00a      	beq.n	8114d18 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8114d02:	68fb      	ldr	r3, [r7, #12]
 8114d04:	691b      	ldr	r3, [r3, #16]
 8114d06:	68f9      	ldr	r1, [r7, #12]
 8114d08:	68b8      	ldr	r0, [r7, #8]
 8114d0a:	4798      	blx	r3
 8114d0c:	4603      	mov	r3, r0
 8114d0e:	2b00      	cmp	r3, #0
 8114d10:	d002      	beq.n	8114d18 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8114d12:	68b8      	ldr	r0, [r7, #8]
 8114d14:	f7fe f996 	bl	8113044 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8114d18:	68bb      	ldr	r3, [r7, #8]
 8114d1a:	2b00      	cmp	r3, #0
 8114d1c:	d1ea      	bne.n	8114cf4 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8114d1e:	e7df      	b.n	8114ce0 <ethernetif_input+0xc>
 8114d20:	1000595c 	.word	0x1000595c

08114d24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8114d24:	b580      	push	{r7, lr}
 8114d26:	b082      	sub	sp, #8
 8114d28:	af00      	add	r7, sp, #0
 8114d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8114d2c:	687b      	ldr	r3, [r7, #4]
 8114d2e:	2b00      	cmp	r3, #0
 8114d30:	d106      	bne.n	8114d40 <ethernetif_init+0x1c>
 8114d32:	4b0e      	ldr	r3, [pc, #56]	; (8114d6c <ethernetif_init+0x48>)
 8114d34:	f44f 7212 	mov.w	r2, #584	; 0x248
 8114d38:	490d      	ldr	r1, [pc, #52]	; (8114d70 <ethernetif_init+0x4c>)
 8114d3a:	480e      	ldr	r0, [pc, #56]	; (8114d74 <ethernetif_init+0x50>)
 8114d3c:	f002 fd44 	bl	81177c8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8114d40:	687b      	ldr	r3, [r7, #4]
 8114d42:	2273      	movs	r2, #115	; 0x73
 8114d44:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8114d48:	687b      	ldr	r3, [r7, #4]
 8114d4a:	2274      	movs	r2, #116	; 0x74
 8114d4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8114d50:	687b      	ldr	r3, [r7, #4]
 8114d52:	4a09      	ldr	r2, [pc, #36]	; (8114d78 <ethernetif_init+0x54>)
 8114d54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8114d56:	687b      	ldr	r3, [r7, #4]
 8114d58:	4a08      	ldr	r2, [pc, #32]	; (8114d7c <ethernetif_init+0x58>)
 8114d5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8114d5c:	6878      	ldr	r0, [r7, #4]
 8114d5e:	f7ff fd97 	bl	8114890 <low_level_init>

  return ERR_OK;
 8114d62:	2300      	movs	r3, #0
}
 8114d64:	4618      	mov	r0, r3
 8114d66:	3708      	adds	r7, #8
 8114d68:	46bd      	mov	sp, r7
 8114d6a:	bd80      	pop	{r7, pc}
 8114d6c:	0811b34c 	.word	0x0811b34c
 8114d70:	0811b360 	.word	0x0811b360
 8114d74:	0811b370 	.word	0x0811b370
 8114d78:	0810fad1 	.word	0x0810fad1
 8114d7c:	08114b1d 	.word	0x08114b1d

08114d80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8114d80:	b580      	push	{r7, lr}
 8114d82:	b084      	sub	sp, #16
 8114d84:	af00      	add	r7, sp, #0
 8114d86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8114d88:	687b      	ldr	r3, [r7, #4]
 8114d8a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8114d8c:	68f9      	ldr	r1, [r7, #12]
 8114d8e:	4803      	ldr	r0, [pc, #12]	; (8114d9c <pbuf_free_custom+0x1c>)
 8114d90:	f7fd faf0 	bl	8112374 <memp_free_pool>
}
 8114d94:	bf00      	nop
 8114d96:	3710      	adds	r7, #16
 8114d98:	46bd      	mov	sp, r7
 8114d9a:	bd80      	pop	{r7, pc}
 8114d9c:	0811b7a0 	.word	0x0811b7a0

08114da0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8114da0:	b580      	push	{r7, lr}
 8114da2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8114da4:	f7ec fb44 	bl	8101430 <HAL_GetTick>
 8114da8:	4603      	mov	r3, r0
}
 8114daa:	4618      	mov	r0, r3
 8114dac:	bd80      	pop	{r7, pc}
	...

08114db0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8114db0:	b580      	push	{r7, lr}
 8114db2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8114db4:	4802      	ldr	r0, [pc, #8]	; (8114dc0 <ETH_PHY_IO_Init+0x10>)
 8114db6:	f7f1 fa0b 	bl	81061d0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8114dba:	2300      	movs	r3, #0
}
 8114dbc:	4618      	mov	r0, r3
 8114dbe:	bd80      	pop	{r7, pc}
 8114dc0:	100088d0 	.word	0x100088d0

08114dc4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8114dc4:	b480      	push	{r7}
 8114dc6:	af00      	add	r7, sp, #0
  return 0;
 8114dc8:	2300      	movs	r3, #0
}
 8114dca:	4618      	mov	r0, r3
 8114dcc:	46bd      	mov	sp, r7
 8114dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114dd2:	4770      	bx	lr

08114dd4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8114dd4:	b580      	push	{r7, lr}
 8114dd6:	b084      	sub	sp, #16
 8114dd8:	af00      	add	r7, sp, #0
 8114dda:	60f8      	str	r0, [r7, #12]
 8114ddc:	60b9      	str	r1, [r7, #8]
 8114dde:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8114de0:	687b      	ldr	r3, [r7, #4]
 8114de2:	68ba      	ldr	r2, [r7, #8]
 8114de4:	68f9      	ldr	r1, [r7, #12]
 8114de6:	4807      	ldr	r0, [pc, #28]	; (8114e04 <ETH_PHY_IO_ReadReg+0x30>)
 8114de8:	f7f0 ff5c 	bl	8105ca4 <HAL_ETH_ReadPHYRegister>
 8114dec:	4603      	mov	r3, r0
 8114dee:	2b00      	cmp	r3, #0
 8114df0:	d002      	beq.n	8114df8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8114df2:	f04f 33ff 	mov.w	r3, #4294967295
 8114df6:	e000      	b.n	8114dfa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8114df8:	2300      	movs	r3, #0
}
 8114dfa:	4618      	mov	r0, r3
 8114dfc:	3710      	adds	r7, #16
 8114dfe:	46bd      	mov	sp, r7
 8114e00:	bd80      	pop	{r7, pc}
 8114e02:	bf00      	nop
 8114e04:	100088d0 	.word	0x100088d0

08114e08 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8114e08:	b580      	push	{r7, lr}
 8114e0a:	b084      	sub	sp, #16
 8114e0c:	af00      	add	r7, sp, #0
 8114e0e:	60f8      	str	r0, [r7, #12]
 8114e10:	60b9      	str	r1, [r7, #8]
 8114e12:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8114e14:	687b      	ldr	r3, [r7, #4]
 8114e16:	68ba      	ldr	r2, [r7, #8]
 8114e18:	68f9      	ldr	r1, [r7, #12]
 8114e1a:	4807      	ldr	r0, [pc, #28]	; (8114e38 <ETH_PHY_IO_WriteReg+0x30>)
 8114e1c:	f7f0 ff96 	bl	8105d4c <HAL_ETH_WritePHYRegister>
 8114e20:	4603      	mov	r3, r0
 8114e22:	2b00      	cmp	r3, #0
 8114e24:	d002      	beq.n	8114e2c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8114e26:	f04f 33ff 	mov.w	r3, #4294967295
 8114e2a:	e000      	b.n	8114e2e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8114e2c:	2300      	movs	r3, #0
}
 8114e2e:	4618      	mov	r0, r3
 8114e30:	3710      	adds	r7, #16
 8114e32:	46bd      	mov	sp, r7
 8114e34:	bd80      	pop	{r7, pc}
 8114e36:	bf00      	nop
 8114e38:	100088d0 	.word	0x100088d0

08114e3c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8114e3c:	b580      	push	{r7, lr}
 8114e3e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8114e40:	f7ec faf6 	bl	8101430 <HAL_GetTick>
 8114e44:	4603      	mov	r3, r0
}
 8114e46:	4618      	mov	r0, r3
 8114e48:	bd80      	pop	{r7, pc}
	...

08114e4c <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8114e4c:	b580      	push	{r7, lr}
 8114e4e:	b0a0      	sub	sp, #128	; 0x80
 8114e50:	af00      	add	r7, sp, #0
 8114e52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8114e54:	2300      	movs	r3, #0
 8114e56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8114e58:	2300      	movs	r3, #0
 8114e5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8114e5c:	2300      	movs	r3, #0
 8114e5e:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8114e60:	687b      	ldr	r3, [r7, #4]
 8114e62:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8114e64:	483a      	ldr	r0, [pc, #232]	; (8114f50 <ethernet_link_thread+0x104>)
 8114e66:	f7ec f9e9 	bl	810123c <LAN8742_GetLinkState>
 8114e6a:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8114e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8114e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8114e72:	089b      	lsrs	r3, r3, #2
 8114e74:	f003 0301 	and.w	r3, r3, #1
 8114e78:	b2db      	uxtb	r3, r3
 8114e7a:	2b00      	cmp	r3, #0
 8114e7c:	d00c      	beq.n	8114e98 <ethernet_link_thread+0x4c>
 8114e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8114e80:	2b01      	cmp	r3, #1
 8114e82:	dc09      	bgt.n	8114e98 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8114e84:	4833      	ldr	r0, [pc, #204]	; (8114f54 <ethernet_link_thread+0x108>)
 8114e86:	f7f0 fa95 	bl	81053b4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8114e8a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8114e8c:	f7fd fcf2 	bl	8112874 <netif_set_down>
    netif_set_link_down(netif);
 8114e90:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8114e92:	f7fd fd55 	bl	8112940 <netif_set_link_down>
 8114e96:	e056      	b.n	8114f46 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8114e98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8114e9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8114e9e:	f003 0304 	and.w	r3, r3, #4
 8114ea2:	2b00      	cmp	r3, #0
 8114ea4:	d14f      	bne.n	8114f46 <ethernet_link_thread+0xfa>
 8114ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8114ea8:	2b01      	cmp	r3, #1
 8114eaa:	dd4c      	ble.n	8114f46 <ethernet_link_thread+0xfa>
 8114eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8114eae:	3b02      	subs	r3, #2
 8114eb0:	2b03      	cmp	r3, #3
 8114eb2:	d82b      	bhi.n	8114f0c <ethernet_link_thread+0xc0>
 8114eb4:	a201      	add	r2, pc, #4	; (adr r2, 8114ebc <ethernet_link_thread+0x70>)
 8114eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114eba:	bf00      	nop
 8114ebc:	08114ecd 	.word	0x08114ecd
 8114ec0:	08114edf 	.word	0x08114edf
 8114ec4:	08114eef 	.word	0x08114eef
 8114ec8:	08114eff 	.word	0x08114eff
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8114ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8114ed0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8114ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8114ed6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8114ed8:	2301      	movs	r3, #1
 8114eda:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8114edc:	e017      	b.n	8114f0e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8114ede:	2300      	movs	r3, #0
 8114ee0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8114ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8114ee6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8114ee8:	2301      	movs	r3, #1
 8114eea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8114eec:	e00f      	b.n	8114f0e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8114eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8114ef2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8114ef4:	2300      	movs	r3, #0
 8114ef6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8114ef8:	2301      	movs	r3, #1
 8114efa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8114efc:	e007      	b.n	8114f0e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8114efe:	2300      	movs	r3, #0
 8114f00:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8114f02:	2300      	movs	r3, #0
 8114f04:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8114f06:	2301      	movs	r3, #1
 8114f08:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8114f0a:	e000      	b.n	8114f0e <ethernet_link_thread+0xc2>
    default:
      break;
 8114f0c:	bf00      	nop
    }

    if(linkchanged)
 8114f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8114f10:	2b00      	cmp	r3, #0
 8114f12:	d018      	beq.n	8114f46 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8114f14:	f107 0308 	add.w	r3, r7, #8
 8114f18:	4619      	mov	r1, r3
 8114f1a:	480e      	ldr	r0, [pc, #56]	; (8114f54 <ethernet_link_thread+0x108>)
 8114f1c:	f7f0 ff6a 	bl	8105df4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8114f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8114f22:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8114f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8114f26:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8114f28:	f107 0308 	add.w	r3, r7, #8
 8114f2c:	4619      	mov	r1, r3
 8114f2e:	4809      	ldr	r0, [pc, #36]	; (8114f54 <ethernet_link_thread+0x108>)
 8114f30:	f7f1 f934 	bl	810619c <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8114f34:	4807      	ldr	r0, [pc, #28]	; (8114f54 <ethernet_link_thread+0x108>)
 8114f36:	f7f0 f9b8 	bl	81052aa <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8114f3a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8114f3c:	f7fd fc2e 	bl	811279c <netif_set_up>
      netif_set_link_up(netif);
 8114f40:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8114f42:	f7fd fcc9 	bl	81128d8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8114f46:	2064      	movs	r0, #100	; 0x64
 8114f48:	f7f7 fb97 	bl	810c67a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8114f4c:	e78a      	b.n	8114e64 <ethernet_link_thread+0x18>
 8114f4e:	bf00      	nop
 8114f50:	100088b0 	.word	0x100088b0
 8114f54:	100088d0 	.word	0x100088d0

08114f58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8114f58:	b480      	push	{r7}
 8114f5a:	b085      	sub	sp, #20
 8114f5c:	af00      	add	r7, sp, #0
 8114f5e:	60f8      	str	r0, [r7, #12]
 8114f60:	60b9      	str	r1, [r7, #8]
 8114f62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8114f64:	68fb      	ldr	r3, [r7, #12]
 8114f66:	4a07      	ldr	r2, [pc, #28]	; (8114f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8114f68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8114f6a:	68bb      	ldr	r3, [r7, #8]
 8114f6c:	4a06      	ldr	r2, [pc, #24]	; (8114f88 <vApplicationGetIdleTaskMemory+0x30>)
 8114f6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8114f70:	687b      	ldr	r3, [r7, #4]
 8114f72:	2280      	movs	r2, #128	; 0x80
 8114f74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8114f76:	bf00      	nop
 8114f78:	3714      	adds	r7, #20
 8114f7a:	46bd      	mov	sp, r7
 8114f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114f80:	4770      	bx	lr
 8114f82:	bf00      	nop
 8114f84:	10005964 	.word	0x10005964
 8114f88:	10005a18 	.word	0x10005a18

08114f8c <hx711_lock>:
    delay--;
  }
}
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8114f8c:	b580      	push	{r7, lr}
 8114f8e:	b082      	sub	sp, #8
 8114f90:	af00      	add	r7, sp, #0
 8114f92:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8114f94:	e002      	b.n	8114f9c <hx711_lock+0x10>
    hx711_delay(1);
 8114f96:	2001      	movs	r0, #1
 8114f98:	f7f7 fb6f 	bl	810c67a <osDelay>
  while (hx711->lock)
 8114f9c:	687b      	ldr	r3, [r7, #4]
 8114f9e:	7d1b      	ldrb	r3, [r3, #20]
 8114fa0:	2b00      	cmp	r3, #0
 8114fa2:	d1f8      	bne.n	8114f96 <hx711_lock+0xa>
  hx711->lock = 1;      
 8114fa4:	687b      	ldr	r3, [r7, #4]
 8114fa6:	2201      	movs	r2, #1
 8114fa8:	751a      	strb	r2, [r3, #20]
}
 8114faa:	bf00      	nop
 8114fac:	3708      	adds	r7, #8
 8114fae:	46bd      	mov	sp, r7
 8114fb0:	bd80      	pop	{r7, pc}

08114fb2 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8114fb2:	b480      	push	{r7}
 8114fb4:	b083      	sub	sp, #12
 8114fb6:	af00      	add	r7, sp, #0
 8114fb8:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8114fba:	687b      	ldr	r3, [r7, #4]
 8114fbc:	2200      	movs	r2, #0
 8114fbe:	751a      	strb	r2, [r3, #20]
}
 8114fc0:	bf00      	nop
 8114fc2:	370c      	adds	r7, #12
 8114fc4:	46bd      	mov	sp, r7
 8114fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114fca:	4770      	bx	lr

08114fcc <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8114fcc:	b580      	push	{r7, lr}
 8114fce:	b08a      	sub	sp, #40	; 0x28
 8114fd0:	af00      	add	r7, sp, #0
 8114fd2:	60f8      	str	r0, [r7, #12]
 8114fd4:	60b9      	str	r1, [r7, #8]
 8114fd6:	603b      	str	r3, [r7, #0]
 8114fd8:	4613      	mov	r3, r2
 8114fda:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8114fdc:	68f8      	ldr	r0, [r7, #12]
 8114fde:	f7ff ffd5 	bl	8114f8c <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8114fe2:	68fb      	ldr	r3, [r7, #12]
 8114fe4:	68ba      	ldr	r2, [r7, #8]
 8114fe6:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8114fe8:	68fb      	ldr	r3, [r7, #12]
 8114fea:	88fa      	ldrh	r2, [r7, #6]
 8114fec:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8114fee:	68fb      	ldr	r3, [r7, #12]
 8114ff0:	683a      	ldr	r2, [r7, #0]
 8114ff2:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8114ff4:	68fb      	ldr	r3, [r7, #12]
 8114ff6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8114ff8:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8114ffa:	f107 0314 	add.w	r3, r7, #20
 8114ffe:	2200      	movs	r2, #0
 8115000:	601a      	str	r2, [r3, #0]
 8115002:	605a      	str	r2, [r3, #4]
 8115004:	609a      	str	r2, [r3, #8]
 8115006:	60da      	str	r2, [r3, #12]
 8115008:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 811500a:	2301      	movs	r3, #1
 811500c:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 811500e:	2300      	movs	r3, #0
 8115010:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8115012:	2302      	movs	r3, #2
 8115014:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8115016:	88fb      	ldrh	r3, [r7, #6]
 8115018:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 811501a:	f107 0314 	add.w	r3, r7, #20
 811501e:	4619      	mov	r1, r3
 8115020:	68b8      	ldr	r0, [r7, #8]
 8115022:	f7f1 fee7 	bl	8106df4 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8115026:	2300      	movs	r3, #0
 8115028:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 811502a:	2301      	movs	r3, #1
 811502c:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 811502e:	2302      	movs	r3, #2
 8115030:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8115032:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8115034:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8115036:	f107 0314 	add.w	r3, r7, #20
 811503a:	4619      	mov	r1, r3
 811503c:	6838      	ldr	r0, [r7, #0]
 811503e:	f7f1 fed9 	bl	8106df4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8115042:	68fb      	ldr	r3, [r7, #12]
 8115044:	6818      	ldr	r0, [r3, #0]
 8115046:	68fb      	ldr	r3, [r7, #12]
 8115048:	891b      	ldrh	r3, [r3, #8]
 811504a:	2201      	movs	r2, #1
 811504c:	4619      	mov	r1, r3
 811504e:	f7f2 f899 	bl	8107184 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8115052:	200a      	movs	r0, #10
 8115054:	f7f7 fb11 	bl	810c67a <osDelay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8115058:	68fb      	ldr	r3, [r7, #12]
 811505a:	6818      	ldr	r0, [r3, #0]
 811505c:	68fb      	ldr	r3, [r7, #12]
 811505e:	891b      	ldrh	r3, [r3, #8]
 8115060:	2200      	movs	r2, #0
 8115062:	4619      	mov	r1, r3
 8115064:	f7f2 f88e 	bl	8107184 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8115068:	200a      	movs	r0, #10
 811506a:	f7f7 fb06 	bl	810c67a <osDelay>

  hx711_value(hx711);
 811506e:	68f8      	ldr	r0, [r7, #12]
 8115070:	f000 f807 	bl	8115082 <hx711_value>

  hx711_unlock(hx711); 
 8115074:	68f8      	ldr	r0, [r7, #12]
 8115076:	f7ff ff9c 	bl	8114fb2 <hx711_unlock>
}
 811507a:	bf00      	nop
 811507c:	3728      	adds	r7, #40	; 0x28
 811507e:	46bd      	mov	sp, r7
 8115080:	bd80      	pop	{r7, pc}

08115082 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8115082:	b580      	push	{r7, lr}
 8115084:	b086      	sub	sp, #24
 8115086:	af00      	add	r7, sp, #0
 8115088:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 811508a:	2300      	movs	r3, #0
 811508c:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 811508e:	f7ec f9cf 	bl	8101430 <HAL_GetTick>
 8115092:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8115094:	e00b      	b.n	81150ae <hx711_value+0x2c>
  {
    hx711_delay(1);
 8115096:	2001      	movs	r0, #1
 8115098:	f7f7 faef 	bl	810c67a <osDelay>
    if(HAL_GetTick() - startTime > 150)
 811509c:	f7ec f9c8 	bl	8101430 <HAL_GetTick>
 81150a0:	4602      	mov	r2, r0
 81150a2:	68fb      	ldr	r3, [r7, #12]
 81150a4:	1ad3      	subs	r3, r2, r3
 81150a6:	2b96      	cmp	r3, #150	; 0x96
 81150a8:	d901      	bls.n	81150ae <hx711_value+0x2c>
      return 0;
 81150aa:	2300      	movs	r3, #0
 81150ac:	e059      	b.n	8115162 <hx711_value+0xe0>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 81150ae:	687b      	ldr	r3, [r7, #4]
 81150b0:	685a      	ldr	r2, [r3, #4]
 81150b2:	687b      	ldr	r3, [r7, #4]
 81150b4:	895b      	ldrh	r3, [r3, #10]
 81150b6:	4619      	mov	r1, r3
 81150b8:	4610      	mov	r0, r2
 81150ba:	f7f2 f84b 	bl	8107154 <HAL_GPIO_ReadPin>
 81150be:	4603      	mov	r3, r0
 81150c0:	2b01      	cmp	r3, #1
 81150c2:	d0e8      	beq.n	8115096 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 81150c4:	2300      	movs	r3, #0
 81150c6:	74fb      	strb	r3, [r7, #19]
 81150c8:	e02c      	b.n	8115124 <hx711_value+0xa2>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 81150ca:	687b      	ldr	r3, [r7, #4]
 81150cc:	6818      	ldr	r0, [r3, #0]
 81150ce:	687b      	ldr	r3, [r7, #4]
 81150d0:	891b      	ldrh	r3, [r3, #8]
 81150d2:	2201      	movs	r2, #1
 81150d4:	4619      	mov	r1, r3
 81150d6:	f7f2 f855 	bl	8107184 <HAL_GPIO_WritePin>
    delay_us(_HX711_DELAY_US_LOOP);
 81150da:	2004      	movs	r0, #4
 81150dc:	f000 fe26 	bl	8115d2c <delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 81150e0:	687b      	ldr	r3, [r7, #4]
 81150e2:	6818      	ldr	r0, [r3, #0]
 81150e4:	687b      	ldr	r3, [r7, #4]
 81150e6:	891b      	ldrh	r3, [r3, #8]
 81150e8:	2200      	movs	r2, #0
 81150ea:	4619      	mov	r1, r3
 81150ec:	f7f2 f84a 	bl	8107184 <HAL_GPIO_WritePin>
    delay_us(_HX711_DELAY_US_LOOP);
 81150f0:	2004      	movs	r0, #4
 81150f2:	f000 fe1b 	bl	8115d2c <delay_us>
    data = data << 1;    
 81150f6:	697b      	ldr	r3, [r7, #20]
 81150f8:	005b      	lsls	r3, r3, #1
 81150fa:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 81150fc:	687b      	ldr	r3, [r7, #4]
 81150fe:	685a      	ldr	r2, [r3, #4]
 8115100:	687b      	ldr	r3, [r7, #4]
 8115102:	895b      	ldrh	r3, [r3, #10]
 8115104:	4619      	mov	r1, r3
 8115106:	4610      	mov	r0, r2
 8115108:	f7f2 f824 	bl	8107154 <HAL_GPIO_ReadPin>
 811510c:	4603      	mov	r3, r0
 811510e:	2b01      	cmp	r3, #1
 8115110:	d102      	bne.n	8115118 <hx711_value+0x96>
      data ++;
 8115112:	697b      	ldr	r3, [r7, #20]
 8115114:	3301      	adds	r3, #1
 8115116:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8115118:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811511c:	b2db      	uxtb	r3, r3
 811511e:	3301      	adds	r3, #1
 8115120:	b2db      	uxtb	r3, r3
 8115122:	74fb      	strb	r3, [r7, #19]
 8115124:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8115128:	2b17      	cmp	r3, #23
 811512a:	ddce      	ble.n	81150ca <hx711_value+0x48>
    //this loop takes almost 200 us
  }
  data = data ^ 0x800000; 
 811512c:	697b      	ldr	r3, [r7, #20]
 811512e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8115132:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8115134:	687b      	ldr	r3, [r7, #4]
 8115136:	6818      	ldr	r0, [r3, #0]
 8115138:	687b      	ldr	r3, [r7, #4]
 811513a:	891b      	ldrh	r3, [r3, #8]
 811513c:	2201      	movs	r2, #1
 811513e:	4619      	mov	r1, r3
 8115140:	f7f2 f820 	bl	8107184 <HAL_GPIO_WritePin>
  delay_us(_HX711_DELAY_US_LOOP);
 8115144:	2004      	movs	r0, #4
 8115146:	f000 fdf1 	bl	8115d2c <delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 811514a:	687b      	ldr	r3, [r7, #4]
 811514c:	6818      	ldr	r0, [r3, #0]
 811514e:	687b      	ldr	r3, [r7, #4]
 8115150:	891b      	ldrh	r3, [r3, #8]
 8115152:	2200      	movs	r2, #0
 8115154:	4619      	mov	r1, r3
 8115156:	f7f2 f815 	bl	8107184 <HAL_GPIO_WritePin>
  delay_us(_HX711_DELAY_US_LOOP);
 811515a:	2004      	movs	r0, #4
 811515c:	f000 fde6 	bl	8115d2c <delay_us>


  return data;    
 8115160:	697b      	ldr	r3, [r7, #20]
}
 8115162:	4618      	mov	r0, r3
 8115164:	3718      	adds	r7, #24
 8115166:	46bd      	mov	sp, r7
 8115168:	bd80      	pop	{r7, pc}

0811516a <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 811516a:	b5b0      	push	{r4, r5, r7, lr}
 811516c:	b086      	sub	sp, #24
 811516e:	af00      	add	r7, sp, #0
 8115170:	6078      	str	r0, [r7, #4]
 8115172:	460b      	mov	r3, r1
 8115174:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8115176:	6878      	ldr	r0, [r7, #4]
 8115178:	f7ff ff08 	bl	8114f8c <hx711_lock>
  int64_t  ave = 0;
 811517c:	f04f 0200 	mov.w	r2, #0
 8115180:	f04f 0300 	mov.w	r3, #0
 8115184:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8115188:	2300      	movs	r3, #0
 811518a:	81fb      	strh	r3, [r7, #14]
 811518c:	e013      	b.n	81151b6 <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 811518e:	6878      	ldr	r0, [r7, #4]
 8115190:	f7ff ff77 	bl	8115082 <hx711_value>
 8115194:	4603      	mov	r3, r0
 8115196:	461a      	mov	r2, r3
 8115198:	ea4f 73e2 	mov.w	r3, r2, asr #31
 811519c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 81151a0:	1884      	adds	r4, r0, r2
 81151a2:	eb41 0503 	adc.w	r5, r1, r3
 81151a6:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 81151aa:	2005      	movs	r0, #5
 81151ac:	f7f7 fa65 	bl	810c67a <osDelay>
  for(uint16_t i=0 ; i<sample ; i++)
 81151b0:	89fb      	ldrh	r3, [r7, #14]
 81151b2:	3301      	adds	r3, #1
 81151b4:	81fb      	strh	r3, [r7, #14]
 81151b6:	89fa      	ldrh	r2, [r7, #14]
 81151b8:	887b      	ldrh	r3, [r7, #2]
 81151ba:	429a      	cmp	r2, r3
 81151bc:	d3e7      	bcc.n	811518e <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 81151be:	887a      	ldrh	r2, [r7, #2]
 81151c0:	f04f 0300 	mov.w	r3, #0
 81151c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 81151c8:	f7eb fd76 	bl	8100cb8 <__aeabi_ldivmod>
 81151cc:	4602      	mov	r2, r0
 81151ce:	460b      	mov	r3, r1
 81151d0:	687b      	ldr	r3, [r7, #4]
 81151d2:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 81151d4:	6878      	ldr	r0, [r7, #4]
 81151d6:	f7ff feec 	bl	8114fb2 <hx711_unlock>
}
 81151da:	bf00      	nop
 81151dc:	3718      	adds	r7, #24
 81151de:	46bd      	mov	sp, r7
 81151e0:	bdb0      	pop	{r4, r5, r7, pc}

081151e2 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 81151e2:	b5b0      	push	{r4, r5, r7, lr}
 81151e4:	b088      	sub	sp, #32
 81151e6:	af00      	add	r7, sp, #0
 81151e8:	6078      	str	r0, [r7, #4]
 81151ea:	460b      	mov	r3, r1
 81151ec:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 81151ee:	6878      	ldr	r0, [r7, #4]
 81151f0:	f7ff fecc 	bl	8114f8c <hx711_lock>
  int64_t  ave = 0;
 81151f4:	f04f 0200 	mov.w	r2, #0
 81151f8:	f04f 0300 	mov.w	r3, #0
 81151fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8115200:	2300      	movs	r3, #0
 8115202:	82fb      	strh	r3, [r7, #22]
 8115204:	e013      	b.n	811522e <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8115206:	6878      	ldr	r0, [r7, #4]
 8115208:	f7ff ff3b 	bl	8115082 <hx711_value>
 811520c:	4603      	mov	r3, r0
 811520e:	461a      	mov	r2, r3
 8115210:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8115214:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8115218:	1884      	adds	r4, r0, r2
 811521a:	eb41 0503 	adc.w	r5, r1, r3
 811521e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(1);
 8115222:	2001      	movs	r0, #1
 8115224:	f7f7 fa29 	bl	810c67a <osDelay>
  for(uint16_t i=0 ; i<sample ; i++)
 8115228:	8afb      	ldrh	r3, [r7, #22]
 811522a:	3301      	adds	r3, #1
 811522c:	82fb      	strh	r3, [r7, #22]
 811522e:	8afa      	ldrh	r2, [r7, #22]
 8115230:	887b      	ldrh	r3, [r7, #2]
 8115232:	429a      	cmp	r2, r3
 8115234:	d3e7      	bcc.n	8115206 <hx711_weight+0x24>
  }

  int32_t data = (int32_t)(ave / sample);
 8115236:	887a      	ldrh	r2, [r7, #2]
 8115238:	f04f 0300 	mov.w	r3, #0
 811523c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8115240:	f7eb fd3a 	bl	8100cb8 <__aeabi_ldivmod>
 8115244:	4602      	mov	r2, r0
 8115246:	460b      	mov	r3, r1
 8115248:	4613      	mov	r3, r2
 811524a:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 811524c:	687b      	ldr	r3, [r7, #4]
 811524e:	68db      	ldr	r3, [r3, #12]
 8115250:	693a      	ldr	r2, [r7, #16]
 8115252:	1ad3      	subs	r3, r2, r3
 8115254:	ee07 3a90 	vmov	s15, r3
 8115258:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 811525c:	687b      	ldr	r3, [r7, #4]
 811525e:	ed93 7a04 	vldr	s14, [r3, #16]
 8115262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8115266:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 811526a:	6878      	ldr	r0, [r7, #4]
 811526c:	f7ff fea1 	bl	8114fb2 <hx711_unlock>
  return answer;
 8115270:	68fb      	ldr	r3, [r7, #12]
 8115272:	ee07 3a90 	vmov	s15, r3
}
 8115276:	eeb0 0a67 	vmov.f32	s0, s15
 811527a:	3720      	adds	r7, #32
 811527c:	46bd      	mov	sp, r7
 811527e:	bdb0      	pop	{r4, r5, r7, pc}

08115280 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8115280:	b480      	push	{r7}
 8115282:	b083      	sub	sp, #12
 8115284:	af00      	add	r7, sp, #0
 8115286:	6078      	str	r0, [r7, #4]
 8115288:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 811528c:	687b      	ldr	r3, [r7, #4]
 811528e:	683a      	ldr	r2, [r7, #0]
 8115290:	611a      	str	r2, [r3, #16]
}
 8115292:	bf00      	nop
 8115294:	370c      	adds	r7, #12
 8115296:	46bd      	mov	sp, r7
 8115298:	f85d 7b04 	ldr.w	r7, [sp], #4
 811529c:	4770      	bx	lr
	...

081152a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81152a0:	b5b0      	push	{r4, r5, r7, lr}
 81152a2:	b0a6      	sub	sp, #152	; 0x98
 81152a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */

	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 81152a6:	4b68      	ldr	r3, [pc, #416]	; (8115448 <main+0x1a8>)
 81152a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81152ac:	4a66      	ldr	r2, [pc, #408]	; (8115448 <main+0x1a8>)
 81152ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81152b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81152b6:	4b64      	ldr	r3, [pc, #400]	; (8115448 <main+0x1a8>)
 81152b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81152bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81152c0:	603b      	str	r3, [r7, #0]
 81152c2:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81152c4:	2001      	movs	r0, #1
 81152c6:	f7f1 ff8d 	bl	81071e4 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 81152ca:	f7f2 f9a9 	bl	8107620 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 81152ce:	2201      	movs	r2, #1
 81152d0:	2102      	movs	r1, #2
 81152d2:	2000      	movs	r0, #0
 81152d4:	f7f2 f92a 	bl	810752c <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81152d8:	4b5c      	ldr	r3, [pc, #368]	; (811544c <main+0x1ac>)
 81152da:	681b      	ldr	r3, [r3, #0]
 81152dc:	091b      	lsrs	r3, r3, #4
 81152de:	f003 030f 	and.w	r3, r3, #15
 81152e2:	2b07      	cmp	r3, #7
 81152e4:	d108      	bne.n	81152f8 <main+0x58>
 81152e6:	4b5a      	ldr	r3, [pc, #360]	; (8115450 <main+0x1b0>)
 81152e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81152ec:	4a58      	ldr	r2, [pc, #352]	; (8115450 <main+0x1b0>)
 81152ee:	f043 0301 	orr.w	r3, r3, #1
 81152f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81152f6:	e007      	b.n	8115308 <main+0x68>
 81152f8:	4b55      	ldr	r3, [pc, #340]	; (8115450 <main+0x1b0>)
 81152fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81152fe:	4a54      	ldr	r2, [pc, #336]	; (8115450 <main+0x1b0>)
 8115300:	f043 0301 	orr.w	r3, r3, #1
 8115304:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8115308:	f7ec f820 	bl	810134c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 811530c:	f000 fbce 	bl	8115aac <MX_GPIO_Init>
  MX_TIM8_Init();
 8115310:	f000 fa16 	bl	8115740 <MX_TIM8_Init>
  MX_TIM15_Init();
 8115314:	f000 fae6 	bl	81158e4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8115318:	f000 fb36 	bl	8115988 <MX_TIM16_Init>
  MX_ADC1_Init();
 811531c:	f000 f8ba 	bl	8115494 <MX_ADC1_Init>
  MX_DMA_Init();
 8115320:	f000 fba4 	bl	8115a6c <MX_DMA_Init>
  MX_LPTIM1_Init();
 8115324:	f000 f9a4 	bl	8115670 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 8115328:	f000 f9d6 	bl	81156d8 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */

	MX_USART3_UART_Init(); //init uart3 also on CM4
 811532c:	f000 fb52 	bl	81159d4 <MX_USART3_UART_Init>

	RetargetInit(&huart3);
 8115330:	4848      	ldr	r0, [pc, #288]	; (8115454 <main+0x1b4>)
 8115332:	f000 febb 	bl	81160ac <RetargetInit>

	while (HAL_HSEM_IsSemTaken(HSEM_ID_0) == 0) {
 8115336:	e002      	b.n	811533e <main+0x9e>
		HAL_Delay(100);
 8115338:	2064      	movs	r0, #100	; 0x64
 811533a:	f7ec f885 	bl	8101448 <HAL_Delay>
	while (HAL_HSEM_IsSemTaken(HSEM_ID_0) == 0) {
 811533e:	2000      	movs	r0, #0
 8115340:	f7f1 ff3a 	bl	81071b8 <HAL_HSEM_IsSemTaken>
 8115344:	4603      	mov	r3, r0
 8115346:	2b00      	cmp	r3, #0
 8115348:	d0f6      	beq.n	8115338 <main+0x98>
	}

	printf("GSCS-002 CM4 Started\n");
 811534a:	4843      	ldr	r0, [pc, #268]	; (8115458 <main+0x1b8>)
 811534c:	f002 fac2 	bl	81178d4 <puts>

	// Calibrate The ADC On Power-Up For Better Accuracy
	printf("GSCS-002 CM4 - Starting ADC1 calibration\n");
 8115350:	4842      	ldr	r0, [pc, #264]	; (811545c <main+0x1bc>)
 8115352:	f002 fabf 	bl	81178d4 <puts>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8115356:	f240 72ff 	movw	r2, #2047	; 0x7ff
 811535a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 811535e:	4840      	ldr	r0, [pc, #256]	; (8115460 <main+0x1c0>)
 8115360:	f7ed fb78 	bl	8102a54 <HAL_ADCEx_Calibration_Start>
	ADC_SINGLE_ENDED);

	printf("GSCS-002 CM4 - ADC1 calibration done\n");
 8115364:	483f      	ldr	r0, [pc, #252]	; (8115464 <main+0x1c4>)
 8115366:	f002 fab5 	bl	81178d4 <puts>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of InitSemaphore */
  osSemaphoreDef(InitSemaphore);
 811536a:	2300      	movs	r3, #0
 811536c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8115370:	2300      	movs	r3, #0
 8115372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  InitSemaphoreHandle = osSemaphoreCreate(osSemaphore(InitSemaphore), 1);
 8115376:	f107 0390 	add.w	r3, r7, #144	; 0x90
 811537a:	2101      	movs	r1, #1
 811537c:	4618      	mov	r0, r3
 811537e:	f7f7 fa2d 	bl	810c7dc <osSemaphoreCreate>
 8115382:	4603      	mov	r3, r0
 8115384:	4a38      	ldr	r2, [pc, #224]	; (8115468 <main+0x1c8>)
 8115386:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8115388:	4b38      	ldr	r3, [pc, #224]	; (811546c <main+0x1cc>)
 811538a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 811538e:	461d      	mov	r5, r3
 8115390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8115392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8115394:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8115398:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 811539c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 81153a0:	2100      	movs	r1, #0
 81153a2:	4618      	mov	r0, r3
 81153a4:	f7f7 f91d 	bl	810c5e2 <osThreadCreate>
 81153a8:	4603      	mov	r3, r0
 81153aa:	4a31      	ldr	r2, [pc, #196]	; (8115470 <main+0x1d0>)
 81153ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sens_Acq_Task */
  osThreadDef(Sens_Acq_Task, StartSens_Acq_Task, osPriorityIdle, 0, 256);
 81153ae:	4b31      	ldr	r3, [pc, #196]	; (8115474 <main+0x1d4>)
 81153b0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 81153b4:	461d      	mov	r5, r3
 81153b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81153b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81153ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81153be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sens_Acq_TaskHandle = osThreadCreate(osThread(Sens_Acq_Task), NULL);
 81153c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81153c6:	2100      	movs	r1, #0
 81153c8:	4618      	mov	r0, r3
 81153ca:	f7f7 f90a 	bl	810c5e2 <osThreadCreate>
 81153ce:	4603      	mov	r3, r0
 81153d0:	4a29      	ldr	r2, [pc, #164]	; (8115478 <main+0x1d8>)
 81153d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommandRX_Task */
  osThreadDef(CommandRX_Task, Start_CommandRX_Task, osPriorityIdle, 0, 512);
 81153d4:	4b29      	ldr	r3, [pc, #164]	; (811547c <main+0x1dc>)
 81153d6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 81153da:	461d      	mov	r5, r3
 81153dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81153de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81153e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81153e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommandRX_TaskHandle = osThreadCreate(osThread(CommandRX_Task), NULL);
 81153e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 81153ec:	2100      	movs	r1, #0
 81153ee:	4618      	mov	r0, r3
 81153f0:	f7f7 f8f7 	bl	810c5e2 <osThreadCreate>
 81153f4:	4603      	mov	r3, r0
 81153f6:	4a22      	ldr	r2, [pc, #136]	; (8115480 <main+0x1e0>)
 81153f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TelemetryTX_Tas */
  osThreadDef(TelemetryTX_Tas, Start_TelemetryTX_Task, osPriorityIdle, 0, 256);
 81153fa:	4b22      	ldr	r3, [pc, #136]	; (8115484 <main+0x1e4>)
 81153fc:	f107 0420 	add.w	r4, r7, #32
 8115400:	461d      	mov	r5, r3
 8115402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8115404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8115406:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 811540a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TelemetryTX_TasHandle = osThreadCreate(osThread(TelemetryTX_Tas), NULL);
 811540e:	f107 0320 	add.w	r3, r7, #32
 8115412:	2100      	movs	r1, #0
 8115414:	4618      	mov	r0, r3
 8115416:	f7f7 f8e4 	bl	810c5e2 <osThreadCreate>
 811541a:	4603      	mov	r3, r0
 811541c:	4a1a      	ldr	r2, [pc, #104]	; (8115488 <main+0x1e8>)
 811541e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ActuatorsContro */
  osThreadDef(ActuatorsContro, Start_ActuatorsControl_Task, osPriorityIdle, 0, 128);
 8115420:	4b1a      	ldr	r3, [pc, #104]	; (811548c <main+0x1ec>)
 8115422:	1d3c      	adds	r4, r7, #4
 8115424:	461d      	mov	r5, r3
 8115426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8115428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 811542a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 811542e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ActuatorsControHandle = osThreadCreate(osThread(ActuatorsContro), NULL);
 8115432:	1d3b      	adds	r3, r7, #4
 8115434:	2100      	movs	r1, #0
 8115436:	4618      	mov	r0, r3
 8115438:	f7f7 f8d3 	bl	810c5e2 <osThreadCreate>
 811543c:	4603      	mov	r3, r0
 811543e:	4a14      	ldr	r2, [pc, #80]	; (8115490 <main+0x1f0>)
 8115440:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8115442:	f7f7 f8b7 	bl	810c5b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8115446:	e7fe      	b.n	8115446 <main+0x1a6>
 8115448:	58024400 	.word	0x58024400
 811544c:	e000ed00 	.word	0xe000ed00
 8115450:	58026400 	.word	0x58026400
 8115454:	10008a48 	.word	0x10008a48
 8115458:	0811b3ec 	.word	0x0811b3ec
 811545c:	0811b404 	.word	0x0811b404
 8115460:	10008b40 	.word	0x10008b40
 8115464:	0811b430 	.word	0x0811b430
 8115468:	10008b24 	.word	0x10008b24
 811546c:	0811b458 	.word	0x0811b458
 8115470:	100089f8 	.word	0x100089f8
 8115474:	0811b474 	.word	0x0811b474
 8115478:	100089f0 	.word	0x100089f0
 811547c:	0811b490 	.word	0x0811b490
 8115480:	100089f4 	.word	0x100089f4
 8115484:	0811b4ac 	.word	0x0811b4ac
 8115488:	10008d04 	.word	0x10008d04
 811548c:	0811b4c8 	.word	0x0811b4c8
 8115490:	10008c8c 	.word	0x10008c8c

08115494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8115494:	b580      	push	{r7, lr}
 8115496:	b08a      	sub	sp, #40	; 0x28
 8115498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 811549a:	f107 031c 	add.w	r3, r7, #28
 811549e:	2200      	movs	r2, #0
 81154a0:	601a      	str	r2, [r3, #0]
 81154a2:	605a      	str	r2, [r3, #4]
 81154a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81154a6:	463b      	mov	r3, r7
 81154a8:	2200      	movs	r2, #0
 81154aa:	601a      	str	r2, [r3, #0]
 81154ac:	605a      	str	r2, [r3, #4]
 81154ae:	609a      	str	r2, [r3, #8]
 81154b0:	60da      	str	r2, [r3, #12]
 81154b2:	611a      	str	r2, [r3, #16]
 81154b4:	615a      	str	r2, [r3, #20]
 81154b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 81154b8:	4b63      	ldr	r3, [pc, #396]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154ba:	4a64      	ldr	r2, [pc, #400]	; (811564c <MX_ADC1_Init+0x1b8>)
 81154bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 81154be:	4b62      	ldr	r3, [pc, #392]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 81154c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81154c6:	4b60      	ldr	r3, [pc, #384]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154c8:	2200      	movs	r2, #0
 81154ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 81154cc:	4b5e      	ldr	r3, [pc, #376]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154ce:	2201      	movs	r2, #1
 81154d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81154d2:	4b5d      	ldr	r3, [pc, #372]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154d4:	2204      	movs	r2, #4
 81154d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81154d8:	4b5b      	ldr	r3, [pc, #364]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154da:	2200      	movs	r2, #0
 81154dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 81154de:	4b5a      	ldr	r3, [pc, #360]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154e0:	2201      	movs	r2, #1
 81154e2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 81154e4:	4b58      	ldr	r3, [pc, #352]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154e6:	2208      	movs	r2, #8
 81154e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81154ea:	4b57      	ldr	r3, [pc, #348]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154ec:	2200      	movs	r2, #0
 81154ee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81154f0:	4b55      	ldr	r3, [pc, #340]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154f2:	2200      	movs	r2, #0
 81154f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81154f6:	4b54      	ldr	r3, [pc, #336]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154f8:	2200      	movs	r2, #0
 81154fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 81154fc:	4b52      	ldr	r3, [pc, #328]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81154fe:	2203      	movs	r2, #3
 8115500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8115502:	4b51      	ldr	r3, [pc, #324]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115504:	2200      	movs	r2, #0
 8115506:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8115508:	4b4f      	ldr	r3, [pc, #316]	; (8115648 <MX_ADC1_Init+0x1b4>)
 811550a:	2200      	movs	r2, #0
 811550c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 811550e:	4b4e      	ldr	r3, [pc, #312]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115510:	2200      	movs	r2, #0
 8115512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8115516:	484c      	ldr	r0, [pc, #304]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115518:	f7ec f9e8 	bl	81018ec <HAL_ADC_Init>
 811551c:	4603      	mov	r3, r0
 811551e:	2b00      	cmp	r3, #0
 8115520:	d001      	beq.n	8115526 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8115522:	f000 fdb9 	bl	8116098 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8115526:	2300      	movs	r3, #0
 8115528:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 811552a:	f107 031c 	add.w	r3, r7, #28
 811552e:	4619      	mov	r1, r3
 8115530:	4845      	ldr	r0, [pc, #276]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115532:	f7ed faf3 	bl	8102b1c <HAL_ADCEx_MultiModeConfigChannel>
 8115536:	4603      	mov	r3, r0
 8115538:	2b00      	cmp	r3, #0
 811553a:	d001      	beq.n	8115540 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 811553c:	f000 fdac 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8115540:	4b43      	ldr	r3, [pc, #268]	; (8115650 <MX_ADC1_Init+0x1bc>)
 8115542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8115544:	2306      	movs	r3, #6
 8115546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8115548:	2306      	movs	r3, #6
 811554a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 811554c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8115550:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8115552:	2304      	movs	r3, #4
 8115554:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8115556:	2300      	movs	r3, #0
 8115558:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 811555a:	2300      	movs	r3, #0
 811555c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 811555e:	463b      	mov	r3, r7
 8115560:	4619      	mov	r1, r3
 8115562:	4839      	ldr	r0, [pc, #228]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115564:	f7ec fc44 	bl	8101df0 <HAL_ADC_ConfigChannel>
 8115568:	4603      	mov	r3, r0
 811556a:	2b00      	cmp	r3, #0
 811556c:	d001      	beq.n	8115572 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 811556e:	f000 fd93 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8115572:	4b38      	ldr	r3, [pc, #224]	; (8115654 <MX_ADC1_Init+0x1c0>)
 8115574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8115576:	230c      	movs	r3, #12
 8115578:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 811557a:	463b      	mov	r3, r7
 811557c:	4619      	mov	r1, r3
 811557e:	4832      	ldr	r0, [pc, #200]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115580:	f7ec fc36 	bl	8101df0 <HAL_ADC_ConfigChannel>
 8115584:	4603      	mov	r3, r0
 8115586:	2b00      	cmp	r3, #0
 8115588:	d001      	beq.n	811558e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 811558a:	f000 fd85 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 811558e:	4b32      	ldr	r3, [pc, #200]	; (8115658 <MX_ADC1_Init+0x1c4>)
 8115590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8115592:	2312      	movs	r3, #18
 8115594:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8115596:	463b      	mov	r3, r7
 8115598:	4619      	mov	r1, r3
 811559a:	482b      	ldr	r0, [pc, #172]	; (8115648 <MX_ADC1_Init+0x1b4>)
 811559c:	f7ec fc28 	bl	8101df0 <HAL_ADC_ConfigChannel>
 81155a0:	4603      	mov	r3, r0
 81155a2:	2b00      	cmp	r3, #0
 81155a4:	d001      	beq.n	81155aa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 81155a6:	f000 fd77 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 81155aa:	4b2c      	ldr	r3, [pc, #176]	; (811565c <MX_ADC1_Init+0x1c8>)
 81155ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 81155ae:	2318      	movs	r3, #24
 81155b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81155b2:	463b      	mov	r3, r7
 81155b4:	4619      	mov	r1, r3
 81155b6:	4824      	ldr	r0, [pc, #144]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81155b8:	f7ec fc1a 	bl	8101df0 <HAL_ADC_ConfigChannel>
 81155bc:	4603      	mov	r3, r0
 81155be:	2b00      	cmp	r3, #0
 81155c0:	d001      	beq.n	81155c6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 81155c2:	f000 fd69 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 81155c6:	4b26      	ldr	r3, [pc, #152]	; (8115660 <MX_ADC1_Init+0x1cc>)
 81155c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 81155ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 81155ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81155d0:	463b      	mov	r3, r7
 81155d2:	4619      	mov	r1, r3
 81155d4:	481c      	ldr	r0, [pc, #112]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81155d6:	f7ec fc0b 	bl	8101df0 <HAL_ADC_ConfigChannel>
 81155da:	4603      	mov	r3, r0
 81155dc:	2b00      	cmp	r3, #0
 81155de:	d001      	beq.n	81155e4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 81155e0:	f000 fd5a 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 81155e4:	4b1f      	ldr	r3, [pc, #124]	; (8115664 <MX_ADC1_Init+0x1d0>)
 81155e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 81155e8:	f44f 7383 	mov.w	r3, #262	; 0x106
 81155ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81155ee:	463b      	mov	r3, r7
 81155f0:	4619      	mov	r1, r3
 81155f2:	4815      	ldr	r0, [pc, #84]	; (8115648 <MX_ADC1_Init+0x1b4>)
 81155f4:	f7ec fbfc 	bl	8101df0 <HAL_ADC_ConfigChannel>
 81155f8:	4603      	mov	r3, r0
 81155fa:	2b00      	cmp	r3, #0
 81155fc:	d001      	beq.n	8115602 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 81155fe:	f000 fd4b 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8115602:	4b19      	ldr	r3, [pc, #100]	; (8115668 <MX_ADC1_Init+0x1d4>)
 8115604:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8115606:	f44f 7386 	mov.w	r3, #268	; 0x10c
 811560a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 811560c:	463b      	mov	r3, r7
 811560e:	4619      	mov	r1, r3
 8115610:	480d      	ldr	r0, [pc, #52]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115612:	f7ec fbed 	bl	8101df0 <HAL_ADC_ConfigChannel>
 8115616:	4603      	mov	r3, r0
 8115618:	2b00      	cmp	r3, #0
 811561a:	d001      	beq.n	8115620 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 811561c:	f000 fd3c 	bl	8116098 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8115620:	4b12      	ldr	r3, [pc, #72]	; (811566c <MX_ADC1_Init+0x1d8>)
 8115622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8115624:	f44f 7389 	mov.w	r3, #274	; 0x112
 8115628:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 811562a:	463b      	mov	r3, r7
 811562c:	4619      	mov	r1, r3
 811562e:	4806      	ldr	r0, [pc, #24]	; (8115648 <MX_ADC1_Init+0x1b4>)
 8115630:	f7ec fbde 	bl	8101df0 <HAL_ADC_ConfigChannel>
 8115634:	4603      	mov	r3, r0
 8115636:	2b00      	cmp	r3, #0
 8115638:	d001      	beq.n	811563e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 811563a:	f000 fd2d 	bl	8116098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 811563e:	bf00      	nop
 8115640:	3728      	adds	r7, #40	; 0x28
 8115642:	46bd      	mov	sp, r7
 8115644:	bd80      	pop	{r7, pc}
 8115646:	bf00      	nop
 8115648:	10008b40 	.word	0x10008b40
 811564c:	40022000 	.word	0x40022000
 8115650:	08600004 	.word	0x08600004
 8115654:	0c900008 	.word	0x0c900008
 8115658:	14f00020 	.word	0x14f00020
 811565c:	2a000400 	.word	0x2a000400
 8115660:	3ef08000 	.word	0x3ef08000
 8115664:	43210000 	.word	0x43210000
 8115668:	4b840000 	.word	0x4b840000
 811566c:	4fb80000 	.word	0x4fb80000

08115670 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8115670:	b580      	push	{r7, lr}
 8115672:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8115674:	4b16      	ldr	r3, [pc, #88]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 8115676:	4a17      	ldr	r2, [pc, #92]	; (81156d4 <MX_LPTIM1_Init+0x64>)
 8115678:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 811567a:	4b15      	ldr	r3, [pc, #84]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 811567c:	2200      	movs	r2, #0
 811567e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8115680:	4b13      	ldr	r3, [pc, #76]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 8115682:	2200      	movs	r2, #0
 8115684:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8115686:	4b12      	ldr	r3, [pc, #72]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 8115688:	2200      	movs	r2, #0
 811568a:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 811568c:	4b10      	ldr	r3, [pc, #64]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 811568e:	2200      	movs	r2, #0
 8115690:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8115692:	4b0f      	ldr	r3, [pc, #60]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 8115694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8115698:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 811569a:	4b0d      	ldr	r3, [pc, #52]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 811569c:	2200      	movs	r2, #0
 811569e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 81156a0:	4b0b      	ldr	r3, [pc, #44]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 81156a2:	2200      	movs	r2, #0
 81156a4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 81156a6:	4b0a      	ldr	r3, [pc, #40]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 81156a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 81156ac:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 81156ae:	4b08      	ldr	r3, [pc, #32]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 81156b0:	2200      	movs	r2, #0
 81156b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 81156b4:	4b06      	ldr	r3, [pc, #24]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 81156b6:	2200      	movs	r2, #0
 81156b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 81156ba:	4805      	ldr	r0, [pc, #20]	; (81156d0 <MX_LPTIM1_Init+0x60>)
 81156bc:	f7f1 fda4 	bl	8107208 <HAL_LPTIM_Init>
 81156c0:	4603      	mov	r3, r0
 81156c2:	2b00      	cmp	r3, #0
 81156c4:	d001      	beq.n	81156ca <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 81156c6:	f000 fce7 	bl	8116098 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 81156ca:	bf00      	nop
 81156cc:	bd80      	pop	{r7, pc}
 81156ce:	bf00      	nop
 81156d0:	10008bdc 	.word	0x10008bdc
 81156d4:	40002400 	.word	0x40002400

081156d8 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 81156d8:	b580      	push	{r7, lr}
 81156da:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 81156dc:	4b16      	ldr	r3, [pc, #88]	; (8115738 <MX_LPTIM2_Init+0x60>)
 81156de:	4a17      	ldr	r2, [pc, #92]	; (811573c <MX_LPTIM2_Init+0x64>)
 81156e0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 81156e2:	4b15      	ldr	r3, [pc, #84]	; (8115738 <MX_LPTIM2_Init+0x60>)
 81156e4:	2200      	movs	r2, #0
 81156e6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 81156e8:	4b13      	ldr	r3, [pc, #76]	; (8115738 <MX_LPTIM2_Init+0x60>)
 81156ea:	2200      	movs	r2, #0
 81156ec:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 81156ee:	4b12      	ldr	r3, [pc, #72]	; (8115738 <MX_LPTIM2_Init+0x60>)
 81156f0:	2200      	movs	r2, #0
 81156f2:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 81156f4:	4b10      	ldr	r3, [pc, #64]	; (8115738 <MX_LPTIM2_Init+0x60>)
 81156f6:	2200      	movs	r2, #0
 81156f8:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 81156fa:	4b0f      	ldr	r3, [pc, #60]	; (8115738 <MX_LPTIM2_Init+0x60>)
 81156fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8115700:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8115702:	4b0d      	ldr	r3, [pc, #52]	; (8115738 <MX_LPTIM2_Init+0x60>)
 8115704:	2200      	movs	r2, #0
 8115706:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8115708:	4b0b      	ldr	r3, [pc, #44]	; (8115738 <MX_LPTIM2_Init+0x60>)
 811570a:	2200      	movs	r2, #0
 811570c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 811570e:	4b0a      	ldr	r3, [pc, #40]	; (8115738 <MX_LPTIM2_Init+0x60>)
 8115710:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8115714:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8115716:	4b08      	ldr	r3, [pc, #32]	; (8115738 <MX_LPTIM2_Init+0x60>)
 8115718:	2200      	movs	r2, #0
 811571a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 811571c:	4b06      	ldr	r3, [pc, #24]	; (8115738 <MX_LPTIM2_Init+0x60>)
 811571e:	2200      	movs	r2, #0
 8115720:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8115722:	4805      	ldr	r0, [pc, #20]	; (8115738 <MX_LPTIM2_Init+0x60>)
 8115724:	f7f1 fd70 	bl	8107208 <HAL_LPTIM_Init>
 8115728:	4603      	mov	r3, r0
 811572a:	2b00      	cmp	r3, #0
 811572c:	d001      	beq.n	8115732 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 811572e:	f000 fcb3 	bl	8116098 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8115732:	bf00      	nop
 8115734:	bd80      	pop	{r7, pc}
 8115736:	bf00      	nop
 8115738:	10008ba4 	.word	0x10008ba4
 811573c:	58002400 	.word	0x58002400

08115740 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8115740:	b580      	push	{r7, lr}
 8115742:	b09a      	sub	sp, #104	; 0x68
 8115744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8115746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 811574a:	2200      	movs	r2, #0
 811574c:	601a      	str	r2, [r3, #0]
 811574e:	605a      	str	r2, [r3, #4]
 8115750:	609a      	str	r2, [r3, #8]
 8115752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8115754:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8115758:	2200      	movs	r2, #0
 811575a:	601a      	str	r2, [r3, #0]
 811575c:	605a      	str	r2, [r3, #4]
 811575e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8115760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8115764:	2200      	movs	r2, #0
 8115766:	601a      	str	r2, [r3, #0]
 8115768:	605a      	str	r2, [r3, #4]
 811576a:	609a      	str	r2, [r3, #8]
 811576c:	60da      	str	r2, [r3, #12]
 811576e:	611a      	str	r2, [r3, #16]
 8115770:	615a      	str	r2, [r3, #20]
 8115772:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8115774:	1d3b      	adds	r3, r7, #4
 8115776:	222c      	movs	r2, #44	; 0x2c
 8115778:	2100      	movs	r1, #0
 811577a:	4618      	mov	r0, r3
 811577c:	f001 fb57 	bl	8116e2e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8115780:	4b56      	ldr	r3, [pc, #344]	; (81158dc <MX_TIM8_Init+0x19c>)
 8115782:	4a57      	ldr	r2, [pc, #348]	; (81158e0 <MX_TIM8_Init+0x1a0>)
 8115784:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 200;
 8115786:	4b55      	ldr	r3, [pc, #340]	; (81158dc <MX_TIM8_Init+0x19c>)
 8115788:	22c8      	movs	r2, #200	; 0xc8
 811578a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 811578c:	4b53      	ldr	r3, [pc, #332]	; (81158dc <MX_TIM8_Init+0x19c>)
 811578e:	2200      	movs	r2, #0
 8115790:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8115792:	4b52      	ldr	r3, [pc, #328]	; (81158dc <MX_TIM8_Init+0x19c>)
 8115794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8115798:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 811579a:	4b50      	ldr	r3, [pc, #320]	; (81158dc <MX_TIM8_Init+0x19c>)
 811579c:	2200      	movs	r2, #0
 811579e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 81157a0:	4b4e      	ldr	r3, [pc, #312]	; (81158dc <MX_TIM8_Init+0x19c>)
 81157a2:	2200      	movs	r2, #0
 81157a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81157a6:	4b4d      	ldr	r3, [pc, #308]	; (81158dc <MX_TIM8_Init+0x19c>)
 81157a8:	2200      	movs	r2, #0
 81157aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 81157ac:	484b      	ldr	r0, [pc, #300]	; (81158dc <MX_TIM8_Init+0x19c>)
 81157ae:	f7f4 fae5 	bl	8109d7c <HAL_TIM_Base_Init>
 81157b2:	4603      	mov	r3, r0
 81157b4:	2b00      	cmp	r3, #0
 81157b6:	d001      	beq.n	81157bc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 81157b8:	f000 fc6e 	bl	8116098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81157bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81157c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 81157c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81157c6:	4619      	mov	r1, r3
 81157c8:	4844      	ldr	r0, [pc, #272]	; (81158dc <MX_TIM8_Init+0x19c>)
 81157ca:	f7f4 feab 	bl	810a524 <HAL_TIM_ConfigClockSource>
 81157ce:	4603      	mov	r3, r0
 81157d0:	2b00      	cmp	r3, #0
 81157d2:	d001      	beq.n	81157d8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 81157d4:	f000 fc60 	bl	8116098 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 81157d8:	4840      	ldr	r0, [pc, #256]	; (81158dc <MX_TIM8_Init+0x19c>)
 81157da:	f7f4 fc0f 	bl	8109ffc <HAL_TIM_PWM_Init>
 81157de:	4603      	mov	r3, r0
 81157e0:	2b00      	cmp	r3, #0
 81157e2:	d001      	beq.n	81157e8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 81157e4:	f000 fc58 	bl	8116098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81157e8:	2300      	movs	r3, #0
 81157ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81157ec:	2300      	movs	r3, #0
 81157ee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81157f0:	2300      	movs	r3, #0
 81157f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 81157f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81157f8:	4619      	mov	r1, r3
 81157fa:	4838      	ldr	r0, [pc, #224]	; (81158dc <MX_TIM8_Init+0x19c>)
 81157fc:	f7f5 fbb4 	bl	810af68 <HAL_TIMEx_MasterConfigSynchronization>
 8115800:	4603      	mov	r3, r0
 8115802:	2b00      	cmp	r3, #0
 8115804:	d001      	beq.n	811580a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8115806:	f000 fc47 	bl	8116098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 811580a:	2360      	movs	r3, #96	; 0x60
 811580c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 811580e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8115812:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8115814:	2300      	movs	r3, #0
 8115816:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8115818:	2300      	movs	r3, #0
 811581a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 811581c:	2300      	movs	r3, #0
 811581e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8115820:	2300      	movs	r3, #0
 8115822:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8115824:	2300      	movs	r3, #0
 8115826:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8115828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 811582c:	2200      	movs	r2, #0
 811582e:	4619      	mov	r1, r3
 8115830:	482a      	ldr	r0, [pc, #168]	; (81158dc <MX_TIM8_Init+0x19c>)
 8115832:	f7f4 fd63 	bl	810a2fc <HAL_TIM_PWM_ConfigChannel>
 8115836:	4603      	mov	r3, r0
 8115838:	2b00      	cmp	r3, #0
 811583a:	d001      	beq.n	8115840 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 811583c:	f000 fc2c 	bl	8116098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8115840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8115844:	2204      	movs	r2, #4
 8115846:	4619      	mov	r1, r3
 8115848:	4824      	ldr	r0, [pc, #144]	; (81158dc <MX_TIM8_Init+0x19c>)
 811584a:	f7f4 fd57 	bl	810a2fc <HAL_TIM_PWM_ConfigChannel>
 811584e:	4603      	mov	r3, r0
 8115850:	2b00      	cmp	r3, #0
 8115852:	d001      	beq.n	8115858 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8115854:	f000 fc20 	bl	8116098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8115858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 811585c:	2208      	movs	r2, #8
 811585e:	4619      	mov	r1, r3
 8115860:	481e      	ldr	r0, [pc, #120]	; (81158dc <MX_TIM8_Init+0x19c>)
 8115862:	f7f4 fd4b 	bl	810a2fc <HAL_TIM_PWM_ConfigChannel>
 8115866:	4603      	mov	r3, r0
 8115868:	2b00      	cmp	r3, #0
 811586a:	d001      	beq.n	8115870 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 811586c:	f000 fc14 	bl	8116098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8115870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8115874:	220c      	movs	r2, #12
 8115876:	4619      	mov	r1, r3
 8115878:	4818      	ldr	r0, [pc, #96]	; (81158dc <MX_TIM8_Init+0x19c>)
 811587a:	f7f4 fd3f 	bl	810a2fc <HAL_TIM_PWM_ConfigChannel>
 811587e:	4603      	mov	r3, r0
 8115880:	2b00      	cmp	r3, #0
 8115882:	d001      	beq.n	8115888 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8115884:	f000 fc08 	bl	8116098 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8115888:	2300      	movs	r3, #0
 811588a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 811588c:	2300      	movs	r3, #0
 811588e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8115890:	2300      	movs	r3, #0
 8115892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8115894:	2300      	movs	r3, #0
 8115896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8115898:	2300      	movs	r3, #0
 811589a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 811589c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81158a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81158a2:	2300      	movs	r3, #0
 81158a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81158a6:	2300      	movs	r3, #0
 81158a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81158aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81158ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81158b0:	2300      	movs	r3, #0
 81158b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81158b4:	2300      	movs	r3, #0
 81158b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 81158b8:	1d3b      	adds	r3, r7, #4
 81158ba:	4619      	mov	r1, r3
 81158bc:	4807      	ldr	r0, [pc, #28]	; (81158dc <MX_TIM8_Init+0x19c>)
 81158be:	f7f5 fbe1 	bl	810b084 <HAL_TIMEx_ConfigBreakDeadTime>
 81158c2:	4603      	mov	r3, r0
 81158c4:	2b00      	cmp	r3, #0
 81158c6:	d001      	beq.n	81158cc <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 81158c8:	f000 fbe6 	bl	8116098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 81158cc:	4803      	ldr	r0, [pc, #12]	; (81158dc <MX_TIM8_Init+0x19c>)
 81158ce:	f000 ffdb 	bl	8116888 <HAL_TIM_MspPostInit>

}
 81158d2:	bf00      	nop
 81158d4:	3768      	adds	r7, #104	; 0x68
 81158d6:	46bd      	mov	sp, r7
 81158d8:	bd80      	pop	{r7, pc}
 81158da:	bf00      	nop
 81158dc:	100089fc 	.word	0x100089fc
 81158e0:	40010400 	.word	0x40010400

081158e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 81158e4:	b580      	push	{r7, lr}
 81158e6:	b088      	sub	sp, #32
 81158e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81158ea:	f107 0310 	add.w	r3, r7, #16
 81158ee:	2200      	movs	r2, #0
 81158f0:	601a      	str	r2, [r3, #0]
 81158f2:	605a      	str	r2, [r3, #4]
 81158f4:	609a      	str	r2, [r3, #8]
 81158f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81158f8:	1d3b      	adds	r3, r7, #4
 81158fa:	2200      	movs	r2, #0
 81158fc:	601a      	str	r2, [r3, #0]
 81158fe:	605a      	str	r2, [r3, #4]
 8115900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8115902:	4b1f      	ldr	r3, [pc, #124]	; (8115980 <MX_TIM15_Init+0x9c>)
 8115904:	4a1f      	ldr	r2, [pc, #124]	; (8115984 <MX_TIM15_Init+0xa0>)
 8115906:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 200 - 1;
 8115908:	4b1d      	ldr	r3, [pc, #116]	; (8115980 <MX_TIM15_Init+0x9c>)
 811590a:	22c7      	movs	r2, #199	; 0xc7
 811590c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 811590e:	4b1c      	ldr	r3, [pc, #112]	; (8115980 <MX_TIM15_Init+0x9c>)
 8115910:	2200      	movs	r2, #0
 8115912:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535 - 1;
 8115914:	4b1a      	ldr	r3, [pc, #104]	; (8115980 <MX_TIM15_Init+0x9c>)
 8115916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 811591a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 811591c:	4b18      	ldr	r3, [pc, #96]	; (8115980 <MX_TIM15_Init+0x9c>)
 811591e:	2200      	movs	r2, #0
 8115920:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8115922:	4b17      	ldr	r3, [pc, #92]	; (8115980 <MX_TIM15_Init+0x9c>)
 8115924:	2200      	movs	r2, #0
 8115926:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8115928:	4b15      	ldr	r3, [pc, #84]	; (8115980 <MX_TIM15_Init+0x9c>)
 811592a:	2200      	movs	r2, #0
 811592c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 811592e:	4814      	ldr	r0, [pc, #80]	; (8115980 <MX_TIM15_Init+0x9c>)
 8115930:	f7f4 fa24 	bl	8109d7c <HAL_TIM_Base_Init>
 8115934:	4603      	mov	r3, r0
 8115936:	2b00      	cmp	r3, #0
 8115938:	d001      	beq.n	811593e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 811593a:	f000 fbad 	bl	8116098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 811593e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8115942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8115944:	f107 0310 	add.w	r3, r7, #16
 8115948:	4619      	mov	r1, r3
 811594a:	480d      	ldr	r0, [pc, #52]	; (8115980 <MX_TIM15_Init+0x9c>)
 811594c:	f7f4 fdea 	bl	810a524 <HAL_TIM_ConfigClockSource>
 8115950:	4603      	mov	r3, r0
 8115952:	2b00      	cmp	r3, #0
 8115954:	d001      	beq.n	811595a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8115956:	f000 fb9f 	bl	8116098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 811595a:	2300      	movs	r3, #0
 811595c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 811595e:	2300      	movs	r3, #0
 8115960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8115962:	1d3b      	adds	r3, r7, #4
 8115964:	4619      	mov	r1, r3
 8115966:	4806      	ldr	r0, [pc, #24]	; (8115980 <MX_TIM15_Init+0x9c>)
 8115968:	f7f5 fafe 	bl	810af68 <HAL_TIMEx_MasterConfigSynchronization>
 811596c:	4603      	mov	r3, r0
 811596e:	2b00      	cmp	r3, #0
 8115970:	d001      	beq.n	8115976 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8115972:	f000 fb91 	bl	8116098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8115976:	bf00      	nop
 8115978:	3720      	adds	r7, #32
 811597a:	46bd      	mov	sp, r7
 811597c:	bd80      	pop	{r7, pc}
 811597e:	bf00      	nop
 8115980:	10008ad8 	.word	0x10008ad8
 8115984:	40014000 	.word	0x40014000

08115988 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8115988:	b580      	push	{r7, lr}
 811598a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 811598c:	4b0f      	ldr	r3, [pc, #60]	; (81159cc <MX_TIM16_Init+0x44>)
 811598e:	4a10      	ldr	r2, [pc, #64]	; (81159d0 <MX_TIM16_Init+0x48>)
 8115990:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 200 - 1;
 8115992:	4b0e      	ldr	r3, [pc, #56]	; (81159cc <MX_TIM16_Init+0x44>)
 8115994:	22c7      	movs	r2, #199	; 0xc7
 8115996:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8115998:	4b0c      	ldr	r3, [pc, #48]	; (81159cc <MX_TIM16_Init+0x44>)
 811599a:	2200      	movs	r2, #0
 811599c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535 - 1;
 811599e:	4b0b      	ldr	r3, [pc, #44]	; (81159cc <MX_TIM16_Init+0x44>)
 81159a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 81159a4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81159a6:	4b09      	ldr	r3, [pc, #36]	; (81159cc <MX_TIM16_Init+0x44>)
 81159a8:	2200      	movs	r2, #0
 81159aa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 81159ac:	4b07      	ldr	r3, [pc, #28]	; (81159cc <MX_TIM16_Init+0x44>)
 81159ae:	2200      	movs	r2, #0
 81159b0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81159b2:	4b06      	ldr	r3, [pc, #24]	; (81159cc <MX_TIM16_Init+0x44>)
 81159b4:	2200      	movs	r2, #0
 81159b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 81159b8:	4804      	ldr	r0, [pc, #16]	; (81159cc <MX_TIM16_Init+0x44>)
 81159ba:	f7f4 f9df 	bl	8109d7c <HAL_TIM_Base_Init>
 81159be:	4603      	mov	r3, r0
 81159c0:	2b00      	cmp	r3, #0
 81159c2:	d001      	beq.n	81159c8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 81159c4:	f000 fb68 	bl	8116098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 81159c8:	bf00      	nop
 81159ca:	bd80      	pop	{r7, pc}
 81159cc:	10008cb8 	.word	0x10008cb8
 81159d0:	40014400 	.word	0x40014400

081159d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 81159d4:	b580      	push	{r7, lr}
 81159d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81159d8:	4b22      	ldr	r3, [pc, #136]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 81159da:	4a23      	ldr	r2, [pc, #140]	; (8115a68 <MX_USART3_UART_Init+0x94>)
 81159dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81159de:	4b21      	ldr	r3, [pc, #132]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 81159e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81159e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81159e6:	4b1f      	ldr	r3, [pc, #124]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 81159e8:	2200      	movs	r2, #0
 81159ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81159ec:	4b1d      	ldr	r3, [pc, #116]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 81159ee:	2200      	movs	r2, #0
 81159f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81159f2:	4b1c      	ldr	r3, [pc, #112]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 81159f4:	2200      	movs	r2, #0
 81159f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81159f8:	4b1a      	ldr	r3, [pc, #104]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 81159fa:	220c      	movs	r2, #12
 81159fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81159fe:	4b19      	ldr	r3, [pc, #100]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a00:	2200      	movs	r2, #0
 8115a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8115a04:	4b17      	ldr	r3, [pc, #92]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a06:	2200      	movs	r2, #0
 8115a08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8115a0a:	4b16      	ldr	r3, [pc, #88]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a0c:	2200      	movs	r2, #0
 8115a0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8115a10:	4b14      	ldr	r3, [pc, #80]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a12:	2200      	movs	r2, #0
 8115a14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8115a16:	4b13      	ldr	r3, [pc, #76]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a18:	2200      	movs	r2, #0
 8115a1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8115a1c:	4811      	ldr	r0, [pc, #68]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a1e:	f7f5 fbcd 	bl	810b1bc <HAL_UART_Init>
 8115a22:	4603      	mov	r3, r0
 8115a24:	2b00      	cmp	r3, #0
 8115a26:	d001      	beq.n	8115a2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8115a28:	f000 fb36 	bl	8116098 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8115a2c:	2100      	movs	r1, #0
 8115a2e:	480d      	ldr	r0, [pc, #52]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a30:	f7f6 fccc 	bl	810c3cc <HAL_UARTEx_SetTxFifoThreshold>
 8115a34:	4603      	mov	r3, r0
 8115a36:	2b00      	cmp	r3, #0
 8115a38:	d001      	beq.n	8115a3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8115a3a:	f000 fb2d 	bl	8116098 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8115a3e:	2100      	movs	r1, #0
 8115a40:	4808      	ldr	r0, [pc, #32]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a42:	f7f6 fd01 	bl	810c448 <HAL_UARTEx_SetRxFifoThreshold>
 8115a46:	4603      	mov	r3, r0
 8115a48:	2b00      	cmp	r3, #0
 8115a4a:	d001      	beq.n	8115a50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8115a4c:	f000 fb24 	bl	8116098 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8115a50:	4804      	ldr	r0, [pc, #16]	; (8115a64 <MX_USART3_UART_Init+0x90>)
 8115a52:	f7f6 fc82 	bl	810c35a <HAL_UARTEx_DisableFifoMode>
 8115a56:	4603      	mov	r3, r0
 8115a58:	2b00      	cmp	r3, #0
 8115a5a:	d001      	beq.n	8115a60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8115a5c:	f000 fb1c 	bl	8116098 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8115a60:	bf00      	nop
 8115a62:	bd80      	pop	{r7, pc}
 8115a64:	10008a48 	.word	0x10008a48
 8115a68:	40004800 	.word	0x40004800

08115a6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8115a6c:	b580      	push	{r7, lr}
 8115a6e:	b082      	sub	sp, #8
 8115a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8115a72:	4b0d      	ldr	r3, [pc, #52]	; (8115aa8 <MX_DMA_Init+0x3c>)
 8115a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8115a78:	4a0b      	ldr	r2, [pc, #44]	; (8115aa8 <MX_DMA_Init+0x3c>)
 8115a7a:	f043 0302 	orr.w	r3, r3, #2
 8115a7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8115a82:	4b09      	ldr	r3, [pc, #36]	; (8115aa8 <MX_DMA_Init+0x3c>)
 8115a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8115a88:	f003 0302 	and.w	r3, r3, #2
 8115a8c:	607b      	str	r3, [r7, #4]
 8115a8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8115a90:	2200      	movs	r2, #0
 8115a92:	2100      	movs	r1, #0
 8115a94:	2038      	movs	r0, #56	; 0x38
 8115a96:	f7ed f9db 	bl	8102e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8115a9a:	2038      	movs	r0, #56	; 0x38
 8115a9c:	f7ed f9f2 	bl	8102e84 <HAL_NVIC_EnableIRQ>

}
 8115aa0:	bf00      	nop
 8115aa2:	3708      	adds	r7, #8
 8115aa4:	46bd      	mov	sp, r7
 8115aa6:	bd80      	pop	{r7, pc}
 8115aa8:	58024400 	.word	0x58024400

08115aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8115aac:	b580      	push	{r7, lr}
 8115aae:	b08c      	sub	sp, #48	; 0x30
 8115ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8115ab2:	f107 031c 	add.w	r3, r7, #28
 8115ab6:	2200      	movs	r2, #0
 8115ab8:	601a      	str	r2, [r3, #0]
 8115aba:	605a      	str	r2, [r3, #4]
 8115abc:	609a      	str	r2, [r3, #8]
 8115abe:	60da      	str	r2, [r3, #12]
 8115ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8115ac2:	4b6b      	ldr	r3, [pc, #428]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115ac8:	4a69      	ldr	r2, [pc, #420]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115aca:	f043 0320 	orr.w	r3, r3, #32
 8115ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8115ad2:	4b67      	ldr	r3, [pc, #412]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115ad8:	f003 0320 	and.w	r3, r3, #32
 8115adc:	61bb      	str	r3, [r7, #24]
 8115ade:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8115ae0:	4b63      	ldr	r3, [pc, #396]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115ae6:	4a62      	ldr	r2, [pc, #392]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115ae8:	f043 0304 	orr.w	r3, r3, #4
 8115aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8115af0:	4b5f      	ldr	r3, [pc, #380]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115af6:	f003 0304 	and.w	r3, r3, #4
 8115afa:	617b      	str	r3, [r7, #20]
 8115afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8115afe:	4b5c      	ldr	r3, [pc, #368]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b04:	4a5a      	ldr	r2, [pc, #360]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b06:	f043 0301 	orr.w	r3, r3, #1
 8115b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8115b0e:	4b58      	ldr	r3, [pc, #352]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b14:	f003 0301 	and.w	r3, r3, #1
 8115b18:	613b      	str	r3, [r7, #16]
 8115b1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8115b1c:	4b54      	ldr	r3, [pc, #336]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b22:	4a53      	ldr	r2, [pc, #332]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b24:	f043 0302 	orr.w	r3, r3, #2
 8115b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8115b2c:	4b50      	ldr	r3, [pc, #320]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b32:	f003 0302 	and.w	r3, r3, #2
 8115b36:	60fb      	str	r3, [r7, #12]
 8115b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8115b3a:	4b4d      	ldr	r3, [pc, #308]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b40:	4a4b      	ldr	r2, [pc, #300]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b42:	f043 0308 	orr.w	r3, r3, #8
 8115b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8115b4a:	4b49      	ldr	r3, [pc, #292]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b50:	f003 0308 	and.w	r3, r3, #8
 8115b54:	60bb      	str	r3, [r7, #8]
 8115b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8115b58:	4b45      	ldr	r3, [pc, #276]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b5e:	4a44      	ldr	r2, [pc, #272]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8115b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8115b68:	4b41      	ldr	r3, [pc, #260]	; (8115c70 <MX_GPIO_Init+0x1c4>)
 8115b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8115b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8115b72:	607b      	str	r3, [r7, #4]
 8115b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LC4_CK_Pin|LD3_Pin, GPIO_PIN_RESET);
 8115b76:	2200      	movs	r2, #0
 8115b78:	f245 0101 	movw	r1, #20481	; 0x5001
 8115b7c:	483d      	ldr	r0, [pc, #244]	; (8115c74 <MX_GPIO_Init+0x1c8>)
 8115b7e:	f7f1 fb01 	bl	8107184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LC3_CK_GPIO_Port, LC3_CK_Pin, GPIO_PIN_RESET);
 8115b82:	2200      	movs	r2, #0
 8115b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8115b88:	483b      	ldr	r0, [pc, #236]	; (8115c78 <MX_GPIO_Init+0x1cc>)
 8115b8a:	f7f1 fafb 	bl	8107184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LC1_CK_GPIO_Port, LC1_CK_Pin, GPIO_PIN_RESET);
 8115b8e:	2200      	movs	r2, #0
 8115b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8115b94:	4839      	ldr	r0, [pc, #228]	; (8115c7c <MX_GPIO_Init+0x1d0>)
 8115b96:	f7f1 faf5 	bl	8107184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IGN_OUT_Pin|LOW_SIDE_SW_3_Pin|LC2_CK_Pin, GPIO_PIN_RESET);
 8115b9a:	2200      	movs	r2, #0
 8115b9c:	2107      	movs	r1, #7
 8115b9e:	4838      	ldr	r0, [pc, #224]	; (8115c80 <MX_GPIO_Init+0x1d4>)
 8115ba0:	f7f1 faf0 	bl	8107184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LC2_DIN_Pin */
  GPIO_InitStruct.Pin = LC2_DIN_Pin;
 8115ba4:	2380      	movs	r3, #128	; 0x80
 8115ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8115ba8:	2300      	movs	r3, #0
 8115baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8115bac:	2300      	movs	r3, #0
 8115bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LC2_DIN_GPIO_Port, &GPIO_InitStruct);
 8115bb0:	f107 031c 	add.w	r3, r7, #28
 8115bb4:	4619      	mov	r1, r3
 8115bb6:	4833      	ldr	r0, [pc, #204]	; (8115c84 <MX_GPIO_Init+0x1d8>)
 8115bb8:	f7f1 f91c 	bl	8106df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LC4_CK_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LC4_CK_Pin|LD3_Pin;
 8115bbc:	f245 0301 	movw	r3, #20481	; 0x5001
 8115bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8115bc2:	2301      	movs	r3, #1
 8115bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8115bc6:	2300      	movs	r3, #0
 8115bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8115bca:	2300      	movs	r3, #0
 8115bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8115bce:	f107 031c 	add.w	r3, r7, #28
 8115bd2:	4619      	mov	r1, r3
 8115bd4:	4827      	ldr	r0, [pc, #156]	; (8115c74 <MX_GPIO_Init+0x1c8>)
 8115bd6:	f7f1 f90d 	bl	8106df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LC4_DIN_Pin LC3_DIN_Pin */
  GPIO_InitStruct.Pin = LC4_DIN_Pin|LC3_DIN_Pin;
 8115bda:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8115bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8115be0:	2300      	movs	r3, #0
 8115be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8115be4:	2300      	movs	r3, #0
 8115be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8115be8:	f107 031c 	add.w	r3, r7, #28
 8115bec:	4619      	mov	r1, r3
 8115bee:	4821      	ldr	r0, [pc, #132]	; (8115c74 <MX_GPIO_Init+0x1c8>)
 8115bf0:	f7f1 f900 	bl	8106df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LC3_CK_Pin */
  GPIO_InitStruct.Pin = LC3_CK_Pin;
 8115bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8115bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8115bfa:	2301      	movs	r3, #1
 8115bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8115bfe:	2300      	movs	r3, #0
 8115c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8115c02:	2300      	movs	r3, #0
 8115c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LC3_CK_GPIO_Port, &GPIO_InitStruct);
 8115c06:	f107 031c 	add.w	r3, r7, #28
 8115c0a:	4619      	mov	r1, r3
 8115c0c:	481a      	ldr	r0, [pc, #104]	; (8115c78 <MX_GPIO_Init+0x1cc>)
 8115c0e:	f7f1 f8f1 	bl	8106df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LC1_CK_Pin */
  GPIO_InitStruct.Pin = LC1_CK_Pin;
 8115c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8115c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8115c18:	2301      	movs	r3, #1
 8115c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8115c1c:	2300      	movs	r3, #0
 8115c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8115c20:	2300      	movs	r3, #0
 8115c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LC1_CK_GPIO_Port, &GPIO_InitStruct);
 8115c24:	f107 031c 	add.w	r3, r7, #28
 8115c28:	4619      	mov	r1, r3
 8115c2a:	4814      	ldr	r0, [pc, #80]	; (8115c7c <MX_GPIO_Init+0x1d0>)
 8115c2c:	f7f1 f8e2 	bl	8106df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LC1_DIN_Pin */
  GPIO_InitStruct.Pin = LC1_DIN_Pin;
 8115c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8115c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8115c36:	2300      	movs	r3, #0
 8115c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8115c3a:	2300      	movs	r3, #0
 8115c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LC1_DIN_GPIO_Port, &GPIO_InitStruct);
 8115c3e:	f107 031c 	add.w	r3, r7, #28
 8115c42:	4619      	mov	r1, r3
 8115c44:	480d      	ldr	r0, [pc, #52]	; (8115c7c <MX_GPIO_Init+0x1d0>)
 8115c46:	f7f1 f8d5 	bl	8106df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IGN_OUT_Pin LOW_SIDE_SW_3_Pin LC2_CK_Pin */
  GPIO_InitStruct.Pin = IGN_OUT_Pin|LOW_SIDE_SW_3_Pin|LC2_CK_Pin;
 8115c4a:	2307      	movs	r3, #7
 8115c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8115c4e:	2301      	movs	r3, #1
 8115c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8115c52:	2300      	movs	r3, #0
 8115c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8115c56:	2300      	movs	r3, #0
 8115c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8115c5a:	f107 031c 	add.w	r3, r7, #28
 8115c5e:	4619      	mov	r1, r3
 8115c60:	4807      	ldr	r0, [pc, #28]	; (8115c80 <MX_GPIO_Init+0x1d4>)
 8115c62:	f7f1 f8c7 	bl	8106df4 <HAL_GPIO_Init>

}
 8115c66:	bf00      	nop
 8115c68:	3730      	adds	r7, #48	; 0x30
 8115c6a:	46bd      	mov	sp, r7
 8115c6c:	bd80      	pop	{r7, pc}
 8115c6e:	bf00      	nop
 8115c70:	58024400 	.word	0x58024400
 8115c74:	58020400 	.word	0x58020400
 8115c78:	58020000 	.word	0x58020000
 8115c7c:	58020800 	.word	0x58020800
 8115c80:	58020c00 	.word	0x58020c00
 8115c84:	58021400 	.word	0x58021400

08115c88 <Netif_Config>:

/* USER CODE BEGIN 4 */
void Netif_Config(void) {
 8115c88:	b5b0      	push	{r4, r5, r7, lr}
 8115c8a:	b08c      	sub	sp, #48	; 0x30
 8115c8c:	af04      	add	r7, sp, #16

	/* Create tcp_ip stack thread */
	tcpip_init(NULL, NULL);
 8115c8e:	2100      	movs	r1, #0
 8115c90:	2000      	movs	r0, #0
 8115c92:	f7fd fe3f 	bl	8113914 <tcpip_init>

	IP_ADDR4(&ipaddr, 192, 168, 1, 104); //GNC Board IP
 8115c96:	4b1a      	ldr	r3, [pc, #104]	; (8115d00 <Netif_Config+0x78>)
 8115c98:	4a1a      	ldr	r2, [pc, #104]	; (8115d04 <Netif_Config+0x7c>)
 8115c9a:	601a      	str	r2, [r3, #0]
	IP_ADDR4(&netmask, 255, 255, 255, 0);
 8115c9c:	4b1a      	ldr	r3, [pc, #104]	; (8115d08 <Netif_Config+0x80>)
 8115c9e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8115ca2:	601a      	str	r2, [r3, #0]
	IP_ADDR4(&gw, 192, 168, 1, 1);
 8115ca4:	4b19      	ldr	r3, [pc, #100]	; (8115d0c <Netif_Config+0x84>)
 8115ca6:	4a1a      	ldr	r2, [pc, #104]	; (8115d10 <Netif_Config+0x88>)
 8115ca8:	601a      	str	r2, [r3, #0]
	/* add the network interface */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 8115caa:	4b1a      	ldr	r3, [pc, #104]	; (8115d14 <Netif_Config+0x8c>)
 8115cac:	9302      	str	r3, [sp, #8]
 8115cae:	4b1a      	ldr	r3, [pc, #104]	; (8115d18 <Netif_Config+0x90>)
 8115cb0:	9301      	str	r3, [sp, #4]
 8115cb2:	2300      	movs	r3, #0
 8115cb4:	9300      	str	r3, [sp, #0]
 8115cb6:	4b15      	ldr	r3, [pc, #84]	; (8115d0c <Netif_Config+0x84>)
 8115cb8:	4a13      	ldr	r2, [pc, #76]	; (8115d08 <Netif_Config+0x80>)
 8115cba:	4911      	ldr	r1, [pc, #68]	; (8115d00 <Netif_Config+0x78>)
 8115cbc:	4817      	ldr	r0, [pc, #92]	; (8115d1c <Netif_Config+0x94>)
 8115cbe:	f7fc fbaf 	bl	8112420 <netif_add>
			&ethernet_input);

	/*  Registers the default network interface. */
	netif_set_default(&gnetif);
 8115cc2:	4816      	ldr	r0, [pc, #88]	; (8115d1c <Netif_Config+0x94>)
 8115cc4:	f7fc fd5a 	bl	811277c <netif_set_default>

	printf("GSCS-002 CM4 - Network Interface Configured\n");
 8115cc8:	4815      	ldr	r0, [pc, #84]	; (8115d20 <Netif_Config+0x98>)
 8115cca:	f001 fe03 	bl	81178d4 <puts>

	ethernet_link_status_updated(&gnetif);
 8115cce:	4813      	ldr	r0, [pc, #76]	; (8115d1c <Netif_Config+0x94>)
 8115cd0:	f7fe fcce 	bl	8114670 <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8115cd4:	4913      	ldr	r1, [pc, #76]	; (8115d24 <Netif_Config+0x9c>)
 8115cd6:	4811      	ldr	r0, [pc, #68]	; (8115d1c <Netif_Config+0x94>)
 8115cd8:	f7fc fe62 	bl	81129a0 <netif_set_link_callback>

	osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0,
 8115cdc:	4b12      	ldr	r3, [pc, #72]	; (8115d28 <Netif_Config+0xa0>)
 8115cde:	1d3c      	adds	r4, r7, #4
 8115ce0:	461d      	mov	r5, r3
 8115ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8115ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8115ce6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8115cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE *2);
	osThreadCreate(osThread(EthLink), &gnetif);
 8115cee:	1d3b      	adds	r3, r7, #4
 8115cf0:	490a      	ldr	r1, [pc, #40]	; (8115d1c <Netif_Config+0x94>)
 8115cf2:	4618      	mov	r0, r3
 8115cf4:	f7f6 fc75 	bl	810c5e2 <osThreadCreate>
#endif

}
 8115cf8:	bf00      	nop
 8115cfa:	3720      	adds	r7, #32
 8115cfc:	46bd      	mov	sp, r7
 8115cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8115d00:	100089c4 	.word	0x100089c4
 8115d04:	6801a8c0 	.word	0x6801a8c0
 8115d08:	100089d0 	.word	0x100089d0
 8115d0c:	100089d4 	.word	0x100089d4
 8115d10:	0101a8c0 	.word	0x0101a8c0
 8115d14:	081100d1 	.word	0x081100d1
 8115d18:	08114d25 	.word	0x08114d25
 8115d1c:	10008990 	.word	0x10008990
 8115d20:	0811b4e4 	.word	0x0811b4e4
 8115d24:	08114671 	.word	0x08114671
 8115d28:	0811b510 	.word	0x0811b510

08115d2c <delay_us>:

// UDP functions over lwIP


void delay_us(uint16_t us) {
 8115d2c:	b480      	push	{r7}
 8115d2e:	b083      	sub	sp, #12
 8115d30:	af00      	add	r7, sp, #0
 8115d32:	4603      	mov	r3, r0
 8115d34:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim15, 0);  // set the counter value a 0
 8115d36:	4b09      	ldr	r3, [pc, #36]	; (8115d5c <delay_us+0x30>)
 8115d38:	681b      	ldr	r3, [r3, #0]
 8115d3a:	2200      	movs	r2, #0
 8115d3c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim15) < us)
 8115d3e:	bf00      	nop
 8115d40:	4b06      	ldr	r3, [pc, #24]	; (8115d5c <delay_us+0x30>)
 8115d42:	681b      	ldr	r3, [r3, #0]
 8115d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8115d46:	88fb      	ldrh	r3, [r7, #6]
 8115d48:	429a      	cmp	r2, r3
 8115d4a:	d3f9      	bcc.n	8115d40 <delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8115d4c:	bf00      	nop
 8115d4e:	bf00      	nop
 8115d50:	370c      	adds	r7, #12
 8115d52:	46bd      	mov	sp, r7
 8115d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115d58:	4770      	bx	lr
 8115d5a:	bf00      	nop
 8115d5c:	10008ad8 	.word	0x10008ad8

08115d60 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8115d60:	b480      	push	{r7}
 8115d62:	b083      	sub	sp, #12
 8115d64:	af00      	add	r7, sp, #0
 8115d66:	6078      	str	r0, [r7, #4]

}
 8115d68:	bf00      	nop
 8115d6a:	370c      	adds	r7, #12
 8115d6c:	46bd      	mov	sp, r7
 8115d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115d72:	4770      	bx	lr

08115d74 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8115d74:	b580      	push	{r7, lr}
 8115d76:	b082      	sub	sp, #8
 8115d78:	af00      	add	r7, sp, #0
 8115d7a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */

  /* USER CODE BEGIN 5 */
	printf("\nGSCS_002 CM4 - Main Task Started\n");
 8115d7c:	4805      	ldr	r0, [pc, #20]	; (8115d94 <StartDefaultTask+0x20>)
 8115d7e:	f001 fda9 	bl	81178d4 <puts>

	/* Infinite loop */

	Netif_Config();
 8115d82:	f7ff ff81 	bl	8115c88 <Netif_Config>

	udpClient_connect();
 8115d86:	f000 fab9 	bl	81162fc <udpClient_connect>

	//other tASK SHOULD WAIT THIS POINT, relase the semaphore

	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8115d8a:	2064      	movs	r0, #100	; 0x64
 8115d8c:	f7f6 fc75 	bl	810c67a <osDelay>
 8115d90:	e7fb      	b.n	8115d8a <StartDefaultTask+0x16>
 8115d92:	bf00      	nop
 8115d94:	0811b52c 	.word	0x0811b52c

08115d98 <StartSens_Acq_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSens_Acq_Task */
void StartSens_Acq_Task(void const * argument)
{
 8115d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8115d9c:	b088      	sub	sp, #32
 8115d9e:	af06      	add	r7, sp, #24
 8115da0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSens_Acq_Task */

	osDelay(500); //Thermocouple Power-up Time 200 ms, HX711 400 ms
 8115da2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8115da6:	f7f6 fc68 	bl	810c67a <osDelay>

	printf("\nDAQ Task Started\n");
 8115daa:	485a      	ldr	r0, [pc, #360]	; (8115f14 <StartSens_Acq_Task+0x17c>)
 8115dac:	f001 fd92 	bl	81178d4 <puts>

	HAL_TIM_Base_Start(&htim15); //timer used for us delay
 8115db0:	4859      	ldr	r0, [pc, #356]	; (8115f18 <StartSens_Acq_Task+0x180>)
 8115db2:	f7f4 f83b 	bl	8109e2c <HAL_TIM_Base_Start>
	// start DMA for
	printf("GSCS-002 CM4 - Starting ADC1 DMA\n");
 8115db6:	4859      	ldr	r0, [pc, #356]	; (8115f1c <StartSens_Acq_Task+0x184>)
 8115db8:	f001 fd8c 	bl	81178d4 <puts>

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_ConvertedData,
 8115dbc:	2208      	movs	r2, #8
 8115dbe:	4958      	ldr	r1, [pc, #352]	; (8115f20 <StartSens_Acq_Task+0x188>)
 8115dc0:	4858      	ldr	r0, [pc, #352]	; (8115f24 <StartSens_Acq_Task+0x18c>)
 8115dc2:	f7eb ff33 	bl	8101c2c <HAL_ADC_Start_DMA>
 8115dc6:	4603      	mov	r3, r0
 8115dc8:	2b00      	cmp	r3, #0
 8115dca:	d004      	beq.n	8115dd6 <StartSens_Acq_Task+0x3e>
	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
		printf("GSCS-002 CM4 - ADC1 DMA error\n");
 8115dcc:	4856      	ldr	r0, [pc, #344]	; (8115f28 <StartSens_Acq_Task+0x190>)
 8115dce:	f001 fd81 	bl	81178d4 <puts>
		Error_Handler();
 8115dd2:	f000 f961 	bl	8116098 <Error_Handler>
	}

	printf("GSCS-002 CM4e - ADC1 DMA configured\n");
 8115dd6:	4855      	ldr	r0, [pc, #340]	; (8115f2c <StartSens_Acq_Task+0x194>)
 8115dd8:	f001 fd7c 	bl	81178d4 <puts>

	hx711_init(&LOAD_CELL1, LC1_CK_GPIO_Port, LC1_CK_Pin, LC1_DIN_GPIO_Port, LC1_DIN_Pin);
 8115ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8115de0:	9300      	str	r3, [sp, #0]
 8115de2:	4b53      	ldr	r3, [pc, #332]	; (8115f30 <StartSens_Acq_Task+0x198>)
 8115de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8115de8:	4951      	ldr	r1, [pc, #324]	; (8115f30 <StartSens_Acq_Task+0x198>)
 8115dea:	4852      	ldr	r0, [pc, #328]	; (8115f34 <StartSens_Acq_Task+0x19c>)
 8115dec:	f7ff f8ee 	bl	8114fcc <hx711_init>
	hx711_init(&LOAD_CELL2, LC2_CK_GPIO_Port, LC2_CK_Pin, LC2_DIN_GPIO_Port, LC2_DIN_Pin);
 8115df0:	2380      	movs	r3, #128	; 0x80
 8115df2:	9300      	str	r3, [sp, #0]
 8115df4:	4b50      	ldr	r3, [pc, #320]	; (8115f38 <StartSens_Acq_Task+0x1a0>)
 8115df6:	2204      	movs	r2, #4
 8115df8:	4950      	ldr	r1, [pc, #320]	; (8115f3c <StartSens_Acq_Task+0x1a4>)
 8115dfa:	4851      	ldr	r0, [pc, #324]	; (8115f40 <StartSens_Acq_Task+0x1a8>)
 8115dfc:	f7ff f8e6 	bl	8114fcc <hx711_init>
	hx711_init(&LOAD_CELL3, LC3_CK_GPIO_Port, LC3_CK_Pin, LC3_DIN_GPIO_Port, LC3_DIN_Pin);
 8115e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8115e04:	9300      	str	r3, [sp, #0]
 8115e06:	4b4f      	ldr	r3, [pc, #316]	; (8115f44 <StartSens_Acq_Task+0x1ac>)
 8115e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8115e0c:	494e      	ldr	r1, [pc, #312]	; (8115f48 <StartSens_Acq_Task+0x1b0>)
 8115e0e:	484f      	ldr	r0, [pc, #316]	; (8115f4c <StartSens_Acq_Task+0x1b4>)
 8115e10:	f7ff f8dc 	bl	8114fcc <hx711_init>
	hx711_init(&LOAD_CELL4, LC4_CK_GPIO_Port, LC4_CK_Pin, LC4_DIN_GPIO_Port, LC4_DIN_Pin);
 8115e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8115e18:	9300      	str	r3, [sp, #0]
 8115e1a:	4b4a      	ldr	r3, [pc, #296]	; (8115f44 <StartSens_Acq_Task+0x1ac>)
 8115e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8115e20:	4948      	ldr	r1, [pc, #288]	; (8115f44 <StartSens_Acq_Task+0x1ac>)
 8115e22:	484b      	ldr	r0, [pc, #300]	; (8115f50 <StartSens_Acq_Task+0x1b8>)
 8115e24:	f7ff f8d2 	bl	8114fcc <hx711_init>


	hx711_coef_set(&LOAD_CELL1, -15.0026); // set calibration coefficent
 8115e28:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8115f54 <StartSens_Acq_Task+0x1bc>
 8115e2c:	4841      	ldr	r0, [pc, #260]	; (8115f34 <StartSens_Acq_Task+0x19c>)
 8115e2e:	f7ff fa27 	bl	8115280 <hx711_coef_set>
	hx711_coef_set(&LOAD_CELL2, -15.0026); // set calibration coefficent
 8115e32:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8115f54 <StartSens_Acq_Task+0x1bc>
 8115e36:	4842      	ldr	r0, [pc, #264]	; (8115f40 <StartSens_Acq_Task+0x1a8>)
 8115e38:	f7ff fa22 	bl	8115280 <hx711_coef_set>
	hx711_coef_set(&LOAD_CELL3, -15.0026); // set calibration coefficent
 8115e3c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8115f54 <StartSens_Acq_Task+0x1bc>
 8115e40:	4842      	ldr	r0, [pc, #264]	; (8115f4c <StartSens_Acq_Task+0x1b4>)
 8115e42:	f7ff fa1d 	bl	8115280 <hx711_coef_set>
	hx711_coef_set(&LOAD_CELL4, -15.0026); // set calibration coefficent
 8115e46:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8115f54 <StartSens_Acq_Task+0x1bc>
 8115e4a:	4841      	ldr	r0, [pc, #260]	; (8115f50 <StartSens_Acq_Task+0x1b8>)
 8115e4c:	f7ff fa18 	bl	8115280 <hx711_coef_set>

	hx711_tare(&LOAD_CELL1, 10); //read offset
 8115e50:	210a      	movs	r1, #10
 8115e52:	4838      	ldr	r0, [pc, #224]	; (8115f34 <StartSens_Acq_Task+0x19c>)
 8115e54:	f7ff f989 	bl	811516a <hx711_tare>
	hx711_tare(&LOAD_CELL2, 10); //read offset
 8115e58:	210a      	movs	r1, #10
 8115e5a:	4839      	ldr	r0, [pc, #228]	; (8115f40 <StartSens_Acq_Task+0x1a8>)
 8115e5c:	f7ff f985 	bl	811516a <hx711_tare>
	hx711_tare(&LOAD_CELL3, 10); //read offset
 8115e60:	210a      	movs	r1, #10
 8115e62:	483a      	ldr	r0, [pc, #232]	; (8115f4c <StartSens_Acq_Task+0x1b4>)
 8115e64:	f7ff f981 	bl	811516a <hx711_tare>
	hx711_tare(&LOAD_CELL4, 10); //read offset
 8115e68:	210a      	movs	r1, #10
 8115e6a:	4839      	ldr	r0, [pc, #228]	; (8115f50 <StartSens_Acq_Task+0x1b8>)
 8115e6c:	f7ff f97d 	bl	811516a <hx711_tare>

	printf("GSCS-002 CM4 - HX711 Initialized\n");
 8115e70:	4839      	ldr	r0, [pc, #228]	; (8115f58 <StartSens_Acq_Task+0x1c0>)
 8115e72:	f001 fd2f 	bl	81178d4 <puts>
	// Start ADC Conversion

	/* Infinite loop */
	for (;;) {

		osDelay(100);
 8115e76:	2064      	movs	r0, #100	; 0x64
 8115e78:	f7f6 fbff 	bl	810c67a <osDelay>

		thrust[0] = hx711_weight(&LOAD_CELL1,1);
 8115e7c:	2101      	movs	r1, #1
 8115e7e:	482d      	ldr	r0, [pc, #180]	; (8115f34 <StartSens_Acq_Task+0x19c>)
 8115e80:	f7ff f9af 	bl	81151e2 <hx711_weight>
 8115e84:	eef0 7a40 	vmov.f32	s15, s0
 8115e88:	4b34      	ldr	r3, [pc, #208]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115e8a:	edc3 7a00 	vstr	s15, [r3]
		thrust[1] = hx711_weight(&LOAD_CELL2,1);
 8115e8e:	2101      	movs	r1, #1
 8115e90:	482b      	ldr	r0, [pc, #172]	; (8115f40 <StartSens_Acq_Task+0x1a8>)
 8115e92:	f7ff f9a6 	bl	81151e2 <hx711_weight>
 8115e96:	eef0 7a40 	vmov.f32	s15, s0
 8115e9a:	4b30      	ldr	r3, [pc, #192]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115e9c:	edc3 7a01 	vstr	s15, [r3, #4]
		thrust[2] = hx711_weight(&LOAD_CELL3,1);
 8115ea0:	2101      	movs	r1, #1
 8115ea2:	482a      	ldr	r0, [pc, #168]	; (8115f4c <StartSens_Acq_Task+0x1b4>)
 8115ea4:	f7ff f99d 	bl	81151e2 <hx711_weight>
 8115ea8:	eef0 7a40 	vmov.f32	s15, s0
 8115eac:	4b2b      	ldr	r3, [pc, #172]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115eae:	edc3 7a02 	vstr	s15, [r3, #8]
		thrust[3] = hx711_weight(&LOAD_CELL4,1);
 8115eb2:	2101      	movs	r1, #1
 8115eb4:	4826      	ldr	r0, [pc, #152]	; (8115f50 <StartSens_Acq_Task+0x1b8>)
 8115eb6:	f7ff f994 	bl	81151e2 <hx711_weight>
 8115eba:	eef0 7a40 	vmov.f32	s15, s0
 8115ebe:	4b27      	ldr	r3, [pc, #156]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115ec0:	edc3 7a03 	vstr	s15, [r3, #12]

		printf("%.1f %.1f %.1f %.1f \n",thrust[0],thrust[1],thrust[2],thrust[3]);
 8115ec4:	4b25      	ldr	r3, [pc, #148]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115ec6:	681b      	ldr	r3, [r3, #0]
 8115ec8:	4618      	mov	r0, r3
 8115eca:	f7ea fbc5 	bl	8100658 <__aeabi_f2d>
 8115ece:	4682      	mov	sl, r0
 8115ed0:	468b      	mov	fp, r1
 8115ed2:	4b22      	ldr	r3, [pc, #136]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115ed4:	685b      	ldr	r3, [r3, #4]
 8115ed6:	4618      	mov	r0, r3
 8115ed8:	f7ea fbbe 	bl	8100658 <__aeabi_f2d>
 8115edc:	4604      	mov	r4, r0
 8115ede:	460d      	mov	r5, r1
 8115ee0:	4b1e      	ldr	r3, [pc, #120]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115ee2:	689b      	ldr	r3, [r3, #8]
 8115ee4:	4618      	mov	r0, r3
 8115ee6:	f7ea fbb7 	bl	8100658 <__aeabi_f2d>
 8115eea:	4680      	mov	r8, r0
 8115eec:	4689      	mov	r9, r1
 8115eee:	4b1b      	ldr	r3, [pc, #108]	; (8115f5c <StartSens_Acq_Task+0x1c4>)
 8115ef0:	68db      	ldr	r3, [r3, #12]
 8115ef2:	4618      	mov	r0, r3
 8115ef4:	f7ea fbb0 	bl	8100658 <__aeabi_f2d>
 8115ef8:	4602      	mov	r2, r0
 8115efa:	460b      	mov	r3, r1
 8115efc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8115f00:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8115f04:	e9cd 4500 	strd	r4, r5, [sp]
 8115f08:	4652      	mov	r2, sl
 8115f0a:	465b      	mov	r3, fp
 8115f0c:	4814      	ldr	r0, [pc, #80]	; (8115f60 <StartSens_Acq_Task+0x1c8>)
 8115f0e:	f001 fc5b 	bl	81177c8 <iprintf>
		osDelay(100);
 8115f12:	e7b0      	b.n	8115e76 <StartSens_Acq_Task+0xde>
 8115f14:	0811b550 	.word	0x0811b550
 8115f18:	10008ad8 	.word	0x10008ad8
 8115f1c:	0811b564 	.word	0x0811b564
 8115f20:	10005c20 	.word	0x10005c20
 8115f24:	10008b40 	.word	0x10008b40
 8115f28:	0811b588 	.word	0x0811b588
 8115f2c:	0811b5a8 	.word	0x0811b5a8
 8115f30:	58020800 	.word	0x58020800
 8115f34:	100089d8 	.word	0x100089d8
 8115f38:	58021400 	.word	0x58021400
 8115f3c:	58020c00 	.word	0x58020c00
 8115f40:	10008c90 	.word	0x10008c90
 8115f44:	58020400 	.word	0x58020400
 8115f48:	58020000 	.word	0x58020000
 8115f4c:	10008d08 	.word	0x10008d08
 8115f50:	10008b28 	.word	0x10008b28
 8115f54:	c1700aa6 	.word	0xc1700aa6
 8115f58:	0811b5cc 	.word	0x0811b5cc
 8115f5c:	10008ca8 	.word	0x10008ca8
 8115f60:	0811b5f0 	.word	0x0811b5f0

08115f64 <Start_CommandRX_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CommandRX_Task */
void Start_CommandRX_Task(void const * argument)
{
 8115f64:	b580      	push	{r7, lr}
 8115f66:	b082      	sub	sp, #8
 8115f68:	af00      	add	r7, sp, #0
 8115f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CommandRX_Task */


	//Before entering the loop the ground station must be initialized and sent a udp initialization command
	/* Infinite loop */
	osDelay(500);
 8115f6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8115f70:	f7f6 fb83 	bl	810c67a <osDelay>
	printf("\nTC Task Started\n");
 8115f74:	4803      	ldr	r0, [pc, #12]	; (8115f84 <Start_CommandRX_Task+0x20>)
 8115f76:	f001 fcad 	bl	81178d4 <puts>

	for (;;) {
		osDelay(100);
 8115f7a:	2064      	movs	r0, #100	; 0x64
 8115f7c:	f7f6 fb7d 	bl	810c67a <osDelay>
 8115f80:	e7fb      	b.n	8115f7a <Start_CommandRX_Task+0x16>
 8115f82:	bf00      	nop
 8115f84:	0811b608 	.word	0x0811b608

08115f88 <Start_TelemetryTX_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_TelemetryTX_Task */
void Start_TelemetryTX_Task(void const * argument)
{
 8115f88:	b5b0      	push	{r4, r5, r7, lr}
 8115f8a:	b098      	sub	sp, #96	; 0x60
 8115f8c:	af04      	add	r7, sp, #16
 8115f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_TelemetryTX_Task */
	/* Infinite loop */
	printf("\nTM Task Started\n"); //should start after DAQ task
 8115f90:	4831      	ldr	r0, [pc, #196]	; (8116058 <Start_TelemetryTX_Task+0xd0>)
 8115f92:	f001 fc9f 	bl	81178d4 <puts>

	primaryHdr TM_hdr;
	space_packet TM_pkt;

	//define SPP Packet Header structure
	TM_hdr.APID = 5; //application id
 8115f96:	2305      	movs	r3, #5
 8115f98:	63fb      	str	r3, [r7, #60]	; 0x3c
	TM_hdr.pkt_ver = 0;
 8115f9a:	2300      	movs	r3, #0
 8115f9c:	633b      	str	r3, [r7, #48]	; 0x30
	TM_hdr.secHdrFlag = 0;
 8115f9e:	2300      	movs	r3, #0
 8115fa0:	63bb      	str	r3, [r7, #56]	; 0x38
	TM_hdr.type = 0;
 8115fa2:	2300      	movs	r3, #0
 8115fa4:	637b      	str	r3, [r7, #52]	; 0x34
	TM_hdr.data_len = SPP_BYTE_DATA; //bytes in sec. header + data minus one (0 + 6) - 1
 8115fa6:	2304      	movs	r3, #4
 8115fa8:	64bb      	str	r3, [r7, #72]	; 0x48
	TM_hdr.seqFlag = 3;
 8115faa:	2303      	movs	r3, #3
 8115fac:	643b      	str	r3, [r7, #64]	; 0x40

    //put the header into the packet
	TM_pkt.pHdr = TM_hdr;
 8115fae:	f107 0410 	add.w	r4, r7, #16
 8115fb2:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8115fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8115fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8115fba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8115fbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	unsigned int ccsds_counter = 0;
 8115fc2:	2300      	movs	r3, #0
 8115fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
	myfloat SPP_Thrust;


	for (;;) {

		osDelay(100); // 1 kHz UDP Telemetry
 8115fc6:	2064      	movs	r0, #100	; 0x64
 8115fc8:	f7f6 fb57 	bl	810c67a <osDelay>

		SPP_Thrust.f = thrust[0];
 8115fcc:	4b23      	ldr	r3, [pc, #140]	; (811605c <Start_TelemetryTX_Task+0xd4>)
 8115fce:	681b      	ldr	r3, [r3, #0]
 8115fd0:	60fb      	str	r3, [r7, #12]

		TM_pkt.data[0] = (SPP_Thrust.raw.sign << 7)| (SPP_Thrust.raw.exponent >> 1); //& (vartest.raw.exponent >> 1);
 8115fd2:	7bfb      	ldrb	r3, [r7, #15]
 8115fd4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8115fd8:	b2db      	uxtb	r3, r3
 8115fda:	01db      	lsls	r3, r3, #7
 8115fdc:	b25a      	sxtb	r2, r3
 8115fde:	89fb      	ldrh	r3, [r7, #14]
 8115fe0:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8115fe4:	b2db      	uxtb	r3, r3
 8115fe6:	085b      	lsrs	r3, r3, #1
 8115fe8:	b2db      	uxtb	r3, r3
 8115fea:	b25b      	sxtb	r3, r3
 8115fec:	4313      	orrs	r3, r2
 8115fee:	b25b      	sxtb	r3, r3
 8115ff0:	b2db      	uxtb	r3, r3
 8115ff2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		TM_pkt.data[1] = (SPP_Thrust.raw.exponent << 7)	| (SPP_Thrust.raw.mantissa >> 16);
 8115ff6:	89fb      	ldrh	r3, [r7, #14]
 8115ff8:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8115ffc:	b2db      	uxtb	r3, r3
 8115ffe:	01db      	lsls	r3, r3, #7
 8116000:	b25a      	sxtb	r2, r3
 8116002:	68fb      	ldr	r3, [r7, #12]
 8116004:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8116008:	141b      	asrs	r3, r3, #16
 811600a:	b25b      	sxtb	r3, r3
 811600c:	4313      	orrs	r3, r2
 811600e:	b25b      	sxtb	r3, r3
 8116010:	b2db      	uxtb	r3, r3
 8116012:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		TM_pkt.data[2] = (SPP_Thrust.raw.mantissa >> 8);
 8116016:	68fb      	ldr	r3, [r7, #12]
 8116018:	f3c3 0316 	ubfx	r3, r3, #0, #23
 811601c:	121b      	asrs	r3, r3, #8
 811601e:	b2db      	uxtb	r3, r3
 8116020:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		TM_pkt.data[3] = (SPP_Thrust.raw.mantissa);
 8116024:	68fb      	ldr	r3, [r7, #12]
 8116026:	f3c3 0316 	ubfx	r3, r3, #0, #23
 811602a:	b2db      	uxtb	r3, r3
 811602c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		TM_pkt.pHdr.seqCount = ccsds_counter;
 8116030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8116032:	627b      	str	r3, [r7, #36]	; 0x24

		pack_SPP_TM(TM_pkt);
 8116034:	466c      	mov	r4, sp
 8116036:	f107 0320 	add.w	r3, r7, #32
 811603a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 811603c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8116040:	f107 0310 	add.w	r3, r7, #16
 8116044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8116046:	f000 f991 	bl	811636c <pack_SPP_TM>

		udpClient_send_spp();
 811604a:	f000 f923 	bl	8116294 <udpClient_send_spp>

		ccsds_counter++;
 811604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8116050:	3301      	adds	r3, #1
 8116052:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (;;) {
 8116054:	e7b7      	b.n	8115fc6 <Start_TelemetryTX_Task+0x3e>
 8116056:	bf00      	nop
 8116058:	0811b61c 	.word	0x0811b61c
 811605c:	10008ca8 	.word	0x10008ca8

08116060 <Start_ActuatorsControl_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_ActuatorsControl_Task */
void Start_ActuatorsControl_Task(void const * argument)
{
 8116060:	b580      	push	{r7, lr}
 8116062:	b082      	sub	sp, #8
 8116064:	af00      	add	r7, sp, #0
 8116066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ActuatorsControl_Task */

	osDelay(1000); //start after TC -> DAQ -> TM -> ACT
 8116068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 811606c:	f7f6 fb05 	bl	810c67a <osDelay>

	//printf("\nActuator Control Task Started\n");

	for (;;) {

		osDelay(100);
 8116070:	2064      	movs	r0, #100	; 0x64
 8116072:	f7f6 fb02 	bl	810c67a <osDelay>
 8116076:	e7fb      	b.n	8116070 <Start_ActuatorsControl_Task+0x10>

08116078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8116078:	b580      	push	{r7, lr}
 811607a:	b082      	sub	sp, #8
 811607c:	af00      	add	r7, sp, #0
 811607e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8116080:	687b      	ldr	r3, [r7, #4]
 8116082:	681b      	ldr	r3, [r3, #0]
 8116084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8116088:	d101      	bne.n	811608e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 811608a:	f7eb f9bd 	bl	8101408 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 811608e:	bf00      	nop
 8116090:	3708      	adds	r7, #8
 8116092:	46bd      	mov	sp, r7
 8116094:	bd80      	pop	{r7, pc}
	...

08116098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8116098:	b580      	push	{r7, lr}
 811609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error handler called\n");
 811609c:	4802      	ldr	r0, [pc, #8]	; (81160a8 <Error_Handler+0x10>)
 811609e:	f001 fc19 	bl	81178d4 <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 81160a2:	b672      	cpsid	i
}
 81160a4:	bf00      	nop
	__disable_irq();
	while (1) {
 81160a6:	e7fe      	b.n	81160a6 <Error_Handler+0xe>
 81160a8:	0811b630 	.word	0x0811b630

081160ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 81160ac:	b580      	push	{r7, lr}
 81160ae:	b082      	sub	sp, #8
 81160b0:	af00      	add	r7, sp, #0
 81160b2:	6078      	str	r0, [r7, #4]
	gHuart = huart;
 81160b4:	4a07      	ldr	r2, [pc, #28]	; (81160d4 <RetargetInit+0x28>)
 81160b6:	687b      	ldr	r3, [r7, #4]
 81160b8:	6013      	str	r3, [r2, #0]

	/* Disable I/O buffering for STDOUT stream, so that
	 * chars are sent out as soon as they are printed. */
	setvbuf(stdout, NULL, _IONBF, 0);
 81160ba:	4b07      	ldr	r3, [pc, #28]	; (81160d8 <RetargetInit+0x2c>)
 81160bc:	681b      	ldr	r3, [r3, #0]
 81160be:	6898      	ldr	r0, [r3, #8]
 81160c0:	2300      	movs	r3, #0
 81160c2:	2202      	movs	r2, #2
 81160c4:	2100      	movs	r1, #0
 81160c6:	f001 fcc7 	bl	8117a58 <setvbuf>
}
 81160ca:	bf00      	nop
 81160cc:	3708      	adds	r7, #8
 81160ce:	46bd      	mov	sp, r7
 81160d0:	bd80      	pop	{r7, pc}
 81160d2:	bf00      	nop
 81160d4:	10008d20 	.word	0x10008d20
 81160d8:	1000002c 	.word	0x1000002c

081160dc <_isatty>:

int _isatty(int fd) {
 81160dc:	b480      	push	{r7}
 81160de:	b083      	sub	sp, #12
 81160e0:	af00      	add	r7, sp, #0
 81160e2:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 81160e4:	687b      	ldr	r3, [r7, #4]
 81160e6:	2b00      	cmp	r3, #0
 81160e8:	db04      	blt.n	81160f4 <_isatty+0x18>
 81160ea:	687b      	ldr	r3, [r7, #4]
 81160ec:	2b02      	cmp	r3, #2
 81160ee:	dc01      	bgt.n	81160f4 <_isatty+0x18>
		return 1;
 81160f0:	2301      	movs	r3, #1
 81160f2:	e003      	b.n	81160fc <_isatty+0x20>

	errno = EBADF;
 81160f4:	4b04      	ldr	r3, [pc, #16]	; (8116108 <_isatty+0x2c>)
 81160f6:	2209      	movs	r2, #9
 81160f8:	601a      	str	r2, [r3, #0]
	return 0;
 81160fa:	2300      	movs	r3, #0
}
 81160fc:	4618      	mov	r0, r3
 81160fe:	370c      	adds	r7, #12
 8116100:	46bd      	mov	sp, r7
 8116102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116106:	4770      	bx	lr
 8116108:	100087d4 	.word	0x100087d4

0811610c <_write>:

int _write(int fd, char *ptr, int len) {
 811610c:	b580      	push	{r7, lr}
 811610e:	b086      	sub	sp, #24
 8116110:	af00      	add	r7, sp, #0
 8116112:	60f8      	str	r0, [r7, #12]
 8116114:	60b9      	str	r1, [r7, #8]
 8116116:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8116118:	68fb      	ldr	r3, [r7, #12]
 811611a:	2b01      	cmp	r3, #1
 811611c:	d002      	beq.n	8116124 <_write+0x18>
 811611e:	68fb      	ldr	r3, [r7, #12]
 8116120:	2b02      	cmp	r3, #2
 8116122:	d111      	bne.n	8116148 <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8116124:	4b0d      	ldr	r3, [pc, #52]	; (811615c <_write+0x50>)
 8116126:	6818      	ldr	r0, [r3, #0]
 8116128:	687b      	ldr	r3, [r7, #4]
 811612a:	b29a      	uxth	r2, r3
 811612c:	f04f 33ff 	mov.w	r3, #4294967295
 8116130:	68b9      	ldr	r1, [r7, #8]
 8116132:	f7f5 f893 	bl	810b25c <HAL_UART_Transmit>
 8116136:	4603      	mov	r3, r0
 8116138:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 811613a:	7dfb      	ldrb	r3, [r7, #23]
 811613c:	2b00      	cmp	r3, #0
 811613e:	d101      	bne.n	8116144 <_write+0x38>
			return len;
 8116140:	687b      	ldr	r3, [r7, #4]
 8116142:	e006      	b.n	8116152 <_write+0x46>
		else
			return EIO;
 8116144:	2305      	movs	r3, #5
 8116146:	e004      	b.n	8116152 <_write+0x46>
	}
	errno = EBADF;
 8116148:	4b05      	ldr	r3, [pc, #20]	; (8116160 <_write+0x54>)
 811614a:	2209      	movs	r2, #9
 811614c:	601a      	str	r2, [r3, #0]
	return -1;
 811614e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8116152:	4618      	mov	r0, r3
 8116154:	3718      	adds	r7, #24
 8116156:	46bd      	mov	sp, r7
 8116158:	bd80      	pop	{r7, pc}
 811615a:	bf00      	nop
 811615c:	10008d20 	.word	0x10008d20
 8116160:	100087d4 	.word	0x100087d4

08116164 <_close>:

int _close(int fd) {
 8116164:	b480      	push	{r7}
 8116166:	b083      	sub	sp, #12
 8116168:	af00      	add	r7, sp, #0
 811616a:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 811616c:	687b      	ldr	r3, [r7, #4]
 811616e:	2b00      	cmp	r3, #0
 8116170:	db04      	blt.n	811617c <_close+0x18>
 8116172:	687b      	ldr	r3, [r7, #4]
 8116174:	2b02      	cmp	r3, #2
 8116176:	dc01      	bgt.n	811617c <_close+0x18>
		return 0;
 8116178:	2300      	movs	r3, #0
 811617a:	e004      	b.n	8116186 <_close+0x22>

	errno = EBADF;
 811617c:	4b05      	ldr	r3, [pc, #20]	; (8116194 <_close+0x30>)
 811617e:	2209      	movs	r2, #9
 8116180:	601a      	str	r2, [r3, #0]
	return -1;
 8116182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8116186:	4618      	mov	r0, r3
 8116188:	370c      	adds	r7, #12
 811618a:	46bd      	mov	sp, r7
 811618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116190:	4770      	bx	lr
 8116192:	bf00      	nop
 8116194:	100087d4 	.word	0x100087d4

08116198 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8116198:	b480      	push	{r7}
 811619a:	b085      	sub	sp, #20
 811619c:	af00      	add	r7, sp, #0
 811619e:	60f8      	str	r0, [r7, #12]
 81161a0:	60b9      	str	r1, [r7, #8]
 81161a2:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 81161a4:	4b05      	ldr	r3, [pc, #20]	; (81161bc <_lseek+0x24>)
 81161a6:	2209      	movs	r2, #9
 81161a8:	601a      	str	r2, [r3, #0]
	return -1;
 81161aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 81161ae:	4618      	mov	r0, r3
 81161b0:	3714      	adds	r7, #20
 81161b2:	46bd      	mov	sp, r7
 81161b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81161b8:	4770      	bx	lr
 81161ba:	bf00      	nop
 81161bc:	100087d4 	.word	0x100087d4

081161c0 <_read>:

int _read(int fd, char *ptr, int len) {
 81161c0:	b580      	push	{r7, lr}
 81161c2:	b086      	sub	sp, #24
 81161c4:	af00      	add	r7, sp, #0
 81161c6:	60f8      	str	r0, [r7, #12]
 81161c8:	60b9      	str	r1, [r7, #8]
 81161ca:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 81161cc:	68fb      	ldr	r3, [r7, #12]
 81161ce:	2b00      	cmp	r3, #0
 81161d0:	d110      	bne.n	81161f4 <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 81161d2:	4b0d      	ldr	r3, [pc, #52]	; (8116208 <_read+0x48>)
 81161d4:	6818      	ldr	r0, [r3, #0]
 81161d6:	f04f 33ff 	mov.w	r3, #4294967295
 81161da:	2201      	movs	r2, #1
 81161dc:	68b9      	ldr	r1, [r7, #8]
 81161de:	f7f5 f8d3 	bl	810b388 <HAL_UART_Receive>
 81161e2:	4603      	mov	r3, r0
 81161e4:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 81161e6:	7dfb      	ldrb	r3, [r7, #23]
 81161e8:	2b00      	cmp	r3, #0
 81161ea:	d101      	bne.n	81161f0 <_read+0x30>
			return 1;
 81161ec:	2301      	movs	r3, #1
 81161ee:	e006      	b.n	81161fe <_read+0x3e>
		else
			return EIO;
 81161f0:	2305      	movs	r3, #5
 81161f2:	e004      	b.n	81161fe <_read+0x3e>
	}
	errno = EBADF;
 81161f4:	4b05      	ldr	r3, [pc, #20]	; (811620c <_read+0x4c>)
 81161f6:	2209      	movs	r2, #9
 81161f8:	601a      	str	r2, [r3, #0]
	return -1;
 81161fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 81161fe:	4618      	mov	r0, r3
 8116200:	3718      	adds	r7, #24
 8116202:	46bd      	mov	sp, r7
 8116204:	bd80      	pop	{r7, pc}
 8116206:	bf00      	nop
 8116208:	10008d20 	.word	0x10008d20
 811620c:	100087d4 	.word	0x100087d4

08116210 <_fstat>:

int _fstat(int fd, struct stat *st) {
 8116210:	b480      	push	{r7}
 8116212:	b083      	sub	sp, #12
 8116214:	af00      	add	r7, sp, #0
 8116216:	6078      	str	r0, [r7, #4]
 8116218:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 811621a:	687b      	ldr	r3, [r7, #4]
 811621c:	2b00      	cmp	r3, #0
 811621e:	db08      	blt.n	8116232 <_fstat+0x22>
 8116220:	687b      	ldr	r3, [r7, #4]
 8116222:	2b02      	cmp	r3, #2
 8116224:	dc05      	bgt.n	8116232 <_fstat+0x22>
		st->st_mode = S_IFCHR;
 8116226:	683b      	ldr	r3, [r7, #0]
 8116228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 811622c:	605a      	str	r2, [r3, #4]
		return 0;
 811622e:	2300      	movs	r3, #0
 8116230:	e003      	b.n	811623a <_fstat+0x2a>
	}

	errno = EBADF;
 8116232:	4b05      	ldr	r3, [pc, #20]	; (8116248 <_fstat+0x38>)
 8116234:	2209      	movs	r2, #9
 8116236:	601a      	str	r2, [r3, #0]
	return 0;
 8116238:	2300      	movs	r3, #0
}
 811623a:	4618      	mov	r0, r3
 811623c:	370c      	adds	r7, #12
 811623e:	46bd      	mov	sp, r7
 8116240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116244:	4770      	bx	lr
 8116246:	bf00      	nop
 8116248:	100087d4 	.word	0x100087d4

0811624c <udp_receive_callback>:
uint8_t GATEWAY_ADDRESS[4];
ip_addr_t SERVER_ipaddr;


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 811624c:	b580      	push	{r7, lr}
 811624e:	b086      	sub	sp, #24
 8116250:	af00      	add	r7, sp, #0
 8116252:	60f8      	str	r0, [r7, #12]
 8116254:	60b9      	str	r1, [r7, #8]
 8116256:	607a      	str	r2, [r7, #4]
 8116258:	603b      	str	r3, [r7, #0]

	//Verify the data dimension
	int RX_COMMAND_LENGHT = (int) p->len;
 811625a:	687b      	ldr	r3, [r7, #4]
 811625c:	895b      	ldrh	r3, [r3, #10]
 811625e:	617b      	str	r3, [r7, #20]

	if (RX_COMMAND_LENGHT == 8)
 8116260:	697b      	ldr	r3, [r7, #20]
 8116262:	2b08      	cmp	r3, #8
 8116264:	d107      	bne.n	8116276 <udp_receive_callback+0x2a>
		/* Copy the data from the pbuf */
		strncpy(UDP_RX_BUFFER, (char*) p->payload, 8);
 8116266:	687b      	ldr	r3, [r7, #4]
 8116268:	685b      	ldr	r3, [r3, #4]
 811626a:	2208      	movs	r2, #8
 811626c:	4619      	mov	r1, r3
 811626e:	4807      	ldr	r0, [pc, #28]	; (811628c <udp_receive_callback+0x40>)
 8116270:	f001 fcfb 	bl	8117c6a <strncpy>
 8116274:	e003      	b.n	811627e <udp_receive_callback+0x32>

	else {
		printf("Command Lenght Error : %d \n", RX_COMMAND_LENGHT);
 8116276:	6979      	ldr	r1, [r7, #20]
 8116278:	4805      	ldr	r0, [pc, #20]	; (8116290 <udp_receive_callback+0x44>)
 811627a:	f001 faa5 	bl	81177c8 <iprintf>
	}
	/* Free receive pbuf */

	pbuf_free(p);
 811627e:	6878      	ldr	r0, [r7, #4]
 8116280:	f7fc fee0 	bl	8113044 <pbuf_free>
}
 8116284:	bf00      	nop
 8116286:	3718      	adds	r7, #24
 8116288:	46bd      	mov	sp, r7
 811628a:	bd80      	pop	{r7, pc}
 811628c:	10008d5c 	.word	0x10008d5c
 8116290:	0811b648 	.word	0x0811b648

08116294 <udpClient_send_spp>:

void udpClient_send_spp() {
 8116294:	b580      	push	{r7, lr}
 8116296:	b082      	sub	sp, #8
 8116298:	af00      	add	r7, sp, #0

	struct pbuf *txBuf;

	/* allocate pbuf from pool*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT, SPP_TM_len, PBUF_RAM);
 811629a:	4b14      	ldr	r3, [pc, #80]	; (81162ec <udpClient_send_spp+0x58>)
 811629c:	781b      	ldrb	r3, [r3, #0]
 811629e:	b29b      	uxth	r3, r3
 81162a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 81162a4:	4619      	mov	r1, r3
 81162a6:	2036      	movs	r0, #54	; 0x36
 81162a8:	f7fc fbea 	bl	8112a80 <pbuf_alloc>
 81162ac:	6078      	str	r0, [r7, #4]

	if (txBuf != NULL) {
 81162ae:	687b      	ldr	r3, [r7, #4]
 81162b0:	2b00      	cmp	r3, #0
 81162b2:	d016      	beq.n	81162e2 <udpClient_send_spp+0x4e>
		/* copy data to pbuf */
		pbuf_take(txBuf, &UDP_TX_BUFFER, SPP_TM_len);
 81162b4:	4b0d      	ldr	r3, [pc, #52]	; (81162ec <udpClient_send_spp+0x58>)
 81162b6:	781b      	ldrb	r3, [r3, #0]
 81162b8:	b29b      	uxth	r3, r3
 81162ba:	461a      	mov	r2, r3
 81162bc:	490c      	ldr	r1, [pc, #48]	; (81162f0 <udpClient_send_spp+0x5c>)
 81162be:	6878      	ldr	r0, [r7, #4]
 81162c0:	f7fd f8c6 	bl	8113450 <pbuf_take>

		/* send udp data */
		if ((udp_send(upcb, txBuf)) == ERR_OK) {
 81162c4:	4b0b      	ldr	r3, [pc, #44]	; (81162f4 <udpClient_send_spp+0x60>)
 81162c6:	681b      	ldr	r3, [r3, #0]
 81162c8:	6879      	ldr	r1, [r7, #4]
 81162ca:	4618      	mov	r0, r3
 81162cc:	f7fd fe88 	bl	8113fe0 <udp_send>
 81162d0:	4603      	mov	r3, r0
 81162d2:	2b00      	cmp	r3, #0
 81162d4:	d002      	beq.n	81162dc <udpClient_send_spp+0x48>
		} else
			printf("Error Sending UDP Packet\n");
 81162d6:	4808      	ldr	r0, [pc, #32]	; (81162f8 <udpClient_send_spp+0x64>)
 81162d8:	f001 fafc 	bl	81178d4 <puts>

		/* free pbuf */
		pbuf_free(txBuf);
 81162dc:	6878      	ldr	r0, [r7, #4]
 81162de:	f7fc feb1 	bl	8113044 <pbuf_free>
	}
}
 81162e2:	bf00      	nop
 81162e4:	3708      	adds	r7, #8
 81162e6:	46bd      	mov	sp, r7
 81162e8:	bd80      	pop	{r7, pc}
 81162ea:	bf00      	nop
 81162ec:	10005c30 	.word	0x10005c30
 81162f0:	10008d28 	.word	0x10008d28
 81162f4:	10008d24 	.word	0x10008d24
 81162f8:	0811b664 	.word	0x0811b664

081162fc <udpClient_connect>:

void udpClient_connect(void) {
 81162fc:	b580      	push	{r7, lr}
 81162fe:	af00      	add	r7, sp, #0

	//SERVER STATIC IP
	IP_ADDR4(&SERVER_ipaddr, 192, 168, 1, 100);
 8116300:	4b14      	ldr	r3, [pc, #80]	; (8116354 <udpClient_connect+0x58>)
 8116302:	4a15      	ldr	r2, [pc, #84]	; (8116358 <udpClient_connect+0x5c>)
 8116304:	601a      	str	r2, [r3, #0]
	//IP_ADDR4(&SERVER_ipaddr, 192, 168, 1, 103);

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8116306:	f7fe f96b 	bl	81145e0 <udp_new>
 811630a:	4603      	mov	r3, r0
 811630c:	4a13      	ldr	r2, [pc, #76]	; (811635c <udpClient_connect+0x60>)
 811630e:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */

	if (udp_bind(upcb, &ipaddr, 50000) == ERR_USE)
 8116310:	4b12      	ldr	r3, [pc, #72]	; (811635c <udpClient_connect+0x60>)
 8116312:	681b      	ldr	r3, [r3, #0]
 8116314:	f24c 3250 	movw	r2, #50000	; 0xc350
 8116318:	4911      	ldr	r1, [pc, #68]	; (8116360 <udpClient_connect+0x64>)
 811631a:	4618      	mov	r0, r3
 811631c:	f7fe f84a 	bl	81143b4 <udp_bind>
 8116320:	4603      	mov	r3, r0
 8116322:	f113 0f08 	cmn.w	r3, #8
 8116326:	d103      	bne.n	8116330 <udpClient_connect+0x34>
		printf("Error binding UDP1\n");
 8116328:	480e      	ldr	r0, [pc, #56]	; (8116364 <udpClient_connect+0x68>)
 811632a:	f001 fad3 	bl	81178d4 <puts>
 811632e:	e007      	b.n	8116340 <udpClient_connect+0x44>
	else
		//printf("UDP module bind on Port 50000 for Telemetry TX\n");

	/* configure destination IP address and port for telemetry server */
	udp_connect(upcb, &SERVER_ipaddr, 10015);
 8116330:	4b0a      	ldr	r3, [pc, #40]	; (811635c <udpClient_connect+0x60>)
 8116332:	681b      	ldr	r3, [r3, #0]
 8116334:	f242 721f 	movw	r2, #10015	; 0x271f
 8116338:	4906      	ldr	r1, [pc, #24]	; (8116354 <udpClient_connect+0x58>)
 811633a:	4618      	mov	r0, r3
 811633c:	f7fe f8c2 	bl	81144c4 <udp_connect>

	//register udp receiver callback on upcb2
	udp_recv(upcb, udp_receive_callback, NULL);
 8116340:	4b06      	ldr	r3, [pc, #24]	; (811635c <udpClient_connect+0x60>)
 8116342:	681b      	ldr	r3, [r3, #0]
 8116344:	2200      	movs	r2, #0
 8116346:	4908      	ldr	r1, [pc, #32]	; (8116368 <udpClient_connect+0x6c>)
 8116348:	4618      	mov	r0, r3
 811634a:	f7fe f929 	bl	81145a0 <udp_recv>

}
 811634e:	bf00      	nop
 8116350:	bd80      	pop	{r7, pc}
 8116352:	bf00      	nop
 8116354:	10008d90 	.word	0x10008d90
 8116358:	6401a8c0 	.word	0x6401a8c0
 811635c:	10008d24 	.word	0x10008d24
 8116360:	100089c4 	.word	0x100089c4
 8116364:	0811b680 	.word	0x0811b680
 8116368:	0811624d 	.word	0x0811624d

0811636c <pack_SPP_TM>:

	else {}

}

void pack_SPP_TM(space_packet tm_pkt) {
 811636c:	b084      	sub	sp, #16
 811636e:	b480      	push	{r7}
 8116370:	b083      	sub	sp, #12
 8116372:	af00      	add	r7, sp, #0
 8116374:	f107 0c10 	add.w	ip, r7, #16
 8116378:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//take data from space packet struct and put it in an ordered char buffer
	 //    TM_PKT --> UDP_TX_BUFFER
	 //calculate packet lenght from datalenght -> SPP_TM_len
	 SPP_TM_len = tm_pkt.pHdr.data_len + 6;// total lenght is size of data + size of primary hdr
 811637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811637e:	b2db      	uxtb	r3, r3
 8116380:	3306      	adds	r3, #6
 8116382:	b2da      	uxtb	r2, r3
 8116384:	4b1b      	ldr	r3, [pc, #108]	; (81163f4 <pack_SPP_TM+0x88>)
 8116386:	701a      	strb	r2, [r3, #0]

	 //copy pkt hdr into udp tx buffer
	 UDP_TX_BUFFER[0] = 0;
 8116388:	4b1b      	ldr	r3, [pc, #108]	; (81163f8 <pack_SPP_TM+0x8c>)
 811638a:	2200      	movs	r2, #0
 811638c:	701a      	strb	r2, [r3, #0]
	 UDP_TX_BUFFER[1] = 5;
 811638e:	4b1a      	ldr	r3, [pc, #104]	; (81163f8 <pack_SPP_TM+0x8c>)
 8116390:	2205      	movs	r2, #5
 8116392:	705a      	strb	r2, [r3, #1]
	 UDP_TX_BUFFER[2] = (3 << 6 | (tm_pkt.pHdr.seqCount >> 4));
 8116394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116396:	091b      	lsrs	r3, r3, #4
 8116398:	b2db      	uxtb	r3, r3
 811639a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 811639e:	b2da      	uxtb	r2, r3
 81163a0:	4b15      	ldr	r3, [pc, #84]	; (81163f8 <pack_SPP_TM+0x8c>)
 81163a2:	709a      	strb	r2, [r3, #2]
	 UDP_TX_BUFFER[3] =  (tm_pkt.pHdr.seqCount) << 8;
 81163a4:	4b14      	ldr	r3, [pc, #80]	; (81163f8 <pack_SPP_TM+0x8c>)
 81163a6:	2200      	movs	r2, #0
 81163a8:	70da      	strb	r2, [r3, #3]
	 UDP_TX_BUFFER[4] = 0;
 81163aa:	4b13      	ldr	r3, [pc, #76]	; (81163f8 <pack_SPP_TM+0x8c>)
 81163ac:	2200      	movs	r2, #0
 81163ae:	711a      	strb	r2, [r3, #4]
	 UDP_TX_BUFFER[5] = tm_pkt.pHdr.data_len;
 81163b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81163b2:	b2da      	uxtb	r2, r3
 81163b4:	4b10      	ldr	r3, [pc, #64]	; (81163f8 <pack_SPP_TM+0x8c>)
 81163b6:	715a      	strb	r2, [r3, #5]

	 for(int j = 6; j < tm_pkt.pHdr.data_len + 6; j++) {
 81163b8:	2306      	movs	r3, #6
 81163ba:	607b      	str	r3, [r7, #4]
 81163bc:	e00d      	b.n	81163da <pack_SPP_TM+0x6e>
		 UDP_TX_BUFFER[j] = tm_pkt.data[j - 6];
 81163be:	687b      	ldr	r3, [r7, #4]
 81163c0:	3b06      	subs	r3, #6
 81163c2:	f107 0210 	add.w	r2, r7, #16
 81163c6:	4413      	add	r3, r2
 81163c8:	7f19      	ldrb	r1, [r3, #28]
 81163ca:	4a0b      	ldr	r2, [pc, #44]	; (81163f8 <pack_SPP_TM+0x8c>)
 81163cc:	687b      	ldr	r3, [r7, #4]
 81163ce:	4413      	add	r3, r2
 81163d0:	460a      	mov	r2, r1
 81163d2:	701a      	strb	r2, [r3, #0]
	 for(int j = 6; j < tm_pkt.pHdr.data_len + 6; j++) {
 81163d4:	687b      	ldr	r3, [r7, #4]
 81163d6:	3301      	adds	r3, #1
 81163d8:	607b      	str	r3, [r7, #4]
 81163da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81163dc:	1d9a      	adds	r2, r3, #6
 81163de:	687b      	ldr	r3, [r7, #4]
 81163e0:	429a      	cmp	r2, r3
 81163e2:	d8ec      	bhi.n	81163be <pack_SPP_TM+0x52>
	 }
}
 81163e4:	bf00      	nop
 81163e6:	bf00      	nop
 81163e8:	370c      	adds	r7, #12
 81163ea:	46bd      	mov	sp, r7
 81163ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81163f0:	b004      	add	sp, #16
 81163f2:	4770      	bx	lr
 81163f4:	10005c30 	.word	0x10005c30
 81163f8:	10008d28 	.word	0x10008d28

081163fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81163fc:	b580      	push	{r7, lr}
 81163fe:	b082      	sub	sp, #8
 8116400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8116402:	4b0c      	ldr	r3, [pc, #48]	; (8116434 <HAL_MspInit+0x38>)
 8116404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8116408:	4a0a      	ldr	r2, [pc, #40]	; (8116434 <HAL_MspInit+0x38>)
 811640a:	f043 0302 	orr.w	r3, r3, #2
 811640e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8116412:	4b08      	ldr	r3, [pc, #32]	; (8116434 <HAL_MspInit+0x38>)
 8116414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8116418:	f003 0302 	and.w	r3, r3, #2
 811641c:	607b      	str	r3, [r7, #4]
 811641e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8116420:	2200      	movs	r2, #0
 8116422:	210f      	movs	r1, #15
 8116424:	f06f 0001 	mvn.w	r0, #1
 8116428:	f7ec fd12 	bl	8102e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 811642c:	bf00      	nop
 811642e:	3708      	adds	r7, #8
 8116430:	46bd      	mov	sp, r7
 8116432:	bd80      	pop	{r7, pc}
 8116434:	58024400 	.word	0x58024400

08116438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8116438:	b580      	push	{r7, lr}
 811643a:	b0bc      	sub	sp, #240	; 0xf0
 811643c:	af00      	add	r7, sp, #0
 811643e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8116440:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8116444:	2200      	movs	r2, #0
 8116446:	601a      	str	r2, [r3, #0]
 8116448:	605a      	str	r2, [r3, #4]
 811644a:	609a      	str	r2, [r3, #8]
 811644c:	60da      	str	r2, [r3, #12]
 811644e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8116450:	f107 0320 	add.w	r3, r7, #32
 8116454:	22bc      	movs	r2, #188	; 0xbc
 8116456:	2100      	movs	r1, #0
 8116458:	4618      	mov	r0, r3
 811645a:	f000 fce8 	bl	8116e2e <memset>
  if(hadc->Instance==ADC1)
 811645e:	687b      	ldr	r3, [r7, #4]
 8116460:	681b      	ldr	r3, [r3, #0]
 8116462:	4a71      	ldr	r2, [pc, #452]	; (8116628 <HAL_ADC_MspInit+0x1f0>)
 8116464:	4293      	cmp	r3, r2
 8116466:	f040 80da 	bne.w	811661e <HAL_ADC_MspInit+0x1e6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 811646a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 811646e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8116470:	2301      	movs	r3, #1
 8116472:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8116474:	2312      	movs	r3, #18
 8116476:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8116478:	2302      	movs	r3, #2
 811647a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 811647c:	2302      	movs	r3, #2
 811647e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8116480:	2302      	movs	r3, #2
 8116482:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8116484:	23c0      	movs	r3, #192	; 0xc0
 8116486:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8116488:	2320      	movs	r3, #32
 811648a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 811648c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8116490:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8116492:	2300      	movs	r3, #0
 8116494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8116498:	f107 0320 	add.w	r3, r7, #32
 811649c:	4618      	mov	r0, r3
 811649e:	f7f1 fae7 	bl	8107a70 <HAL_RCCEx_PeriphCLKConfig>
 81164a2:	4603      	mov	r3, r0
 81164a4:	2b00      	cmp	r3, #0
 81164a6:	d001      	beq.n	81164ac <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 81164a8:	f7ff fdf6 	bl	8116098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81164ac:	4b5f      	ldr	r3, [pc, #380]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81164b2:	4a5e      	ldr	r2, [pc, #376]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164b4:	f043 0320 	orr.w	r3, r3, #32
 81164b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81164bc:	4b5b      	ldr	r3, [pc, #364]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81164c2:	f003 0320 	and.w	r3, r3, #32
 81164c6:	61fb      	str	r3, [r7, #28]
 81164c8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81164ca:	4b58      	ldr	r3, [pc, #352]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81164d0:	4a56      	ldr	r2, [pc, #344]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164d2:	f043 0304 	orr.w	r3, r3, #4
 81164d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81164da:	4b54      	ldr	r3, [pc, #336]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81164e0:	f003 0304 	and.w	r3, r3, #4
 81164e4:	61bb      	str	r3, [r7, #24]
 81164e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81164e8:	4b50      	ldr	r3, [pc, #320]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81164ee:	4a4f      	ldr	r2, [pc, #316]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164f0:	f043 0301 	orr.w	r3, r3, #1
 81164f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81164f8:	4b4c      	ldr	r3, [pc, #304]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 81164fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81164fe:	f003 0301 	and.w	r3, r3, #1
 8116502:	617b      	str	r3, [r7, #20]
 8116504:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8116506:	4b49      	ldr	r3, [pc, #292]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 8116508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811650c:	4a47      	ldr	r2, [pc, #284]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 811650e:	f043 0302 	orr.w	r3, r3, #2
 8116512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8116516:	4b45      	ldr	r3, [pc, #276]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 8116518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811651c:	f003 0302 	and.w	r3, r3, #2
 8116520:	613b      	str	r3, [r7, #16]
 8116522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8116524:	4b41      	ldr	r3, [pc, #260]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 8116526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811652a:	4a40      	ldr	r2, [pc, #256]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 811652c:	f043 0320 	orr.w	r3, r3, #32
 8116530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8116534:	4b3d      	ldr	r3, [pc, #244]	; (811662c <HAL_ADC_MspInit+0x1f4>)
 8116536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811653a:	f003 0320 	and.w	r3, r3, #32
 811653e:	60fb      	str	r3, [r7, #12]
 8116540:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_INP19
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8116542:	2301      	movs	r3, #1
 8116544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8116548:	2303      	movs	r3, #3
 811654a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 811654e:	2300      	movs	r3, #0
 8116550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8116554:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8116558:	4619      	mov	r1, r3
 811655a:	4835      	ldr	r0, [pc, #212]	; (8116630 <HAL_ADC_MspInit+0x1f8>)
 811655c:	f7f0 fc4a 	bl	8106df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8116560:	2379      	movs	r3, #121	; 0x79
 8116562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8116566:	2303      	movs	r3, #3
 8116568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 811656c:	2300      	movs	r3, #0
 811656e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8116572:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8116576:	4619      	mov	r1, r3
 8116578:	482e      	ldr	r0, [pc, #184]	; (8116634 <HAL_ADC_MspInit+0x1fc>)
 811657a:	f7f0 fc3b 	bl	8106df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 811657e:	2302      	movs	r3, #2
 8116580:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8116584:	2303      	movs	r3, #3
 8116586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 811658a:	2300      	movs	r3, #0
 811658c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8116590:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8116594:	4619      	mov	r1, r3
 8116596:	4828      	ldr	r0, [pc, #160]	; (8116638 <HAL_ADC_MspInit+0x200>)
 8116598:	f7f0 fc2c 	bl	8106df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 811659c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81165a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81165a4:	2303      	movs	r3, #3
 81165a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81165aa:	2300      	movs	r3, #0
 81165ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81165b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81165b4:	4619      	mov	r1, r3
 81165b6:	4821      	ldr	r0, [pc, #132]	; (811663c <HAL_ADC_MspInit+0x204>)
 81165b8:	f7f0 fc1c 	bl	8106df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 81165bc:	4b20      	ldr	r3, [pc, #128]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165be:	4a21      	ldr	r2, [pc, #132]	; (8116644 <HAL_ADC_MspInit+0x20c>)
 81165c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 81165c2:	4b1f      	ldr	r3, [pc, #124]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165c4:	2209      	movs	r2, #9
 81165c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81165c8:	4b1d      	ldr	r3, [pc, #116]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165ca:	2200      	movs	r2, #0
 81165cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 81165ce:	4b1c      	ldr	r3, [pc, #112]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165d0:	2200      	movs	r2, #0
 81165d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 81165d4:	4b1a      	ldr	r3, [pc, #104]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81165da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 81165dc:	4b18      	ldr	r3, [pc, #96]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81165e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 81165e4:	4b16      	ldr	r3, [pc, #88]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81165ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 81165ec:	4b14      	ldr	r3, [pc, #80]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 81165f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 81165f4:	4b12      	ldr	r3, [pc, #72]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81165fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81165fc:	4b10      	ldr	r3, [pc, #64]	; (8116640 <HAL_ADC_MspInit+0x208>)
 81165fe:	2200      	movs	r2, #0
 8116600:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8116602:	480f      	ldr	r0, [pc, #60]	; (8116640 <HAL_ADC_MspInit+0x208>)
 8116604:	f7ec fc60 	bl	8102ec8 <HAL_DMA_Init>
 8116608:	4603      	mov	r3, r0
 811660a:	2b00      	cmp	r3, #0
 811660c:	d001      	beq.n	8116612 <HAL_ADC_MspInit+0x1da>
    {
      Error_Handler();
 811660e:	f7ff fd43 	bl	8116098 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8116612:	687b      	ldr	r3, [r7, #4]
 8116614:	4a0a      	ldr	r2, [pc, #40]	; (8116640 <HAL_ADC_MspInit+0x208>)
 8116616:	64da      	str	r2, [r3, #76]	; 0x4c
 8116618:	4a09      	ldr	r2, [pc, #36]	; (8116640 <HAL_ADC_MspInit+0x208>)
 811661a:	687b      	ldr	r3, [r7, #4]
 811661c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 811661e:	bf00      	nop
 8116620:	37f0      	adds	r7, #240	; 0xf0
 8116622:	46bd      	mov	sp, r7
 8116624:	bd80      	pop	{r7, pc}
 8116626:	bf00      	nop
 8116628:	40022000 	.word	0x40022000
 811662c:	58024400 	.word	0x58024400
 8116630:	58020800 	.word	0x58020800
 8116634:	58020000 	.word	0x58020000
 8116638:	58020400 	.word	0x58020400
 811663c:	58021400 	.word	0x58021400
 8116640:	10008c14 	.word	0x10008c14
 8116644:	40020410 	.word	0x40020410

08116648 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8116648:	b580      	push	{r7, lr}
 811664a:	b0ba      	sub	sp, #232	; 0xe8
 811664c:	af00      	add	r7, sp, #0
 811664e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8116650:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8116654:	2200      	movs	r2, #0
 8116656:	601a      	str	r2, [r3, #0]
 8116658:	605a      	str	r2, [r3, #4]
 811665a:	609a      	str	r2, [r3, #8]
 811665c:	60da      	str	r2, [r3, #12]
 811665e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8116660:	f107 0318 	add.w	r3, r7, #24
 8116664:	22bc      	movs	r2, #188	; 0xbc
 8116666:	2100      	movs	r1, #0
 8116668:	4618      	mov	r0, r3
 811666a:	f000 fbe0 	bl	8116e2e <memset>
  if(hlptim->Instance==LPTIM1)
 811666e:	687b      	ldr	r3, [r7, #4]
 8116670:	681b      	ldr	r3, [r3, #0]
 8116672:	4a51      	ldr	r2, [pc, #324]	; (81167b8 <HAL_LPTIM_MspInit+0x170>)
 8116674:	4293      	cmp	r3, r2
 8116676:	d14b      	bne.n	8116710 <HAL_LPTIM_MspInit+0xc8>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8116678:	2320      	movs	r3, #32
 811667a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 811667c:	2300      	movs	r3, #0
 811667e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8116682:	f107 0318 	add.w	r3, r7, #24
 8116686:	4618      	mov	r0, r3
 8116688:	f7f1 f9f2 	bl	8107a70 <HAL_RCCEx_PeriphCLKConfig>
 811668c:	4603      	mov	r3, r0
 811668e:	2b00      	cmp	r3, #0
 8116690:	d001      	beq.n	8116696 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8116692:	f7ff fd01 	bl	8116098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8116696:	4b49      	ldr	r3, [pc, #292]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 8116698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 811669c:	4a47      	ldr	r2, [pc, #284]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 811669e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81166a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81166a6:	4b45      	ldr	r3, [pc, #276]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 81166a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81166ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81166b0:	617b      	str	r3, [r7, #20]
 81166b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81166b4:	4b41      	ldr	r3, [pc, #260]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 81166b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81166ba:	4a40      	ldr	r2, [pc, #256]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 81166bc:	f043 0308 	orr.w	r3, r3, #8
 81166c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81166c4:	4b3d      	ldr	r3, [pc, #244]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 81166c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81166ca:	f003 0308 	and.w	r3, r3, #8
 81166ce:	613b      	str	r3, [r7, #16]
 81166d0:	693b      	ldr	r3, [r7, #16]
    /**LPTIM1 GPIO Configuration
    PD12     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 81166d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81166d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81166da:	2302      	movs	r3, #2
 81166dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81166e0:	2300      	movs	r3, #0
 81166e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81166e6:	2300      	movs	r3, #0
 81166e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 81166ec:	2301      	movs	r3, #1
 81166ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81166f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81166f6:	4619      	mov	r1, r3
 81166f8:	4831      	ldr	r0, [pc, #196]	; (81167c0 <HAL_LPTIM_MspInit+0x178>)
 81166fa:	f7f0 fb7b 	bl	8106df4 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 81166fe:	2200      	movs	r2, #0
 8116700:	2105      	movs	r1, #5
 8116702:	205d      	movs	r0, #93	; 0x5d
 8116704:	f7ec fba4 	bl	8102e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8116708:	205d      	movs	r0, #93	; 0x5d
 811670a:	f7ec fbbb 	bl	8102e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 811670e:	e04f      	b.n	81167b0 <HAL_LPTIM_MspInit+0x168>
  else if(hlptim->Instance==LPTIM2)
 8116710:	687b      	ldr	r3, [r7, #4]
 8116712:	681b      	ldr	r3, [r3, #0]
 8116714:	4a2b      	ldr	r2, [pc, #172]	; (81167c4 <HAL_LPTIM_MspInit+0x17c>)
 8116716:	4293      	cmp	r3, r2
 8116718:	d14a      	bne.n	81167b0 <HAL_LPTIM_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 811671a:	2340      	movs	r3, #64	; 0x40
 811671c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 811671e:	2300      	movs	r3, #0
 8116720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8116724:	f107 0318 	add.w	r3, r7, #24
 8116728:	4618      	mov	r0, r3
 811672a:	f7f1 f9a1 	bl	8107a70 <HAL_RCCEx_PeriphCLKConfig>
 811672e:	4603      	mov	r3, r0
 8116730:	2b00      	cmp	r3, #0
 8116732:	d001      	beq.n	8116738 <HAL_LPTIM_MspInit+0xf0>
      Error_Handler();
 8116734:	f7ff fcb0 	bl	8116098 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8116738:	4b20      	ldr	r3, [pc, #128]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 811673a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 811673e:	4a1f      	ldr	r2, [pc, #124]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 8116740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8116744:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8116748:	4b1c      	ldr	r3, [pc, #112]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 811674a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 811674e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8116752:	60fb      	str	r3, [r7, #12]
 8116754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8116756:	4b19      	ldr	r3, [pc, #100]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 8116758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811675c:	4a17      	ldr	r2, [pc, #92]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 811675e:	f043 0302 	orr.w	r3, r3, #2
 8116762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8116766:	4b15      	ldr	r3, [pc, #84]	; (81167bc <HAL_LPTIM_MspInit+0x174>)
 8116768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 811676c:	f003 0302 	and.w	r3, r3, #2
 8116770:	60bb      	str	r3, [r7, #8]
 8116772:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8116774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8116778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 811677c:	2302      	movs	r3, #2
 811677e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8116782:	2300      	movs	r3, #0
 8116784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8116788:	2300      	movs	r3, #0
 811678a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 811678e:	2303      	movs	r3, #3
 8116790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8116794:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8116798:	4619      	mov	r1, r3
 811679a:	480b      	ldr	r0, [pc, #44]	; (81167c8 <HAL_LPTIM_MspInit+0x180>)
 811679c:	f7f0 fb2a 	bl	8106df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 5, 0);
 81167a0:	2200      	movs	r2, #0
 81167a2:	2105      	movs	r1, #5
 81167a4:	208a      	movs	r0, #138	; 0x8a
 81167a6:	f7ec fb53 	bl	8102e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 81167aa:	208a      	movs	r0, #138	; 0x8a
 81167ac:	f7ec fb6a 	bl	8102e84 <HAL_NVIC_EnableIRQ>
}
 81167b0:	bf00      	nop
 81167b2:	37e8      	adds	r7, #232	; 0xe8
 81167b4:	46bd      	mov	sp, r7
 81167b6:	bd80      	pop	{r7, pc}
 81167b8:	40002400 	.word	0x40002400
 81167bc:	58024400 	.word	0x58024400
 81167c0:	58020c00 	.word	0x58020c00
 81167c4:	58002400 	.word	0x58002400
 81167c8:	58020400 	.word	0x58020400

081167cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81167cc:	b580      	push	{r7, lr}
 81167ce:	b086      	sub	sp, #24
 81167d0:	af00      	add	r7, sp, #0
 81167d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 81167d4:	687b      	ldr	r3, [r7, #4]
 81167d6:	681b      	ldr	r3, [r3, #0]
 81167d8:	4a27      	ldr	r2, [pc, #156]	; (8116878 <HAL_TIM_Base_MspInit+0xac>)
 81167da:	4293      	cmp	r3, r2
 81167dc:	d117      	bne.n	811680e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 81167de:	4b27      	ldr	r3, [pc, #156]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 81167e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81167e4:	4a25      	ldr	r2, [pc, #148]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 81167e6:	f043 0302 	orr.w	r3, r3, #2
 81167ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81167ee:	4b23      	ldr	r3, [pc, #140]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 81167f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81167f4:	f003 0302 	and.w	r3, r3, #2
 81167f8:	617b      	str	r3, [r7, #20]
 81167fa:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 81167fc:	2200      	movs	r2, #0
 81167fe:	2105      	movs	r1, #5
 8116800:	202c      	movs	r0, #44	; 0x2c
 8116802:	f7ec fb25 	bl	8102e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8116806:	202c      	movs	r0, #44	; 0x2c
 8116808:	f7ec fb3c 	bl	8102e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 811680c:	e030      	b.n	8116870 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM15)
 811680e:	687b      	ldr	r3, [r7, #4]
 8116810:	681b      	ldr	r3, [r3, #0]
 8116812:	4a1b      	ldr	r2, [pc, #108]	; (8116880 <HAL_TIM_Base_MspInit+0xb4>)
 8116814:	4293      	cmp	r3, r2
 8116816:	d10f      	bne.n	8116838 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8116818:	4b18      	ldr	r3, [pc, #96]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 811681a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 811681e:	4a17      	ldr	r2, [pc, #92]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 8116820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8116824:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8116828:	4b14      	ldr	r3, [pc, #80]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 811682a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 811682e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8116832:	613b      	str	r3, [r7, #16]
 8116834:	693b      	ldr	r3, [r7, #16]
}
 8116836:	e01b      	b.n	8116870 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8116838:	687b      	ldr	r3, [r7, #4]
 811683a:	681b      	ldr	r3, [r3, #0]
 811683c:	4a11      	ldr	r2, [pc, #68]	; (8116884 <HAL_TIM_Base_MspInit+0xb8>)
 811683e:	4293      	cmp	r3, r2
 8116840:	d116      	bne.n	8116870 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8116842:	4b0e      	ldr	r3, [pc, #56]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 8116844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8116848:	4a0c      	ldr	r2, [pc, #48]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 811684a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 811684e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8116852:	4b0a      	ldr	r3, [pc, #40]	; (811687c <HAL_TIM_Base_MspInit+0xb0>)
 8116854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8116858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 811685c:	60fb      	str	r3, [r7, #12]
 811685e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 8116860:	2200      	movs	r2, #0
 8116862:	2105      	movs	r1, #5
 8116864:	2075      	movs	r0, #117	; 0x75
 8116866:	f7ec faf3 	bl	8102e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 811686a:	2075      	movs	r0, #117	; 0x75
 811686c:	f7ec fb0a 	bl	8102e84 <HAL_NVIC_EnableIRQ>
}
 8116870:	bf00      	nop
 8116872:	3718      	adds	r7, #24
 8116874:	46bd      	mov	sp, r7
 8116876:	bd80      	pop	{r7, pc}
 8116878:	40010400 	.word	0x40010400
 811687c:	58024400 	.word	0x58024400
 8116880:	40014000 	.word	0x40014000
 8116884:	40014400 	.word	0x40014400

08116888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8116888:	b580      	push	{r7, lr}
 811688a:	b088      	sub	sp, #32
 811688c:	af00      	add	r7, sp, #0
 811688e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8116890:	f107 030c 	add.w	r3, r7, #12
 8116894:	2200      	movs	r2, #0
 8116896:	601a      	str	r2, [r3, #0]
 8116898:	605a      	str	r2, [r3, #4]
 811689a:	609a      	str	r2, [r3, #8]
 811689c:	60da      	str	r2, [r3, #12]
 811689e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 81168a0:	687b      	ldr	r3, [r7, #4]
 81168a2:	681b      	ldr	r3, [r3, #0]
 81168a4:	4a13      	ldr	r2, [pc, #76]	; (81168f4 <HAL_TIM_MspPostInit+0x6c>)
 81168a6:	4293      	cmp	r3, r2
 81168a8:	d11f      	bne.n	81168ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81168aa:	4b13      	ldr	r3, [pc, #76]	; (81168f8 <HAL_TIM_MspPostInit+0x70>)
 81168ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81168b0:	4a11      	ldr	r2, [pc, #68]	; (81168f8 <HAL_TIM_MspPostInit+0x70>)
 81168b2:	f043 0304 	orr.w	r3, r3, #4
 81168b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81168ba:	4b0f      	ldr	r3, [pc, #60]	; (81168f8 <HAL_TIM_MspPostInit+0x70>)
 81168bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81168c0:	f003 0304 	and.w	r3, r3, #4
 81168c4:	60bb      	str	r3, [r7, #8]
 81168c6:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 81168c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 81168cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81168ce:	2302      	movs	r3, #2
 81168d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81168d2:	2300      	movs	r3, #0
 81168d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81168d6:	2300      	movs	r3, #0
 81168d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 81168da:	2303      	movs	r3, #3
 81168dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81168de:	f107 030c 	add.w	r3, r7, #12
 81168e2:	4619      	mov	r1, r3
 81168e4:	4805      	ldr	r0, [pc, #20]	; (81168fc <HAL_TIM_MspPostInit+0x74>)
 81168e6:	f7f0 fa85 	bl	8106df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 81168ea:	bf00      	nop
 81168ec:	3720      	adds	r7, #32
 81168ee:	46bd      	mov	sp, r7
 81168f0:	bd80      	pop	{r7, pc}
 81168f2:	bf00      	nop
 81168f4:	40010400 	.word	0x40010400
 81168f8:	58024400 	.word	0x58024400
 81168fc:	58020800 	.word	0x58020800

08116900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8116900:	b580      	push	{r7, lr}
 8116902:	b0b2      	sub	sp, #200	; 0xc8
 8116904:	af00      	add	r7, sp, #0
 8116906:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8116908:	f107 030c 	add.w	r3, r7, #12
 811690c:	22bc      	movs	r2, #188	; 0xbc
 811690e:	2100      	movs	r1, #0
 8116910:	4618      	mov	r0, r3
 8116912:	f000 fa8c 	bl	8116e2e <memset>
  if(huart->Instance==USART3)
 8116916:	687b      	ldr	r3, [r7, #4]
 8116918:	681b      	ldr	r3, [r3, #0]
 811691a:	4a12      	ldr	r2, [pc, #72]	; (8116964 <HAL_UART_MspInit+0x64>)
 811691c:	4293      	cmp	r3, r2
 811691e:	d11d      	bne.n	811695c <HAL_UART_MspInit+0x5c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8116920:	2302      	movs	r3, #2
 8116922:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8116924:	2300      	movs	r3, #0
 8116926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 811692a:	f107 030c 	add.w	r3, r7, #12
 811692e:	4618      	mov	r0, r3
 8116930:	f7f1 f89e 	bl	8107a70 <HAL_RCCEx_PeriphCLKConfig>
 8116934:	4603      	mov	r3, r0
 8116936:	2b00      	cmp	r3, #0
 8116938:	d001      	beq.n	811693e <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 811693a:	f7ff fbad 	bl	8116098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 811693e:	4b0a      	ldr	r3, [pc, #40]	; (8116968 <HAL_UART_MspInit+0x68>)
 8116940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8116944:	4a08      	ldr	r2, [pc, #32]	; (8116968 <HAL_UART_MspInit+0x68>)
 8116946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 811694a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 811694e:	4b06      	ldr	r3, [pc, #24]	; (8116968 <HAL_UART_MspInit+0x68>)
 8116950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8116954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8116958:	60bb      	str	r3, [r7, #8]
 811695a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 811695c:	bf00      	nop
 811695e:	37c8      	adds	r7, #200	; 0xc8
 8116960:	46bd      	mov	sp, r7
 8116962:	bd80      	pop	{r7, pc}
 8116964:	40004800 	.word	0x40004800
 8116968:	58024400 	.word	0x58024400

0811696c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 811696c:	b580      	push	{r7, lr}
 811696e:	b090      	sub	sp, #64	; 0x40
 8116970:	af00      	add	r7, sp, #0
 8116972:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8116974:	687b      	ldr	r3, [r7, #4]
 8116976:	2b0f      	cmp	r3, #15
 8116978:	d827      	bhi.n	81169ca <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 811697a:	2200      	movs	r2, #0
 811697c:	6879      	ldr	r1, [r7, #4]
 811697e:	201c      	movs	r0, #28
 8116980:	f7ec fa66 	bl	8102e50 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8116984:	201c      	movs	r0, #28
 8116986:	f7ec fa7d 	bl	8102e84 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 811698a:	4a29      	ldr	r2, [pc, #164]	; (8116a30 <HAL_InitTick+0xc4>)
 811698c:	687b      	ldr	r3, [r7, #4]
 811698e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8116990:	4b28      	ldr	r3, [pc, #160]	; (8116a34 <HAL_InitTick+0xc8>)
 8116992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8116996:	4a27      	ldr	r2, [pc, #156]	; (8116a34 <HAL_InitTick+0xc8>)
 8116998:	f043 0301 	orr.w	r3, r3, #1
 811699c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81169a0:	4b24      	ldr	r3, [pc, #144]	; (8116a34 <HAL_InitTick+0xc8>)
 81169a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81169a6:	f003 0301 	and.w	r3, r3, #1
 81169aa:	60fb      	str	r3, [r7, #12]
 81169ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81169ae:	f107 0210 	add.w	r2, r7, #16
 81169b2:	f107 0314 	add.w	r3, r7, #20
 81169b6:	4611      	mov	r1, r2
 81169b8:	4618      	mov	r0, r3
 81169ba:	f7f1 f817 	bl	81079ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81169be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81169c0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81169c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81169c4:	2b00      	cmp	r3, #0
 81169c6:	d106      	bne.n	81169d6 <HAL_InitTick+0x6a>
 81169c8:	e001      	b.n	81169ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 81169ca:	2301      	movs	r3, #1
 81169cc:	e02c      	b.n	8116a28 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81169ce:	f7f0 ffe1 	bl	8107994 <HAL_RCC_GetPCLK1Freq>
 81169d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 81169d4:	e004      	b.n	81169e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81169d6:	f7f0 ffdd 	bl	8107994 <HAL_RCC_GetPCLK1Freq>
 81169da:	4603      	mov	r3, r0
 81169dc:	005b      	lsls	r3, r3, #1
 81169de:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81169e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81169e2:	4a15      	ldr	r2, [pc, #84]	; (8116a38 <HAL_InitTick+0xcc>)
 81169e4:	fba2 2303 	umull	r2, r3, r2, r3
 81169e8:	0c9b      	lsrs	r3, r3, #18
 81169ea:	3b01      	subs	r3, #1
 81169ec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 81169ee:	4b13      	ldr	r3, [pc, #76]	; (8116a3c <HAL_InitTick+0xd0>)
 81169f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81169f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 81169f6:	4b11      	ldr	r3, [pc, #68]	; (8116a3c <HAL_InitTick+0xd0>)
 81169f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 81169fc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 81169fe:	4a0f      	ldr	r2, [pc, #60]	; (8116a3c <HAL_InitTick+0xd0>)
 8116a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8116a02:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8116a04:	4b0d      	ldr	r3, [pc, #52]	; (8116a3c <HAL_InitTick+0xd0>)
 8116a06:	2200      	movs	r2, #0
 8116a08:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8116a0a:	4b0c      	ldr	r3, [pc, #48]	; (8116a3c <HAL_InitTick+0xd0>)
 8116a0c:	2200      	movs	r2, #0
 8116a0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8116a10:	480a      	ldr	r0, [pc, #40]	; (8116a3c <HAL_InitTick+0xd0>)
 8116a12:	f7f3 f9b3 	bl	8109d7c <HAL_TIM_Base_Init>
 8116a16:	4603      	mov	r3, r0
 8116a18:	2b00      	cmp	r3, #0
 8116a1a:	d104      	bne.n	8116a26 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8116a1c:	4807      	ldr	r0, [pc, #28]	; (8116a3c <HAL_InitTick+0xd0>)
 8116a1e:	f7f3 fa75 	bl	8109f0c <HAL_TIM_Base_Start_IT>
 8116a22:	4603      	mov	r3, r0
 8116a24:	e000      	b.n	8116a28 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8116a26:	2301      	movs	r3, #1
}
 8116a28:	4618      	mov	r0, r3
 8116a2a:	3740      	adds	r7, #64	; 0x40
 8116a2c:	46bd      	mov	sp, r7
 8116a2e:	bd80      	pop	{r7, pc}
 8116a30:	10000008 	.word	0x10000008
 8116a34:	58024400 	.word	0x58024400
 8116a38:	431bde83 	.word	0x431bde83
 8116a3c:	10008d98 	.word	0x10008d98

08116a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8116a40:	b480      	push	{r7}
 8116a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8116a44:	e7fe      	b.n	8116a44 <NMI_Handler+0x4>

08116a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8116a46:	b480      	push	{r7}
 8116a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8116a4a:	e7fe      	b.n	8116a4a <HardFault_Handler+0x4>

08116a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8116a4c:	b480      	push	{r7}
 8116a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8116a50:	e7fe      	b.n	8116a50 <MemManage_Handler+0x4>

08116a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8116a52:	b480      	push	{r7}
 8116a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8116a56:	e7fe      	b.n	8116a56 <BusFault_Handler+0x4>

08116a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8116a58:	b480      	push	{r7}
 8116a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8116a5c:	e7fe      	b.n	8116a5c <UsageFault_Handler+0x4>

08116a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8116a5e:	b480      	push	{r7}
 8116a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8116a62:	bf00      	nop
 8116a64:	46bd      	mov	sp, r7
 8116a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116a6a:	4770      	bx	lr

08116a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8116a6c:	b580      	push	{r7, lr}
 8116a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8116a70:	4802      	ldr	r0, [pc, #8]	; (8116a7c <TIM2_IRQHandler+0x10>)
 8116a72:	f7f3 fb24 	bl	810a0be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8116a76:	bf00      	nop
 8116a78:	bd80      	pop	{r7, pc}
 8116a7a:	bf00      	nop
 8116a7c:	10008d98 	.word	0x10008d98

08116a80 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8116a80:	b580      	push	{r7, lr}
 8116a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8116a84:	4802      	ldr	r0, [pc, #8]	; (8116a90 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8116a86:	f7f3 fb1a 	bl	810a0be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8116a8a:	bf00      	nop
 8116a8c:	bd80      	pop	{r7, pc}
 8116a8e:	bf00      	nop
 8116a90:	100089fc 	.word	0x100089fc

08116a94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8116a94:	b580      	push	{r7, lr}
 8116a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8116a98:	4802      	ldr	r0, [pc, #8]	; (8116aa4 <DMA2_Stream0_IRQHandler+0x10>)
 8116a9a:	f7ec ffd9 	bl	8103a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8116a9e:	bf00      	nop
 8116aa0:	bd80      	pop	{r7, pc}
 8116aa2:	bf00      	nop
 8116aa4:	10008c14 	.word	0x10008c14

08116aa8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8116aa8:	b580      	push	{r7, lr}
 8116aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8116aac:	4802      	ldr	r0, [pc, #8]	; (8116ab8 <ETH_IRQHandler+0x10>)
 8116aae:	f7ee ffbb 	bl	8105a28 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8116ab2:	bf00      	nop
 8116ab4:	bd80      	pop	{r7, pc}
 8116ab6:	bf00      	nop
 8116ab8:	100088d0 	.word	0x100088d0

08116abc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8116abc:	b580      	push	{r7, lr}
 8116abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8116ac0:	4802      	ldr	r0, [pc, #8]	; (8116acc <LPTIM1_IRQHandler+0x10>)
 8116ac2:	f7f0 fc51 	bl	8107368 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8116ac6:	bf00      	nop
 8116ac8:	bd80      	pop	{r7, pc}
 8116aca:	bf00      	nop
 8116acc:	10008bdc 	.word	0x10008bdc

08116ad0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8116ad0:	b580      	push	{r7, lr}
 8116ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8116ad4:	4802      	ldr	r0, [pc, #8]	; (8116ae0 <TIM16_IRQHandler+0x10>)
 8116ad6:	f7f3 faf2 	bl	810a0be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8116ada:	bf00      	nop
 8116adc:	bd80      	pop	{r7, pc}
 8116ade:	bf00      	nop
 8116ae0:	10008cb8 	.word	0x10008cb8

08116ae4 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8116ae4:	b580      	push	{r7, lr}
 8116ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8116ae8:	4802      	ldr	r0, [pc, #8]	; (8116af4 <LPTIM2_IRQHandler+0x10>)
 8116aea:	f7f0 fc3d 	bl	8107368 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8116aee:	bf00      	nop
 8116af0:	bd80      	pop	{r7, pc}
 8116af2:	bf00      	nop
 8116af4:	10008ba4 	.word	0x10008ba4

08116af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8116af8:	b480      	push	{r7}
 8116afa:	b087      	sub	sp, #28
 8116afc:	af00      	add	r7, sp, #0
 8116afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8116b00:	4a14      	ldr	r2, [pc, #80]	; (8116b54 <_sbrk+0x5c>)
 8116b02:	4b15      	ldr	r3, [pc, #84]	; (8116b58 <_sbrk+0x60>)
 8116b04:	1ad3      	subs	r3, r2, r3
 8116b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8116b08:	697b      	ldr	r3, [r7, #20]
 8116b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8116b0c:	4b13      	ldr	r3, [pc, #76]	; (8116b5c <_sbrk+0x64>)
 8116b0e:	681b      	ldr	r3, [r3, #0]
 8116b10:	2b00      	cmp	r3, #0
 8116b12:	d102      	bne.n	8116b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8116b14:	4b11      	ldr	r3, [pc, #68]	; (8116b5c <_sbrk+0x64>)
 8116b16:	4a12      	ldr	r2, [pc, #72]	; (8116b60 <_sbrk+0x68>)
 8116b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8116b1a:	4b10      	ldr	r3, [pc, #64]	; (8116b5c <_sbrk+0x64>)
 8116b1c:	681a      	ldr	r2, [r3, #0]
 8116b1e:	687b      	ldr	r3, [r7, #4]
 8116b20:	4413      	add	r3, r2
 8116b22:	693a      	ldr	r2, [r7, #16]
 8116b24:	429a      	cmp	r2, r3
 8116b26:	d205      	bcs.n	8116b34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8116b28:	4b0e      	ldr	r3, [pc, #56]	; (8116b64 <_sbrk+0x6c>)
 8116b2a:	220c      	movs	r2, #12
 8116b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8116b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8116b32:	e009      	b.n	8116b48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8116b34:	4b09      	ldr	r3, [pc, #36]	; (8116b5c <_sbrk+0x64>)
 8116b36:	681b      	ldr	r3, [r3, #0]
 8116b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8116b3a:	4b08      	ldr	r3, [pc, #32]	; (8116b5c <_sbrk+0x64>)
 8116b3c:	681a      	ldr	r2, [r3, #0]
 8116b3e:	687b      	ldr	r3, [r7, #4]
 8116b40:	4413      	add	r3, r2
 8116b42:	4a06      	ldr	r2, [pc, #24]	; (8116b5c <_sbrk+0x64>)
 8116b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8116b46:	68fb      	ldr	r3, [r7, #12]
}
 8116b48:	4618      	mov	r0, r3
 8116b4a:	371c      	adds	r7, #28
 8116b4c:	46bd      	mov	sp, r7
 8116b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116b52:	4770      	bx	lr
 8116b54:	10048000 	.word	0x10048000
 8116b58:	00002000 	.word	0x00002000
 8116b5c:	10005c34 	.word	0x10005c34
 8116b60:	10008df0 	.word	0x10008df0
 8116b64:	100087d4 	.word	0x100087d4

08116b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8116b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8116ba0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8116b6c:	f7ea fa70 	bl	8101050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8116b70:	480c      	ldr	r0, [pc, #48]	; (8116ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8116b72:	490d      	ldr	r1, [pc, #52]	; (8116ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8116b74:	4a0d      	ldr	r2, [pc, #52]	; (8116bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8116b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8116b78:	e002      	b.n	8116b80 <LoopCopyDataInit>

08116b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8116b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8116b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8116b7e:	3304      	adds	r3, #4

08116b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8116b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8116b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8116b84:	d3f9      	bcc.n	8116b7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8116b86:	4a0a      	ldr	r2, [pc, #40]	; (8116bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8116b88:	4c0a      	ldr	r4, [pc, #40]	; (8116bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8116b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8116b8c:	e001      	b.n	8116b92 <LoopFillZerobss>

08116b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8116b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8116b90:	3204      	adds	r2, #4

08116b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8116b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8116b94:	d3fb      	bcc.n	8116b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8116b96:	f000 f907 	bl	8116da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8116b9a:	f7fe fb81 	bl	81152a0 <main>
  bx  lr
 8116b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8116ba0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8116ba4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8116ba8:	100001fc 	.word	0x100001fc
  ldr r2, =_sidata
 8116bac:	0811bc00 	.word	0x0811bc00
  ldr r2, =_sbss
 8116bb0:	10001aa0 	.word	0x10001aa0
  ldr r4, =_ebss
 8116bb4:	10008df0 	.word	0x10008df0

08116bb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8116bb8:	e7fe      	b.n	8116bb8 <ADC3_IRQHandler>
	...

08116bbc <std>:
 8116bbc:	2300      	movs	r3, #0
 8116bbe:	b510      	push	{r4, lr}
 8116bc0:	4604      	mov	r4, r0
 8116bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8116bc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8116bca:	6083      	str	r3, [r0, #8]
 8116bcc:	8181      	strh	r1, [r0, #12]
 8116bce:	6643      	str	r3, [r0, #100]	; 0x64
 8116bd0:	81c2      	strh	r2, [r0, #14]
 8116bd2:	6183      	str	r3, [r0, #24]
 8116bd4:	4619      	mov	r1, r3
 8116bd6:	2208      	movs	r2, #8
 8116bd8:	305c      	adds	r0, #92	; 0x5c
 8116bda:	f000 f928 	bl	8116e2e <memset>
 8116bde:	4b05      	ldr	r3, [pc, #20]	; (8116bf4 <std+0x38>)
 8116be0:	6263      	str	r3, [r4, #36]	; 0x24
 8116be2:	4b05      	ldr	r3, [pc, #20]	; (8116bf8 <std+0x3c>)
 8116be4:	62a3      	str	r3, [r4, #40]	; 0x28
 8116be6:	4b05      	ldr	r3, [pc, #20]	; (8116bfc <std+0x40>)
 8116be8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8116bea:	4b05      	ldr	r3, [pc, #20]	; (8116c00 <std+0x44>)
 8116bec:	6224      	str	r4, [r4, #32]
 8116bee:	6323      	str	r3, [r4, #48]	; 0x30
 8116bf0:	bd10      	pop	{r4, pc}
 8116bf2:	bf00      	nop
 8116bf4:	08117be5 	.word	0x08117be5
 8116bf8:	08117c07 	.word	0x08117c07
 8116bfc:	08117c3f 	.word	0x08117c3f
 8116c00:	08117c63 	.word	0x08117c63

08116c04 <_cleanup_r>:
 8116c04:	4901      	ldr	r1, [pc, #4]	; (8116c0c <_cleanup_r+0x8>)
 8116c06:	f000 b8af 	b.w	8116d68 <_fwalk_reent>
 8116c0a:	bf00      	nop
 8116c0c:	08118c8d 	.word	0x08118c8d

08116c10 <__sfmoreglue>:
 8116c10:	b570      	push	{r4, r5, r6, lr}
 8116c12:	1e4a      	subs	r2, r1, #1
 8116c14:	2568      	movs	r5, #104	; 0x68
 8116c16:	4355      	muls	r5, r2
 8116c18:	460e      	mov	r6, r1
 8116c1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8116c1e:	f000 f90f 	bl	8116e40 <_malloc_r>
 8116c22:	4604      	mov	r4, r0
 8116c24:	b140      	cbz	r0, 8116c38 <__sfmoreglue+0x28>
 8116c26:	2100      	movs	r1, #0
 8116c28:	e9c0 1600 	strd	r1, r6, [r0]
 8116c2c:	300c      	adds	r0, #12
 8116c2e:	60a0      	str	r0, [r4, #8]
 8116c30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8116c34:	f000 f8fb 	bl	8116e2e <memset>
 8116c38:	4620      	mov	r0, r4
 8116c3a:	bd70      	pop	{r4, r5, r6, pc}

08116c3c <__sfp_lock_acquire>:
 8116c3c:	4801      	ldr	r0, [pc, #4]	; (8116c44 <__sfp_lock_acquire+0x8>)
 8116c3e:	f000 b8d8 	b.w	8116df2 <__retarget_lock_acquire_recursive>
 8116c42:	bf00      	nop
 8116c44:	10008dec 	.word	0x10008dec

08116c48 <__sfp_lock_release>:
 8116c48:	4801      	ldr	r0, [pc, #4]	; (8116c50 <__sfp_lock_release+0x8>)
 8116c4a:	f000 b8d3 	b.w	8116df4 <__retarget_lock_release_recursive>
 8116c4e:	bf00      	nop
 8116c50:	10008dec 	.word	0x10008dec

08116c54 <__sinit_lock_acquire>:
 8116c54:	4801      	ldr	r0, [pc, #4]	; (8116c5c <__sinit_lock_acquire+0x8>)
 8116c56:	f000 b8cc 	b.w	8116df2 <__retarget_lock_acquire_recursive>
 8116c5a:	bf00      	nop
 8116c5c:	10008de7 	.word	0x10008de7

08116c60 <__sinit_lock_release>:
 8116c60:	4801      	ldr	r0, [pc, #4]	; (8116c68 <__sinit_lock_release+0x8>)
 8116c62:	f000 b8c7 	b.w	8116df4 <__retarget_lock_release_recursive>
 8116c66:	bf00      	nop
 8116c68:	10008de7 	.word	0x10008de7

08116c6c <__sinit>:
 8116c6c:	b510      	push	{r4, lr}
 8116c6e:	4604      	mov	r4, r0
 8116c70:	f7ff fff0 	bl	8116c54 <__sinit_lock_acquire>
 8116c74:	69a3      	ldr	r3, [r4, #24]
 8116c76:	b11b      	cbz	r3, 8116c80 <__sinit+0x14>
 8116c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8116c7c:	f7ff bff0 	b.w	8116c60 <__sinit_lock_release>
 8116c80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8116c84:	6523      	str	r3, [r4, #80]	; 0x50
 8116c86:	4b13      	ldr	r3, [pc, #76]	; (8116cd4 <__sinit+0x68>)
 8116c88:	4a13      	ldr	r2, [pc, #76]	; (8116cd8 <__sinit+0x6c>)
 8116c8a:	681b      	ldr	r3, [r3, #0]
 8116c8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8116c8e:	42a3      	cmp	r3, r4
 8116c90:	bf04      	itt	eq
 8116c92:	2301      	moveq	r3, #1
 8116c94:	61a3      	streq	r3, [r4, #24]
 8116c96:	4620      	mov	r0, r4
 8116c98:	f000 f820 	bl	8116cdc <__sfp>
 8116c9c:	6060      	str	r0, [r4, #4]
 8116c9e:	4620      	mov	r0, r4
 8116ca0:	f000 f81c 	bl	8116cdc <__sfp>
 8116ca4:	60a0      	str	r0, [r4, #8]
 8116ca6:	4620      	mov	r0, r4
 8116ca8:	f000 f818 	bl	8116cdc <__sfp>
 8116cac:	2200      	movs	r2, #0
 8116cae:	60e0      	str	r0, [r4, #12]
 8116cb0:	2104      	movs	r1, #4
 8116cb2:	6860      	ldr	r0, [r4, #4]
 8116cb4:	f7ff ff82 	bl	8116bbc <std>
 8116cb8:	68a0      	ldr	r0, [r4, #8]
 8116cba:	2201      	movs	r2, #1
 8116cbc:	2109      	movs	r1, #9
 8116cbe:	f7ff ff7d 	bl	8116bbc <std>
 8116cc2:	68e0      	ldr	r0, [r4, #12]
 8116cc4:	2202      	movs	r2, #2
 8116cc6:	2112      	movs	r1, #18
 8116cc8:	f7ff ff78 	bl	8116bbc <std>
 8116ccc:	2301      	movs	r3, #1
 8116cce:	61a3      	str	r3, [r4, #24]
 8116cd0:	e7d2      	b.n	8116c78 <__sinit+0xc>
 8116cd2:	bf00      	nop
 8116cd4:	0811b910 	.word	0x0811b910
 8116cd8:	08116c05 	.word	0x08116c05

08116cdc <__sfp>:
 8116cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116cde:	4607      	mov	r7, r0
 8116ce0:	f7ff ffac 	bl	8116c3c <__sfp_lock_acquire>
 8116ce4:	4b1e      	ldr	r3, [pc, #120]	; (8116d60 <__sfp+0x84>)
 8116ce6:	681e      	ldr	r6, [r3, #0]
 8116ce8:	69b3      	ldr	r3, [r6, #24]
 8116cea:	b913      	cbnz	r3, 8116cf2 <__sfp+0x16>
 8116cec:	4630      	mov	r0, r6
 8116cee:	f7ff ffbd 	bl	8116c6c <__sinit>
 8116cf2:	3648      	adds	r6, #72	; 0x48
 8116cf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8116cf8:	3b01      	subs	r3, #1
 8116cfa:	d503      	bpl.n	8116d04 <__sfp+0x28>
 8116cfc:	6833      	ldr	r3, [r6, #0]
 8116cfe:	b30b      	cbz	r3, 8116d44 <__sfp+0x68>
 8116d00:	6836      	ldr	r6, [r6, #0]
 8116d02:	e7f7      	b.n	8116cf4 <__sfp+0x18>
 8116d04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8116d08:	b9d5      	cbnz	r5, 8116d40 <__sfp+0x64>
 8116d0a:	4b16      	ldr	r3, [pc, #88]	; (8116d64 <__sfp+0x88>)
 8116d0c:	60e3      	str	r3, [r4, #12]
 8116d0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8116d12:	6665      	str	r5, [r4, #100]	; 0x64
 8116d14:	f000 f86c 	bl	8116df0 <__retarget_lock_init_recursive>
 8116d18:	f7ff ff96 	bl	8116c48 <__sfp_lock_release>
 8116d1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8116d20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8116d24:	6025      	str	r5, [r4, #0]
 8116d26:	61a5      	str	r5, [r4, #24]
 8116d28:	2208      	movs	r2, #8
 8116d2a:	4629      	mov	r1, r5
 8116d2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8116d30:	f000 f87d 	bl	8116e2e <memset>
 8116d34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8116d38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8116d3c:	4620      	mov	r0, r4
 8116d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8116d40:	3468      	adds	r4, #104	; 0x68
 8116d42:	e7d9      	b.n	8116cf8 <__sfp+0x1c>
 8116d44:	2104      	movs	r1, #4
 8116d46:	4638      	mov	r0, r7
 8116d48:	f7ff ff62 	bl	8116c10 <__sfmoreglue>
 8116d4c:	4604      	mov	r4, r0
 8116d4e:	6030      	str	r0, [r6, #0]
 8116d50:	2800      	cmp	r0, #0
 8116d52:	d1d5      	bne.n	8116d00 <__sfp+0x24>
 8116d54:	f7ff ff78 	bl	8116c48 <__sfp_lock_release>
 8116d58:	230c      	movs	r3, #12
 8116d5a:	603b      	str	r3, [r7, #0]
 8116d5c:	e7ee      	b.n	8116d3c <__sfp+0x60>
 8116d5e:	bf00      	nop
 8116d60:	0811b910 	.word	0x0811b910
 8116d64:	ffff0001 	.word	0xffff0001

08116d68 <_fwalk_reent>:
 8116d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8116d6c:	4606      	mov	r6, r0
 8116d6e:	4688      	mov	r8, r1
 8116d70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8116d74:	2700      	movs	r7, #0
 8116d76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8116d7a:	f1b9 0901 	subs.w	r9, r9, #1
 8116d7e:	d505      	bpl.n	8116d8c <_fwalk_reent+0x24>
 8116d80:	6824      	ldr	r4, [r4, #0]
 8116d82:	2c00      	cmp	r4, #0
 8116d84:	d1f7      	bne.n	8116d76 <_fwalk_reent+0xe>
 8116d86:	4638      	mov	r0, r7
 8116d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8116d8c:	89ab      	ldrh	r3, [r5, #12]
 8116d8e:	2b01      	cmp	r3, #1
 8116d90:	d907      	bls.n	8116da2 <_fwalk_reent+0x3a>
 8116d92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8116d96:	3301      	adds	r3, #1
 8116d98:	d003      	beq.n	8116da2 <_fwalk_reent+0x3a>
 8116d9a:	4629      	mov	r1, r5
 8116d9c:	4630      	mov	r0, r6
 8116d9e:	47c0      	blx	r8
 8116da0:	4307      	orrs	r7, r0
 8116da2:	3568      	adds	r5, #104	; 0x68
 8116da4:	e7e9      	b.n	8116d7a <_fwalk_reent+0x12>
	...

08116da8 <__libc_init_array>:
 8116da8:	b570      	push	{r4, r5, r6, lr}
 8116daa:	4d0d      	ldr	r5, [pc, #52]	; (8116de0 <__libc_init_array+0x38>)
 8116dac:	4c0d      	ldr	r4, [pc, #52]	; (8116de4 <__libc_init_array+0x3c>)
 8116dae:	1b64      	subs	r4, r4, r5
 8116db0:	10a4      	asrs	r4, r4, #2
 8116db2:	2600      	movs	r6, #0
 8116db4:	42a6      	cmp	r6, r4
 8116db6:	d109      	bne.n	8116dcc <__libc_init_array+0x24>
 8116db8:	4d0b      	ldr	r5, [pc, #44]	; (8116de8 <__libc_init_array+0x40>)
 8116dba:	4c0c      	ldr	r4, [pc, #48]	; (8116dec <__libc_init_array+0x44>)
 8116dbc:	f002 fe2c 	bl	8119a18 <_init>
 8116dc0:	1b64      	subs	r4, r4, r5
 8116dc2:	10a4      	asrs	r4, r4, #2
 8116dc4:	2600      	movs	r6, #0
 8116dc6:	42a6      	cmp	r6, r4
 8116dc8:	d105      	bne.n	8116dd6 <__libc_init_array+0x2e>
 8116dca:	bd70      	pop	{r4, r5, r6, pc}
 8116dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8116dd0:	4798      	blx	r3
 8116dd2:	3601      	adds	r6, #1
 8116dd4:	e7ee      	b.n	8116db4 <__libc_init_array+0xc>
 8116dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8116dda:	4798      	blx	r3
 8116ddc:	3601      	adds	r6, #1
 8116dde:	e7f2      	b.n	8116dc6 <__libc_init_array+0x1e>
 8116de0:	0811bbf8 	.word	0x0811bbf8
 8116de4:	0811bbf8 	.word	0x0811bbf8
 8116de8:	0811bbf8 	.word	0x0811bbf8
 8116dec:	0811bbfc 	.word	0x0811bbfc

08116df0 <__retarget_lock_init_recursive>:
 8116df0:	4770      	bx	lr

08116df2 <__retarget_lock_acquire_recursive>:
 8116df2:	4770      	bx	lr

08116df4 <__retarget_lock_release_recursive>:
 8116df4:	4770      	bx	lr

08116df6 <memcmp>:
 8116df6:	b530      	push	{r4, r5, lr}
 8116df8:	3901      	subs	r1, #1
 8116dfa:	2400      	movs	r4, #0
 8116dfc:	42a2      	cmp	r2, r4
 8116dfe:	d101      	bne.n	8116e04 <memcmp+0xe>
 8116e00:	2000      	movs	r0, #0
 8116e02:	e005      	b.n	8116e10 <memcmp+0x1a>
 8116e04:	5d03      	ldrb	r3, [r0, r4]
 8116e06:	3401      	adds	r4, #1
 8116e08:	5d0d      	ldrb	r5, [r1, r4]
 8116e0a:	42ab      	cmp	r3, r5
 8116e0c:	d0f6      	beq.n	8116dfc <memcmp+0x6>
 8116e0e:	1b58      	subs	r0, r3, r5
 8116e10:	bd30      	pop	{r4, r5, pc}

08116e12 <memcpy>:
 8116e12:	440a      	add	r2, r1
 8116e14:	4291      	cmp	r1, r2
 8116e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8116e1a:	d100      	bne.n	8116e1e <memcpy+0xc>
 8116e1c:	4770      	bx	lr
 8116e1e:	b510      	push	{r4, lr}
 8116e20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8116e24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8116e28:	4291      	cmp	r1, r2
 8116e2a:	d1f9      	bne.n	8116e20 <memcpy+0xe>
 8116e2c:	bd10      	pop	{r4, pc}

08116e2e <memset>:
 8116e2e:	4402      	add	r2, r0
 8116e30:	4603      	mov	r3, r0
 8116e32:	4293      	cmp	r3, r2
 8116e34:	d100      	bne.n	8116e38 <memset+0xa>
 8116e36:	4770      	bx	lr
 8116e38:	f803 1b01 	strb.w	r1, [r3], #1
 8116e3c:	e7f9      	b.n	8116e32 <memset+0x4>
	...

08116e40 <_malloc_r>:
 8116e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116e42:	1ccd      	adds	r5, r1, #3
 8116e44:	f025 0503 	bic.w	r5, r5, #3
 8116e48:	3508      	adds	r5, #8
 8116e4a:	2d0c      	cmp	r5, #12
 8116e4c:	bf38      	it	cc
 8116e4e:	250c      	movcc	r5, #12
 8116e50:	2d00      	cmp	r5, #0
 8116e52:	4606      	mov	r6, r0
 8116e54:	db01      	blt.n	8116e5a <_malloc_r+0x1a>
 8116e56:	42a9      	cmp	r1, r5
 8116e58:	d903      	bls.n	8116e62 <_malloc_r+0x22>
 8116e5a:	230c      	movs	r3, #12
 8116e5c:	6033      	str	r3, [r6, #0]
 8116e5e:	2000      	movs	r0, #0
 8116e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8116e62:	f001 ffe3 	bl	8118e2c <__malloc_lock>
 8116e66:	4921      	ldr	r1, [pc, #132]	; (8116eec <_malloc_r+0xac>)
 8116e68:	680a      	ldr	r2, [r1, #0]
 8116e6a:	4614      	mov	r4, r2
 8116e6c:	b99c      	cbnz	r4, 8116e96 <_malloc_r+0x56>
 8116e6e:	4f20      	ldr	r7, [pc, #128]	; (8116ef0 <_malloc_r+0xb0>)
 8116e70:	683b      	ldr	r3, [r7, #0]
 8116e72:	b923      	cbnz	r3, 8116e7e <_malloc_r+0x3e>
 8116e74:	4621      	mov	r1, r4
 8116e76:	4630      	mov	r0, r6
 8116e78:	f000 fdde 	bl	8117a38 <_sbrk_r>
 8116e7c:	6038      	str	r0, [r7, #0]
 8116e7e:	4629      	mov	r1, r5
 8116e80:	4630      	mov	r0, r6
 8116e82:	f000 fdd9 	bl	8117a38 <_sbrk_r>
 8116e86:	1c43      	adds	r3, r0, #1
 8116e88:	d123      	bne.n	8116ed2 <_malloc_r+0x92>
 8116e8a:	230c      	movs	r3, #12
 8116e8c:	6033      	str	r3, [r6, #0]
 8116e8e:	4630      	mov	r0, r6
 8116e90:	f001 ffd2 	bl	8118e38 <__malloc_unlock>
 8116e94:	e7e3      	b.n	8116e5e <_malloc_r+0x1e>
 8116e96:	6823      	ldr	r3, [r4, #0]
 8116e98:	1b5b      	subs	r3, r3, r5
 8116e9a:	d417      	bmi.n	8116ecc <_malloc_r+0x8c>
 8116e9c:	2b0b      	cmp	r3, #11
 8116e9e:	d903      	bls.n	8116ea8 <_malloc_r+0x68>
 8116ea0:	6023      	str	r3, [r4, #0]
 8116ea2:	441c      	add	r4, r3
 8116ea4:	6025      	str	r5, [r4, #0]
 8116ea6:	e004      	b.n	8116eb2 <_malloc_r+0x72>
 8116ea8:	6863      	ldr	r3, [r4, #4]
 8116eaa:	42a2      	cmp	r2, r4
 8116eac:	bf0c      	ite	eq
 8116eae:	600b      	streq	r3, [r1, #0]
 8116eb0:	6053      	strne	r3, [r2, #4]
 8116eb2:	4630      	mov	r0, r6
 8116eb4:	f001 ffc0 	bl	8118e38 <__malloc_unlock>
 8116eb8:	f104 000b 	add.w	r0, r4, #11
 8116ebc:	1d23      	adds	r3, r4, #4
 8116ebe:	f020 0007 	bic.w	r0, r0, #7
 8116ec2:	1ac2      	subs	r2, r0, r3
 8116ec4:	d0cc      	beq.n	8116e60 <_malloc_r+0x20>
 8116ec6:	1a1b      	subs	r3, r3, r0
 8116ec8:	50a3      	str	r3, [r4, r2]
 8116eca:	e7c9      	b.n	8116e60 <_malloc_r+0x20>
 8116ecc:	4622      	mov	r2, r4
 8116ece:	6864      	ldr	r4, [r4, #4]
 8116ed0:	e7cc      	b.n	8116e6c <_malloc_r+0x2c>
 8116ed2:	1cc4      	adds	r4, r0, #3
 8116ed4:	f024 0403 	bic.w	r4, r4, #3
 8116ed8:	42a0      	cmp	r0, r4
 8116eda:	d0e3      	beq.n	8116ea4 <_malloc_r+0x64>
 8116edc:	1a21      	subs	r1, r4, r0
 8116ede:	4630      	mov	r0, r6
 8116ee0:	f000 fdaa 	bl	8117a38 <_sbrk_r>
 8116ee4:	3001      	adds	r0, #1
 8116ee6:	d1dd      	bne.n	8116ea4 <_malloc_r+0x64>
 8116ee8:	e7cf      	b.n	8116e8a <_malloc_r+0x4a>
 8116eea:	bf00      	nop
 8116eec:	10005c38 	.word	0x10005c38
 8116ef0:	10005c3c 	.word	0x10005c3c

08116ef4 <__cvt>:
 8116ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8116ef8:	ec55 4b10 	vmov	r4, r5, d0
 8116efc:	2d00      	cmp	r5, #0
 8116efe:	460e      	mov	r6, r1
 8116f00:	4619      	mov	r1, r3
 8116f02:	462b      	mov	r3, r5
 8116f04:	bfbb      	ittet	lt
 8116f06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8116f0a:	461d      	movlt	r5, r3
 8116f0c:	2300      	movge	r3, #0
 8116f0e:	232d      	movlt	r3, #45	; 0x2d
 8116f10:	700b      	strb	r3, [r1, #0]
 8116f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8116f14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8116f18:	4691      	mov	r9, r2
 8116f1a:	f023 0820 	bic.w	r8, r3, #32
 8116f1e:	bfbc      	itt	lt
 8116f20:	4622      	movlt	r2, r4
 8116f22:	4614      	movlt	r4, r2
 8116f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8116f28:	d005      	beq.n	8116f36 <__cvt+0x42>
 8116f2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8116f2e:	d100      	bne.n	8116f32 <__cvt+0x3e>
 8116f30:	3601      	adds	r6, #1
 8116f32:	2102      	movs	r1, #2
 8116f34:	e000      	b.n	8116f38 <__cvt+0x44>
 8116f36:	2103      	movs	r1, #3
 8116f38:	ab03      	add	r3, sp, #12
 8116f3a:	9301      	str	r3, [sp, #4]
 8116f3c:	ab02      	add	r3, sp, #8
 8116f3e:	9300      	str	r3, [sp, #0]
 8116f40:	ec45 4b10 	vmov	d0, r4, r5
 8116f44:	4653      	mov	r3, sl
 8116f46:	4632      	mov	r2, r6
 8116f48:	f001 f82e 	bl	8117fa8 <_dtoa_r>
 8116f4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8116f50:	4607      	mov	r7, r0
 8116f52:	d102      	bne.n	8116f5a <__cvt+0x66>
 8116f54:	f019 0f01 	tst.w	r9, #1
 8116f58:	d022      	beq.n	8116fa0 <__cvt+0xac>
 8116f5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8116f5e:	eb07 0906 	add.w	r9, r7, r6
 8116f62:	d110      	bne.n	8116f86 <__cvt+0x92>
 8116f64:	783b      	ldrb	r3, [r7, #0]
 8116f66:	2b30      	cmp	r3, #48	; 0x30
 8116f68:	d10a      	bne.n	8116f80 <__cvt+0x8c>
 8116f6a:	2200      	movs	r2, #0
 8116f6c:	2300      	movs	r3, #0
 8116f6e:	4620      	mov	r0, r4
 8116f70:	4629      	mov	r1, r5
 8116f72:	f7e9 fe31 	bl	8100bd8 <__aeabi_dcmpeq>
 8116f76:	b918      	cbnz	r0, 8116f80 <__cvt+0x8c>
 8116f78:	f1c6 0601 	rsb	r6, r6, #1
 8116f7c:	f8ca 6000 	str.w	r6, [sl]
 8116f80:	f8da 3000 	ldr.w	r3, [sl]
 8116f84:	4499      	add	r9, r3
 8116f86:	2200      	movs	r2, #0
 8116f88:	2300      	movs	r3, #0
 8116f8a:	4620      	mov	r0, r4
 8116f8c:	4629      	mov	r1, r5
 8116f8e:	f7e9 fe23 	bl	8100bd8 <__aeabi_dcmpeq>
 8116f92:	b108      	cbz	r0, 8116f98 <__cvt+0xa4>
 8116f94:	f8cd 900c 	str.w	r9, [sp, #12]
 8116f98:	2230      	movs	r2, #48	; 0x30
 8116f9a:	9b03      	ldr	r3, [sp, #12]
 8116f9c:	454b      	cmp	r3, r9
 8116f9e:	d307      	bcc.n	8116fb0 <__cvt+0xbc>
 8116fa0:	9b03      	ldr	r3, [sp, #12]
 8116fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8116fa4:	1bdb      	subs	r3, r3, r7
 8116fa6:	4638      	mov	r0, r7
 8116fa8:	6013      	str	r3, [r2, #0]
 8116faa:	b004      	add	sp, #16
 8116fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8116fb0:	1c59      	adds	r1, r3, #1
 8116fb2:	9103      	str	r1, [sp, #12]
 8116fb4:	701a      	strb	r2, [r3, #0]
 8116fb6:	e7f0      	b.n	8116f9a <__cvt+0xa6>

08116fb8 <__exponent>:
 8116fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8116fba:	4603      	mov	r3, r0
 8116fbc:	2900      	cmp	r1, #0
 8116fbe:	bfb8      	it	lt
 8116fc0:	4249      	neglt	r1, r1
 8116fc2:	f803 2b02 	strb.w	r2, [r3], #2
 8116fc6:	bfb4      	ite	lt
 8116fc8:	222d      	movlt	r2, #45	; 0x2d
 8116fca:	222b      	movge	r2, #43	; 0x2b
 8116fcc:	2909      	cmp	r1, #9
 8116fce:	7042      	strb	r2, [r0, #1]
 8116fd0:	dd2a      	ble.n	8117028 <__exponent+0x70>
 8116fd2:	f10d 0407 	add.w	r4, sp, #7
 8116fd6:	46a4      	mov	ip, r4
 8116fd8:	270a      	movs	r7, #10
 8116fda:	46a6      	mov	lr, r4
 8116fdc:	460a      	mov	r2, r1
 8116fde:	fb91 f6f7 	sdiv	r6, r1, r7
 8116fe2:	fb07 1516 	mls	r5, r7, r6, r1
 8116fe6:	3530      	adds	r5, #48	; 0x30
 8116fe8:	2a63      	cmp	r2, #99	; 0x63
 8116fea:	f104 34ff 	add.w	r4, r4, #4294967295
 8116fee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8116ff2:	4631      	mov	r1, r6
 8116ff4:	dcf1      	bgt.n	8116fda <__exponent+0x22>
 8116ff6:	3130      	adds	r1, #48	; 0x30
 8116ff8:	f1ae 0502 	sub.w	r5, lr, #2
 8116ffc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8117000:	1c44      	adds	r4, r0, #1
 8117002:	4629      	mov	r1, r5
 8117004:	4561      	cmp	r1, ip
 8117006:	d30a      	bcc.n	811701e <__exponent+0x66>
 8117008:	f10d 0209 	add.w	r2, sp, #9
 811700c:	eba2 020e 	sub.w	r2, r2, lr
 8117010:	4565      	cmp	r5, ip
 8117012:	bf88      	it	hi
 8117014:	2200      	movhi	r2, #0
 8117016:	4413      	add	r3, r2
 8117018:	1a18      	subs	r0, r3, r0
 811701a:	b003      	add	sp, #12
 811701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811701e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8117022:	f804 2f01 	strb.w	r2, [r4, #1]!
 8117026:	e7ed      	b.n	8117004 <__exponent+0x4c>
 8117028:	2330      	movs	r3, #48	; 0x30
 811702a:	3130      	adds	r1, #48	; 0x30
 811702c:	7083      	strb	r3, [r0, #2]
 811702e:	70c1      	strb	r1, [r0, #3]
 8117030:	1d03      	adds	r3, r0, #4
 8117032:	e7f1      	b.n	8117018 <__exponent+0x60>

08117034 <_printf_float>:
 8117034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8117038:	ed2d 8b02 	vpush	{d8}
 811703c:	b08d      	sub	sp, #52	; 0x34
 811703e:	460c      	mov	r4, r1
 8117040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8117044:	4616      	mov	r6, r2
 8117046:	461f      	mov	r7, r3
 8117048:	4605      	mov	r5, r0
 811704a:	f001 fe6d 	bl	8118d28 <_localeconv_r>
 811704e:	f8d0 a000 	ldr.w	sl, [r0]
 8117052:	4650      	mov	r0, sl
 8117054:	f7e9 f944 	bl	81002e0 <strlen>
 8117058:	2300      	movs	r3, #0
 811705a:	930a      	str	r3, [sp, #40]	; 0x28
 811705c:	6823      	ldr	r3, [r4, #0]
 811705e:	9305      	str	r3, [sp, #20]
 8117060:	f8d8 3000 	ldr.w	r3, [r8]
 8117064:	f894 b018 	ldrb.w	fp, [r4, #24]
 8117068:	3307      	adds	r3, #7
 811706a:	f023 0307 	bic.w	r3, r3, #7
 811706e:	f103 0208 	add.w	r2, r3, #8
 8117072:	f8c8 2000 	str.w	r2, [r8]
 8117076:	e9d3 2300 	ldrd	r2, r3, [r3]
 811707a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 811707e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8117082:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8117086:	9307      	str	r3, [sp, #28]
 8117088:	f8cd 8018 	str.w	r8, [sp, #24]
 811708c:	ee08 0a10 	vmov	s16, r0
 8117090:	4b9f      	ldr	r3, [pc, #636]	; (8117310 <_printf_float+0x2dc>)
 8117092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8117096:	f04f 32ff 	mov.w	r2, #4294967295
 811709a:	f7e9 fdcf 	bl	8100c3c <__aeabi_dcmpun>
 811709e:	bb88      	cbnz	r0, 8117104 <_printf_float+0xd0>
 81170a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81170a4:	4b9a      	ldr	r3, [pc, #616]	; (8117310 <_printf_float+0x2dc>)
 81170a6:	f04f 32ff 	mov.w	r2, #4294967295
 81170aa:	f7e9 fda9 	bl	8100c00 <__aeabi_dcmple>
 81170ae:	bb48      	cbnz	r0, 8117104 <_printf_float+0xd0>
 81170b0:	2200      	movs	r2, #0
 81170b2:	2300      	movs	r3, #0
 81170b4:	4640      	mov	r0, r8
 81170b6:	4649      	mov	r1, r9
 81170b8:	f7e9 fd98 	bl	8100bec <__aeabi_dcmplt>
 81170bc:	b110      	cbz	r0, 81170c4 <_printf_float+0x90>
 81170be:	232d      	movs	r3, #45	; 0x2d
 81170c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81170c4:	4b93      	ldr	r3, [pc, #588]	; (8117314 <_printf_float+0x2e0>)
 81170c6:	4894      	ldr	r0, [pc, #592]	; (8117318 <_printf_float+0x2e4>)
 81170c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81170cc:	bf94      	ite	ls
 81170ce:	4698      	movls	r8, r3
 81170d0:	4680      	movhi	r8, r0
 81170d2:	2303      	movs	r3, #3
 81170d4:	6123      	str	r3, [r4, #16]
 81170d6:	9b05      	ldr	r3, [sp, #20]
 81170d8:	f023 0204 	bic.w	r2, r3, #4
 81170dc:	6022      	str	r2, [r4, #0]
 81170de:	f04f 0900 	mov.w	r9, #0
 81170e2:	9700      	str	r7, [sp, #0]
 81170e4:	4633      	mov	r3, r6
 81170e6:	aa0b      	add	r2, sp, #44	; 0x2c
 81170e8:	4621      	mov	r1, r4
 81170ea:	4628      	mov	r0, r5
 81170ec:	f000 f9d8 	bl	81174a0 <_printf_common>
 81170f0:	3001      	adds	r0, #1
 81170f2:	f040 8090 	bne.w	8117216 <_printf_float+0x1e2>
 81170f6:	f04f 30ff 	mov.w	r0, #4294967295
 81170fa:	b00d      	add	sp, #52	; 0x34
 81170fc:	ecbd 8b02 	vpop	{d8}
 8117100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8117104:	4642      	mov	r2, r8
 8117106:	464b      	mov	r3, r9
 8117108:	4640      	mov	r0, r8
 811710a:	4649      	mov	r1, r9
 811710c:	f7e9 fd96 	bl	8100c3c <__aeabi_dcmpun>
 8117110:	b140      	cbz	r0, 8117124 <_printf_float+0xf0>
 8117112:	464b      	mov	r3, r9
 8117114:	2b00      	cmp	r3, #0
 8117116:	bfbc      	itt	lt
 8117118:	232d      	movlt	r3, #45	; 0x2d
 811711a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 811711e:	487f      	ldr	r0, [pc, #508]	; (811731c <_printf_float+0x2e8>)
 8117120:	4b7f      	ldr	r3, [pc, #508]	; (8117320 <_printf_float+0x2ec>)
 8117122:	e7d1      	b.n	81170c8 <_printf_float+0x94>
 8117124:	6863      	ldr	r3, [r4, #4]
 8117126:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 811712a:	9206      	str	r2, [sp, #24]
 811712c:	1c5a      	adds	r2, r3, #1
 811712e:	d13f      	bne.n	81171b0 <_printf_float+0x17c>
 8117130:	2306      	movs	r3, #6
 8117132:	6063      	str	r3, [r4, #4]
 8117134:	9b05      	ldr	r3, [sp, #20]
 8117136:	6861      	ldr	r1, [r4, #4]
 8117138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 811713c:	2300      	movs	r3, #0
 811713e:	9303      	str	r3, [sp, #12]
 8117140:	ab0a      	add	r3, sp, #40	; 0x28
 8117142:	e9cd b301 	strd	fp, r3, [sp, #4]
 8117146:	ab09      	add	r3, sp, #36	; 0x24
 8117148:	ec49 8b10 	vmov	d0, r8, r9
 811714c:	9300      	str	r3, [sp, #0]
 811714e:	6022      	str	r2, [r4, #0]
 8117150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8117154:	4628      	mov	r0, r5
 8117156:	f7ff fecd 	bl	8116ef4 <__cvt>
 811715a:	9b06      	ldr	r3, [sp, #24]
 811715c:	9909      	ldr	r1, [sp, #36]	; 0x24
 811715e:	2b47      	cmp	r3, #71	; 0x47
 8117160:	4680      	mov	r8, r0
 8117162:	d108      	bne.n	8117176 <_printf_float+0x142>
 8117164:	1cc8      	adds	r0, r1, #3
 8117166:	db02      	blt.n	811716e <_printf_float+0x13a>
 8117168:	6863      	ldr	r3, [r4, #4]
 811716a:	4299      	cmp	r1, r3
 811716c:	dd41      	ble.n	81171f2 <_printf_float+0x1be>
 811716e:	f1ab 0b02 	sub.w	fp, fp, #2
 8117172:	fa5f fb8b 	uxtb.w	fp, fp
 8117176:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 811717a:	d820      	bhi.n	81171be <_printf_float+0x18a>
 811717c:	3901      	subs	r1, #1
 811717e:	465a      	mov	r2, fp
 8117180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8117184:	9109      	str	r1, [sp, #36]	; 0x24
 8117186:	f7ff ff17 	bl	8116fb8 <__exponent>
 811718a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811718c:	1813      	adds	r3, r2, r0
 811718e:	2a01      	cmp	r2, #1
 8117190:	4681      	mov	r9, r0
 8117192:	6123      	str	r3, [r4, #16]
 8117194:	dc02      	bgt.n	811719c <_printf_float+0x168>
 8117196:	6822      	ldr	r2, [r4, #0]
 8117198:	07d2      	lsls	r2, r2, #31
 811719a:	d501      	bpl.n	81171a0 <_printf_float+0x16c>
 811719c:	3301      	adds	r3, #1
 811719e:	6123      	str	r3, [r4, #16]
 81171a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81171a4:	2b00      	cmp	r3, #0
 81171a6:	d09c      	beq.n	81170e2 <_printf_float+0xae>
 81171a8:	232d      	movs	r3, #45	; 0x2d
 81171aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81171ae:	e798      	b.n	81170e2 <_printf_float+0xae>
 81171b0:	9a06      	ldr	r2, [sp, #24]
 81171b2:	2a47      	cmp	r2, #71	; 0x47
 81171b4:	d1be      	bne.n	8117134 <_printf_float+0x100>
 81171b6:	2b00      	cmp	r3, #0
 81171b8:	d1bc      	bne.n	8117134 <_printf_float+0x100>
 81171ba:	2301      	movs	r3, #1
 81171bc:	e7b9      	b.n	8117132 <_printf_float+0xfe>
 81171be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81171c2:	d118      	bne.n	81171f6 <_printf_float+0x1c2>
 81171c4:	2900      	cmp	r1, #0
 81171c6:	6863      	ldr	r3, [r4, #4]
 81171c8:	dd0b      	ble.n	81171e2 <_printf_float+0x1ae>
 81171ca:	6121      	str	r1, [r4, #16]
 81171cc:	b913      	cbnz	r3, 81171d4 <_printf_float+0x1a0>
 81171ce:	6822      	ldr	r2, [r4, #0]
 81171d0:	07d0      	lsls	r0, r2, #31
 81171d2:	d502      	bpl.n	81171da <_printf_float+0x1a6>
 81171d4:	3301      	adds	r3, #1
 81171d6:	440b      	add	r3, r1
 81171d8:	6123      	str	r3, [r4, #16]
 81171da:	65a1      	str	r1, [r4, #88]	; 0x58
 81171dc:	f04f 0900 	mov.w	r9, #0
 81171e0:	e7de      	b.n	81171a0 <_printf_float+0x16c>
 81171e2:	b913      	cbnz	r3, 81171ea <_printf_float+0x1b6>
 81171e4:	6822      	ldr	r2, [r4, #0]
 81171e6:	07d2      	lsls	r2, r2, #31
 81171e8:	d501      	bpl.n	81171ee <_printf_float+0x1ba>
 81171ea:	3302      	adds	r3, #2
 81171ec:	e7f4      	b.n	81171d8 <_printf_float+0x1a4>
 81171ee:	2301      	movs	r3, #1
 81171f0:	e7f2      	b.n	81171d8 <_printf_float+0x1a4>
 81171f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81171f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81171f8:	4299      	cmp	r1, r3
 81171fa:	db05      	blt.n	8117208 <_printf_float+0x1d4>
 81171fc:	6823      	ldr	r3, [r4, #0]
 81171fe:	6121      	str	r1, [r4, #16]
 8117200:	07d8      	lsls	r0, r3, #31
 8117202:	d5ea      	bpl.n	81171da <_printf_float+0x1a6>
 8117204:	1c4b      	adds	r3, r1, #1
 8117206:	e7e7      	b.n	81171d8 <_printf_float+0x1a4>
 8117208:	2900      	cmp	r1, #0
 811720a:	bfd4      	ite	le
 811720c:	f1c1 0202 	rsble	r2, r1, #2
 8117210:	2201      	movgt	r2, #1
 8117212:	4413      	add	r3, r2
 8117214:	e7e0      	b.n	81171d8 <_printf_float+0x1a4>
 8117216:	6823      	ldr	r3, [r4, #0]
 8117218:	055a      	lsls	r2, r3, #21
 811721a:	d407      	bmi.n	811722c <_printf_float+0x1f8>
 811721c:	6923      	ldr	r3, [r4, #16]
 811721e:	4642      	mov	r2, r8
 8117220:	4631      	mov	r1, r6
 8117222:	4628      	mov	r0, r5
 8117224:	47b8      	blx	r7
 8117226:	3001      	adds	r0, #1
 8117228:	d12c      	bne.n	8117284 <_printf_float+0x250>
 811722a:	e764      	b.n	81170f6 <_printf_float+0xc2>
 811722c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8117230:	f240 80e0 	bls.w	81173f4 <_printf_float+0x3c0>
 8117234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8117238:	2200      	movs	r2, #0
 811723a:	2300      	movs	r3, #0
 811723c:	f7e9 fccc 	bl	8100bd8 <__aeabi_dcmpeq>
 8117240:	2800      	cmp	r0, #0
 8117242:	d034      	beq.n	81172ae <_printf_float+0x27a>
 8117244:	4a37      	ldr	r2, [pc, #220]	; (8117324 <_printf_float+0x2f0>)
 8117246:	2301      	movs	r3, #1
 8117248:	4631      	mov	r1, r6
 811724a:	4628      	mov	r0, r5
 811724c:	47b8      	blx	r7
 811724e:	3001      	adds	r0, #1
 8117250:	f43f af51 	beq.w	81170f6 <_printf_float+0xc2>
 8117254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8117258:	429a      	cmp	r2, r3
 811725a:	db02      	blt.n	8117262 <_printf_float+0x22e>
 811725c:	6823      	ldr	r3, [r4, #0]
 811725e:	07d8      	lsls	r0, r3, #31
 8117260:	d510      	bpl.n	8117284 <_printf_float+0x250>
 8117262:	ee18 3a10 	vmov	r3, s16
 8117266:	4652      	mov	r2, sl
 8117268:	4631      	mov	r1, r6
 811726a:	4628      	mov	r0, r5
 811726c:	47b8      	blx	r7
 811726e:	3001      	adds	r0, #1
 8117270:	f43f af41 	beq.w	81170f6 <_printf_float+0xc2>
 8117274:	f04f 0800 	mov.w	r8, #0
 8117278:	f104 091a 	add.w	r9, r4, #26
 811727c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811727e:	3b01      	subs	r3, #1
 8117280:	4543      	cmp	r3, r8
 8117282:	dc09      	bgt.n	8117298 <_printf_float+0x264>
 8117284:	6823      	ldr	r3, [r4, #0]
 8117286:	079b      	lsls	r3, r3, #30
 8117288:	f100 8105 	bmi.w	8117496 <_printf_float+0x462>
 811728c:	68e0      	ldr	r0, [r4, #12]
 811728e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8117290:	4298      	cmp	r0, r3
 8117292:	bfb8      	it	lt
 8117294:	4618      	movlt	r0, r3
 8117296:	e730      	b.n	81170fa <_printf_float+0xc6>
 8117298:	2301      	movs	r3, #1
 811729a:	464a      	mov	r2, r9
 811729c:	4631      	mov	r1, r6
 811729e:	4628      	mov	r0, r5
 81172a0:	47b8      	blx	r7
 81172a2:	3001      	adds	r0, #1
 81172a4:	f43f af27 	beq.w	81170f6 <_printf_float+0xc2>
 81172a8:	f108 0801 	add.w	r8, r8, #1
 81172ac:	e7e6      	b.n	811727c <_printf_float+0x248>
 81172ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81172b0:	2b00      	cmp	r3, #0
 81172b2:	dc39      	bgt.n	8117328 <_printf_float+0x2f4>
 81172b4:	4a1b      	ldr	r2, [pc, #108]	; (8117324 <_printf_float+0x2f0>)
 81172b6:	2301      	movs	r3, #1
 81172b8:	4631      	mov	r1, r6
 81172ba:	4628      	mov	r0, r5
 81172bc:	47b8      	blx	r7
 81172be:	3001      	adds	r0, #1
 81172c0:	f43f af19 	beq.w	81170f6 <_printf_float+0xc2>
 81172c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81172c8:	4313      	orrs	r3, r2
 81172ca:	d102      	bne.n	81172d2 <_printf_float+0x29e>
 81172cc:	6823      	ldr	r3, [r4, #0]
 81172ce:	07d9      	lsls	r1, r3, #31
 81172d0:	d5d8      	bpl.n	8117284 <_printf_float+0x250>
 81172d2:	ee18 3a10 	vmov	r3, s16
 81172d6:	4652      	mov	r2, sl
 81172d8:	4631      	mov	r1, r6
 81172da:	4628      	mov	r0, r5
 81172dc:	47b8      	blx	r7
 81172de:	3001      	adds	r0, #1
 81172e0:	f43f af09 	beq.w	81170f6 <_printf_float+0xc2>
 81172e4:	f04f 0900 	mov.w	r9, #0
 81172e8:	f104 0a1a 	add.w	sl, r4, #26
 81172ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81172ee:	425b      	negs	r3, r3
 81172f0:	454b      	cmp	r3, r9
 81172f2:	dc01      	bgt.n	81172f8 <_printf_float+0x2c4>
 81172f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81172f6:	e792      	b.n	811721e <_printf_float+0x1ea>
 81172f8:	2301      	movs	r3, #1
 81172fa:	4652      	mov	r2, sl
 81172fc:	4631      	mov	r1, r6
 81172fe:	4628      	mov	r0, r5
 8117300:	47b8      	blx	r7
 8117302:	3001      	adds	r0, #1
 8117304:	f43f aef7 	beq.w	81170f6 <_printf_float+0xc2>
 8117308:	f109 0901 	add.w	r9, r9, #1
 811730c:	e7ee      	b.n	81172ec <_printf_float+0x2b8>
 811730e:	bf00      	nop
 8117310:	7fefffff 	.word	0x7fefffff
 8117314:	0811b914 	.word	0x0811b914
 8117318:	0811b918 	.word	0x0811b918
 811731c:	0811b920 	.word	0x0811b920
 8117320:	0811b91c 	.word	0x0811b91c
 8117324:	0811b924 	.word	0x0811b924
 8117328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811732a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 811732c:	429a      	cmp	r2, r3
 811732e:	bfa8      	it	ge
 8117330:	461a      	movge	r2, r3
 8117332:	2a00      	cmp	r2, #0
 8117334:	4691      	mov	r9, r2
 8117336:	dc37      	bgt.n	81173a8 <_printf_float+0x374>
 8117338:	f04f 0b00 	mov.w	fp, #0
 811733c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8117340:	f104 021a 	add.w	r2, r4, #26
 8117344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8117346:	9305      	str	r3, [sp, #20]
 8117348:	eba3 0309 	sub.w	r3, r3, r9
 811734c:	455b      	cmp	r3, fp
 811734e:	dc33      	bgt.n	81173b8 <_printf_float+0x384>
 8117350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8117354:	429a      	cmp	r2, r3
 8117356:	db3b      	blt.n	81173d0 <_printf_float+0x39c>
 8117358:	6823      	ldr	r3, [r4, #0]
 811735a:	07da      	lsls	r2, r3, #31
 811735c:	d438      	bmi.n	81173d0 <_printf_float+0x39c>
 811735e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8117360:	9b05      	ldr	r3, [sp, #20]
 8117362:	9909      	ldr	r1, [sp, #36]	; 0x24
 8117364:	1ad3      	subs	r3, r2, r3
 8117366:	eba2 0901 	sub.w	r9, r2, r1
 811736a:	4599      	cmp	r9, r3
 811736c:	bfa8      	it	ge
 811736e:	4699      	movge	r9, r3
 8117370:	f1b9 0f00 	cmp.w	r9, #0
 8117374:	dc35      	bgt.n	81173e2 <_printf_float+0x3ae>
 8117376:	f04f 0800 	mov.w	r8, #0
 811737a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811737e:	f104 0a1a 	add.w	sl, r4, #26
 8117382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8117386:	1a9b      	subs	r3, r3, r2
 8117388:	eba3 0309 	sub.w	r3, r3, r9
 811738c:	4543      	cmp	r3, r8
 811738e:	f77f af79 	ble.w	8117284 <_printf_float+0x250>
 8117392:	2301      	movs	r3, #1
 8117394:	4652      	mov	r2, sl
 8117396:	4631      	mov	r1, r6
 8117398:	4628      	mov	r0, r5
 811739a:	47b8      	blx	r7
 811739c:	3001      	adds	r0, #1
 811739e:	f43f aeaa 	beq.w	81170f6 <_printf_float+0xc2>
 81173a2:	f108 0801 	add.w	r8, r8, #1
 81173a6:	e7ec      	b.n	8117382 <_printf_float+0x34e>
 81173a8:	4613      	mov	r3, r2
 81173aa:	4631      	mov	r1, r6
 81173ac:	4642      	mov	r2, r8
 81173ae:	4628      	mov	r0, r5
 81173b0:	47b8      	blx	r7
 81173b2:	3001      	adds	r0, #1
 81173b4:	d1c0      	bne.n	8117338 <_printf_float+0x304>
 81173b6:	e69e      	b.n	81170f6 <_printf_float+0xc2>
 81173b8:	2301      	movs	r3, #1
 81173ba:	4631      	mov	r1, r6
 81173bc:	4628      	mov	r0, r5
 81173be:	9205      	str	r2, [sp, #20]
 81173c0:	47b8      	blx	r7
 81173c2:	3001      	adds	r0, #1
 81173c4:	f43f ae97 	beq.w	81170f6 <_printf_float+0xc2>
 81173c8:	9a05      	ldr	r2, [sp, #20]
 81173ca:	f10b 0b01 	add.w	fp, fp, #1
 81173ce:	e7b9      	b.n	8117344 <_printf_float+0x310>
 81173d0:	ee18 3a10 	vmov	r3, s16
 81173d4:	4652      	mov	r2, sl
 81173d6:	4631      	mov	r1, r6
 81173d8:	4628      	mov	r0, r5
 81173da:	47b8      	blx	r7
 81173dc:	3001      	adds	r0, #1
 81173de:	d1be      	bne.n	811735e <_printf_float+0x32a>
 81173e0:	e689      	b.n	81170f6 <_printf_float+0xc2>
 81173e2:	9a05      	ldr	r2, [sp, #20]
 81173e4:	464b      	mov	r3, r9
 81173e6:	4442      	add	r2, r8
 81173e8:	4631      	mov	r1, r6
 81173ea:	4628      	mov	r0, r5
 81173ec:	47b8      	blx	r7
 81173ee:	3001      	adds	r0, #1
 81173f0:	d1c1      	bne.n	8117376 <_printf_float+0x342>
 81173f2:	e680      	b.n	81170f6 <_printf_float+0xc2>
 81173f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81173f6:	2a01      	cmp	r2, #1
 81173f8:	dc01      	bgt.n	81173fe <_printf_float+0x3ca>
 81173fa:	07db      	lsls	r3, r3, #31
 81173fc:	d538      	bpl.n	8117470 <_printf_float+0x43c>
 81173fe:	2301      	movs	r3, #1
 8117400:	4642      	mov	r2, r8
 8117402:	4631      	mov	r1, r6
 8117404:	4628      	mov	r0, r5
 8117406:	47b8      	blx	r7
 8117408:	3001      	adds	r0, #1
 811740a:	f43f ae74 	beq.w	81170f6 <_printf_float+0xc2>
 811740e:	ee18 3a10 	vmov	r3, s16
 8117412:	4652      	mov	r2, sl
 8117414:	4631      	mov	r1, r6
 8117416:	4628      	mov	r0, r5
 8117418:	47b8      	blx	r7
 811741a:	3001      	adds	r0, #1
 811741c:	f43f ae6b 	beq.w	81170f6 <_printf_float+0xc2>
 8117420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8117424:	2200      	movs	r2, #0
 8117426:	2300      	movs	r3, #0
 8117428:	f7e9 fbd6 	bl	8100bd8 <__aeabi_dcmpeq>
 811742c:	b9d8      	cbnz	r0, 8117466 <_printf_float+0x432>
 811742e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8117430:	f108 0201 	add.w	r2, r8, #1
 8117434:	3b01      	subs	r3, #1
 8117436:	4631      	mov	r1, r6
 8117438:	4628      	mov	r0, r5
 811743a:	47b8      	blx	r7
 811743c:	3001      	adds	r0, #1
 811743e:	d10e      	bne.n	811745e <_printf_float+0x42a>
 8117440:	e659      	b.n	81170f6 <_printf_float+0xc2>
 8117442:	2301      	movs	r3, #1
 8117444:	4652      	mov	r2, sl
 8117446:	4631      	mov	r1, r6
 8117448:	4628      	mov	r0, r5
 811744a:	47b8      	blx	r7
 811744c:	3001      	adds	r0, #1
 811744e:	f43f ae52 	beq.w	81170f6 <_printf_float+0xc2>
 8117452:	f108 0801 	add.w	r8, r8, #1
 8117456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8117458:	3b01      	subs	r3, #1
 811745a:	4543      	cmp	r3, r8
 811745c:	dcf1      	bgt.n	8117442 <_printf_float+0x40e>
 811745e:	464b      	mov	r3, r9
 8117460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8117464:	e6dc      	b.n	8117220 <_printf_float+0x1ec>
 8117466:	f04f 0800 	mov.w	r8, #0
 811746a:	f104 0a1a 	add.w	sl, r4, #26
 811746e:	e7f2      	b.n	8117456 <_printf_float+0x422>
 8117470:	2301      	movs	r3, #1
 8117472:	4642      	mov	r2, r8
 8117474:	e7df      	b.n	8117436 <_printf_float+0x402>
 8117476:	2301      	movs	r3, #1
 8117478:	464a      	mov	r2, r9
 811747a:	4631      	mov	r1, r6
 811747c:	4628      	mov	r0, r5
 811747e:	47b8      	blx	r7
 8117480:	3001      	adds	r0, #1
 8117482:	f43f ae38 	beq.w	81170f6 <_printf_float+0xc2>
 8117486:	f108 0801 	add.w	r8, r8, #1
 811748a:	68e3      	ldr	r3, [r4, #12]
 811748c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 811748e:	1a5b      	subs	r3, r3, r1
 8117490:	4543      	cmp	r3, r8
 8117492:	dcf0      	bgt.n	8117476 <_printf_float+0x442>
 8117494:	e6fa      	b.n	811728c <_printf_float+0x258>
 8117496:	f04f 0800 	mov.w	r8, #0
 811749a:	f104 0919 	add.w	r9, r4, #25
 811749e:	e7f4      	b.n	811748a <_printf_float+0x456>

081174a0 <_printf_common>:
 81174a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81174a4:	4616      	mov	r6, r2
 81174a6:	4699      	mov	r9, r3
 81174a8:	688a      	ldr	r2, [r1, #8]
 81174aa:	690b      	ldr	r3, [r1, #16]
 81174ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81174b0:	4293      	cmp	r3, r2
 81174b2:	bfb8      	it	lt
 81174b4:	4613      	movlt	r3, r2
 81174b6:	6033      	str	r3, [r6, #0]
 81174b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81174bc:	4607      	mov	r7, r0
 81174be:	460c      	mov	r4, r1
 81174c0:	b10a      	cbz	r2, 81174c6 <_printf_common+0x26>
 81174c2:	3301      	adds	r3, #1
 81174c4:	6033      	str	r3, [r6, #0]
 81174c6:	6823      	ldr	r3, [r4, #0]
 81174c8:	0699      	lsls	r1, r3, #26
 81174ca:	bf42      	ittt	mi
 81174cc:	6833      	ldrmi	r3, [r6, #0]
 81174ce:	3302      	addmi	r3, #2
 81174d0:	6033      	strmi	r3, [r6, #0]
 81174d2:	6825      	ldr	r5, [r4, #0]
 81174d4:	f015 0506 	ands.w	r5, r5, #6
 81174d8:	d106      	bne.n	81174e8 <_printf_common+0x48>
 81174da:	f104 0a19 	add.w	sl, r4, #25
 81174de:	68e3      	ldr	r3, [r4, #12]
 81174e0:	6832      	ldr	r2, [r6, #0]
 81174e2:	1a9b      	subs	r3, r3, r2
 81174e4:	42ab      	cmp	r3, r5
 81174e6:	dc26      	bgt.n	8117536 <_printf_common+0x96>
 81174e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81174ec:	1e13      	subs	r3, r2, #0
 81174ee:	6822      	ldr	r2, [r4, #0]
 81174f0:	bf18      	it	ne
 81174f2:	2301      	movne	r3, #1
 81174f4:	0692      	lsls	r2, r2, #26
 81174f6:	d42b      	bmi.n	8117550 <_printf_common+0xb0>
 81174f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81174fc:	4649      	mov	r1, r9
 81174fe:	4638      	mov	r0, r7
 8117500:	47c0      	blx	r8
 8117502:	3001      	adds	r0, #1
 8117504:	d01e      	beq.n	8117544 <_printf_common+0xa4>
 8117506:	6823      	ldr	r3, [r4, #0]
 8117508:	68e5      	ldr	r5, [r4, #12]
 811750a:	6832      	ldr	r2, [r6, #0]
 811750c:	f003 0306 	and.w	r3, r3, #6
 8117510:	2b04      	cmp	r3, #4
 8117512:	bf08      	it	eq
 8117514:	1aad      	subeq	r5, r5, r2
 8117516:	68a3      	ldr	r3, [r4, #8]
 8117518:	6922      	ldr	r2, [r4, #16]
 811751a:	bf0c      	ite	eq
 811751c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8117520:	2500      	movne	r5, #0
 8117522:	4293      	cmp	r3, r2
 8117524:	bfc4      	itt	gt
 8117526:	1a9b      	subgt	r3, r3, r2
 8117528:	18ed      	addgt	r5, r5, r3
 811752a:	2600      	movs	r6, #0
 811752c:	341a      	adds	r4, #26
 811752e:	42b5      	cmp	r5, r6
 8117530:	d11a      	bne.n	8117568 <_printf_common+0xc8>
 8117532:	2000      	movs	r0, #0
 8117534:	e008      	b.n	8117548 <_printf_common+0xa8>
 8117536:	2301      	movs	r3, #1
 8117538:	4652      	mov	r2, sl
 811753a:	4649      	mov	r1, r9
 811753c:	4638      	mov	r0, r7
 811753e:	47c0      	blx	r8
 8117540:	3001      	adds	r0, #1
 8117542:	d103      	bne.n	811754c <_printf_common+0xac>
 8117544:	f04f 30ff 	mov.w	r0, #4294967295
 8117548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811754c:	3501      	adds	r5, #1
 811754e:	e7c6      	b.n	81174de <_printf_common+0x3e>
 8117550:	18e1      	adds	r1, r4, r3
 8117552:	1c5a      	adds	r2, r3, #1
 8117554:	2030      	movs	r0, #48	; 0x30
 8117556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 811755a:	4422      	add	r2, r4
 811755c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8117560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8117564:	3302      	adds	r3, #2
 8117566:	e7c7      	b.n	81174f8 <_printf_common+0x58>
 8117568:	2301      	movs	r3, #1
 811756a:	4622      	mov	r2, r4
 811756c:	4649      	mov	r1, r9
 811756e:	4638      	mov	r0, r7
 8117570:	47c0      	blx	r8
 8117572:	3001      	adds	r0, #1
 8117574:	d0e6      	beq.n	8117544 <_printf_common+0xa4>
 8117576:	3601      	adds	r6, #1
 8117578:	e7d9      	b.n	811752e <_printf_common+0x8e>
	...

0811757c <_printf_i>:
 811757c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8117580:	460c      	mov	r4, r1
 8117582:	4691      	mov	r9, r2
 8117584:	7e27      	ldrb	r7, [r4, #24]
 8117586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8117588:	2f78      	cmp	r7, #120	; 0x78
 811758a:	4680      	mov	r8, r0
 811758c:	469a      	mov	sl, r3
 811758e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8117592:	d807      	bhi.n	81175a4 <_printf_i+0x28>
 8117594:	2f62      	cmp	r7, #98	; 0x62
 8117596:	d80a      	bhi.n	81175ae <_printf_i+0x32>
 8117598:	2f00      	cmp	r7, #0
 811759a:	f000 80d8 	beq.w	811774e <_printf_i+0x1d2>
 811759e:	2f58      	cmp	r7, #88	; 0x58
 81175a0:	f000 80a3 	beq.w	81176ea <_printf_i+0x16e>
 81175a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81175a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81175ac:	e03a      	b.n	8117624 <_printf_i+0xa8>
 81175ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81175b2:	2b15      	cmp	r3, #21
 81175b4:	d8f6      	bhi.n	81175a4 <_printf_i+0x28>
 81175b6:	a001      	add	r0, pc, #4	; (adr r0, 81175bc <_printf_i+0x40>)
 81175b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81175bc:	08117615 	.word	0x08117615
 81175c0:	08117629 	.word	0x08117629
 81175c4:	081175a5 	.word	0x081175a5
 81175c8:	081175a5 	.word	0x081175a5
 81175cc:	081175a5 	.word	0x081175a5
 81175d0:	081175a5 	.word	0x081175a5
 81175d4:	08117629 	.word	0x08117629
 81175d8:	081175a5 	.word	0x081175a5
 81175dc:	081175a5 	.word	0x081175a5
 81175e0:	081175a5 	.word	0x081175a5
 81175e4:	081175a5 	.word	0x081175a5
 81175e8:	08117735 	.word	0x08117735
 81175ec:	08117659 	.word	0x08117659
 81175f0:	08117717 	.word	0x08117717
 81175f4:	081175a5 	.word	0x081175a5
 81175f8:	081175a5 	.word	0x081175a5
 81175fc:	08117757 	.word	0x08117757
 8117600:	081175a5 	.word	0x081175a5
 8117604:	08117659 	.word	0x08117659
 8117608:	081175a5 	.word	0x081175a5
 811760c:	081175a5 	.word	0x081175a5
 8117610:	0811771f 	.word	0x0811771f
 8117614:	680b      	ldr	r3, [r1, #0]
 8117616:	1d1a      	adds	r2, r3, #4
 8117618:	681b      	ldr	r3, [r3, #0]
 811761a:	600a      	str	r2, [r1, #0]
 811761c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8117620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8117624:	2301      	movs	r3, #1
 8117626:	e0a3      	b.n	8117770 <_printf_i+0x1f4>
 8117628:	6825      	ldr	r5, [r4, #0]
 811762a:	6808      	ldr	r0, [r1, #0]
 811762c:	062e      	lsls	r6, r5, #24
 811762e:	f100 0304 	add.w	r3, r0, #4
 8117632:	d50a      	bpl.n	811764a <_printf_i+0xce>
 8117634:	6805      	ldr	r5, [r0, #0]
 8117636:	600b      	str	r3, [r1, #0]
 8117638:	2d00      	cmp	r5, #0
 811763a:	da03      	bge.n	8117644 <_printf_i+0xc8>
 811763c:	232d      	movs	r3, #45	; 0x2d
 811763e:	426d      	negs	r5, r5
 8117640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8117644:	485e      	ldr	r0, [pc, #376]	; (81177c0 <_printf_i+0x244>)
 8117646:	230a      	movs	r3, #10
 8117648:	e019      	b.n	811767e <_printf_i+0x102>
 811764a:	f015 0f40 	tst.w	r5, #64	; 0x40
 811764e:	6805      	ldr	r5, [r0, #0]
 8117650:	600b      	str	r3, [r1, #0]
 8117652:	bf18      	it	ne
 8117654:	b22d      	sxthne	r5, r5
 8117656:	e7ef      	b.n	8117638 <_printf_i+0xbc>
 8117658:	680b      	ldr	r3, [r1, #0]
 811765a:	6825      	ldr	r5, [r4, #0]
 811765c:	1d18      	adds	r0, r3, #4
 811765e:	6008      	str	r0, [r1, #0]
 8117660:	0628      	lsls	r0, r5, #24
 8117662:	d501      	bpl.n	8117668 <_printf_i+0xec>
 8117664:	681d      	ldr	r5, [r3, #0]
 8117666:	e002      	b.n	811766e <_printf_i+0xf2>
 8117668:	0669      	lsls	r1, r5, #25
 811766a:	d5fb      	bpl.n	8117664 <_printf_i+0xe8>
 811766c:	881d      	ldrh	r5, [r3, #0]
 811766e:	4854      	ldr	r0, [pc, #336]	; (81177c0 <_printf_i+0x244>)
 8117670:	2f6f      	cmp	r7, #111	; 0x6f
 8117672:	bf0c      	ite	eq
 8117674:	2308      	moveq	r3, #8
 8117676:	230a      	movne	r3, #10
 8117678:	2100      	movs	r1, #0
 811767a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 811767e:	6866      	ldr	r6, [r4, #4]
 8117680:	60a6      	str	r6, [r4, #8]
 8117682:	2e00      	cmp	r6, #0
 8117684:	bfa2      	ittt	ge
 8117686:	6821      	ldrge	r1, [r4, #0]
 8117688:	f021 0104 	bicge.w	r1, r1, #4
 811768c:	6021      	strge	r1, [r4, #0]
 811768e:	b90d      	cbnz	r5, 8117694 <_printf_i+0x118>
 8117690:	2e00      	cmp	r6, #0
 8117692:	d04d      	beq.n	8117730 <_printf_i+0x1b4>
 8117694:	4616      	mov	r6, r2
 8117696:	fbb5 f1f3 	udiv	r1, r5, r3
 811769a:	fb03 5711 	mls	r7, r3, r1, r5
 811769e:	5dc7      	ldrb	r7, [r0, r7]
 81176a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81176a4:	462f      	mov	r7, r5
 81176a6:	42bb      	cmp	r3, r7
 81176a8:	460d      	mov	r5, r1
 81176aa:	d9f4      	bls.n	8117696 <_printf_i+0x11a>
 81176ac:	2b08      	cmp	r3, #8
 81176ae:	d10b      	bne.n	81176c8 <_printf_i+0x14c>
 81176b0:	6823      	ldr	r3, [r4, #0]
 81176b2:	07df      	lsls	r7, r3, #31
 81176b4:	d508      	bpl.n	81176c8 <_printf_i+0x14c>
 81176b6:	6923      	ldr	r3, [r4, #16]
 81176b8:	6861      	ldr	r1, [r4, #4]
 81176ba:	4299      	cmp	r1, r3
 81176bc:	bfde      	ittt	le
 81176be:	2330      	movle	r3, #48	; 0x30
 81176c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 81176c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 81176c8:	1b92      	subs	r2, r2, r6
 81176ca:	6122      	str	r2, [r4, #16]
 81176cc:	f8cd a000 	str.w	sl, [sp]
 81176d0:	464b      	mov	r3, r9
 81176d2:	aa03      	add	r2, sp, #12
 81176d4:	4621      	mov	r1, r4
 81176d6:	4640      	mov	r0, r8
 81176d8:	f7ff fee2 	bl	81174a0 <_printf_common>
 81176dc:	3001      	adds	r0, #1
 81176de:	d14c      	bne.n	811777a <_printf_i+0x1fe>
 81176e0:	f04f 30ff 	mov.w	r0, #4294967295
 81176e4:	b004      	add	sp, #16
 81176e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81176ea:	4835      	ldr	r0, [pc, #212]	; (81177c0 <_printf_i+0x244>)
 81176ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81176f0:	6823      	ldr	r3, [r4, #0]
 81176f2:	680e      	ldr	r6, [r1, #0]
 81176f4:	061f      	lsls	r7, r3, #24
 81176f6:	f856 5b04 	ldr.w	r5, [r6], #4
 81176fa:	600e      	str	r6, [r1, #0]
 81176fc:	d514      	bpl.n	8117728 <_printf_i+0x1ac>
 81176fe:	07d9      	lsls	r1, r3, #31
 8117700:	bf44      	itt	mi
 8117702:	f043 0320 	orrmi.w	r3, r3, #32
 8117706:	6023      	strmi	r3, [r4, #0]
 8117708:	b91d      	cbnz	r5, 8117712 <_printf_i+0x196>
 811770a:	6823      	ldr	r3, [r4, #0]
 811770c:	f023 0320 	bic.w	r3, r3, #32
 8117710:	6023      	str	r3, [r4, #0]
 8117712:	2310      	movs	r3, #16
 8117714:	e7b0      	b.n	8117678 <_printf_i+0xfc>
 8117716:	6823      	ldr	r3, [r4, #0]
 8117718:	f043 0320 	orr.w	r3, r3, #32
 811771c:	6023      	str	r3, [r4, #0]
 811771e:	2378      	movs	r3, #120	; 0x78
 8117720:	4828      	ldr	r0, [pc, #160]	; (81177c4 <_printf_i+0x248>)
 8117722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8117726:	e7e3      	b.n	81176f0 <_printf_i+0x174>
 8117728:	065e      	lsls	r6, r3, #25
 811772a:	bf48      	it	mi
 811772c:	b2ad      	uxthmi	r5, r5
 811772e:	e7e6      	b.n	81176fe <_printf_i+0x182>
 8117730:	4616      	mov	r6, r2
 8117732:	e7bb      	b.n	81176ac <_printf_i+0x130>
 8117734:	680b      	ldr	r3, [r1, #0]
 8117736:	6826      	ldr	r6, [r4, #0]
 8117738:	6960      	ldr	r0, [r4, #20]
 811773a:	1d1d      	adds	r5, r3, #4
 811773c:	600d      	str	r5, [r1, #0]
 811773e:	0635      	lsls	r5, r6, #24
 8117740:	681b      	ldr	r3, [r3, #0]
 8117742:	d501      	bpl.n	8117748 <_printf_i+0x1cc>
 8117744:	6018      	str	r0, [r3, #0]
 8117746:	e002      	b.n	811774e <_printf_i+0x1d2>
 8117748:	0671      	lsls	r1, r6, #25
 811774a:	d5fb      	bpl.n	8117744 <_printf_i+0x1c8>
 811774c:	8018      	strh	r0, [r3, #0]
 811774e:	2300      	movs	r3, #0
 8117750:	6123      	str	r3, [r4, #16]
 8117752:	4616      	mov	r6, r2
 8117754:	e7ba      	b.n	81176cc <_printf_i+0x150>
 8117756:	680b      	ldr	r3, [r1, #0]
 8117758:	1d1a      	adds	r2, r3, #4
 811775a:	600a      	str	r2, [r1, #0]
 811775c:	681e      	ldr	r6, [r3, #0]
 811775e:	6862      	ldr	r2, [r4, #4]
 8117760:	2100      	movs	r1, #0
 8117762:	4630      	mov	r0, r6
 8117764:	f7e8 fdc4 	bl	81002f0 <memchr>
 8117768:	b108      	cbz	r0, 811776e <_printf_i+0x1f2>
 811776a:	1b80      	subs	r0, r0, r6
 811776c:	6060      	str	r0, [r4, #4]
 811776e:	6863      	ldr	r3, [r4, #4]
 8117770:	6123      	str	r3, [r4, #16]
 8117772:	2300      	movs	r3, #0
 8117774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8117778:	e7a8      	b.n	81176cc <_printf_i+0x150>
 811777a:	6923      	ldr	r3, [r4, #16]
 811777c:	4632      	mov	r2, r6
 811777e:	4649      	mov	r1, r9
 8117780:	4640      	mov	r0, r8
 8117782:	47d0      	blx	sl
 8117784:	3001      	adds	r0, #1
 8117786:	d0ab      	beq.n	81176e0 <_printf_i+0x164>
 8117788:	6823      	ldr	r3, [r4, #0]
 811778a:	079b      	lsls	r3, r3, #30
 811778c:	d413      	bmi.n	81177b6 <_printf_i+0x23a>
 811778e:	68e0      	ldr	r0, [r4, #12]
 8117790:	9b03      	ldr	r3, [sp, #12]
 8117792:	4298      	cmp	r0, r3
 8117794:	bfb8      	it	lt
 8117796:	4618      	movlt	r0, r3
 8117798:	e7a4      	b.n	81176e4 <_printf_i+0x168>
 811779a:	2301      	movs	r3, #1
 811779c:	4632      	mov	r2, r6
 811779e:	4649      	mov	r1, r9
 81177a0:	4640      	mov	r0, r8
 81177a2:	47d0      	blx	sl
 81177a4:	3001      	adds	r0, #1
 81177a6:	d09b      	beq.n	81176e0 <_printf_i+0x164>
 81177a8:	3501      	adds	r5, #1
 81177aa:	68e3      	ldr	r3, [r4, #12]
 81177ac:	9903      	ldr	r1, [sp, #12]
 81177ae:	1a5b      	subs	r3, r3, r1
 81177b0:	42ab      	cmp	r3, r5
 81177b2:	dcf2      	bgt.n	811779a <_printf_i+0x21e>
 81177b4:	e7eb      	b.n	811778e <_printf_i+0x212>
 81177b6:	2500      	movs	r5, #0
 81177b8:	f104 0619 	add.w	r6, r4, #25
 81177bc:	e7f5      	b.n	81177aa <_printf_i+0x22e>
 81177be:	bf00      	nop
 81177c0:	0811b926 	.word	0x0811b926
 81177c4:	0811b937 	.word	0x0811b937

081177c8 <iprintf>:
 81177c8:	b40f      	push	{r0, r1, r2, r3}
 81177ca:	4b0a      	ldr	r3, [pc, #40]	; (81177f4 <iprintf+0x2c>)
 81177cc:	b513      	push	{r0, r1, r4, lr}
 81177ce:	681c      	ldr	r4, [r3, #0]
 81177d0:	b124      	cbz	r4, 81177dc <iprintf+0x14>
 81177d2:	69a3      	ldr	r3, [r4, #24]
 81177d4:	b913      	cbnz	r3, 81177dc <iprintf+0x14>
 81177d6:	4620      	mov	r0, r4
 81177d8:	f7ff fa48 	bl	8116c6c <__sinit>
 81177dc:	ab05      	add	r3, sp, #20
 81177de:	9a04      	ldr	r2, [sp, #16]
 81177e0:	68a1      	ldr	r1, [r4, #8]
 81177e2:	9301      	str	r3, [sp, #4]
 81177e4:	4620      	mov	r0, r4
 81177e6:	f001 ff35 	bl	8119654 <_vfiprintf_r>
 81177ea:	b002      	add	sp, #8
 81177ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81177f0:	b004      	add	sp, #16
 81177f2:	4770      	bx	lr
 81177f4:	1000002c 	.word	0x1000002c

081177f8 <_puts_r>:
 81177f8:	b570      	push	{r4, r5, r6, lr}
 81177fa:	460e      	mov	r6, r1
 81177fc:	4605      	mov	r5, r0
 81177fe:	b118      	cbz	r0, 8117808 <_puts_r+0x10>
 8117800:	6983      	ldr	r3, [r0, #24]
 8117802:	b90b      	cbnz	r3, 8117808 <_puts_r+0x10>
 8117804:	f7ff fa32 	bl	8116c6c <__sinit>
 8117808:	69ab      	ldr	r3, [r5, #24]
 811780a:	68ac      	ldr	r4, [r5, #8]
 811780c:	b913      	cbnz	r3, 8117814 <_puts_r+0x1c>
 811780e:	4628      	mov	r0, r5
 8117810:	f7ff fa2c 	bl	8116c6c <__sinit>
 8117814:	4b2c      	ldr	r3, [pc, #176]	; (81178c8 <_puts_r+0xd0>)
 8117816:	429c      	cmp	r4, r3
 8117818:	d120      	bne.n	811785c <_puts_r+0x64>
 811781a:	686c      	ldr	r4, [r5, #4]
 811781c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 811781e:	07db      	lsls	r3, r3, #31
 8117820:	d405      	bmi.n	811782e <_puts_r+0x36>
 8117822:	89a3      	ldrh	r3, [r4, #12]
 8117824:	0598      	lsls	r0, r3, #22
 8117826:	d402      	bmi.n	811782e <_puts_r+0x36>
 8117828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811782a:	f7ff fae2 	bl	8116df2 <__retarget_lock_acquire_recursive>
 811782e:	89a3      	ldrh	r3, [r4, #12]
 8117830:	0719      	lsls	r1, r3, #28
 8117832:	d51d      	bpl.n	8117870 <_puts_r+0x78>
 8117834:	6923      	ldr	r3, [r4, #16]
 8117836:	b1db      	cbz	r3, 8117870 <_puts_r+0x78>
 8117838:	3e01      	subs	r6, #1
 811783a:	68a3      	ldr	r3, [r4, #8]
 811783c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8117840:	3b01      	subs	r3, #1
 8117842:	60a3      	str	r3, [r4, #8]
 8117844:	bb39      	cbnz	r1, 8117896 <_puts_r+0x9e>
 8117846:	2b00      	cmp	r3, #0
 8117848:	da38      	bge.n	81178bc <_puts_r+0xc4>
 811784a:	4622      	mov	r2, r4
 811784c:	210a      	movs	r1, #10
 811784e:	4628      	mov	r0, r5
 8117850:	f000 fa1e 	bl	8117c90 <__swbuf_r>
 8117854:	3001      	adds	r0, #1
 8117856:	d011      	beq.n	811787c <_puts_r+0x84>
 8117858:	250a      	movs	r5, #10
 811785a:	e011      	b.n	8117880 <_puts_r+0x88>
 811785c:	4b1b      	ldr	r3, [pc, #108]	; (81178cc <_puts_r+0xd4>)
 811785e:	429c      	cmp	r4, r3
 8117860:	d101      	bne.n	8117866 <_puts_r+0x6e>
 8117862:	68ac      	ldr	r4, [r5, #8]
 8117864:	e7da      	b.n	811781c <_puts_r+0x24>
 8117866:	4b1a      	ldr	r3, [pc, #104]	; (81178d0 <_puts_r+0xd8>)
 8117868:	429c      	cmp	r4, r3
 811786a:	bf08      	it	eq
 811786c:	68ec      	ldreq	r4, [r5, #12]
 811786e:	e7d5      	b.n	811781c <_puts_r+0x24>
 8117870:	4621      	mov	r1, r4
 8117872:	4628      	mov	r0, r5
 8117874:	f000 fa70 	bl	8117d58 <__swsetup_r>
 8117878:	2800      	cmp	r0, #0
 811787a:	d0dd      	beq.n	8117838 <_puts_r+0x40>
 811787c:	f04f 35ff 	mov.w	r5, #4294967295
 8117880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8117882:	07da      	lsls	r2, r3, #31
 8117884:	d405      	bmi.n	8117892 <_puts_r+0x9a>
 8117886:	89a3      	ldrh	r3, [r4, #12]
 8117888:	059b      	lsls	r3, r3, #22
 811788a:	d402      	bmi.n	8117892 <_puts_r+0x9a>
 811788c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811788e:	f7ff fab1 	bl	8116df4 <__retarget_lock_release_recursive>
 8117892:	4628      	mov	r0, r5
 8117894:	bd70      	pop	{r4, r5, r6, pc}
 8117896:	2b00      	cmp	r3, #0
 8117898:	da04      	bge.n	81178a4 <_puts_r+0xac>
 811789a:	69a2      	ldr	r2, [r4, #24]
 811789c:	429a      	cmp	r2, r3
 811789e:	dc06      	bgt.n	81178ae <_puts_r+0xb6>
 81178a0:	290a      	cmp	r1, #10
 81178a2:	d004      	beq.n	81178ae <_puts_r+0xb6>
 81178a4:	6823      	ldr	r3, [r4, #0]
 81178a6:	1c5a      	adds	r2, r3, #1
 81178a8:	6022      	str	r2, [r4, #0]
 81178aa:	7019      	strb	r1, [r3, #0]
 81178ac:	e7c5      	b.n	811783a <_puts_r+0x42>
 81178ae:	4622      	mov	r2, r4
 81178b0:	4628      	mov	r0, r5
 81178b2:	f000 f9ed 	bl	8117c90 <__swbuf_r>
 81178b6:	3001      	adds	r0, #1
 81178b8:	d1bf      	bne.n	811783a <_puts_r+0x42>
 81178ba:	e7df      	b.n	811787c <_puts_r+0x84>
 81178bc:	6823      	ldr	r3, [r4, #0]
 81178be:	250a      	movs	r5, #10
 81178c0:	1c5a      	adds	r2, r3, #1
 81178c2:	6022      	str	r2, [r4, #0]
 81178c4:	701d      	strb	r5, [r3, #0]
 81178c6:	e7db      	b.n	8117880 <_puts_r+0x88>
 81178c8:	0811b8d0 	.word	0x0811b8d0
 81178cc:	0811b8f0 	.word	0x0811b8f0
 81178d0:	0811b8b0 	.word	0x0811b8b0

081178d4 <puts>:
 81178d4:	4b02      	ldr	r3, [pc, #8]	; (81178e0 <puts+0xc>)
 81178d6:	4601      	mov	r1, r0
 81178d8:	6818      	ldr	r0, [r3, #0]
 81178da:	f7ff bf8d 	b.w	81177f8 <_puts_r>
 81178de:	bf00      	nop
 81178e0:	1000002c 	.word	0x1000002c

081178e4 <rand>:
 81178e4:	4b17      	ldr	r3, [pc, #92]	; (8117944 <rand+0x60>)
 81178e6:	b510      	push	{r4, lr}
 81178e8:	681c      	ldr	r4, [r3, #0]
 81178ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 81178ec:	b9b3      	cbnz	r3, 811791c <rand+0x38>
 81178ee:	2018      	movs	r0, #24
 81178f0:	f001 fa94 	bl	8118e1c <malloc>
 81178f4:	63a0      	str	r0, [r4, #56]	; 0x38
 81178f6:	b928      	cbnz	r0, 8117904 <rand+0x20>
 81178f8:	4602      	mov	r2, r0
 81178fa:	4b13      	ldr	r3, [pc, #76]	; (8117948 <rand+0x64>)
 81178fc:	4813      	ldr	r0, [pc, #76]	; (811794c <rand+0x68>)
 81178fe:	214e      	movs	r1, #78	; 0x4e
 8117900:	f000 fa98 	bl	8117e34 <__assert_func>
 8117904:	4a12      	ldr	r2, [pc, #72]	; (8117950 <rand+0x6c>)
 8117906:	4b13      	ldr	r3, [pc, #76]	; (8117954 <rand+0x70>)
 8117908:	e9c0 2300 	strd	r2, r3, [r0]
 811790c:	4b12      	ldr	r3, [pc, #72]	; (8117958 <rand+0x74>)
 811790e:	6083      	str	r3, [r0, #8]
 8117910:	230b      	movs	r3, #11
 8117912:	8183      	strh	r3, [r0, #12]
 8117914:	2201      	movs	r2, #1
 8117916:	2300      	movs	r3, #0
 8117918:	e9c0 2304 	strd	r2, r3, [r0, #16]
 811791c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 811791e:	480f      	ldr	r0, [pc, #60]	; (811795c <rand+0x78>)
 8117920:	690a      	ldr	r2, [r1, #16]
 8117922:	694b      	ldr	r3, [r1, #20]
 8117924:	4c0e      	ldr	r4, [pc, #56]	; (8117960 <rand+0x7c>)
 8117926:	4350      	muls	r0, r2
 8117928:	fb04 0003 	mla	r0, r4, r3, r0
 811792c:	fba2 3404 	umull	r3, r4, r2, r4
 8117930:	1c5a      	adds	r2, r3, #1
 8117932:	4404      	add	r4, r0
 8117934:	f144 0000 	adc.w	r0, r4, #0
 8117938:	e9c1 2004 	strd	r2, r0, [r1, #16]
 811793c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8117940:	bd10      	pop	{r4, pc}
 8117942:	bf00      	nop
 8117944:	1000002c 	.word	0x1000002c
 8117948:	0811b948 	.word	0x0811b948
 811794c:	0811b95f 	.word	0x0811b95f
 8117950:	abcd330e 	.word	0xabcd330e
 8117954:	e66d1234 	.word	0xe66d1234
 8117958:	0005deec 	.word	0x0005deec
 811795c:	5851f42d 	.word	0x5851f42d
 8117960:	4c957f2d 	.word	0x4c957f2d

08117964 <cleanup_glue>:
 8117964:	b538      	push	{r3, r4, r5, lr}
 8117966:	460c      	mov	r4, r1
 8117968:	6809      	ldr	r1, [r1, #0]
 811796a:	4605      	mov	r5, r0
 811796c:	b109      	cbz	r1, 8117972 <cleanup_glue+0xe>
 811796e:	f7ff fff9 	bl	8117964 <cleanup_glue>
 8117972:	4621      	mov	r1, r4
 8117974:	4628      	mov	r0, r5
 8117976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811797a:	f001 bdf1 	b.w	8119560 <_free_r>
	...

08117980 <_reclaim_reent>:
 8117980:	4b2c      	ldr	r3, [pc, #176]	; (8117a34 <_reclaim_reent+0xb4>)
 8117982:	681b      	ldr	r3, [r3, #0]
 8117984:	4283      	cmp	r3, r0
 8117986:	b570      	push	{r4, r5, r6, lr}
 8117988:	4604      	mov	r4, r0
 811798a:	d051      	beq.n	8117a30 <_reclaim_reent+0xb0>
 811798c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 811798e:	b143      	cbz	r3, 81179a2 <_reclaim_reent+0x22>
 8117990:	68db      	ldr	r3, [r3, #12]
 8117992:	2b00      	cmp	r3, #0
 8117994:	d14a      	bne.n	8117a2c <_reclaim_reent+0xac>
 8117996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8117998:	6819      	ldr	r1, [r3, #0]
 811799a:	b111      	cbz	r1, 81179a2 <_reclaim_reent+0x22>
 811799c:	4620      	mov	r0, r4
 811799e:	f001 fddf 	bl	8119560 <_free_r>
 81179a2:	6961      	ldr	r1, [r4, #20]
 81179a4:	b111      	cbz	r1, 81179ac <_reclaim_reent+0x2c>
 81179a6:	4620      	mov	r0, r4
 81179a8:	f001 fdda 	bl	8119560 <_free_r>
 81179ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81179ae:	b111      	cbz	r1, 81179b6 <_reclaim_reent+0x36>
 81179b0:	4620      	mov	r0, r4
 81179b2:	f001 fdd5 	bl	8119560 <_free_r>
 81179b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 81179b8:	b111      	cbz	r1, 81179c0 <_reclaim_reent+0x40>
 81179ba:	4620      	mov	r0, r4
 81179bc:	f001 fdd0 	bl	8119560 <_free_r>
 81179c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 81179c2:	b111      	cbz	r1, 81179ca <_reclaim_reent+0x4a>
 81179c4:	4620      	mov	r0, r4
 81179c6:	f001 fdcb 	bl	8119560 <_free_r>
 81179ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 81179cc:	b111      	cbz	r1, 81179d4 <_reclaim_reent+0x54>
 81179ce:	4620      	mov	r0, r4
 81179d0:	f001 fdc6 	bl	8119560 <_free_r>
 81179d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 81179d6:	b111      	cbz	r1, 81179de <_reclaim_reent+0x5e>
 81179d8:	4620      	mov	r0, r4
 81179da:	f001 fdc1 	bl	8119560 <_free_r>
 81179de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 81179e0:	b111      	cbz	r1, 81179e8 <_reclaim_reent+0x68>
 81179e2:	4620      	mov	r0, r4
 81179e4:	f001 fdbc 	bl	8119560 <_free_r>
 81179e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81179ea:	b111      	cbz	r1, 81179f2 <_reclaim_reent+0x72>
 81179ec:	4620      	mov	r0, r4
 81179ee:	f001 fdb7 	bl	8119560 <_free_r>
 81179f2:	69a3      	ldr	r3, [r4, #24]
 81179f4:	b1e3      	cbz	r3, 8117a30 <_reclaim_reent+0xb0>
 81179f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81179f8:	4620      	mov	r0, r4
 81179fa:	4798      	blx	r3
 81179fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 81179fe:	b1b9      	cbz	r1, 8117a30 <_reclaim_reent+0xb0>
 8117a00:	4620      	mov	r0, r4
 8117a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8117a06:	f7ff bfad 	b.w	8117964 <cleanup_glue>
 8117a0a:	5949      	ldr	r1, [r1, r5]
 8117a0c:	b941      	cbnz	r1, 8117a20 <_reclaim_reent+0xa0>
 8117a0e:	3504      	adds	r5, #4
 8117a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8117a12:	2d80      	cmp	r5, #128	; 0x80
 8117a14:	68d9      	ldr	r1, [r3, #12]
 8117a16:	d1f8      	bne.n	8117a0a <_reclaim_reent+0x8a>
 8117a18:	4620      	mov	r0, r4
 8117a1a:	f001 fda1 	bl	8119560 <_free_r>
 8117a1e:	e7ba      	b.n	8117996 <_reclaim_reent+0x16>
 8117a20:	680e      	ldr	r6, [r1, #0]
 8117a22:	4620      	mov	r0, r4
 8117a24:	f001 fd9c 	bl	8119560 <_free_r>
 8117a28:	4631      	mov	r1, r6
 8117a2a:	e7ef      	b.n	8117a0c <_reclaim_reent+0x8c>
 8117a2c:	2500      	movs	r5, #0
 8117a2e:	e7ef      	b.n	8117a10 <_reclaim_reent+0x90>
 8117a30:	bd70      	pop	{r4, r5, r6, pc}
 8117a32:	bf00      	nop
 8117a34:	1000002c 	.word	0x1000002c

08117a38 <_sbrk_r>:
 8117a38:	b538      	push	{r3, r4, r5, lr}
 8117a3a:	4d06      	ldr	r5, [pc, #24]	; (8117a54 <_sbrk_r+0x1c>)
 8117a3c:	2300      	movs	r3, #0
 8117a3e:	4604      	mov	r4, r0
 8117a40:	4608      	mov	r0, r1
 8117a42:	602b      	str	r3, [r5, #0]
 8117a44:	f7ff f858 	bl	8116af8 <_sbrk>
 8117a48:	1c43      	adds	r3, r0, #1
 8117a4a:	d102      	bne.n	8117a52 <_sbrk_r+0x1a>
 8117a4c:	682b      	ldr	r3, [r5, #0]
 8117a4e:	b103      	cbz	r3, 8117a52 <_sbrk_r+0x1a>
 8117a50:	6023      	str	r3, [r4, #0]
 8117a52:	bd38      	pop	{r3, r4, r5, pc}
 8117a54:	100087d4 	.word	0x100087d4

08117a58 <setvbuf>:
 8117a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8117a5c:	461d      	mov	r5, r3
 8117a5e:	4b5d      	ldr	r3, [pc, #372]	; (8117bd4 <setvbuf+0x17c>)
 8117a60:	681f      	ldr	r7, [r3, #0]
 8117a62:	4604      	mov	r4, r0
 8117a64:	460e      	mov	r6, r1
 8117a66:	4690      	mov	r8, r2
 8117a68:	b127      	cbz	r7, 8117a74 <setvbuf+0x1c>
 8117a6a:	69bb      	ldr	r3, [r7, #24]
 8117a6c:	b913      	cbnz	r3, 8117a74 <setvbuf+0x1c>
 8117a6e:	4638      	mov	r0, r7
 8117a70:	f7ff f8fc 	bl	8116c6c <__sinit>
 8117a74:	4b58      	ldr	r3, [pc, #352]	; (8117bd8 <setvbuf+0x180>)
 8117a76:	429c      	cmp	r4, r3
 8117a78:	d167      	bne.n	8117b4a <setvbuf+0xf2>
 8117a7a:	687c      	ldr	r4, [r7, #4]
 8117a7c:	f1b8 0f02 	cmp.w	r8, #2
 8117a80:	d006      	beq.n	8117a90 <setvbuf+0x38>
 8117a82:	f1b8 0f01 	cmp.w	r8, #1
 8117a86:	f200 809f 	bhi.w	8117bc8 <setvbuf+0x170>
 8117a8a:	2d00      	cmp	r5, #0
 8117a8c:	f2c0 809c 	blt.w	8117bc8 <setvbuf+0x170>
 8117a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8117a92:	07db      	lsls	r3, r3, #31
 8117a94:	d405      	bmi.n	8117aa2 <setvbuf+0x4a>
 8117a96:	89a3      	ldrh	r3, [r4, #12]
 8117a98:	0598      	lsls	r0, r3, #22
 8117a9a:	d402      	bmi.n	8117aa2 <setvbuf+0x4a>
 8117a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8117a9e:	f7ff f9a8 	bl	8116df2 <__retarget_lock_acquire_recursive>
 8117aa2:	4621      	mov	r1, r4
 8117aa4:	4638      	mov	r0, r7
 8117aa6:	f001 f8f1 	bl	8118c8c <_fflush_r>
 8117aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8117aac:	b141      	cbz	r1, 8117ac0 <setvbuf+0x68>
 8117aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8117ab2:	4299      	cmp	r1, r3
 8117ab4:	d002      	beq.n	8117abc <setvbuf+0x64>
 8117ab6:	4638      	mov	r0, r7
 8117ab8:	f001 fd52 	bl	8119560 <_free_r>
 8117abc:	2300      	movs	r3, #0
 8117abe:	6363      	str	r3, [r4, #52]	; 0x34
 8117ac0:	2300      	movs	r3, #0
 8117ac2:	61a3      	str	r3, [r4, #24]
 8117ac4:	6063      	str	r3, [r4, #4]
 8117ac6:	89a3      	ldrh	r3, [r4, #12]
 8117ac8:	0619      	lsls	r1, r3, #24
 8117aca:	d503      	bpl.n	8117ad4 <setvbuf+0x7c>
 8117acc:	6921      	ldr	r1, [r4, #16]
 8117ace:	4638      	mov	r0, r7
 8117ad0:	f001 fd46 	bl	8119560 <_free_r>
 8117ad4:	89a3      	ldrh	r3, [r4, #12]
 8117ad6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8117ada:	f023 0303 	bic.w	r3, r3, #3
 8117ade:	f1b8 0f02 	cmp.w	r8, #2
 8117ae2:	81a3      	strh	r3, [r4, #12]
 8117ae4:	d06c      	beq.n	8117bc0 <setvbuf+0x168>
 8117ae6:	ab01      	add	r3, sp, #4
 8117ae8:	466a      	mov	r2, sp
 8117aea:	4621      	mov	r1, r4
 8117aec:	4638      	mov	r0, r7
 8117aee:	f001 f931 	bl	8118d54 <__swhatbuf_r>
 8117af2:	89a3      	ldrh	r3, [r4, #12]
 8117af4:	4318      	orrs	r0, r3
 8117af6:	81a0      	strh	r0, [r4, #12]
 8117af8:	2d00      	cmp	r5, #0
 8117afa:	d130      	bne.n	8117b5e <setvbuf+0x106>
 8117afc:	9d00      	ldr	r5, [sp, #0]
 8117afe:	4628      	mov	r0, r5
 8117b00:	f001 f98c 	bl	8118e1c <malloc>
 8117b04:	4606      	mov	r6, r0
 8117b06:	2800      	cmp	r0, #0
 8117b08:	d155      	bne.n	8117bb6 <setvbuf+0x15e>
 8117b0a:	f8dd 9000 	ldr.w	r9, [sp]
 8117b0e:	45a9      	cmp	r9, r5
 8117b10:	d14a      	bne.n	8117ba8 <setvbuf+0x150>
 8117b12:	f04f 35ff 	mov.w	r5, #4294967295
 8117b16:	2200      	movs	r2, #0
 8117b18:	60a2      	str	r2, [r4, #8]
 8117b1a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8117b1e:	6022      	str	r2, [r4, #0]
 8117b20:	6122      	str	r2, [r4, #16]
 8117b22:	2201      	movs	r2, #1
 8117b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8117b28:	6162      	str	r2, [r4, #20]
 8117b2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8117b2c:	f043 0302 	orr.w	r3, r3, #2
 8117b30:	07d2      	lsls	r2, r2, #31
 8117b32:	81a3      	strh	r3, [r4, #12]
 8117b34:	d405      	bmi.n	8117b42 <setvbuf+0xea>
 8117b36:	f413 7f00 	tst.w	r3, #512	; 0x200
 8117b3a:	d102      	bne.n	8117b42 <setvbuf+0xea>
 8117b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8117b3e:	f7ff f959 	bl	8116df4 <__retarget_lock_release_recursive>
 8117b42:	4628      	mov	r0, r5
 8117b44:	b003      	add	sp, #12
 8117b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8117b4a:	4b24      	ldr	r3, [pc, #144]	; (8117bdc <setvbuf+0x184>)
 8117b4c:	429c      	cmp	r4, r3
 8117b4e:	d101      	bne.n	8117b54 <setvbuf+0xfc>
 8117b50:	68bc      	ldr	r4, [r7, #8]
 8117b52:	e793      	b.n	8117a7c <setvbuf+0x24>
 8117b54:	4b22      	ldr	r3, [pc, #136]	; (8117be0 <setvbuf+0x188>)
 8117b56:	429c      	cmp	r4, r3
 8117b58:	bf08      	it	eq
 8117b5a:	68fc      	ldreq	r4, [r7, #12]
 8117b5c:	e78e      	b.n	8117a7c <setvbuf+0x24>
 8117b5e:	2e00      	cmp	r6, #0
 8117b60:	d0cd      	beq.n	8117afe <setvbuf+0xa6>
 8117b62:	69bb      	ldr	r3, [r7, #24]
 8117b64:	b913      	cbnz	r3, 8117b6c <setvbuf+0x114>
 8117b66:	4638      	mov	r0, r7
 8117b68:	f7ff f880 	bl	8116c6c <__sinit>
 8117b6c:	f1b8 0f01 	cmp.w	r8, #1
 8117b70:	bf08      	it	eq
 8117b72:	89a3      	ldrheq	r3, [r4, #12]
 8117b74:	6026      	str	r6, [r4, #0]
 8117b76:	bf04      	itt	eq
 8117b78:	f043 0301 	orreq.w	r3, r3, #1
 8117b7c:	81a3      	strheq	r3, [r4, #12]
 8117b7e:	89a2      	ldrh	r2, [r4, #12]
 8117b80:	f012 0308 	ands.w	r3, r2, #8
 8117b84:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8117b88:	d01c      	beq.n	8117bc4 <setvbuf+0x16c>
 8117b8a:	07d3      	lsls	r3, r2, #31
 8117b8c:	bf41      	itttt	mi
 8117b8e:	2300      	movmi	r3, #0
 8117b90:	426d      	negmi	r5, r5
 8117b92:	60a3      	strmi	r3, [r4, #8]
 8117b94:	61a5      	strmi	r5, [r4, #24]
 8117b96:	bf58      	it	pl
 8117b98:	60a5      	strpl	r5, [r4, #8]
 8117b9a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8117b9c:	f015 0501 	ands.w	r5, r5, #1
 8117ba0:	d115      	bne.n	8117bce <setvbuf+0x176>
 8117ba2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8117ba6:	e7c8      	b.n	8117b3a <setvbuf+0xe2>
 8117ba8:	4648      	mov	r0, r9
 8117baa:	f001 f937 	bl	8118e1c <malloc>
 8117bae:	4606      	mov	r6, r0
 8117bb0:	2800      	cmp	r0, #0
 8117bb2:	d0ae      	beq.n	8117b12 <setvbuf+0xba>
 8117bb4:	464d      	mov	r5, r9
 8117bb6:	89a3      	ldrh	r3, [r4, #12]
 8117bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8117bbc:	81a3      	strh	r3, [r4, #12]
 8117bbe:	e7d0      	b.n	8117b62 <setvbuf+0x10a>
 8117bc0:	2500      	movs	r5, #0
 8117bc2:	e7a8      	b.n	8117b16 <setvbuf+0xbe>
 8117bc4:	60a3      	str	r3, [r4, #8]
 8117bc6:	e7e8      	b.n	8117b9a <setvbuf+0x142>
 8117bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8117bcc:	e7b9      	b.n	8117b42 <setvbuf+0xea>
 8117bce:	2500      	movs	r5, #0
 8117bd0:	e7b7      	b.n	8117b42 <setvbuf+0xea>
 8117bd2:	bf00      	nop
 8117bd4:	1000002c 	.word	0x1000002c
 8117bd8:	0811b8d0 	.word	0x0811b8d0
 8117bdc:	0811b8f0 	.word	0x0811b8f0
 8117be0:	0811b8b0 	.word	0x0811b8b0

08117be4 <__sread>:
 8117be4:	b510      	push	{r4, lr}
 8117be6:	460c      	mov	r4, r1
 8117be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8117bec:	f001 fe62 	bl	81198b4 <_read_r>
 8117bf0:	2800      	cmp	r0, #0
 8117bf2:	bfab      	itete	ge
 8117bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8117bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8117bf8:	181b      	addge	r3, r3, r0
 8117bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8117bfe:	bfac      	ite	ge
 8117c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8117c02:	81a3      	strhlt	r3, [r4, #12]
 8117c04:	bd10      	pop	{r4, pc}

08117c06 <__swrite>:
 8117c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8117c0a:	461f      	mov	r7, r3
 8117c0c:	898b      	ldrh	r3, [r1, #12]
 8117c0e:	05db      	lsls	r3, r3, #23
 8117c10:	4605      	mov	r5, r0
 8117c12:	460c      	mov	r4, r1
 8117c14:	4616      	mov	r6, r2
 8117c16:	d505      	bpl.n	8117c24 <__swrite+0x1e>
 8117c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8117c1c:	2302      	movs	r3, #2
 8117c1e:	2200      	movs	r2, #0
 8117c20:	f001 f886 	bl	8118d30 <_lseek_r>
 8117c24:	89a3      	ldrh	r3, [r4, #12]
 8117c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8117c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8117c2e:	81a3      	strh	r3, [r4, #12]
 8117c30:	4632      	mov	r2, r6
 8117c32:	463b      	mov	r3, r7
 8117c34:	4628      	mov	r0, r5
 8117c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8117c3a:	f000 b87b 	b.w	8117d34 <_write_r>

08117c3e <__sseek>:
 8117c3e:	b510      	push	{r4, lr}
 8117c40:	460c      	mov	r4, r1
 8117c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8117c46:	f001 f873 	bl	8118d30 <_lseek_r>
 8117c4a:	1c43      	adds	r3, r0, #1
 8117c4c:	89a3      	ldrh	r3, [r4, #12]
 8117c4e:	bf15      	itete	ne
 8117c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8117c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8117c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8117c5a:	81a3      	strheq	r3, [r4, #12]
 8117c5c:	bf18      	it	ne
 8117c5e:	81a3      	strhne	r3, [r4, #12]
 8117c60:	bd10      	pop	{r4, pc}

08117c62 <__sclose>:
 8117c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8117c66:	f000 b903 	b.w	8117e70 <_close_r>

08117c6a <strncpy>:
 8117c6a:	b510      	push	{r4, lr}
 8117c6c:	3901      	subs	r1, #1
 8117c6e:	4603      	mov	r3, r0
 8117c70:	b132      	cbz	r2, 8117c80 <strncpy+0x16>
 8117c72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8117c76:	f803 4b01 	strb.w	r4, [r3], #1
 8117c7a:	3a01      	subs	r2, #1
 8117c7c:	2c00      	cmp	r4, #0
 8117c7e:	d1f7      	bne.n	8117c70 <strncpy+0x6>
 8117c80:	441a      	add	r2, r3
 8117c82:	2100      	movs	r1, #0
 8117c84:	4293      	cmp	r3, r2
 8117c86:	d100      	bne.n	8117c8a <strncpy+0x20>
 8117c88:	bd10      	pop	{r4, pc}
 8117c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8117c8e:	e7f9      	b.n	8117c84 <strncpy+0x1a>

08117c90 <__swbuf_r>:
 8117c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117c92:	460e      	mov	r6, r1
 8117c94:	4614      	mov	r4, r2
 8117c96:	4605      	mov	r5, r0
 8117c98:	b118      	cbz	r0, 8117ca2 <__swbuf_r+0x12>
 8117c9a:	6983      	ldr	r3, [r0, #24]
 8117c9c:	b90b      	cbnz	r3, 8117ca2 <__swbuf_r+0x12>
 8117c9e:	f7fe ffe5 	bl	8116c6c <__sinit>
 8117ca2:	4b21      	ldr	r3, [pc, #132]	; (8117d28 <__swbuf_r+0x98>)
 8117ca4:	429c      	cmp	r4, r3
 8117ca6:	d12b      	bne.n	8117d00 <__swbuf_r+0x70>
 8117ca8:	686c      	ldr	r4, [r5, #4]
 8117caa:	69a3      	ldr	r3, [r4, #24]
 8117cac:	60a3      	str	r3, [r4, #8]
 8117cae:	89a3      	ldrh	r3, [r4, #12]
 8117cb0:	071a      	lsls	r2, r3, #28
 8117cb2:	d52f      	bpl.n	8117d14 <__swbuf_r+0x84>
 8117cb4:	6923      	ldr	r3, [r4, #16]
 8117cb6:	b36b      	cbz	r3, 8117d14 <__swbuf_r+0x84>
 8117cb8:	6923      	ldr	r3, [r4, #16]
 8117cba:	6820      	ldr	r0, [r4, #0]
 8117cbc:	1ac0      	subs	r0, r0, r3
 8117cbe:	6963      	ldr	r3, [r4, #20]
 8117cc0:	b2f6      	uxtb	r6, r6
 8117cc2:	4283      	cmp	r3, r0
 8117cc4:	4637      	mov	r7, r6
 8117cc6:	dc04      	bgt.n	8117cd2 <__swbuf_r+0x42>
 8117cc8:	4621      	mov	r1, r4
 8117cca:	4628      	mov	r0, r5
 8117ccc:	f000 ffde 	bl	8118c8c <_fflush_r>
 8117cd0:	bb30      	cbnz	r0, 8117d20 <__swbuf_r+0x90>
 8117cd2:	68a3      	ldr	r3, [r4, #8]
 8117cd4:	3b01      	subs	r3, #1
 8117cd6:	60a3      	str	r3, [r4, #8]
 8117cd8:	6823      	ldr	r3, [r4, #0]
 8117cda:	1c5a      	adds	r2, r3, #1
 8117cdc:	6022      	str	r2, [r4, #0]
 8117cde:	701e      	strb	r6, [r3, #0]
 8117ce0:	6963      	ldr	r3, [r4, #20]
 8117ce2:	3001      	adds	r0, #1
 8117ce4:	4283      	cmp	r3, r0
 8117ce6:	d004      	beq.n	8117cf2 <__swbuf_r+0x62>
 8117ce8:	89a3      	ldrh	r3, [r4, #12]
 8117cea:	07db      	lsls	r3, r3, #31
 8117cec:	d506      	bpl.n	8117cfc <__swbuf_r+0x6c>
 8117cee:	2e0a      	cmp	r6, #10
 8117cf0:	d104      	bne.n	8117cfc <__swbuf_r+0x6c>
 8117cf2:	4621      	mov	r1, r4
 8117cf4:	4628      	mov	r0, r5
 8117cf6:	f000 ffc9 	bl	8118c8c <_fflush_r>
 8117cfa:	b988      	cbnz	r0, 8117d20 <__swbuf_r+0x90>
 8117cfc:	4638      	mov	r0, r7
 8117cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8117d00:	4b0a      	ldr	r3, [pc, #40]	; (8117d2c <__swbuf_r+0x9c>)
 8117d02:	429c      	cmp	r4, r3
 8117d04:	d101      	bne.n	8117d0a <__swbuf_r+0x7a>
 8117d06:	68ac      	ldr	r4, [r5, #8]
 8117d08:	e7cf      	b.n	8117caa <__swbuf_r+0x1a>
 8117d0a:	4b09      	ldr	r3, [pc, #36]	; (8117d30 <__swbuf_r+0xa0>)
 8117d0c:	429c      	cmp	r4, r3
 8117d0e:	bf08      	it	eq
 8117d10:	68ec      	ldreq	r4, [r5, #12]
 8117d12:	e7ca      	b.n	8117caa <__swbuf_r+0x1a>
 8117d14:	4621      	mov	r1, r4
 8117d16:	4628      	mov	r0, r5
 8117d18:	f000 f81e 	bl	8117d58 <__swsetup_r>
 8117d1c:	2800      	cmp	r0, #0
 8117d1e:	d0cb      	beq.n	8117cb8 <__swbuf_r+0x28>
 8117d20:	f04f 37ff 	mov.w	r7, #4294967295
 8117d24:	e7ea      	b.n	8117cfc <__swbuf_r+0x6c>
 8117d26:	bf00      	nop
 8117d28:	0811b8d0 	.word	0x0811b8d0
 8117d2c:	0811b8f0 	.word	0x0811b8f0
 8117d30:	0811b8b0 	.word	0x0811b8b0

08117d34 <_write_r>:
 8117d34:	b538      	push	{r3, r4, r5, lr}
 8117d36:	4d07      	ldr	r5, [pc, #28]	; (8117d54 <_write_r+0x20>)
 8117d38:	4604      	mov	r4, r0
 8117d3a:	4608      	mov	r0, r1
 8117d3c:	4611      	mov	r1, r2
 8117d3e:	2200      	movs	r2, #0
 8117d40:	602a      	str	r2, [r5, #0]
 8117d42:	461a      	mov	r2, r3
 8117d44:	f7fe f9e2 	bl	811610c <_write>
 8117d48:	1c43      	adds	r3, r0, #1
 8117d4a:	d102      	bne.n	8117d52 <_write_r+0x1e>
 8117d4c:	682b      	ldr	r3, [r5, #0]
 8117d4e:	b103      	cbz	r3, 8117d52 <_write_r+0x1e>
 8117d50:	6023      	str	r3, [r4, #0]
 8117d52:	bd38      	pop	{r3, r4, r5, pc}
 8117d54:	100087d4 	.word	0x100087d4

08117d58 <__swsetup_r>:
 8117d58:	4b32      	ldr	r3, [pc, #200]	; (8117e24 <__swsetup_r+0xcc>)
 8117d5a:	b570      	push	{r4, r5, r6, lr}
 8117d5c:	681d      	ldr	r5, [r3, #0]
 8117d5e:	4606      	mov	r6, r0
 8117d60:	460c      	mov	r4, r1
 8117d62:	b125      	cbz	r5, 8117d6e <__swsetup_r+0x16>
 8117d64:	69ab      	ldr	r3, [r5, #24]
 8117d66:	b913      	cbnz	r3, 8117d6e <__swsetup_r+0x16>
 8117d68:	4628      	mov	r0, r5
 8117d6a:	f7fe ff7f 	bl	8116c6c <__sinit>
 8117d6e:	4b2e      	ldr	r3, [pc, #184]	; (8117e28 <__swsetup_r+0xd0>)
 8117d70:	429c      	cmp	r4, r3
 8117d72:	d10f      	bne.n	8117d94 <__swsetup_r+0x3c>
 8117d74:	686c      	ldr	r4, [r5, #4]
 8117d76:	89a3      	ldrh	r3, [r4, #12]
 8117d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8117d7c:	0719      	lsls	r1, r3, #28
 8117d7e:	d42c      	bmi.n	8117dda <__swsetup_r+0x82>
 8117d80:	06dd      	lsls	r5, r3, #27
 8117d82:	d411      	bmi.n	8117da8 <__swsetup_r+0x50>
 8117d84:	2309      	movs	r3, #9
 8117d86:	6033      	str	r3, [r6, #0]
 8117d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8117d8c:	81a3      	strh	r3, [r4, #12]
 8117d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8117d92:	e03e      	b.n	8117e12 <__swsetup_r+0xba>
 8117d94:	4b25      	ldr	r3, [pc, #148]	; (8117e2c <__swsetup_r+0xd4>)
 8117d96:	429c      	cmp	r4, r3
 8117d98:	d101      	bne.n	8117d9e <__swsetup_r+0x46>
 8117d9a:	68ac      	ldr	r4, [r5, #8]
 8117d9c:	e7eb      	b.n	8117d76 <__swsetup_r+0x1e>
 8117d9e:	4b24      	ldr	r3, [pc, #144]	; (8117e30 <__swsetup_r+0xd8>)
 8117da0:	429c      	cmp	r4, r3
 8117da2:	bf08      	it	eq
 8117da4:	68ec      	ldreq	r4, [r5, #12]
 8117da6:	e7e6      	b.n	8117d76 <__swsetup_r+0x1e>
 8117da8:	0758      	lsls	r0, r3, #29
 8117daa:	d512      	bpl.n	8117dd2 <__swsetup_r+0x7a>
 8117dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8117dae:	b141      	cbz	r1, 8117dc2 <__swsetup_r+0x6a>
 8117db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8117db4:	4299      	cmp	r1, r3
 8117db6:	d002      	beq.n	8117dbe <__swsetup_r+0x66>
 8117db8:	4630      	mov	r0, r6
 8117dba:	f001 fbd1 	bl	8119560 <_free_r>
 8117dbe:	2300      	movs	r3, #0
 8117dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8117dc2:	89a3      	ldrh	r3, [r4, #12]
 8117dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8117dc8:	81a3      	strh	r3, [r4, #12]
 8117dca:	2300      	movs	r3, #0
 8117dcc:	6063      	str	r3, [r4, #4]
 8117dce:	6923      	ldr	r3, [r4, #16]
 8117dd0:	6023      	str	r3, [r4, #0]
 8117dd2:	89a3      	ldrh	r3, [r4, #12]
 8117dd4:	f043 0308 	orr.w	r3, r3, #8
 8117dd8:	81a3      	strh	r3, [r4, #12]
 8117dda:	6923      	ldr	r3, [r4, #16]
 8117ddc:	b94b      	cbnz	r3, 8117df2 <__swsetup_r+0x9a>
 8117dde:	89a3      	ldrh	r3, [r4, #12]
 8117de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8117de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8117de8:	d003      	beq.n	8117df2 <__swsetup_r+0x9a>
 8117dea:	4621      	mov	r1, r4
 8117dec:	4630      	mov	r0, r6
 8117dee:	f000 ffd5 	bl	8118d9c <__smakebuf_r>
 8117df2:	89a0      	ldrh	r0, [r4, #12]
 8117df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8117df8:	f010 0301 	ands.w	r3, r0, #1
 8117dfc:	d00a      	beq.n	8117e14 <__swsetup_r+0xbc>
 8117dfe:	2300      	movs	r3, #0
 8117e00:	60a3      	str	r3, [r4, #8]
 8117e02:	6963      	ldr	r3, [r4, #20]
 8117e04:	425b      	negs	r3, r3
 8117e06:	61a3      	str	r3, [r4, #24]
 8117e08:	6923      	ldr	r3, [r4, #16]
 8117e0a:	b943      	cbnz	r3, 8117e1e <__swsetup_r+0xc6>
 8117e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8117e10:	d1ba      	bne.n	8117d88 <__swsetup_r+0x30>
 8117e12:	bd70      	pop	{r4, r5, r6, pc}
 8117e14:	0781      	lsls	r1, r0, #30
 8117e16:	bf58      	it	pl
 8117e18:	6963      	ldrpl	r3, [r4, #20]
 8117e1a:	60a3      	str	r3, [r4, #8]
 8117e1c:	e7f4      	b.n	8117e08 <__swsetup_r+0xb0>
 8117e1e:	2000      	movs	r0, #0
 8117e20:	e7f7      	b.n	8117e12 <__swsetup_r+0xba>
 8117e22:	bf00      	nop
 8117e24:	1000002c 	.word	0x1000002c
 8117e28:	0811b8d0 	.word	0x0811b8d0
 8117e2c:	0811b8f0 	.word	0x0811b8f0
 8117e30:	0811b8b0 	.word	0x0811b8b0

08117e34 <__assert_func>:
 8117e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8117e36:	4614      	mov	r4, r2
 8117e38:	461a      	mov	r2, r3
 8117e3a:	4b09      	ldr	r3, [pc, #36]	; (8117e60 <__assert_func+0x2c>)
 8117e3c:	681b      	ldr	r3, [r3, #0]
 8117e3e:	4605      	mov	r5, r0
 8117e40:	68d8      	ldr	r0, [r3, #12]
 8117e42:	b14c      	cbz	r4, 8117e58 <__assert_func+0x24>
 8117e44:	4b07      	ldr	r3, [pc, #28]	; (8117e64 <__assert_func+0x30>)
 8117e46:	9100      	str	r1, [sp, #0]
 8117e48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8117e4c:	4906      	ldr	r1, [pc, #24]	; (8117e68 <__assert_func+0x34>)
 8117e4e:	462b      	mov	r3, r5
 8117e50:	f000 ff58 	bl	8118d04 <fiprintf>
 8117e54:	f001 fd40 	bl	81198d8 <abort>
 8117e58:	4b04      	ldr	r3, [pc, #16]	; (8117e6c <__assert_func+0x38>)
 8117e5a:	461c      	mov	r4, r3
 8117e5c:	e7f3      	b.n	8117e46 <__assert_func+0x12>
 8117e5e:	bf00      	nop
 8117e60:	1000002c 	.word	0x1000002c
 8117e64:	0811b9be 	.word	0x0811b9be
 8117e68:	0811b9cb 	.word	0x0811b9cb
 8117e6c:	0811b9f9 	.word	0x0811b9f9

08117e70 <_close_r>:
 8117e70:	b538      	push	{r3, r4, r5, lr}
 8117e72:	4d06      	ldr	r5, [pc, #24]	; (8117e8c <_close_r+0x1c>)
 8117e74:	2300      	movs	r3, #0
 8117e76:	4604      	mov	r4, r0
 8117e78:	4608      	mov	r0, r1
 8117e7a:	602b      	str	r3, [r5, #0]
 8117e7c:	f7fe f972 	bl	8116164 <_close>
 8117e80:	1c43      	adds	r3, r0, #1
 8117e82:	d102      	bne.n	8117e8a <_close_r+0x1a>
 8117e84:	682b      	ldr	r3, [r5, #0]
 8117e86:	b103      	cbz	r3, 8117e8a <_close_r+0x1a>
 8117e88:	6023      	str	r3, [r4, #0]
 8117e8a:	bd38      	pop	{r3, r4, r5, pc}
 8117e8c:	100087d4 	.word	0x100087d4

08117e90 <quorem>:
 8117e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8117e94:	6903      	ldr	r3, [r0, #16]
 8117e96:	690c      	ldr	r4, [r1, #16]
 8117e98:	42a3      	cmp	r3, r4
 8117e9a:	4607      	mov	r7, r0
 8117e9c:	f2c0 8081 	blt.w	8117fa2 <quorem+0x112>
 8117ea0:	3c01      	subs	r4, #1
 8117ea2:	f101 0814 	add.w	r8, r1, #20
 8117ea6:	f100 0514 	add.w	r5, r0, #20
 8117eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8117eae:	9301      	str	r3, [sp, #4]
 8117eb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8117eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8117eb8:	3301      	adds	r3, #1
 8117eba:	429a      	cmp	r2, r3
 8117ebc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8117ec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8117ec4:	fbb2 f6f3 	udiv	r6, r2, r3
 8117ec8:	d331      	bcc.n	8117f2e <quorem+0x9e>
 8117eca:	f04f 0e00 	mov.w	lr, #0
 8117ece:	4640      	mov	r0, r8
 8117ed0:	46ac      	mov	ip, r5
 8117ed2:	46f2      	mov	sl, lr
 8117ed4:	f850 2b04 	ldr.w	r2, [r0], #4
 8117ed8:	b293      	uxth	r3, r2
 8117eda:	fb06 e303 	mla	r3, r6, r3, lr
 8117ede:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8117ee2:	b29b      	uxth	r3, r3
 8117ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8117ee8:	0c12      	lsrs	r2, r2, #16
 8117eea:	f8dc a000 	ldr.w	sl, [ip]
 8117eee:	fb06 e202 	mla	r2, r6, r2, lr
 8117ef2:	fa13 f38a 	uxtah	r3, r3, sl
 8117ef6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8117efa:	fa1f fa82 	uxth.w	sl, r2
 8117efe:	f8dc 2000 	ldr.w	r2, [ip]
 8117f02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8117f06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8117f0a:	b29b      	uxth	r3, r3
 8117f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8117f10:	4581      	cmp	r9, r0
 8117f12:	f84c 3b04 	str.w	r3, [ip], #4
 8117f16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8117f1a:	d2db      	bcs.n	8117ed4 <quorem+0x44>
 8117f1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8117f20:	b92b      	cbnz	r3, 8117f2e <quorem+0x9e>
 8117f22:	9b01      	ldr	r3, [sp, #4]
 8117f24:	3b04      	subs	r3, #4
 8117f26:	429d      	cmp	r5, r3
 8117f28:	461a      	mov	r2, r3
 8117f2a:	d32e      	bcc.n	8117f8a <quorem+0xfa>
 8117f2c:	613c      	str	r4, [r7, #16]
 8117f2e:	4638      	mov	r0, r7
 8117f30:	f001 fa06 	bl	8119340 <__mcmp>
 8117f34:	2800      	cmp	r0, #0
 8117f36:	db24      	blt.n	8117f82 <quorem+0xf2>
 8117f38:	3601      	adds	r6, #1
 8117f3a:	4628      	mov	r0, r5
 8117f3c:	f04f 0c00 	mov.w	ip, #0
 8117f40:	f858 2b04 	ldr.w	r2, [r8], #4
 8117f44:	f8d0 e000 	ldr.w	lr, [r0]
 8117f48:	b293      	uxth	r3, r2
 8117f4a:	ebac 0303 	sub.w	r3, ip, r3
 8117f4e:	0c12      	lsrs	r2, r2, #16
 8117f50:	fa13 f38e 	uxtah	r3, r3, lr
 8117f54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8117f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8117f5c:	b29b      	uxth	r3, r3
 8117f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8117f62:	45c1      	cmp	r9, r8
 8117f64:	f840 3b04 	str.w	r3, [r0], #4
 8117f68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8117f6c:	d2e8      	bcs.n	8117f40 <quorem+0xb0>
 8117f6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8117f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8117f76:	b922      	cbnz	r2, 8117f82 <quorem+0xf2>
 8117f78:	3b04      	subs	r3, #4
 8117f7a:	429d      	cmp	r5, r3
 8117f7c:	461a      	mov	r2, r3
 8117f7e:	d30a      	bcc.n	8117f96 <quorem+0x106>
 8117f80:	613c      	str	r4, [r7, #16]
 8117f82:	4630      	mov	r0, r6
 8117f84:	b003      	add	sp, #12
 8117f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8117f8a:	6812      	ldr	r2, [r2, #0]
 8117f8c:	3b04      	subs	r3, #4
 8117f8e:	2a00      	cmp	r2, #0
 8117f90:	d1cc      	bne.n	8117f2c <quorem+0x9c>
 8117f92:	3c01      	subs	r4, #1
 8117f94:	e7c7      	b.n	8117f26 <quorem+0x96>
 8117f96:	6812      	ldr	r2, [r2, #0]
 8117f98:	3b04      	subs	r3, #4
 8117f9a:	2a00      	cmp	r2, #0
 8117f9c:	d1f0      	bne.n	8117f80 <quorem+0xf0>
 8117f9e:	3c01      	subs	r4, #1
 8117fa0:	e7eb      	b.n	8117f7a <quorem+0xea>
 8117fa2:	2000      	movs	r0, #0
 8117fa4:	e7ee      	b.n	8117f84 <quorem+0xf4>
	...

08117fa8 <_dtoa_r>:
 8117fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8117fac:	ed2d 8b02 	vpush	{d8}
 8117fb0:	ec57 6b10 	vmov	r6, r7, d0
 8117fb4:	b095      	sub	sp, #84	; 0x54
 8117fb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8117fb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8117fbc:	9105      	str	r1, [sp, #20]
 8117fbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8117fc2:	4604      	mov	r4, r0
 8117fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8117fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8117fc8:	b975      	cbnz	r5, 8117fe8 <_dtoa_r+0x40>
 8117fca:	2010      	movs	r0, #16
 8117fcc:	f000 ff26 	bl	8118e1c <malloc>
 8117fd0:	4602      	mov	r2, r0
 8117fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8117fd4:	b920      	cbnz	r0, 8117fe0 <_dtoa_r+0x38>
 8117fd6:	4bb2      	ldr	r3, [pc, #712]	; (81182a0 <_dtoa_r+0x2f8>)
 8117fd8:	21ea      	movs	r1, #234	; 0xea
 8117fda:	48b2      	ldr	r0, [pc, #712]	; (81182a4 <_dtoa_r+0x2fc>)
 8117fdc:	f7ff ff2a 	bl	8117e34 <__assert_func>
 8117fe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8117fe4:	6005      	str	r5, [r0, #0]
 8117fe6:	60c5      	str	r5, [r0, #12]
 8117fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8117fea:	6819      	ldr	r1, [r3, #0]
 8117fec:	b151      	cbz	r1, 8118004 <_dtoa_r+0x5c>
 8117fee:	685a      	ldr	r2, [r3, #4]
 8117ff0:	604a      	str	r2, [r1, #4]
 8117ff2:	2301      	movs	r3, #1
 8117ff4:	4093      	lsls	r3, r2
 8117ff6:	608b      	str	r3, [r1, #8]
 8117ff8:	4620      	mov	r0, r4
 8117ffa:	f000 ff63 	bl	8118ec4 <_Bfree>
 8117ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8118000:	2200      	movs	r2, #0
 8118002:	601a      	str	r2, [r3, #0]
 8118004:	1e3b      	subs	r3, r7, #0
 8118006:	bfb9      	ittee	lt
 8118008:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 811800c:	9303      	strlt	r3, [sp, #12]
 811800e:	2300      	movge	r3, #0
 8118010:	f8c8 3000 	strge.w	r3, [r8]
 8118014:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8118018:	4ba3      	ldr	r3, [pc, #652]	; (81182a8 <_dtoa_r+0x300>)
 811801a:	bfbc      	itt	lt
 811801c:	2201      	movlt	r2, #1
 811801e:	f8c8 2000 	strlt.w	r2, [r8]
 8118022:	ea33 0309 	bics.w	r3, r3, r9
 8118026:	d11b      	bne.n	8118060 <_dtoa_r+0xb8>
 8118028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 811802a:	f242 730f 	movw	r3, #9999	; 0x270f
 811802e:	6013      	str	r3, [r2, #0]
 8118030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8118034:	4333      	orrs	r3, r6
 8118036:	f000 857a 	beq.w	8118b2e <_dtoa_r+0xb86>
 811803a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 811803c:	b963      	cbnz	r3, 8118058 <_dtoa_r+0xb0>
 811803e:	4b9b      	ldr	r3, [pc, #620]	; (81182ac <_dtoa_r+0x304>)
 8118040:	e024      	b.n	811808c <_dtoa_r+0xe4>
 8118042:	4b9b      	ldr	r3, [pc, #620]	; (81182b0 <_dtoa_r+0x308>)
 8118044:	9300      	str	r3, [sp, #0]
 8118046:	3308      	adds	r3, #8
 8118048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 811804a:	6013      	str	r3, [r2, #0]
 811804c:	9800      	ldr	r0, [sp, #0]
 811804e:	b015      	add	sp, #84	; 0x54
 8118050:	ecbd 8b02 	vpop	{d8}
 8118054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8118058:	4b94      	ldr	r3, [pc, #592]	; (81182ac <_dtoa_r+0x304>)
 811805a:	9300      	str	r3, [sp, #0]
 811805c:	3303      	adds	r3, #3
 811805e:	e7f3      	b.n	8118048 <_dtoa_r+0xa0>
 8118060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8118064:	2200      	movs	r2, #0
 8118066:	ec51 0b17 	vmov	r0, r1, d7
 811806a:	2300      	movs	r3, #0
 811806c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8118070:	f7e8 fdb2 	bl	8100bd8 <__aeabi_dcmpeq>
 8118074:	4680      	mov	r8, r0
 8118076:	b158      	cbz	r0, 8118090 <_dtoa_r+0xe8>
 8118078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 811807a:	2301      	movs	r3, #1
 811807c:	6013      	str	r3, [r2, #0]
 811807e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8118080:	2b00      	cmp	r3, #0
 8118082:	f000 8551 	beq.w	8118b28 <_dtoa_r+0xb80>
 8118086:	488b      	ldr	r0, [pc, #556]	; (81182b4 <_dtoa_r+0x30c>)
 8118088:	6018      	str	r0, [r3, #0]
 811808a:	1e43      	subs	r3, r0, #1
 811808c:	9300      	str	r3, [sp, #0]
 811808e:	e7dd      	b.n	811804c <_dtoa_r+0xa4>
 8118090:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8118094:	aa12      	add	r2, sp, #72	; 0x48
 8118096:	a913      	add	r1, sp, #76	; 0x4c
 8118098:	4620      	mov	r0, r4
 811809a:	f001 f9f5 	bl	8119488 <__d2b>
 811809e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81180a2:	4683      	mov	fp, r0
 81180a4:	2d00      	cmp	r5, #0
 81180a6:	d07c      	beq.n	81181a2 <_dtoa_r+0x1fa>
 81180a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81180aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 81180ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81180b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 81180b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81180ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81180be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81180c2:	4b7d      	ldr	r3, [pc, #500]	; (81182b8 <_dtoa_r+0x310>)
 81180c4:	2200      	movs	r2, #0
 81180c6:	4630      	mov	r0, r6
 81180c8:	4639      	mov	r1, r7
 81180ca:	f7e8 f965 	bl	8100398 <__aeabi_dsub>
 81180ce:	a36e      	add	r3, pc, #440	; (adr r3, 8118288 <_dtoa_r+0x2e0>)
 81180d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81180d4:	f7e8 fb18 	bl	8100708 <__aeabi_dmul>
 81180d8:	a36d      	add	r3, pc, #436	; (adr r3, 8118290 <_dtoa_r+0x2e8>)
 81180da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81180de:	f7e8 f95d 	bl	810039c <__adddf3>
 81180e2:	4606      	mov	r6, r0
 81180e4:	4628      	mov	r0, r5
 81180e6:	460f      	mov	r7, r1
 81180e8:	f7e8 faa4 	bl	8100634 <__aeabi_i2d>
 81180ec:	a36a      	add	r3, pc, #424	; (adr r3, 8118298 <_dtoa_r+0x2f0>)
 81180ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81180f2:	f7e8 fb09 	bl	8100708 <__aeabi_dmul>
 81180f6:	4602      	mov	r2, r0
 81180f8:	460b      	mov	r3, r1
 81180fa:	4630      	mov	r0, r6
 81180fc:	4639      	mov	r1, r7
 81180fe:	f7e8 f94d 	bl	810039c <__adddf3>
 8118102:	4606      	mov	r6, r0
 8118104:	460f      	mov	r7, r1
 8118106:	f7e8 fdaf 	bl	8100c68 <__aeabi_d2iz>
 811810a:	2200      	movs	r2, #0
 811810c:	4682      	mov	sl, r0
 811810e:	2300      	movs	r3, #0
 8118110:	4630      	mov	r0, r6
 8118112:	4639      	mov	r1, r7
 8118114:	f7e8 fd6a 	bl	8100bec <__aeabi_dcmplt>
 8118118:	b148      	cbz	r0, 811812e <_dtoa_r+0x186>
 811811a:	4650      	mov	r0, sl
 811811c:	f7e8 fa8a 	bl	8100634 <__aeabi_i2d>
 8118120:	4632      	mov	r2, r6
 8118122:	463b      	mov	r3, r7
 8118124:	f7e8 fd58 	bl	8100bd8 <__aeabi_dcmpeq>
 8118128:	b908      	cbnz	r0, 811812e <_dtoa_r+0x186>
 811812a:	f10a 3aff 	add.w	sl, sl, #4294967295
 811812e:	f1ba 0f16 	cmp.w	sl, #22
 8118132:	d854      	bhi.n	81181de <_dtoa_r+0x236>
 8118134:	4b61      	ldr	r3, [pc, #388]	; (81182bc <_dtoa_r+0x314>)
 8118136:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 811813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811813e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8118142:	f7e8 fd53 	bl	8100bec <__aeabi_dcmplt>
 8118146:	2800      	cmp	r0, #0
 8118148:	d04b      	beq.n	81181e2 <_dtoa_r+0x23a>
 811814a:	f10a 3aff 	add.w	sl, sl, #4294967295
 811814e:	2300      	movs	r3, #0
 8118150:	930e      	str	r3, [sp, #56]	; 0x38
 8118152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8118154:	1b5d      	subs	r5, r3, r5
 8118156:	1e6b      	subs	r3, r5, #1
 8118158:	9304      	str	r3, [sp, #16]
 811815a:	bf43      	ittte	mi
 811815c:	2300      	movmi	r3, #0
 811815e:	f1c5 0801 	rsbmi	r8, r5, #1
 8118162:	9304      	strmi	r3, [sp, #16]
 8118164:	f04f 0800 	movpl.w	r8, #0
 8118168:	f1ba 0f00 	cmp.w	sl, #0
 811816c:	db3b      	blt.n	81181e6 <_dtoa_r+0x23e>
 811816e:	9b04      	ldr	r3, [sp, #16]
 8118170:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8118174:	4453      	add	r3, sl
 8118176:	9304      	str	r3, [sp, #16]
 8118178:	2300      	movs	r3, #0
 811817a:	9306      	str	r3, [sp, #24]
 811817c:	9b05      	ldr	r3, [sp, #20]
 811817e:	2b09      	cmp	r3, #9
 8118180:	d869      	bhi.n	8118256 <_dtoa_r+0x2ae>
 8118182:	2b05      	cmp	r3, #5
 8118184:	bfc4      	itt	gt
 8118186:	3b04      	subgt	r3, #4
 8118188:	9305      	strgt	r3, [sp, #20]
 811818a:	9b05      	ldr	r3, [sp, #20]
 811818c:	f1a3 0302 	sub.w	r3, r3, #2
 8118190:	bfcc      	ite	gt
 8118192:	2500      	movgt	r5, #0
 8118194:	2501      	movle	r5, #1
 8118196:	2b03      	cmp	r3, #3
 8118198:	d869      	bhi.n	811826e <_dtoa_r+0x2c6>
 811819a:	e8df f003 	tbb	[pc, r3]
 811819e:	4e2c      	.short	0x4e2c
 81181a0:	5a4c      	.short	0x5a4c
 81181a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 81181a6:	441d      	add	r5, r3
 81181a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81181ac:	2b20      	cmp	r3, #32
 81181ae:	bfc1      	itttt	gt
 81181b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81181b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81181b8:	fa09 f303 	lslgt.w	r3, r9, r3
 81181bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 81181c0:	bfda      	itte	le
 81181c2:	f1c3 0320 	rsble	r3, r3, #32
 81181c6:	fa06 f003 	lslle.w	r0, r6, r3
 81181ca:	4318      	orrgt	r0, r3
 81181cc:	f7e8 fa22 	bl	8100614 <__aeabi_ui2d>
 81181d0:	2301      	movs	r3, #1
 81181d2:	4606      	mov	r6, r0
 81181d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81181d8:	3d01      	subs	r5, #1
 81181da:	9310      	str	r3, [sp, #64]	; 0x40
 81181dc:	e771      	b.n	81180c2 <_dtoa_r+0x11a>
 81181de:	2301      	movs	r3, #1
 81181e0:	e7b6      	b.n	8118150 <_dtoa_r+0x1a8>
 81181e2:	900e      	str	r0, [sp, #56]	; 0x38
 81181e4:	e7b5      	b.n	8118152 <_dtoa_r+0x1aa>
 81181e6:	f1ca 0300 	rsb	r3, sl, #0
 81181ea:	9306      	str	r3, [sp, #24]
 81181ec:	2300      	movs	r3, #0
 81181ee:	eba8 080a 	sub.w	r8, r8, sl
 81181f2:	930d      	str	r3, [sp, #52]	; 0x34
 81181f4:	e7c2      	b.n	811817c <_dtoa_r+0x1d4>
 81181f6:	2300      	movs	r3, #0
 81181f8:	9308      	str	r3, [sp, #32]
 81181fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81181fc:	2b00      	cmp	r3, #0
 81181fe:	dc39      	bgt.n	8118274 <_dtoa_r+0x2cc>
 8118200:	f04f 0901 	mov.w	r9, #1
 8118204:	f8cd 9004 	str.w	r9, [sp, #4]
 8118208:	464b      	mov	r3, r9
 811820a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 811820e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8118210:	2200      	movs	r2, #0
 8118212:	6042      	str	r2, [r0, #4]
 8118214:	2204      	movs	r2, #4
 8118216:	f102 0614 	add.w	r6, r2, #20
 811821a:	429e      	cmp	r6, r3
 811821c:	6841      	ldr	r1, [r0, #4]
 811821e:	d92f      	bls.n	8118280 <_dtoa_r+0x2d8>
 8118220:	4620      	mov	r0, r4
 8118222:	f000 fe0f 	bl	8118e44 <_Balloc>
 8118226:	9000      	str	r0, [sp, #0]
 8118228:	2800      	cmp	r0, #0
 811822a:	d14b      	bne.n	81182c4 <_dtoa_r+0x31c>
 811822c:	4b24      	ldr	r3, [pc, #144]	; (81182c0 <_dtoa_r+0x318>)
 811822e:	4602      	mov	r2, r0
 8118230:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8118234:	e6d1      	b.n	8117fda <_dtoa_r+0x32>
 8118236:	2301      	movs	r3, #1
 8118238:	e7de      	b.n	81181f8 <_dtoa_r+0x250>
 811823a:	2300      	movs	r3, #0
 811823c:	9308      	str	r3, [sp, #32]
 811823e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8118240:	eb0a 0903 	add.w	r9, sl, r3
 8118244:	f109 0301 	add.w	r3, r9, #1
 8118248:	2b01      	cmp	r3, #1
 811824a:	9301      	str	r3, [sp, #4]
 811824c:	bfb8      	it	lt
 811824e:	2301      	movlt	r3, #1
 8118250:	e7dd      	b.n	811820e <_dtoa_r+0x266>
 8118252:	2301      	movs	r3, #1
 8118254:	e7f2      	b.n	811823c <_dtoa_r+0x294>
 8118256:	2501      	movs	r5, #1
 8118258:	2300      	movs	r3, #0
 811825a:	9305      	str	r3, [sp, #20]
 811825c:	9508      	str	r5, [sp, #32]
 811825e:	f04f 39ff 	mov.w	r9, #4294967295
 8118262:	2200      	movs	r2, #0
 8118264:	f8cd 9004 	str.w	r9, [sp, #4]
 8118268:	2312      	movs	r3, #18
 811826a:	9209      	str	r2, [sp, #36]	; 0x24
 811826c:	e7cf      	b.n	811820e <_dtoa_r+0x266>
 811826e:	2301      	movs	r3, #1
 8118270:	9308      	str	r3, [sp, #32]
 8118272:	e7f4      	b.n	811825e <_dtoa_r+0x2b6>
 8118274:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8118278:	f8cd 9004 	str.w	r9, [sp, #4]
 811827c:	464b      	mov	r3, r9
 811827e:	e7c6      	b.n	811820e <_dtoa_r+0x266>
 8118280:	3101      	adds	r1, #1
 8118282:	6041      	str	r1, [r0, #4]
 8118284:	0052      	lsls	r2, r2, #1
 8118286:	e7c6      	b.n	8118216 <_dtoa_r+0x26e>
 8118288:	636f4361 	.word	0x636f4361
 811828c:	3fd287a7 	.word	0x3fd287a7
 8118290:	8b60c8b3 	.word	0x8b60c8b3
 8118294:	3fc68a28 	.word	0x3fc68a28
 8118298:	509f79fb 	.word	0x509f79fb
 811829c:	3fd34413 	.word	0x3fd34413
 81182a0:	0811b948 	.word	0x0811b948
 81182a4:	0811ba07 	.word	0x0811ba07
 81182a8:	7ff00000 	.word	0x7ff00000
 81182ac:	0811ba03 	.word	0x0811ba03
 81182b0:	0811b9fa 	.word	0x0811b9fa
 81182b4:	0811b925 	.word	0x0811b925
 81182b8:	3ff80000 	.word	0x3ff80000
 81182bc:	0811bb00 	.word	0x0811bb00
 81182c0:	0811ba66 	.word	0x0811ba66
 81182c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81182c6:	9a00      	ldr	r2, [sp, #0]
 81182c8:	601a      	str	r2, [r3, #0]
 81182ca:	9b01      	ldr	r3, [sp, #4]
 81182cc:	2b0e      	cmp	r3, #14
 81182ce:	f200 80ad 	bhi.w	811842c <_dtoa_r+0x484>
 81182d2:	2d00      	cmp	r5, #0
 81182d4:	f000 80aa 	beq.w	811842c <_dtoa_r+0x484>
 81182d8:	f1ba 0f00 	cmp.w	sl, #0
 81182dc:	dd36      	ble.n	811834c <_dtoa_r+0x3a4>
 81182de:	4ac3      	ldr	r2, [pc, #780]	; (81185ec <_dtoa_r+0x644>)
 81182e0:	f00a 030f 	and.w	r3, sl, #15
 81182e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81182e8:	ed93 7b00 	vldr	d7, [r3]
 81182ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81182f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 81182f4:	eeb0 8a47 	vmov.f32	s16, s14
 81182f8:	eef0 8a67 	vmov.f32	s17, s15
 81182fc:	d016      	beq.n	811832c <_dtoa_r+0x384>
 81182fe:	4bbc      	ldr	r3, [pc, #752]	; (81185f0 <_dtoa_r+0x648>)
 8118300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8118304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8118308:	f7e8 fb28 	bl	810095c <__aeabi_ddiv>
 811830c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8118310:	f007 070f 	and.w	r7, r7, #15
 8118314:	2503      	movs	r5, #3
 8118316:	4eb6      	ldr	r6, [pc, #728]	; (81185f0 <_dtoa_r+0x648>)
 8118318:	b957      	cbnz	r7, 8118330 <_dtoa_r+0x388>
 811831a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811831e:	ec53 2b18 	vmov	r2, r3, d8
 8118322:	f7e8 fb1b 	bl	810095c <__aeabi_ddiv>
 8118326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 811832a:	e029      	b.n	8118380 <_dtoa_r+0x3d8>
 811832c:	2502      	movs	r5, #2
 811832e:	e7f2      	b.n	8118316 <_dtoa_r+0x36e>
 8118330:	07f9      	lsls	r1, r7, #31
 8118332:	d508      	bpl.n	8118346 <_dtoa_r+0x39e>
 8118334:	ec51 0b18 	vmov	r0, r1, d8
 8118338:	e9d6 2300 	ldrd	r2, r3, [r6]
 811833c:	f7e8 f9e4 	bl	8100708 <__aeabi_dmul>
 8118340:	ec41 0b18 	vmov	d8, r0, r1
 8118344:	3501      	adds	r5, #1
 8118346:	107f      	asrs	r7, r7, #1
 8118348:	3608      	adds	r6, #8
 811834a:	e7e5      	b.n	8118318 <_dtoa_r+0x370>
 811834c:	f000 80a6 	beq.w	811849c <_dtoa_r+0x4f4>
 8118350:	f1ca 0600 	rsb	r6, sl, #0
 8118354:	4ba5      	ldr	r3, [pc, #660]	; (81185ec <_dtoa_r+0x644>)
 8118356:	4fa6      	ldr	r7, [pc, #664]	; (81185f0 <_dtoa_r+0x648>)
 8118358:	f006 020f 	and.w	r2, r6, #15
 811835c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8118360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8118364:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8118368:	f7e8 f9ce 	bl	8100708 <__aeabi_dmul>
 811836c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8118370:	1136      	asrs	r6, r6, #4
 8118372:	2300      	movs	r3, #0
 8118374:	2502      	movs	r5, #2
 8118376:	2e00      	cmp	r6, #0
 8118378:	f040 8085 	bne.w	8118486 <_dtoa_r+0x4de>
 811837c:	2b00      	cmp	r3, #0
 811837e:	d1d2      	bne.n	8118326 <_dtoa_r+0x37e>
 8118380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8118382:	2b00      	cmp	r3, #0
 8118384:	f000 808c 	beq.w	81184a0 <_dtoa_r+0x4f8>
 8118388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 811838c:	4b99      	ldr	r3, [pc, #612]	; (81185f4 <_dtoa_r+0x64c>)
 811838e:	2200      	movs	r2, #0
 8118390:	4630      	mov	r0, r6
 8118392:	4639      	mov	r1, r7
 8118394:	f7e8 fc2a 	bl	8100bec <__aeabi_dcmplt>
 8118398:	2800      	cmp	r0, #0
 811839a:	f000 8081 	beq.w	81184a0 <_dtoa_r+0x4f8>
 811839e:	9b01      	ldr	r3, [sp, #4]
 81183a0:	2b00      	cmp	r3, #0
 81183a2:	d07d      	beq.n	81184a0 <_dtoa_r+0x4f8>
 81183a4:	f1b9 0f00 	cmp.w	r9, #0
 81183a8:	dd3c      	ble.n	8118424 <_dtoa_r+0x47c>
 81183aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 81183ae:	9307      	str	r3, [sp, #28]
 81183b0:	2200      	movs	r2, #0
 81183b2:	4b91      	ldr	r3, [pc, #580]	; (81185f8 <_dtoa_r+0x650>)
 81183b4:	4630      	mov	r0, r6
 81183b6:	4639      	mov	r1, r7
 81183b8:	f7e8 f9a6 	bl	8100708 <__aeabi_dmul>
 81183bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81183c0:	3501      	adds	r5, #1
 81183c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 81183c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81183ca:	4628      	mov	r0, r5
 81183cc:	f7e8 f932 	bl	8100634 <__aeabi_i2d>
 81183d0:	4632      	mov	r2, r6
 81183d2:	463b      	mov	r3, r7
 81183d4:	f7e8 f998 	bl	8100708 <__aeabi_dmul>
 81183d8:	4b88      	ldr	r3, [pc, #544]	; (81185fc <_dtoa_r+0x654>)
 81183da:	2200      	movs	r2, #0
 81183dc:	f7e7 ffde 	bl	810039c <__adddf3>
 81183e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 81183e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81183e8:	9303      	str	r3, [sp, #12]
 81183ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81183ec:	2b00      	cmp	r3, #0
 81183ee:	d15c      	bne.n	81184aa <_dtoa_r+0x502>
 81183f0:	4b83      	ldr	r3, [pc, #524]	; (8118600 <_dtoa_r+0x658>)
 81183f2:	2200      	movs	r2, #0
 81183f4:	4630      	mov	r0, r6
 81183f6:	4639      	mov	r1, r7
 81183f8:	f7e7 ffce 	bl	8100398 <__aeabi_dsub>
 81183fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8118400:	4606      	mov	r6, r0
 8118402:	460f      	mov	r7, r1
 8118404:	f7e8 fc10 	bl	8100c28 <__aeabi_dcmpgt>
 8118408:	2800      	cmp	r0, #0
 811840a:	f040 8296 	bne.w	811893a <_dtoa_r+0x992>
 811840e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8118412:	4630      	mov	r0, r6
 8118414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8118418:	4639      	mov	r1, r7
 811841a:	f7e8 fbe7 	bl	8100bec <__aeabi_dcmplt>
 811841e:	2800      	cmp	r0, #0
 8118420:	f040 8288 	bne.w	8118934 <_dtoa_r+0x98c>
 8118424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8118428:	e9cd 2302 	strd	r2, r3, [sp, #8]
 811842c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 811842e:	2b00      	cmp	r3, #0
 8118430:	f2c0 8158 	blt.w	81186e4 <_dtoa_r+0x73c>
 8118434:	f1ba 0f0e 	cmp.w	sl, #14
 8118438:	f300 8154 	bgt.w	81186e4 <_dtoa_r+0x73c>
 811843c:	4b6b      	ldr	r3, [pc, #428]	; (81185ec <_dtoa_r+0x644>)
 811843e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8118442:	e9d3 8900 	ldrd	r8, r9, [r3]
 8118446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8118448:	2b00      	cmp	r3, #0
 811844a:	f280 80e3 	bge.w	8118614 <_dtoa_r+0x66c>
 811844e:	9b01      	ldr	r3, [sp, #4]
 8118450:	2b00      	cmp	r3, #0
 8118452:	f300 80df 	bgt.w	8118614 <_dtoa_r+0x66c>
 8118456:	f040 826d 	bne.w	8118934 <_dtoa_r+0x98c>
 811845a:	4b69      	ldr	r3, [pc, #420]	; (8118600 <_dtoa_r+0x658>)
 811845c:	2200      	movs	r2, #0
 811845e:	4640      	mov	r0, r8
 8118460:	4649      	mov	r1, r9
 8118462:	f7e8 f951 	bl	8100708 <__aeabi_dmul>
 8118466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 811846a:	f7e8 fbd3 	bl	8100c14 <__aeabi_dcmpge>
 811846e:	9e01      	ldr	r6, [sp, #4]
 8118470:	4637      	mov	r7, r6
 8118472:	2800      	cmp	r0, #0
 8118474:	f040 8243 	bne.w	81188fe <_dtoa_r+0x956>
 8118478:	9d00      	ldr	r5, [sp, #0]
 811847a:	2331      	movs	r3, #49	; 0x31
 811847c:	f805 3b01 	strb.w	r3, [r5], #1
 8118480:	f10a 0a01 	add.w	sl, sl, #1
 8118484:	e23f      	b.n	8118906 <_dtoa_r+0x95e>
 8118486:	07f2      	lsls	r2, r6, #31
 8118488:	d505      	bpl.n	8118496 <_dtoa_r+0x4ee>
 811848a:	e9d7 2300 	ldrd	r2, r3, [r7]
 811848e:	f7e8 f93b 	bl	8100708 <__aeabi_dmul>
 8118492:	3501      	adds	r5, #1
 8118494:	2301      	movs	r3, #1
 8118496:	1076      	asrs	r6, r6, #1
 8118498:	3708      	adds	r7, #8
 811849a:	e76c      	b.n	8118376 <_dtoa_r+0x3ce>
 811849c:	2502      	movs	r5, #2
 811849e:	e76f      	b.n	8118380 <_dtoa_r+0x3d8>
 81184a0:	9b01      	ldr	r3, [sp, #4]
 81184a2:	f8cd a01c 	str.w	sl, [sp, #28]
 81184a6:	930c      	str	r3, [sp, #48]	; 0x30
 81184a8:	e78d      	b.n	81183c6 <_dtoa_r+0x41e>
 81184aa:	9900      	ldr	r1, [sp, #0]
 81184ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 81184ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81184b0:	4b4e      	ldr	r3, [pc, #312]	; (81185ec <_dtoa_r+0x644>)
 81184b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 81184b6:	4401      	add	r1, r0
 81184b8:	9102      	str	r1, [sp, #8]
 81184ba:	9908      	ldr	r1, [sp, #32]
 81184bc:	eeb0 8a47 	vmov.f32	s16, s14
 81184c0:	eef0 8a67 	vmov.f32	s17, s15
 81184c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81184c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81184cc:	2900      	cmp	r1, #0
 81184ce:	d045      	beq.n	811855c <_dtoa_r+0x5b4>
 81184d0:	494c      	ldr	r1, [pc, #304]	; (8118604 <_dtoa_r+0x65c>)
 81184d2:	2000      	movs	r0, #0
 81184d4:	f7e8 fa42 	bl	810095c <__aeabi_ddiv>
 81184d8:	ec53 2b18 	vmov	r2, r3, d8
 81184dc:	f7e7 ff5c 	bl	8100398 <__aeabi_dsub>
 81184e0:	9d00      	ldr	r5, [sp, #0]
 81184e2:	ec41 0b18 	vmov	d8, r0, r1
 81184e6:	4639      	mov	r1, r7
 81184e8:	4630      	mov	r0, r6
 81184ea:	f7e8 fbbd 	bl	8100c68 <__aeabi_d2iz>
 81184ee:	900c      	str	r0, [sp, #48]	; 0x30
 81184f0:	f7e8 f8a0 	bl	8100634 <__aeabi_i2d>
 81184f4:	4602      	mov	r2, r0
 81184f6:	460b      	mov	r3, r1
 81184f8:	4630      	mov	r0, r6
 81184fa:	4639      	mov	r1, r7
 81184fc:	f7e7 ff4c 	bl	8100398 <__aeabi_dsub>
 8118500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8118502:	3330      	adds	r3, #48	; 0x30
 8118504:	f805 3b01 	strb.w	r3, [r5], #1
 8118508:	ec53 2b18 	vmov	r2, r3, d8
 811850c:	4606      	mov	r6, r0
 811850e:	460f      	mov	r7, r1
 8118510:	f7e8 fb6c 	bl	8100bec <__aeabi_dcmplt>
 8118514:	2800      	cmp	r0, #0
 8118516:	d165      	bne.n	81185e4 <_dtoa_r+0x63c>
 8118518:	4632      	mov	r2, r6
 811851a:	463b      	mov	r3, r7
 811851c:	4935      	ldr	r1, [pc, #212]	; (81185f4 <_dtoa_r+0x64c>)
 811851e:	2000      	movs	r0, #0
 8118520:	f7e7 ff3a 	bl	8100398 <__aeabi_dsub>
 8118524:	ec53 2b18 	vmov	r2, r3, d8
 8118528:	f7e8 fb60 	bl	8100bec <__aeabi_dcmplt>
 811852c:	2800      	cmp	r0, #0
 811852e:	f040 80b9 	bne.w	81186a4 <_dtoa_r+0x6fc>
 8118532:	9b02      	ldr	r3, [sp, #8]
 8118534:	429d      	cmp	r5, r3
 8118536:	f43f af75 	beq.w	8118424 <_dtoa_r+0x47c>
 811853a:	4b2f      	ldr	r3, [pc, #188]	; (81185f8 <_dtoa_r+0x650>)
 811853c:	ec51 0b18 	vmov	r0, r1, d8
 8118540:	2200      	movs	r2, #0
 8118542:	f7e8 f8e1 	bl	8100708 <__aeabi_dmul>
 8118546:	4b2c      	ldr	r3, [pc, #176]	; (81185f8 <_dtoa_r+0x650>)
 8118548:	ec41 0b18 	vmov	d8, r0, r1
 811854c:	2200      	movs	r2, #0
 811854e:	4630      	mov	r0, r6
 8118550:	4639      	mov	r1, r7
 8118552:	f7e8 f8d9 	bl	8100708 <__aeabi_dmul>
 8118556:	4606      	mov	r6, r0
 8118558:	460f      	mov	r7, r1
 811855a:	e7c4      	b.n	81184e6 <_dtoa_r+0x53e>
 811855c:	ec51 0b17 	vmov	r0, r1, d7
 8118560:	f7e8 f8d2 	bl	8100708 <__aeabi_dmul>
 8118564:	9b02      	ldr	r3, [sp, #8]
 8118566:	9d00      	ldr	r5, [sp, #0]
 8118568:	930c      	str	r3, [sp, #48]	; 0x30
 811856a:	ec41 0b18 	vmov	d8, r0, r1
 811856e:	4639      	mov	r1, r7
 8118570:	4630      	mov	r0, r6
 8118572:	f7e8 fb79 	bl	8100c68 <__aeabi_d2iz>
 8118576:	9011      	str	r0, [sp, #68]	; 0x44
 8118578:	f7e8 f85c 	bl	8100634 <__aeabi_i2d>
 811857c:	4602      	mov	r2, r0
 811857e:	460b      	mov	r3, r1
 8118580:	4630      	mov	r0, r6
 8118582:	4639      	mov	r1, r7
 8118584:	f7e7 ff08 	bl	8100398 <__aeabi_dsub>
 8118588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 811858a:	3330      	adds	r3, #48	; 0x30
 811858c:	f805 3b01 	strb.w	r3, [r5], #1
 8118590:	9b02      	ldr	r3, [sp, #8]
 8118592:	429d      	cmp	r5, r3
 8118594:	4606      	mov	r6, r0
 8118596:	460f      	mov	r7, r1
 8118598:	f04f 0200 	mov.w	r2, #0
 811859c:	d134      	bne.n	8118608 <_dtoa_r+0x660>
 811859e:	4b19      	ldr	r3, [pc, #100]	; (8118604 <_dtoa_r+0x65c>)
 81185a0:	ec51 0b18 	vmov	r0, r1, d8
 81185a4:	f7e7 fefa 	bl	810039c <__adddf3>
 81185a8:	4602      	mov	r2, r0
 81185aa:	460b      	mov	r3, r1
 81185ac:	4630      	mov	r0, r6
 81185ae:	4639      	mov	r1, r7
 81185b0:	f7e8 fb3a 	bl	8100c28 <__aeabi_dcmpgt>
 81185b4:	2800      	cmp	r0, #0
 81185b6:	d175      	bne.n	81186a4 <_dtoa_r+0x6fc>
 81185b8:	ec53 2b18 	vmov	r2, r3, d8
 81185bc:	4911      	ldr	r1, [pc, #68]	; (8118604 <_dtoa_r+0x65c>)
 81185be:	2000      	movs	r0, #0
 81185c0:	f7e7 feea 	bl	8100398 <__aeabi_dsub>
 81185c4:	4602      	mov	r2, r0
 81185c6:	460b      	mov	r3, r1
 81185c8:	4630      	mov	r0, r6
 81185ca:	4639      	mov	r1, r7
 81185cc:	f7e8 fb0e 	bl	8100bec <__aeabi_dcmplt>
 81185d0:	2800      	cmp	r0, #0
 81185d2:	f43f af27 	beq.w	8118424 <_dtoa_r+0x47c>
 81185d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81185d8:	1e6b      	subs	r3, r5, #1
 81185da:	930c      	str	r3, [sp, #48]	; 0x30
 81185dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81185e0:	2b30      	cmp	r3, #48	; 0x30
 81185e2:	d0f8      	beq.n	81185d6 <_dtoa_r+0x62e>
 81185e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 81185e8:	e04a      	b.n	8118680 <_dtoa_r+0x6d8>
 81185ea:	bf00      	nop
 81185ec:	0811bb00 	.word	0x0811bb00
 81185f0:	0811bad8 	.word	0x0811bad8
 81185f4:	3ff00000 	.word	0x3ff00000
 81185f8:	40240000 	.word	0x40240000
 81185fc:	401c0000 	.word	0x401c0000
 8118600:	40140000 	.word	0x40140000
 8118604:	3fe00000 	.word	0x3fe00000
 8118608:	4baf      	ldr	r3, [pc, #700]	; (81188c8 <_dtoa_r+0x920>)
 811860a:	f7e8 f87d 	bl	8100708 <__aeabi_dmul>
 811860e:	4606      	mov	r6, r0
 8118610:	460f      	mov	r7, r1
 8118612:	e7ac      	b.n	811856e <_dtoa_r+0x5c6>
 8118614:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8118618:	9d00      	ldr	r5, [sp, #0]
 811861a:	4642      	mov	r2, r8
 811861c:	464b      	mov	r3, r9
 811861e:	4630      	mov	r0, r6
 8118620:	4639      	mov	r1, r7
 8118622:	f7e8 f99b 	bl	810095c <__aeabi_ddiv>
 8118626:	f7e8 fb1f 	bl	8100c68 <__aeabi_d2iz>
 811862a:	9002      	str	r0, [sp, #8]
 811862c:	f7e8 f802 	bl	8100634 <__aeabi_i2d>
 8118630:	4642      	mov	r2, r8
 8118632:	464b      	mov	r3, r9
 8118634:	f7e8 f868 	bl	8100708 <__aeabi_dmul>
 8118638:	4602      	mov	r2, r0
 811863a:	460b      	mov	r3, r1
 811863c:	4630      	mov	r0, r6
 811863e:	4639      	mov	r1, r7
 8118640:	f7e7 feaa 	bl	8100398 <__aeabi_dsub>
 8118644:	9e02      	ldr	r6, [sp, #8]
 8118646:	9f01      	ldr	r7, [sp, #4]
 8118648:	3630      	adds	r6, #48	; 0x30
 811864a:	f805 6b01 	strb.w	r6, [r5], #1
 811864e:	9e00      	ldr	r6, [sp, #0]
 8118650:	1bae      	subs	r6, r5, r6
 8118652:	42b7      	cmp	r7, r6
 8118654:	4602      	mov	r2, r0
 8118656:	460b      	mov	r3, r1
 8118658:	d137      	bne.n	81186ca <_dtoa_r+0x722>
 811865a:	f7e7 fe9f 	bl	810039c <__adddf3>
 811865e:	4642      	mov	r2, r8
 8118660:	464b      	mov	r3, r9
 8118662:	4606      	mov	r6, r0
 8118664:	460f      	mov	r7, r1
 8118666:	f7e8 fadf 	bl	8100c28 <__aeabi_dcmpgt>
 811866a:	b9c8      	cbnz	r0, 81186a0 <_dtoa_r+0x6f8>
 811866c:	4642      	mov	r2, r8
 811866e:	464b      	mov	r3, r9
 8118670:	4630      	mov	r0, r6
 8118672:	4639      	mov	r1, r7
 8118674:	f7e8 fab0 	bl	8100bd8 <__aeabi_dcmpeq>
 8118678:	b110      	cbz	r0, 8118680 <_dtoa_r+0x6d8>
 811867a:	9b02      	ldr	r3, [sp, #8]
 811867c:	07d9      	lsls	r1, r3, #31
 811867e:	d40f      	bmi.n	81186a0 <_dtoa_r+0x6f8>
 8118680:	4620      	mov	r0, r4
 8118682:	4659      	mov	r1, fp
 8118684:	f000 fc1e 	bl	8118ec4 <_Bfree>
 8118688:	2300      	movs	r3, #0
 811868a:	702b      	strb	r3, [r5, #0]
 811868c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 811868e:	f10a 0001 	add.w	r0, sl, #1
 8118692:	6018      	str	r0, [r3, #0]
 8118694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8118696:	2b00      	cmp	r3, #0
 8118698:	f43f acd8 	beq.w	811804c <_dtoa_r+0xa4>
 811869c:	601d      	str	r5, [r3, #0]
 811869e:	e4d5      	b.n	811804c <_dtoa_r+0xa4>
 81186a0:	f8cd a01c 	str.w	sl, [sp, #28]
 81186a4:	462b      	mov	r3, r5
 81186a6:	461d      	mov	r5, r3
 81186a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81186ac:	2a39      	cmp	r2, #57	; 0x39
 81186ae:	d108      	bne.n	81186c2 <_dtoa_r+0x71a>
 81186b0:	9a00      	ldr	r2, [sp, #0]
 81186b2:	429a      	cmp	r2, r3
 81186b4:	d1f7      	bne.n	81186a6 <_dtoa_r+0x6fe>
 81186b6:	9a07      	ldr	r2, [sp, #28]
 81186b8:	9900      	ldr	r1, [sp, #0]
 81186ba:	3201      	adds	r2, #1
 81186bc:	9207      	str	r2, [sp, #28]
 81186be:	2230      	movs	r2, #48	; 0x30
 81186c0:	700a      	strb	r2, [r1, #0]
 81186c2:	781a      	ldrb	r2, [r3, #0]
 81186c4:	3201      	adds	r2, #1
 81186c6:	701a      	strb	r2, [r3, #0]
 81186c8:	e78c      	b.n	81185e4 <_dtoa_r+0x63c>
 81186ca:	4b7f      	ldr	r3, [pc, #508]	; (81188c8 <_dtoa_r+0x920>)
 81186cc:	2200      	movs	r2, #0
 81186ce:	f7e8 f81b 	bl	8100708 <__aeabi_dmul>
 81186d2:	2200      	movs	r2, #0
 81186d4:	2300      	movs	r3, #0
 81186d6:	4606      	mov	r6, r0
 81186d8:	460f      	mov	r7, r1
 81186da:	f7e8 fa7d 	bl	8100bd8 <__aeabi_dcmpeq>
 81186de:	2800      	cmp	r0, #0
 81186e0:	d09b      	beq.n	811861a <_dtoa_r+0x672>
 81186e2:	e7cd      	b.n	8118680 <_dtoa_r+0x6d8>
 81186e4:	9a08      	ldr	r2, [sp, #32]
 81186e6:	2a00      	cmp	r2, #0
 81186e8:	f000 80c4 	beq.w	8118874 <_dtoa_r+0x8cc>
 81186ec:	9a05      	ldr	r2, [sp, #20]
 81186ee:	2a01      	cmp	r2, #1
 81186f0:	f300 80a8 	bgt.w	8118844 <_dtoa_r+0x89c>
 81186f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 81186f6:	2a00      	cmp	r2, #0
 81186f8:	f000 80a0 	beq.w	811883c <_dtoa_r+0x894>
 81186fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8118700:	9e06      	ldr	r6, [sp, #24]
 8118702:	4645      	mov	r5, r8
 8118704:	9a04      	ldr	r2, [sp, #16]
 8118706:	2101      	movs	r1, #1
 8118708:	441a      	add	r2, r3
 811870a:	4620      	mov	r0, r4
 811870c:	4498      	add	r8, r3
 811870e:	9204      	str	r2, [sp, #16]
 8118710:	f000 fc94 	bl	811903c <__i2b>
 8118714:	4607      	mov	r7, r0
 8118716:	2d00      	cmp	r5, #0
 8118718:	dd0b      	ble.n	8118732 <_dtoa_r+0x78a>
 811871a:	9b04      	ldr	r3, [sp, #16]
 811871c:	2b00      	cmp	r3, #0
 811871e:	dd08      	ble.n	8118732 <_dtoa_r+0x78a>
 8118720:	42ab      	cmp	r3, r5
 8118722:	9a04      	ldr	r2, [sp, #16]
 8118724:	bfa8      	it	ge
 8118726:	462b      	movge	r3, r5
 8118728:	eba8 0803 	sub.w	r8, r8, r3
 811872c:	1aed      	subs	r5, r5, r3
 811872e:	1ad3      	subs	r3, r2, r3
 8118730:	9304      	str	r3, [sp, #16]
 8118732:	9b06      	ldr	r3, [sp, #24]
 8118734:	b1fb      	cbz	r3, 8118776 <_dtoa_r+0x7ce>
 8118736:	9b08      	ldr	r3, [sp, #32]
 8118738:	2b00      	cmp	r3, #0
 811873a:	f000 809f 	beq.w	811887c <_dtoa_r+0x8d4>
 811873e:	2e00      	cmp	r6, #0
 8118740:	dd11      	ble.n	8118766 <_dtoa_r+0x7be>
 8118742:	4639      	mov	r1, r7
 8118744:	4632      	mov	r2, r6
 8118746:	4620      	mov	r0, r4
 8118748:	f000 fd34 	bl	81191b4 <__pow5mult>
 811874c:	465a      	mov	r2, fp
 811874e:	4601      	mov	r1, r0
 8118750:	4607      	mov	r7, r0
 8118752:	4620      	mov	r0, r4
 8118754:	f000 fc88 	bl	8119068 <__multiply>
 8118758:	4659      	mov	r1, fp
 811875a:	9007      	str	r0, [sp, #28]
 811875c:	4620      	mov	r0, r4
 811875e:	f000 fbb1 	bl	8118ec4 <_Bfree>
 8118762:	9b07      	ldr	r3, [sp, #28]
 8118764:	469b      	mov	fp, r3
 8118766:	9b06      	ldr	r3, [sp, #24]
 8118768:	1b9a      	subs	r2, r3, r6
 811876a:	d004      	beq.n	8118776 <_dtoa_r+0x7ce>
 811876c:	4659      	mov	r1, fp
 811876e:	4620      	mov	r0, r4
 8118770:	f000 fd20 	bl	81191b4 <__pow5mult>
 8118774:	4683      	mov	fp, r0
 8118776:	2101      	movs	r1, #1
 8118778:	4620      	mov	r0, r4
 811877a:	f000 fc5f 	bl	811903c <__i2b>
 811877e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8118780:	2b00      	cmp	r3, #0
 8118782:	4606      	mov	r6, r0
 8118784:	dd7c      	ble.n	8118880 <_dtoa_r+0x8d8>
 8118786:	461a      	mov	r2, r3
 8118788:	4601      	mov	r1, r0
 811878a:	4620      	mov	r0, r4
 811878c:	f000 fd12 	bl	81191b4 <__pow5mult>
 8118790:	9b05      	ldr	r3, [sp, #20]
 8118792:	2b01      	cmp	r3, #1
 8118794:	4606      	mov	r6, r0
 8118796:	dd76      	ble.n	8118886 <_dtoa_r+0x8de>
 8118798:	2300      	movs	r3, #0
 811879a:	9306      	str	r3, [sp, #24]
 811879c:	6933      	ldr	r3, [r6, #16]
 811879e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 81187a2:	6918      	ldr	r0, [r3, #16]
 81187a4:	f000 fbfa 	bl	8118f9c <__hi0bits>
 81187a8:	f1c0 0020 	rsb	r0, r0, #32
 81187ac:	9b04      	ldr	r3, [sp, #16]
 81187ae:	4418      	add	r0, r3
 81187b0:	f010 001f 	ands.w	r0, r0, #31
 81187b4:	f000 8086 	beq.w	81188c4 <_dtoa_r+0x91c>
 81187b8:	f1c0 0320 	rsb	r3, r0, #32
 81187bc:	2b04      	cmp	r3, #4
 81187be:	dd7f      	ble.n	81188c0 <_dtoa_r+0x918>
 81187c0:	f1c0 001c 	rsb	r0, r0, #28
 81187c4:	9b04      	ldr	r3, [sp, #16]
 81187c6:	4403      	add	r3, r0
 81187c8:	4480      	add	r8, r0
 81187ca:	4405      	add	r5, r0
 81187cc:	9304      	str	r3, [sp, #16]
 81187ce:	f1b8 0f00 	cmp.w	r8, #0
 81187d2:	dd05      	ble.n	81187e0 <_dtoa_r+0x838>
 81187d4:	4659      	mov	r1, fp
 81187d6:	4642      	mov	r2, r8
 81187d8:	4620      	mov	r0, r4
 81187da:	f000 fd45 	bl	8119268 <__lshift>
 81187de:	4683      	mov	fp, r0
 81187e0:	9b04      	ldr	r3, [sp, #16]
 81187e2:	2b00      	cmp	r3, #0
 81187e4:	dd05      	ble.n	81187f2 <_dtoa_r+0x84a>
 81187e6:	4631      	mov	r1, r6
 81187e8:	461a      	mov	r2, r3
 81187ea:	4620      	mov	r0, r4
 81187ec:	f000 fd3c 	bl	8119268 <__lshift>
 81187f0:	4606      	mov	r6, r0
 81187f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81187f4:	2b00      	cmp	r3, #0
 81187f6:	d069      	beq.n	81188cc <_dtoa_r+0x924>
 81187f8:	4631      	mov	r1, r6
 81187fa:	4658      	mov	r0, fp
 81187fc:	f000 fda0 	bl	8119340 <__mcmp>
 8118800:	2800      	cmp	r0, #0
 8118802:	da63      	bge.n	81188cc <_dtoa_r+0x924>
 8118804:	2300      	movs	r3, #0
 8118806:	4659      	mov	r1, fp
 8118808:	220a      	movs	r2, #10
 811880a:	4620      	mov	r0, r4
 811880c:	f000 fb7c 	bl	8118f08 <__multadd>
 8118810:	9b08      	ldr	r3, [sp, #32]
 8118812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8118816:	4683      	mov	fp, r0
 8118818:	2b00      	cmp	r3, #0
 811881a:	f000 818f 	beq.w	8118b3c <_dtoa_r+0xb94>
 811881e:	4639      	mov	r1, r7
 8118820:	2300      	movs	r3, #0
 8118822:	220a      	movs	r2, #10
 8118824:	4620      	mov	r0, r4
 8118826:	f000 fb6f 	bl	8118f08 <__multadd>
 811882a:	f1b9 0f00 	cmp.w	r9, #0
 811882e:	4607      	mov	r7, r0
 8118830:	f300 808e 	bgt.w	8118950 <_dtoa_r+0x9a8>
 8118834:	9b05      	ldr	r3, [sp, #20]
 8118836:	2b02      	cmp	r3, #2
 8118838:	dc50      	bgt.n	81188dc <_dtoa_r+0x934>
 811883a:	e089      	b.n	8118950 <_dtoa_r+0x9a8>
 811883c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 811883e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8118842:	e75d      	b.n	8118700 <_dtoa_r+0x758>
 8118844:	9b01      	ldr	r3, [sp, #4]
 8118846:	1e5e      	subs	r6, r3, #1
 8118848:	9b06      	ldr	r3, [sp, #24]
 811884a:	42b3      	cmp	r3, r6
 811884c:	bfbf      	itttt	lt
 811884e:	9b06      	ldrlt	r3, [sp, #24]
 8118850:	9606      	strlt	r6, [sp, #24]
 8118852:	1af2      	sublt	r2, r6, r3
 8118854:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8118856:	bfb6      	itet	lt
 8118858:	189b      	addlt	r3, r3, r2
 811885a:	1b9e      	subge	r6, r3, r6
 811885c:	930d      	strlt	r3, [sp, #52]	; 0x34
 811885e:	9b01      	ldr	r3, [sp, #4]
 8118860:	bfb8      	it	lt
 8118862:	2600      	movlt	r6, #0
 8118864:	2b00      	cmp	r3, #0
 8118866:	bfb5      	itete	lt
 8118868:	eba8 0503 	sublt.w	r5, r8, r3
 811886c:	9b01      	ldrge	r3, [sp, #4]
 811886e:	2300      	movlt	r3, #0
 8118870:	4645      	movge	r5, r8
 8118872:	e747      	b.n	8118704 <_dtoa_r+0x75c>
 8118874:	9e06      	ldr	r6, [sp, #24]
 8118876:	9f08      	ldr	r7, [sp, #32]
 8118878:	4645      	mov	r5, r8
 811887a:	e74c      	b.n	8118716 <_dtoa_r+0x76e>
 811887c:	9a06      	ldr	r2, [sp, #24]
 811887e:	e775      	b.n	811876c <_dtoa_r+0x7c4>
 8118880:	9b05      	ldr	r3, [sp, #20]
 8118882:	2b01      	cmp	r3, #1
 8118884:	dc18      	bgt.n	81188b8 <_dtoa_r+0x910>
 8118886:	9b02      	ldr	r3, [sp, #8]
 8118888:	b9b3      	cbnz	r3, 81188b8 <_dtoa_r+0x910>
 811888a:	9b03      	ldr	r3, [sp, #12]
 811888c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8118890:	b9a3      	cbnz	r3, 81188bc <_dtoa_r+0x914>
 8118892:	9b03      	ldr	r3, [sp, #12]
 8118894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8118898:	0d1b      	lsrs	r3, r3, #20
 811889a:	051b      	lsls	r3, r3, #20
 811889c:	b12b      	cbz	r3, 81188aa <_dtoa_r+0x902>
 811889e:	9b04      	ldr	r3, [sp, #16]
 81188a0:	3301      	adds	r3, #1
 81188a2:	9304      	str	r3, [sp, #16]
 81188a4:	f108 0801 	add.w	r8, r8, #1
 81188a8:	2301      	movs	r3, #1
 81188aa:	9306      	str	r3, [sp, #24]
 81188ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81188ae:	2b00      	cmp	r3, #0
 81188b0:	f47f af74 	bne.w	811879c <_dtoa_r+0x7f4>
 81188b4:	2001      	movs	r0, #1
 81188b6:	e779      	b.n	81187ac <_dtoa_r+0x804>
 81188b8:	2300      	movs	r3, #0
 81188ba:	e7f6      	b.n	81188aa <_dtoa_r+0x902>
 81188bc:	9b02      	ldr	r3, [sp, #8]
 81188be:	e7f4      	b.n	81188aa <_dtoa_r+0x902>
 81188c0:	d085      	beq.n	81187ce <_dtoa_r+0x826>
 81188c2:	4618      	mov	r0, r3
 81188c4:	301c      	adds	r0, #28
 81188c6:	e77d      	b.n	81187c4 <_dtoa_r+0x81c>
 81188c8:	40240000 	.word	0x40240000
 81188cc:	9b01      	ldr	r3, [sp, #4]
 81188ce:	2b00      	cmp	r3, #0
 81188d0:	dc38      	bgt.n	8118944 <_dtoa_r+0x99c>
 81188d2:	9b05      	ldr	r3, [sp, #20]
 81188d4:	2b02      	cmp	r3, #2
 81188d6:	dd35      	ble.n	8118944 <_dtoa_r+0x99c>
 81188d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 81188dc:	f1b9 0f00 	cmp.w	r9, #0
 81188e0:	d10d      	bne.n	81188fe <_dtoa_r+0x956>
 81188e2:	4631      	mov	r1, r6
 81188e4:	464b      	mov	r3, r9
 81188e6:	2205      	movs	r2, #5
 81188e8:	4620      	mov	r0, r4
 81188ea:	f000 fb0d 	bl	8118f08 <__multadd>
 81188ee:	4601      	mov	r1, r0
 81188f0:	4606      	mov	r6, r0
 81188f2:	4658      	mov	r0, fp
 81188f4:	f000 fd24 	bl	8119340 <__mcmp>
 81188f8:	2800      	cmp	r0, #0
 81188fa:	f73f adbd 	bgt.w	8118478 <_dtoa_r+0x4d0>
 81188fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8118900:	9d00      	ldr	r5, [sp, #0]
 8118902:	ea6f 0a03 	mvn.w	sl, r3
 8118906:	f04f 0800 	mov.w	r8, #0
 811890a:	4631      	mov	r1, r6
 811890c:	4620      	mov	r0, r4
 811890e:	f000 fad9 	bl	8118ec4 <_Bfree>
 8118912:	2f00      	cmp	r7, #0
 8118914:	f43f aeb4 	beq.w	8118680 <_dtoa_r+0x6d8>
 8118918:	f1b8 0f00 	cmp.w	r8, #0
 811891c:	d005      	beq.n	811892a <_dtoa_r+0x982>
 811891e:	45b8      	cmp	r8, r7
 8118920:	d003      	beq.n	811892a <_dtoa_r+0x982>
 8118922:	4641      	mov	r1, r8
 8118924:	4620      	mov	r0, r4
 8118926:	f000 facd 	bl	8118ec4 <_Bfree>
 811892a:	4639      	mov	r1, r7
 811892c:	4620      	mov	r0, r4
 811892e:	f000 fac9 	bl	8118ec4 <_Bfree>
 8118932:	e6a5      	b.n	8118680 <_dtoa_r+0x6d8>
 8118934:	2600      	movs	r6, #0
 8118936:	4637      	mov	r7, r6
 8118938:	e7e1      	b.n	81188fe <_dtoa_r+0x956>
 811893a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 811893c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8118940:	4637      	mov	r7, r6
 8118942:	e599      	b.n	8118478 <_dtoa_r+0x4d0>
 8118944:	9b08      	ldr	r3, [sp, #32]
 8118946:	f8dd 9004 	ldr.w	r9, [sp, #4]
 811894a:	2b00      	cmp	r3, #0
 811894c:	f000 80fd 	beq.w	8118b4a <_dtoa_r+0xba2>
 8118950:	2d00      	cmp	r5, #0
 8118952:	dd05      	ble.n	8118960 <_dtoa_r+0x9b8>
 8118954:	4639      	mov	r1, r7
 8118956:	462a      	mov	r2, r5
 8118958:	4620      	mov	r0, r4
 811895a:	f000 fc85 	bl	8119268 <__lshift>
 811895e:	4607      	mov	r7, r0
 8118960:	9b06      	ldr	r3, [sp, #24]
 8118962:	2b00      	cmp	r3, #0
 8118964:	d05c      	beq.n	8118a20 <_dtoa_r+0xa78>
 8118966:	6879      	ldr	r1, [r7, #4]
 8118968:	4620      	mov	r0, r4
 811896a:	f000 fa6b 	bl	8118e44 <_Balloc>
 811896e:	4605      	mov	r5, r0
 8118970:	b928      	cbnz	r0, 811897e <_dtoa_r+0x9d6>
 8118972:	4b80      	ldr	r3, [pc, #512]	; (8118b74 <_dtoa_r+0xbcc>)
 8118974:	4602      	mov	r2, r0
 8118976:	f240 21ea 	movw	r1, #746	; 0x2ea
 811897a:	f7ff bb2e 	b.w	8117fda <_dtoa_r+0x32>
 811897e:	693a      	ldr	r2, [r7, #16]
 8118980:	3202      	adds	r2, #2
 8118982:	0092      	lsls	r2, r2, #2
 8118984:	f107 010c 	add.w	r1, r7, #12
 8118988:	300c      	adds	r0, #12
 811898a:	f7fe fa42 	bl	8116e12 <memcpy>
 811898e:	2201      	movs	r2, #1
 8118990:	4629      	mov	r1, r5
 8118992:	4620      	mov	r0, r4
 8118994:	f000 fc68 	bl	8119268 <__lshift>
 8118998:	9b00      	ldr	r3, [sp, #0]
 811899a:	3301      	adds	r3, #1
 811899c:	9301      	str	r3, [sp, #4]
 811899e:	9b00      	ldr	r3, [sp, #0]
 81189a0:	444b      	add	r3, r9
 81189a2:	9307      	str	r3, [sp, #28]
 81189a4:	9b02      	ldr	r3, [sp, #8]
 81189a6:	f003 0301 	and.w	r3, r3, #1
 81189aa:	46b8      	mov	r8, r7
 81189ac:	9306      	str	r3, [sp, #24]
 81189ae:	4607      	mov	r7, r0
 81189b0:	9b01      	ldr	r3, [sp, #4]
 81189b2:	4631      	mov	r1, r6
 81189b4:	3b01      	subs	r3, #1
 81189b6:	4658      	mov	r0, fp
 81189b8:	9302      	str	r3, [sp, #8]
 81189ba:	f7ff fa69 	bl	8117e90 <quorem>
 81189be:	4603      	mov	r3, r0
 81189c0:	3330      	adds	r3, #48	; 0x30
 81189c2:	9004      	str	r0, [sp, #16]
 81189c4:	4641      	mov	r1, r8
 81189c6:	4658      	mov	r0, fp
 81189c8:	9308      	str	r3, [sp, #32]
 81189ca:	f000 fcb9 	bl	8119340 <__mcmp>
 81189ce:	463a      	mov	r2, r7
 81189d0:	4681      	mov	r9, r0
 81189d2:	4631      	mov	r1, r6
 81189d4:	4620      	mov	r0, r4
 81189d6:	f000 fccf 	bl	8119378 <__mdiff>
 81189da:	68c2      	ldr	r2, [r0, #12]
 81189dc:	9b08      	ldr	r3, [sp, #32]
 81189de:	4605      	mov	r5, r0
 81189e0:	bb02      	cbnz	r2, 8118a24 <_dtoa_r+0xa7c>
 81189e2:	4601      	mov	r1, r0
 81189e4:	4658      	mov	r0, fp
 81189e6:	f000 fcab 	bl	8119340 <__mcmp>
 81189ea:	9b08      	ldr	r3, [sp, #32]
 81189ec:	4602      	mov	r2, r0
 81189ee:	4629      	mov	r1, r5
 81189f0:	4620      	mov	r0, r4
 81189f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 81189f6:	f000 fa65 	bl	8118ec4 <_Bfree>
 81189fa:	9b05      	ldr	r3, [sp, #20]
 81189fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81189fe:	9d01      	ldr	r5, [sp, #4]
 8118a00:	ea43 0102 	orr.w	r1, r3, r2
 8118a04:	9b06      	ldr	r3, [sp, #24]
 8118a06:	430b      	orrs	r3, r1
 8118a08:	9b08      	ldr	r3, [sp, #32]
 8118a0a:	d10d      	bne.n	8118a28 <_dtoa_r+0xa80>
 8118a0c:	2b39      	cmp	r3, #57	; 0x39
 8118a0e:	d029      	beq.n	8118a64 <_dtoa_r+0xabc>
 8118a10:	f1b9 0f00 	cmp.w	r9, #0
 8118a14:	dd01      	ble.n	8118a1a <_dtoa_r+0xa72>
 8118a16:	9b04      	ldr	r3, [sp, #16]
 8118a18:	3331      	adds	r3, #49	; 0x31
 8118a1a:	9a02      	ldr	r2, [sp, #8]
 8118a1c:	7013      	strb	r3, [r2, #0]
 8118a1e:	e774      	b.n	811890a <_dtoa_r+0x962>
 8118a20:	4638      	mov	r0, r7
 8118a22:	e7b9      	b.n	8118998 <_dtoa_r+0x9f0>
 8118a24:	2201      	movs	r2, #1
 8118a26:	e7e2      	b.n	81189ee <_dtoa_r+0xa46>
 8118a28:	f1b9 0f00 	cmp.w	r9, #0
 8118a2c:	db06      	blt.n	8118a3c <_dtoa_r+0xa94>
 8118a2e:	9905      	ldr	r1, [sp, #20]
 8118a30:	ea41 0909 	orr.w	r9, r1, r9
 8118a34:	9906      	ldr	r1, [sp, #24]
 8118a36:	ea59 0101 	orrs.w	r1, r9, r1
 8118a3a:	d120      	bne.n	8118a7e <_dtoa_r+0xad6>
 8118a3c:	2a00      	cmp	r2, #0
 8118a3e:	ddec      	ble.n	8118a1a <_dtoa_r+0xa72>
 8118a40:	4659      	mov	r1, fp
 8118a42:	2201      	movs	r2, #1
 8118a44:	4620      	mov	r0, r4
 8118a46:	9301      	str	r3, [sp, #4]
 8118a48:	f000 fc0e 	bl	8119268 <__lshift>
 8118a4c:	4631      	mov	r1, r6
 8118a4e:	4683      	mov	fp, r0
 8118a50:	f000 fc76 	bl	8119340 <__mcmp>
 8118a54:	2800      	cmp	r0, #0
 8118a56:	9b01      	ldr	r3, [sp, #4]
 8118a58:	dc02      	bgt.n	8118a60 <_dtoa_r+0xab8>
 8118a5a:	d1de      	bne.n	8118a1a <_dtoa_r+0xa72>
 8118a5c:	07da      	lsls	r2, r3, #31
 8118a5e:	d5dc      	bpl.n	8118a1a <_dtoa_r+0xa72>
 8118a60:	2b39      	cmp	r3, #57	; 0x39
 8118a62:	d1d8      	bne.n	8118a16 <_dtoa_r+0xa6e>
 8118a64:	9a02      	ldr	r2, [sp, #8]
 8118a66:	2339      	movs	r3, #57	; 0x39
 8118a68:	7013      	strb	r3, [r2, #0]
 8118a6a:	462b      	mov	r3, r5
 8118a6c:	461d      	mov	r5, r3
 8118a6e:	3b01      	subs	r3, #1
 8118a70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8118a74:	2a39      	cmp	r2, #57	; 0x39
 8118a76:	d050      	beq.n	8118b1a <_dtoa_r+0xb72>
 8118a78:	3201      	adds	r2, #1
 8118a7a:	701a      	strb	r2, [r3, #0]
 8118a7c:	e745      	b.n	811890a <_dtoa_r+0x962>
 8118a7e:	2a00      	cmp	r2, #0
 8118a80:	dd03      	ble.n	8118a8a <_dtoa_r+0xae2>
 8118a82:	2b39      	cmp	r3, #57	; 0x39
 8118a84:	d0ee      	beq.n	8118a64 <_dtoa_r+0xabc>
 8118a86:	3301      	adds	r3, #1
 8118a88:	e7c7      	b.n	8118a1a <_dtoa_r+0xa72>
 8118a8a:	9a01      	ldr	r2, [sp, #4]
 8118a8c:	9907      	ldr	r1, [sp, #28]
 8118a8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8118a92:	428a      	cmp	r2, r1
 8118a94:	d02a      	beq.n	8118aec <_dtoa_r+0xb44>
 8118a96:	4659      	mov	r1, fp
 8118a98:	2300      	movs	r3, #0
 8118a9a:	220a      	movs	r2, #10
 8118a9c:	4620      	mov	r0, r4
 8118a9e:	f000 fa33 	bl	8118f08 <__multadd>
 8118aa2:	45b8      	cmp	r8, r7
 8118aa4:	4683      	mov	fp, r0
 8118aa6:	f04f 0300 	mov.w	r3, #0
 8118aaa:	f04f 020a 	mov.w	r2, #10
 8118aae:	4641      	mov	r1, r8
 8118ab0:	4620      	mov	r0, r4
 8118ab2:	d107      	bne.n	8118ac4 <_dtoa_r+0xb1c>
 8118ab4:	f000 fa28 	bl	8118f08 <__multadd>
 8118ab8:	4680      	mov	r8, r0
 8118aba:	4607      	mov	r7, r0
 8118abc:	9b01      	ldr	r3, [sp, #4]
 8118abe:	3301      	adds	r3, #1
 8118ac0:	9301      	str	r3, [sp, #4]
 8118ac2:	e775      	b.n	81189b0 <_dtoa_r+0xa08>
 8118ac4:	f000 fa20 	bl	8118f08 <__multadd>
 8118ac8:	4639      	mov	r1, r7
 8118aca:	4680      	mov	r8, r0
 8118acc:	2300      	movs	r3, #0
 8118ace:	220a      	movs	r2, #10
 8118ad0:	4620      	mov	r0, r4
 8118ad2:	f000 fa19 	bl	8118f08 <__multadd>
 8118ad6:	4607      	mov	r7, r0
 8118ad8:	e7f0      	b.n	8118abc <_dtoa_r+0xb14>
 8118ada:	f1b9 0f00 	cmp.w	r9, #0
 8118ade:	9a00      	ldr	r2, [sp, #0]
 8118ae0:	bfcc      	ite	gt
 8118ae2:	464d      	movgt	r5, r9
 8118ae4:	2501      	movle	r5, #1
 8118ae6:	4415      	add	r5, r2
 8118ae8:	f04f 0800 	mov.w	r8, #0
 8118aec:	4659      	mov	r1, fp
 8118aee:	2201      	movs	r2, #1
 8118af0:	4620      	mov	r0, r4
 8118af2:	9301      	str	r3, [sp, #4]
 8118af4:	f000 fbb8 	bl	8119268 <__lshift>
 8118af8:	4631      	mov	r1, r6
 8118afa:	4683      	mov	fp, r0
 8118afc:	f000 fc20 	bl	8119340 <__mcmp>
 8118b00:	2800      	cmp	r0, #0
 8118b02:	dcb2      	bgt.n	8118a6a <_dtoa_r+0xac2>
 8118b04:	d102      	bne.n	8118b0c <_dtoa_r+0xb64>
 8118b06:	9b01      	ldr	r3, [sp, #4]
 8118b08:	07db      	lsls	r3, r3, #31
 8118b0a:	d4ae      	bmi.n	8118a6a <_dtoa_r+0xac2>
 8118b0c:	462b      	mov	r3, r5
 8118b0e:	461d      	mov	r5, r3
 8118b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8118b14:	2a30      	cmp	r2, #48	; 0x30
 8118b16:	d0fa      	beq.n	8118b0e <_dtoa_r+0xb66>
 8118b18:	e6f7      	b.n	811890a <_dtoa_r+0x962>
 8118b1a:	9a00      	ldr	r2, [sp, #0]
 8118b1c:	429a      	cmp	r2, r3
 8118b1e:	d1a5      	bne.n	8118a6c <_dtoa_r+0xac4>
 8118b20:	f10a 0a01 	add.w	sl, sl, #1
 8118b24:	2331      	movs	r3, #49	; 0x31
 8118b26:	e779      	b.n	8118a1c <_dtoa_r+0xa74>
 8118b28:	4b13      	ldr	r3, [pc, #76]	; (8118b78 <_dtoa_r+0xbd0>)
 8118b2a:	f7ff baaf 	b.w	811808c <_dtoa_r+0xe4>
 8118b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8118b30:	2b00      	cmp	r3, #0
 8118b32:	f47f aa86 	bne.w	8118042 <_dtoa_r+0x9a>
 8118b36:	4b11      	ldr	r3, [pc, #68]	; (8118b7c <_dtoa_r+0xbd4>)
 8118b38:	f7ff baa8 	b.w	811808c <_dtoa_r+0xe4>
 8118b3c:	f1b9 0f00 	cmp.w	r9, #0
 8118b40:	dc03      	bgt.n	8118b4a <_dtoa_r+0xba2>
 8118b42:	9b05      	ldr	r3, [sp, #20]
 8118b44:	2b02      	cmp	r3, #2
 8118b46:	f73f aec9 	bgt.w	81188dc <_dtoa_r+0x934>
 8118b4a:	9d00      	ldr	r5, [sp, #0]
 8118b4c:	4631      	mov	r1, r6
 8118b4e:	4658      	mov	r0, fp
 8118b50:	f7ff f99e 	bl	8117e90 <quorem>
 8118b54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8118b58:	f805 3b01 	strb.w	r3, [r5], #1
 8118b5c:	9a00      	ldr	r2, [sp, #0]
 8118b5e:	1aaa      	subs	r2, r5, r2
 8118b60:	4591      	cmp	r9, r2
 8118b62:	ddba      	ble.n	8118ada <_dtoa_r+0xb32>
 8118b64:	4659      	mov	r1, fp
 8118b66:	2300      	movs	r3, #0
 8118b68:	220a      	movs	r2, #10
 8118b6a:	4620      	mov	r0, r4
 8118b6c:	f000 f9cc 	bl	8118f08 <__multadd>
 8118b70:	4683      	mov	fp, r0
 8118b72:	e7eb      	b.n	8118b4c <_dtoa_r+0xba4>
 8118b74:	0811ba66 	.word	0x0811ba66
 8118b78:	0811b924 	.word	0x0811b924
 8118b7c:	0811b9fa 	.word	0x0811b9fa

08118b80 <__sflush_r>:
 8118b80:	898a      	ldrh	r2, [r1, #12]
 8118b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8118b86:	4605      	mov	r5, r0
 8118b88:	0710      	lsls	r0, r2, #28
 8118b8a:	460c      	mov	r4, r1
 8118b8c:	d458      	bmi.n	8118c40 <__sflush_r+0xc0>
 8118b8e:	684b      	ldr	r3, [r1, #4]
 8118b90:	2b00      	cmp	r3, #0
 8118b92:	dc05      	bgt.n	8118ba0 <__sflush_r+0x20>
 8118b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8118b96:	2b00      	cmp	r3, #0
 8118b98:	dc02      	bgt.n	8118ba0 <__sflush_r+0x20>
 8118b9a:	2000      	movs	r0, #0
 8118b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8118ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8118ba2:	2e00      	cmp	r6, #0
 8118ba4:	d0f9      	beq.n	8118b9a <__sflush_r+0x1a>
 8118ba6:	2300      	movs	r3, #0
 8118ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8118bac:	682f      	ldr	r7, [r5, #0]
 8118bae:	602b      	str	r3, [r5, #0]
 8118bb0:	d032      	beq.n	8118c18 <__sflush_r+0x98>
 8118bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8118bb4:	89a3      	ldrh	r3, [r4, #12]
 8118bb6:	075a      	lsls	r2, r3, #29
 8118bb8:	d505      	bpl.n	8118bc6 <__sflush_r+0x46>
 8118bba:	6863      	ldr	r3, [r4, #4]
 8118bbc:	1ac0      	subs	r0, r0, r3
 8118bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8118bc0:	b10b      	cbz	r3, 8118bc6 <__sflush_r+0x46>
 8118bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8118bc4:	1ac0      	subs	r0, r0, r3
 8118bc6:	2300      	movs	r3, #0
 8118bc8:	4602      	mov	r2, r0
 8118bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8118bcc:	6a21      	ldr	r1, [r4, #32]
 8118bce:	4628      	mov	r0, r5
 8118bd0:	47b0      	blx	r6
 8118bd2:	1c43      	adds	r3, r0, #1
 8118bd4:	89a3      	ldrh	r3, [r4, #12]
 8118bd6:	d106      	bne.n	8118be6 <__sflush_r+0x66>
 8118bd8:	6829      	ldr	r1, [r5, #0]
 8118bda:	291d      	cmp	r1, #29
 8118bdc:	d82c      	bhi.n	8118c38 <__sflush_r+0xb8>
 8118bde:	4a2a      	ldr	r2, [pc, #168]	; (8118c88 <__sflush_r+0x108>)
 8118be0:	40ca      	lsrs	r2, r1
 8118be2:	07d6      	lsls	r6, r2, #31
 8118be4:	d528      	bpl.n	8118c38 <__sflush_r+0xb8>
 8118be6:	2200      	movs	r2, #0
 8118be8:	6062      	str	r2, [r4, #4]
 8118bea:	04d9      	lsls	r1, r3, #19
 8118bec:	6922      	ldr	r2, [r4, #16]
 8118bee:	6022      	str	r2, [r4, #0]
 8118bf0:	d504      	bpl.n	8118bfc <__sflush_r+0x7c>
 8118bf2:	1c42      	adds	r2, r0, #1
 8118bf4:	d101      	bne.n	8118bfa <__sflush_r+0x7a>
 8118bf6:	682b      	ldr	r3, [r5, #0]
 8118bf8:	b903      	cbnz	r3, 8118bfc <__sflush_r+0x7c>
 8118bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8118bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8118bfe:	602f      	str	r7, [r5, #0]
 8118c00:	2900      	cmp	r1, #0
 8118c02:	d0ca      	beq.n	8118b9a <__sflush_r+0x1a>
 8118c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8118c08:	4299      	cmp	r1, r3
 8118c0a:	d002      	beq.n	8118c12 <__sflush_r+0x92>
 8118c0c:	4628      	mov	r0, r5
 8118c0e:	f000 fca7 	bl	8119560 <_free_r>
 8118c12:	2000      	movs	r0, #0
 8118c14:	6360      	str	r0, [r4, #52]	; 0x34
 8118c16:	e7c1      	b.n	8118b9c <__sflush_r+0x1c>
 8118c18:	6a21      	ldr	r1, [r4, #32]
 8118c1a:	2301      	movs	r3, #1
 8118c1c:	4628      	mov	r0, r5
 8118c1e:	47b0      	blx	r6
 8118c20:	1c41      	adds	r1, r0, #1
 8118c22:	d1c7      	bne.n	8118bb4 <__sflush_r+0x34>
 8118c24:	682b      	ldr	r3, [r5, #0]
 8118c26:	2b00      	cmp	r3, #0
 8118c28:	d0c4      	beq.n	8118bb4 <__sflush_r+0x34>
 8118c2a:	2b1d      	cmp	r3, #29
 8118c2c:	d001      	beq.n	8118c32 <__sflush_r+0xb2>
 8118c2e:	2b16      	cmp	r3, #22
 8118c30:	d101      	bne.n	8118c36 <__sflush_r+0xb6>
 8118c32:	602f      	str	r7, [r5, #0]
 8118c34:	e7b1      	b.n	8118b9a <__sflush_r+0x1a>
 8118c36:	89a3      	ldrh	r3, [r4, #12]
 8118c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8118c3c:	81a3      	strh	r3, [r4, #12]
 8118c3e:	e7ad      	b.n	8118b9c <__sflush_r+0x1c>
 8118c40:	690f      	ldr	r7, [r1, #16]
 8118c42:	2f00      	cmp	r7, #0
 8118c44:	d0a9      	beq.n	8118b9a <__sflush_r+0x1a>
 8118c46:	0793      	lsls	r3, r2, #30
 8118c48:	680e      	ldr	r6, [r1, #0]
 8118c4a:	bf08      	it	eq
 8118c4c:	694b      	ldreq	r3, [r1, #20]
 8118c4e:	600f      	str	r7, [r1, #0]
 8118c50:	bf18      	it	ne
 8118c52:	2300      	movne	r3, #0
 8118c54:	eba6 0807 	sub.w	r8, r6, r7
 8118c58:	608b      	str	r3, [r1, #8]
 8118c5a:	f1b8 0f00 	cmp.w	r8, #0
 8118c5e:	dd9c      	ble.n	8118b9a <__sflush_r+0x1a>
 8118c60:	6a21      	ldr	r1, [r4, #32]
 8118c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8118c64:	4643      	mov	r3, r8
 8118c66:	463a      	mov	r2, r7
 8118c68:	4628      	mov	r0, r5
 8118c6a:	47b0      	blx	r6
 8118c6c:	2800      	cmp	r0, #0
 8118c6e:	dc06      	bgt.n	8118c7e <__sflush_r+0xfe>
 8118c70:	89a3      	ldrh	r3, [r4, #12]
 8118c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8118c76:	81a3      	strh	r3, [r4, #12]
 8118c78:	f04f 30ff 	mov.w	r0, #4294967295
 8118c7c:	e78e      	b.n	8118b9c <__sflush_r+0x1c>
 8118c7e:	4407      	add	r7, r0
 8118c80:	eba8 0800 	sub.w	r8, r8, r0
 8118c84:	e7e9      	b.n	8118c5a <__sflush_r+0xda>
 8118c86:	bf00      	nop
 8118c88:	20400001 	.word	0x20400001

08118c8c <_fflush_r>:
 8118c8c:	b538      	push	{r3, r4, r5, lr}
 8118c8e:	690b      	ldr	r3, [r1, #16]
 8118c90:	4605      	mov	r5, r0
 8118c92:	460c      	mov	r4, r1
 8118c94:	b913      	cbnz	r3, 8118c9c <_fflush_r+0x10>
 8118c96:	2500      	movs	r5, #0
 8118c98:	4628      	mov	r0, r5
 8118c9a:	bd38      	pop	{r3, r4, r5, pc}
 8118c9c:	b118      	cbz	r0, 8118ca6 <_fflush_r+0x1a>
 8118c9e:	6983      	ldr	r3, [r0, #24]
 8118ca0:	b90b      	cbnz	r3, 8118ca6 <_fflush_r+0x1a>
 8118ca2:	f7fd ffe3 	bl	8116c6c <__sinit>
 8118ca6:	4b14      	ldr	r3, [pc, #80]	; (8118cf8 <_fflush_r+0x6c>)
 8118ca8:	429c      	cmp	r4, r3
 8118caa:	d11b      	bne.n	8118ce4 <_fflush_r+0x58>
 8118cac:	686c      	ldr	r4, [r5, #4]
 8118cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8118cb2:	2b00      	cmp	r3, #0
 8118cb4:	d0ef      	beq.n	8118c96 <_fflush_r+0xa>
 8118cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8118cb8:	07d0      	lsls	r0, r2, #31
 8118cba:	d404      	bmi.n	8118cc6 <_fflush_r+0x3a>
 8118cbc:	0599      	lsls	r1, r3, #22
 8118cbe:	d402      	bmi.n	8118cc6 <_fflush_r+0x3a>
 8118cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8118cc2:	f7fe f896 	bl	8116df2 <__retarget_lock_acquire_recursive>
 8118cc6:	4628      	mov	r0, r5
 8118cc8:	4621      	mov	r1, r4
 8118cca:	f7ff ff59 	bl	8118b80 <__sflush_r>
 8118cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8118cd0:	07da      	lsls	r2, r3, #31
 8118cd2:	4605      	mov	r5, r0
 8118cd4:	d4e0      	bmi.n	8118c98 <_fflush_r+0xc>
 8118cd6:	89a3      	ldrh	r3, [r4, #12]
 8118cd8:	059b      	lsls	r3, r3, #22
 8118cda:	d4dd      	bmi.n	8118c98 <_fflush_r+0xc>
 8118cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8118cde:	f7fe f889 	bl	8116df4 <__retarget_lock_release_recursive>
 8118ce2:	e7d9      	b.n	8118c98 <_fflush_r+0xc>
 8118ce4:	4b05      	ldr	r3, [pc, #20]	; (8118cfc <_fflush_r+0x70>)
 8118ce6:	429c      	cmp	r4, r3
 8118ce8:	d101      	bne.n	8118cee <_fflush_r+0x62>
 8118cea:	68ac      	ldr	r4, [r5, #8]
 8118cec:	e7df      	b.n	8118cae <_fflush_r+0x22>
 8118cee:	4b04      	ldr	r3, [pc, #16]	; (8118d00 <_fflush_r+0x74>)
 8118cf0:	429c      	cmp	r4, r3
 8118cf2:	bf08      	it	eq
 8118cf4:	68ec      	ldreq	r4, [r5, #12]
 8118cf6:	e7da      	b.n	8118cae <_fflush_r+0x22>
 8118cf8:	0811b8d0 	.word	0x0811b8d0
 8118cfc:	0811b8f0 	.word	0x0811b8f0
 8118d00:	0811b8b0 	.word	0x0811b8b0

08118d04 <fiprintf>:
 8118d04:	b40e      	push	{r1, r2, r3}
 8118d06:	b503      	push	{r0, r1, lr}
 8118d08:	4601      	mov	r1, r0
 8118d0a:	ab03      	add	r3, sp, #12
 8118d0c:	4805      	ldr	r0, [pc, #20]	; (8118d24 <fiprintf+0x20>)
 8118d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8118d12:	6800      	ldr	r0, [r0, #0]
 8118d14:	9301      	str	r3, [sp, #4]
 8118d16:	f000 fc9d 	bl	8119654 <_vfiprintf_r>
 8118d1a:	b002      	add	sp, #8
 8118d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8118d20:	b003      	add	sp, #12
 8118d22:	4770      	bx	lr
 8118d24:	1000002c 	.word	0x1000002c

08118d28 <_localeconv_r>:
 8118d28:	4800      	ldr	r0, [pc, #0]	; (8118d2c <_localeconv_r+0x4>)
 8118d2a:	4770      	bx	lr
 8118d2c:	10000180 	.word	0x10000180

08118d30 <_lseek_r>:
 8118d30:	b538      	push	{r3, r4, r5, lr}
 8118d32:	4d07      	ldr	r5, [pc, #28]	; (8118d50 <_lseek_r+0x20>)
 8118d34:	4604      	mov	r4, r0
 8118d36:	4608      	mov	r0, r1
 8118d38:	4611      	mov	r1, r2
 8118d3a:	2200      	movs	r2, #0
 8118d3c:	602a      	str	r2, [r5, #0]
 8118d3e:	461a      	mov	r2, r3
 8118d40:	f7fd fa2a 	bl	8116198 <_lseek>
 8118d44:	1c43      	adds	r3, r0, #1
 8118d46:	d102      	bne.n	8118d4e <_lseek_r+0x1e>
 8118d48:	682b      	ldr	r3, [r5, #0]
 8118d4a:	b103      	cbz	r3, 8118d4e <_lseek_r+0x1e>
 8118d4c:	6023      	str	r3, [r4, #0]
 8118d4e:	bd38      	pop	{r3, r4, r5, pc}
 8118d50:	100087d4 	.word	0x100087d4

08118d54 <__swhatbuf_r>:
 8118d54:	b570      	push	{r4, r5, r6, lr}
 8118d56:	460e      	mov	r6, r1
 8118d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8118d5c:	2900      	cmp	r1, #0
 8118d5e:	b096      	sub	sp, #88	; 0x58
 8118d60:	4614      	mov	r4, r2
 8118d62:	461d      	mov	r5, r3
 8118d64:	da07      	bge.n	8118d76 <__swhatbuf_r+0x22>
 8118d66:	2300      	movs	r3, #0
 8118d68:	602b      	str	r3, [r5, #0]
 8118d6a:	89b3      	ldrh	r3, [r6, #12]
 8118d6c:	061a      	lsls	r2, r3, #24
 8118d6e:	d410      	bmi.n	8118d92 <__swhatbuf_r+0x3e>
 8118d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8118d74:	e00e      	b.n	8118d94 <__swhatbuf_r+0x40>
 8118d76:	466a      	mov	r2, sp
 8118d78:	f000 fdb6 	bl	81198e8 <_fstat_r>
 8118d7c:	2800      	cmp	r0, #0
 8118d7e:	dbf2      	blt.n	8118d66 <__swhatbuf_r+0x12>
 8118d80:	9a01      	ldr	r2, [sp, #4]
 8118d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8118d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8118d8a:	425a      	negs	r2, r3
 8118d8c:	415a      	adcs	r2, r3
 8118d8e:	602a      	str	r2, [r5, #0]
 8118d90:	e7ee      	b.n	8118d70 <__swhatbuf_r+0x1c>
 8118d92:	2340      	movs	r3, #64	; 0x40
 8118d94:	2000      	movs	r0, #0
 8118d96:	6023      	str	r3, [r4, #0]
 8118d98:	b016      	add	sp, #88	; 0x58
 8118d9a:	bd70      	pop	{r4, r5, r6, pc}

08118d9c <__smakebuf_r>:
 8118d9c:	898b      	ldrh	r3, [r1, #12]
 8118d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8118da0:	079d      	lsls	r5, r3, #30
 8118da2:	4606      	mov	r6, r0
 8118da4:	460c      	mov	r4, r1
 8118da6:	d507      	bpl.n	8118db8 <__smakebuf_r+0x1c>
 8118da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8118dac:	6023      	str	r3, [r4, #0]
 8118dae:	6123      	str	r3, [r4, #16]
 8118db0:	2301      	movs	r3, #1
 8118db2:	6163      	str	r3, [r4, #20]
 8118db4:	b002      	add	sp, #8
 8118db6:	bd70      	pop	{r4, r5, r6, pc}
 8118db8:	ab01      	add	r3, sp, #4
 8118dba:	466a      	mov	r2, sp
 8118dbc:	f7ff ffca 	bl	8118d54 <__swhatbuf_r>
 8118dc0:	9900      	ldr	r1, [sp, #0]
 8118dc2:	4605      	mov	r5, r0
 8118dc4:	4630      	mov	r0, r6
 8118dc6:	f7fe f83b 	bl	8116e40 <_malloc_r>
 8118dca:	b948      	cbnz	r0, 8118de0 <__smakebuf_r+0x44>
 8118dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8118dd0:	059a      	lsls	r2, r3, #22
 8118dd2:	d4ef      	bmi.n	8118db4 <__smakebuf_r+0x18>
 8118dd4:	f023 0303 	bic.w	r3, r3, #3
 8118dd8:	f043 0302 	orr.w	r3, r3, #2
 8118ddc:	81a3      	strh	r3, [r4, #12]
 8118dde:	e7e3      	b.n	8118da8 <__smakebuf_r+0xc>
 8118de0:	4b0d      	ldr	r3, [pc, #52]	; (8118e18 <__smakebuf_r+0x7c>)
 8118de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8118de4:	89a3      	ldrh	r3, [r4, #12]
 8118de6:	6020      	str	r0, [r4, #0]
 8118de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8118dec:	81a3      	strh	r3, [r4, #12]
 8118dee:	9b00      	ldr	r3, [sp, #0]
 8118df0:	6163      	str	r3, [r4, #20]
 8118df2:	9b01      	ldr	r3, [sp, #4]
 8118df4:	6120      	str	r0, [r4, #16]
 8118df6:	b15b      	cbz	r3, 8118e10 <__smakebuf_r+0x74>
 8118df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8118dfc:	4630      	mov	r0, r6
 8118dfe:	f000 fd85 	bl	811990c <_isatty_r>
 8118e02:	b128      	cbz	r0, 8118e10 <__smakebuf_r+0x74>
 8118e04:	89a3      	ldrh	r3, [r4, #12]
 8118e06:	f023 0303 	bic.w	r3, r3, #3
 8118e0a:	f043 0301 	orr.w	r3, r3, #1
 8118e0e:	81a3      	strh	r3, [r4, #12]
 8118e10:	89a0      	ldrh	r0, [r4, #12]
 8118e12:	4305      	orrs	r5, r0
 8118e14:	81a5      	strh	r5, [r4, #12]
 8118e16:	e7cd      	b.n	8118db4 <__smakebuf_r+0x18>
 8118e18:	08116c05 	.word	0x08116c05

08118e1c <malloc>:
 8118e1c:	4b02      	ldr	r3, [pc, #8]	; (8118e28 <malloc+0xc>)
 8118e1e:	4601      	mov	r1, r0
 8118e20:	6818      	ldr	r0, [r3, #0]
 8118e22:	f7fe b80d 	b.w	8116e40 <_malloc_r>
 8118e26:	bf00      	nop
 8118e28:	1000002c 	.word	0x1000002c

08118e2c <__malloc_lock>:
 8118e2c:	4801      	ldr	r0, [pc, #4]	; (8118e34 <__malloc_lock+0x8>)
 8118e2e:	f7fd bfe0 	b.w	8116df2 <__retarget_lock_acquire_recursive>
 8118e32:	bf00      	nop
 8118e34:	10008de8 	.word	0x10008de8

08118e38 <__malloc_unlock>:
 8118e38:	4801      	ldr	r0, [pc, #4]	; (8118e40 <__malloc_unlock+0x8>)
 8118e3a:	f7fd bfdb 	b.w	8116df4 <__retarget_lock_release_recursive>
 8118e3e:	bf00      	nop
 8118e40:	10008de8 	.word	0x10008de8

08118e44 <_Balloc>:
 8118e44:	b570      	push	{r4, r5, r6, lr}
 8118e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8118e48:	4604      	mov	r4, r0
 8118e4a:	460d      	mov	r5, r1
 8118e4c:	b976      	cbnz	r6, 8118e6c <_Balloc+0x28>
 8118e4e:	2010      	movs	r0, #16
 8118e50:	f7ff ffe4 	bl	8118e1c <malloc>
 8118e54:	4602      	mov	r2, r0
 8118e56:	6260      	str	r0, [r4, #36]	; 0x24
 8118e58:	b920      	cbnz	r0, 8118e64 <_Balloc+0x20>
 8118e5a:	4b18      	ldr	r3, [pc, #96]	; (8118ebc <_Balloc+0x78>)
 8118e5c:	4818      	ldr	r0, [pc, #96]	; (8118ec0 <_Balloc+0x7c>)
 8118e5e:	2166      	movs	r1, #102	; 0x66
 8118e60:	f7fe ffe8 	bl	8117e34 <__assert_func>
 8118e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8118e68:	6006      	str	r6, [r0, #0]
 8118e6a:	60c6      	str	r6, [r0, #12]
 8118e6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8118e6e:	68f3      	ldr	r3, [r6, #12]
 8118e70:	b183      	cbz	r3, 8118e94 <_Balloc+0x50>
 8118e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8118e74:	68db      	ldr	r3, [r3, #12]
 8118e76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8118e7a:	b9b8      	cbnz	r0, 8118eac <_Balloc+0x68>
 8118e7c:	2101      	movs	r1, #1
 8118e7e:	fa01 f605 	lsl.w	r6, r1, r5
 8118e82:	1d72      	adds	r2, r6, #5
 8118e84:	0092      	lsls	r2, r2, #2
 8118e86:	4620      	mov	r0, r4
 8118e88:	f000 fb5a 	bl	8119540 <_calloc_r>
 8118e8c:	b160      	cbz	r0, 8118ea8 <_Balloc+0x64>
 8118e8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8118e92:	e00e      	b.n	8118eb2 <_Balloc+0x6e>
 8118e94:	2221      	movs	r2, #33	; 0x21
 8118e96:	2104      	movs	r1, #4
 8118e98:	4620      	mov	r0, r4
 8118e9a:	f000 fb51 	bl	8119540 <_calloc_r>
 8118e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8118ea0:	60f0      	str	r0, [r6, #12]
 8118ea2:	68db      	ldr	r3, [r3, #12]
 8118ea4:	2b00      	cmp	r3, #0
 8118ea6:	d1e4      	bne.n	8118e72 <_Balloc+0x2e>
 8118ea8:	2000      	movs	r0, #0
 8118eaa:	bd70      	pop	{r4, r5, r6, pc}
 8118eac:	6802      	ldr	r2, [r0, #0]
 8118eae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8118eb2:	2300      	movs	r3, #0
 8118eb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8118eb8:	e7f7      	b.n	8118eaa <_Balloc+0x66>
 8118eba:	bf00      	nop
 8118ebc:	0811b948 	.word	0x0811b948
 8118ec0:	0811ba77 	.word	0x0811ba77

08118ec4 <_Bfree>:
 8118ec4:	b570      	push	{r4, r5, r6, lr}
 8118ec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8118ec8:	4605      	mov	r5, r0
 8118eca:	460c      	mov	r4, r1
 8118ecc:	b976      	cbnz	r6, 8118eec <_Bfree+0x28>
 8118ece:	2010      	movs	r0, #16
 8118ed0:	f7ff ffa4 	bl	8118e1c <malloc>
 8118ed4:	4602      	mov	r2, r0
 8118ed6:	6268      	str	r0, [r5, #36]	; 0x24
 8118ed8:	b920      	cbnz	r0, 8118ee4 <_Bfree+0x20>
 8118eda:	4b09      	ldr	r3, [pc, #36]	; (8118f00 <_Bfree+0x3c>)
 8118edc:	4809      	ldr	r0, [pc, #36]	; (8118f04 <_Bfree+0x40>)
 8118ede:	218a      	movs	r1, #138	; 0x8a
 8118ee0:	f7fe ffa8 	bl	8117e34 <__assert_func>
 8118ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8118ee8:	6006      	str	r6, [r0, #0]
 8118eea:	60c6      	str	r6, [r0, #12]
 8118eec:	b13c      	cbz	r4, 8118efe <_Bfree+0x3a>
 8118eee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8118ef0:	6862      	ldr	r2, [r4, #4]
 8118ef2:	68db      	ldr	r3, [r3, #12]
 8118ef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8118ef8:	6021      	str	r1, [r4, #0]
 8118efa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8118efe:	bd70      	pop	{r4, r5, r6, pc}
 8118f00:	0811b948 	.word	0x0811b948
 8118f04:	0811ba77 	.word	0x0811ba77

08118f08 <__multadd>:
 8118f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8118f0c:	690e      	ldr	r6, [r1, #16]
 8118f0e:	4607      	mov	r7, r0
 8118f10:	4698      	mov	r8, r3
 8118f12:	460c      	mov	r4, r1
 8118f14:	f101 0014 	add.w	r0, r1, #20
 8118f18:	2300      	movs	r3, #0
 8118f1a:	6805      	ldr	r5, [r0, #0]
 8118f1c:	b2a9      	uxth	r1, r5
 8118f1e:	fb02 8101 	mla	r1, r2, r1, r8
 8118f22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8118f26:	0c2d      	lsrs	r5, r5, #16
 8118f28:	fb02 c505 	mla	r5, r2, r5, ip
 8118f2c:	b289      	uxth	r1, r1
 8118f2e:	3301      	adds	r3, #1
 8118f30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8118f34:	429e      	cmp	r6, r3
 8118f36:	f840 1b04 	str.w	r1, [r0], #4
 8118f3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8118f3e:	dcec      	bgt.n	8118f1a <__multadd+0x12>
 8118f40:	f1b8 0f00 	cmp.w	r8, #0
 8118f44:	d022      	beq.n	8118f8c <__multadd+0x84>
 8118f46:	68a3      	ldr	r3, [r4, #8]
 8118f48:	42b3      	cmp	r3, r6
 8118f4a:	dc19      	bgt.n	8118f80 <__multadd+0x78>
 8118f4c:	6861      	ldr	r1, [r4, #4]
 8118f4e:	4638      	mov	r0, r7
 8118f50:	3101      	adds	r1, #1
 8118f52:	f7ff ff77 	bl	8118e44 <_Balloc>
 8118f56:	4605      	mov	r5, r0
 8118f58:	b928      	cbnz	r0, 8118f66 <__multadd+0x5e>
 8118f5a:	4602      	mov	r2, r0
 8118f5c:	4b0d      	ldr	r3, [pc, #52]	; (8118f94 <__multadd+0x8c>)
 8118f5e:	480e      	ldr	r0, [pc, #56]	; (8118f98 <__multadd+0x90>)
 8118f60:	21b5      	movs	r1, #181	; 0xb5
 8118f62:	f7fe ff67 	bl	8117e34 <__assert_func>
 8118f66:	6922      	ldr	r2, [r4, #16]
 8118f68:	3202      	adds	r2, #2
 8118f6a:	f104 010c 	add.w	r1, r4, #12
 8118f6e:	0092      	lsls	r2, r2, #2
 8118f70:	300c      	adds	r0, #12
 8118f72:	f7fd ff4e 	bl	8116e12 <memcpy>
 8118f76:	4621      	mov	r1, r4
 8118f78:	4638      	mov	r0, r7
 8118f7a:	f7ff ffa3 	bl	8118ec4 <_Bfree>
 8118f7e:	462c      	mov	r4, r5
 8118f80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8118f84:	3601      	adds	r6, #1
 8118f86:	f8c3 8014 	str.w	r8, [r3, #20]
 8118f8a:	6126      	str	r6, [r4, #16]
 8118f8c:	4620      	mov	r0, r4
 8118f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8118f92:	bf00      	nop
 8118f94:	0811ba66 	.word	0x0811ba66
 8118f98:	0811ba77 	.word	0x0811ba77

08118f9c <__hi0bits>:
 8118f9c:	0c03      	lsrs	r3, r0, #16
 8118f9e:	041b      	lsls	r3, r3, #16
 8118fa0:	b9d3      	cbnz	r3, 8118fd8 <__hi0bits+0x3c>
 8118fa2:	0400      	lsls	r0, r0, #16
 8118fa4:	2310      	movs	r3, #16
 8118fa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8118faa:	bf04      	itt	eq
 8118fac:	0200      	lsleq	r0, r0, #8
 8118fae:	3308      	addeq	r3, #8
 8118fb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8118fb4:	bf04      	itt	eq
 8118fb6:	0100      	lsleq	r0, r0, #4
 8118fb8:	3304      	addeq	r3, #4
 8118fba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8118fbe:	bf04      	itt	eq
 8118fc0:	0080      	lsleq	r0, r0, #2
 8118fc2:	3302      	addeq	r3, #2
 8118fc4:	2800      	cmp	r0, #0
 8118fc6:	db05      	blt.n	8118fd4 <__hi0bits+0x38>
 8118fc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8118fcc:	f103 0301 	add.w	r3, r3, #1
 8118fd0:	bf08      	it	eq
 8118fd2:	2320      	moveq	r3, #32
 8118fd4:	4618      	mov	r0, r3
 8118fd6:	4770      	bx	lr
 8118fd8:	2300      	movs	r3, #0
 8118fda:	e7e4      	b.n	8118fa6 <__hi0bits+0xa>

08118fdc <__lo0bits>:
 8118fdc:	6803      	ldr	r3, [r0, #0]
 8118fde:	f013 0207 	ands.w	r2, r3, #7
 8118fe2:	4601      	mov	r1, r0
 8118fe4:	d00b      	beq.n	8118ffe <__lo0bits+0x22>
 8118fe6:	07da      	lsls	r2, r3, #31
 8118fe8:	d424      	bmi.n	8119034 <__lo0bits+0x58>
 8118fea:	0798      	lsls	r0, r3, #30
 8118fec:	bf49      	itett	mi
 8118fee:	085b      	lsrmi	r3, r3, #1
 8118ff0:	089b      	lsrpl	r3, r3, #2
 8118ff2:	2001      	movmi	r0, #1
 8118ff4:	600b      	strmi	r3, [r1, #0]
 8118ff6:	bf5c      	itt	pl
 8118ff8:	600b      	strpl	r3, [r1, #0]
 8118ffa:	2002      	movpl	r0, #2
 8118ffc:	4770      	bx	lr
 8118ffe:	b298      	uxth	r0, r3
 8119000:	b9b0      	cbnz	r0, 8119030 <__lo0bits+0x54>
 8119002:	0c1b      	lsrs	r3, r3, #16
 8119004:	2010      	movs	r0, #16
 8119006:	f013 0fff 	tst.w	r3, #255	; 0xff
 811900a:	bf04      	itt	eq
 811900c:	0a1b      	lsreq	r3, r3, #8
 811900e:	3008      	addeq	r0, #8
 8119010:	071a      	lsls	r2, r3, #28
 8119012:	bf04      	itt	eq
 8119014:	091b      	lsreq	r3, r3, #4
 8119016:	3004      	addeq	r0, #4
 8119018:	079a      	lsls	r2, r3, #30
 811901a:	bf04      	itt	eq
 811901c:	089b      	lsreq	r3, r3, #2
 811901e:	3002      	addeq	r0, #2
 8119020:	07da      	lsls	r2, r3, #31
 8119022:	d403      	bmi.n	811902c <__lo0bits+0x50>
 8119024:	085b      	lsrs	r3, r3, #1
 8119026:	f100 0001 	add.w	r0, r0, #1
 811902a:	d005      	beq.n	8119038 <__lo0bits+0x5c>
 811902c:	600b      	str	r3, [r1, #0]
 811902e:	4770      	bx	lr
 8119030:	4610      	mov	r0, r2
 8119032:	e7e8      	b.n	8119006 <__lo0bits+0x2a>
 8119034:	2000      	movs	r0, #0
 8119036:	4770      	bx	lr
 8119038:	2020      	movs	r0, #32
 811903a:	4770      	bx	lr

0811903c <__i2b>:
 811903c:	b510      	push	{r4, lr}
 811903e:	460c      	mov	r4, r1
 8119040:	2101      	movs	r1, #1
 8119042:	f7ff feff 	bl	8118e44 <_Balloc>
 8119046:	4602      	mov	r2, r0
 8119048:	b928      	cbnz	r0, 8119056 <__i2b+0x1a>
 811904a:	4b05      	ldr	r3, [pc, #20]	; (8119060 <__i2b+0x24>)
 811904c:	4805      	ldr	r0, [pc, #20]	; (8119064 <__i2b+0x28>)
 811904e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8119052:	f7fe feef 	bl	8117e34 <__assert_func>
 8119056:	2301      	movs	r3, #1
 8119058:	6144      	str	r4, [r0, #20]
 811905a:	6103      	str	r3, [r0, #16]
 811905c:	bd10      	pop	{r4, pc}
 811905e:	bf00      	nop
 8119060:	0811ba66 	.word	0x0811ba66
 8119064:	0811ba77 	.word	0x0811ba77

08119068 <__multiply>:
 8119068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811906c:	4614      	mov	r4, r2
 811906e:	690a      	ldr	r2, [r1, #16]
 8119070:	6923      	ldr	r3, [r4, #16]
 8119072:	429a      	cmp	r2, r3
 8119074:	bfb8      	it	lt
 8119076:	460b      	movlt	r3, r1
 8119078:	460d      	mov	r5, r1
 811907a:	bfbc      	itt	lt
 811907c:	4625      	movlt	r5, r4
 811907e:	461c      	movlt	r4, r3
 8119080:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8119084:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8119088:	68ab      	ldr	r3, [r5, #8]
 811908a:	6869      	ldr	r1, [r5, #4]
 811908c:	eb0a 0709 	add.w	r7, sl, r9
 8119090:	42bb      	cmp	r3, r7
 8119092:	b085      	sub	sp, #20
 8119094:	bfb8      	it	lt
 8119096:	3101      	addlt	r1, #1
 8119098:	f7ff fed4 	bl	8118e44 <_Balloc>
 811909c:	b930      	cbnz	r0, 81190ac <__multiply+0x44>
 811909e:	4602      	mov	r2, r0
 81190a0:	4b42      	ldr	r3, [pc, #264]	; (81191ac <__multiply+0x144>)
 81190a2:	4843      	ldr	r0, [pc, #268]	; (81191b0 <__multiply+0x148>)
 81190a4:	f240 115d 	movw	r1, #349	; 0x15d
 81190a8:	f7fe fec4 	bl	8117e34 <__assert_func>
 81190ac:	f100 0614 	add.w	r6, r0, #20
 81190b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 81190b4:	4633      	mov	r3, r6
 81190b6:	2200      	movs	r2, #0
 81190b8:	4543      	cmp	r3, r8
 81190ba:	d31e      	bcc.n	81190fa <__multiply+0x92>
 81190bc:	f105 0c14 	add.w	ip, r5, #20
 81190c0:	f104 0314 	add.w	r3, r4, #20
 81190c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 81190c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 81190cc:	9202      	str	r2, [sp, #8]
 81190ce:	ebac 0205 	sub.w	r2, ip, r5
 81190d2:	3a15      	subs	r2, #21
 81190d4:	f022 0203 	bic.w	r2, r2, #3
 81190d8:	3204      	adds	r2, #4
 81190da:	f105 0115 	add.w	r1, r5, #21
 81190de:	458c      	cmp	ip, r1
 81190e0:	bf38      	it	cc
 81190e2:	2204      	movcc	r2, #4
 81190e4:	9201      	str	r2, [sp, #4]
 81190e6:	9a02      	ldr	r2, [sp, #8]
 81190e8:	9303      	str	r3, [sp, #12]
 81190ea:	429a      	cmp	r2, r3
 81190ec:	d808      	bhi.n	8119100 <__multiply+0x98>
 81190ee:	2f00      	cmp	r7, #0
 81190f0:	dc55      	bgt.n	811919e <__multiply+0x136>
 81190f2:	6107      	str	r7, [r0, #16]
 81190f4:	b005      	add	sp, #20
 81190f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81190fa:	f843 2b04 	str.w	r2, [r3], #4
 81190fe:	e7db      	b.n	81190b8 <__multiply+0x50>
 8119100:	f8b3 a000 	ldrh.w	sl, [r3]
 8119104:	f1ba 0f00 	cmp.w	sl, #0
 8119108:	d020      	beq.n	811914c <__multiply+0xe4>
 811910a:	f105 0e14 	add.w	lr, r5, #20
 811910e:	46b1      	mov	r9, r6
 8119110:	2200      	movs	r2, #0
 8119112:	f85e 4b04 	ldr.w	r4, [lr], #4
 8119116:	f8d9 b000 	ldr.w	fp, [r9]
 811911a:	b2a1      	uxth	r1, r4
 811911c:	fa1f fb8b 	uxth.w	fp, fp
 8119120:	fb0a b101 	mla	r1, sl, r1, fp
 8119124:	4411      	add	r1, r2
 8119126:	f8d9 2000 	ldr.w	r2, [r9]
 811912a:	0c24      	lsrs	r4, r4, #16
 811912c:	0c12      	lsrs	r2, r2, #16
 811912e:	fb0a 2404 	mla	r4, sl, r4, r2
 8119132:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8119136:	b289      	uxth	r1, r1
 8119138:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 811913c:	45f4      	cmp	ip, lr
 811913e:	f849 1b04 	str.w	r1, [r9], #4
 8119142:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8119146:	d8e4      	bhi.n	8119112 <__multiply+0xaa>
 8119148:	9901      	ldr	r1, [sp, #4]
 811914a:	5072      	str	r2, [r6, r1]
 811914c:	9a03      	ldr	r2, [sp, #12]
 811914e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8119152:	3304      	adds	r3, #4
 8119154:	f1b9 0f00 	cmp.w	r9, #0
 8119158:	d01f      	beq.n	811919a <__multiply+0x132>
 811915a:	6834      	ldr	r4, [r6, #0]
 811915c:	f105 0114 	add.w	r1, r5, #20
 8119160:	46b6      	mov	lr, r6
 8119162:	f04f 0a00 	mov.w	sl, #0
 8119166:	880a      	ldrh	r2, [r1, #0]
 8119168:	f8be b002 	ldrh.w	fp, [lr, #2]
 811916c:	fb09 b202 	mla	r2, r9, r2, fp
 8119170:	4492      	add	sl, r2
 8119172:	b2a4      	uxth	r4, r4
 8119174:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8119178:	f84e 4b04 	str.w	r4, [lr], #4
 811917c:	f851 4b04 	ldr.w	r4, [r1], #4
 8119180:	f8be 2000 	ldrh.w	r2, [lr]
 8119184:	0c24      	lsrs	r4, r4, #16
 8119186:	fb09 2404 	mla	r4, r9, r4, r2
 811918a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 811918e:	458c      	cmp	ip, r1
 8119190:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8119194:	d8e7      	bhi.n	8119166 <__multiply+0xfe>
 8119196:	9a01      	ldr	r2, [sp, #4]
 8119198:	50b4      	str	r4, [r6, r2]
 811919a:	3604      	adds	r6, #4
 811919c:	e7a3      	b.n	81190e6 <__multiply+0x7e>
 811919e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 81191a2:	2b00      	cmp	r3, #0
 81191a4:	d1a5      	bne.n	81190f2 <__multiply+0x8a>
 81191a6:	3f01      	subs	r7, #1
 81191a8:	e7a1      	b.n	81190ee <__multiply+0x86>
 81191aa:	bf00      	nop
 81191ac:	0811ba66 	.word	0x0811ba66
 81191b0:	0811ba77 	.word	0x0811ba77

081191b4 <__pow5mult>:
 81191b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81191b8:	4615      	mov	r5, r2
 81191ba:	f012 0203 	ands.w	r2, r2, #3
 81191be:	4606      	mov	r6, r0
 81191c0:	460f      	mov	r7, r1
 81191c2:	d007      	beq.n	81191d4 <__pow5mult+0x20>
 81191c4:	4c25      	ldr	r4, [pc, #148]	; (811925c <__pow5mult+0xa8>)
 81191c6:	3a01      	subs	r2, #1
 81191c8:	2300      	movs	r3, #0
 81191ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81191ce:	f7ff fe9b 	bl	8118f08 <__multadd>
 81191d2:	4607      	mov	r7, r0
 81191d4:	10ad      	asrs	r5, r5, #2
 81191d6:	d03d      	beq.n	8119254 <__pow5mult+0xa0>
 81191d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81191da:	b97c      	cbnz	r4, 81191fc <__pow5mult+0x48>
 81191dc:	2010      	movs	r0, #16
 81191de:	f7ff fe1d 	bl	8118e1c <malloc>
 81191e2:	4602      	mov	r2, r0
 81191e4:	6270      	str	r0, [r6, #36]	; 0x24
 81191e6:	b928      	cbnz	r0, 81191f4 <__pow5mult+0x40>
 81191e8:	4b1d      	ldr	r3, [pc, #116]	; (8119260 <__pow5mult+0xac>)
 81191ea:	481e      	ldr	r0, [pc, #120]	; (8119264 <__pow5mult+0xb0>)
 81191ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 81191f0:	f7fe fe20 	bl	8117e34 <__assert_func>
 81191f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81191f8:	6004      	str	r4, [r0, #0]
 81191fa:	60c4      	str	r4, [r0, #12]
 81191fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8119200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8119204:	b94c      	cbnz	r4, 811921a <__pow5mult+0x66>
 8119206:	f240 2171 	movw	r1, #625	; 0x271
 811920a:	4630      	mov	r0, r6
 811920c:	f7ff ff16 	bl	811903c <__i2b>
 8119210:	2300      	movs	r3, #0
 8119212:	f8c8 0008 	str.w	r0, [r8, #8]
 8119216:	4604      	mov	r4, r0
 8119218:	6003      	str	r3, [r0, #0]
 811921a:	f04f 0900 	mov.w	r9, #0
 811921e:	07eb      	lsls	r3, r5, #31
 8119220:	d50a      	bpl.n	8119238 <__pow5mult+0x84>
 8119222:	4639      	mov	r1, r7
 8119224:	4622      	mov	r2, r4
 8119226:	4630      	mov	r0, r6
 8119228:	f7ff ff1e 	bl	8119068 <__multiply>
 811922c:	4639      	mov	r1, r7
 811922e:	4680      	mov	r8, r0
 8119230:	4630      	mov	r0, r6
 8119232:	f7ff fe47 	bl	8118ec4 <_Bfree>
 8119236:	4647      	mov	r7, r8
 8119238:	106d      	asrs	r5, r5, #1
 811923a:	d00b      	beq.n	8119254 <__pow5mult+0xa0>
 811923c:	6820      	ldr	r0, [r4, #0]
 811923e:	b938      	cbnz	r0, 8119250 <__pow5mult+0x9c>
 8119240:	4622      	mov	r2, r4
 8119242:	4621      	mov	r1, r4
 8119244:	4630      	mov	r0, r6
 8119246:	f7ff ff0f 	bl	8119068 <__multiply>
 811924a:	6020      	str	r0, [r4, #0]
 811924c:	f8c0 9000 	str.w	r9, [r0]
 8119250:	4604      	mov	r4, r0
 8119252:	e7e4      	b.n	811921e <__pow5mult+0x6a>
 8119254:	4638      	mov	r0, r7
 8119256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811925a:	bf00      	nop
 811925c:	0811bbc8 	.word	0x0811bbc8
 8119260:	0811b948 	.word	0x0811b948
 8119264:	0811ba77 	.word	0x0811ba77

08119268 <__lshift>:
 8119268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811926c:	460c      	mov	r4, r1
 811926e:	6849      	ldr	r1, [r1, #4]
 8119270:	6923      	ldr	r3, [r4, #16]
 8119272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8119276:	68a3      	ldr	r3, [r4, #8]
 8119278:	4607      	mov	r7, r0
 811927a:	4691      	mov	r9, r2
 811927c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8119280:	f108 0601 	add.w	r6, r8, #1
 8119284:	42b3      	cmp	r3, r6
 8119286:	db0b      	blt.n	81192a0 <__lshift+0x38>
 8119288:	4638      	mov	r0, r7
 811928a:	f7ff fddb 	bl	8118e44 <_Balloc>
 811928e:	4605      	mov	r5, r0
 8119290:	b948      	cbnz	r0, 81192a6 <__lshift+0x3e>
 8119292:	4602      	mov	r2, r0
 8119294:	4b28      	ldr	r3, [pc, #160]	; (8119338 <__lshift+0xd0>)
 8119296:	4829      	ldr	r0, [pc, #164]	; (811933c <__lshift+0xd4>)
 8119298:	f240 11d9 	movw	r1, #473	; 0x1d9
 811929c:	f7fe fdca 	bl	8117e34 <__assert_func>
 81192a0:	3101      	adds	r1, #1
 81192a2:	005b      	lsls	r3, r3, #1
 81192a4:	e7ee      	b.n	8119284 <__lshift+0x1c>
 81192a6:	2300      	movs	r3, #0
 81192a8:	f100 0114 	add.w	r1, r0, #20
 81192ac:	f100 0210 	add.w	r2, r0, #16
 81192b0:	4618      	mov	r0, r3
 81192b2:	4553      	cmp	r3, sl
 81192b4:	db33      	blt.n	811931e <__lshift+0xb6>
 81192b6:	6920      	ldr	r0, [r4, #16]
 81192b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81192bc:	f104 0314 	add.w	r3, r4, #20
 81192c0:	f019 091f 	ands.w	r9, r9, #31
 81192c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81192c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 81192cc:	d02b      	beq.n	8119326 <__lshift+0xbe>
 81192ce:	f1c9 0e20 	rsb	lr, r9, #32
 81192d2:	468a      	mov	sl, r1
 81192d4:	2200      	movs	r2, #0
 81192d6:	6818      	ldr	r0, [r3, #0]
 81192d8:	fa00 f009 	lsl.w	r0, r0, r9
 81192dc:	4302      	orrs	r2, r0
 81192de:	f84a 2b04 	str.w	r2, [sl], #4
 81192e2:	f853 2b04 	ldr.w	r2, [r3], #4
 81192e6:	459c      	cmp	ip, r3
 81192e8:	fa22 f20e 	lsr.w	r2, r2, lr
 81192ec:	d8f3      	bhi.n	81192d6 <__lshift+0x6e>
 81192ee:	ebac 0304 	sub.w	r3, ip, r4
 81192f2:	3b15      	subs	r3, #21
 81192f4:	f023 0303 	bic.w	r3, r3, #3
 81192f8:	3304      	adds	r3, #4
 81192fa:	f104 0015 	add.w	r0, r4, #21
 81192fe:	4584      	cmp	ip, r0
 8119300:	bf38      	it	cc
 8119302:	2304      	movcc	r3, #4
 8119304:	50ca      	str	r2, [r1, r3]
 8119306:	b10a      	cbz	r2, 811930c <__lshift+0xa4>
 8119308:	f108 0602 	add.w	r6, r8, #2
 811930c:	3e01      	subs	r6, #1
 811930e:	4638      	mov	r0, r7
 8119310:	612e      	str	r6, [r5, #16]
 8119312:	4621      	mov	r1, r4
 8119314:	f7ff fdd6 	bl	8118ec4 <_Bfree>
 8119318:	4628      	mov	r0, r5
 811931a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811931e:	f842 0f04 	str.w	r0, [r2, #4]!
 8119322:	3301      	adds	r3, #1
 8119324:	e7c5      	b.n	81192b2 <__lshift+0x4a>
 8119326:	3904      	subs	r1, #4
 8119328:	f853 2b04 	ldr.w	r2, [r3], #4
 811932c:	f841 2f04 	str.w	r2, [r1, #4]!
 8119330:	459c      	cmp	ip, r3
 8119332:	d8f9      	bhi.n	8119328 <__lshift+0xc0>
 8119334:	e7ea      	b.n	811930c <__lshift+0xa4>
 8119336:	bf00      	nop
 8119338:	0811ba66 	.word	0x0811ba66
 811933c:	0811ba77 	.word	0x0811ba77

08119340 <__mcmp>:
 8119340:	b530      	push	{r4, r5, lr}
 8119342:	6902      	ldr	r2, [r0, #16]
 8119344:	690c      	ldr	r4, [r1, #16]
 8119346:	1b12      	subs	r2, r2, r4
 8119348:	d10e      	bne.n	8119368 <__mcmp+0x28>
 811934a:	f100 0314 	add.w	r3, r0, #20
 811934e:	3114      	adds	r1, #20
 8119350:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8119354:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8119358:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 811935c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8119360:	42a5      	cmp	r5, r4
 8119362:	d003      	beq.n	811936c <__mcmp+0x2c>
 8119364:	d305      	bcc.n	8119372 <__mcmp+0x32>
 8119366:	2201      	movs	r2, #1
 8119368:	4610      	mov	r0, r2
 811936a:	bd30      	pop	{r4, r5, pc}
 811936c:	4283      	cmp	r3, r0
 811936e:	d3f3      	bcc.n	8119358 <__mcmp+0x18>
 8119370:	e7fa      	b.n	8119368 <__mcmp+0x28>
 8119372:	f04f 32ff 	mov.w	r2, #4294967295
 8119376:	e7f7      	b.n	8119368 <__mcmp+0x28>

08119378 <__mdiff>:
 8119378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811937c:	460c      	mov	r4, r1
 811937e:	4606      	mov	r6, r0
 8119380:	4611      	mov	r1, r2
 8119382:	4620      	mov	r0, r4
 8119384:	4617      	mov	r7, r2
 8119386:	f7ff ffdb 	bl	8119340 <__mcmp>
 811938a:	1e05      	subs	r5, r0, #0
 811938c:	d110      	bne.n	81193b0 <__mdiff+0x38>
 811938e:	4629      	mov	r1, r5
 8119390:	4630      	mov	r0, r6
 8119392:	f7ff fd57 	bl	8118e44 <_Balloc>
 8119396:	b930      	cbnz	r0, 81193a6 <__mdiff+0x2e>
 8119398:	4b39      	ldr	r3, [pc, #228]	; (8119480 <__mdiff+0x108>)
 811939a:	4602      	mov	r2, r0
 811939c:	f240 2132 	movw	r1, #562	; 0x232
 81193a0:	4838      	ldr	r0, [pc, #224]	; (8119484 <__mdiff+0x10c>)
 81193a2:	f7fe fd47 	bl	8117e34 <__assert_func>
 81193a6:	2301      	movs	r3, #1
 81193a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 81193ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81193b0:	bfa4      	itt	ge
 81193b2:	463b      	movge	r3, r7
 81193b4:	4627      	movge	r7, r4
 81193b6:	4630      	mov	r0, r6
 81193b8:	6879      	ldr	r1, [r7, #4]
 81193ba:	bfa6      	itte	ge
 81193bc:	461c      	movge	r4, r3
 81193be:	2500      	movge	r5, #0
 81193c0:	2501      	movlt	r5, #1
 81193c2:	f7ff fd3f 	bl	8118e44 <_Balloc>
 81193c6:	b920      	cbnz	r0, 81193d2 <__mdiff+0x5a>
 81193c8:	4b2d      	ldr	r3, [pc, #180]	; (8119480 <__mdiff+0x108>)
 81193ca:	4602      	mov	r2, r0
 81193cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 81193d0:	e7e6      	b.n	81193a0 <__mdiff+0x28>
 81193d2:	693e      	ldr	r6, [r7, #16]
 81193d4:	60c5      	str	r5, [r0, #12]
 81193d6:	6925      	ldr	r5, [r4, #16]
 81193d8:	f107 0114 	add.w	r1, r7, #20
 81193dc:	f104 0914 	add.w	r9, r4, #20
 81193e0:	f100 0e14 	add.w	lr, r0, #20
 81193e4:	f107 0210 	add.w	r2, r7, #16
 81193e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 81193ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 81193f0:	46f2      	mov	sl, lr
 81193f2:	2700      	movs	r7, #0
 81193f4:	f859 3b04 	ldr.w	r3, [r9], #4
 81193f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 81193fc:	fa1f f883 	uxth.w	r8, r3
 8119400:	fa17 f78b 	uxtah	r7, r7, fp
 8119404:	0c1b      	lsrs	r3, r3, #16
 8119406:	eba7 0808 	sub.w	r8, r7, r8
 811940a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 811940e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8119412:	fa1f f888 	uxth.w	r8, r8
 8119416:	141f      	asrs	r7, r3, #16
 8119418:	454d      	cmp	r5, r9
 811941a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 811941e:	f84a 3b04 	str.w	r3, [sl], #4
 8119422:	d8e7      	bhi.n	81193f4 <__mdiff+0x7c>
 8119424:	1b2b      	subs	r3, r5, r4
 8119426:	3b15      	subs	r3, #21
 8119428:	f023 0303 	bic.w	r3, r3, #3
 811942c:	3304      	adds	r3, #4
 811942e:	3415      	adds	r4, #21
 8119430:	42a5      	cmp	r5, r4
 8119432:	bf38      	it	cc
 8119434:	2304      	movcc	r3, #4
 8119436:	4419      	add	r1, r3
 8119438:	4473      	add	r3, lr
 811943a:	469e      	mov	lr, r3
 811943c:	460d      	mov	r5, r1
 811943e:	4565      	cmp	r5, ip
 8119440:	d30e      	bcc.n	8119460 <__mdiff+0xe8>
 8119442:	f10c 0203 	add.w	r2, ip, #3
 8119446:	1a52      	subs	r2, r2, r1
 8119448:	f022 0203 	bic.w	r2, r2, #3
 811944c:	3903      	subs	r1, #3
 811944e:	458c      	cmp	ip, r1
 8119450:	bf38      	it	cc
 8119452:	2200      	movcc	r2, #0
 8119454:	441a      	add	r2, r3
 8119456:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 811945a:	b17b      	cbz	r3, 811947c <__mdiff+0x104>
 811945c:	6106      	str	r6, [r0, #16]
 811945e:	e7a5      	b.n	81193ac <__mdiff+0x34>
 8119460:	f855 8b04 	ldr.w	r8, [r5], #4
 8119464:	fa17 f488 	uxtah	r4, r7, r8
 8119468:	1422      	asrs	r2, r4, #16
 811946a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 811946e:	b2a4      	uxth	r4, r4
 8119470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8119474:	f84e 4b04 	str.w	r4, [lr], #4
 8119478:	1417      	asrs	r7, r2, #16
 811947a:	e7e0      	b.n	811943e <__mdiff+0xc6>
 811947c:	3e01      	subs	r6, #1
 811947e:	e7ea      	b.n	8119456 <__mdiff+0xde>
 8119480:	0811ba66 	.word	0x0811ba66
 8119484:	0811ba77 	.word	0x0811ba77

08119488 <__d2b>:
 8119488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 811948c:	4689      	mov	r9, r1
 811948e:	2101      	movs	r1, #1
 8119490:	ec57 6b10 	vmov	r6, r7, d0
 8119494:	4690      	mov	r8, r2
 8119496:	f7ff fcd5 	bl	8118e44 <_Balloc>
 811949a:	4604      	mov	r4, r0
 811949c:	b930      	cbnz	r0, 81194ac <__d2b+0x24>
 811949e:	4602      	mov	r2, r0
 81194a0:	4b25      	ldr	r3, [pc, #148]	; (8119538 <__d2b+0xb0>)
 81194a2:	4826      	ldr	r0, [pc, #152]	; (811953c <__d2b+0xb4>)
 81194a4:	f240 310a 	movw	r1, #778	; 0x30a
 81194a8:	f7fe fcc4 	bl	8117e34 <__assert_func>
 81194ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 81194b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 81194b4:	bb35      	cbnz	r5, 8119504 <__d2b+0x7c>
 81194b6:	2e00      	cmp	r6, #0
 81194b8:	9301      	str	r3, [sp, #4]
 81194ba:	d028      	beq.n	811950e <__d2b+0x86>
 81194bc:	4668      	mov	r0, sp
 81194be:	9600      	str	r6, [sp, #0]
 81194c0:	f7ff fd8c 	bl	8118fdc <__lo0bits>
 81194c4:	9900      	ldr	r1, [sp, #0]
 81194c6:	b300      	cbz	r0, 811950a <__d2b+0x82>
 81194c8:	9a01      	ldr	r2, [sp, #4]
 81194ca:	f1c0 0320 	rsb	r3, r0, #32
 81194ce:	fa02 f303 	lsl.w	r3, r2, r3
 81194d2:	430b      	orrs	r3, r1
 81194d4:	40c2      	lsrs	r2, r0
 81194d6:	6163      	str	r3, [r4, #20]
 81194d8:	9201      	str	r2, [sp, #4]
 81194da:	9b01      	ldr	r3, [sp, #4]
 81194dc:	61a3      	str	r3, [r4, #24]
 81194de:	2b00      	cmp	r3, #0
 81194e0:	bf14      	ite	ne
 81194e2:	2202      	movne	r2, #2
 81194e4:	2201      	moveq	r2, #1
 81194e6:	6122      	str	r2, [r4, #16]
 81194e8:	b1d5      	cbz	r5, 8119520 <__d2b+0x98>
 81194ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 81194ee:	4405      	add	r5, r0
 81194f0:	f8c9 5000 	str.w	r5, [r9]
 81194f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 81194f8:	f8c8 0000 	str.w	r0, [r8]
 81194fc:	4620      	mov	r0, r4
 81194fe:	b003      	add	sp, #12
 8119500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8119504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8119508:	e7d5      	b.n	81194b6 <__d2b+0x2e>
 811950a:	6161      	str	r1, [r4, #20]
 811950c:	e7e5      	b.n	81194da <__d2b+0x52>
 811950e:	a801      	add	r0, sp, #4
 8119510:	f7ff fd64 	bl	8118fdc <__lo0bits>
 8119514:	9b01      	ldr	r3, [sp, #4]
 8119516:	6163      	str	r3, [r4, #20]
 8119518:	2201      	movs	r2, #1
 811951a:	6122      	str	r2, [r4, #16]
 811951c:	3020      	adds	r0, #32
 811951e:	e7e3      	b.n	81194e8 <__d2b+0x60>
 8119520:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8119524:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8119528:	f8c9 0000 	str.w	r0, [r9]
 811952c:	6918      	ldr	r0, [r3, #16]
 811952e:	f7ff fd35 	bl	8118f9c <__hi0bits>
 8119532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8119536:	e7df      	b.n	81194f8 <__d2b+0x70>
 8119538:	0811ba66 	.word	0x0811ba66
 811953c:	0811ba77 	.word	0x0811ba77

08119540 <_calloc_r>:
 8119540:	b513      	push	{r0, r1, r4, lr}
 8119542:	434a      	muls	r2, r1
 8119544:	4611      	mov	r1, r2
 8119546:	9201      	str	r2, [sp, #4]
 8119548:	f7fd fc7a 	bl	8116e40 <_malloc_r>
 811954c:	4604      	mov	r4, r0
 811954e:	b118      	cbz	r0, 8119558 <_calloc_r+0x18>
 8119550:	9a01      	ldr	r2, [sp, #4]
 8119552:	2100      	movs	r1, #0
 8119554:	f7fd fc6b 	bl	8116e2e <memset>
 8119558:	4620      	mov	r0, r4
 811955a:	b002      	add	sp, #8
 811955c:	bd10      	pop	{r4, pc}
	...

08119560 <_free_r>:
 8119560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8119562:	2900      	cmp	r1, #0
 8119564:	d048      	beq.n	81195f8 <_free_r+0x98>
 8119566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811956a:	9001      	str	r0, [sp, #4]
 811956c:	2b00      	cmp	r3, #0
 811956e:	f1a1 0404 	sub.w	r4, r1, #4
 8119572:	bfb8      	it	lt
 8119574:	18e4      	addlt	r4, r4, r3
 8119576:	f7ff fc59 	bl	8118e2c <__malloc_lock>
 811957a:	4a20      	ldr	r2, [pc, #128]	; (81195fc <_free_r+0x9c>)
 811957c:	9801      	ldr	r0, [sp, #4]
 811957e:	6813      	ldr	r3, [r2, #0]
 8119580:	4615      	mov	r5, r2
 8119582:	b933      	cbnz	r3, 8119592 <_free_r+0x32>
 8119584:	6063      	str	r3, [r4, #4]
 8119586:	6014      	str	r4, [r2, #0]
 8119588:	b003      	add	sp, #12
 811958a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 811958e:	f7ff bc53 	b.w	8118e38 <__malloc_unlock>
 8119592:	42a3      	cmp	r3, r4
 8119594:	d90b      	bls.n	81195ae <_free_r+0x4e>
 8119596:	6821      	ldr	r1, [r4, #0]
 8119598:	1862      	adds	r2, r4, r1
 811959a:	4293      	cmp	r3, r2
 811959c:	bf04      	itt	eq
 811959e:	681a      	ldreq	r2, [r3, #0]
 81195a0:	685b      	ldreq	r3, [r3, #4]
 81195a2:	6063      	str	r3, [r4, #4]
 81195a4:	bf04      	itt	eq
 81195a6:	1852      	addeq	r2, r2, r1
 81195a8:	6022      	streq	r2, [r4, #0]
 81195aa:	602c      	str	r4, [r5, #0]
 81195ac:	e7ec      	b.n	8119588 <_free_r+0x28>
 81195ae:	461a      	mov	r2, r3
 81195b0:	685b      	ldr	r3, [r3, #4]
 81195b2:	b10b      	cbz	r3, 81195b8 <_free_r+0x58>
 81195b4:	42a3      	cmp	r3, r4
 81195b6:	d9fa      	bls.n	81195ae <_free_r+0x4e>
 81195b8:	6811      	ldr	r1, [r2, #0]
 81195ba:	1855      	adds	r5, r2, r1
 81195bc:	42a5      	cmp	r5, r4
 81195be:	d10b      	bne.n	81195d8 <_free_r+0x78>
 81195c0:	6824      	ldr	r4, [r4, #0]
 81195c2:	4421      	add	r1, r4
 81195c4:	1854      	adds	r4, r2, r1
 81195c6:	42a3      	cmp	r3, r4
 81195c8:	6011      	str	r1, [r2, #0]
 81195ca:	d1dd      	bne.n	8119588 <_free_r+0x28>
 81195cc:	681c      	ldr	r4, [r3, #0]
 81195ce:	685b      	ldr	r3, [r3, #4]
 81195d0:	6053      	str	r3, [r2, #4]
 81195d2:	4421      	add	r1, r4
 81195d4:	6011      	str	r1, [r2, #0]
 81195d6:	e7d7      	b.n	8119588 <_free_r+0x28>
 81195d8:	d902      	bls.n	81195e0 <_free_r+0x80>
 81195da:	230c      	movs	r3, #12
 81195dc:	6003      	str	r3, [r0, #0]
 81195de:	e7d3      	b.n	8119588 <_free_r+0x28>
 81195e0:	6825      	ldr	r5, [r4, #0]
 81195e2:	1961      	adds	r1, r4, r5
 81195e4:	428b      	cmp	r3, r1
 81195e6:	bf04      	itt	eq
 81195e8:	6819      	ldreq	r1, [r3, #0]
 81195ea:	685b      	ldreq	r3, [r3, #4]
 81195ec:	6063      	str	r3, [r4, #4]
 81195ee:	bf04      	itt	eq
 81195f0:	1949      	addeq	r1, r1, r5
 81195f2:	6021      	streq	r1, [r4, #0]
 81195f4:	6054      	str	r4, [r2, #4]
 81195f6:	e7c7      	b.n	8119588 <_free_r+0x28>
 81195f8:	b003      	add	sp, #12
 81195fa:	bd30      	pop	{r4, r5, pc}
 81195fc:	10005c38 	.word	0x10005c38

08119600 <__sfputc_r>:
 8119600:	6893      	ldr	r3, [r2, #8]
 8119602:	3b01      	subs	r3, #1
 8119604:	2b00      	cmp	r3, #0
 8119606:	b410      	push	{r4}
 8119608:	6093      	str	r3, [r2, #8]
 811960a:	da08      	bge.n	811961e <__sfputc_r+0x1e>
 811960c:	6994      	ldr	r4, [r2, #24]
 811960e:	42a3      	cmp	r3, r4
 8119610:	db01      	blt.n	8119616 <__sfputc_r+0x16>
 8119612:	290a      	cmp	r1, #10
 8119614:	d103      	bne.n	811961e <__sfputc_r+0x1e>
 8119616:	f85d 4b04 	ldr.w	r4, [sp], #4
 811961a:	f7fe bb39 	b.w	8117c90 <__swbuf_r>
 811961e:	6813      	ldr	r3, [r2, #0]
 8119620:	1c58      	adds	r0, r3, #1
 8119622:	6010      	str	r0, [r2, #0]
 8119624:	7019      	strb	r1, [r3, #0]
 8119626:	4608      	mov	r0, r1
 8119628:	f85d 4b04 	ldr.w	r4, [sp], #4
 811962c:	4770      	bx	lr

0811962e <__sfputs_r>:
 811962e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8119630:	4606      	mov	r6, r0
 8119632:	460f      	mov	r7, r1
 8119634:	4614      	mov	r4, r2
 8119636:	18d5      	adds	r5, r2, r3
 8119638:	42ac      	cmp	r4, r5
 811963a:	d101      	bne.n	8119640 <__sfputs_r+0x12>
 811963c:	2000      	movs	r0, #0
 811963e:	e007      	b.n	8119650 <__sfputs_r+0x22>
 8119640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8119644:	463a      	mov	r2, r7
 8119646:	4630      	mov	r0, r6
 8119648:	f7ff ffda 	bl	8119600 <__sfputc_r>
 811964c:	1c43      	adds	r3, r0, #1
 811964e:	d1f3      	bne.n	8119638 <__sfputs_r+0xa>
 8119650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08119654 <_vfiprintf_r>:
 8119654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8119658:	460d      	mov	r5, r1
 811965a:	b09d      	sub	sp, #116	; 0x74
 811965c:	4614      	mov	r4, r2
 811965e:	4698      	mov	r8, r3
 8119660:	4606      	mov	r6, r0
 8119662:	b118      	cbz	r0, 811966c <_vfiprintf_r+0x18>
 8119664:	6983      	ldr	r3, [r0, #24]
 8119666:	b90b      	cbnz	r3, 811966c <_vfiprintf_r+0x18>
 8119668:	f7fd fb00 	bl	8116c6c <__sinit>
 811966c:	4b89      	ldr	r3, [pc, #548]	; (8119894 <_vfiprintf_r+0x240>)
 811966e:	429d      	cmp	r5, r3
 8119670:	d11b      	bne.n	81196aa <_vfiprintf_r+0x56>
 8119672:	6875      	ldr	r5, [r6, #4]
 8119674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8119676:	07d9      	lsls	r1, r3, #31
 8119678:	d405      	bmi.n	8119686 <_vfiprintf_r+0x32>
 811967a:	89ab      	ldrh	r3, [r5, #12]
 811967c:	059a      	lsls	r2, r3, #22
 811967e:	d402      	bmi.n	8119686 <_vfiprintf_r+0x32>
 8119680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8119682:	f7fd fbb6 	bl	8116df2 <__retarget_lock_acquire_recursive>
 8119686:	89ab      	ldrh	r3, [r5, #12]
 8119688:	071b      	lsls	r3, r3, #28
 811968a:	d501      	bpl.n	8119690 <_vfiprintf_r+0x3c>
 811968c:	692b      	ldr	r3, [r5, #16]
 811968e:	b9eb      	cbnz	r3, 81196cc <_vfiprintf_r+0x78>
 8119690:	4629      	mov	r1, r5
 8119692:	4630      	mov	r0, r6
 8119694:	f7fe fb60 	bl	8117d58 <__swsetup_r>
 8119698:	b1c0      	cbz	r0, 81196cc <_vfiprintf_r+0x78>
 811969a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811969c:	07dc      	lsls	r4, r3, #31
 811969e:	d50e      	bpl.n	81196be <_vfiprintf_r+0x6a>
 81196a0:	f04f 30ff 	mov.w	r0, #4294967295
 81196a4:	b01d      	add	sp, #116	; 0x74
 81196a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81196aa:	4b7b      	ldr	r3, [pc, #492]	; (8119898 <_vfiprintf_r+0x244>)
 81196ac:	429d      	cmp	r5, r3
 81196ae:	d101      	bne.n	81196b4 <_vfiprintf_r+0x60>
 81196b0:	68b5      	ldr	r5, [r6, #8]
 81196b2:	e7df      	b.n	8119674 <_vfiprintf_r+0x20>
 81196b4:	4b79      	ldr	r3, [pc, #484]	; (811989c <_vfiprintf_r+0x248>)
 81196b6:	429d      	cmp	r5, r3
 81196b8:	bf08      	it	eq
 81196ba:	68f5      	ldreq	r5, [r6, #12]
 81196bc:	e7da      	b.n	8119674 <_vfiprintf_r+0x20>
 81196be:	89ab      	ldrh	r3, [r5, #12]
 81196c0:	0598      	lsls	r0, r3, #22
 81196c2:	d4ed      	bmi.n	81196a0 <_vfiprintf_r+0x4c>
 81196c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81196c6:	f7fd fb95 	bl	8116df4 <__retarget_lock_release_recursive>
 81196ca:	e7e9      	b.n	81196a0 <_vfiprintf_r+0x4c>
 81196cc:	2300      	movs	r3, #0
 81196ce:	9309      	str	r3, [sp, #36]	; 0x24
 81196d0:	2320      	movs	r3, #32
 81196d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81196d6:	f8cd 800c 	str.w	r8, [sp, #12]
 81196da:	2330      	movs	r3, #48	; 0x30
 81196dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 81198a0 <_vfiprintf_r+0x24c>
 81196e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81196e4:	f04f 0901 	mov.w	r9, #1
 81196e8:	4623      	mov	r3, r4
 81196ea:	469a      	mov	sl, r3
 81196ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 81196f0:	b10a      	cbz	r2, 81196f6 <_vfiprintf_r+0xa2>
 81196f2:	2a25      	cmp	r2, #37	; 0x25
 81196f4:	d1f9      	bne.n	81196ea <_vfiprintf_r+0x96>
 81196f6:	ebba 0b04 	subs.w	fp, sl, r4
 81196fa:	d00b      	beq.n	8119714 <_vfiprintf_r+0xc0>
 81196fc:	465b      	mov	r3, fp
 81196fe:	4622      	mov	r2, r4
 8119700:	4629      	mov	r1, r5
 8119702:	4630      	mov	r0, r6
 8119704:	f7ff ff93 	bl	811962e <__sfputs_r>
 8119708:	3001      	adds	r0, #1
 811970a:	f000 80aa 	beq.w	8119862 <_vfiprintf_r+0x20e>
 811970e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8119710:	445a      	add	r2, fp
 8119712:	9209      	str	r2, [sp, #36]	; 0x24
 8119714:	f89a 3000 	ldrb.w	r3, [sl]
 8119718:	2b00      	cmp	r3, #0
 811971a:	f000 80a2 	beq.w	8119862 <_vfiprintf_r+0x20e>
 811971e:	2300      	movs	r3, #0
 8119720:	f04f 32ff 	mov.w	r2, #4294967295
 8119724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8119728:	f10a 0a01 	add.w	sl, sl, #1
 811972c:	9304      	str	r3, [sp, #16]
 811972e:	9307      	str	r3, [sp, #28]
 8119730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8119734:	931a      	str	r3, [sp, #104]	; 0x68
 8119736:	4654      	mov	r4, sl
 8119738:	2205      	movs	r2, #5
 811973a:	f814 1b01 	ldrb.w	r1, [r4], #1
 811973e:	4858      	ldr	r0, [pc, #352]	; (81198a0 <_vfiprintf_r+0x24c>)
 8119740:	f7e6 fdd6 	bl	81002f0 <memchr>
 8119744:	9a04      	ldr	r2, [sp, #16]
 8119746:	b9d8      	cbnz	r0, 8119780 <_vfiprintf_r+0x12c>
 8119748:	06d1      	lsls	r1, r2, #27
 811974a:	bf44      	itt	mi
 811974c:	2320      	movmi	r3, #32
 811974e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8119752:	0713      	lsls	r3, r2, #28
 8119754:	bf44      	itt	mi
 8119756:	232b      	movmi	r3, #43	; 0x2b
 8119758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 811975c:	f89a 3000 	ldrb.w	r3, [sl]
 8119760:	2b2a      	cmp	r3, #42	; 0x2a
 8119762:	d015      	beq.n	8119790 <_vfiprintf_r+0x13c>
 8119764:	9a07      	ldr	r2, [sp, #28]
 8119766:	4654      	mov	r4, sl
 8119768:	2000      	movs	r0, #0
 811976a:	f04f 0c0a 	mov.w	ip, #10
 811976e:	4621      	mov	r1, r4
 8119770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8119774:	3b30      	subs	r3, #48	; 0x30
 8119776:	2b09      	cmp	r3, #9
 8119778:	d94e      	bls.n	8119818 <_vfiprintf_r+0x1c4>
 811977a:	b1b0      	cbz	r0, 81197aa <_vfiprintf_r+0x156>
 811977c:	9207      	str	r2, [sp, #28]
 811977e:	e014      	b.n	81197aa <_vfiprintf_r+0x156>
 8119780:	eba0 0308 	sub.w	r3, r0, r8
 8119784:	fa09 f303 	lsl.w	r3, r9, r3
 8119788:	4313      	orrs	r3, r2
 811978a:	9304      	str	r3, [sp, #16]
 811978c:	46a2      	mov	sl, r4
 811978e:	e7d2      	b.n	8119736 <_vfiprintf_r+0xe2>
 8119790:	9b03      	ldr	r3, [sp, #12]
 8119792:	1d19      	adds	r1, r3, #4
 8119794:	681b      	ldr	r3, [r3, #0]
 8119796:	9103      	str	r1, [sp, #12]
 8119798:	2b00      	cmp	r3, #0
 811979a:	bfbb      	ittet	lt
 811979c:	425b      	neglt	r3, r3
 811979e:	f042 0202 	orrlt.w	r2, r2, #2
 81197a2:	9307      	strge	r3, [sp, #28]
 81197a4:	9307      	strlt	r3, [sp, #28]
 81197a6:	bfb8      	it	lt
 81197a8:	9204      	strlt	r2, [sp, #16]
 81197aa:	7823      	ldrb	r3, [r4, #0]
 81197ac:	2b2e      	cmp	r3, #46	; 0x2e
 81197ae:	d10c      	bne.n	81197ca <_vfiprintf_r+0x176>
 81197b0:	7863      	ldrb	r3, [r4, #1]
 81197b2:	2b2a      	cmp	r3, #42	; 0x2a
 81197b4:	d135      	bne.n	8119822 <_vfiprintf_r+0x1ce>
 81197b6:	9b03      	ldr	r3, [sp, #12]
 81197b8:	1d1a      	adds	r2, r3, #4
 81197ba:	681b      	ldr	r3, [r3, #0]
 81197bc:	9203      	str	r2, [sp, #12]
 81197be:	2b00      	cmp	r3, #0
 81197c0:	bfb8      	it	lt
 81197c2:	f04f 33ff 	movlt.w	r3, #4294967295
 81197c6:	3402      	adds	r4, #2
 81197c8:	9305      	str	r3, [sp, #20]
 81197ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 81198b0 <_vfiprintf_r+0x25c>
 81197ce:	7821      	ldrb	r1, [r4, #0]
 81197d0:	2203      	movs	r2, #3
 81197d2:	4650      	mov	r0, sl
 81197d4:	f7e6 fd8c 	bl	81002f0 <memchr>
 81197d8:	b140      	cbz	r0, 81197ec <_vfiprintf_r+0x198>
 81197da:	2340      	movs	r3, #64	; 0x40
 81197dc:	eba0 000a 	sub.w	r0, r0, sl
 81197e0:	fa03 f000 	lsl.w	r0, r3, r0
 81197e4:	9b04      	ldr	r3, [sp, #16]
 81197e6:	4303      	orrs	r3, r0
 81197e8:	3401      	adds	r4, #1
 81197ea:	9304      	str	r3, [sp, #16]
 81197ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 81197f0:	482c      	ldr	r0, [pc, #176]	; (81198a4 <_vfiprintf_r+0x250>)
 81197f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81197f6:	2206      	movs	r2, #6
 81197f8:	f7e6 fd7a 	bl	81002f0 <memchr>
 81197fc:	2800      	cmp	r0, #0
 81197fe:	d03f      	beq.n	8119880 <_vfiprintf_r+0x22c>
 8119800:	4b29      	ldr	r3, [pc, #164]	; (81198a8 <_vfiprintf_r+0x254>)
 8119802:	bb1b      	cbnz	r3, 811984c <_vfiprintf_r+0x1f8>
 8119804:	9b03      	ldr	r3, [sp, #12]
 8119806:	3307      	adds	r3, #7
 8119808:	f023 0307 	bic.w	r3, r3, #7
 811980c:	3308      	adds	r3, #8
 811980e:	9303      	str	r3, [sp, #12]
 8119810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119812:	443b      	add	r3, r7
 8119814:	9309      	str	r3, [sp, #36]	; 0x24
 8119816:	e767      	b.n	81196e8 <_vfiprintf_r+0x94>
 8119818:	fb0c 3202 	mla	r2, ip, r2, r3
 811981c:	460c      	mov	r4, r1
 811981e:	2001      	movs	r0, #1
 8119820:	e7a5      	b.n	811976e <_vfiprintf_r+0x11a>
 8119822:	2300      	movs	r3, #0
 8119824:	3401      	adds	r4, #1
 8119826:	9305      	str	r3, [sp, #20]
 8119828:	4619      	mov	r1, r3
 811982a:	f04f 0c0a 	mov.w	ip, #10
 811982e:	4620      	mov	r0, r4
 8119830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8119834:	3a30      	subs	r2, #48	; 0x30
 8119836:	2a09      	cmp	r2, #9
 8119838:	d903      	bls.n	8119842 <_vfiprintf_r+0x1ee>
 811983a:	2b00      	cmp	r3, #0
 811983c:	d0c5      	beq.n	81197ca <_vfiprintf_r+0x176>
 811983e:	9105      	str	r1, [sp, #20]
 8119840:	e7c3      	b.n	81197ca <_vfiprintf_r+0x176>
 8119842:	fb0c 2101 	mla	r1, ip, r1, r2
 8119846:	4604      	mov	r4, r0
 8119848:	2301      	movs	r3, #1
 811984a:	e7f0      	b.n	811982e <_vfiprintf_r+0x1da>
 811984c:	ab03      	add	r3, sp, #12
 811984e:	9300      	str	r3, [sp, #0]
 8119850:	462a      	mov	r2, r5
 8119852:	4b16      	ldr	r3, [pc, #88]	; (81198ac <_vfiprintf_r+0x258>)
 8119854:	a904      	add	r1, sp, #16
 8119856:	4630      	mov	r0, r6
 8119858:	f7fd fbec 	bl	8117034 <_printf_float>
 811985c:	4607      	mov	r7, r0
 811985e:	1c78      	adds	r0, r7, #1
 8119860:	d1d6      	bne.n	8119810 <_vfiprintf_r+0x1bc>
 8119862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8119864:	07d9      	lsls	r1, r3, #31
 8119866:	d405      	bmi.n	8119874 <_vfiprintf_r+0x220>
 8119868:	89ab      	ldrh	r3, [r5, #12]
 811986a:	059a      	lsls	r2, r3, #22
 811986c:	d402      	bmi.n	8119874 <_vfiprintf_r+0x220>
 811986e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8119870:	f7fd fac0 	bl	8116df4 <__retarget_lock_release_recursive>
 8119874:	89ab      	ldrh	r3, [r5, #12]
 8119876:	065b      	lsls	r3, r3, #25
 8119878:	f53f af12 	bmi.w	81196a0 <_vfiprintf_r+0x4c>
 811987c:	9809      	ldr	r0, [sp, #36]	; 0x24
 811987e:	e711      	b.n	81196a4 <_vfiprintf_r+0x50>
 8119880:	ab03      	add	r3, sp, #12
 8119882:	9300      	str	r3, [sp, #0]
 8119884:	462a      	mov	r2, r5
 8119886:	4b09      	ldr	r3, [pc, #36]	; (81198ac <_vfiprintf_r+0x258>)
 8119888:	a904      	add	r1, sp, #16
 811988a:	4630      	mov	r0, r6
 811988c:	f7fd fe76 	bl	811757c <_printf_i>
 8119890:	e7e4      	b.n	811985c <_vfiprintf_r+0x208>
 8119892:	bf00      	nop
 8119894:	0811b8d0 	.word	0x0811b8d0
 8119898:	0811b8f0 	.word	0x0811b8f0
 811989c:	0811b8b0 	.word	0x0811b8b0
 81198a0:	0811bbd4 	.word	0x0811bbd4
 81198a4:	0811bbde 	.word	0x0811bbde
 81198a8:	08117035 	.word	0x08117035
 81198ac:	0811962f 	.word	0x0811962f
 81198b0:	0811bbda 	.word	0x0811bbda

081198b4 <_read_r>:
 81198b4:	b538      	push	{r3, r4, r5, lr}
 81198b6:	4d07      	ldr	r5, [pc, #28]	; (81198d4 <_read_r+0x20>)
 81198b8:	4604      	mov	r4, r0
 81198ba:	4608      	mov	r0, r1
 81198bc:	4611      	mov	r1, r2
 81198be:	2200      	movs	r2, #0
 81198c0:	602a      	str	r2, [r5, #0]
 81198c2:	461a      	mov	r2, r3
 81198c4:	f7fc fc7c 	bl	81161c0 <_read>
 81198c8:	1c43      	adds	r3, r0, #1
 81198ca:	d102      	bne.n	81198d2 <_read_r+0x1e>
 81198cc:	682b      	ldr	r3, [r5, #0]
 81198ce:	b103      	cbz	r3, 81198d2 <_read_r+0x1e>
 81198d0:	6023      	str	r3, [r4, #0]
 81198d2:	bd38      	pop	{r3, r4, r5, pc}
 81198d4:	100087d4 	.word	0x100087d4

081198d8 <abort>:
 81198d8:	b508      	push	{r3, lr}
 81198da:	2006      	movs	r0, #6
 81198dc:	f000 f860 	bl	81199a0 <raise>
 81198e0:	2001      	movs	r0, #1
 81198e2:	f000 f897 	bl	8119a14 <_exit>
	...

081198e8 <_fstat_r>:
 81198e8:	b538      	push	{r3, r4, r5, lr}
 81198ea:	4d07      	ldr	r5, [pc, #28]	; (8119908 <_fstat_r+0x20>)
 81198ec:	2300      	movs	r3, #0
 81198ee:	4604      	mov	r4, r0
 81198f0:	4608      	mov	r0, r1
 81198f2:	4611      	mov	r1, r2
 81198f4:	602b      	str	r3, [r5, #0]
 81198f6:	f7fc fc8b 	bl	8116210 <_fstat>
 81198fa:	1c43      	adds	r3, r0, #1
 81198fc:	d102      	bne.n	8119904 <_fstat_r+0x1c>
 81198fe:	682b      	ldr	r3, [r5, #0]
 8119900:	b103      	cbz	r3, 8119904 <_fstat_r+0x1c>
 8119902:	6023      	str	r3, [r4, #0]
 8119904:	bd38      	pop	{r3, r4, r5, pc}
 8119906:	bf00      	nop
 8119908:	100087d4 	.word	0x100087d4

0811990c <_isatty_r>:
 811990c:	b538      	push	{r3, r4, r5, lr}
 811990e:	4d06      	ldr	r5, [pc, #24]	; (8119928 <_isatty_r+0x1c>)
 8119910:	2300      	movs	r3, #0
 8119912:	4604      	mov	r4, r0
 8119914:	4608      	mov	r0, r1
 8119916:	602b      	str	r3, [r5, #0]
 8119918:	f7fc fbe0 	bl	81160dc <_isatty>
 811991c:	1c43      	adds	r3, r0, #1
 811991e:	d102      	bne.n	8119926 <_isatty_r+0x1a>
 8119920:	682b      	ldr	r3, [r5, #0]
 8119922:	b103      	cbz	r3, 8119926 <_isatty_r+0x1a>
 8119924:	6023      	str	r3, [r4, #0]
 8119926:	bd38      	pop	{r3, r4, r5, pc}
 8119928:	100087d4 	.word	0x100087d4

0811992c <__ascii_mbtowc>:
 811992c:	b082      	sub	sp, #8
 811992e:	b901      	cbnz	r1, 8119932 <__ascii_mbtowc+0x6>
 8119930:	a901      	add	r1, sp, #4
 8119932:	b142      	cbz	r2, 8119946 <__ascii_mbtowc+0x1a>
 8119934:	b14b      	cbz	r3, 811994a <__ascii_mbtowc+0x1e>
 8119936:	7813      	ldrb	r3, [r2, #0]
 8119938:	600b      	str	r3, [r1, #0]
 811993a:	7812      	ldrb	r2, [r2, #0]
 811993c:	1e10      	subs	r0, r2, #0
 811993e:	bf18      	it	ne
 8119940:	2001      	movne	r0, #1
 8119942:	b002      	add	sp, #8
 8119944:	4770      	bx	lr
 8119946:	4610      	mov	r0, r2
 8119948:	e7fb      	b.n	8119942 <__ascii_mbtowc+0x16>
 811994a:	f06f 0001 	mvn.w	r0, #1
 811994e:	e7f8      	b.n	8119942 <__ascii_mbtowc+0x16>

08119950 <_raise_r>:
 8119950:	291f      	cmp	r1, #31
 8119952:	b538      	push	{r3, r4, r5, lr}
 8119954:	4604      	mov	r4, r0
 8119956:	460d      	mov	r5, r1
 8119958:	d904      	bls.n	8119964 <_raise_r+0x14>
 811995a:	2316      	movs	r3, #22
 811995c:	6003      	str	r3, [r0, #0]
 811995e:	f04f 30ff 	mov.w	r0, #4294967295
 8119962:	bd38      	pop	{r3, r4, r5, pc}
 8119964:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8119966:	b112      	cbz	r2, 811996e <_raise_r+0x1e>
 8119968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811996c:	b94b      	cbnz	r3, 8119982 <_raise_r+0x32>
 811996e:	4620      	mov	r0, r4
 8119970:	f000 f830 	bl	81199d4 <_getpid_r>
 8119974:	462a      	mov	r2, r5
 8119976:	4601      	mov	r1, r0
 8119978:	4620      	mov	r0, r4
 811997a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811997e:	f000 b817 	b.w	81199b0 <_kill_r>
 8119982:	2b01      	cmp	r3, #1
 8119984:	d00a      	beq.n	811999c <_raise_r+0x4c>
 8119986:	1c59      	adds	r1, r3, #1
 8119988:	d103      	bne.n	8119992 <_raise_r+0x42>
 811998a:	2316      	movs	r3, #22
 811998c:	6003      	str	r3, [r0, #0]
 811998e:	2001      	movs	r0, #1
 8119990:	e7e7      	b.n	8119962 <_raise_r+0x12>
 8119992:	2400      	movs	r4, #0
 8119994:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8119998:	4628      	mov	r0, r5
 811999a:	4798      	blx	r3
 811999c:	2000      	movs	r0, #0
 811999e:	e7e0      	b.n	8119962 <_raise_r+0x12>

081199a0 <raise>:
 81199a0:	4b02      	ldr	r3, [pc, #8]	; (81199ac <raise+0xc>)
 81199a2:	4601      	mov	r1, r0
 81199a4:	6818      	ldr	r0, [r3, #0]
 81199a6:	f7ff bfd3 	b.w	8119950 <_raise_r>
 81199aa:	bf00      	nop
 81199ac:	1000002c 	.word	0x1000002c

081199b0 <_kill_r>:
 81199b0:	b538      	push	{r3, r4, r5, lr}
 81199b2:	4d07      	ldr	r5, [pc, #28]	; (81199d0 <_kill_r+0x20>)
 81199b4:	2300      	movs	r3, #0
 81199b6:	4604      	mov	r4, r0
 81199b8:	4608      	mov	r0, r1
 81199ba:	4611      	mov	r1, r2
 81199bc:	602b      	str	r3, [r5, #0]
 81199be:	f000 f821 	bl	8119a04 <_kill>
 81199c2:	1c43      	adds	r3, r0, #1
 81199c4:	d102      	bne.n	81199cc <_kill_r+0x1c>
 81199c6:	682b      	ldr	r3, [r5, #0]
 81199c8:	b103      	cbz	r3, 81199cc <_kill_r+0x1c>
 81199ca:	6023      	str	r3, [r4, #0]
 81199cc:	bd38      	pop	{r3, r4, r5, pc}
 81199ce:	bf00      	nop
 81199d0:	100087d4 	.word	0x100087d4

081199d4 <_getpid_r>:
 81199d4:	f000 b80e 	b.w	81199f4 <_getpid>

081199d8 <__ascii_wctomb>:
 81199d8:	b149      	cbz	r1, 81199ee <__ascii_wctomb+0x16>
 81199da:	2aff      	cmp	r2, #255	; 0xff
 81199dc:	bf85      	ittet	hi
 81199de:	238a      	movhi	r3, #138	; 0x8a
 81199e0:	6003      	strhi	r3, [r0, #0]
 81199e2:	700a      	strbls	r2, [r1, #0]
 81199e4:	f04f 30ff 	movhi.w	r0, #4294967295
 81199e8:	bf98      	it	ls
 81199ea:	2001      	movls	r0, #1
 81199ec:	4770      	bx	lr
 81199ee:	4608      	mov	r0, r1
 81199f0:	4770      	bx	lr
	...

081199f4 <_getpid>:
 81199f4:	4b02      	ldr	r3, [pc, #8]	; (8119a00 <_getpid+0xc>)
 81199f6:	2258      	movs	r2, #88	; 0x58
 81199f8:	601a      	str	r2, [r3, #0]
 81199fa:	f04f 30ff 	mov.w	r0, #4294967295
 81199fe:	4770      	bx	lr
 8119a00:	100087d4 	.word	0x100087d4

08119a04 <_kill>:
 8119a04:	4b02      	ldr	r3, [pc, #8]	; (8119a10 <_kill+0xc>)
 8119a06:	2258      	movs	r2, #88	; 0x58
 8119a08:	601a      	str	r2, [r3, #0]
 8119a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8119a0e:	4770      	bx	lr
 8119a10:	100087d4 	.word	0x100087d4

08119a14 <_exit>:
 8119a14:	e7fe      	b.n	8119a14 <_exit>
	...

08119a18 <_init>:
 8119a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8119a1a:	bf00      	nop
 8119a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8119a1e:	bc08      	pop	{r3}
 8119a20:	469e      	mov	lr, r3
 8119a22:	4770      	bx	lr

08119a24 <_fini>:
 8119a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8119a26:	bf00      	nop
 8119a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8119a2a:	bc08      	pop	{r3}
 8119a2c:	469e      	mov	lr, r3
 8119a2e:	4770      	bx	lr
